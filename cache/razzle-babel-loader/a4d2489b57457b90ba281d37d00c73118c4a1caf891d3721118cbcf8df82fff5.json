{"ast":null,"code":"import { Transforms } from 'slate';\nimport config from '@plone/volto/registry';\nimport { isCursorInList, isCursorAtListBlockStart, deconstructToVoltoBlocks } from 'volto-slate/utils';\n\n/**\n * Handle the new Volto blocks created by `deconstructToVoltoBlocks`.\n * @param {Editor} editor The Slate editor object\n * @param {string[]} newIds The IDs of the newly created Volto blocks.\n */\nconst handleNewVoltoBlocks = (editor, newIds) => {\n  const props = editor.getBlockProps();\n  props.onSelectBlock(newIds[0]);\n};\n\n/**\n * Handles the Backspace key press event in the given `editor`.\n *\n * @param {Editor} editor\n * @param {Event} event\n */\nexport function backspaceInList({\n  editor,\n  event\n}) {\n  // If the cursor is not in a list, nothing special.\n  if (!isCursorInList(editor)) return false;\n  if (isCursorAtListBlockStart(editor)) {\n    const {\n      slate\n    } = config.settings;\n    const blockProps = editor.getBlockProps();\n    const {\n      data\n    } = blockProps;\n\n    // Can't split if block is required\n    if (data !== null && data !== void 0 && data.required) return;\n\n    // Raise all LI-s as direct children of the editor.\n    // TODO: add check for path depth\n    // Error: Cannot lift node at a path [0] because it has a depth of less\n    // than `2`.\n    Transforms.liftNodes(editor, {\n      match: (n, path) => {\n        // console.log('lift', n, path);\n        return path.length > 1 && n.type === slate.listItemType;\n      }\n    });\n\n    // Convert all the selection to be of type `slate.defaultBlockType` (by\n    // default 'p' or paragraph).\n    Transforms.setNodes(editor, {\n      type: slate.defaultBlockType\n    });\n    deconstructToVoltoBlocks(editor).then(newIds => {\n      handleNewVoltoBlocks(editor, newIds);\n    });\n    return true;\n  }\n}","map":{"version":3,"names":["Transforms","config","isCursorInList","isCursorAtListBlockStart","deconstructToVoltoBlocks","handleNewVoltoBlocks","editor","newIds","props","getBlockProps","onSelectBlock","backspaceInList","event","slate","settings","blockProps","data","required","liftNodes","match","n","path","length","type","listItemType","setNodes","defaultBlockType","then"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-slate/src/blocks/Text/keyboard/backspaceInList.js"],"sourcesContent":["import { Transforms } from 'slate';\nimport config from '@plone/volto/registry';\nimport {\n  isCursorInList,\n  isCursorAtListBlockStart,\n  deconstructToVoltoBlocks,\n} from 'volto-slate/utils';\n\n/**\n * Handle the new Volto blocks created by `deconstructToVoltoBlocks`.\n * @param {Editor} editor The Slate editor object\n * @param {string[]} newIds The IDs of the newly created Volto blocks.\n */\nconst handleNewVoltoBlocks = (editor, newIds) => {\n  const props = editor.getBlockProps();\n  props.onSelectBlock(newIds[0]);\n};\n\n/**\n * Handles the Backspace key press event in the given `editor`.\n *\n * @param {Editor} editor\n * @param {Event} event\n */\nexport function backspaceInList({ editor, event }) {\n  // If the cursor is not in a list, nothing special.\n  if (!isCursorInList(editor)) return false;\n\n  if (isCursorAtListBlockStart(editor)) {\n    const { slate } = config.settings;\n    const blockProps = editor.getBlockProps();\n    const { data } = blockProps;\n\n    // Can't split if block is required\n    if (data?.required) return;\n\n    // Raise all LI-s as direct children of the editor.\n    // TODO: add check for path depth\n    // Error: Cannot lift node at a path [0] because it has a depth of less\n    // than `2`.\n    Transforms.liftNodes(editor, {\n      match: (n, path) => {\n        // console.log('lift', n, path);\n        return path.length > 1 && n.type === slate.listItemType;\n      },\n    });\n\n    // Convert all the selection to be of type `slate.defaultBlockType` (by\n    // default 'p' or paragraph).\n    Transforms.setNodes(editor, { type: slate.defaultBlockType });\n\n    deconstructToVoltoBlocks(editor).then((newIds) => {\n      handleNewVoltoBlocks(editor, newIds);\n    });\n\n    return true;\n  }\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,OAAO;AAClC,OAAOC,MAAM,MAAM,uBAAuB;AAC1C,SACEC,cAAc,EACdC,wBAAwB,EACxBC,wBAAwB,QACnB,mBAAmB;;AAE1B;AACA;AACA;AACA;AACA;AACA,MAAMC,oBAAoB,GAAG,CAACC,MAAM,EAAEC,MAAM,KAAK;EAC/C,MAAMC,KAAK,GAAGF,MAAM,CAACG,aAAa,EAAE;EACpCD,KAAK,CAACE,aAAa,CAACH,MAAM,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,eAAe,CAAC;EAAEL,MAAM;EAAEM;AAAM,CAAC,EAAE;EACjD;EACA,IAAI,CAACV,cAAc,CAACI,MAAM,CAAC,EAAE,OAAO,KAAK;EAEzC,IAAIH,wBAAwB,CAACG,MAAM,CAAC,EAAE;IACpC,MAAM;MAAEO;IAAM,CAAC,GAAGZ,MAAM,CAACa,QAAQ;IACjC,MAAMC,UAAU,GAAGT,MAAM,CAACG,aAAa,EAAE;IACzC,MAAM;MAAEO;IAAK,CAAC,GAAGD,UAAU;;IAE3B;IACA,IAAIC,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEC,QAAQ,EAAE;;IAEpB;IACA;IACA;IACA;IACAjB,UAAU,CAACkB,SAAS,CAACZ,MAAM,EAAE;MAC3Ba,KAAK,EAAE,CAACC,CAAC,EAAEC,IAAI,KAAK;QAClB;QACA,OAAOA,IAAI,CAACC,MAAM,GAAG,CAAC,IAAIF,CAAC,CAACG,IAAI,KAAKV,KAAK,CAACW,YAAY;MACzD;IACF,CAAC,CAAC;;IAEF;IACA;IACAxB,UAAU,CAACyB,QAAQ,CAACnB,MAAM,EAAE;MAAEiB,IAAI,EAAEV,KAAK,CAACa;IAAiB,CAAC,CAAC;IAE7DtB,wBAAwB,CAACE,MAAM,CAAC,CAACqB,IAAI,CAAEpB,MAAM,IAAK;MAChDF,oBAAoB,CAACC,MAAM,EAAEC,MAAM,CAAC;IACtC,CAAC,CAAC;IAEF,OAAO,IAAI;EACb;AACF"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}