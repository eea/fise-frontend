{"ast":null,"code":"import _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _find from \"lodash/find\";\nimport _endsWith from \"lodash/endsWith\";\nimport _keys from \"lodash/keys\";\nimport _map from \"lodash/map\";\nimport _pickBy from \"lodash/pickBy\";\nimport _mapKeys from \"lodash/mapKeys\";\nimport _omitBy from \"lodash/omitBy\";\nimport config from '@plone/volto/registry';\n\n/**\n * Nest content.\n * @function nestContent\n * @param {Object} props Properties.\n * @return {string} Field name of the block\n */\nexport function nestContent(props) {\n  if (!props['@static_behaviors']) {\n    return props;\n  }\n  var nestedProps = props;\n  _map(props['@static_behaviors'], function (behavior) {\n    var values = _mapKeys(_pickBy(nestedProps, function (value, key) {\n      return key.indexOf(behavior) !== -1;\n    }), function (value, key) {\n      return key.replace(\"\".concat(behavior, \".\"), '');\n    });\n    nestedProps = _omitBy(nestedProps, function (value, key) {\n      return key.indexOf(behavior) !== -1;\n    });\n    nestedProps = _objectSpread(_objectSpread({}, nestedProps), {}, _defineProperty({}, behavior, values));\n  });\n  return nestedProps;\n}\n\n/**\n * Get layout field.\n * @function getLayoutFieldname\n * @param {Object} props Properties.\n * @return {string} Field name of the layout\n */\nexport function getLayoutFieldname(props) {\n  return _find(_keys(props), function (key) {\n    return _endsWith(key, 'content_layout');\n  }) || 'layout';\n}\n\n/**\n * Get content icon.\n * @description Configurable in config\n * @function getContentIcon\n * @param {string} type Content type\n * @param {boolean} isFolderish\n * @returns {Object} Icon component\n */\nexport function getContentIcon(type, isFolderish) {\n  var settings = config.settings;\n  var contentIcons = settings.contentIcons;\n  if (type in contentIcons) return contentIcons[type];\n  return isFolderish ? contentIcons.Folder : contentIcons.File;\n}\n\n/**\n * Get the language independent fields presents in a schema.\n * @description Configurable in config\n * @function getLanguageIndependentFields\n * @param {string} schema content type JSON Schema serialization\n * @returns {array} List of language independent fields\n */\nexport function getLanguageIndependentFields(schema) {\n  var properties = schema.properties;\n  return Object.keys(properties).filter(function (field) {\n    var _properties$field$mul;\n    return Object.keys(properties[field]).includes('multilingual_options') && ((_properties$field$mul = properties[field]['multilingual_options']) === null || _properties$field$mul === void 0 ? void 0 : _properties$field$mul['language_independent']);\n  });\n}","map":{"version":3,"names":["config","nestContent","props","nestedProps","behavior","values","value","key","indexOf","replace","getLayoutFieldname","getContentIcon","type","isFolderish","settings","contentIcons","Folder","File","getLanguageIndependentFields","schema","properties","Object","keys","filter","field","includes"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/helpers/Content/Content.js"],"sourcesContent":["/**\n * Content helper.\n * @module helpers/Content\n */\n\nimport { omitBy, mapKeys, pickBy, map, keys, endsWith, find } from 'lodash';\nimport config from '@plone/volto/registry';\n\n/**\n * Nest content.\n * @function nestContent\n * @param {Object} props Properties.\n * @return {string} Field name of the block\n */\nexport function nestContent(props) {\n  if (!props['@static_behaviors']) {\n    return props;\n  }\n\n  let nestedProps = props;\n\n  map(props['@static_behaviors'], (behavior) => {\n    const values = mapKeys(\n      pickBy(nestedProps, (value, key) => key.indexOf(behavior) !== -1),\n      (value, key) => key.replace(`${behavior}.`, ''),\n    );\n    nestedProps = omitBy(\n      nestedProps,\n      (value, key) => key.indexOf(behavior) !== -1,\n    );\n    nestedProps = {\n      ...nestedProps,\n      [behavior]: values,\n    };\n  });\n  return nestedProps;\n}\n\n/**\n * Get layout field.\n * @function getLayoutFieldname\n * @param {Object} props Properties.\n * @return {string} Field name of the layout\n */\nexport function getLayoutFieldname(props) {\n  return (\n    find(keys(props), (key) => endsWith(key, 'content_layout')) || 'layout'\n  );\n}\n\n/**\n * Get content icon.\n * @description Configurable in config\n * @function getContentIcon\n * @param {string} type Content type\n * @param {boolean} isFolderish\n * @returns {Object} Icon component\n */\nexport function getContentIcon(type, isFolderish) {\n  const { settings } = config;\n  const { contentIcons } = settings;\n\n  if (type in contentIcons) return contentIcons[type];\n  return isFolderish ? contentIcons.Folder : contentIcons.File;\n}\n\n/**\n * Get the language independent fields presents in a schema.\n * @description Configurable in config\n * @function getLanguageIndependentFields\n * @param {string} schema content type JSON Schema serialization\n * @returns {array} List of language independent fields\n */\nexport function getLanguageIndependentFields(schema) {\n  const { properties } = schema;\n  return Object.keys(properties).filter(\n    (field) =>\n      Object.keys(properties[field]).includes('multilingual_options') &&\n      properties[field]['multilingual_options']?.['language_independent'],\n  );\n}\n"],"mappings":";;;;;;;;;AAMA,OAAOA,MAAM,MAAM,uBAAuB;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAW,CAACC,KAAK,EAAE;EACjC,IAAI,CAACA,KAAK,CAAC,mBAAmB,CAAC,EAAE;IAC/B,OAAOA,KAAK;EACd;EAEA,IAAIC,WAAW,GAAGD,KAAK;EAEvB,KAAIA,KAAK,CAAC,mBAAmB,CAAC,EAAE,UAACE,QAAQ,EAAK;IAC5C,IAAMC,MAAM,GAAG,SACb,QAAOF,WAAW,EAAE,UAACG,KAAK,EAAEC,GAAG;MAAA,OAAKA,GAAG,CAACC,OAAO,CAACJ,QAAQ,CAAC,KAAK,CAAC,CAAC;IAAA,EAAC,EACjE,UAACE,KAAK,EAAEC,GAAG;MAAA,OAAKA,GAAG,CAACE,OAAO,WAAIL,QAAQ,QAAK,EAAE,CAAC;IAAA,EAChD;IACDD,WAAW,GAAG,QACZA,WAAW,EACX,UAACG,KAAK,EAAEC,GAAG;MAAA,OAAKA,GAAG,CAACC,OAAO,CAACJ,QAAQ,CAAC,KAAK,CAAC,CAAC;IAAA,EAC7C;IACDD,WAAW,mCACNA,WAAW,2BACbC,QAAQ,EAAGC,MAAM,EACnB;EACH,CAAC,CAAC;EACF,OAAOF,WAAW;AACpB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASO,kBAAkB,CAACR,KAAK,EAAE;EACxC,OACE,MAAK,MAAKA,KAAK,CAAC,EAAE,UAACK,GAAG;IAAA,OAAK,UAASA,GAAG,EAAE,gBAAgB,CAAC;EAAA,EAAC,IAAI,QAAQ;AAE3E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,cAAc,CAACC,IAAI,EAAEC,WAAW,EAAE;EAChD,IAAQC,QAAQ,GAAKd,MAAM,CAAnBc,QAAQ;EAChB,IAAQC,YAAY,GAAKD,QAAQ,CAAzBC,YAAY;EAEpB,IAAIH,IAAI,IAAIG,YAAY,EAAE,OAAOA,YAAY,CAACH,IAAI,CAAC;EACnD,OAAOC,WAAW,GAAGE,YAAY,CAACC,MAAM,GAAGD,YAAY,CAACE,IAAI;AAC9D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,4BAA4B,CAACC,MAAM,EAAE;EACnD,IAAQC,UAAU,GAAKD,MAAM,CAArBC,UAAU;EAClB,OAAOC,MAAM,CAACC,IAAI,CAACF,UAAU,CAAC,CAACG,MAAM,CACnC,UAACC,KAAK;IAAA;IAAA,OACJH,MAAM,CAACC,IAAI,CAACF,UAAU,CAACI,KAAK,CAAC,CAAC,CAACC,QAAQ,CAAC,sBAAsB,CAAC,8BAC/DL,UAAU,CAACI,KAAK,CAAC,CAAC,sBAAsB,CAAC,0DAAzC,sBAA4C,sBAAsB,CAAC;EAAA,EACtE;AACH"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}