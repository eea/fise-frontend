{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Blocks/Search/hocs/withQueryString.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getQuerystring } from '@plone/volto/actions';\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\n\n/**\n * A HOC that injects querystring metadata information from the backend.\n *\n */\nexport default (WrappedComponent => {\n  function WithQueryString(props) {\n    const dispatch = useDispatch();\n    const qs = useSelector(state => state.querystring);\n    const indexes = (qs === null || qs === void 0 ? void 0 : qs.indexes) || {};\n    React.useEffect(() => {\n      if (Object.keys(indexes).length === 0) {\n        dispatch(getQuerystring());\n      }\n    }, [dispatch, indexes]);\n    return __jsx(WrappedComponent, _extends({}, props, {\n      querystring: qs,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 12\n      }\n    }));\n  }\n  WithQueryString.displayName = `WithQueryString(${getDisplayName(WrappedComponent)})`;\n  return WithQueryString;\n});","map":{"version":3,"names":["React","useDispatch","useSelector","getQuerystring","getDisplayName","WrappedComponent","displayName","name","WithQueryString","props","dispatch","qs","state","querystring","indexes","useEffect","Object","keys","length"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Blocks/Search/hocs/withQueryString.jsx"],"sourcesContent":["import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getQuerystring } from '@plone/volto/actions';\n\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\n\n/**\n * A HOC that injects querystring metadata information from the backend.\n *\n */\nexport default (WrappedComponent) => {\n  function WithQueryString(props) {\n    const dispatch = useDispatch();\n\n    const qs = useSelector((state) => state.querystring);\n    const indexes = qs?.indexes || {};\n\n    React.useEffect(() => {\n      if (Object.keys(indexes).length === 0) {\n        dispatch(getQuerystring());\n      }\n    }, [dispatch, indexes]);\n\n    return <WrappedComponent {...props} querystring={qs} />;\n  }\n  WithQueryString.displayName = `WithQueryString(${getDisplayName(\n    WrappedComponent,\n  )})`;\n  return WithQueryString;\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,cAAc,QAAQ,sBAAsB;AAErD,SAASC,cAAc,CAACC,gBAAgB,EAAE;EACxC,OAAOA,gBAAgB,CAACC,WAAW,IAAID,gBAAgB,CAACE,IAAI,IAAI,WAAW;AAC7E;;AAEA;AACA;AACA;AACA;AACA,gBAAgBF,gBAAgB,IAAK;EACnC,SAASG,eAAe,CAACC,KAAK,EAAE;IAC9B,MAAMC,QAAQ,GAAGT,WAAW,EAAE;IAE9B,MAAMU,EAAE,GAAGT,WAAW,CAAEU,KAAK,IAAKA,KAAK,CAACC,WAAW,CAAC;IACpD,MAAMC,OAAO,GAAG,CAAAH,EAAE,aAAFA,EAAE,uBAAFA,EAAE,CAAEG,OAAO,KAAI,CAAC,CAAC;IAEjCd,KAAK,CAACe,SAAS,CAAC,MAAM;MACpB,IAAIC,MAAM,CAACC,IAAI,CAACH,OAAO,CAAC,CAACI,MAAM,KAAK,CAAC,EAAE;QACrCR,QAAQ,CAACP,cAAc,EAAE,CAAC;MAC5B;IACF,CAAC,EAAE,CAACO,QAAQ,EAAEI,OAAO,CAAC,CAAC;IAEvB,OAAO,MAAC,gBAAgB,eAAKL,KAAK;MAAE,WAAW,EAAEE,EAAG;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAG;EACzD;EACAH,eAAe,CAACF,WAAW,GAAI,mBAAkBF,cAAc,CAC7DC,gBAAgB,CAChB,GAAE;EACJ,OAAOG,eAAe;AACxB,CAAC"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}