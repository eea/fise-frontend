{"ast":null,"code":"import _map from \"lodash/map\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Widgets/WysiwygWidget.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n/**\n * WysiwygWidget container.\n * @module components/manage/WysiwygWidget/WysiwygWidget\n */\n\nimport React, { Component } from 'react';\nimport ReactDOMServer from 'react-dom/server';\nimport PropTypes from 'prop-types';\nimport { connect, Provider } from 'react-redux';\nimport { compose } from 'redux';\nimport redraft from 'redraft';\nimport { Form, Label, TextArea } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport configureStore from 'redux-mock-store';\nimport { MemoryRouter } from 'react-router-dom';\nimport config from '@plone/volto/registry';\nimport { FormFieldWrapper } from '@plone/volto/components';\nimport loadable from '@loadable/component';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nconst Editor = loadable({\n  resolved: {},\n  chunkName() {\n    return \"draft-js-plugins-editor\";\n  },\n  isReady(props) {\n    var key = this.resolve(props);\n    if (this.resolved[key] !== true) {\n      return false;\n    }\n    if (typeof __webpack_modules__ !== 'undefined') {\n      return !!__webpack_modules__[key];\n    }\n    return false;\n  },\n  importAsync: () => import( /* webpackChunkName: \"draft-js-plugins-editor\" */'draft-js-plugins-editor'),\n  requireAsync(props) {\n    var _this = this;\n    var key = this.resolve(props);\n    this.resolved[key] = false;\n    return this.importAsync(props).then(function (resolved) {\n      _this.resolved[key] = true;\n      return resolved;\n    });\n  },\n  requireSync(props) {\n    var id = this.resolve(props);\n    if (typeof __webpack_require__ !== 'undefined') {\n      return __webpack_require__(id);\n    }\n    return eval('module.require')(id);\n  },\n  resolve() {\n    if (require.resolveWeak) {\n      return require.resolveWeak(\"draft-js-plugins-editor\");\n    }\n    return eval('require.resolve')(\"draft-js-plugins-editor\");\n  }\n});\nconst messages = defineMessages({\n  default: {\n    \"id\": \"Default\",\n    \"defaultMessage\": \"Default\"\n  },\n  idTitle: {\n    \"id\": \"Short Name\",\n    \"defaultMessage\": \"Short Name\"\n  },\n  idDescription: {\n    \"id\": \"Used for programmatic access to the fieldset.\",\n    \"defaultMessage\": \"Used for programmatic access to the fieldset.\"\n  },\n  title: {\n    \"id\": \"Title\",\n    \"defaultMessage\": \"Title\"\n  },\n  description: {\n    \"id\": \"Description\",\n    \"defaultMessage\": \"Description\"\n  },\n  required: {\n    \"id\": \"Required\",\n    \"defaultMessage\": \"Required\"\n  },\n  delete: {\n    \"id\": \"Delete\",\n    \"defaultMessage\": \"Delete\"\n  }\n});\n\n/**\n * WysiwygWidget HTML richtext editing widget\n *\n * To use it, in schema properties, declare a field like:\n *\n * ```jsx\n * {\n *  title: \"Rich text\",\n *  widget: 'richtext',\n * }\n * ```\n *\n */\nclass WysiwygWidgetComponent extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygWidget\n   */\n  constructor(props) {\n    super(props);\n    const {\n      stateFromHTML\n    } = props.draftJsImportHtml;\n    const {\n      EditorState\n    } = props.draftJs;\n    const createInlineToolbarPlugin = props.draftJsInlineToolbarPlugin.default;\n    this.draftConfig = config.settings.richtextEditorSettings(props);\n    if (!__SERVER__) {\n      let editorState;\n      if (props.value && props.value.data) {\n        const contentState = stateFromHTML(props.value.data, {\n          customBlockFn: this.draftConfig.FromHTMLCustomBlockFn\n        });\n        editorState = EditorState.createWithContent(contentState);\n      } else {\n        editorState = EditorState.createEmpty();\n      }\n      const inlineToolbarPlugin = createInlineToolbarPlugin({\n        structure: this.draftConfig.richTextEditorInlineToolbarButtons\n      });\n      this.state = {\n        editorState,\n        inlineToolbarPlugin\n      };\n    }\n    this.schema = {\n      fieldsets: [{\n        id: 'default',\n        title: props.intl.formatMessage(messages.default),\n        fields: ['title', 'id', 'description', 'required']\n      }],\n      properties: {\n        id: {\n          type: 'string',\n          title: props.intl.formatMessage(messages.idTitle),\n          description: props.intl.formatMessage(messages.idDescription)\n        },\n        title: {\n          type: 'string',\n          title: props.intl.formatMessage(messages.title)\n        },\n        description: {\n          type: 'string',\n          widget: 'textarea',\n          title: props.intl.formatMessage(messages.description)\n        },\n        required: {\n          type: 'boolean',\n          title: props.intl.formatMessage(messages.required)\n        }\n      },\n      required: ['id', 'title']\n    };\n    this.onChange = this.onChange.bind(this);\n  }\n\n  /**\n   * Change handler\n   * @method onChange\n   * @param {object} editorState Editor state.\n   * @returns {undefined}\n   */\n  onChange(editorState) {\n    const {\n      convertToRaw\n    } = this.props.draftJs;\n    this.setState({\n      editorState\n    });\n    const mockStore = configureStore();\n    this.props.onChange(this.props.id, {\n      'content-type': this.props.value ? this.props.value['content-type'] : 'text/html',\n      encoding: this.props.value ? this.props.value.encoding : 'utf8',\n      data: ReactDOMServer.renderToStaticMarkup(__jsx(Provider, {\n        store: mockStore({\n          userSession: {\n            token: this.props.token\n          }\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 9\n        }\n      }, __jsx(MemoryRouter, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 11\n        }\n      }, redraft(convertToRaw(editorState.getCurrentContent()), config.settings.richtextViewSettings.ToHTMLRenderers, config.settings.richtextViewSettings.ToHTMLOptions))))\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const {\n      id,\n      title,\n      description,\n      required,\n      value,\n      error,\n      fieldSet\n    } = this.props;\n    if (__SERVER__) {\n      return __jsx(Form.Field, {\n        inline: true,\n        required: required,\n        error: error.length > 0,\n        className: description ? 'help' : '',\n        id: `${fieldSet || 'field'}-${id}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 9\n        }\n      }, __jsx(\"div\", {\n        className: \"wrapper\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 11\n        }\n      }, __jsx(\"label\", {\n        htmlFor: `field-${id}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 13\n        }\n      }, title), __jsx(TextArea, {\n        id: id,\n        name: id,\n        value: value ? value.data : '',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 13\n        }\n      }), description && __jsx(\"p\", {\n        className: \"help\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 29\n        }\n      }, description), _map(error, message => __jsx(Label, {\n        key: message,\n        basic: true,\n        color: \"red\",\n        pointing: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 15\n        }\n      }, message))));\n    }\n    const {\n      InlineToolbar\n    } = this.state.inlineToolbarPlugin;\n    return __jsx(FormFieldWrapper, _extends({}, this.props, {\n      className: \"wysiwyg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 7\n      }\n    }), __jsx(\"div\", {\n      style: {\n        boxSizing: 'initial'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 9\n      }\n    }, this.props.onChange ? __jsx(React.Fragment, null, __jsx(Editor, {\n      id: `field-${id}`,\n      readOnly: this.props.isDisabled,\n      onChange: this.onChange,\n      editorState: this.state.editorState,\n      plugins: [this.state.inlineToolbarPlugin, ...this.draftConfig.richTextEditorPlugins],\n      placeholder: this.props.placeholder,\n      blockRenderMap: this.draftConfig.extendedBlockRenderMap,\n      blockStyleFn: this.draftConfig.blockStyleFn,\n      customStyleMap: this.draftConfig.customStyleMap,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 15\n      }\n    }), this.props.onChange && __jsx(InlineToolbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 39\n      }\n    })) : __jsx(\"div\", {\n      className: \"DraftEditor-root\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 13\n      }\n    })));\n  }\n}\n_defineProperty(WysiwygWidgetComponent, \"propTypes\", {\n  /**\n   * Id of the field\n   */\n  id: PropTypes.string.isRequired,\n  /**\n   * Title of the field\n   */\n  title: PropTypes.string.isRequired,\n  /**\n   * Description of the field\n   */\n  description: PropTypes.string,\n  /**\n   * True if field is required\n   */\n  required: PropTypes.bool,\n  /**\n   * Value of the field\n   */\n  value: PropTypes.shape({\n    /**\n     * Content type of the value\n     */\n    'content-type': PropTypes.string,\n    /**\n     * Data of the value\n     */\n    data: PropTypes.string,\n    /**\n     * Encoding of the value\n     */\n    encoding: PropTypes.string\n  }),\n  /**\n   * Placeholder for the editor\n   */\n  placeholder: PropTypes.string,\n  /**\n   * List of error messages\n   */\n  error: PropTypes.arrayOf(PropTypes.string),\n  /**\n   * On change handler\n   */\n  onChange: PropTypes.func,\n  /**\n   * On delete handler\n   */\n  onDelete: PropTypes.func,\n  /**\n   * On edit handler\n   */\n  onEdit: PropTypes.func,\n  /**\n   * Wrapped form component\n   */\n  wrapped: PropTypes.bool\n});\n_defineProperty(WysiwygWidgetComponent, \"defaultProps\", {\n  description: null,\n  required: false,\n  value: {\n    'content-type': 'text/html',\n    data: '',\n    encoding: 'utf8'\n  },\n  error: [],\n  onEdit: null,\n  onDelete: null,\n  onChange: null\n});\nexport const WysiwygWidget = compose(injectIntl, injectLazyLibs(['draftJs', 'draftJsBlockBreakoutPlugin', 'draftJsCreateBlockStyleButton', 'draftJsCreateInlineStyleButton', 'draftJsFilters', 'draftJsImportHtml', 'draftJsInlineToolbarPlugin', 'draftJsLibIsSoftNewlineEvent', 'immutableLib']), connect((state, props) => ({\n  token: state.userSession.token\n}), {}))(WysiwygWidgetComponent);\nconst Preloader = props => {\n  const [loaded, setLoaded] = React.useState(false);\n  React.useEffect(() => {\n    Editor.load().then(() => setLoaded(true));\n  }, []);\n  return loaded ? __jsx(WysiwygWidget, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 19\n    }\n  })) : null;\n};\nexport default Preloader;","map":{"version":3,"names":["React","Component","ReactDOMServer","PropTypes","connect","Provider","compose","redraft","Form","Label","TextArea","defineMessages","injectIntl","configureStore","MemoryRouter","config","FormFieldWrapper","loadable","injectLazyLibs","Editor","messages","default","idTitle","idDescription","title","description","required","delete","WysiwygWidgetComponent","constructor","props","stateFromHTML","draftJsImportHtml","EditorState","draftJs","createInlineToolbarPlugin","draftJsInlineToolbarPlugin","draftConfig","settings","richtextEditorSettings","__SERVER__","editorState","value","data","contentState","customBlockFn","FromHTMLCustomBlockFn","createWithContent","createEmpty","inlineToolbarPlugin","structure","richTextEditorInlineToolbarButtons","state","schema","fieldsets","id","intl","formatMessage","fields","properties","type","widget","onChange","bind","convertToRaw","setState","mockStore","encoding","renderToStaticMarkup","userSession","token","getCurrentContent","richtextViewSettings","ToHTMLRenderers","ToHTMLOptions","render","error","fieldSet","length","message","InlineToolbar","boxSizing","isDisabled","richTextEditorPlugins","placeholder","extendedBlockRenderMap","blockStyleFn","customStyleMap","string","isRequired","bool","shape","arrayOf","func","onDelete","onEdit","wrapped","WysiwygWidget","Preloader","loaded","setLoaded","useState","useEffect","load","then"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Widgets/WysiwygWidget.jsx"],"sourcesContent":["/**\n * WysiwygWidget container.\n * @module components/manage/WysiwygWidget/WysiwygWidget\n */\n\nimport React, { Component } from 'react';\nimport ReactDOMServer from 'react-dom/server';\nimport PropTypes from 'prop-types';\nimport { connect, Provider } from 'react-redux';\nimport { compose } from 'redux';\nimport redraft from 'redraft';\nimport { Form, Label, TextArea } from 'semantic-ui-react';\nimport { map } from 'lodash';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport configureStore from 'redux-mock-store';\nimport { MemoryRouter } from 'react-router-dom';\nimport config from '@plone/volto/registry';\n\nimport { FormFieldWrapper } from '@plone/volto/components';\n\nimport loadable from '@loadable/component';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\n\nconst Editor = loadable(() => import('draft-js-plugins-editor'));\n\nconst messages = defineMessages({\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  idTitle: {\n    id: 'Short Name',\n    defaultMessage: 'Short Name',\n  },\n  idDescription: {\n    id: 'Used for programmatic access to the fieldset.',\n    defaultMessage: 'Used for programmatic access to the fieldset.',\n  },\n  title: {\n    id: 'Title',\n    defaultMessage: 'Title',\n  },\n  description: {\n    id: 'Description',\n    defaultMessage: 'Description',\n  },\n  required: {\n    id: 'Required',\n    defaultMessage: 'Required',\n  },\n  delete: {\n    id: 'Delete',\n    defaultMessage: 'Delete',\n  },\n});\n\n/**\n * WysiwygWidget HTML richtext editing widget\n *\n * To use it, in schema properties, declare a field like:\n *\n * ```jsx\n * {\n *  title: \"Rich text\",\n *  widget: 'richtext',\n * }\n * ```\n *\n */\nclass WysiwygWidgetComponent extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    /**\n     * Id of the field\n     */\n    id: PropTypes.string.isRequired,\n    /**\n     * Title of the field\n     */\n    title: PropTypes.string.isRequired,\n    /**\n     * Description of the field\n     */\n    description: PropTypes.string,\n    /**\n     * True if field is required\n     */\n    required: PropTypes.bool,\n    /**\n     * Value of the field\n     */\n    value: PropTypes.shape({\n      /**\n       * Content type of the value\n       */\n      'content-type': PropTypes.string,\n      /**\n       * Data of the value\n       */\n      data: PropTypes.string,\n      /**\n       * Encoding of the value\n       */\n      encoding: PropTypes.string,\n    }),\n    /**\n     * Placeholder for the editor\n     */\n    placeholder: PropTypes.string,\n    /**\n     * List of error messages\n     */\n    error: PropTypes.arrayOf(PropTypes.string),\n    /**\n     * On change handler\n     */\n    onChange: PropTypes.func,\n    /**\n     * On delete handler\n     */\n    onDelete: PropTypes.func,\n    /**\n     * On edit handler\n     */\n    onEdit: PropTypes.func,\n    /**\n     * Wrapped form component\n     */\n    wrapped: PropTypes.bool,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    description: null,\n    required: false,\n    value: {\n      'content-type': 'text/html',\n      data: '',\n      encoding: 'utf8',\n    },\n    error: [],\n    onEdit: null,\n    onDelete: null,\n    onChange: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygWidget\n   */\n  constructor(props) {\n    super(props);\n\n    const { stateFromHTML } = props.draftJsImportHtml;\n    const { EditorState } = props.draftJs;\n    const createInlineToolbarPlugin = props.draftJsInlineToolbarPlugin.default;\n\n    this.draftConfig = config.settings.richtextEditorSettings(props);\n\n    if (!__SERVER__) {\n      let editorState;\n      if (props.value && props.value.data) {\n        const contentState = stateFromHTML(props.value.data, {\n          customBlockFn: this.draftConfig.FromHTMLCustomBlockFn,\n        });\n        editorState = EditorState.createWithContent(contentState);\n      } else {\n        editorState = EditorState.createEmpty();\n      }\n\n      const inlineToolbarPlugin = createInlineToolbarPlugin({\n        structure: this.draftConfig.richTextEditorInlineToolbarButtons,\n      });\n\n      this.state = { editorState, inlineToolbarPlugin };\n    }\n\n    this.schema = {\n      fieldsets: [\n        {\n          id: 'default',\n          title: props.intl.formatMessage(messages.default),\n          fields: ['title', 'id', 'description', 'required'],\n        },\n      ],\n      properties: {\n        id: {\n          type: 'string',\n          title: props.intl.formatMessage(messages.idTitle),\n          description: props.intl.formatMessage(messages.idDescription),\n        },\n        title: {\n          type: 'string',\n          title: props.intl.formatMessage(messages.title),\n        },\n        description: {\n          type: 'string',\n          widget: 'textarea',\n          title: props.intl.formatMessage(messages.description),\n        },\n        required: {\n          type: 'boolean',\n          title: props.intl.formatMessage(messages.required),\n        },\n      },\n      required: ['id', 'title'],\n    };\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  /**\n   * Change handler\n   * @method onChange\n   * @param {object} editorState Editor state.\n   * @returns {undefined}\n   */\n  onChange(editorState) {\n    const { convertToRaw } = this.props.draftJs;\n    this.setState({ editorState });\n    const mockStore = configureStore();\n\n    this.props.onChange(this.props.id, {\n      'content-type': this.props.value\n        ? this.props.value['content-type']\n        : 'text/html',\n      encoding: this.props.value ? this.props.value.encoding : 'utf8',\n      data: ReactDOMServer.renderToStaticMarkup(\n        <Provider\n          store={mockStore({\n            userSession: {\n              token: this.props.token,\n            },\n          })}\n        >\n          <MemoryRouter>\n            {redraft(\n              convertToRaw(editorState.getCurrentContent()),\n              config.settings.richtextViewSettings.ToHTMLRenderers,\n              config.settings.richtextViewSettings.ToHTMLOptions,\n            )}\n          </MemoryRouter>\n        </Provider>,\n      ),\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const {\n      id,\n      title,\n      description,\n      required,\n      value,\n      error,\n      fieldSet,\n    } = this.props;\n\n    if (__SERVER__) {\n      return (\n        <Form.Field\n          inline\n          required={required}\n          error={error.length > 0}\n          className={description ? 'help' : ''}\n          id={`${fieldSet || 'field'}-${id}`}\n        >\n          <div className=\"wrapper\">\n            <label htmlFor={`field-${id}`}>{title}</label>\n            <TextArea id={id} name={id} value={value ? value.data : ''} />\n            {description && <p className=\"help\">{description}</p>}\n            {map(error, (message) => (\n              <Label key={message} basic color=\"red\" pointing>\n                {message}\n              </Label>\n            ))}\n          </div>\n        </Form.Field>\n      );\n    }\n    const { InlineToolbar } = this.state.inlineToolbarPlugin;\n\n    return (\n      <FormFieldWrapper {...this.props} className=\"wysiwyg\">\n        <div style={{ boxSizing: 'initial' }}>\n          {this.props.onChange ? (\n            <>\n              <Editor\n                id={`field-${id}`}\n                readOnly={this.props.isDisabled}\n                onChange={this.onChange}\n                editorState={this.state.editorState}\n                plugins={[\n                  this.state.inlineToolbarPlugin,\n                  ...this.draftConfig.richTextEditorPlugins,\n                ]}\n                placeholder={this.props.placeholder}\n                blockRenderMap={this.draftConfig.extendedBlockRenderMap}\n                blockStyleFn={this.draftConfig.blockStyleFn}\n                customStyleMap={this.draftConfig.customStyleMap}\n              />\n              {this.props.onChange && <InlineToolbar />}\n            </>\n          ) : (\n            <div className=\"DraftEditor-root\" />\n          )}\n        </div>\n      </FormFieldWrapper>\n    );\n  }\n}\n\nexport const WysiwygWidget = compose(\n  injectIntl,\n  injectLazyLibs([\n    'draftJs',\n    'draftJsBlockBreakoutPlugin',\n    'draftJsCreateBlockStyleButton',\n    'draftJsCreateInlineStyleButton',\n    'draftJsFilters',\n    'draftJsImportHtml',\n    'draftJsInlineToolbarPlugin',\n    'draftJsLibIsSoftNewlineEvent',\n    'immutableLib',\n  ]),\n  connect(\n    (state, props) => ({\n      token: state.userSession.token,\n    }),\n    {},\n  ),\n)(WysiwygWidgetComponent);\n\nconst Preloader = (props) => {\n  const [loaded, setLoaded] = React.useState(false);\n  React.useEffect(() => {\n    Editor.load().then(() => setLoaded(true));\n  }, []);\n  return loaded ? <WysiwygWidget {...props} /> : null;\n};\n\nexport default Preloader;\n"],"mappings":";;;;;AAAA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,OAAO,EAAEC,QAAQ,QAAQ,aAAa;AAC/C,SAASC,OAAO,QAAQ,OAAO;AAC/B,OAAOC,OAAO,MAAM,SAAS;AAC7B,SAASC,IAAI,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,mBAAmB;AAEzD,SAASC,cAAc,EAAEC,UAAU,QAAQ,YAAY;AACvD,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,SAASC,YAAY,QAAQ,kBAAkB;AAC/C,OAAOC,MAAM,MAAM,uBAAuB;AAE1C,SAASC,gBAAgB,QAAQ,yBAAyB;AAE1D,OAAOC,QAAQ,MAAM,qBAAqB;AAC1C,SAASC,cAAc,QAAQ,wCAAwC;AAEvE,MAAMC,MAAM,GAAGF,QAAQ;EAAA;EAAA;IAAA;EAAA;EAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;EAAA;EAAA,aAAC,MAAM,MAAM,mDAAC,yBAAyB,CAAC;EAAA;IAAA;IAAA;IAAA;IAAA;MAAA;MAAA;IAAA;EAAA;EAAA;IAAA;IAAA;MAAA;IAAA;IAAA;EAAA;EAAA;IAAA;MAAA;IAAA;IAAA;EAAA;AAAA,EAAC;AAEhE,MAAMG,QAAQ,GAAGT,cAAc,CAAC;EAC9BU,OAAO;IAAA;IAAA;EAAA,CAGN;EACDC,OAAO;IAAA;IAAA;EAAA,CAGN;EACDC,aAAa;IAAA;IAAA;EAAA,CAGZ;EACDC,KAAK;IAAA;IAAA;EAAA,CAGJ;EACDC,WAAW;IAAA;IAAA;EAAA,CAGV;EACDC,QAAQ;IAAA;IAAA;EAAA,CAGP;EACDC,MAAM;IAAA;IAAA;EAAA;AAIR,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,sBAAsB,SAAS3B,SAAS,CAAC;EAC7C;AACF;AACA;AACA;AACA;;EA6DE;AACF;AACA;AACA;AACA;;EAeE;AACF;AACA;AACA;AACA;AACA;EACE4B,WAAW,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IAEZ,MAAM;MAAEC;IAAc,CAAC,GAAGD,KAAK,CAACE,iBAAiB;IACjD,MAAM;MAAEC;IAAY,CAAC,GAAGH,KAAK,CAACI,OAAO;IACrC,MAAMC,yBAAyB,GAAGL,KAAK,CAACM,0BAA0B,CAACf,OAAO;IAE1E,IAAI,CAACgB,WAAW,GAAGtB,MAAM,CAACuB,QAAQ,CAACC,sBAAsB,CAACT,KAAK,CAAC;IAEhE,IAAI,CAACU,UAAU,EAAE;MACf,IAAIC,WAAW;MACf,IAAIX,KAAK,CAACY,KAAK,IAAIZ,KAAK,CAACY,KAAK,CAACC,IAAI,EAAE;QACnC,MAAMC,YAAY,GAAGb,aAAa,CAACD,KAAK,CAACY,KAAK,CAACC,IAAI,EAAE;UACnDE,aAAa,EAAE,IAAI,CAACR,WAAW,CAACS;QAClC,CAAC,CAAC;QACFL,WAAW,GAAGR,WAAW,CAACc,iBAAiB,CAACH,YAAY,CAAC;MAC3D,CAAC,MAAM;QACLH,WAAW,GAAGR,WAAW,CAACe,WAAW,EAAE;MACzC;MAEA,MAAMC,mBAAmB,GAAGd,yBAAyB,CAAC;QACpDe,SAAS,EAAE,IAAI,CAACb,WAAW,CAACc;MAC9B,CAAC,CAAC;MAEF,IAAI,CAACC,KAAK,GAAG;QAAEX,WAAW;QAAEQ;MAAoB,CAAC;IACnD;IAEA,IAAI,CAACI,MAAM,GAAG;MACZC,SAAS,EAAE,CACT;QACEC,EAAE,EAAE,SAAS;QACb/B,KAAK,EAAEM,KAAK,CAAC0B,IAAI,CAACC,aAAa,CAACrC,QAAQ,CAACC,OAAO,CAAC;QACjDqC,MAAM,EAAE,CAAC,OAAO,EAAE,IAAI,EAAE,aAAa,EAAE,UAAU;MACnD,CAAC,CACF;MACDC,UAAU,EAAE;QACVJ,EAAE,EAAE;UACFK,IAAI,EAAE,QAAQ;UACdpC,KAAK,EAAEM,KAAK,CAAC0B,IAAI,CAACC,aAAa,CAACrC,QAAQ,CAACE,OAAO,CAAC;UACjDG,WAAW,EAAEK,KAAK,CAAC0B,IAAI,CAACC,aAAa,CAACrC,QAAQ,CAACG,aAAa;QAC9D,CAAC;QACDC,KAAK,EAAE;UACLoC,IAAI,EAAE,QAAQ;UACdpC,KAAK,EAAEM,KAAK,CAAC0B,IAAI,CAACC,aAAa,CAACrC,QAAQ,CAACI,KAAK;QAChD,CAAC;QACDC,WAAW,EAAE;UACXmC,IAAI,EAAE,QAAQ;UACdC,MAAM,EAAE,UAAU;UAClBrC,KAAK,EAAEM,KAAK,CAAC0B,IAAI,CAACC,aAAa,CAACrC,QAAQ,CAACK,WAAW;QACtD,CAAC;QACDC,QAAQ,EAAE;UACRkC,IAAI,EAAE,SAAS;UACfpC,KAAK,EAAEM,KAAK,CAAC0B,IAAI,CAACC,aAAa,CAACrC,QAAQ,CAACM,QAAQ;QACnD;MACF,CAAC;MACDA,QAAQ,EAAE,CAAC,IAAI,EAAE,OAAO;IAC1B,CAAC;IAED,IAAI,CAACoC,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACC,IAAI,CAAC,IAAI,CAAC;EAC1C;;EAEA;AACF;AACA;AACA;AACA;AACA;EACED,QAAQ,CAACrB,WAAW,EAAE;IACpB,MAAM;MAAEuB;IAAa,CAAC,GAAG,IAAI,CAAClC,KAAK,CAACI,OAAO;IAC3C,IAAI,CAAC+B,QAAQ,CAAC;MAAExB;IAAY,CAAC,CAAC;IAC9B,MAAMyB,SAAS,GAAGrD,cAAc,EAAE;IAElC,IAAI,CAACiB,KAAK,CAACgC,QAAQ,CAAC,IAAI,CAAChC,KAAK,CAACyB,EAAE,EAAE;MACjC,cAAc,EAAE,IAAI,CAACzB,KAAK,CAACY,KAAK,GAC5B,IAAI,CAACZ,KAAK,CAACY,KAAK,CAAC,cAAc,CAAC,GAChC,WAAW;MACfyB,QAAQ,EAAE,IAAI,CAACrC,KAAK,CAACY,KAAK,GAAG,IAAI,CAACZ,KAAK,CAACY,KAAK,CAACyB,QAAQ,GAAG,MAAM;MAC/DxB,IAAI,EAAEzC,cAAc,CAACkE,oBAAoB,CACvC,MAAC,QAAQ;QACP,KAAK,EAAEF,SAAS,CAAC;UACfG,WAAW,EAAE;YACXC,KAAK,EAAE,IAAI,CAACxC,KAAK,CAACwC;UACpB;QACF,CAAC,CAAE;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAEH,MAAC,YAAY;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GACV/D,OAAO,CACNyD,YAAY,CAACvB,WAAW,CAAC8B,iBAAiB,EAAE,CAAC,EAC7CxD,MAAM,CAACuB,QAAQ,CAACkC,oBAAoB,CAACC,eAAe,EACpD1D,MAAM,CAACuB,QAAQ,CAACkC,oBAAoB,CAACE,aAAa,CACnD,CACY,CACN;IAEf,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;EACEC,MAAM,GAAG;IACP,MAAM;MACJpB,EAAE;MACF/B,KAAK;MACLC,WAAW;MACXC,QAAQ;MACRgB,KAAK;MACLkC,KAAK;MACLC;IACF,CAAC,GAAG,IAAI,CAAC/C,KAAK;IAEd,IAAIU,UAAU,EAAE;MACd,OACE,MAAC,IAAI,CAAC,KAAK;QACT,MAAM;QACN,QAAQ,EAAEd,QAAS;QACnB,KAAK,EAAEkD,KAAK,CAACE,MAAM,GAAG,CAAE;QACxB,SAAS,EAAErD,WAAW,GAAG,MAAM,GAAG,EAAG;QACrC,EAAE,EAAG,GAAEoD,QAAQ,IAAI,OAAQ,IAAGtB,EAAG,EAAE;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAEnC;QAAK,SAAS,EAAC,SAAS;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GACtB;QAAO,OAAO,EAAG,SAAQA,EAAG,EAAE;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAAE/B,KAAK,CAAS,EAC9C,MAAC,QAAQ;QAAC,EAAE,EAAE+B,EAAG;QAAC,IAAI,EAAEA,EAAG;QAAC,KAAK,EAAEb,KAAK,GAAGA,KAAK,CAACC,IAAI,GAAG,EAAG;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAAG,EAC7DlB,WAAW,IAAI;QAAG,SAAS,EAAC,MAAM;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAAEA,WAAW,CAAK,EACpD,KAAImD,KAAK,EAAGG,OAAO,IAClB,MAAC,KAAK;QAAC,GAAG,EAAEA,OAAQ;QAAC,KAAK;QAAC,KAAK,EAAC,KAAK;QAAC,QAAQ;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAC5CA,OAAO,CAEX,CAAC,CACE,CACK;IAEjB;IACA,MAAM;MAAEC;IAAc,CAAC,GAAG,IAAI,CAAC5B,KAAK,CAACH,mBAAmB;IAExD,OACE,MAAC,gBAAgB,eAAK,IAAI,CAACnB,KAAK;MAAE,SAAS,EAAC,SAAS;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,IACnD;MAAK,KAAK,EAAE;QAAEmD,SAAS,EAAE;MAAU,CAAE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAClC,IAAI,CAACnD,KAAK,CAACgC,QAAQ,GAClB,4BACE,MAAC,MAAM;MACL,EAAE,EAAG,SAAQP,EAAG,EAAE;MAClB,QAAQ,EAAE,IAAI,CAACzB,KAAK,CAACoD,UAAW;MAChC,QAAQ,EAAE,IAAI,CAACpB,QAAS;MACxB,WAAW,EAAE,IAAI,CAACV,KAAK,CAACX,WAAY;MACpC,OAAO,EAAE,CACP,IAAI,CAACW,KAAK,CAACH,mBAAmB,EAC9B,GAAG,IAAI,CAACZ,WAAW,CAAC8C,qBAAqB,CACzC;MACF,WAAW,EAAE,IAAI,CAACrD,KAAK,CAACsD,WAAY;MACpC,cAAc,EAAE,IAAI,CAAC/C,WAAW,CAACgD,sBAAuB;MACxD,YAAY,EAAE,IAAI,CAAChD,WAAW,CAACiD,YAAa;MAC5C,cAAc,EAAE,IAAI,CAACjD,WAAW,CAACkD,cAAe;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAChD,EACD,IAAI,CAACzD,KAAK,CAACgC,QAAQ,IAAI,MAAC,aAAa;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAG,CACxC,GAEH;MAAK,SAAS,EAAC,kBAAkB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAClC,CACG,CACW;EAEvB;AACF;AAAC,gBAhQKlC,sBAAsB,eAMP;EACjB;AACJ;AACA;EACI2B,EAAE,EAAEpD,SAAS,CAACqF,MAAM,CAACC,UAAU;EAC/B;AACJ;AACA;EACIjE,KAAK,EAAErB,SAAS,CAACqF,MAAM,CAACC,UAAU;EAClC;AACJ;AACA;EACIhE,WAAW,EAAEtB,SAAS,CAACqF,MAAM;EAC7B;AACJ;AACA;EACI9D,QAAQ,EAAEvB,SAAS,CAACuF,IAAI;EACxB;AACJ;AACA;EACIhD,KAAK,EAAEvC,SAAS,CAACwF,KAAK,CAAC;IACrB;AACN;AACA;IACM,cAAc,EAAExF,SAAS,CAACqF,MAAM;IAChC;AACN;AACA;IACM7C,IAAI,EAAExC,SAAS,CAACqF,MAAM;IACtB;AACN;AACA;IACMrB,QAAQ,EAAEhE,SAAS,CAACqF;EACtB,CAAC,CAAC;EACF;AACJ;AACA;EACIJ,WAAW,EAAEjF,SAAS,CAACqF,MAAM;EAC7B;AACJ;AACA;EACIZ,KAAK,EAAEzE,SAAS,CAACyF,OAAO,CAACzF,SAAS,CAACqF,MAAM,CAAC;EAC1C;AACJ;AACA;EACI1B,QAAQ,EAAE3D,SAAS,CAAC0F,IAAI;EACxB;AACJ;AACA;EACIC,QAAQ,EAAE3F,SAAS,CAAC0F,IAAI;EACxB;AACJ;AACA;EACIE,MAAM,EAAE5F,SAAS,CAAC0F,IAAI;EACtB;AACJ;AACA;EACIG,OAAO,EAAE7F,SAAS,CAACuF;AACrB,CAAC;AAAA,gBAhEG9D,sBAAsB,kBAuEJ;EACpBH,WAAW,EAAE,IAAI;EACjBC,QAAQ,EAAE,KAAK;EACfgB,KAAK,EAAE;IACL,cAAc,EAAE,WAAW;IAC3BC,IAAI,EAAE,EAAE;IACRwB,QAAQ,EAAE;EACZ,CAAC;EACDS,KAAK,EAAE,EAAE;EACTmB,MAAM,EAAE,IAAI;EACZD,QAAQ,EAAE,IAAI;EACdhC,QAAQ,EAAE;AACZ,CAAC;AA+KH,OAAO,MAAMmC,aAAa,GAAG3F,OAAO,CAClCM,UAAU,EACVM,cAAc,CAAC,CACb,SAAS,EACT,4BAA4B,EAC5B,+BAA+B,EAC/B,gCAAgC,EAChC,gBAAgB,EAChB,mBAAmB,EACnB,4BAA4B,EAC5B,8BAA8B,EAC9B,cAAc,CACf,CAAC,EACFd,OAAO,CACL,CAACgD,KAAK,EAAEtB,KAAK,MAAM;EACjBwC,KAAK,EAAElB,KAAK,CAACiB,WAAW,CAACC;AAC3B,CAAC,CAAC,EACF,CAAC,CAAC,CACH,CACF,CAAC1C,sBAAsB,CAAC;AAEzB,MAAMsE,SAAS,GAAIpE,KAAK,IAAK;EAC3B,MAAM,CAACqE,MAAM,EAAEC,SAAS,CAAC,GAAGpG,KAAK,CAACqG,QAAQ,CAAC,KAAK,CAAC;EACjDrG,KAAK,CAACsG,SAAS,CAAC,MAAM;IACpBnF,MAAM,CAACoF,IAAI,EAAE,CAACC,IAAI,CAAC,MAAMJ,SAAS,CAAC,IAAI,CAAC,CAAC;EAC3C,CAAC,EAAE,EAAE,CAAC;EACN,OAAOD,MAAM,GAAG,MAAC,aAAa,eAAKrE,KAAK;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAI,GAAG,IAAI;AACrD,CAAC;AAED,eAAeoE,SAAS"},"metadata":{"react-intl":{"messages":[{"id":"Default","defaultMessage":"Default"},{"id":"Short Name","defaultMessage":"Short Name"},{"id":"Used for programmatic access to the fieldset.","defaultMessage":"Used for programmatic access to the fieldset."},{"id":"Title","defaultMessage":"Title"},{"id":"Description","defaultMessage":"Description"},{"id":"Required","defaultMessage":"Required"},{"id":"Delete","defaultMessage":"Delete"}]}},"sourceType":"module","externalDependencies":[]}