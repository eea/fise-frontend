{"ast":null,"code":"import _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _toConsumableArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _without from \"lodash/without\";\n/**\n * Data Providers reducer\n * @module reducers/data_providers\n */\n\nimport { GET_VISUALIZATION, REMOVE_VISUALIZATION } from '../constants';\nvar initialState = {\n  data: {},\n  error: null,\n  loaded: false,\n  loading: false,\n  pendingVisualizations: {},\n  failedVisualizations: {},\n  requested: []\n};\nexport default function data_providers() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var use_live_data = action.use_live_data;\n  var path = action.path ? action.path.replace(\"/@\".concat(use_live_data ? 'visualization-layout' : 'visualization'), '') : undefined;\n  var pendingVisualizations = _objectSpread({}, state.pendingVisualizations);\n  var failedVisualizations = _objectSpread({}, state.failedVisualizations);\n  switch (action.type) {\n    case \"\".concat(GET_VISUALIZATION, \"_PENDING\"):\n      pendingVisualizations[path] = true;\n      delete failedVisualizations[path];\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: null,\n        loaded: false,\n        loading: true,\n        requested: [].concat(_toConsumableArray(_without(state.requested, path)), [path]),\n        pendingVisualizations: pendingVisualizations,\n        failedVisualizations: failedVisualizations\n      });\n    case \"\".concat(GET_VISUALIZATION, \"_SUCCESS\"):\n      delete pendingVisualizations[path];\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: null,\n        data: _objectSpread(_objectSpread({}, state.data), {}, _defineProperty({}, path, action.result.visualization)),\n        loaded: true,\n        loading: false,\n        requested: _toConsumableArray(_without(state.requested, path)),\n        pendingVisualizations: pendingVisualizations,\n        failedVisualizations: failedVisualizations\n      });\n    case \"\".concat(GET_VISUALIZATION, \"_FAIL\"):\n      delete pendingVisualizations[path];\n      failedVisualizations[path] = true;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.error,\n        data: _objectSpread({}, state.data),\n        loaded: false,\n        loading: false,\n        // TODO: retry get?\n        requested: _toConsumableArray(_without(state.requested, path)),\n        pendingVisualizations: pendingVisualizations,\n        failedVisualizations: failedVisualizations\n      });\n    case REMOVE_VISUALIZATION:\n      var newData = _objectSpread({}, state.data);\n      delete newData[path];\n      return _objectSpread(_objectSpread({}, state), {}, {\n        data: _objectSpread({}, newData)\n      });\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["GET_VISUALIZATION","REMOVE_VISUALIZATION","initialState","data","error","loaded","loading","pendingVisualizations","failedVisualizations","requested","data_providers","state","action","use_live_data","path","replace","undefined","type","result","visualization","newData"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-plotlycharts/src/reducers/data_visualizations.js"],"sourcesContent":["/**\n * Data Providers reducer\n * @module reducers/data_providers\n */\n\nimport { GET_VISUALIZATION, REMOVE_VISUALIZATION } from '../constants';\nimport { without } from 'lodash';\n\nconst initialState = {\n  data: {},\n  error: null,\n  loaded: false,\n  loading: false,\n  pendingVisualizations: {},\n  failedVisualizations: {},\n  requested: [],\n};\n\nexport default function data_providers(state = initialState, action = {}) {\n  const use_live_data = action.use_live_data;\n  const path = action.path\n    ? action.path.replace(\n        `/@${use_live_data ? 'visualization-layout' : 'visualization'}`,\n        '',\n      )\n    : undefined;\n  const pendingVisualizations = { ...state.pendingVisualizations };\n  const failedVisualizations = { ...state.failedVisualizations };\n\n  switch (action.type) {\n    case `${GET_VISUALIZATION}_PENDING`:\n      pendingVisualizations[path] = true;\n      delete failedVisualizations[path];\n\n      return {\n        ...state,\n        error: null,\n        loaded: false,\n        loading: true,\n        requested: [...without(state.requested, path), path],\n        pendingVisualizations,\n        failedVisualizations,\n      };\n\n    case `${GET_VISUALIZATION}_SUCCESS`:\n      delete pendingVisualizations[path];\n      return {\n        ...state,\n        error: null,\n        data: {\n          ...state.data,\n          [path]: action.result.visualization,\n        },\n        loaded: true,\n        loading: false,\n        requested: [...without(state.requested, path)],\n        pendingVisualizations,\n        failedVisualizations,\n      };\n\n    case `${GET_VISUALIZATION}_FAIL`:\n      delete pendingVisualizations[path];\n      failedVisualizations[path] = true;\n\n      return {\n        ...state,\n        error: action.error,\n        data: { ...state.data },\n        loaded: false,\n        loading: false,\n        // TODO: retry get?\n        requested: [...without(state.requested, path)],\n        pendingVisualizations,\n        failedVisualizations,\n      };\n\n    case REMOVE_VISUALIZATION:\n      const newData = { ...state.data };\n      delete newData[path];\n\n      return {\n        ...state,\n        data: { ...newData },\n      };\n\n    default:\n      return state;\n  }\n}\n"],"mappings":";;;;AAAA;AACA;AACA;AACA;;AAEA,SAASA,iBAAiB,EAAEC,oBAAoB,QAAQ,cAAc;AAGtE,IAAMC,YAAY,GAAG;EACnBC,IAAI,EAAE,CAAC,CAAC;EACRC,KAAK,EAAE,IAAI;EACXC,MAAM,EAAE,KAAK;EACbC,OAAO,EAAE,KAAK;EACdC,qBAAqB,EAAE,CAAC,CAAC;EACzBC,oBAAoB,EAAE,CAAC,CAAC;EACxBC,SAAS,EAAE;AACb,CAAC;AAED,eAAe,SAASC,cAAc,GAAoC;EAAA,IAAnCC,KAAK,uEAAGT,YAAY;EAAA,IAAEU,MAAM,uEAAG,CAAC,CAAC;EACtE,IAAMC,aAAa,GAAGD,MAAM,CAACC,aAAa;EAC1C,IAAMC,IAAI,GAAGF,MAAM,CAACE,IAAI,GACpBF,MAAM,CAACE,IAAI,CAACC,OAAO,aACZF,aAAa,GAAG,sBAAsB,GAAG,eAAe,GAC7D,EAAE,CACH,GACDG,SAAS;EACb,IAAMT,qBAAqB,qBAAQI,KAAK,CAACJ,qBAAqB,CAAE;EAChE,IAAMC,oBAAoB,qBAAQG,KAAK,CAACH,oBAAoB,CAAE;EAE9D,QAAQI,MAAM,CAACK,IAAI;IACjB,eAAQjB,iBAAiB;MACvBO,qBAAqB,CAACO,IAAI,CAAC,GAAG,IAAI;MAClC,OAAON,oBAAoB,CAACM,IAAI,CAAC;MAEjC,uCACKH,KAAK;QACRP,KAAK,EAAE,IAAI;QACXC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE,IAAI;QACbG,SAAS,+BAAM,SAAQE,KAAK,CAACF,SAAS,EAAEK,IAAI,CAAC,IAAEA,IAAI,EAAC;QACpDP,qBAAqB,EAArBA,qBAAqB;QACrBC,oBAAoB,EAApBA;MAAoB;IAGxB,eAAQR,iBAAiB;MACvB,OAAOO,qBAAqB,CAACO,IAAI,CAAC;MAClC,uCACKH,KAAK;QACRP,KAAK,EAAE,IAAI;QACXD,IAAI,kCACCQ,KAAK,CAACR,IAAI,2BACZW,IAAI,EAAGF,MAAM,CAACM,MAAM,CAACC,aAAa,EACpC;QACDd,MAAM,EAAE,IAAI;QACZC,OAAO,EAAE,KAAK;QACdG,SAAS,qBAAM,SAAQE,KAAK,CAACF,SAAS,EAAEK,IAAI,CAAC,CAAC;QAC9CP,qBAAqB,EAArBA,qBAAqB;QACrBC,oBAAoB,EAApBA;MAAoB;IAGxB,eAAQR,iBAAiB;MACvB,OAAOO,qBAAqB,CAACO,IAAI,CAAC;MAClCN,oBAAoB,CAACM,IAAI,CAAC,GAAG,IAAI;MAEjC,uCACKH,KAAK;QACRP,KAAK,EAAEQ,MAAM,CAACR,KAAK;QACnBD,IAAI,oBAAOQ,KAAK,CAACR,IAAI,CAAE;QACvBE,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE,KAAK;QACd;QACAG,SAAS,qBAAM,SAAQE,KAAK,CAACF,SAAS,EAAEK,IAAI,CAAC,CAAC;QAC9CP,qBAAqB,EAArBA,qBAAqB;QACrBC,oBAAoB,EAApBA;MAAoB;IAGxB,KAAKP,oBAAoB;MACvB,IAAMmB,OAAO,qBAAQT,KAAK,CAACR,IAAI,CAAE;MACjC,OAAOiB,OAAO,CAACN,IAAI,CAAC;MAEpB,uCACKH,KAAK;QACRR,IAAI,oBAAOiB,OAAO;MAAE;IAGxB;MACE,OAAOT,KAAK;EAAC;AAEnB"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}