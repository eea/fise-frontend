{"ast":null,"code":"import _map from \"lodash/map\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/volto-slate/src/blocks/Table/TableBlockView.jsx\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n/**\n * Slate Table block's View component.\n * @module volto-slate/blocks/Table/View\n */\n\nimport React, { useMemo, useState } from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport { Table } from 'semantic-ui-react';\nimport { serializeNodes, serializeNodesToText } from 'volto-slate/editor/render';\nimport { Node } from 'slate';\n\n// TODO: loading LESS files with `volto-slate/...` paths does not work currently\nimport '../../editor/plugins/Table/less/public.less';\n\n/**\n * Slate Table block's View class.\n * @class View\n * @extends Component\n * @param {object} data The table data to render as a table.\n */\nconst View = props => {\n  const {\n    data\n  } = props;\n  const {\n    0: state,\n    1: setState\n  } = useState({\n    column: null,\n    direction: null\n  });\n  const headers = useMemo(() => {\n    var _data$table$rows, _data$table$rows$;\n    return (_data$table$rows = data.table.rows) === null || _data$table$rows === void 0 ? void 0 : (_data$table$rows$ = _data$table$rows[0]) === null || _data$table$rows$ === void 0 ? void 0 : _data$table$rows$.cells;\n  }, [data.table.rows]);\n  const rows = useMemo(() => {\n    const items = {};\n    if (!data.table.rows) return {};\n    data.table.rows.forEach((row, index) => {\n      if (index > 0) {\n        items[row.key] = [];\n        row.cells.forEach((cell, cellIndex) => {\n          items[row.key][cellIndex] = _objectSpread(_objectSpread({}, cell), {}, {\n            value: cell.value && Node.string({\n              children: cell.value\n            }).length > 0 ? serializeNodes(cell.value) : '\\u00A0',\n            valueText: cell.value && Node.string({\n              children: cell.value\n            }).length > 0 ? serializeNodesToText(cell.value) : '\\u00A0'\n          });\n        });\n      }\n    });\n    return items;\n  }, [data.table.rows]);\n  const sortedRows = useMemo(() => {\n    if (state.column === null) return Object.keys(rows);\n    return Object.keys(rows).sort((a, b) => {\n      const a_text = rows[a][state.column].valueText;\n      const b_text = rows[b][state.column].valueText;\n      if (state.direction === 'ascending' ? a_text < b_text : a_text > b_text) {\n        return -1;\n      }\n      if (state.direction === 'ascending' ? a_text > b_text : a_text < b_text) {\n        return 1;\n      }\n      return 0;\n    });\n  }, [state, rows]);\n  return __jsx(React.Fragment, null, data && data.table && __jsx(Table, {\n    fixed: data.table.fixed,\n    compact: data.table.compact,\n    basic: data.table.basic ? 'very' : false,\n    celled: data.table.celled,\n    inverted: data.table.inverted,\n    striped: data.table.striped,\n    sortable: data.table.sortable,\n    className: cx('slate-table-block', {\n      responsive: data.table.responsive\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, !data.table.hideHeaders ? __jsx(Table.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, __jsx(Table.Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 15\n    }\n  }, headers.map((cell, index) => __jsx(Table.HeaderCell, {\n    key: cell.key,\n    textAlign: \"center\",\n    verticalAlign: \"middle\",\n    sorted: state.column === index ? state.direction : null,\n    onClick: () => {\n      if (!data.table.sortable) return;\n      setState({\n        column: index,\n        direction: state.column !== index ? 'ascending' : state.direction === 'ascending' ? 'descending' : 'ascending'\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 19\n    }\n  }, cell.value && Node.string({\n    children: cell.value\n  }).length > 0 ? serializeNodes(cell.value) : '\\u00A0')))) : '', __jsx(Table.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 11\n    }\n  }, _map(sortedRows, row => __jsx(Table.Row, {\n    key: row,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 15\n    }\n  }, _map(rows[row], (cell, cellIndex) => __jsx(Table.Cell, {\n    key: cell.key,\n    \"data-label\": data.table.responsive ? serializeNodesToText(headers[cellIndex].value) : undefined,\n    textAlign: data.table.textAlign || 'center',\n    verticalAlign: data.table.verticalAlign || 'middle',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 19\n    }\n  }, cell.value)))))));\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nView.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired\n};\nexport default View;","map":{"version":3,"names":["React","useMemo","useState","cx","PropTypes","Table","serializeNodes","serializeNodesToText","Node","View","props","data","state","setState","column","direction","headers","table","rows","cells","items","forEach","row","index","key","cell","cellIndex","value","string","children","length","valueText","sortedRows","Object","keys","sort","a","b","a_text","b_text","fixed","compact","basic","celled","inverted","striped","sortable","responsive","hideHeaders","map","undefined","textAlign","verticalAlign","propTypes","objectOf","any","isRequired"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/volto-slate/src/blocks/Table/TableBlockView.jsx"],"sourcesContent":["/**\n * Slate Table block's View component.\n * @module volto-slate/blocks/Table/View\n */\n\nimport React, { useMemo, useState } from 'react';\nimport { map } from 'lodash';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport { Table } from 'semantic-ui-react';\nimport {\n  serializeNodes,\n  serializeNodesToText,\n} from 'volto-slate/editor/render';\nimport { Node } from 'slate';\n\n// TODO: loading LESS files with `volto-slate/...` paths does not work currently\nimport '../../editor/plugins/Table/less/public.less';\n\n/**\n * Slate Table block's View class.\n * @class View\n * @extends Component\n * @param {object} data The table data to render as a table.\n */\nconst View = (props) => {\n  const { data } = props;\n  const [state, setState] = useState({\n    column: null,\n    direction: null,\n  });\n\n  const headers = useMemo(() => {\n    return data.table.rows?.[0]?.cells;\n  }, [data.table.rows]);\n\n  const rows = useMemo(() => {\n    const items = {};\n    if (!data.table.rows) return {};\n    data.table.rows.forEach((row, index) => {\n      if (index > 0) {\n        items[row.key] = [];\n        row.cells.forEach((cell, cellIndex) => {\n          items[row.key][cellIndex] = {\n            ...cell,\n            value:\n              cell.value && Node.string({ children: cell.value }).length > 0\n                ? serializeNodes(cell.value)\n                : '\\u00A0',\n            valueText:\n              cell.value && Node.string({ children: cell.value }).length > 0\n                ? serializeNodesToText(cell.value)\n                : '\\u00A0',\n          };\n        });\n      }\n    });\n    return items;\n  }, [data.table.rows]);\n\n  const sortedRows = useMemo(() => {\n    if (state.column === null) return Object.keys(rows);\n    return Object.keys(rows).sort((a, b) => {\n      const a_text = rows[a][state.column].valueText;\n      const b_text = rows[b][state.column].valueText;\n      if (state.direction === 'ascending' ? a_text < b_text : a_text > b_text) {\n        return -1;\n      }\n      if (state.direction === 'ascending' ? a_text > b_text : a_text < b_text) {\n        return 1;\n      }\n      return 0;\n    });\n  }, [state, rows]);\n\n  return (\n    <>\n      {data && data.table && (\n        <Table\n          fixed={data.table.fixed}\n          compact={data.table.compact}\n          basic={data.table.basic ? 'very' : false}\n          celled={data.table.celled}\n          inverted={data.table.inverted}\n          striped={data.table.striped}\n          sortable={data.table.sortable}\n          className={cx('slate-table-block', {\n            responsive: data.table.responsive,\n          })}\n        >\n          {!data.table.hideHeaders ? (\n            <Table.Header>\n              <Table.Row>\n                {headers.map((cell, index) => (\n                  <Table.HeaderCell\n                    key={cell.key}\n                    textAlign=\"center\"\n                    verticalAlign=\"middle\"\n                    sorted={state.column === index ? state.direction : null}\n                    onClick={() => {\n                      if (!data.table.sortable) return;\n                      setState({\n                        column: index,\n                        direction:\n                          state.column !== index\n                            ? 'ascending'\n                            : state.direction === 'ascending'\n                            ? 'descending'\n                            : 'ascending',\n                      });\n                    }}\n                  >\n                    {cell.value &&\n                    Node.string({ children: cell.value }).length > 0\n                      ? serializeNodes(cell.value)\n                      : '\\u00A0'}\n                  </Table.HeaderCell>\n                ))}\n              </Table.Row>\n            </Table.Header>\n          ) : (\n            ''\n          )}\n          <Table.Body>\n            {map(sortedRows, (row) => (\n              <Table.Row key={row}>\n                {map(rows[row], (cell, cellIndex) => (\n                  <Table.Cell\n                    key={cell.key}\n                    data-label={\n                      data.table.responsive\n                        ? serializeNodesToText(headers[cellIndex].value)\n                        : undefined\n                    }\n                    textAlign={data.table.textAlign || 'center'}\n                    verticalAlign={data.table.verticalAlign || 'middle'}\n                  >\n                    {cell.value}\n                  </Table.Cell>\n                ))}\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      )}\n    </>\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nView.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default View;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}