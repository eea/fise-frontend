{"ast":null,"code":"import _toConsumableArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _createClass from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _defineProperty2 from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _createForOfIteratorHelper from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _slicedToArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$(),\n  _s6 = $RefreshSig$(),\n  _s7 = $RefreshSig$(),\n  _s8 = $RefreshSig$(),\n  _s9 = $RefreshSig$(),\n  _s10 = $RefreshSig$(),\n  _s11 = $RefreshSig$(),\n  _s12 = $RefreshSig$(),\n  _s13 = $RefreshSig$(),\n  _s14 = $RefreshSig$(),\n  _s15 = $RefreshSig$(),\n  _s16 = $RefreshSig$(),\n  _s17 = $RefreshSig$(),\n  _s18 = $RefreshSig$(),\n  _s19 = $RefreshSig$(),\n  _s20 = $RefreshSig$(),\n  _s21 = $RefreshSig$();\nimport React, { useRef, useEffect, useLayoutEffect, useContext, createContext, useState, useMemo, useCallback } from 'react';\nimport { Path, Node, Editor, Text as Text$1, Range, Element as Element$1, Transforms } from 'slate';\nimport getDirection from 'direction';\nimport debounce from 'lodash/debounce';\nimport throttle from 'lodash/throttle';\nimport scrollIntoView from 'scroll-into-view-if-needed';\nimport { isKeyHotkey } from 'is-hotkey';\nimport ReactDOM from 'react-dom';\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\n\n/**\r\n * Leaf content strings.\r\n */\n\nvar String = function String(props) {\n  _s();\n  var isLast = props.isLast,\n    leaf = props.leaf,\n    parent = props.parent,\n    text = props.text;\n  var editor = useSlateStatic();\n  var path = ReactEditor.findPath(editor, text);\n  var parentPath = Path.parent(path); // COMPAT: Render text inside void nodes with a zero-width space.\n  // So the node can contain selection but the text is not visible.\n\n  if (editor.isVoid(parent)) {\n    return /*#__PURE__*/React.createElement(ZeroWidthString, {\n      length: Node.string(parent).length\n    });\n  } // COMPAT: If this is the last text node in an empty block, render a zero-\n  // width space that will convert into a line break when copying and pasting\n  // to support expected plain text.\n\n  if (leaf.text === '' && parent.children[parent.children.length - 1] === text && !editor.isInline(parent) && Editor.string(editor, parentPath) === '') {\n    return /*#__PURE__*/React.createElement(ZeroWidthString, {\n      isLineBreak: true\n    });\n  } // COMPAT: If the text is empty, it's because it's on the edge of an inline\n  // node, so we render a zero-width space so that the selection can be\n  // inserted next to it still.\n\n  if (leaf.text === '') {\n    return /*#__PURE__*/React.createElement(ZeroWidthString, null);\n  } // COMPAT: Browsers will collapse trailing new lines at the end of blocks,\n  // so we need to add an extra trailing new lines to prevent that.\n\n  if (isLast && leaf.text.slice(-1) === '\\n') {\n    return /*#__PURE__*/React.createElement(TextString, {\n      isTrailing: true,\n      text: leaf.text\n    });\n  }\n  return /*#__PURE__*/React.createElement(TextString, {\n    text: leaf.text\n  });\n};\n/**\r\n * Leaf strings with text in them.\r\n */\n_s(String, \"WYoDIuUdAaGffyWcFDq4gCgXxVo=\", false, function () {\n  return [useSlateStatic];\n});\n_c = String;\nvar TextString = function TextString(props) {\n  _s2();\n  var text = props.text,\n    _props$isTrailing = props.isTrailing,\n    isTrailing = _props$isTrailing === void 0 ? false : _props$isTrailing;\n  var ref = useRef(null);\n  var forceUpdateCount = useRef(0);\n  if (ref.current && ref.current.textContent !== text) {\n    forceUpdateCount.current += 1;\n  } // This component may have skipped rendering due to native operations being\n  // applied. If an undo is performed React will see the old and new shadow DOM\n  // match and not apply an update. Forces each render to actually reconcile.\n\n  return /*#__PURE__*/React.createElement(\"span\", {\n    \"data-slate-string\": true,\n    ref: ref,\n    key: forceUpdateCount.current\n  }, text, isTrailing ? '\\n' : null);\n};\n/**\r\n * Leaf strings without text, render as zero-width strings.\r\n */\n_s2(TextString, \"ddo/woTWylCIOiwPJTzaEnHrfwg=\");\n_c2 = TextString;\nvar ZeroWidthString = function ZeroWidthString(props) {\n  var _props$length = props.length,\n    length = _props$length === void 0 ? 0 : _props$length,\n    _props$isLineBreak = props.isLineBreak,\n    isLineBreak = _props$isLineBreak === void 0 ? false : _props$isLineBreak;\n  return /*#__PURE__*/React.createElement(\"span\", {\n    \"data-slate-zero-width\": isLineBreak ? 'n' : 'z',\n    \"data-slate-length\": length\n  }, \"\\uFEFF\", isLineBreak ? /*#__PURE__*/React.createElement(\"br\", null) : null);\n};\n\n/**\r\n * Two weak maps that allow us rebuild a path given a node. They are populated\r\n * at render time such that after a render occurs we can always backtrack.\r\n */\n_c3 = ZeroWidthString;\nvar NODE_TO_INDEX = new WeakMap();\nvar NODE_TO_PARENT = new WeakMap();\n/**\r\n * Weak maps that allow us to go between Slate nodes and DOM nodes. These\r\n * are used to resolve DOM event-related logic into Slate actions.\r\n */\n\nvar EDITOR_TO_WINDOW = new WeakMap();\nvar EDITOR_TO_ELEMENT = new WeakMap();\nvar ELEMENT_TO_NODE = new WeakMap();\nvar NODE_TO_ELEMENT = new WeakMap();\nvar NODE_TO_KEY = new WeakMap();\nvar EDITOR_TO_KEY_TO_ELEMENT = new WeakMap();\n/**\r\n * Weak maps for storing editor-related state.\r\n */\n\nvar IS_READ_ONLY = new WeakMap();\nvar IS_FOCUSED = new WeakMap();\n/**\r\n * Weak map for associating the context `onChange` context with the plugin.\r\n */\n\nvar EDITOR_TO_ON_CHANGE = new WeakMap();\nvar EDITOR_TO_RESTORE_DOM = new WeakMap();\n/**\r\n * Symbols.\r\n */\n\nvar PLACEHOLDER_SYMBOL = Symbol('placeholder');\n\n/**\r\n * Individual leaves in a text node with unique formatting.\r\n */\n\nvar Leaf = function Leaf(props) {\n  _s3();\n  var leaf = props.leaf,\n    isLast = props.isLast,\n    text = props.text,\n    parent = props.parent,\n    renderPlaceholder = props.renderPlaceholder,\n    _props$renderLeaf = props.renderLeaf,\n    renderLeaf = _props$renderLeaf === void 0 ? function (props) {\n      return /*#__PURE__*/React.createElement(DefaultLeaf, Object.assign({}, props));\n    } : _props$renderLeaf;\n  var placeholderRef = useRef(null);\n  useEffect(function () {\n    var placeholderEl = placeholderRef === null || placeholderRef === void 0 ? void 0 : placeholderRef.current;\n    var editorEl = document.querySelector('[data-slate-editor=\"true\"]');\n    if (!placeholderEl || !editorEl) {\n      return;\n    }\n    editorEl.style.minHeight = \"\".concat(placeholderEl.clientHeight, \"px\");\n    return function () {\n      editorEl.style.minHeight = 'auto';\n    };\n  }, [placeholderRef, leaf]);\n  var children = /*#__PURE__*/React.createElement(String, {\n    isLast: isLast,\n    leaf: leaf,\n    parent: parent,\n    text: text\n  });\n  if (leaf[PLACEHOLDER_SYMBOL]) {\n    var placeholderProps = {\n      children: leaf.placeholder,\n      attributes: {\n        'data-slate-placeholder': true,\n        style: {\n          position: 'absolute',\n          pointerEvents: 'none',\n          width: '100%',\n          maxWidth: '100%',\n          display: 'block',\n          opacity: '0.333',\n          userSelect: 'none',\n          textDecoration: 'none'\n        },\n        contentEditable: false,\n        ref: placeholderRef\n      }\n    };\n    children = /*#__PURE__*/React.createElement(React.Fragment, null, renderPlaceholder(placeholderProps), children);\n  } // COMPAT: Having the `data-` attributes on these leaf elements ensures that\n  // in certain misbehaving browsers they aren't weirdly cloned/destroyed by\n  // contenteditable behaviors. (2019/05/08)\n\n  var attributes = {\n    'data-slate-leaf': true\n  };\n  return renderLeaf({\n    attributes: attributes,\n    children: children,\n    leaf: leaf,\n    text: text\n  });\n};\n_s3(Leaf, \"AMfooomgH2KuewemoUhimW0H6Y4=\");\n_c4 = Leaf;\nvar MemoizedLeaf = /*#__PURE__*/React.memo(Leaf, function (prev, next) {\n  return next.parent === prev.parent && next.isLast === prev.isLast && next.renderLeaf === prev.renderLeaf && next.renderPlaceholder === prev.renderPlaceholder && next.text === prev.text && Text$1.equals(next.leaf, prev.leaf) && next.leaf[PLACEHOLDER_SYMBOL] === prev.leaf[PLACEHOLDER_SYMBOL];\n});\n_c5 = MemoizedLeaf;\nvar DefaultLeaf = function DefaultLeaf(props) {\n  var attributes = props.attributes,\n    children = props.children;\n  return /*#__PURE__*/React.createElement(\"span\", Object.assign({}, attributes), children);\n};\n_c6 = DefaultLeaf;\nvar IS_IOS = typeof navigator !== 'undefined' && true && /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;\nvar IS_APPLE = typeof navigator !== 'undefined' && /Mac OS X/.test(navigator.userAgent);\nvar IS_ANDROID = typeof navigator !== 'undefined' && /Android/.test(navigator.userAgent);\nvar IS_FIREFOX = typeof navigator !== 'undefined' && /^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent);\nvar IS_SAFARI = typeof navigator !== 'undefined' && /Version\\/[\\d\\.]+.*Safari/.test(navigator.userAgent); // \"modern\" Edge was released at 79.x\n\nvar IS_EDGE_LEGACY = typeof navigator !== 'undefined' && /Edge?\\/(?:[0-6][0-9]|[0-7][0-8])/i.test(navigator.userAgent);\nvar IS_CHROME = typeof navigator !== 'undefined' && /Chrome/i.test(navigator.userAgent); // Native `beforeInput` events don't work well with react on Chrome 75\n// and older, Chrome 76+ can use `beforeInput` though.\n\nvar IS_CHROME_LEGACY = typeof navigator !== 'undefined' && /Chrome?\\/(?:[0-7][0-5]|[0-6][0-9])/i.test(navigator.userAgent); // Firefox did not support `beforeInput` until `v87`.\n\nvar IS_FIREFOX_LEGACY = typeof navigator !== 'undefined' && /^(?!.*Seamonkey)(?=.*Firefox\\/(?:[0-7][0-9]|[0-8][0-6])).*/i.test(navigator.userAgent); // qq browser\n\nvar IS_QQBROWSER = typeof navigator !== 'undefined' && /.*QQBrowser/.test(navigator.userAgent); // Check if DOM is available as React does internally.\n// https://github.com/facebook/react/blob/master/packages/shared/ExecutionEnvironment.js\n\nvar CAN_USE_DOM = !!(true && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined'); // COMPAT: Firefox/Edge Legacy don't support the `beforeinput` event\n// Chrome Legacy doesn't support `beforeinput` correctly\n\nvar HAS_BEFORE_INPUT_SUPPORT = !IS_CHROME_LEGACY && !IS_EDGE_LEGACY &&\n// globalThis is undefined in older browsers\ntypeof globalThis !== 'undefined' && globalThis.InputEvent &&\n// @ts-ignore The `getTargetRanges` property isn't recognized.\ntypeof globalThis.InputEvent.prototype.getTargetRanges === 'function';\n\n/**\r\n * Prevent warning on SSR by falling back to useEffect when DOM isn't available\r\n */\n\nvar useIsomorphicLayoutEffect = CAN_USE_DOM ? useLayoutEffect : useEffect;\nvar _excluded$3 = [\"anchor\", \"focus\"],\n  _excluded2 = [\"anchor\", \"focus\"];\nvar shallowCompare = function shallowCompare(obj1, obj2) {\n  return Object.keys(obj1).length === Object.keys(obj2).length && Object.keys(obj1).every(function (key) {\n    return obj2.hasOwnProperty(key) && obj1[key] === obj2[key];\n  });\n};\n/**\r\n * Check if a list of decorator ranges are equal to another.\r\n *\r\n * PERF: this requires the two lists to also have the ranges inside them in the\r\n * same order, but this is an okay constraint for us since decorations are\r\n * kept in order, and the odd case where they aren't is okay to re-render for.\r\n */\n\nvar isDecoratorRangeListEqual = function isDecoratorRangeListEqual(list, another) {\n  if (list.length !== another.length) {\n    return false;\n  }\n  for (var i = 0; i < list.length; i++) {\n    var range = list[i];\n    var other = another[i];\n    var rangeOwnProps = _objectWithoutProperties(range, _excluded$3);\n    var otherOwnProps = _objectWithoutProperties(other, _excluded2);\n    if (!Range.equals(range, other) || range[PLACEHOLDER_SYMBOL] !== other[PLACEHOLDER_SYMBOL] || !shallowCompare(rangeOwnProps, otherOwnProps)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\r\n * Text.\r\n */\n\nvar Text = function Text(props) {\n  _s4();\n  var decorations = props.decorations,\n    isLast = props.isLast,\n    parent = props.parent,\n    renderPlaceholder = props.renderPlaceholder,\n    renderLeaf = props.renderLeaf,\n    text = props.text;\n  var editor = useSlateStatic();\n  var ref = useRef(null);\n  var leaves = Text$1.decorations(text, decorations);\n  var key = ReactEditor.findKey(editor, text);\n  var children = [];\n  for (var i = 0; i < leaves.length; i++) {\n    var leaf = leaves[i];\n    children.push( /*#__PURE__*/React.createElement(MemoizedLeaf, {\n      isLast: isLast && i === leaves.length - 1,\n      key: \"\".concat(key.id, \"-\").concat(i),\n      renderPlaceholder: renderPlaceholder,\n      leaf: leaf,\n      text: text,\n      parent: parent,\n      renderLeaf: renderLeaf\n    }));\n  } // Update element-related weak maps with the DOM element ref.\n\n  useIsomorphicLayoutEffect(function () {\n    var KEY_TO_ELEMENT = EDITOR_TO_KEY_TO_ELEMENT.get(editor);\n    if (ref.current) {\n      KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 ? void 0 : KEY_TO_ELEMENT.set(key, ref.current);\n      NODE_TO_ELEMENT.set(text, ref.current);\n      ELEMENT_TO_NODE.set(ref.current, text);\n    } else {\n      KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 ? void 0 : KEY_TO_ELEMENT[\"delete\"](key);\n      NODE_TO_ELEMENT[\"delete\"](text);\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"span\", {\n    \"data-slate-node\": \"text\",\n    ref: ref\n  }, children);\n};\n_s4(Text, \"DtIzsX0w1B5BVvHhCACy3sC6YdE=\", false, function () {\n  return [useSlateStatic, useIsomorphicLayoutEffect];\n});\n_c7 = Text;\nvar MemoizedText = /*#__PURE__*/React.memo(Text, function (prev, next) {\n  return next.parent === prev.parent && next.isLast === prev.isLast && next.renderLeaf === prev.renderLeaf && next.text === prev.text && isDecoratorRangeListEqual(next.decorations, prev.decorations);\n});\n\n/**\r\n * Element.\r\n */\n_c8 = MemoizedText;\nvar Element = function Element(props) {\n  _s5();\n  var decorations = props.decorations,\n    element = props.element,\n    _props$renderElement = props.renderElement,\n    renderElement = _props$renderElement === void 0 ? function (p) {\n      return /*#__PURE__*/React.createElement(DefaultElement, Object.assign({}, p));\n    } : _props$renderElement,\n    renderPlaceholder = props.renderPlaceholder,\n    renderLeaf = props.renderLeaf,\n    selection = props.selection;\n  var ref = useRef(null);\n  var editor = useSlateStatic();\n  var readOnly = useReadOnly();\n  var isInline = editor.isInline(element);\n  var key = ReactEditor.findKey(editor, element);\n  var children = useChildren({\n    decorations: decorations,\n    node: element,\n    renderElement: renderElement,\n    renderPlaceholder: renderPlaceholder,\n    renderLeaf: renderLeaf,\n    selection: selection\n  }); // Attributes that the developer must mix into the element in their\n  // custom node renderer component.\n\n  var attributes = {\n    'data-slate-node': 'element',\n    ref: ref\n  };\n  if (isInline) {\n    attributes['data-slate-inline'] = true;\n  } // If it's a block node with inline children, add the proper `dir` attribute\n  // for text direction.\n\n  if (!isInline && Editor.hasInlines(editor, element)) {\n    var text = Node.string(element);\n    var dir = getDirection(text);\n    if (dir === 'rtl') {\n      attributes.dir = dir;\n    }\n  } // If it's a void node, wrap the children in extra void-specific elements.\n\n  if (Editor.isVoid(editor, element)) {\n    attributes['data-slate-void'] = true;\n    if (!readOnly && isInline) {\n      attributes.contentEditable = false;\n    }\n    var Tag = isInline ? 'span' : 'div';\n    var _Node$texts = Node.texts(element),\n      _Node$texts2 = _slicedToArray(_Node$texts, 1),\n      _Node$texts2$ = _slicedToArray(_Node$texts2[0], 1),\n      _text = _Node$texts2$[0];\n    children = readOnly ? null : /*#__PURE__*/React.createElement(Tag, {\n      \"data-slate-spacer\": true,\n      style: {\n        height: '0',\n        color: 'transparent',\n        outline: 'none',\n        position: 'absolute'\n      }\n    }, /*#__PURE__*/React.createElement(MemoizedText, {\n      renderPlaceholder: renderPlaceholder,\n      decorations: [],\n      isLast: false,\n      parent: element,\n      text: _text\n    }));\n    NODE_TO_INDEX.set(_text, 0);\n    NODE_TO_PARENT.set(_text, element);\n  } // Update element-related weak maps with the DOM element ref.\n\n  useIsomorphicLayoutEffect(function () {\n    var KEY_TO_ELEMENT = EDITOR_TO_KEY_TO_ELEMENT.get(editor);\n    if (ref.current) {\n      KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 ? void 0 : KEY_TO_ELEMENT.set(key, ref.current);\n      NODE_TO_ELEMENT.set(element, ref.current);\n      ELEMENT_TO_NODE.set(ref.current, element);\n    } else {\n      KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 ? void 0 : KEY_TO_ELEMENT[\"delete\"](key);\n      NODE_TO_ELEMENT[\"delete\"](element);\n    }\n  });\n  return renderElement({\n    attributes: attributes,\n    children: children,\n    element: element\n  });\n};\n_s5(Element, \"nliE9HOvfITpNqVg6enaAXASLfM=\", false, function () {\n  return [useSlateStatic, useReadOnly, useChildren, useIsomorphicLayoutEffect];\n});\n_c9 = Element;\nvar MemoizedElement = /*#__PURE__*/React.memo(Element, function (prev, next) {\n  return prev.element === next.element && prev.renderElement === next.renderElement && prev.renderLeaf === next.renderLeaf && isDecoratorRangeListEqual(prev.decorations, next.decorations) && (prev.selection === next.selection || !!prev.selection && !!next.selection && Range.equals(prev.selection, next.selection));\n});\n/**\r\n * The default element renderer.\r\n */\n_c10 = MemoizedElement;\nvar DefaultElement = function DefaultElement(props) {\n  _s6();\n  var attributes = props.attributes,\n    children = props.children,\n    element = props.element;\n  var editor = useSlateStatic();\n  var Tag = editor.isInline(element) ? 'span' : 'div';\n  return /*#__PURE__*/React.createElement(Tag, Object.assign({}, attributes, {\n    style: {\n      position: 'relative'\n    }\n  }), children);\n};\n\n/**\r\n * A React context for sharing the editor object.\r\n */\n_s6(DefaultElement, \"WYoDIuUdAaGffyWcFDq4gCgXxVo=\", false, function () {\n  return [useSlateStatic];\n});\n_c11 = DefaultElement;\nvar EditorContext = /*#__PURE__*/createContext(null);\n/**\r\n * Get the current editor object from the React context.\r\n */\n\nvar useSlateStatic = function useSlateStatic() {\n  _s7();\n  var editor = useContext(EditorContext);\n  if (!editor) {\n    throw new Error(\"The `useSlateStatic` hook must be used inside the <Slate> component's context.\");\n  }\n  return editor;\n};\n\n/**\r\n * A React context for sharing the `decorate` prop of the editable.\r\n */\n_s7(useSlateStatic, \"tZszBdnkXWRQKZCsKeBPah5On7M=\");\nvar DecorateContext = /*#__PURE__*/createContext(_c12 = function _c12() {\n  return [];\n});\n/**\r\n * Get the current `decorate` prop of the editable.\r\n */\n_c13 = DecorateContext;\nvar useDecorate = function useDecorate() {\n  _s8();\n  return useContext(DecorateContext);\n};\n\n/**\r\n * A React context for sharing the `selected` state of an element.\r\n */\n_s8(useDecorate, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar SelectedContext = /*#__PURE__*/createContext(false);\n/**\r\n * Get the current `selected` state of an element.\r\n */\n\nvar useSelected = function useSelected() {\n  _s9();\n  return useContext(SelectedContext);\n};\n\n/**\r\n * Children.\r\n */\n_s9(useSelected, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar useChildren = function useChildren(props) {\n  _s10();\n  var decorations = props.decorations,\n    node = props.node,\n    renderElement = props.renderElement,\n    renderPlaceholder = props.renderPlaceholder,\n    renderLeaf = props.renderLeaf,\n    selection = props.selection;\n  var decorate = useDecorate();\n  var editor = useSlateStatic();\n  var path = ReactEditor.findPath(editor, node);\n  var children = [];\n  var isLeafBlock = Element$1.isElement(node) && !editor.isInline(node) && Editor.hasInlines(editor, node);\n  for (var i = 0; i < node.children.length; i++) {\n    var p = path.concat(i);\n    var n = node.children[i];\n    var key = ReactEditor.findKey(editor, n);\n    var range = Editor.range(editor, p);\n    var sel = selection && Range.intersection(range, selection);\n    var ds = decorate([n, p]);\n    var _iterator = _createForOfIteratorHelper(decorations),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var dec = _step.value;\n        var d = Range.intersection(dec, range);\n        if (d) {\n          ds.push(d);\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    if (Element$1.isElement(n)) {\n      children.push( /*#__PURE__*/React.createElement(SelectedContext.Provider, {\n        key: \"provider-\".concat(key.id),\n        value: !!sel\n      }, /*#__PURE__*/React.createElement(MemoizedElement, {\n        decorations: ds,\n        element: n,\n        key: key.id,\n        renderElement: renderElement,\n        renderPlaceholder: renderPlaceholder,\n        renderLeaf: renderLeaf,\n        selection: sel\n      })));\n    } else {\n      children.push( /*#__PURE__*/React.createElement(MemoizedText, {\n        decorations: ds,\n        key: key.id,\n        isLast: isLeafBlock && i === node.children.length - 1,\n        parent: node,\n        renderPlaceholder: renderPlaceholder,\n        renderLeaf: renderLeaf,\n        text: n\n      }));\n    }\n    NODE_TO_INDEX.set(n, i);\n    NODE_TO_PARENT.set(n, node);\n  }\n  return children;\n};\n\n/**\r\n * Hotkey mappings for each platform.\r\n */\n_s10(useChildren, \"HS6iELCiDFdcsuSucKNp0XAY8oc=\", false, function () {\n  return [useDecorate, useSlateStatic];\n});\nvar HOTKEYS = {\n  bold: 'mod+b',\n  compose: ['down', 'left', 'right', 'up', 'backspace', 'enter'],\n  moveBackward: 'left',\n  moveForward: 'right',\n  moveWordBackward: 'ctrl+left',\n  moveWordForward: 'ctrl+right',\n  deleteBackward: 'shift?+backspace',\n  deleteForward: 'shift?+delete',\n  extendBackward: 'shift+left',\n  extendForward: 'shift+right',\n  italic: 'mod+i',\n  splitBlock: 'shift?+enter',\n  undo: 'mod+z'\n};\nvar APPLE_HOTKEYS = {\n  moveLineBackward: 'opt+up',\n  moveLineForward: 'opt+down',\n  moveWordBackward: 'opt+left',\n  moveWordForward: 'opt+right',\n  deleteBackward: ['ctrl+backspace', 'ctrl+h'],\n  deleteForward: ['ctrl+delete', 'ctrl+d'],\n  deleteLineBackward: 'cmd+shift?+backspace',\n  deleteLineForward: ['cmd+shift?+delete', 'ctrl+k'],\n  deleteWordBackward: 'opt+shift?+backspace',\n  deleteWordForward: 'opt+shift?+delete',\n  extendLineBackward: 'opt+shift+up',\n  extendLineForward: 'opt+shift+down',\n  redo: 'cmd+shift+z',\n  transposeCharacter: 'ctrl+t'\n};\nvar WINDOWS_HOTKEYS = {\n  deleteWordBackward: 'ctrl+shift?+backspace',\n  deleteWordForward: 'ctrl+shift?+delete',\n  redo: ['ctrl+y', 'ctrl+shift+z']\n};\n/**\r\n * Create a platform-aware hotkey checker.\r\n */\n\nvar create = function create(key) {\n  var generic = HOTKEYS[key];\n  var apple = APPLE_HOTKEYS[key];\n  var windows = WINDOWS_HOTKEYS[key];\n  var isGeneric = generic && isKeyHotkey(generic);\n  var isApple = apple && isKeyHotkey(apple);\n  var isWindows = windows && isKeyHotkey(windows);\n  return function (event) {\n    if (isGeneric && isGeneric(event)) return true;\n    if (IS_APPLE && isApple && isApple(event)) return true;\n    if (!IS_APPLE && isWindows && isWindows(event)) return true;\n    return false;\n  };\n};\n/**\r\n * Hotkeys.\r\n */\n\nvar Hotkeys = {\n  isBold: create('bold'),\n  isCompose: create('compose'),\n  isMoveBackward: create('moveBackward'),\n  isMoveForward: create('moveForward'),\n  isDeleteBackward: create('deleteBackward'),\n  isDeleteForward: create('deleteForward'),\n  isDeleteLineBackward: create('deleteLineBackward'),\n  isDeleteLineForward: create('deleteLineForward'),\n  isDeleteWordBackward: create('deleteWordBackward'),\n  isDeleteWordForward: create('deleteWordForward'),\n  isExtendBackward: create('extendBackward'),\n  isExtendForward: create('extendForward'),\n  isExtendLineBackward: create('extendLineBackward'),\n  isExtendLineForward: create('extendLineForward'),\n  isItalic: create('italic'),\n  isMoveLineBackward: create('moveLineBackward'),\n  isMoveLineForward: create('moveLineForward'),\n  isMoveWordBackward: create('moveWordBackward'),\n  isMoveWordForward: create('moveWordForward'),\n  isRedo: create('redo'),\n  isSplitBlock: create('splitBlock'),\n  isTransposeCharacter: create('transposeCharacter'),\n  isUndo: create('undo')\n};\n\n/**\r\n * A React context for sharing the `readOnly` state of the editor.\r\n */\n\nvar ReadOnlyContext = /*#__PURE__*/createContext(false);\n/**\r\n * Get the current `readOnly` state of the editor.\r\n */\n\nvar useReadOnly = function useReadOnly() {\n  _s11();\n  return useContext(ReadOnlyContext);\n};\n\n/**\r\n * A React context for sharing the editor object, in a way that re-renders the\r\n * context whenever changes occur.\r\n */\n_s11(useReadOnly, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar SlateContext = /*#__PURE__*/createContext(null);\n/**\r\n * Get the current editor object from the React context.\r\n */\n\nvar useSlate = function useSlate() {\n  _s12();\n  var context = useContext(SlateContext);\n  if (!context) {\n    throw new Error(\"The `useSlate` hook must be used inside the <Slate> component's context.\");\n  }\n  var _context = _slicedToArray(context, 1),\n    editor = _context[0];\n  return editor;\n};\n\n/**\r\n * Types.\r\n */\n/**\r\n * Returns the host window of a DOM node\r\n */\n_s12(useSlate, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar getDefaultView = function getDefaultView(value) {\n  return value && value.ownerDocument && value.ownerDocument.defaultView || null;\n};\n/**\r\n * Check if a DOM node is a comment node.\r\n */\n\nvar isDOMComment = function isDOMComment(value) {\n  return isDOMNode(value) && value.nodeType === 8;\n};\n/**\r\n * Check if a DOM node is an element node.\r\n */\n\nvar isDOMElement = function isDOMElement(value) {\n  return isDOMNode(value) && value.nodeType === 1;\n};\n/**\r\n * Check if a value is a DOM node.\r\n */\n\nvar isDOMNode = function isDOMNode(value) {\n  var window = getDefaultView(value);\n  return !!window && value instanceof window.Node;\n};\n/**\r\n * Check if a value is a DOM selection.\r\n */\n\nvar isDOMSelection = function isDOMSelection(value) {\n  var window = value && value.anchorNode && getDefaultView(value.anchorNode);\n  return !!window && value instanceof window.Selection;\n};\n/**\r\n * Check if a DOM node is an element node.\r\n */\n\nvar isDOMText = function isDOMText(value) {\n  return isDOMNode(value) && value.nodeType === 3;\n};\n/**\r\n * Checks whether a paste event is a plaintext-only event.\r\n */\n\nvar isPlainTextOnlyPaste = function isPlainTextOnlyPaste(event) {\n  return event.clipboardData && event.clipboardData.getData('text/plain') !== '' && event.clipboardData.types.length === 1;\n};\n/**\r\n * Normalize a DOM point so that it always refers to a text node.\r\n */\n\nvar normalizeDOMPoint = function normalizeDOMPoint(domPoint) {\n  var _domPoint = _slicedToArray(domPoint, 2),\n    node = _domPoint[0],\n    offset = _domPoint[1]; // If it's an element node, its offset refers to the index of its children\n  // including comment nodes, so try to find the right text child node.\n\n  if (isDOMElement(node) && node.childNodes.length) {\n    var isLast = offset === node.childNodes.length;\n    var index = isLast ? offset - 1 : offset;\n    var _getEditableChildAndI = getEditableChildAndIndex(node, index, isLast ? 'backward' : 'forward');\n    var _getEditableChildAndI2 = _slicedToArray(_getEditableChildAndI, 2);\n    node = _getEditableChildAndI2[0];\n    index = _getEditableChildAndI2[1];\n    // If the editable child found is in front of input offset, we instead seek to its end\n\n    isLast = index < offset; // If the node has children, traverse until we have a leaf node. Leaf nodes\n    // can be either text nodes, or other void DOM nodes.\n\n    while (isDOMElement(node) && node.childNodes.length) {\n      var i = isLast ? node.childNodes.length - 1 : 0;\n      node = getEditableChild(node, i, isLast ? 'backward' : 'forward');\n    } // Determine the new offset inside the text node.\n\n    offset = isLast && node.textContent != null ? node.textContent.length : 0;\n  } // Return the node and offset.\n\n  return [node, offset];\n};\n/**\r\n * Determines wether the active element is nested within a shadowRoot\r\n */\n\nvar hasShadowRoot = function hasShadowRoot() {\n  return !!(window.document.activeElement && window.document.activeElement.shadowRoot);\n};\n/**\r\n * Get the nearest editable child and index at `index` in a `parent`, preferring\r\n * `direction`.\r\n */\n\nvar getEditableChildAndIndex = function getEditableChildAndIndex(parent, index, direction) {\n  var childNodes = parent.childNodes;\n  var child = childNodes[index];\n  var i = index;\n  var triedForward = false;\n  var triedBackward = false; // While the child is a comment node, or an element node with no children,\n  // keep iterating to find a sibling non-void, non-comment node.\n\n  while (isDOMComment(child) || isDOMElement(child) && child.childNodes.length === 0 || isDOMElement(child) && child.getAttribute('contenteditable') === 'false') {\n    if (triedForward && triedBackward) {\n      break;\n    }\n    if (i >= childNodes.length) {\n      triedForward = true;\n      i = index - 1;\n      direction = 'backward';\n      continue;\n    }\n    if (i < 0) {\n      triedBackward = true;\n      i = index + 1;\n      direction = 'forward';\n      continue;\n    }\n    child = childNodes[i];\n    index = i;\n    i += direction === 'forward' ? 1 : -1;\n  }\n  return [child, index];\n};\n/**\r\n * Get the nearest editable child at `index` in a `parent`, preferring\r\n * `direction`.\r\n */\n\nvar getEditableChild = function getEditableChild(parent, index, direction) {\n  var _getEditableChildAndI3 = getEditableChildAndIndex(parent, index, direction),\n    _getEditableChildAndI4 = _slicedToArray(_getEditableChildAndI3, 1),\n    child = _getEditableChildAndI4[0];\n  return child;\n};\n/**\r\n * Get a plaintext representation of the content of a node, accounting for block\r\n * elements which get a newline appended.\r\n *\r\n * The domNode must be attached to the DOM.\r\n */\n\nvar getPlainText = function getPlainText(domNode) {\n  var text = '';\n  if (isDOMText(domNode) && domNode.nodeValue) {\n    return domNode.nodeValue;\n  }\n  if (isDOMElement(domNode)) {\n    for (var _i = 0, _Array$from = Array.from(domNode.childNodes); _i < _Array$from.length; _i++) {\n      var childNode = _Array$from[_i];\n      text += getPlainText(childNode);\n    }\n    var display = getComputedStyle(domNode).getPropertyValue('display');\n    if (display === 'block' || display === 'list' || domNode.tagName === 'BR') {\n      text += '\\n';\n    }\n  }\n  return text;\n};\n/**\r\n * Get x-slate-fragment attribute from data-slate-fragment\r\n */\n\nvar catchSlateFragment = /data-slate-fragment=\"(.+?)\"/m;\nvar getSlateFragmentAttribute = function getSlateFragmentAttribute(dataTransfer) {\n  var htmlData = dataTransfer.getData('text/html');\n  var _ref8 = htmlData.match(catchSlateFragment) || [],\n    _ref9 = _slicedToArray(_ref8, 2),\n    fragment = _ref9[1];\n  return fragment;\n};\n/**\r\n * Get the x-slate-fragment attribute that exist in text/html data\r\n * and append it to the DataTransfer object\r\n */\n\nvar getClipboardData = function getClipboardData(dataTransfer) {\n  if (!dataTransfer.getData('application/x-slate-fragment')) {\n    var fragment = getSlateFragmentAttribute(dataTransfer);\n    if (fragment) {\n      var clipboardData = new DataTransfer();\n      dataTransfer.types.forEach(function (type) {\n        clipboardData.setData(type, dataTransfer.getData(type));\n      });\n      clipboardData.setData('application/x-slate-fragment', fragment);\n      return clipboardData;\n    }\n  }\n  return dataTransfer;\n};\nvar _excluded$2 = [\"autoFocus\", \"decorate\", \"onDOMBeforeInput\", \"placeholder\", \"readOnly\", \"renderElement\", \"renderLeaf\", \"renderPlaceholder\", \"scrollSelectionIntoView\", \"style\", \"as\"];\nfunction ownKeys$2(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys$2(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$2(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nvar Children = function Children(props) {\n  _s13();\n  return /*#__PURE__*/React.createElement(React.Fragment, null, useChildren(props));\n};\n/**\r\n * Editable.\r\n */\n_s13(Children, \"/wHZ91FGGer9ktPD0vA0PE9kQas=\", false, function () {\n  return [useChildren];\n});\n_c14 = Children;\nvar Editable$1 = function Editable$1(props) {\n  _s14();\n  var autoFocus = props.autoFocus,\n    _props$decorate = props.decorate,\n    decorate = _props$decorate === void 0 ? defaultDecorate : _props$decorate,\n    propsOnDOMBeforeInput = props.onDOMBeforeInput,\n    placeholder = props.placeholder,\n    _props$readOnly = props.readOnly,\n    readOnly = _props$readOnly === void 0 ? false : _props$readOnly,\n    renderElement = props.renderElement,\n    renderLeaf = props.renderLeaf,\n    _props$renderPlacehol = props.renderPlaceholder,\n    renderPlaceholder = _props$renderPlacehol === void 0 ? function (props) {\n      return /*#__PURE__*/React.createElement(DefaultPlaceholder, Object.assign({}, props));\n    } : _props$renderPlacehol,\n    _props$scrollSelectio = props.scrollSelectionIntoView,\n    scrollSelectionIntoView = _props$scrollSelectio === void 0 ? defaultScrollSelectionIntoView : _props$scrollSelectio,\n    _props$style = props.style,\n    style = _props$style === void 0 ? {} : _props$style,\n    _props$as = props.as,\n    Component = _props$as === void 0 ? 'div' : _props$as,\n    attributes = _objectWithoutProperties(props, _excluded$2);\n  var editor = useSlate(); // Rerender editor when composition status changed\n\n  var _useState = useState(false),\n    isComposing = _useState[0],\n    setIsComposing = _useState[1];\n  var ref = useRef(null);\n  var deferredOperations = useRef([]); // Update internal state on each render.\n\n  IS_READ_ONLY.set(editor, readOnly); // Keep track of some state for the event handler logic.\n\n  var state = useMemo(function () {\n    return {\n      isComposing: false,\n      hasInsertPrefixInCompositon: false,\n      isDraggingInternally: false,\n      isUpdatingSelection: false,\n      latestElement: null\n    };\n  }, []); // Whenever the editor updates...\n\n  useIsomorphicLayoutEffect(function () {\n    // Update element-related weak maps with the DOM element ref.\n    var window;\n    if (ref.current && (window = getDefaultView(ref.current))) {\n      EDITOR_TO_WINDOW.set(editor, window);\n      EDITOR_TO_ELEMENT.set(editor, ref.current);\n      NODE_TO_ELEMENT.set(editor, ref.current);\n      ELEMENT_TO_NODE.set(ref.current, editor);\n    } else {\n      NODE_TO_ELEMENT[\"delete\"](editor);\n    } // Make sure the DOM selection state is in sync.\n\n    var selection = editor.selection;\n    var root = ReactEditor.findDocumentOrShadowRoot(editor);\n    var domSelection = root.getSelection();\n    if (state.isComposing || !domSelection || !ReactEditor.isFocused(editor)) {\n      return;\n    }\n    var hasDomSelection = domSelection.type !== 'None'; // If the DOM selection is properly unset, we're done.\n\n    if (!selection && !hasDomSelection) {\n      return;\n    } // verify that the dom selection is in the editor\n\n    var editorElement = EDITOR_TO_ELEMENT.get(editor);\n    var hasDomSelectionInEditor = false;\n    if (editorElement.contains(domSelection.anchorNode) && editorElement.contains(domSelection.focusNode)) {\n      hasDomSelectionInEditor = true;\n    } // If the DOM selection is in the editor and the editor selection is already correct, we're done.\n\n    if (hasDomSelection && hasDomSelectionInEditor && selection) {\n      var slateRange = ReactEditor.toSlateRange(editor, domSelection, {\n        exactMatch: true,\n        // domSelection is not necessarily a valid Slate range\n        // (e.g. when clicking on contentEditable:false element)\n        suppressThrow: true\n      });\n      if (slateRange && Range.equals(slateRange, selection)) {\n        return;\n      }\n    } // when <Editable/> is being controlled through external value\n    // then its children might just change - DOM responds to it on its own\n    // but Slate's value is not being updated through any operation\n    // and thus it doesn't transform selection on its own\n\n    if (selection && !ReactEditor.hasRange(editor, selection)) {\n      editor.selection = ReactEditor.toSlateRange(editor, domSelection, {\n        exactMatch: false,\n        suppressThrow: false\n      });\n      return;\n    } // Otherwise the DOM selection is out of sync, so update it.\n\n    state.isUpdatingSelection = true;\n    var newDomRange = selection && ReactEditor.toDOMRange(editor, selection);\n    if (newDomRange) {\n      if (Range.isBackward(selection)) {\n        domSelection.setBaseAndExtent(newDomRange.endContainer, newDomRange.endOffset, newDomRange.startContainer, newDomRange.startOffset);\n      } else {\n        domSelection.setBaseAndExtent(newDomRange.startContainer, newDomRange.startOffset, newDomRange.endContainer, newDomRange.endOffset);\n      }\n      scrollSelectionIntoView(editor, newDomRange);\n    } else {\n      domSelection.removeAllRanges();\n    }\n    setTimeout(function () {\n      // COMPAT: In Firefox, it's not enough to create a range, you also need\n      // to focus the contenteditable element too. (2016/11/16)\n      if (newDomRange && IS_FIREFOX) {\n        var el = ReactEditor.toDOMNode(editor, editor);\n        el.focus();\n      }\n      state.isUpdatingSelection = false;\n    });\n  }); // The autoFocus TextareaHTMLAttribute doesn't do anything on a div, so it\n  // needs to be manually focused.\n\n  useEffect(function () {\n    if (ref.current && autoFocus) {\n      ref.current.focus();\n    }\n  }, [autoFocus]); // Listen on the native `selectionchange` event to be able to update any time\n  // the selection changes. This is required because React's `onSelect` is leaky\n  // and non-standard so it doesn't fire until after a selection has been\n  // released. This causes issues in situations where another change happens\n  // while a selection is being dragged.\n\n  var onDOMSelectionChange = useCallback(throttle(function () {\n    if (!state.isComposing && !state.isUpdatingSelection && !state.isDraggingInternally) {\n      var root = ReactEditor.findDocumentOrShadowRoot(editor);\n      var activeElement = root.activeElement;\n      var el = ReactEditor.toDOMNode(editor, editor);\n      var domSelection = root.getSelection();\n      if (activeElement === el) {\n        state.latestElement = activeElement;\n        IS_FOCUSED.set(editor, true);\n      } else {\n        IS_FOCUSED[\"delete\"](editor);\n      }\n      if (!domSelection) {\n        return Transforms.deselect(editor);\n      }\n      var anchorNode = domSelection.anchorNode,\n        focusNode = domSelection.focusNode;\n      var anchorNodeSelectable = hasEditableTarget(editor, anchorNode) || isTargetInsideVoid(editor, anchorNode);\n      var focusNodeSelectable = hasEditableTarget(editor, focusNode) || isTargetInsideVoid(editor, focusNode);\n      if (anchorNodeSelectable && focusNodeSelectable) {\n        var range = ReactEditor.toSlateRange(editor, domSelection, {\n          exactMatch: false,\n          suppressThrow: false\n        });\n        Transforms.select(editor, range);\n      }\n    }\n  }, 100), [readOnly]);\n  var scheduleOnDOMSelectionChange = useMemo(function () {\n    return debounce(onDOMSelectionChange, 0);\n  }, [onDOMSelectionChange]); // Listen on the native `beforeinput` event to get real \"Level 2\" events. This\n  // is required because React's `beforeinput` is fake and never really attaches\n  // to the real event sadly. (2019/11/01)\n  // https://github.com/facebook/react/issues/11211\n\n  var onDOMBeforeInput = useCallback(function (event) {\n    if (!readOnly && hasEditableTarget(editor, event.target) && !isDOMEventHandled(event, propsOnDOMBeforeInput)) {\n      // Some IMEs/Chrome extensions like e.g. Grammarly set the selection immediately before\n      // triggering a `beforeinput` expecting the change to be applied to the immediately before\n      // set selection.\n      scheduleOnDOMSelectionChange.flush();\n      var selection = editor.selection;\n      var type = event.inputType;\n      var data = event.dataTransfer || event.data || undefined; // These two types occur while a user is composing text and can't be\n      // cancelled. Let them through and wait for the composition to end.\n\n      if (type === 'insertCompositionText' || type === 'deleteCompositionText') {\n        return;\n      }\n      var _native = false;\n      if (type === 'insertText' && selection && Range.isCollapsed(selection) &&\n      // Only use native character insertion for single characters a-z or space for now.\n      // Long-press events (hold a + press 4 = ä) to choose a special character otherwise\n      // causes duplicate inserts.\n      event.data && event.data.length === 1 && /[a-z ]/i.test(event.data) &&\n      // Chrome has issues correctly editing the start of nodes: https://bugs.chromium.org/p/chromium/issues/detail?id=1249405\n      // When there is an inline element, e.g. a link, and you select\n      // right after it (the start of the next node).\n      selection.anchor.offset !== 0) {\n        _native = true; // Skip native if there are marks, as\n        // `insertText` will insert a node, not just text.\n\n        if (editor.marks) {\n          _native = false;\n        } // Chrome also has issues correctly editing the end of nodes: https://bugs.chromium.org/p/chromium/issues/detail?id=1259100\n        // Therefore we don't allow native events to insert text at the end of nodes.\n\n        var anchor = selection.anchor;\n        var inline = Editor.above(editor, {\n          at: anchor,\n          match: function match(n) {\n            return Editor.isInline(editor, n);\n          },\n          mode: 'highest'\n        });\n        if (inline) {\n          var _inline = _slicedToArray(inline, 2),\n            inlinePath = _inline[1];\n          if (Editor.isEnd(editor, selection.anchor, inlinePath)) {\n            _native = false;\n          }\n        }\n      }\n      if (!_native) {\n        event.preventDefault();\n      } // COMPAT: For the deleting forward/backward input types we don't want\n      // to change the selection because it is the range that will be deleted,\n      // and those commands determine that for themselves.\n\n      if (!type.startsWith('delete') || type.startsWith('deleteBy')) {\n        var _event$getTargetRange = event.getTargetRanges(),\n          _event$getTargetRange2 = _slicedToArray(_event$getTargetRange, 1),\n          targetRange = _event$getTargetRange2[0];\n        if (targetRange) {\n          var range = ReactEditor.toSlateRange(editor, targetRange, {\n            exactMatch: false,\n            suppressThrow: false\n          });\n          if (!selection || !Range.equals(selection, range)) {\n            Transforms.select(editor, range);\n          }\n        }\n      } // COMPAT: If the selection is expanded, even if the command seems like\n      // a delete forward/backward command it should delete the selection.\n\n      if (selection && Range.isExpanded(selection) && type.startsWith('delete')) {\n        var direction = type.endsWith('Backward') ? 'backward' : 'forward';\n        Editor.deleteFragment(editor, {\n          direction: direction\n        });\n        return;\n      }\n      switch (type) {\n        case 'deleteByComposition':\n        case 'deleteByCut':\n        case 'deleteByDrag':\n          {\n            Editor.deleteFragment(editor);\n            break;\n          }\n        case 'deleteContent':\n        case 'deleteContentForward':\n          {\n            Editor.deleteForward(editor);\n            break;\n          }\n        case 'deleteContentBackward':\n          {\n            Editor.deleteBackward(editor);\n            break;\n          }\n        case 'deleteEntireSoftLine':\n          {\n            Editor.deleteBackward(editor, {\n              unit: 'line'\n            });\n            Editor.deleteForward(editor, {\n              unit: 'line'\n            });\n            break;\n          }\n        case 'deleteHardLineBackward':\n          {\n            Editor.deleteBackward(editor, {\n              unit: 'block'\n            });\n            break;\n          }\n        case 'deleteSoftLineBackward':\n          {\n            Editor.deleteBackward(editor, {\n              unit: 'line'\n            });\n            break;\n          }\n        case 'deleteHardLineForward':\n          {\n            Editor.deleteForward(editor, {\n              unit: 'block'\n            });\n            break;\n          }\n        case 'deleteSoftLineForward':\n          {\n            Editor.deleteForward(editor, {\n              unit: 'line'\n            });\n            break;\n          }\n        case 'deleteWordBackward':\n          {\n            Editor.deleteBackward(editor, {\n              unit: 'word'\n            });\n            break;\n          }\n        case 'deleteWordForward':\n          {\n            Editor.deleteForward(editor, {\n              unit: 'word'\n            });\n            break;\n          }\n        case 'insertLineBreak':\n        case 'insertParagraph':\n          {\n            Editor.insertBreak(editor);\n            break;\n          }\n        case 'insertFromComposition':\n        case 'insertFromDrop':\n        case 'insertFromPaste':\n        case 'insertFromYank':\n        case 'insertReplacementText':\n        case 'insertText':\n          {\n            if (type === 'insertFromComposition') {\n              // COMPAT: in Safari, `compositionend` is dispatched after the\n              // `beforeinput` for \"insertFromComposition\". But if we wait for it\n              // then we will abort because we're still composing and the selection\n              // won't be updated properly.\n              // https://www.w3.org/TR/input-events-2/\n              state.isComposing && setIsComposing(false);\n              state.isComposing = false;\n            } // use a weak comparison instead of 'instanceof' to allow\n            // programmatic access of paste events coming from external windows\n            // like cypress where cy.window does not work realibly\n\n            if ((data === null || data === void 0 ? void 0 : data.constructor.name) === 'DataTransfer') {\n              ReactEditor.insertData(editor, data);\n            } else if (typeof data === 'string') {\n              // Only insertText operations use the native functionality, for now.\n              // Potentially expand to single character deletes, as well.\n              if (_native) {\n                deferredOperations.current.push(function () {\n                  return Editor.insertText(editor, data);\n                });\n              } else {\n                Editor.insertText(editor, data);\n              }\n            }\n            break;\n          }\n      }\n    }\n  }, [readOnly, propsOnDOMBeforeInput]); // Attach a native DOM event handler for `beforeinput` events, because React's\n  // built-in `onBeforeInput` is actually a leaky polyfill that doesn't expose\n  // real `beforeinput` events sadly... (2019/11/04)\n  // https://github.com/facebook/react/issues/11211\n\n  useIsomorphicLayoutEffect(function () {\n    if (ref.current && HAS_BEFORE_INPUT_SUPPORT) {\n      // @ts-ignore The `beforeinput` event isn't recognized.\n      ref.current.addEventListener('beforeinput', onDOMBeforeInput);\n    }\n    return function () {\n      if (ref.current && HAS_BEFORE_INPUT_SUPPORT) {\n        // @ts-ignore The `beforeinput` event isn't recognized.\n        ref.current.removeEventListener('beforeinput', onDOMBeforeInput);\n      }\n    };\n  }, [onDOMBeforeInput]); // Attach a native DOM event handler for `selectionchange`, because React's\n  // built-in `onSelect` handler doesn't fire for all selection changes. It's a\n  // leaky polyfill that only fires on keypresses or clicks. Instead, we want to\n  // fire for any change to the selection inside the editor. (2019/11/04)\n  // https://github.com/facebook/react/issues/5785\n\n  useIsomorphicLayoutEffect(function () {\n    var window = ReactEditor.getWindow(editor);\n    window.document.addEventListener('selectionchange', scheduleOnDOMSelectionChange);\n    return function () {\n      window.document.removeEventListener('selectionchange', scheduleOnDOMSelectionChange);\n    };\n  }, [scheduleOnDOMSelectionChange]);\n  var decorations = decorate([editor, []]);\n  if (placeholder && editor.children.length === 1 && Array.from(Node.texts(editor)).length === 1 && Node.string(editor) === '' && !isComposing) {\n    var _decorations$push;\n    var start = Editor.start(editor, []);\n    decorations.push((_decorations$push = {}, _defineProperty2(_decorations$push, PLACEHOLDER_SYMBOL, true), _defineProperty2(_decorations$push, \"placeholder\", placeholder), _defineProperty2(_decorations$push, \"anchor\", start), _defineProperty2(_decorations$push, \"focus\", start), _decorations$push));\n  }\n  return /*#__PURE__*/React.createElement(ReadOnlyContext.Provider, {\n    value: readOnly\n  }, /*#__PURE__*/React.createElement(DecorateContext.Provider, {\n    value: decorate\n  }, /*#__PURE__*/React.createElement(Component, Object.assign({\n    role: readOnly ? undefined : 'textbox'\n  }, attributes, {\n    // COMPAT: Certain browsers don't support the `beforeinput` event, so we'd\n    // have to use hacks to make these replacement-based features work.\n    // For SSR situations HAS_BEFORE_INPUT_SUPPORT is false and results in prop\n    // mismatch warning app moves to browser. Pass-through consumer props when\n    // not CAN_USE_DOM (SSR) and default to falsy value\n    spellCheck: HAS_BEFORE_INPUT_SUPPORT || !CAN_USE_DOM ? attributes.spellCheck : false,\n    autoCorrect: HAS_BEFORE_INPUT_SUPPORT || !CAN_USE_DOM ? attributes.autoCorrect : 'false',\n    autoCapitalize: HAS_BEFORE_INPUT_SUPPORT || !CAN_USE_DOM ? attributes.autoCapitalize : 'false',\n    \"data-slate-editor\": true,\n    \"data-slate-node\": \"value\",\n    // explicitly set this\n    contentEditable: !readOnly,\n    // in some cases, a decoration needs access to the range / selection to decorate a text node,\n    // then you will select the whole text node when you select part the of text\n    // this magic zIndex=\"-1\" will fix it\n    zindex: -1,\n    suppressContentEditableWarning: true,\n    ref: ref,\n    style: _objectSpread$2({\n      // Allow positioning relative to the editable element.\n      position: 'relative',\n      // Prevent the default outline styles.\n      outline: 'none',\n      // Preserve adjacent whitespace and new lines.\n      whiteSpace: 'pre-wrap',\n      // Allow words to break if they are too long.\n      wordWrap: 'break-word'\n    }, style),\n    onBeforeInput: useCallback(function (event) {\n      // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n      // fall back to React's leaky polyfill instead just for it. It\n      // only works for the `insertText` input type.\n      if (!HAS_BEFORE_INPUT_SUPPORT && !readOnly && !isEventHandled(event, attributes.onBeforeInput) && hasEditableTarget(editor, event.target)) {\n        event.preventDefault();\n        if (!state.isComposing) {\n          var text = event.data;\n          Editor.insertText(editor, text);\n        }\n      }\n    }, [readOnly]),\n    onInput: useCallback(function (event) {\n      // Flush native operations, as native events will have propogated\n      // and we can correctly compare DOM text values in components\n      // to stop rendering, so that browser functions like autocorrect\n      // and spellcheck work as expected.\n      var _iterator2 = _createForOfIteratorHelper(deferredOperations.current),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var op = _step2.value;\n          op();\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      deferredOperations.current = [];\n    }, []),\n    onBlur: useCallback(function (event) {\n      if (readOnly || state.isUpdatingSelection || !hasEditableTarget(editor, event.target) || isEventHandled(event, attributes.onBlur)) {\n        return;\n      } // COMPAT: If the current `activeElement` is still the previous\n      // one, this is due to the window being blurred when the tab\n      // itself becomes unfocused, so we want to abort early to allow to\n      // editor to stay focused when the tab becomes focused again.\n\n      var root = ReactEditor.findDocumentOrShadowRoot(editor);\n      if (state.latestElement === root.activeElement) {\n        return;\n      }\n      var relatedTarget = event.relatedTarget;\n      var el = ReactEditor.toDOMNode(editor, editor); // COMPAT: The event should be ignored if the focus is returning\n      // to the editor from an embedded editable element (eg. an <input>\n      // element inside a void node).\n\n      if (relatedTarget === el) {\n        return;\n      } // COMPAT: The event should be ignored if the focus is moving from\n      // the editor to inside a void node's spacer element.\n\n      if (isDOMElement(relatedTarget) && relatedTarget.hasAttribute('data-slate-spacer')) {\n        return;\n      } // COMPAT: The event should be ignored if the focus is moving to a\n      // non- editable section of an element that isn't a void node (eg.\n      // a list item of the check list example).\n\n      if (relatedTarget != null && isDOMNode(relatedTarget) && ReactEditor.hasDOMNode(editor, relatedTarget)) {\n        var node = ReactEditor.toSlateNode(editor, relatedTarget);\n        if (Element$1.isElement(node) && !editor.isVoid(node)) {\n          return;\n        }\n      } // COMPAT: Safari doesn't always remove the selection even if the content-\n      // editable element no longer has focus. Refer to:\n      // https://stackoverflow.com/questions/12353247/force-contenteditable-div-to-stop-accepting-input-after-it-loses-focus-under-web\n\n      if (IS_SAFARI) {\n        var domSelection = root.getSelection();\n        domSelection === null || domSelection === void 0 ? void 0 : domSelection.removeAllRanges();\n      }\n      IS_FOCUSED[\"delete\"](editor);\n    }, [readOnly, attributes.onBlur]),\n    onClick: useCallback(function (event) {\n      if (!readOnly && hasTarget(editor, event.target) && !isEventHandled(event, attributes.onClick) && isDOMNode(event.target)) {\n        var node = ReactEditor.toSlateNode(editor, event.target);\n        var path = ReactEditor.findPath(editor, node); // At this time, the Slate document may be arbitrarily different,\n        // because onClick handlers can change the document before we get here.\n        // Therefore we must check that this path actually exists,\n        // and that it still refers to the same node.\n\n        if (Editor.hasPath(editor, path)) {\n          var lookupNode = Node.get(editor, path);\n          if (lookupNode === node) {\n            var _start = Editor.start(editor, path);\n            var end = Editor.end(editor, path);\n            var startVoid = Editor[\"void\"](editor, {\n              at: _start\n            });\n            var endVoid = Editor[\"void\"](editor, {\n              at: end\n            });\n            if (startVoid && endVoid && Path.equals(startVoid[1], endVoid[1])) {\n              var range = Editor.range(editor, _start);\n              Transforms.select(editor, range);\n            }\n          }\n        }\n      }\n    }, [readOnly, attributes.onClick]),\n    onCompositionEnd: useCallback(function (event) {\n      if (hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onCompositionEnd)) {\n        state.isComposing && setIsComposing(false);\n        state.isComposing = false; // COMPAT: In Chrome, `beforeinput` events for compositions\n        // aren't correct and never fire the \"insertFromComposition\"\n        // type that we need. So instead, insert whenever a composition\n        // ends since it will already have been committed to the DOM.\n\n        if (!IS_SAFARI && !IS_FIREFOX_LEGACY && !IS_IOS && !IS_QQBROWSER && event.data) {\n          Editor.insertText(editor, event.data);\n        }\n        if (editor.selection && Range.isCollapsed(editor.selection)) {\n          var leafPath = editor.selection.anchor.path;\n          var currentTextNode = Node.leaf(editor, leafPath);\n          if (state.hasInsertPrefixInCompositon) {\n            state.hasInsertPrefixInCompositon = false;\n            Editor.withoutNormalizing(editor, function () {\n              // remove Unicode BOM prefix added in `onCompositionStart`\n              var text = currentTextNode.text.replace(/^\\uFEFF/, '');\n              Transforms[\"delete\"](editor, {\n                distance: currentTextNode.text.length,\n                reverse: true\n              });\n              Transforms.insertText(editor, text);\n            });\n          }\n        }\n      }\n    }, [attributes.onCompositionEnd]),\n    onCompositionUpdate: useCallback(function (event) {\n      if (hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onCompositionUpdate)) {\n        !state.isComposing && setIsComposing(true);\n        state.isComposing = true;\n      }\n    }, [attributes.onCompositionUpdate]),\n    onCompositionStart: useCallback(function (event) {\n      if (hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onCompositionStart)) {\n        var selection = editor.selection,\n          marks = editor.marks;\n        if (selection) {\n          if (Range.isExpanded(selection)) {\n            Editor.deleteFragment(editor);\n            return;\n          }\n          var inline = Editor.above(editor, {\n            match: function match(n) {\n              return Editor.isInline(editor, n);\n            },\n            mode: 'highest'\n          });\n          if (inline) {\n            var _inline2 = _slicedToArray(inline, 2),\n              inlinePath = _inline2[1];\n            if (Editor.isEnd(editor, selection.anchor, inlinePath)) {\n              var point = Editor.after(editor, inlinePath);\n              Transforms.setSelection(editor, {\n                anchor: point,\n                focus: point\n              });\n            }\n          } // insert new node in advance to ensure composition text will insert\n          // along with final input text\n          // add Unicode BOM prefix to avoid normalize removing this node\n\n          if (marks) {\n            state.hasInsertPrefixInCompositon = true;\n            Transforms.insertNodes(editor, _objectSpread$2({\n              text: \"\\uFEFF\"\n            }, marks), {\n              select: true\n            });\n          }\n        }\n      }\n    }, [attributes.onCompositionStart]),\n    onCopy: useCallback(function (event) {\n      if (hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onCopy)) {\n        event.preventDefault();\n        ReactEditor.setFragmentData(editor, event.clipboardData);\n      }\n    }, [attributes.onCopy]),\n    onCut: useCallback(function (event) {\n      if (!readOnly && hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onCut)) {\n        event.preventDefault();\n        ReactEditor.setFragmentData(editor, event.clipboardData);\n        var selection = editor.selection;\n        if (selection) {\n          if (Range.isExpanded(selection)) {\n            Editor.deleteFragment(editor);\n          } else {\n            var node = Node.parent(editor, selection.anchor.path);\n            if (Editor.isVoid(editor, node)) {\n              Transforms[\"delete\"](editor);\n            }\n          }\n        }\n      }\n    }, [readOnly, attributes.onCut]),\n    onDragOver: useCallback(function (event) {\n      if (hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDragOver)) {\n        // Only when the target is void, call `preventDefault` to signal\n        // that drops are allowed. Editable content is droppable by\n        // default, and calling `preventDefault` hides the cursor.\n        var node = ReactEditor.toSlateNode(editor, event.target);\n        if (Editor.isVoid(editor, node)) {\n          event.preventDefault();\n        }\n      }\n    }, [attributes.onDragOver]),\n    onDragStart: useCallback(function (event) {\n      if (!readOnly && hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDragStart)) {\n        var node = ReactEditor.toSlateNode(editor, event.target);\n        var path = ReactEditor.findPath(editor, node);\n        var voidMatch = Editor.isVoid(editor, node) || Editor[\"void\"](editor, {\n          at: path,\n          voids: true\n        }); // If starting a drag on a void node, make sure it is selected\n        // so that it shows up in the selection's fragment.\n\n        if (voidMatch) {\n          var range = Editor.range(editor, path);\n          Transforms.select(editor, range);\n        }\n        state.isDraggingInternally = true;\n        ReactEditor.setFragmentData(editor, event.dataTransfer);\n      }\n    }, [attributes.onDragStart]),\n    onDrop: useCallback(function (event) {\n      if (!readOnly && hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDrop)) {\n        event.preventDefault(); // Keep a reference to the dragged range before updating selection\n\n        var draggedRange = editor.selection; // Find the range where the drop happened\n\n        var range = ReactEditor.findEventRange(editor, event);\n        var data = event.dataTransfer;\n        Transforms.select(editor, range);\n        if (state.isDraggingInternally) {\n          if (draggedRange && !Range.equals(draggedRange, range) && !Editor[\"void\"](editor, {\n            at: range,\n            voids: true\n          })) {\n            Transforms[\"delete\"](editor, {\n              at: draggedRange\n            });\n          }\n          state.isDraggingInternally = false;\n        }\n        ReactEditor.insertData(editor, data); // When dragging from another source into the editor, it's possible\n        // that the current editor does not have focus.\n\n        if (!ReactEditor.isFocused(editor)) {\n          ReactEditor.focus(editor);\n        }\n      }\n    }, [readOnly, attributes.onDrop]),\n    onDragEnd: useCallback(function (event) {\n      // When dropping on a different droppable element than the current editor,\n      // `onDrop` is not called. So we need to clean up in `onDragEnd` instead.\n      // Note: `onDragEnd` is only called when `onDrop` is not called\n      if (!readOnly && state.isDraggingInternally && hasTarget(editor, event.target) && !isEventHandled(event, attributes.onDragEnd)) {\n        state.isDraggingInternally = false;\n      }\n    }, [readOnly, attributes.onDragEnd]),\n    onFocus: useCallback(function (event) {\n      if (!readOnly && !state.isUpdatingSelection && hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onFocus)) {\n        var el = ReactEditor.toDOMNode(editor, editor);\n        var root = ReactEditor.findDocumentOrShadowRoot(editor);\n        state.latestElement = root.activeElement; // COMPAT: If the editor has nested editable elements, the focus\n        // can go to them. In Firefox, this must be prevented because it\n        // results in issues with keyboard navigation. (2017/03/30)\n\n        if (IS_FIREFOX && event.target !== el) {\n          el.focus();\n          return;\n        }\n        IS_FOCUSED.set(editor, true);\n      }\n    }, [readOnly, attributes.onFocus]),\n    onKeyDown: useCallback(function (event) {\n      if (!readOnly && !state.isComposing && hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onKeyDown)) {\n        var nativeEvent = event.nativeEvent;\n        var selection = editor.selection;\n        var element = editor.children[selection !== null ? selection.focus.path[0] : 0];\n        var isRTL = getDirection(Node.string(element)) === 'rtl'; // COMPAT: Since we prevent the default behavior on\n        // `beforeinput` events, the browser doesn't think there's ever\n        // any history stack to undo or redo, so we have to manage these\n        // hotkeys ourselves. (2019/11/06)\n\n        if (Hotkeys.isRedo(nativeEvent)) {\n          event.preventDefault();\n          var maybeHistoryEditor = editor;\n          if (typeof maybeHistoryEditor.redo === 'function') {\n            maybeHistoryEditor.redo();\n          }\n          return;\n        }\n        if (Hotkeys.isUndo(nativeEvent)) {\n          event.preventDefault();\n          var _maybeHistoryEditor = editor;\n          if (typeof _maybeHistoryEditor.undo === 'function') {\n            _maybeHistoryEditor.undo();\n          }\n          return;\n        } // COMPAT: Certain browsers don't handle the selection updates\n        // properly. In Chrome, the selection isn't properly extended.\n        // And in Firefox, the selection isn't properly collapsed.\n        // (2017/10/17)\n\n        if (Hotkeys.isMoveLineBackward(nativeEvent)) {\n          event.preventDefault();\n          Transforms.move(editor, {\n            unit: 'line',\n            reverse: true\n          });\n          return;\n        }\n        if (Hotkeys.isMoveLineForward(nativeEvent)) {\n          event.preventDefault();\n          Transforms.move(editor, {\n            unit: 'line'\n          });\n          return;\n        }\n        if (Hotkeys.isExtendLineBackward(nativeEvent)) {\n          event.preventDefault();\n          Transforms.move(editor, {\n            unit: 'line',\n            edge: 'focus',\n            reverse: true\n          });\n          return;\n        }\n        if (Hotkeys.isExtendLineForward(nativeEvent)) {\n          event.preventDefault();\n          Transforms.move(editor, {\n            unit: 'line',\n            edge: 'focus'\n          });\n          return;\n        } // COMPAT: If a void node is selected, or a zero-width text node\n        // adjacent to an inline is selected, we need to handle these\n        // hotkeys manually because browsers won't be able to skip over\n        // the void node with the zero-width space not being an empty\n        // string.\n\n        if (Hotkeys.isMoveBackward(nativeEvent)) {\n          event.preventDefault();\n          if (selection && Range.isCollapsed(selection)) {\n            Transforms.move(editor, {\n              reverse: !isRTL\n            });\n          } else {\n            Transforms.collapse(editor, {\n              edge: 'start'\n            });\n          }\n          return;\n        }\n        if (Hotkeys.isMoveForward(nativeEvent)) {\n          event.preventDefault();\n          if (selection && Range.isCollapsed(selection)) {\n            Transforms.move(editor, {\n              reverse: isRTL\n            });\n          } else {\n            Transforms.collapse(editor, {\n              edge: 'end'\n            });\n          }\n          return;\n        }\n        if (Hotkeys.isMoveWordBackward(nativeEvent)) {\n          event.preventDefault();\n          if (selection && Range.isExpanded(selection)) {\n            Transforms.collapse(editor, {\n              edge: 'focus'\n            });\n          }\n          Transforms.move(editor, {\n            unit: 'word',\n            reverse: !isRTL\n          });\n          return;\n        }\n        if (Hotkeys.isMoveWordForward(nativeEvent)) {\n          event.preventDefault();\n          if (selection && Range.isExpanded(selection)) {\n            Transforms.collapse(editor, {\n              edge: 'focus'\n            });\n          }\n          Transforms.move(editor, {\n            unit: 'word',\n            reverse: isRTL\n          });\n          return;\n        } // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n        // fall back to guessing at the input intention for hotkeys.\n        // COMPAT: In iOS, some of these hotkeys are handled in the\n\n        if (!HAS_BEFORE_INPUT_SUPPORT) {\n          // We don't have a core behavior for these, but they change the\n          // DOM if we don't prevent them, so we have to.\n          if (Hotkeys.isBold(nativeEvent) || Hotkeys.isItalic(nativeEvent) || Hotkeys.isTransposeCharacter(nativeEvent)) {\n            event.preventDefault();\n            return;\n          }\n          if (Hotkeys.isSplitBlock(nativeEvent)) {\n            event.preventDefault();\n            Editor.insertBreak(editor);\n            return;\n          }\n          if (Hotkeys.isDeleteBackward(nativeEvent)) {\n            event.preventDefault();\n            if (selection && Range.isExpanded(selection)) {\n              Editor.deleteFragment(editor, {\n                direction: 'backward'\n              });\n            } else {\n              Editor.deleteBackward(editor);\n            }\n            return;\n          }\n          if (Hotkeys.isDeleteForward(nativeEvent)) {\n            event.preventDefault();\n            if (selection && Range.isExpanded(selection)) {\n              Editor.deleteFragment(editor, {\n                direction: 'forward'\n              });\n            } else {\n              Editor.deleteForward(editor);\n            }\n            return;\n          }\n          if (Hotkeys.isDeleteLineBackward(nativeEvent)) {\n            event.preventDefault();\n            if (selection && Range.isExpanded(selection)) {\n              Editor.deleteFragment(editor, {\n                direction: 'backward'\n              });\n            } else {\n              Editor.deleteBackward(editor, {\n                unit: 'line'\n              });\n            }\n            return;\n          }\n          if (Hotkeys.isDeleteLineForward(nativeEvent)) {\n            event.preventDefault();\n            if (selection && Range.isExpanded(selection)) {\n              Editor.deleteFragment(editor, {\n                direction: 'forward'\n              });\n            } else {\n              Editor.deleteForward(editor, {\n                unit: 'line'\n              });\n            }\n            return;\n          }\n          if (Hotkeys.isDeleteWordBackward(nativeEvent)) {\n            event.preventDefault();\n            if (selection && Range.isExpanded(selection)) {\n              Editor.deleteFragment(editor, {\n                direction: 'backward'\n              });\n            } else {\n              Editor.deleteBackward(editor, {\n                unit: 'word'\n              });\n            }\n            return;\n          }\n          if (Hotkeys.isDeleteWordForward(nativeEvent)) {\n            event.preventDefault();\n            if (selection && Range.isExpanded(selection)) {\n              Editor.deleteFragment(editor, {\n                direction: 'forward'\n              });\n            } else {\n              Editor.deleteForward(editor, {\n                unit: 'word'\n              });\n            }\n            return;\n          }\n        } else {\n          if (IS_CHROME || IS_SAFARI) {\n            // COMPAT: Chrome and Safari support `beforeinput` event but do not fire\n            // an event when deleting backwards in a selected void inline node\n            if (selection && (Hotkeys.isDeleteBackward(nativeEvent) || Hotkeys.isDeleteForward(nativeEvent)) && Range.isCollapsed(selection)) {\n              var currentNode = Node.parent(editor, selection.anchor.path);\n              if (Element$1.isElement(currentNode) && Editor.isVoid(editor, currentNode) && Editor.isInline(editor, currentNode)) {\n                event.preventDefault();\n                Editor.deleteBackward(editor, {\n                  unit: 'block'\n                });\n                return;\n              }\n            }\n          }\n        }\n      }\n    }, [readOnly, attributes.onKeyDown]),\n    onPaste: useCallback(function (event) {\n      if (!readOnly && hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onPaste)) {\n        // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n        // fall back to React's `onPaste` here instead.\n        // COMPAT: Firefox, Chrome and Safari don't emit `beforeinput` events\n        // when \"paste without formatting\" is used, so fallback. (2020/02/20)\n        if (!HAS_BEFORE_INPUT_SUPPORT || isPlainTextOnlyPaste(event.nativeEvent)) {\n          event.preventDefault();\n          ReactEditor.insertData(editor, event.clipboardData);\n        }\n      }\n    }, [readOnly, attributes.onPaste])\n  }), /*#__PURE__*/React.createElement(Children, {\n    decorations: decorations,\n    node: editor,\n    renderElement: renderElement,\n    renderPlaceholder: renderPlaceholder,\n    renderLeaf: renderLeaf,\n    selection: editor.selection\n  }))));\n};\n/**\r\n * The default placeholder element\r\n */\n_s14(Editable$1, \"jYR6Sc+eb6+10zBN16dTe72PWCY=\", false, function () {\n  return [useSlate, useIsomorphicLayoutEffect, useIsomorphicLayoutEffect, useIsomorphicLayoutEffect];\n});\n_c15 = Editable$1;\nvar DefaultPlaceholder = function DefaultPlaceholder(_ref) {\n  var attributes = _ref.attributes,\n    children = _ref.children;\n  return /*#__PURE__*/React.createElement(\"span\", Object.assign({}, attributes), children);\n};\n/**\r\n * A default memoized decorate function.\r\n */\n_c16 = DefaultPlaceholder;\nvar defaultDecorate = function defaultDecorate() {\n  return [];\n};\n/**\r\n * A default implement to scroll dom range into view.\r\n */\n\nvar defaultScrollSelectionIntoView = function defaultScrollSelectionIntoView(editor, domRange) {\n  // This was affecting the selection of multiple blocks and dragging behavior,\n  // so enabled only if the selection has been collapsed.\n  if (!editor.selection || editor.selection && Range.isCollapsed(editor.selection)) {\n    var leafEl = domRange.startContainer.parentElement;\n    leafEl.getBoundingClientRect = domRange.getBoundingClientRect.bind(domRange);\n    scrollIntoView(leafEl, {\n      scrollMode: 'if-needed'\n    });\n    delete leafEl.getBoundingClientRect;\n  }\n};\n/**\r\n * Check if the target is in the editor.\r\n */\n\nvar hasTarget = function hasTarget(editor, target) {\n  return isDOMNode(target) && ReactEditor.hasDOMNode(editor, target);\n};\n/**\r\n * Check if the target is editable and in the editor.\r\n */\n\nvar hasEditableTarget = function hasEditableTarget(editor, target) {\n  return isDOMNode(target) && ReactEditor.hasDOMNode(editor, target, {\n    editable: true\n  });\n};\n/**\r\n * Check if the target is inside void and in the editor.\r\n */\n\nvar isTargetInsideVoid = function isTargetInsideVoid(editor, target) {\n  var slateNode = hasTarget(editor, target) && ReactEditor.toSlateNode(editor, target);\n  return Editor.isVoid(editor, slateNode);\n};\n/**\r\n * Check if an event is overrided by a handler.\r\n */\n\nvar isEventHandled = function isEventHandled(event, handler) {\n  if (!handler) {\n    return false;\n  } // The custom event handler may return a boolean to specify whether the event\n  // shall be treated as being handled or not.\n\n  var shouldTreatEventAsHandled = handler(event);\n  if (shouldTreatEventAsHandled != null) {\n    return shouldTreatEventAsHandled;\n  }\n  return event.isDefaultPrevented() || event.isPropagationStopped();\n};\n/**\r\n * Check if a DOM event is overrided by a handler.\r\n */\n\nvar isDOMEventHandled = function isDOMEventHandled(event, handler) {\n  if (!handler) {\n    return false;\n  } // The custom event handler may return a boolean to specify whether the event\n  // shall be treated as being handled or not.\n\n  var shouldTreatEventAsHandled = handler(event);\n  if (shouldTreatEventAsHandled != null) {\n    return shouldTreatEventAsHandled;\n  }\n  return event.defaultPrevented;\n};\n\n/**\r\n * An auto-incrementing identifier for keys.\r\n */\nvar n = 0;\n/**\r\n * A class that keeps track of a key string. We use a full class here because we\r\n * want to be able to use them as keys in `WeakMap` objects.\r\n */\nvar Key = /*#__PURE__*/_createClass(function Key() {\n  _classCallCheck(this, Key);\n  this.id = \"\".concat(n++);\n});\nvar ReactEditor = {\n  /**\r\n   * Return the host window of the current editor.\r\n   */\n  getWindow: function getWindow(editor) {\n    var window = EDITOR_TO_WINDOW.get(editor);\n    if (!window) {\n      throw new Error('Unable to find a host window element for this editor');\n    }\n    return window;\n  },\n  /**\r\n   * Find a key for a Slate node.\r\n   */\n  findKey: function findKey(editor, node) {\n    var key = NODE_TO_KEY.get(node);\n    if (!key) {\n      key = new Key();\n      NODE_TO_KEY.set(node, key);\n    }\n    return key;\n  },\n  /**\r\n   * Find the path of Slate node.\r\n   */\n  findPath: function findPath(editor, node) {\n    var path = [];\n    var child = node;\n    while (true) {\n      var parent = NODE_TO_PARENT.get(child);\n      if (parent == null) {\n        if (Editor.isEditor(child)) {\n          return path;\n        } else {\n          break;\n        }\n      }\n      var i = NODE_TO_INDEX.get(child);\n      if (i == null) {\n        break;\n      }\n      path.unshift(i);\n      child = parent;\n    }\n    throw new Error(\"Unable to find the path for Slate node: \".concat(JSON.stringify(node)));\n  },\n  /**\r\n   * Find the DOM node that implements DocumentOrShadowRoot for the editor.\r\n   */\n  findDocumentOrShadowRoot: function findDocumentOrShadowRoot(editor) {\n    var el = ReactEditor.toDOMNode(editor, editor);\n    var root = el.getRootNode();\n    if ((root instanceof Document || root instanceof ShadowRoot) && root.getSelection != null) {\n      return root;\n    }\n    return el.ownerDocument;\n  },\n  /**\r\n   * Check if the editor is focused.\r\n   */\n  isFocused: function isFocused(editor) {\n    return !!IS_FOCUSED.get(editor);\n  },\n  /**\r\n   * Check if the editor is in read-only mode.\r\n   */\n  isReadOnly: function isReadOnly(editor) {\n    return !!IS_READ_ONLY.get(editor);\n  },\n  /**\r\n   * Blur the editor.\r\n   */\n  blur: function blur(editor) {\n    var el = ReactEditor.toDOMNode(editor, editor);\n    var root = ReactEditor.findDocumentOrShadowRoot(editor);\n    IS_FOCUSED.set(editor, false);\n    if (root.activeElement === el) {\n      el.blur();\n    }\n  },\n  /**\r\n   * Focus the editor.\r\n   */\n  focus: function focus(editor) {\n    var el = ReactEditor.toDOMNode(editor, editor);\n    var root = ReactEditor.findDocumentOrShadowRoot(editor);\n    IS_FOCUSED.set(editor, true);\n    if (root.activeElement !== el) {\n      el.focus({\n        preventScroll: true\n      });\n    }\n  },\n  /**\r\n   * Deselect the editor.\r\n   */\n  deselect: function deselect(editor) {\n    ReactEditor.toDOMNode(editor, editor);\n    var selection = editor.selection;\n    var root = ReactEditor.findDocumentOrShadowRoot(editor);\n    var domSelection = root.getSelection();\n    if (domSelection && domSelection.rangeCount > 0) {\n      domSelection.removeAllRanges();\n    }\n    if (selection) {\n      Transforms.deselect(editor);\n    }\n  },\n  /**\r\n   * Check if a DOM node is within the editor.\r\n   */\n  hasDOMNode: function hasDOMNode(editor, target) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var _options$editable = options.editable,\n      editable = _options$editable === void 0 ? false : _options$editable;\n    var editorEl = ReactEditor.toDOMNode(editor, editor);\n    var targetEl; // COMPAT: In Firefox, reading `target.nodeType` will throw an error if\n    // target is originating from an internal \"restricted\" element (e.g. a\n    // stepper arrow on a number input). (2018/05/04)\n    // https://github.com/ianstormtaylor/slate/issues/1819\n\n    try {\n      targetEl = isDOMElement(target) ? target : target.parentElement;\n    } catch (err) {\n      if (!err.message.includes('Permission denied to access property \"nodeType\"')) {\n        throw err;\n      }\n    }\n    if (!targetEl) {\n      return false;\n    }\n    return targetEl.closest(\"[data-slate-editor]\") === editorEl && (!editable || targetEl.isContentEditable ? true : typeof targetEl.isContentEditable === 'boolean' &&\n    // isContentEditable exists only on HTMLElement, and on other nodes it will be undefined\n    // this is the core logic that lets you know you got the right editor.selection instead of null when editor is contenteditable=\"false\"(readOnly)\n    targetEl.closest('[contenteditable=\"false\"]') === editorEl || !!targetEl.getAttribute('data-slate-zero-width'));\n  },\n  /**\r\n   * Insert data from a `DataTransfer` into the editor.\r\n   */\n  insertData: function insertData(editor, data) {\n    editor.insertData(data);\n  },\n  /**\r\n   * Insert fragment data from a `DataTransfer` into the editor.\r\n   */\n  insertFragmentData: function insertFragmentData(editor, data) {\n    return editor.insertFragmentData(data);\n  },\n  /**\r\n   * Insert text data from a `DataTransfer` into the editor.\r\n   */\n  insertTextData: function insertTextData(editor, data) {\n    return editor.insertTextData(data);\n  },\n  /**\r\n   * Sets data from the currently selected fragment on a `DataTransfer`.\r\n   */\n  setFragmentData: function setFragmentData(editor, data) {\n    editor.setFragmentData(data);\n  },\n  /**\r\n   * Find the native DOM element from a Slate node.\r\n   */\n  toDOMNode: function toDOMNode(editor, node) {\n    var KEY_TO_ELEMENT = EDITOR_TO_KEY_TO_ELEMENT.get(editor);\n    var domNode = Editor.isEditor(node) ? EDITOR_TO_ELEMENT.get(editor) : KEY_TO_ELEMENT === null || KEY_TO_ELEMENT === void 0 ? void 0 : KEY_TO_ELEMENT.get(ReactEditor.findKey(editor, node));\n    if (!domNode) {\n      throw new Error(\"Cannot resolve a DOM node from Slate node: \".concat(JSON.stringify(node)));\n    }\n    return domNode;\n  },\n  /**\r\n   * Find a native DOM selection point from a Slate point.\r\n   */\n  toDOMPoint: function toDOMPoint(editor, point) {\n    var _Editor$node = Editor.node(editor, point.path),\n      _Editor$node2 = _slicedToArray(_Editor$node, 1),\n      node = _Editor$node2[0];\n    var el = ReactEditor.toDOMNode(editor, node);\n    var domPoint; // If we're inside a void node, force the offset to 0, otherwise the zero\n    // width spacing character will result in an incorrect offset of 1\n\n    if (Editor[\"void\"](editor, {\n      at: point\n    })) {\n      point = {\n        path: point.path,\n        offset: 0\n      };\n    } // For each leaf, we need to isolate its content, which means filtering\n    // to its direct text and zero-width spans. (We have to filter out any\n    // other siblings that may have been rendered alongside them.)\n\n    var selector = \"[data-slate-string], [data-slate-zero-width]\";\n    var texts = Array.from(el.querySelectorAll(selector));\n    var start = 0;\n    for (var _i2 = 0, _texts = texts; _i2 < _texts.length; _i2++) {\n      var text = _texts[_i2];\n      var domNode = text.childNodes[0];\n      if (domNode == null || domNode.textContent == null) {\n        continue;\n      }\n      var length = domNode.textContent.length;\n      var attr = text.getAttribute('data-slate-length');\n      var trueLength = attr == null ? length : parseInt(attr, 10);\n      var end = start + trueLength;\n      if (point.offset <= end) {\n        var offset = Math.min(length, Math.max(0, point.offset - start));\n        domPoint = [domNode, offset];\n        break;\n      }\n      start = end;\n    }\n    if (!domPoint) {\n      throw new Error(\"Cannot resolve a DOM point from Slate point: \".concat(JSON.stringify(point)));\n    }\n    return domPoint;\n  },\n  /**\r\n   * Find a native DOM range from a Slate `range`.\r\n   *\r\n   * Notice: the returned range will always be ordinal regardless of the direction of Slate `range` due to DOM API limit.\r\n   *\r\n   * there is no way to create a reverse DOM Range using Range.setStart/setEnd\r\n   * according to https://dom.spec.whatwg.org/#concept-range-bp-set.\r\n   */\n  toDOMRange: function toDOMRange(editor, range) {\n    var anchor = range.anchor,\n      focus = range.focus;\n    var isBackward = Range.isBackward(range);\n    var domAnchor = ReactEditor.toDOMPoint(editor, anchor);\n    var domFocus = Range.isCollapsed(range) ? domAnchor : ReactEditor.toDOMPoint(editor, focus);\n    var window = ReactEditor.getWindow(editor);\n    var domRange = window.document.createRange();\n    var _ref10 = isBackward ? domFocus : domAnchor,\n      _ref11 = _slicedToArray(_ref10, 2),\n      startNode = _ref11[0],\n      startOffset = _ref11[1];\n    var _ref12 = isBackward ? domAnchor : domFocus,\n      _ref13 = _slicedToArray(_ref12, 2),\n      endNode = _ref13[0],\n      endOffset = _ref13[1]; // A slate Point at zero-width Leaf always has an offset of 0 but a native DOM selection at\n    // zero-width node has an offset of 1 so we have to check if we are in a zero-width node and\n    // adjust the offset accordingly.\n\n    var startEl = isDOMElement(startNode) ? startNode : startNode.parentElement;\n    var isStartAtZeroWidth = !!startEl.getAttribute('data-slate-zero-width');\n    var endEl = isDOMElement(endNode) ? endNode : endNode.parentElement;\n    var isEndAtZeroWidth = !!endEl.getAttribute('data-slate-zero-width');\n    domRange.setStart(startNode, isStartAtZeroWidth ? 1 : startOffset);\n    domRange.setEnd(endNode, isEndAtZeroWidth ? 1 : endOffset);\n    return domRange;\n  },\n  /**\r\n   * Find a Slate node from a native DOM `element`.\r\n   */\n  toSlateNode: function toSlateNode(editor, domNode) {\n    var domEl = isDOMElement(domNode) ? domNode : domNode.parentElement;\n    if (domEl && !domEl.hasAttribute('data-slate-node')) {\n      domEl = domEl.closest(\"[data-slate-node]\");\n    }\n    var node = domEl ? ELEMENT_TO_NODE.get(domEl) : null;\n    if (!node) {\n      throw new Error(\"Cannot resolve a Slate node from DOM node: \".concat(domEl));\n    }\n    return node;\n  },\n  /**\r\n   * Get the target range from a DOM `event`.\r\n   */\n  findEventRange: function findEventRange(editor, event) {\n    if ('nativeEvent' in event) {\n      event = event.nativeEvent;\n    }\n    var _event = event,\n      x = _event.clientX,\n      y = _event.clientY,\n      target = _event.target;\n    if (x == null || y == null) {\n      throw new Error(\"Cannot resolve a Slate range from a DOM event: \".concat(event));\n    }\n    var node = ReactEditor.toSlateNode(editor, event.target);\n    var path = ReactEditor.findPath(editor, node); // If the drop target is inside a void node, move it into either the\n    // next or previous node, depending on which side the `x` and `y`\n    // coordinates are closest to.\n\n    if (Editor.isVoid(editor, node)) {\n      var rect = target.getBoundingClientRect();\n      var isPrev = editor.isInline(node) ? x - rect.left < rect.left + rect.width - x : y - rect.top < rect.top + rect.height - y;\n      var edge = Editor.point(editor, path, {\n        edge: isPrev ? 'start' : 'end'\n      });\n      var point = isPrev ? Editor.before(editor, edge) : Editor.after(editor, edge);\n      if (point) {\n        var _range = Editor.range(editor, point);\n        return _range;\n      }\n    } // Else resolve a range from the caret position where the drop occured.\n\n    var domRange;\n    var _ReactEditor$getWindo = ReactEditor.getWindow(editor),\n      document = _ReactEditor$getWindo.document; // COMPAT: In Firefox, `caretRangeFromPoint` doesn't exist. (2016/07/25)\n\n    if (document.caretRangeFromPoint) {\n      domRange = document.caretRangeFromPoint(x, y);\n    } else {\n      var position = document.caretPositionFromPoint(x, y);\n      if (position) {\n        domRange = document.createRange();\n        domRange.setStart(position.offsetNode, position.offset);\n        domRange.setEnd(position.offsetNode, position.offset);\n      }\n    }\n    if (!domRange) {\n      throw new Error(\"Cannot resolve a Slate range from a DOM event: \".concat(event));\n    } // Resolve a Slate range from the DOM range.\n\n    var range = ReactEditor.toSlateRange(editor, domRange, {\n      exactMatch: false,\n      suppressThrow: false\n    });\n    return range;\n  },\n  /**\r\n   * Find a Slate point from a DOM selection's `domNode` and `domOffset`.\r\n   */\n  toSlatePoint: function toSlatePoint(editor, domPoint, options) {\n    var exactMatch = options.exactMatch,\n      suppressThrow = options.suppressThrow;\n    var _ref14 = exactMatch ? domPoint : normalizeDOMPoint(domPoint),\n      _ref15 = _slicedToArray(_ref14, 2),\n      nearestNode = _ref15[0],\n      nearestOffset = _ref15[1];\n    var parentNode = nearestNode.parentNode;\n    var textNode = null;\n    var offset = 0;\n    if (parentNode) {\n      var _domNode$textContent;\n      var voidNode = parentNode.closest('[data-slate-void=\"true\"]');\n      var leafNode = parentNode.closest('[data-slate-leaf]');\n      var domNode = null; // Calculate how far into the text node the `nearestNode` is, so that we\n      // can determine what the offset relative to the text node is.\n\n      if (leafNode) {\n        textNode = leafNode.closest('[data-slate-node=\"text\"]');\n        var window = ReactEditor.getWindow(editor);\n        var range = window.document.createRange();\n        range.setStart(textNode, 0);\n        range.setEnd(nearestNode, nearestOffset);\n        var contents = range.cloneContents();\n        var removals = [].concat(_toConsumableArray(Array.prototype.slice.call(contents.querySelectorAll('[data-slate-zero-width]'))), _toConsumableArray(Array.prototype.slice.call(contents.querySelectorAll('[contenteditable=false]'))));\n        removals.forEach(function (el) {\n          el.parentNode.removeChild(el);\n        }); // COMPAT: Edge has a bug where Range.prototype.toString() will\n        // convert \\n into \\r\\n. The bug causes a loop when slate-react\n        // attempts to reposition its cursor to match the native position. Use\n        // textContent.length instead.\n        // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10291116/\n\n        offset = contents.textContent.length;\n        domNode = textNode;\n      } else if (voidNode) {\n        // For void nodes, the element with the offset key will be a cousin, not an\n        // ancestor, so find it by going down from the nearest void parent.\n        leafNode = voidNode.querySelector('[data-slate-leaf]'); // COMPAT: In read-only editors the leaf is not rendered.\n\n        if (!leafNode) {\n          offset = 1;\n        } else {\n          textNode = leafNode.closest('[data-slate-node=\"text\"]');\n          domNode = leafNode;\n          offset = domNode.textContent.length;\n          domNode.querySelectorAll('[data-slate-zero-width]').forEach(function (el) {\n            offset -= el.textContent.length;\n          });\n        }\n      }\n      if (domNode && offset === domNode.textContent.length && (parentNode.hasAttribute('data-slate-zero-width') || IS_FIREFOX && (_domNode$textContent = domNode.textContent) !== null && _domNode$textContent !== void 0 && _domNode$textContent.endsWith('\\n\\n'))) {\n        offset--;\n      }\n    }\n    if (!textNode) {\n      if (suppressThrow) {\n        return null;\n      }\n      throw new Error(\"Cannot resolve a Slate point from DOM point: \".concat(domPoint));\n    } // COMPAT: If someone is clicking from one Slate editor into another,\n    // the select event fires twice, once for the old editor's `element`\n    // first, and then afterwards for the correct `element`. (2017/03/03)\n\n    var slateNode = ReactEditor.toSlateNode(editor, textNode);\n    var path = ReactEditor.findPath(editor, slateNode);\n    return {\n      path: path,\n      offset: offset\n    };\n  },\n  /**\r\n   * Find a Slate range from a DOM range or selection.\r\n   */\n  toSlateRange: function toSlateRange(editor, domRange, options) {\n    var exactMatch = options.exactMatch,\n      suppressThrow = options.suppressThrow;\n    var el = isDOMSelection(domRange) ? domRange.anchorNode : domRange.startContainer;\n    var anchorNode;\n    var anchorOffset;\n    var focusNode;\n    var focusOffset;\n    var isCollapsed;\n    if (el) {\n      if (isDOMSelection(domRange)) {\n        anchorNode = domRange.anchorNode;\n        anchorOffset = domRange.anchorOffset;\n        focusNode = domRange.focusNode;\n        focusOffset = domRange.focusOffset; // COMPAT: There's a bug in chrome that always returns `true` for\n        // `isCollapsed` for a Selection that comes from a ShadowRoot.\n        // (2020/08/08)\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=447523\n\n        if (IS_CHROME && hasShadowRoot()) {\n          isCollapsed = domRange.anchorNode === domRange.focusNode && domRange.anchorOffset === domRange.focusOffset;\n        } else {\n          isCollapsed = domRange.isCollapsed;\n        }\n      } else {\n        anchorNode = domRange.startContainer;\n        anchorOffset = domRange.startOffset;\n        focusNode = domRange.endContainer;\n        focusOffset = domRange.endOffset;\n        isCollapsed = domRange.collapsed;\n      }\n    }\n    if (anchorNode == null || focusNode == null || anchorOffset == null || focusOffset == null) {\n      throw new Error(\"Cannot resolve a Slate range from DOM range: \".concat(domRange));\n    }\n    var anchor = ReactEditor.toSlatePoint(editor, [anchorNode, anchorOffset], {\n      exactMatch: exactMatch,\n      suppressThrow: suppressThrow\n    });\n    if (!anchor) {\n      return null;\n    }\n    var focus = isCollapsed ? anchor : ReactEditor.toSlatePoint(editor, [focusNode, focusOffset], {\n      exactMatch: exactMatch,\n      suppressThrow: suppressThrow\n    });\n    if (!focus) {\n      return null;\n    }\n    var range = {\n      anchor: anchor,\n      focus: focus\n    }; // if the selection is a hanging range that ends in a void\n    // and the DOM focus is an Element\n    // (meaning that the selection ends before the element)\n    // unhang the range to avoid mistakenly including the void\n\n    if (Range.isExpanded(range) && Range.isForward(range) && isDOMElement(focusNode) && Editor[\"void\"](editor, {\n      at: range.focus,\n      mode: 'highest'\n    })) {\n      range = Editor.unhangRange(editor, range, {\n        voids: true\n      });\n    }\n    return range;\n  },\n  hasRange: function hasRange(editor, range) {\n    var anchor = range.anchor,\n      focus = range.focus;\n    return Editor.hasPath(editor, anchor.path) && Editor.hasPath(editor, focus.path);\n  }\n};\n\n/**\r\n * Returns the number of characters that are the same at the beginning of the\r\n * String.\r\n *\r\n * @param prev  the previous text\r\n * @param next  the next text\r\n * @returns the offset of the start of the difference; null if there is no difference\r\n */\n\nfunction getDiffStart(prev, next) {\n  var length = Math.min(prev.length, next.length);\n  for (var i = 0; i < length; i++) {\n    if (prev.charAt(i) !== next.charAt(i)) return i;\n  }\n  if (prev.length !== next.length) return length;\n  return null;\n}\n/**\r\n * Returns the number of characters that are the same at the end of the String\r\n * up to `max`. Max prevents double-counting characters when there are\r\n * multiple duplicate characters around the diff area.\r\n *\r\n * @param prev  the previous text\r\n * @param next  the next text\r\n * @param max  the max length to test.\r\n * @returns number of characters that are the same at the end of the string\r\n */\n\nfunction getDiffEnd(prev, next, max) {\n  var prevLength = prev.length;\n  var nextLength = next.length;\n  var length = Math.min(prevLength, nextLength, max);\n  for (var i = 0; i < length; i++) {\n    var prevChar = prev.charAt(prevLength - i - 1);\n    var nextChar = next.charAt(nextLength - i - 1);\n    if (prevChar !== nextChar) return i;\n  }\n  if (prev.length !== next.length) return length;\n  return null;\n}\n/**\r\n * Takes two strings and returns an object representing two offsets. The\r\n * first, `start` represents the number of characters that are the same at\r\n * the front of the String. The `end` represents the number of characters\r\n * that are the same at the end of the String.\r\n *\r\n * Returns null if they are identical.\r\n *\r\n * @param prev  the previous text\r\n * @param next  the next text\r\n * @returns the difference text range; null if there are no differences.\r\n */\n\nfunction getDiffOffsets(prev, next) {\n  if (prev === next) return null;\n  var start = getDiffStart(prev, next);\n  if (start === null) return null;\n  var maxEnd = Math.min(prev.length - start, next.length - start);\n  var end = getDiffEnd(prev, next, maxEnd);\n  if (end === null) return null;\n  return {\n    start: start,\n    end: end\n  };\n}\n/**\r\n * Takes a text string and returns a slice from the string at the given text range\r\n *\r\n * @param text  the text\r\n * @param offsets  the text range\r\n * @returns the text slice at text range\r\n */\n\nfunction sliceText(text, offsets) {\n  return text.slice(offsets.start, text.length - offsets.end);\n}\n/**\r\n * Takes two strings and returns a smart diff that can be used to describe the\r\n * change in a way that can be used as operations like inserting, removing or\r\n * replacing text.\r\n *\r\n * @param prev the previous text\r\n * @param next the next text\r\n * @returns the text difference\r\n */\n\nfunction diffText(prev, next) {\n  if (prev === undefined || next === undefined) return null;\n  var offsets = getDiffOffsets(prev, next);\n  if (offsets == null) return null;\n  var insertText = sliceText(next, offsets);\n  var removeText = sliceText(prev, offsets);\n  return {\n    start: offsets.start,\n    end: prev.length - offsets.end,\n    insertText: insertText,\n    removeText: removeText\n  };\n}\nfunction combineInsertedText(insertedText) {\n  return insertedText.reduce(function (acc, _ref) {\n    var text = _ref.text;\n    return \"\".concat(acc).concat(text.insertText);\n  }, '');\n}\nfunction getTextInsertion(editor, domNode) {\n  var node = ReactEditor.toSlateNode(editor, domNode);\n  if (!Text$1.isText(node)) {\n    return undefined;\n  }\n  var prevText = node.text;\n  var nextText = domNode.textContent; // textContent will pad an extra \\n when the textContent ends with an \\n\n\n  if (nextText.endsWith('\\n')) {\n    nextText = nextText.slice(0, nextText.length - 1);\n  } // If the text is no different, there is no diff.\n\n  if (nextText !== prevText) {\n    var textDiff = diffText(prevText, nextText);\n    if (textDiff !== null) {\n      var textPath = ReactEditor.findPath(editor, node);\n      return {\n        text: textDiff,\n        path: textPath\n      };\n    }\n  }\n  return undefined;\n}\nfunction normalizeTextInsertionRange(editor, range, _ref2) {\n  var path = _ref2.path,\n    text = _ref2.text;\n  var insertionRange = {\n    anchor: {\n      path: path,\n      offset: text.start\n    },\n    focus: {\n      path: path,\n      offset: text.end\n    }\n  };\n  if (!range || !Range.isCollapsed(range)) {\n    return insertionRange;\n  }\n  var insertText = text.insertText,\n    removeText = text.removeText;\n  var isSingleCharacterInsertion = insertText.length === 1 || removeText.length === 1;\n  /**\r\n   * This code handles edge cases that arise from text diffing when the\r\n   * inserted or removed character is a single character, and the character\r\n   * right before or after the anchor is the same as the one being inserted or\r\n   * removed.\r\n   *\r\n   * Take this example: hello|o\r\n   *\r\n   * If another `o` is inserted at the selection's anchor in the example above,\r\n   * it should be inserted at the anchor, but using text diffing, we actually\r\n   * detect that the character was inserted after the second `o`:\r\n   *\r\n   * helloo[o]|\r\n   *\r\n   * Instead, in these very specific edge cases, we assume that the character\r\n   * needs to be inserted after the anchor rather than where the diff was found:\r\n   *\r\n   * hello[o]|o\r\n   */\n\n  if (isSingleCharacterInsertion && Path.equals(range.anchor.path, path)) {\n    var _Array$from2 = Array.from(Editor.nodes(editor, {\n        at: range,\n        match: Text$1.isText\n      })),\n      _Array$from3 = _slicedToArray(_Array$from2, 1),\n      _text = _Array$from3[0];\n    if (_text) {\n      var _text2 = _slicedToArray(_text, 1),\n        node = _text2[0];\n      var anchor = range.anchor;\n      var characterBeforeAnchor = node.text[anchor.offset - 1];\n      var characterAfterAnchor = node.text[anchor.offset];\n      if (insertText.length === 1 && insertText === characterAfterAnchor) {\n        // Assume text should be inserted at the anchor\n        return range;\n      }\n      if (removeText.length === 1 && removeText === characterBeforeAnchor) {\n        // Assume text should be removed right before the anchor\n        return {\n          anchor: {\n            path: path,\n            offset: anchor.offset - 1\n          },\n          focus: {\n            path: path,\n            offset: anchor.offset\n          }\n        };\n      }\n    }\n  }\n  return insertionRange;\n}\nfunction gatherMutationData(editor, mutations) {\n  var addedNodes = [];\n  var removedNodes = [];\n  var insertedText = [];\n  var characterDataMutations = [];\n  mutations.forEach(function (mutation) {\n    switch (mutation.type) {\n      case 'childList':\n        {\n          if (mutation.addedNodes.length) {\n            mutation.addedNodes.forEach(function (addedNode) {\n              addedNodes.push(addedNode);\n            });\n          }\n          mutation.removedNodes.forEach(function (removedNode) {\n            removedNodes.push(removedNode);\n          });\n          break;\n        }\n      case 'characterData':\n        {\n          characterDataMutations.push(mutation); // Changes to text nodes should consider the parent element\n\n          var parentNode = mutation.target.parentNode;\n          if (!parentNode) {\n            return;\n          }\n          var textInsertion = getTextInsertion(editor, parentNode);\n          if (!textInsertion) {\n            return;\n          } // If we've already detected a diff at that path, we can return early\n\n          if (insertedText.some(function (_ref) {\n            var path = _ref.path;\n            return Path.equals(path, textInsertion.path);\n          })) {\n            return;\n          } // Add the text diff to the array of detected text insertions that need to be reconciled\n\n          insertedText.push(textInsertion);\n        }\n    }\n  });\n  return {\n    addedNodes: addedNodes,\n    removedNodes: removedNodes,\n    insertedText: insertedText,\n    characterDataMutations: characterDataMutations\n  };\n}\n/**\r\n * In general, when a line break occurs, there will be more `addedNodes` than `removedNodes`.\r\n *\r\n * This isn't always the case however. In some cases, there will be more `removedNodes` than\r\n * `addedNodes`.\r\n *\r\n * To account for these edge cases, the most reliable strategy to detect line break mutations\r\n * is to check whether a new block was inserted of the same type as the current block.\r\n */\n\nvar isLineBreak = function isLineBreak(editor, _ref2) {\n  var addedNodes = _ref2.addedNodes;\n  var selection = editor.selection;\n  var parentNode = selection ? Node.parent(editor, selection.anchor.path) : null;\n  var parentDOMNode = parentNode ? ReactEditor.toDOMNode(editor, parentNode) : null;\n  if (!parentDOMNode) {\n    return false;\n  }\n  return addedNodes.some(function (addedNode) {\n    return addedNode instanceof HTMLElement && addedNode.tagName === (parentDOMNode === null || parentDOMNode === void 0 ? void 0 : parentDOMNode.tagName);\n  });\n};\n/**\r\n * So long as we check for line break mutations before deletion mutations,\r\n * we can safely assume that a set of mutations was a deletion if there are\r\n * removed nodes.\r\n */\n\nvar isDeletion = function isDeletion(_, _ref3) {\n  var removedNodes = _ref3.removedNodes;\n  return removedNodes.length > 0;\n};\n/**\r\n * If the selection was expanded and there are removed nodes,\r\n * the contents of the selection need to be replaced with the diff\r\n */\n\nvar isReplaceExpandedSelection = function isReplaceExpandedSelection(_ref4, _ref5) {\n  var selection = _ref4.selection;\n  var removedNodes = _ref5.removedNodes;\n  return selection ? Range.isExpanded(selection) && removedNodes.length > 0 : false;\n};\n/**\r\n * Plain text insertion\r\n */\n\nvar isTextInsertion = function isTextInsertion(_, _ref6) {\n  var insertedText = _ref6.insertedText;\n  return insertedText.length > 0;\n};\n/**\r\n * Edge case. Detect mutations that remove leaf nodes and also update character data\r\n */\n\nvar isRemoveLeafNodes = function isRemoveLeafNodes(_, _ref7) {\n  var addedNodes = _ref7.addedNodes,\n    characterDataMutations = _ref7.characterDataMutations,\n    removedNodes = _ref7.removedNodes;\n  return removedNodes.length > 0 && addedNodes.length === 0 && characterDataMutations.length > 0;\n};\nfunction restoreDOM(editor) {\n  try {\n    var onRestoreDOM = EDITOR_TO_RESTORE_DOM.get(editor);\n    if (onRestoreDOM) {\n      onRestoreDOM();\n    }\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err);\n  }\n}\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys$1(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys$1(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\n/**\r\n * Based loosely on:\r\n *\r\n * https://github.com/facebook/draft-js/blob/master/src/component/handlers/composition/DOMObserver.js\r\n * https://github.com/ProseMirror/prosemirror-view/blob/master/src/domobserver.js\r\n *\r\n * The input manager attempts to map observed mutations on the document to a\r\n * set of operations in order to reconcile Slate's internal value with the DOM.\r\n *\r\n * Mutations are processed synchronously as they come in. Only mutations that occur\r\n * during a user input loop are processed, as other mutations can occur within the\r\n * document that were not initiated by user input.\r\n *\r\n * The mutation reconciliation process attempts to match mutations to the following\r\n * patterns:\r\n *\r\n * - Text updates\r\n * - Deletions\r\n * - Line breaks\r\n *\r\n * @param editor\r\n */\nvar AndroidInputManager = /*#__PURE__*/_createClass(function AndroidInputManager(editor) {\n  var _this = this;\n  _classCallCheck(this, AndroidInputManager);\n  this.editor = editor;\n  /**\r\n   * Handle MutationObserver flush\r\n   *\r\n   * @param mutations\r\n   */\n\n  this.flush = function (mutations) {\n    try {\n      _this.reconcileMutations(mutations);\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err); // Failed to reconcile mutations, restore DOM to its previous state\n\n      restoreDOM(_this.editor);\n    }\n  };\n  /**\r\n   * Reconcile a batch of mutations\r\n   *\r\n   * @param mutations\r\n   */\n\n  this.reconcileMutations = function (mutations) {\n    var mutationData = gatherMutationData(_this.editor, mutations);\n    var insertedText = mutationData.insertedText,\n      removedNodes = mutationData.removedNodes;\n    if (isReplaceExpandedSelection(_this.editor, mutationData)) {\n      var text = combineInsertedText(insertedText);\n      _this.replaceExpandedSelection(text);\n    } else if (isLineBreak(_this.editor, mutationData)) {\n      _this.insertBreak();\n    } else if (isRemoveLeafNodes(_this.editor, mutationData)) {\n      _this.removeLeafNodes(removedNodes);\n    } else if (isDeletion(_this.editor, mutationData)) {\n      _this.deleteBackward();\n    } else if (isTextInsertion(_this.editor, mutationData)) {\n      _this.insertText(insertedText);\n    }\n  };\n  /**\r\n   * Apply text diff\r\n   */\n\n  this.insertText = function (insertedText) {\n    var _this$editor = _this.editor,\n      selection = _this$editor.selection,\n      marks = _this$editor.marks; // Insert the batched text diffs\n\n    insertedText.forEach(function (insertion) {\n      var text = insertion.text.insertText;\n      var at = normalizeTextInsertionRange(_this.editor, selection, insertion);\n      if (marks) {\n        var node = _objectSpread$1({\n          text: text\n        }, marks);\n        Transforms.insertNodes(_this.editor, node, {\n          match: Text$1.isText,\n          at: at,\n          select: true\n        });\n        _this.editor.marks = null;\n      } else {\n        Transforms.insertText(_this.editor, text, {\n          at: at\n        });\n      }\n    });\n  };\n  /**\r\n   * Handle line breaks\r\n   */\n\n  this.insertBreak = function () {\n    var selection = _this.editor.selection;\n    Editor.insertBreak(_this.editor); // To-do: Need a more granular solution to restoring only a specific portion\n    // of the document. Restoring the entire document is expensive.\n\n    restoreDOM(_this.editor);\n    if (selection) {\n      // Compat: Move selection to the newly inserted block if it has not moved\n      setTimeout(function () {\n        if (_this.editor.selection && Range.equals(selection, _this.editor.selection)) {\n          Transforms.move(_this.editor);\n        }\n      }, 100);\n    }\n  };\n  /**\r\n   * Handle expanded selection being deleted or replaced by text\r\n   */\n\n  this.replaceExpandedSelection = function (text) {\n    Editor.deleteFragment(_this.editor);\n    if (text.length) {\n      // Selection was replaced by text, insert the entire text diff\n      Editor.insertText(_this.editor, text);\n    }\n    restoreDOM(_this.editor);\n  };\n  /**\r\n   * Handle `backspace` that merges blocks\r\n   */\n\n  this.deleteBackward = function () {\n    Editor.deleteBackward(_this.editor);\n    ReactEditor.focus(_this.editor);\n    restoreDOM(_this.editor);\n  };\n  /**\r\n   * Handle mutations that remove specific leaves\r\n   */\n\n  this.removeLeafNodes = function (nodes) {\n    var _iterator3 = _createForOfIteratorHelper(nodes),\n      _step3;\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var node = _step3.value;\n        var slateNode = ReactEditor.toSlateNode(_this.editor, node);\n        if (slateNode) {\n          var path = ReactEditor.findPath(_this.editor, slateNode);\n          Transforms[\"delete\"](_this.editor, {\n            at: path\n          });\n          restoreDOM(_this.editor);\n        }\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  };\n  this.editor = editor;\n});\nfunction useMutationObserver(node, callback, options) {\n  _s15();\n  var _useState2 = useState(function () {\n      return new MutationObserver(callback);\n    }),\n    mutationObserver = _useState2[0];\n  useIsomorphicLayoutEffect(function () {\n    // Disconnect mutation observer during render phase\n    mutationObserver.disconnect();\n  });\n  useEffect(function () {\n    if (!node.current) {\n      throw new Error('Failed to attach MutationObserver, `node` is undefined');\n    } // Attach mutation observer after render phase has finished\n\n    mutationObserver.observe(node.current, options); // Clean up after effect\n\n    return mutationObserver.disconnect.bind(mutationObserver);\n  });\n}\n_s15(useMutationObserver, \"duoyOgbjBImZLRqInhhg5BvpDcg=\", false, function () {\n  return [useIsomorphicLayoutEffect];\n});\nfunction useTrackUserInput() {\n  _s16();\n  var editor = useSlateStatic();\n  var receivedUserInput = useRef(false);\n  var animationFrameRef = useRef(null);\n  var onUserInput = useCallback(function () {\n    if (receivedUserInput.current === false) {\n      var window = ReactEditor.getWindow(editor);\n      receivedUserInput.current = true;\n      if (animationFrameRef.current) {\n        window.cancelAnimationFrame(animationFrameRef.current);\n      }\n      animationFrameRef.current = window.requestAnimationFrame(function () {\n        receivedUserInput.current = false;\n        animationFrameRef.current = null;\n      });\n    }\n  }, []);\n  useEffect(function () {\n    // Reset user input tracking on every render\n    if (receivedUserInput.current) {\n      receivedUserInput.current = false;\n    }\n  });\n  return {\n    receivedUserInput: receivedUserInput,\n    onUserInput: onUserInput\n  };\n}\n_s16(useTrackUserInput, \"jYizPFxgnOoRHwODoCUshCFt0Ac=\", false, function () {\n  return [useSlateStatic];\n});\nvar MUTATION_OBSERVER_CONFIG = {\n  childList: true,\n  characterData: true,\n  characterDataOldValue: true,\n  subtree: true\n};\nfunction useAndroidInputManager(node) {\n  _s17();\n  var editor = useSlateStatic();\n  var _useState3 = useState(function () {\n      return new AndroidInputManager(editor);\n    }),\n    inputManager = _useState3[0];\n  var _useTrackUserInput = useTrackUserInput(),\n    receivedUserInput = _useTrackUserInput.receivedUserInput,\n    onUserInput = _useTrackUserInput.onUserInput;\n  var timeoutId = useRef(null);\n  var isReconciling = useRef(false);\n  var flush = useCallback(function (mutations) {\n    if (!receivedUserInput.current) {\n      return;\n    }\n    isReconciling.current = true;\n    inputManager.flush(mutations);\n    if (timeoutId.current) {\n      clearTimeout(timeoutId.current);\n    }\n    timeoutId.current = setTimeout(function () {\n      isReconciling.current = false;\n      timeoutId.current = null;\n    }, 250);\n  }, []);\n  useMutationObserver(node, flush, MUTATION_OBSERVER_CONFIG);\n  return {\n    isReconciling: isReconciling,\n    onUserInput: onUserInput\n  };\n}\n_s17(useAndroidInputManager, \"TKTIQKOvIvv/CNc8UAnPcZt8TpA=\", false, function () {\n  return [useSlateStatic, useTrackUserInput, useMutationObserver];\n});\nvar _excluded$1 = [\"autoFocus\", \"decorate\", \"onDOMBeforeInput\", \"placeholder\", \"readOnly\", \"renderElement\", \"renderLeaf\", \"renderPlaceholder\", \"style\", \"as\"];\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\n/**\r\n * Editable.\r\n */\n\nvar AndroidEditable = function AndroidEditable(props) {\n  _s18();\n  var autoFocus = props.autoFocus,\n    _props$decorate2 = props.decorate,\n    decorate = _props$decorate2 === void 0 ? defaultDecorate : _props$decorate2,\n    propsOnDOMBeforeInput = props.onDOMBeforeInput,\n    placeholder = props.placeholder,\n    _props$readOnly2 = props.readOnly,\n    readOnly = _props$readOnly2 === void 0 ? false : _props$readOnly2,\n    renderElement = props.renderElement,\n    renderLeaf = props.renderLeaf,\n    _props$renderPlacehol2 = props.renderPlaceholder,\n    renderPlaceholder = _props$renderPlacehol2 === void 0 ? function (props) {\n      return /*#__PURE__*/React.createElement(DefaultPlaceholder, Object.assign({}, props));\n    } : _props$renderPlacehol2,\n    _props$style2 = props.style,\n    style = _props$style2 === void 0 ? {} : _props$style2,\n    _props$as2 = props.as,\n    Component = _props$as2 === void 0 ? 'div' : _props$as2,\n    attributes = _objectWithoutProperties(props, _excluded$1);\n  var editor = useSlate();\n  var ref = useRef(null);\n  var inputManager = useAndroidInputManager(ref); // Update internal state on each render.\n\n  IS_READ_ONLY.set(editor, readOnly); // Keep track of some state for the event handler logic.\n\n  var state = useMemo(function () {\n    return {\n      isUpdatingSelection: false,\n      latestElement: null\n    };\n  }, []);\n  var _useState4 = useState(0),\n    contentKey = _useState4[0],\n    setContentKey = _useState4[1];\n  var onRestoreDOM = useCallback(function () {\n    setContentKey(function (prev) {\n      return prev + 1;\n    });\n  }, [contentKey]); // Whenever the editor updates...\n\n  useIsomorphicLayoutEffect(function () {\n    // Update element-related weak maps with the DOM element ref.\n    var window;\n    if (ref.current && (window = getDefaultView(ref.current))) {\n      EDITOR_TO_WINDOW.set(editor, window);\n      EDITOR_TO_ELEMENT.set(editor, ref.current);\n      NODE_TO_ELEMENT.set(editor, ref.current);\n      ELEMENT_TO_NODE.set(ref.current, editor);\n      EDITOR_TO_RESTORE_DOM.set(editor, onRestoreDOM);\n    } else {\n      NODE_TO_ELEMENT[\"delete\"](editor);\n      EDITOR_TO_RESTORE_DOM[\"delete\"](editor);\n    }\n    try {\n      // Make sure the DOM selection state is in sync.\n      var selection = editor.selection;\n      var root = ReactEditor.findDocumentOrShadowRoot(editor);\n      var domSelection = root.getSelection();\n      if (!domSelection || !ReactEditor.isFocused(editor)) {\n        return;\n      }\n      var hasDomSelection = domSelection.type !== 'None'; // If the DOM selection is properly unset, we're done.\n\n      if (!selection && !hasDomSelection) {\n        return;\n      } // verify that the dom selection is in the editor\n\n      var editorElement = EDITOR_TO_ELEMENT.get(editor);\n      var hasDomSelectionInEditor = false;\n      if (editorElement.contains(domSelection.anchorNode) && editorElement.contains(domSelection.focusNode)) {\n        hasDomSelectionInEditor = true;\n      } // If the DOM selection is in the editor and the editor selection is already correct, we're done.\n\n      if (hasDomSelection && hasDomSelectionInEditor && selection) {\n        var slateRange = ReactEditor.toSlateRange(editor, domSelection, {\n          exactMatch: true,\n          suppressThrow: true\n        });\n        if (slateRange && Range.equals(slateRange, selection)) {\n          return;\n        }\n      } // when <Editable/> is being controlled through external value\n      // then its children might just change - DOM responds to it on its own\n      // but Slate's value is not being updated through any operation\n      // and thus it doesn't transform selection on its own\n\n      if (selection && !ReactEditor.hasRange(editor, selection)) {\n        editor.selection = ReactEditor.toSlateRange(editor, domSelection, {\n          exactMatch: false,\n          suppressThrow: false\n        });\n        return;\n      } // Otherwise the DOM selection is out of sync, so update it.\n\n      var el = ReactEditor.toDOMNode(editor, editor);\n      state.isUpdatingSelection = true;\n      var newDomRange = selection && ReactEditor.toDOMRange(editor, selection);\n      if (newDomRange) {\n        if (Range.isBackward(selection)) {\n          domSelection.setBaseAndExtent(newDomRange.endContainer, newDomRange.endOffset, newDomRange.startContainer, newDomRange.startOffset);\n        } else {\n          domSelection.setBaseAndExtent(newDomRange.startContainer, newDomRange.startOffset, newDomRange.endContainer, newDomRange.endOffset);\n        }\n        var leafEl = newDomRange.startContainer.parentElement;\n        leafEl.getBoundingClientRect = newDomRange.getBoundingClientRect.bind(newDomRange);\n        scrollIntoView(leafEl, {\n          scrollMode: 'if-needed',\n          boundary: el\n        }); // @ts-ignore\n\n        delete leafEl.getBoundingClientRect;\n      } else {\n        domSelection.removeAllRanges();\n      }\n      setTimeout(function () {\n        state.isUpdatingSelection = false;\n      });\n    } catch (_unused) {\n      // Failed to update selection, likely due to reconciliation error\n      state.isUpdatingSelection = false;\n    }\n  }); // The autoFocus TextareaHTMLAttribute doesn't do anything on a div, so it\n  // needs to be manually focused.\n\n  useEffect(function () {\n    if (ref.current && autoFocus) {\n      ref.current.focus();\n    }\n  }, [autoFocus]); // Listen on the native `beforeinput` event to get real \"Level 2\" events. This\n  // is required because React's `beforeinput` is fake and never really attaches\n  // to the real event sadly. (2019/11/01)\n  // https://github.com/facebook/react/issues/11211\n\n  var onDOMBeforeInput = useCallback(function (event) {\n    if (!readOnly && hasEditableTarget(editor, event.target) && !isDOMEventHandled(event, propsOnDOMBeforeInput)) {\n      inputManager.onUserInput();\n    }\n  }, [readOnly, propsOnDOMBeforeInput]); // Attach a native DOM event handler for `beforeinput` events, because React's\n  // built-in `onBeforeInput` is actually a leaky polyfill that doesn't expose\n  // real `beforeinput` events sadly... (2019/11/04)\n\n  useIsomorphicLayoutEffect(function () {\n    var node = ref.current; // @ts-ignore The `beforeinput` event isn't recognized.\n\n    node === null || node === void 0 ? void 0 : node.addEventListener('beforeinput', onDOMBeforeInput); // @ts-ignore The `beforeinput` event isn't recognized.\n\n    return function () {\n      return node === null || node === void 0 ? void 0 : node.removeEventListener('beforeinput', onDOMBeforeInput);\n    };\n  }, [contentKey, propsOnDOMBeforeInput]); // Listen on the native `selectionchange` event to be able to update any time\n  // the selection changes. This is required because React's `onSelect` is leaky\n  // and non-standard so it doesn't fire until after a selection has been\n  // released. This causes issues in situations where another change happens\n  // while a selection is being dragged.\n\n  var onDOMSelectionChange = useCallback(throttle(function () {\n    try {\n      if (!state.isUpdatingSelection && !inputManager.isReconciling.current) {\n        var root = ReactEditor.findDocumentOrShadowRoot(editor);\n        var activeElement = root.activeElement;\n        var el = ReactEditor.toDOMNode(editor, editor);\n        var domSelection = root.getSelection();\n        if (activeElement === el) {\n          state.latestElement = activeElement;\n          IS_FOCUSED.set(editor, true);\n        } else {\n          IS_FOCUSED[\"delete\"](editor);\n        }\n        if (!domSelection) {\n          return Transforms.deselect(editor);\n        }\n        var anchorNode = domSelection.anchorNode,\n          focusNode = domSelection.focusNode;\n        var anchorNodeSelectable = hasEditableTarget(editor, anchorNode) || isTargetInsideVoid(editor, anchorNode);\n        var focusNodeSelectable = hasEditableTarget(editor, focusNode) || isTargetInsideVoid(editor, focusNode);\n        if (anchorNodeSelectable && focusNodeSelectable) {\n          var range = ReactEditor.toSlateRange(editor, domSelection, {\n            exactMatch: false,\n            suppressThrow: false\n          });\n          Transforms.select(editor, range);\n        } else {\n          Transforms.deselect(editor);\n        }\n      }\n    } catch (_unused2) {// Failed to update selection, likely due to reconciliation error\n    }\n  }, 100), [readOnly]); // Attach a native DOM event handler for `selectionchange`, because React's\n  // built-in `onSelect` handler doesn't fire for all selection changes. It's a\n  // leaky polyfill that only fires on keypresses or clicks. Instead, we want to\n  // fire for any change to the selection inside the editor. (2019/11/04)\n  // https://github.com/facebook/react/issues/5785\n\n  useIsomorphicLayoutEffect(function () {\n    var window = ReactEditor.getWindow(editor);\n    window.document.addEventListener('selectionchange', onDOMSelectionChange);\n    return function () {\n      window.document.removeEventListener('selectionchange', onDOMSelectionChange);\n    };\n  });\n  var decorations = decorate([editor, []]);\n  if (placeholder && editor.children.length === 1 && Array.from(Node.texts(editor)).length === 1 && Node.string(editor) === '') {\n    var _decorations$push2;\n    var start = Editor.start(editor, []);\n    decorations.push((_decorations$push2 = {}, _defineProperty2(_decorations$push2, PLACEHOLDER_SYMBOL, true), _defineProperty2(_decorations$push2, \"placeholder\", placeholder), _defineProperty2(_decorations$push2, \"anchor\", start), _defineProperty2(_decorations$push2, \"focus\", start), _decorations$push2));\n  }\n  return /*#__PURE__*/React.createElement(ReadOnlyContext.Provider, {\n    value: readOnly\n  }, /*#__PURE__*/React.createElement(DecorateContext.Provider, {\n    value: decorate\n  }, /*#__PURE__*/React.createElement(Component, Object.assign({\n    key: contentKey,\n    role: readOnly ? undefined : 'textbox'\n  }, attributes, {\n    spellCheck: attributes.spellCheck,\n    autoCorrect: attributes.autoCorrect,\n    autoCapitalize: attributes.autoCapitalize,\n    \"data-slate-editor\": true,\n    \"data-slate-node\": \"value\",\n    contentEditable: readOnly ? undefined : true,\n    suppressContentEditableWarning: true,\n    ref: ref,\n    style: _objectSpread({\n      // Allow positioning relative to the editable element.\n      position: 'relative',\n      // Prevent the default outline styles.\n      outline: 'none',\n      // Preserve adjacent whitespace and new lines.\n      whiteSpace: 'pre-wrap',\n      // Allow words to break if they are too long.\n      wordWrap: 'break-word'\n    }, style),\n    onCopy: useCallback(function (event) {\n      if (hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onCopy)) {\n        event.preventDefault();\n        ReactEditor.setFragmentData(editor, event.clipboardData);\n      }\n    }, [attributes.onCopy]),\n    onCut: useCallback(function (event) {\n      if (!readOnly && hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onCut)) {\n        event.preventDefault();\n        ReactEditor.setFragmentData(editor, event.clipboardData);\n        var selection = editor.selection;\n        if (selection) {\n          if (Range.isExpanded(selection)) {\n            Editor.deleteFragment(editor);\n          } else {\n            var node = Node.parent(editor, selection.anchor.path);\n            if (Editor.isVoid(editor, node)) {\n              Transforms[\"delete\"](editor);\n            }\n          }\n        }\n      }\n    }, [readOnly, attributes.onCut]),\n    onFocus: useCallback(function (event) {\n      if (!readOnly && !state.isUpdatingSelection && hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onFocus)) {\n        var root = ReactEditor.findDocumentOrShadowRoot(editor);\n        state.latestElement = root.activeElement;\n        IS_FOCUSED.set(editor, true);\n      }\n    }, [readOnly, attributes.onFocus]),\n    onBlur: useCallback(function (event) {\n      if (readOnly || state.isUpdatingSelection || !hasEditableTarget(editor, event.target) || isEventHandled(event, attributes.onBlur)) {\n        return;\n      } // COMPAT: If the current `activeElement` is still the previous\n      // one, this is due to the window being blurred when the tab\n      // itself becomes unfocused, so we want to abort early to allow to\n      // editor to stay focused when the tab becomes focused again.\n\n      var root = ReactEditor.findDocumentOrShadowRoot(editor);\n      if (state.latestElement === root.activeElement) {\n        return;\n      }\n      var relatedTarget = event.relatedTarget;\n      var el = ReactEditor.toDOMNode(editor, editor); // COMPAT: The event should be ignored if the focus is returning\n      // to the editor from an embedded editable element (eg. an <input>\n      // element inside a void node).\n\n      if (relatedTarget === el) {\n        return;\n      } // COMPAT: The event should be ignored if the focus is moving from\n      // the editor to inside a void node's spacer element.\n\n      if (isDOMElement(relatedTarget) && relatedTarget.hasAttribute('data-slate-spacer')) {\n        return;\n      } // COMPAT: The event should be ignored if the focus is moving to a\n      // non- editable section of an element that isn't a void node (eg.\n      // a list item of the check list example).\n\n      if (relatedTarget != null && isDOMNode(relatedTarget) && ReactEditor.hasDOMNode(editor, relatedTarget)) {\n        var node = ReactEditor.toSlateNode(editor, relatedTarget);\n        if (Element$1.isElement(node) && !editor.isVoid(node)) {\n          return;\n        }\n      }\n      IS_FOCUSED[\"delete\"](editor);\n    }, [readOnly, attributes.onBlur]),\n    onPaste: useCallback(function (event) {\n      // this will make application/x-slate-fragment exist when onPaste attributes is passed\n      event.clipboardData = getClipboardData(event.clipboardData); // This unfortunately needs to be handled with paste events instead.\n\n      if (hasEditableTarget(editor, event.target) && !isEventHandled(event, attributes.onPaste) && !readOnly) {\n        event.preventDefault();\n        ReactEditor.insertData(editor, event.clipboardData);\n      }\n    }, [readOnly, attributes.onPaste])\n  }), useChildren({\n    decorations: decorations,\n    node: editor,\n    renderElement: renderElement,\n    renderPlaceholder: renderPlaceholder,\n    renderLeaf: renderLeaf,\n    selection: editor.selection\n  }))));\n};\n\n/**\r\n * A React context for sharing the `focused` state of the editor.\r\n */\n_s18(AndroidEditable, \"SG7QUSB/VjZsK3tyWz9wxOQ0sMw=\", false, function () {\n  return [useSlate, useAndroidInputManager, useIsomorphicLayoutEffect, useIsomorphicLayoutEffect, useIsomorphicLayoutEffect, useChildren];\n});\n_c17 = AndroidEditable;\nvar FocusedContext = /*#__PURE__*/createContext(false);\n/**\r\n * Get the current `focused` state of the editor.\r\n */\n\nvar useFocused = function useFocused() {\n  _s19();\n  return useContext(FocusedContext);\n};\n_s19(useFocused, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _excluded = [\"editor\", \"children\", \"onChange\", \"value\"];\n/**\r\n * A wrapper around the provider to handle `onChange` events, because the editor\r\n * is a mutable singleton so it won't ever register as \"changed\" otherwise.\r\n */\n\nvar Slate = function Slate(props) {\n  _s20();\n  var editor = props.editor,\n    children = props.children,\n    onChange = props.onChange,\n    value = props.value,\n    rest = _objectWithoutProperties(props, _excluded);\n  var _React$useState = React.useState(function () {\n      if (!Node.isNodeList(value)) {\n        throw new Error(\"[Slate] value is invalid! Expected a list of elements\" + \"but got: \".concat(JSON.stringify(value)));\n      }\n      if (!Editor.isEditor(editor)) {\n        throw new Error(\"[Slate] editor is invalid! you passed:\" + \"\".concat(JSON.stringify(editor)));\n      }\n      editor.children = value;\n      Object.assign(editor, rest);\n      return [editor];\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    context = _React$useState2[0],\n    setContext = _React$useState2[1];\n  var onContextChange = useCallback(function () {\n    onChange(editor.children);\n    setContext([editor]);\n  }, [onChange]);\n  EDITOR_TO_ON_CHANGE.set(editor, onContextChange);\n  useEffect(function () {\n    return function () {\n      EDITOR_TO_ON_CHANGE.set(editor, function () {});\n    };\n  }, []);\n  var _useState5 = useState(ReactEditor.isFocused(editor)),\n    isFocused = _useState5[0],\n    setIsFocused = _useState5[1];\n  useEffect(function () {\n    setIsFocused(ReactEditor.isFocused(editor));\n  });\n  useIsomorphicLayoutEffect(function () {\n    var fn = function fn() {\n      return setIsFocused(ReactEditor.isFocused(editor));\n    };\n    document.addEventListener('focus', fn, true);\n    return function () {\n      return document.removeEventListener('focus', fn, true);\n    };\n  }, []);\n  useIsomorphicLayoutEffect(function () {\n    var fn = function fn() {\n      return setIsFocused(ReactEditor.isFocused(editor));\n    };\n    document.addEventListener('blur', fn, true);\n    return function () {\n      return document.removeEventListener('blur', fn, true);\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(SlateContext.Provider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(EditorContext.Provider, {\n    value: editor\n  }, /*#__PURE__*/React.createElement(FocusedContext.Provider, {\n    value: isFocused\n  }, children)));\n};\n\n/**\r\n * Get the current editor object from the React context.\r\n * @deprecated Use useSlateStatic instead.\r\n */\n_s20(Slate, \"s11F0q5DqUAjnThr0FFswWqIeQY=\", false, function () {\n  return [useIsomorphicLayoutEffect, useIsomorphicLayoutEffect];\n});\n_c18 = Slate;\nvar useEditor = function useEditor() {\n  _s21();\n  var editor = useContext(EditorContext);\n  if (!editor) {\n    throw new Error(\"The `useEditor` hook must be used inside the <Slate> component's context.\");\n  }\n  return editor;\n};\n\n/**\r\n * Utilities for single-line deletion\r\n */\n_s21(useEditor, \"tZszBdnkXWRQKZCsKeBPah5On7M=\");\nvar doRectsIntersect = function doRectsIntersect(rect, compareRect) {\n  var middle = (compareRect.top + compareRect.bottom) / 2;\n  return rect.top <= middle && rect.bottom >= middle;\n};\nvar areRangesSameLine = function areRangesSameLine(editor, range1, range2) {\n  var rect1 = ReactEditor.toDOMRange(editor, range1).getBoundingClientRect();\n  var rect2 = ReactEditor.toDOMRange(editor, range2).getBoundingClientRect();\n  return doRectsIntersect(rect1, rect2) && doRectsIntersect(rect2, rect1);\n};\n/**\r\n * A helper utility that returns the end portion of a `Range`\r\n * which is located on a single line.\r\n *\r\n * @param {Editor} editor The editor object to compare against\r\n * @param {Range} parentRange The parent range to compare against\r\n * @returns {Range} A valid portion of the parentRange which is one a single line\r\n */\n\nvar findCurrentLineRange = function findCurrentLineRange(editor, parentRange) {\n  var parentRangeBoundary = Editor.range(editor, Range.end(parentRange));\n  var positions = Array.from(Editor.positions(editor, {\n    at: parentRange\n  }));\n  var left = 0;\n  var right = positions.length;\n  var middle = Math.floor(right / 2);\n  if (areRangesSameLine(editor, Editor.range(editor, positions[left]), parentRangeBoundary)) {\n    return Editor.range(editor, positions[left], parentRangeBoundary);\n  }\n  if (positions.length < 2) {\n    return Editor.range(editor, positions[positions.length - 1], parentRangeBoundary);\n  }\n  while (middle !== positions.length && middle !== left) {\n    if (areRangesSameLine(editor, Editor.range(editor, positions[middle]), parentRangeBoundary)) {\n      right = middle;\n    } else {\n      left = middle;\n    }\n    middle = Math.floor((left + right) / 2);\n  }\n  return Editor.range(editor, positions[right], parentRangeBoundary);\n};\n\n/**\r\n * `withReact` adds React and DOM specific behaviors to the editor.\r\n *\r\n * If you are using TypeScript, you must extend Slate's CustomTypes to use\r\n * this plugin.\r\n *\r\n * See https://docs.slatejs.org/concepts/11-typescript to learn how.\r\n */\n\nvar withReact = function withReact(editor) {\n  var e = editor;\n  var apply = e.apply,\n    onChange = e.onChange,\n    deleteBackward = e.deleteBackward; // The WeakMap which maps a key to a specific HTMLElement must be scoped to the editor instance to\n  // avoid collisions between editors in the DOM that share the same value.\n\n  EDITOR_TO_KEY_TO_ELEMENT.set(e, new WeakMap());\n  e.deleteBackward = function (unit) {\n    if (unit !== 'line') {\n      return deleteBackward(unit);\n    }\n    if (editor.selection && Range.isCollapsed(editor.selection)) {\n      var parentBlockEntry = Editor.above(editor, {\n        match: function match(n) {\n          return Editor.isBlock(editor, n);\n        },\n        at: editor.selection\n      });\n      if (parentBlockEntry) {\n        var _parentBlockEntry = _slicedToArray(parentBlockEntry, 2),\n          parentBlockPath = _parentBlockEntry[1];\n        var parentElementRange = Editor.range(editor, parentBlockPath, editor.selection.anchor);\n        var currentLineRange = findCurrentLineRange(e, parentElementRange);\n        if (!Range.isCollapsed(currentLineRange)) {\n          Transforms[\"delete\"](editor, {\n            at: currentLineRange\n          });\n        }\n      }\n    }\n  };\n  e.apply = function (op) {\n    var matches = [];\n    switch (op.type) {\n      case 'insert_text':\n      case 'remove_text':\n      case 'set_node':\n        {\n          var _iterator4 = _createForOfIteratorHelper(Editor.levels(e, {\n              at: op.path\n            })),\n            _step4;\n          try {\n            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n              var _step4$value = _slicedToArray(_step4.value, 2),\n                node = _step4$value[0],\n                path = _step4$value[1];\n              var key = ReactEditor.findKey(e, node);\n              matches.push([path, key]);\n            }\n          } catch (err) {\n            _iterator4.e(err);\n          } finally {\n            _iterator4.f();\n          }\n          break;\n        }\n      case 'insert_node':\n      case 'remove_node':\n      case 'merge_node':\n      case 'split_node':\n        {\n          var _iterator5 = _createForOfIteratorHelper(Editor.levels(e, {\n              at: Path.parent(op.path)\n            })),\n            _step5;\n          try {\n            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n              var _step5$value = _slicedToArray(_step5.value, 2),\n                _node = _step5$value[0],\n                _path = _step5$value[1];\n              var _key = ReactEditor.findKey(e, _node);\n              matches.push([_path, _key]);\n            }\n          } catch (err) {\n            _iterator5.e(err);\n          } finally {\n            _iterator5.f();\n          }\n          break;\n        }\n      case 'move_node':\n        {\n          var _iterator6 = _createForOfIteratorHelper(Editor.levels(e, {\n              at: Path.common(Path.parent(op.path), Path.parent(op.newPath))\n            })),\n            _step6;\n          try {\n            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n              var _step6$value = _slicedToArray(_step6.value, 2),\n                _node2 = _step6$value[0],\n                _path2 = _step6$value[1];\n              var _key2 = ReactEditor.findKey(e, _node2);\n              matches.push([_path2, _key2]);\n            }\n          } catch (err) {\n            _iterator6.e(err);\n          } finally {\n            _iterator6.f();\n          }\n          break;\n        }\n    }\n    apply(op);\n    for (var _i3 = 0, _matches = matches; _i3 < _matches.length; _i3++) {\n      var _matches$_i = _slicedToArray(_matches[_i3], 2),\n        _path3 = _matches$_i[0],\n        _key3 = _matches$_i[1];\n      var _Editor$node3 = Editor.node(e, _path3),\n        _Editor$node4 = _slicedToArray(_Editor$node3, 1),\n        _node3 = _Editor$node4[0];\n      NODE_TO_KEY.set(_node3, _key3);\n    }\n  };\n  e.setFragmentData = function (data) {\n    var selection = e.selection;\n    if (!selection) {\n      return;\n    }\n    var _Range$edges = Range.edges(selection),\n      _Range$edges2 = _slicedToArray(_Range$edges, 2),\n      start = _Range$edges2[0],\n      end = _Range$edges2[1];\n    var startVoid = Editor[\"void\"](e, {\n      at: start.path\n    });\n    var endVoid = Editor[\"void\"](e, {\n      at: end.path\n    });\n    if (Range.isCollapsed(selection) && !startVoid) {\n      return;\n    } // Create a fake selection so that we can add a Base64-encoded copy of the\n    // fragment to the HTML, to decode on future pastes.\n\n    var domRange = ReactEditor.toDOMRange(e, selection);\n    var contents = domRange.cloneContents();\n    var attach = contents.childNodes[0]; // Make sure attach is non-empty, since empty nodes will not get copied.\n\n    contents.childNodes.forEach(function (node) {\n      if (node.textContent && node.textContent.trim() !== '') {\n        attach = node;\n      }\n    }); // COMPAT: If the end node is a void node, we need to move the end of the\n    // range from the void node's spacer span, to the end of the void node's\n    // content, since the spacer is before void's content in the DOM.\n\n    if (endVoid) {\n      var _endVoid = _slicedToArray(endVoid, 1),\n        voidNode = _endVoid[0];\n      var r = domRange.cloneRange();\n      var domNode = ReactEditor.toDOMNode(e, voidNode);\n      r.setEndAfter(domNode);\n      contents = r.cloneContents();\n    } // COMPAT: If the start node is a void node, we need to attach the encoded\n    // fragment to the void node's content node instead of the spacer, because\n    // attaching it to empty `<div>/<span>` nodes will end up having it erased by\n    // most browsers. (2018/04/27)\n\n    if (startVoid) {\n      attach = contents.querySelector('[data-slate-spacer]');\n    } // Remove any zero-width space spans from the cloned DOM so that they don't\n    // show up elsewhere when pasted.\n\n    Array.from(contents.querySelectorAll('[data-slate-zero-width]')).forEach(function (zw) {\n      var isNewline = zw.getAttribute('data-slate-zero-width') === 'n';\n      zw.textContent = isNewline ? '\\n' : '';\n    }); // Set a `data-slate-fragment` attribute on a non-empty node, so it shows up\n    // in the HTML, and can be used for intra-Slate pasting. If it's a text\n    // node, wrap it in a `<span>` so we have something to set an attribute on.\n\n    if (isDOMText(attach)) {\n      var span = attach.ownerDocument.createElement('span'); // COMPAT: In Chrome and Safari, if we don't add the `white-space` style\n      // then leading and trailing spaces will be ignored. (2017/09/21)\n\n      span.style.whiteSpace = 'pre';\n      span.appendChild(attach);\n      contents.appendChild(span);\n      attach = span;\n    }\n    var fragment = e.getFragment();\n    var string = JSON.stringify(fragment);\n    var encoded = window.btoa(encodeURIComponent(string));\n    attach.setAttribute('data-slate-fragment', encoded);\n    data.setData('application/x-slate-fragment', encoded); // Add the content to a <div> so that we can get its inner HTML.\n\n    var div = contents.ownerDocument.createElement('div');\n    div.appendChild(contents);\n    div.setAttribute('hidden', 'true');\n    contents.ownerDocument.body.appendChild(div);\n    data.setData('text/html', div.innerHTML);\n    data.setData('text/plain', getPlainText(div));\n    contents.ownerDocument.body.removeChild(div);\n    return data;\n  };\n  e.insertData = function (data) {\n    if (!e.insertFragmentData(data)) {\n      e.insertTextData(data);\n    }\n  };\n  e.insertFragmentData = function (data) {\n    /**\r\n     * Checking copied fragment from application/x-slate-fragment or data-slate-fragment\r\n     */\n    var fragment = data.getData('application/x-slate-fragment') || getSlateFragmentAttribute(data);\n    if (fragment) {\n      var decoded = decodeURIComponent(window.atob(fragment));\n      var parsed = JSON.parse(decoded);\n      e.insertFragment(parsed);\n      return true;\n    }\n    return false;\n  };\n  e.insertTextData = function (data) {\n    var text = data.getData('text/plain');\n    if (text) {\n      var lines = text.split(/\\r\\n|\\r|\\n/);\n      var split = false;\n      var _iterator7 = _createForOfIteratorHelper(lines),\n        _step7;\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var line = _step7.value;\n          if (split) {\n            Transforms.splitNodes(e, {\n              always: true\n            });\n          }\n          e.insertText(line);\n          split = true;\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n      return true;\n    }\n    return false;\n  };\n  e.onChange = function () {\n    // COMPAT: React doesn't batch `setState` hook calls, which means that the\n    // children and selection can get out of sync for one render pass. So we\n    // have to use this unstable API to ensure it batches them. (2019/12/03)\n    // https://github.com/facebook/react/issues/14259#issuecomment-439702367\n    ReactDOM.unstable_batchedUpdates(function () {\n      var onContextChange = EDITOR_TO_ON_CHANGE.get(e);\n      if (onContextChange) {\n        onContextChange();\n      }\n      onChange();\n    });\n  };\n  return e;\n};\n\n// Components\nvar Editable = IS_ANDROID ? AndroidEditable : Editable$1;\nexport { AndroidEditable, Editable$1 as DefaultEditable, DefaultElement, DefaultLeaf, DefaultPlaceholder, Editable, ReactEditor, Slate, useEditor, useFocused, useReadOnly, useSelected, useSlate, useSlateStatic, withReact };\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18;\n$RefreshReg$(_c, \"String\");\n$RefreshReg$(_c2, \"TextString\");\n$RefreshReg$(_c3, \"ZeroWidthString\");\n$RefreshReg$(_c4, \"Leaf\");\n$RefreshReg$(_c5, \"MemoizedLeaf\");\n$RefreshReg$(_c6, \"DefaultLeaf\");\n$RefreshReg$(_c7, \"Text\");\n$RefreshReg$(_c8, \"MemoizedText\");\n$RefreshReg$(_c9, \"Element\");\n$RefreshReg$(_c10, \"MemoizedElement\");\n$RefreshReg$(_c11, \"DefaultElement\");\n$RefreshReg$(_c12, \"DecorateContext$createContext\");\n$RefreshReg$(_c13, \"DecorateContext\");\n$RefreshReg$(_c14, \"Children\");\n$RefreshReg$(_c15, \"Editable$1\");\n$RefreshReg$(_c16, \"DefaultPlaceholder\");\n$RefreshReg$(_c17, \"AndroidEditable\");\n$RefreshReg$(_c18, \"Slate\");","map":{"version":3,"mappings":"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","names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","_objectWithoutPropertiesLoose","source","excluded","target","sourceKeys","keys","i","length","indexOf","_objectWithoutProperties","objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","String","props","isLast","leaf","parent","text","editor","useSlateStatic","path","ReactEditor","findPath","parentPath","Path","isVoid","React","ZeroWidthString","Node","string","children","isInline","Editor","isLineBreak","slice","TextString","isTrailing","ref","useRef","forceUpdateCount","current","textContent","NODE_TO_INDEX","WeakMap","NODE_TO_PARENT","EDITOR_TO_WINDOW","EDITOR_TO_ELEMENT","ELEMENT_TO_NODE","NODE_TO_ELEMENT","NODE_TO_KEY","EDITOR_TO_KEY_TO_ELEMENT","IS_READ_ONLY","IS_FOCUSED","EDITOR_TO_ON_CHANGE","EDITOR_TO_RESTORE_DOM","PLACEHOLDER_SYMBOL","Symbol","Leaf","renderPlaceholder","renderLeaf","DefaultLeaf","placeholderRef","useEffect","placeholderEl","editorEl","document","querySelector","style","minHeight","clientHeight","placeholderProps","placeholder","attributes","position","pointerEvents","width","maxWidth","display","opacity","userSelect","textDecoration","contentEditable","Fragment","MemoizedLeaf","memo","prev","next","Text","equals","IS_IOS","navigator","test","userAgent","window","MSStream","IS_APPLE","IS_ANDROID","IS_FIREFOX","IS_SAFARI","IS_EDGE_LEGACY","IS_CHROME","IS_CHROME_LEGACY","IS_FIREFOX_LEGACY","IS_QQBROWSER","CAN_USE_DOM","createElement","HAS_BEFORE_INPUT_SUPPORT","globalThis","InputEvent","getTargetRanges","useIsomorphicLayoutEffect","useLayoutEffect","shallowCompare","obj1","obj2","every","hasOwnProperty","isDecoratorRangeListEqual","list","another","range","other","rangeOwnProps","otherOwnProps","Range","decorations","leaves","SlateText","findKey","push","id","KEY_TO_ELEMENT","get","set","MemoizedText","Element","element","renderElement","p","DefaultElement","selection","readOnly","useReadOnly","useChildren","node","hasInlines","dir","getDirection","Tag","texts","height","color","outline","MemoizedElement","EditorContext","createContext","useContext","Error","DecorateContext","useDecorate","SelectedContext","useSelected","decorate","isLeafBlock","isElement","concat","n","sel","intersection","ds","dec","d","Provider","ElementComponent","TextComponent","HOTKEYS","bold","compose","moveBackward","moveForward","moveWordBackward","moveWordForward","deleteBackward","deleteForward","extendBackward","extendForward","italic","splitBlock","undo","APPLE_HOTKEYS","moveLineBackward","moveLineForward","deleteLineBackward","deleteLineForward","deleteWordBackward","deleteWordForward","extendLineBackward","extendLineForward","redo","transposeCharacter","WINDOWS_HOTKEYS","create","generic","apple","windows","isGeneric","isKeyHotkey","isApple","isWindows","event","isBold","isCompose","isMoveBackward","isMoveForward","isDeleteBackward","isDeleteForward","isDeleteLineBackward","isDeleteLineForward","isDeleteWordBackward","isDeleteWordForward","isExtendBackward","isExtendForward","isExtendLineBackward","isExtendLineForward","isItalic","isMoveLineBackward","isMoveLineForward","isMoveWordBackward","isMoveWordForward","isRedo","isSplitBlock","isTransposeCharacter","isUndo","ReadOnlyContext","SlateContext","useSlate","context","getDefaultView","ownerDocument","defaultView","isDOMComment","isDOMNode","nodeType","isDOMElement","isDOMSelection","anchorNode","Selection","isDOMText","isPlainTextOnlyPaste","clipboardData","getData","types","normalizeDOMPoint","domPoint","offset","childNodes","index","getEditableChildAndIndex","getEditableChild","hasShadowRoot","activeElement","shadowRoot","direction","child","triedForward","triedBackward","getAttribute","getPlainText","domNode","nodeValue","Array","from","childNode","getComputedStyle","getPropertyValue","tagName","catchSlateFragment","getSlateFragmentAttribute","dataTransfer","htmlData","match","fragment","getClipboardData","DataTransfer","forEach","type","setData","Children","Editable","autoFocus","defaultDecorate","propsOnDOMBeforeInput","onDOMBeforeInput","DefaultPlaceholder","scrollSelectionIntoView","defaultScrollSelectionIntoView","as","Component","useState","isComposing","setIsComposing","deferredOperations","state","useMemo","hasInsertPrefixInCompositon","isDraggingInternally","isUpdatingSelection","latestElement","root","findDocumentOrShadowRoot","domSelection","getSelection","isFocused","hasDomSelection","editorElement","hasDomSelectionInEditor","contains","focusNode","slateRange","toSlateRange","exactMatch","suppressThrow","hasRange","newDomRange","toDOMRange","isBackward","setBaseAndExtent","endContainer","endOffset","startContainer","startOffset","removeAllRanges","setTimeout","el","toDOMNode","focus","onDOMSelectionChange","useCallback","throttle","Transforms","deselect","anchorNodeSelectable","hasEditableTarget","isTargetInsideVoid","focusNodeSelectable","select","scheduleOnDOMSelectionChange","debounce","isDOMEventHandled","flush","inputType","data","undefined","native","isCollapsed","anchor","marks","inline","above","at","mode","inlinePath","isEnd","preventDefault","startsWith","targetRange","isExpanded","endsWith","deleteFragment","unit","insertBreak","constructor","name","insertData","insertText","addEventListener","removeEventListener","getWindow","start","role","spellCheck","autoCorrect","autoCapitalize","zindex","suppressContentEditableWarning","whiteSpace","wordWrap","onBeforeInput","isEventHandled","onInput","op","onBlur","relatedTarget","hasAttribute","hasDOMNode","toSlateNode","onClick","hasTarget","hasPath","lookupNode","end","startVoid","endVoid","onCompositionEnd","leafPath","currentTextNode","withoutNormalizing","replace","distance","reverse","onCompositionUpdate","onCompositionStart","point","after","setSelection","insertNodes","onCopy","setFragmentData","onCut","onDragOver","onDragStart","voidMatch","voids","onDrop","draggedRange","findEventRange","onDragEnd","onFocus","onKeyDown","nativeEvent","isRTL","Hotkeys","maybeHistoryEditor","move","edge","collapse","currentNode","onPaste","_ref","domRange","leafEl","parentElement","getBoundingClientRect","bind","scrollIntoView","scrollMode","editable","slateNode","handler","shouldTreatEventAsHandled","isDefaultPrevented","isPropagationStopped","defaultPrevented","Key","isEditor","unshift","JSON","stringify","getRootNode","Document","ShadowRoot","isReadOnly","blur","preventScroll","rangeCount","options","targetEl","err","message","includes","closest","isContentEditable","insertFragmentData","insertTextData","toDOMPoint","selector","querySelectorAll","attr","trueLength","parseInt","Math","min","max","domAnchor","domFocus","createRange","startNode","endNode","startEl","isStartAtZeroWidth","endEl","isEndAtZeroWidth","setStart","setEnd","domEl","x","clientX","y","clientY","rect","isPrev","left","top","before","caretRangeFromPoint","caretPositionFromPoint","offsetNode","toSlatePoint","nearestNode","nearestOffset","parentNode","textNode","voidNode","leafNode","contents","cloneContents","removals","removeChild","_domNode$textContent","anchorOffset","focusOffset","collapsed","isForward","unhangRange","getDiffStart","charAt","getDiffEnd","prevLength","nextLength","prevChar","nextChar","getDiffOffsets","maxEnd","sliceText","offsets","diffText","removeText","combineInsertedText","insertedText","reduce","acc","getTextInsertion","isText","prevText","nextText","textDiff","textPath","normalizeTextInsertionRange","_ref2","insertionRange","isSingleCharacterInsertion","nodes","characterBeforeAnchor","characterAfterAnchor","gatherMutationData","mutations","addedNodes","removedNodes","characterDataMutations","mutation","addedNode","removedNode","textInsertion","some","parentDOMNode","HTMLElement","isDeletion","_","_ref3","isReplaceExpandedSelection","_ref4","_ref5","isTextInsertion","_ref6","isRemoveLeafNodes","_ref7","restoreDOM","onRestoreDOM","console","error","AndroidInputManager","reconcileMutations","mutationData","replaceExpandedSelection","removeLeafNodes","insertion","useMutationObserver","callback","MutationObserver","mutationObserver","disconnect","observe","useTrackUserInput","receivedUserInput","animationFrameRef","onUserInput","cancelAnimationFrame","requestAnimationFrame","MUTATION_OBSERVER_CONFIG","childList","characterData","characterDataOldValue","subtree","useAndroidInputManager","inputManager","timeoutId","isReconciling","clearTimeout","AndroidEditable","contentKey","setContentKey","boundary","FocusedContext","useFocused","Slate","onChange","rest","isNodeList","assign","setContext","onContextChange","setIsFocused","fn","useEditor","doRectsIntersect","compareRect","middle","bottom","areRangesSameLine","range1","range2","rect1","rect2","findCurrentLineRange","parentRange","parentRangeBoundary","positions","right","floor","withReact","e","apply","parentBlockEntry","isBlock","parentBlockPath","parentElementRange","currentLineRange","matches","levels","common","newPath","edges","attach","trim","r","cloneRange","setEndAfter","zw","isNewline","span","appendChild","getFragment","encoded","btoa","encodeURIComponent","setAttribute","div","body","innerHTML","decoded","decodeURIComponent","atob","parsed","parse","insertFragment","lines","split","line","splitNodes","always","ReactDOM","unstable_batchedUpdates","DefaultEditable"],"sources":["../../../.yarn/cache/@babel-runtime-npm-7.15.3-6333c71362-2f0b8d2d4e.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js","../../../.yarn/cache/@babel-runtime-npm-7.15.3-6333c71362-2f0b8d2d4e.zip/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../../../.yarn/cache/@babel-runtime-npm-7.15.3-6333c71362-2f0b8d2d4e.zip/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../src/components/string.tsx","../src/utils/weak-maps.ts","../src/components/leaf.tsx","../src/utils/environment.ts","../src/hooks/use-isomorphic-layout-effect.ts","../src/utils/range-list.ts","../src/components/text.tsx","../src/components/element.tsx","../src/hooks/use-slate-static.tsx","../src/hooks/use-decorate.ts","../src/hooks/use-selected.ts","../src/hooks/use-children.tsx","../src/utils/hotkeys.ts","../src/hooks/use-read-only.ts","../src/hooks/use-slate.tsx","../src/utils/dom.ts","../src/components/editable.tsx","../src/utils/key.ts","../src/plugin/react-editor.ts","../src/components/android/diff-text.ts","../src/components/android/mutation-detection.ts","../src/components/android/restore-dom.ts","../src/components/android/android-input-manager.ts","../src/components/android/use-mutation-observer.ts","../src/components/android/use-track-user-input.ts","../src/components/android/use-android-input-manager.ts","../src/components/android/android-editable.tsx","../src/hooks/use-focused.ts","../src/components/slate.tsx","../src/hooks/use-editor.tsx","../src/utils/lines.ts","../src/plugin/with-react.ts","../src/index.ts"],"sourcesContent":["export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","import React, { useRef } from 'react'\nimport { Editor, Text, Path, Element, Node } from 'slate'\n\nimport { ReactEditor, useSlateStatic } from '..'\n\n/**\n * Leaf content strings.\n */\n\nconst String = (props: {\n  isLast: boolean\n  leaf: Text\n  parent: Element\n  text: Text\n}) => {\n  const { isLast, leaf, parent, text } = props\n  const editor = useSlateStatic()\n  const path = ReactEditor.findPath(editor, text)\n  const parentPath = Path.parent(path)\n\n  // COMPAT: Render text inside void nodes with a zero-width space.\n  // So the node can contain selection but the text is not visible.\n  if (editor.isVoid(parent)) {\n    return <ZeroWidthString length={Node.string(parent).length} />\n  }\n\n  // COMPAT: If this is the last text node in an empty block, render a zero-\n  // width space that will convert into a line break when copying and pasting\n  // to support expected plain text.\n  if (\n    leaf.text === '' &&\n    parent.children[parent.children.length - 1] === text &&\n    !editor.isInline(parent) &&\n    Editor.string(editor, parentPath) === ''\n  ) {\n    return <ZeroWidthString isLineBreak />\n  }\n\n  // COMPAT: If the text is empty, it's because it's on the edge of an inline\n  // node, so we render a zero-width space so that the selection can be\n  // inserted next to it still.\n  if (leaf.text === '') {\n    return <ZeroWidthString />\n  }\n\n  // COMPAT: Browsers will collapse trailing new lines at the end of blocks,\n  // so we need to add an extra trailing new lines to prevent that.\n  if (isLast && leaf.text.slice(-1) === '\\n') {\n    return <TextString isTrailing text={leaf.text} />\n  }\n\n  return <TextString text={leaf.text} />\n}\n\n/**\n * Leaf strings with text in them.\n */\nconst TextString = (props: { text: string; isTrailing?: boolean }) => {\n  const { text, isTrailing = false } = props\n\n  const ref = useRef<HTMLSpanElement>(null)\n  const forceUpdateCount = useRef(0)\n\n  if (ref.current && ref.current.textContent !== text) {\n    forceUpdateCount.current += 1\n  }\n\n  // This component may have skipped rendering due to native operations being\n  // applied. If an undo is performed React will see the old and new shadow DOM\n  // match and not apply an update. Forces each render to actually reconcile.\n  return (\n    <span data-slate-string ref={ref} key={forceUpdateCount.current}>\n      {text}\n      {isTrailing ? '\\n' : null}\n    </span>\n  )\n}\n\n/**\n * Leaf strings without text, render as zero-width strings.\n */\n\nconst ZeroWidthString = (props: { length?: number; isLineBreak?: boolean }) => {\n  const { length = 0, isLineBreak = false } = props\n  return (\n    <span\n      data-slate-zero-width={isLineBreak ? 'n' : 'z'}\n      data-slate-length={length}\n    >\n      {'\\uFEFF'}\n      {isLineBreak ? <br /> : null}\n    </span>\n  )\n}\n\nexport default String\n","import { Node, Ancestor, Editor, Range } from 'slate'\n\nimport { Key } from './key'\n\n/**\n * Two weak maps that allow us rebuild a path given a node. They are populated\n * at render time such that after a render occurs we can always backtrack.\n */\n\nexport const NODE_TO_INDEX: WeakMap<Node, number> = new WeakMap()\nexport const NODE_TO_PARENT: WeakMap<Node, Ancestor> = new WeakMap()\n\n/**\n * Weak maps that allow us to go between Slate nodes and DOM nodes. These\n * are used to resolve DOM event-related logic into Slate actions.\n */\nexport const EDITOR_TO_WINDOW: WeakMap<Editor, Window> = new WeakMap()\nexport const EDITOR_TO_ELEMENT: WeakMap<Editor, HTMLElement> = new WeakMap()\nexport const EDITOR_TO_PLACEHOLDER: WeakMap<Editor, string> = new WeakMap()\nexport const ELEMENT_TO_NODE: WeakMap<HTMLElement, Node> = new WeakMap()\nexport const NODE_TO_ELEMENT: WeakMap<Node, HTMLElement> = new WeakMap()\nexport const NODE_TO_KEY: WeakMap<Node, Key> = new WeakMap()\nexport const EDITOR_TO_KEY_TO_ELEMENT: WeakMap<\n  Editor,\n  WeakMap<Key, HTMLElement>\n> = new WeakMap()\n\n/**\n * Weak maps for storing editor-related state.\n */\n\nexport const IS_READ_ONLY: WeakMap<Editor, boolean> = new WeakMap()\nexport const IS_FOCUSED: WeakMap<Editor, boolean> = new WeakMap()\nexport const IS_DRAGGING: WeakMap<Editor, boolean> = new WeakMap()\nexport const IS_CLICKING: WeakMap<Editor, boolean> = new WeakMap()\n\n/**\n * Weak map for associating the context `onChange` context with the plugin.\n */\n\nexport const EDITOR_TO_ON_CHANGE = new WeakMap<Editor, () => void>()\n\nexport const EDITOR_TO_RESTORE_DOM = new WeakMap<Editor, () => void>()\n\n/**\n * Symbols.\n */\n\nexport const PLACEHOLDER_SYMBOL = (Symbol('placeholder') as unknown) as string\n","import React, { useRef, useEffect } from 'react'\nimport { Element, Text } from 'slate'\nimport String from './string'\nimport { PLACEHOLDER_SYMBOL } from '../utils/weak-maps'\nimport { RenderLeafProps, RenderPlaceholderProps } from './editable'\n\n/**\n * Individual leaves in a text node with unique formatting.\n */\n\nconst Leaf = (props: {\n  isLast: boolean\n  leaf: Text\n  parent: Element\n  renderPlaceholder: (props: RenderPlaceholderProps) => JSX.Element\n  renderLeaf?: (props: RenderLeafProps) => JSX.Element\n  text: Text\n}) => {\n  const {\n    leaf,\n    isLast,\n    text,\n    parent,\n    renderPlaceholder,\n    renderLeaf = (props: RenderLeafProps) => <DefaultLeaf {...props} />,\n  } = props\n\n  const placeholderRef = useRef<HTMLSpanElement | null>(null)\n\n  useEffect(() => {\n    const placeholderEl = placeholderRef?.current\n    const editorEl = document.querySelector<HTMLDivElement>(\n      '[data-slate-editor=\"true\"]'\n    )\n\n    if (!placeholderEl || !editorEl) {\n      return\n    }\n\n    editorEl.style.minHeight = `${placeholderEl.clientHeight}px`\n\n    return () => {\n      editorEl.style.minHeight = 'auto'\n    }\n  }, [placeholderRef, leaf])\n\n  let children = (\n    <String isLast={isLast} leaf={leaf} parent={parent} text={text} />\n  )\n\n  if (leaf[PLACEHOLDER_SYMBOL]) {\n    const placeholderProps: RenderPlaceholderProps = {\n      children: leaf.placeholder,\n      attributes: {\n        'data-slate-placeholder': true,\n        style: {\n          position: 'absolute',\n          pointerEvents: 'none',\n          width: '100%',\n          maxWidth: '100%',\n          display: 'block',\n          opacity: '0.333',\n          userSelect: 'none',\n          textDecoration: 'none',\n        },\n        contentEditable: false,\n        ref: placeholderRef,\n      },\n    }\n\n    children = (\n      <React.Fragment>\n        {renderPlaceholder(placeholderProps)}\n        {children}\n      </React.Fragment>\n    )\n  }\n\n  // COMPAT: Having the `data-` attributes on these leaf elements ensures that\n  // in certain misbehaving browsers they aren't weirdly cloned/destroyed by\n  // contenteditable behaviors. (2019/05/08)\n  const attributes: {\n    'data-slate-leaf': true\n  } = {\n    'data-slate-leaf': true,\n  }\n\n  return renderLeaf({ attributes, children, leaf, text })\n}\n\nconst MemoizedLeaf = React.memo(Leaf, (prev, next) => {\n  return (\n    next.parent === prev.parent &&\n    next.isLast === prev.isLast &&\n    next.renderLeaf === prev.renderLeaf &&\n    next.renderPlaceholder === prev.renderPlaceholder &&\n    next.text === prev.text &&\n    Text.equals(next.leaf, prev.leaf) &&\n    next.leaf[PLACEHOLDER_SYMBOL] === prev.leaf[PLACEHOLDER_SYMBOL]\n  )\n})\n\nexport const DefaultLeaf = (props: RenderLeafProps) => {\n  const { attributes, children } = props\n  return <span {...attributes}>{children}</span>\n}\n\nexport default MemoizedLeaf\n","export const IS_IOS =\n  typeof navigator !== 'undefined' &&\n  typeof window !== 'undefined' &&\n  /iPad|iPhone|iPod/.test(navigator.userAgent) &&\n  !window.MSStream\n\nexport const IS_APPLE =\n  typeof navigator !== 'undefined' && /Mac OS X/.test(navigator.userAgent)\n\nexport const IS_ANDROID =\n  typeof navigator !== 'undefined' && /Android/.test(navigator.userAgent)\n\nexport const IS_FIREFOX =\n  typeof navigator !== 'undefined' &&\n  /^(?!.*Seamonkey)(?=.*Firefox).*/i.test(navigator.userAgent)\n\nexport const IS_SAFARI =\n  typeof navigator !== 'undefined' &&\n  /Version\\/[\\d\\.]+.*Safari/.test(navigator.userAgent)\n\n// \"modern\" Edge was released at 79.x\nexport const IS_EDGE_LEGACY =\n  typeof navigator !== 'undefined' &&\n  /Edge?\\/(?:[0-6][0-9]|[0-7][0-8])/i.test(navigator.userAgent)\n\nexport const IS_CHROME =\n  typeof navigator !== 'undefined' && /Chrome/i.test(navigator.userAgent)\n\n// Native `beforeInput` events don't work well with react on Chrome 75\n// and older, Chrome 76+ can use `beforeInput` though.\nexport const IS_CHROME_LEGACY =\n  typeof navigator !== 'undefined' &&\n  /Chrome?\\/(?:[0-7][0-5]|[0-6][0-9])/i.test(navigator.userAgent)\n\n// Firefox did not support `beforeInput` until `v87`.\nexport const IS_FIREFOX_LEGACY =\n  typeof navigator !== 'undefined' &&\n  /^(?!.*Seamonkey)(?=.*Firefox\\/(?:[0-7][0-9]|[0-8][0-6])).*/i.test(\n    navigator.userAgent\n  )\n\n// qq browser\nexport const IS_QQBROWSER =\n  typeof navigator !== 'undefined' && /.*QQBrowser/.test(navigator.userAgent)\n\n// Check if DOM is available as React does internally.\n// https://github.com/facebook/react/blob/master/packages/shared/ExecutionEnvironment.js\nexport const CAN_USE_DOM = !!(\n  typeof window !== 'undefined' &&\n  typeof window.document !== 'undefined' &&\n  typeof window.document.createElement !== 'undefined'\n)\n\n// COMPAT: Firefox/Edge Legacy don't support the `beforeinput` event\n// Chrome Legacy doesn't support `beforeinput` correctly\nexport const HAS_BEFORE_INPUT_SUPPORT =\n  !IS_CHROME_LEGACY &&\n  !IS_EDGE_LEGACY &&\n  // globalThis is undefined in older browsers\n  typeof globalThis !== 'undefined' &&\n  globalThis.InputEvent &&\n  // @ts-ignore The `getTargetRanges` property isn't recognized.\n  typeof globalThis.InputEvent.prototype.getTargetRanges === 'function'\n","import { useLayoutEffect, useEffect } from 'react'\nimport { CAN_USE_DOM } from '../utils/environment'\n\n/**\n * Prevent warning on SSR by falling back to useEffect when DOM isn't available\n */\n\nexport const useIsomorphicLayoutEffect = CAN_USE_DOM\n  ? useLayoutEffect\n  : useEffect\n","import { Range } from 'slate'\nimport { PLACEHOLDER_SYMBOL } from './weak-maps'\n\nexport const shallowCompare = (obj1: {}, obj2: {}) =>\n  Object.keys(obj1).length === Object.keys(obj2).length &&\n  Object.keys(obj1).every(\n    key => obj2.hasOwnProperty(key) && obj1[key] === obj2[key]\n  )\n\n/**\n * Check if a list of decorator ranges are equal to another.\n *\n * PERF: this requires the two lists to also have the ranges inside them in the\n * same order, but this is an okay constraint for us since decorations are\n * kept in order, and the odd case where they aren't is okay to re-render for.\n */\n\nexport const isDecoratorRangeListEqual = (\n  list: Range[],\n  another: Range[]\n): boolean => {\n  if (list.length !== another.length) {\n    return false\n  }\n\n  for (let i = 0; i < list.length; i++) {\n    const range = list[i]\n    const other = another[i]\n\n    const { anchor: rangeAnchor, focus: rangeFocus, ...rangeOwnProps } = range\n    const { anchor: otherAnchor, focus: otherFocus, ...otherOwnProps } = other\n\n    if (\n      !Range.equals(range, other) ||\n      range[PLACEHOLDER_SYMBOL] !== other[PLACEHOLDER_SYMBOL] ||\n      !shallowCompare(rangeOwnProps, otherOwnProps)\n    ) {\n      return false\n    }\n  }\n\n  return true\n}\n","import React, { useRef } from 'react'\nimport { Range, Element, Text as SlateText } from 'slate'\n\nimport Leaf from './leaf'\nimport { ReactEditor, useSlateStatic } from '..'\nimport { RenderLeafProps, RenderPlaceholderProps } from './editable'\nimport { useIsomorphicLayoutEffect } from '../hooks/use-isomorphic-layout-effect'\nimport {\n  NODE_TO_ELEMENT,\n  ELEMENT_TO_NODE,\n  EDITOR_TO_KEY_TO_ELEMENT,\n} from '../utils/weak-maps'\nimport { isDecoratorRangeListEqual } from '../utils/range-list'\n\n/**\n * Text.\n */\n\nconst Text = (props: {\n  decorations: Range[]\n  isLast: boolean\n  parent: Element\n  renderPlaceholder: (props: RenderPlaceholderProps) => JSX.Element\n  renderLeaf?: (props: RenderLeafProps) => JSX.Element\n  text: SlateText\n}) => {\n  const {\n    decorations,\n    isLast,\n    parent,\n    renderPlaceholder,\n    renderLeaf,\n    text,\n  } = props\n  const editor = useSlateStatic()\n  const ref = useRef<HTMLSpanElement>(null)\n  const leaves = SlateText.decorations(text, decorations)\n  const key = ReactEditor.findKey(editor, text)\n  const children = []\n\n  for (let i = 0; i < leaves.length; i++) {\n    const leaf = leaves[i]\n\n    children.push(\n      <Leaf\n        isLast={isLast && i === leaves.length - 1}\n        key={`${key.id}-${i}`}\n        renderPlaceholder={renderPlaceholder}\n        leaf={leaf}\n        text={text}\n        parent={parent}\n        renderLeaf={renderLeaf}\n      />\n    )\n  }\n\n  // Update element-related weak maps with the DOM element ref.\n  useIsomorphicLayoutEffect(() => {\n    const KEY_TO_ELEMENT = EDITOR_TO_KEY_TO_ELEMENT.get(editor)\n    if (ref.current) {\n      KEY_TO_ELEMENT?.set(key, ref.current)\n      NODE_TO_ELEMENT.set(text, ref.current)\n      ELEMENT_TO_NODE.set(ref.current, text)\n    } else {\n      KEY_TO_ELEMENT?.delete(key)\n      NODE_TO_ELEMENT.delete(text)\n    }\n  })\n\n  return (\n    <span data-slate-node=\"text\" ref={ref}>\n      {children}\n    </span>\n  )\n}\n\nconst MemoizedText = React.memo(Text, (prev, next) => {\n  return (\n    next.parent === prev.parent &&\n    next.isLast === prev.isLast &&\n    next.renderLeaf === prev.renderLeaf &&\n    next.text === prev.text &&\n    isDecoratorRangeListEqual(next.decorations, prev.decorations)\n  )\n})\n\nexport default MemoizedText\n","import React, { useRef } from 'react'\nimport getDirection from 'direction'\nimport { Editor, Node, Range, NodeEntry, Element as SlateElement } from 'slate'\n\nimport Text from './text'\nimport useChildren from '../hooks/use-children'\nimport { ReactEditor, useSlateStatic, useReadOnly } from '..'\nimport { useIsomorphicLayoutEffect } from '../hooks/use-isomorphic-layout-effect'\nimport {\n  NODE_TO_ELEMENT,\n  ELEMENT_TO_NODE,\n  NODE_TO_PARENT,\n  NODE_TO_INDEX,\n  EDITOR_TO_KEY_TO_ELEMENT,\n} from '../utils/weak-maps'\nimport { isDecoratorRangeListEqual } from '../utils/range-list'\nimport {\n  RenderElementProps,\n  RenderLeafProps,\n  RenderPlaceholderProps,\n} from './editable'\n\n/**\n * Element.\n */\n\nconst Element = (props: {\n  decorations: Range[]\n  element: SlateElement\n  renderElement?: (props: RenderElementProps) => JSX.Element\n  renderPlaceholder: (props: RenderPlaceholderProps) => JSX.Element\n  renderLeaf?: (props: RenderLeafProps) => JSX.Element\n  selection: Range | null\n}) => {\n  const {\n    decorations,\n    element,\n    renderElement = (p: RenderElementProps) => <DefaultElement {...p} />,\n    renderPlaceholder,\n    renderLeaf,\n    selection,\n  } = props\n  const ref = useRef<HTMLElement>(null)\n  const editor = useSlateStatic()\n  const readOnly = useReadOnly()\n  const isInline = editor.isInline(element)\n  const key = ReactEditor.findKey(editor, element)\n  let children: React.ReactNode = useChildren({\n    decorations,\n    node: element,\n    renderElement,\n    renderPlaceholder,\n    renderLeaf,\n    selection,\n  })\n\n  // Attributes that the developer must mix into the element in their\n  // custom node renderer component.\n  const attributes: {\n    'data-slate-node': 'element'\n    'data-slate-void'?: true\n    'data-slate-inline'?: true\n    contentEditable?: false\n    dir?: 'rtl'\n    ref: any\n  } = {\n    'data-slate-node': 'element',\n    ref,\n  }\n\n  if (isInline) {\n    attributes['data-slate-inline'] = true\n  }\n\n  // If it's a block node with inline children, add the proper `dir` attribute\n  // for text direction.\n  if (!isInline && Editor.hasInlines(editor, element)) {\n    const text = Node.string(element)\n    const dir = getDirection(text)\n\n    if (dir === 'rtl') {\n      attributes.dir = dir\n    }\n  }\n\n  // If it's a void node, wrap the children in extra void-specific elements.\n  if (Editor.isVoid(editor, element)) {\n    attributes['data-slate-void'] = true\n\n    if (!readOnly && isInline) {\n      attributes.contentEditable = false\n    }\n\n    const Tag = isInline ? 'span' : 'div'\n    const [[text]] = Node.texts(element)\n\n    children = readOnly ? null : (\n      <Tag\n        data-slate-spacer\n        style={{\n          height: '0',\n          color: 'transparent',\n          outline: 'none',\n          position: 'absolute',\n        }}\n      >\n        <Text\n          renderPlaceholder={renderPlaceholder}\n          decorations={[]}\n          isLast={false}\n          parent={element}\n          text={text}\n        />\n      </Tag>\n    )\n\n    NODE_TO_INDEX.set(text, 0)\n    NODE_TO_PARENT.set(text, element)\n  }\n\n  // Update element-related weak maps with the DOM element ref.\n  useIsomorphicLayoutEffect(() => {\n    const KEY_TO_ELEMENT = EDITOR_TO_KEY_TO_ELEMENT.get(editor)\n    if (ref.current) {\n      KEY_TO_ELEMENT?.set(key, ref.current)\n      NODE_TO_ELEMENT.set(element, ref.current)\n      ELEMENT_TO_NODE.set(ref.current, element)\n    } else {\n      KEY_TO_ELEMENT?.delete(key)\n      NODE_TO_ELEMENT.delete(element)\n    }\n  })\n\n  return renderElement({ attributes, children, element })\n}\n\nconst MemoizedElement = React.memo(Element, (prev, next) => {\n  return (\n    prev.element === next.element &&\n    prev.renderElement === next.renderElement &&\n    prev.renderLeaf === next.renderLeaf &&\n    isDecoratorRangeListEqual(prev.decorations, next.decorations) &&\n    (prev.selection === next.selection ||\n      (!!prev.selection &&\n        !!next.selection &&\n        Range.equals(prev.selection, next.selection)))\n  )\n})\n\n/**\n * The default element renderer.\n */\n\nexport const DefaultElement = (props: RenderElementProps) => {\n  const { attributes, children, element } = props\n  const editor = useSlateStatic()\n  const Tag = editor.isInline(element) ? 'span' : 'div'\n  return (\n    <Tag {...attributes} style={{ position: 'relative' }}>\n      {children}\n    </Tag>\n  )\n}\n\nexport default MemoizedElement\n","import { createContext, useContext } from 'react'\nimport { ReactEditor } from '../plugin/react-editor'\nimport { Editor } from 'slate'\n\n/**\n * A React context for sharing the editor object.\n */\n\nexport const EditorContext = createContext<ReactEditor | null>(null)\n\n/**\n * Get the current editor object from the React context.\n */\n\nexport const useSlateStatic = (): Editor => {\n  const editor = useContext(EditorContext)\n\n  if (!editor) {\n    throw new Error(\n      `The \\`useSlateStatic\\` hook must be used inside the <Slate> component's context.`\n    )\n  }\n\n  return editor\n}\n","import { createContext, useContext } from 'react'\nimport { Range, NodeEntry } from 'slate'\n\n/**\n * A React context for sharing the `decorate` prop of the editable.\n */\n\nexport const DecorateContext = createContext<(entry: NodeEntry) => Range[]>(\n  () => []\n)\n\n/**\n * Get the current `decorate` prop of the editable.\n */\n\nexport const useDecorate = (): ((entry: NodeEntry) => Range[]) => {\n  return useContext(DecorateContext)\n}\n","import { createContext, useContext } from 'react'\n\n/**\n * A React context for sharing the `selected` state of an element.\n */\n\nexport const SelectedContext = createContext(false)\n\n/**\n * Get the current `selected` state of an element.\n */\n\nexport const useSelected = (): boolean => {\n  return useContext(SelectedContext)\n}\n","import React from 'react'\nimport { Editor, Range, Element, NodeEntry, Ancestor, Descendant } from 'slate'\n\nimport ElementComponent from '../components/element'\nimport TextComponent from '../components/text'\nimport { ReactEditor } from '..'\nimport { useSlateStatic } from './use-slate-static'\nimport { useDecorate } from './use-decorate'\nimport { NODE_TO_INDEX, NODE_TO_PARENT } from '../utils/weak-maps'\nimport {\n  RenderElementProps,\n  RenderLeafProps,\n  RenderPlaceholderProps,\n} from '../components/editable'\nimport { SelectedContext } from './use-selected'\n\n/**\n * Children.\n */\n\nconst useChildren = (props: {\n  decorations: Range[]\n  node: Ancestor\n  renderElement?: (props: RenderElementProps) => JSX.Element\n  renderPlaceholder: (props: RenderPlaceholderProps) => JSX.Element\n  renderLeaf?: (props: RenderLeafProps) => JSX.Element\n  selection: Range | null\n}) => {\n  const {\n    decorations,\n    node,\n    renderElement,\n    renderPlaceholder,\n    renderLeaf,\n    selection,\n  } = props\n  const decorate = useDecorate()\n  const editor = useSlateStatic()\n  const path = ReactEditor.findPath(editor, node)\n  const children = []\n  const isLeafBlock =\n    Element.isElement(node) &&\n    !editor.isInline(node) &&\n    Editor.hasInlines(editor, node)\n\n  for (let i = 0; i < node.children.length; i++) {\n    const p = path.concat(i)\n    const n = node.children[i] as Descendant\n    const key = ReactEditor.findKey(editor, n)\n    const range = Editor.range(editor, p)\n    const sel = selection && Range.intersection(range, selection)\n    const ds = decorate([n, p])\n\n    for (const dec of decorations) {\n      const d = Range.intersection(dec, range)\n\n      if (d) {\n        ds.push(d)\n      }\n    }\n\n    if (Element.isElement(n)) {\n      children.push(\n        <SelectedContext.Provider key={`provider-${key.id}`} value={!!sel}>\n          <ElementComponent\n            decorations={ds}\n            element={n}\n            key={key.id}\n            renderElement={renderElement}\n            renderPlaceholder={renderPlaceholder}\n            renderLeaf={renderLeaf}\n            selection={sel}\n          />\n        </SelectedContext.Provider>\n      )\n    } else {\n      children.push(\n        <TextComponent\n          decorations={ds}\n          key={key.id}\n          isLast={isLeafBlock && i === node.children.length - 1}\n          parent={node}\n          renderPlaceholder={renderPlaceholder}\n          renderLeaf={renderLeaf}\n          text={n}\n        />\n      )\n    }\n\n    NODE_TO_INDEX.set(n, i)\n    NODE_TO_PARENT.set(n, node)\n  }\n\n  return children\n}\n\nexport default useChildren\n","import { isKeyHotkey } from 'is-hotkey'\nimport { IS_APPLE } from './environment'\n\n/**\n * Hotkey mappings for each platform.\n */\n\nconst HOTKEYS = {\n  bold: 'mod+b',\n  compose: ['down', 'left', 'right', 'up', 'backspace', 'enter'],\n  moveBackward: 'left',\n  moveForward: 'right',\n  moveWordBackward: 'ctrl+left',\n  moveWordForward: 'ctrl+right',\n  deleteBackward: 'shift?+backspace',\n  deleteForward: 'shift?+delete',\n  extendBackward: 'shift+left',\n  extendForward: 'shift+right',\n  italic: 'mod+i',\n  splitBlock: 'shift?+enter',\n  undo: 'mod+z',\n}\n\nconst APPLE_HOTKEYS = {\n  moveLineBackward: 'opt+up',\n  moveLineForward: 'opt+down',\n  moveWordBackward: 'opt+left',\n  moveWordForward: 'opt+right',\n  deleteBackward: ['ctrl+backspace', 'ctrl+h'],\n  deleteForward: ['ctrl+delete', 'ctrl+d'],\n  deleteLineBackward: 'cmd+shift?+backspace',\n  deleteLineForward: ['cmd+shift?+delete', 'ctrl+k'],\n  deleteWordBackward: 'opt+shift?+backspace',\n  deleteWordForward: 'opt+shift?+delete',\n  extendLineBackward: 'opt+shift+up',\n  extendLineForward: 'opt+shift+down',\n  redo: 'cmd+shift+z',\n  transposeCharacter: 'ctrl+t',\n}\n\nconst WINDOWS_HOTKEYS = {\n  deleteWordBackward: 'ctrl+shift?+backspace',\n  deleteWordForward: 'ctrl+shift?+delete',\n  redo: ['ctrl+y', 'ctrl+shift+z'],\n}\n\n/**\n * Create a platform-aware hotkey checker.\n */\n\nconst create = (key: string) => {\n  const generic = HOTKEYS[key]\n  const apple = APPLE_HOTKEYS[key]\n  const windows = WINDOWS_HOTKEYS[key]\n  const isGeneric = generic && isKeyHotkey(generic)\n  const isApple = apple && isKeyHotkey(apple)\n  const isWindows = windows && isKeyHotkey(windows)\n\n  return (event: KeyboardEvent) => {\n    if (isGeneric && isGeneric(event)) return true\n    if (IS_APPLE && isApple && isApple(event)) return true\n    if (!IS_APPLE && isWindows && isWindows(event)) return true\n    return false\n  }\n}\n\n/**\n * Hotkeys.\n */\n\nexport default {\n  isBold: create('bold'),\n  isCompose: create('compose'),\n  isMoveBackward: create('moveBackward'),\n  isMoveForward: create('moveForward'),\n  isDeleteBackward: create('deleteBackward'),\n  isDeleteForward: create('deleteForward'),\n  isDeleteLineBackward: create('deleteLineBackward'),\n  isDeleteLineForward: create('deleteLineForward'),\n  isDeleteWordBackward: create('deleteWordBackward'),\n  isDeleteWordForward: create('deleteWordForward'),\n  isExtendBackward: create('extendBackward'),\n  isExtendForward: create('extendForward'),\n  isExtendLineBackward: create('extendLineBackward'),\n  isExtendLineForward: create('extendLineForward'),\n  isItalic: create('italic'),\n  isMoveLineBackward: create('moveLineBackward'),\n  isMoveLineForward: create('moveLineForward'),\n  isMoveWordBackward: create('moveWordBackward'),\n  isMoveWordForward: create('moveWordForward'),\n  isRedo: create('redo'),\n  isSplitBlock: create('splitBlock'),\n  isTransposeCharacter: create('transposeCharacter'),\n  isUndo: create('undo'),\n}\n","import { createContext, useContext } from 'react'\n\n/**\n * A React context for sharing the `readOnly` state of the editor.\n */\n\nexport const ReadOnlyContext = createContext(false)\n\n/**\n * Get the current `readOnly` state of the editor.\n */\n\nexport const useReadOnly = (): boolean => {\n  return useContext(ReadOnlyContext)\n}\n","import { createContext, useContext } from 'react'\nimport { Editor } from 'slate'\nimport { ReactEditor } from '../plugin/react-editor'\n\n/**\n * A React context for sharing the editor object, in a way that re-renders the\n * context whenever changes occur.\n */\n\nexport const SlateContext = createContext<[ReactEditor] | null>(null)\n\n/**\n * Get the current editor object from the React context.\n */\n\nexport const useSlate = (): Editor => {\n  const context = useContext(SlateContext)\n\n  if (!context) {\n    throw new Error(\n      `The \\`useSlate\\` hook must be used inside the <Slate> component's context.`\n    )\n  }\n\n  const [editor] = context\n  return editor\n}\n","/**\n * Types.\n */\n\n// COMPAT: This is required to prevent TypeScript aliases from doing some very\n// weird things for Slate's types with the same name as globals. (2019/11/27)\n// https://github.com/microsoft/TypeScript/issues/35002\nimport DOMNode = globalThis.Node\nimport DOMComment = globalThis.Comment\nimport DOMElement = globalThis.Element\nimport DOMText = globalThis.Text\nimport DOMRange = globalThis.Range\nimport DOMSelection = globalThis.Selection\nimport DOMStaticRange = globalThis.StaticRange\n\nexport {\n  DOMNode,\n  DOMComment,\n  DOMElement,\n  DOMText,\n  DOMRange,\n  DOMSelection,\n  DOMStaticRange,\n}\n\ndeclare global {\n  interface Window {\n    Selection: typeof Selection['constructor']\n    DataTransfer: typeof DataTransfer['constructor']\n    Node: typeof Node['constructor']\n  }\n}\n\nexport type DOMPoint = [Node, number]\n\n/**\n * Returns the host window of a DOM node\n */\n\nexport const getDefaultView = (value: any): Window | null => {\n  return (\n    (value && value.ownerDocument && value.ownerDocument.defaultView) || null\n  )\n}\n\n/**\n * Check if a DOM node is a comment node.\n */\n\nexport const isDOMComment = (value: any): value is DOMComment => {\n  return isDOMNode(value) && value.nodeType === 8\n}\n\n/**\n * Check if a DOM node is an element node.\n */\n\nexport const isDOMElement = (value: any): value is DOMElement => {\n  return isDOMNode(value) && value.nodeType === 1\n}\n\n/**\n * Check if a value is a DOM node.\n */\n\nexport const isDOMNode = (value: any): value is DOMNode => {\n  const window = getDefaultView(value)\n  return !!window && value instanceof window.Node\n}\n\n/**\n * Check if a value is a DOM selection.\n */\n\nexport const isDOMSelection = (value: any): value is DOMSelection => {\n  const window = value && value.anchorNode && getDefaultView(value.anchorNode)\n  return !!window && value instanceof window.Selection\n}\n\n/**\n * Check if a DOM node is an element node.\n */\n\nexport const isDOMText = (value: any): value is DOMText => {\n  return isDOMNode(value) && value.nodeType === 3\n}\n\n/**\n * Checks whether a paste event is a plaintext-only event.\n */\n\nexport const isPlainTextOnlyPaste = (event: ClipboardEvent) => {\n  return (\n    event.clipboardData &&\n    event.clipboardData.getData('text/plain') !== '' &&\n    event.clipboardData.types.length === 1\n  )\n}\n\n/**\n * Normalize a DOM point so that it always refers to a text node.\n */\n\nexport const normalizeDOMPoint = (domPoint: DOMPoint): DOMPoint => {\n  let [node, offset] = domPoint\n\n  // If it's an element node, its offset refers to the index of its children\n  // including comment nodes, so try to find the right text child node.\n  if (isDOMElement(node) && node.childNodes.length) {\n    let isLast = offset === node.childNodes.length\n    let index = isLast ? offset - 1 : offset\n    ;[node, index] = getEditableChildAndIndex(\n      node,\n      index,\n      isLast ? 'backward' : 'forward'\n    )\n    // If the editable child found is in front of input offset, we instead seek to its end\n    isLast = index < offset\n\n    // If the node has children, traverse until we have a leaf node. Leaf nodes\n    // can be either text nodes, or other void DOM nodes.\n    while (isDOMElement(node) && node.childNodes.length) {\n      const i = isLast ? node.childNodes.length - 1 : 0\n      node = getEditableChild(node, i, isLast ? 'backward' : 'forward')\n    }\n\n    // Determine the new offset inside the text node.\n    offset = isLast && node.textContent != null ? node.textContent.length : 0\n  }\n\n  // Return the node and offset.\n  return [node, offset]\n}\n\n/**\n * Determines wether the active element is nested within a shadowRoot\n */\n\nexport const hasShadowRoot = () => {\n  return !!(\n    window.document.activeElement && window.document.activeElement.shadowRoot\n  )\n}\n\n/**\n * Get the nearest editable child and index at `index` in a `parent`, preferring\n * `direction`.\n */\n\nexport const getEditableChildAndIndex = (\n  parent: DOMElement,\n  index: number,\n  direction: 'forward' | 'backward'\n): [DOMNode, number] => {\n  const { childNodes } = parent\n  let child = childNodes[index]\n  let i = index\n  let triedForward = false\n  let triedBackward = false\n\n  // While the child is a comment node, or an element node with no children,\n  // keep iterating to find a sibling non-void, non-comment node.\n  while (\n    isDOMComment(child) ||\n    (isDOMElement(child) && child.childNodes.length === 0) ||\n    (isDOMElement(child) && child.getAttribute('contenteditable') === 'false')\n  ) {\n    if (triedForward && triedBackward) {\n      break\n    }\n\n    if (i >= childNodes.length) {\n      triedForward = true\n      i = index - 1\n      direction = 'backward'\n      continue\n    }\n\n    if (i < 0) {\n      triedBackward = true\n      i = index + 1\n      direction = 'forward'\n      continue\n    }\n\n    child = childNodes[i]\n    index = i\n    i += direction === 'forward' ? 1 : -1\n  }\n\n  return [child, index]\n}\n\n/**\n * Get the nearest editable child at `index` in a `parent`, preferring\n * `direction`.\n */\n\nexport const getEditableChild = (\n  parent: DOMElement,\n  index: number,\n  direction: 'forward' | 'backward'\n): DOMNode => {\n  const [child] = getEditableChildAndIndex(parent, index, direction)\n  return child\n}\n\n/**\n * Get a plaintext representation of the content of a node, accounting for block\n * elements which get a newline appended.\n *\n * The domNode must be attached to the DOM.\n */\n\nexport const getPlainText = (domNode: DOMNode) => {\n  let text = ''\n\n  if (isDOMText(domNode) && domNode.nodeValue) {\n    return domNode.nodeValue\n  }\n\n  if (isDOMElement(domNode)) {\n    for (const childNode of Array.from(domNode.childNodes)) {\n      text += getPlainText(childNode)\n    }\n\n    const display = getComputedStyle(domNode).getPropertyValue('display')\n\n    if (display === 'block' || display === 'list' || domNode.tagName === 'BR') {\n      text += '\\n'\n    }\n  }\n\n  return text\n}\n\n/**\n * Get x-slate-fragment attribute from data-slate-fragment\n */\nconst catchSlateFragment = /data-slate-fragment=\"(.+?)\"/m\nexport const getSlateFragmentAttribute = (\n  dataTransfer: DataTransfer\n): string | void => {\n  const htmlData = dataTransfer.getData('text/html')\n  const [, fragment] = htmlData.match(catchSlateFragment) || []\n  return fragment\n}\n\n/**\n * Get the x-slate-fragment attribute that exist in text/html data\n * and append it to the DataTransfer object\n */\nexport const getClipboardData = (dataTransfer: DataTransfer): DataTransfer => {\n  if (!dataTransfer.getData('application/x-slate-fragment')) {\n    const fragment = getSlateFragmentAttribute(dataTransfer)\n    if (fragment) {\n      const clipboardData = new DataTransfer()\n      dataTransfer.types.forEach(type => {\n        clipboardData.setData(type, dataTransfer.getData(type))\n      })\n      clipboardData.setData('application/x-slate-fragment', fragment)\n      return clipboardData\n    }\n  }\n  return dataTransfer\n}\n","import React, { useEffect, useRef, useMemo, useCallback, useState } from 'react'\nimport {\n  Editor,\n  Element,\n  NodeEntry,\n  Node,\n  Range,\n  Text,\n  Transforms,\n  Path,\n} from 'slate'\nimport getDirection from 'direction'\nimport debounce from 'lodash/debounce'\nimport throttle from 'lodash/throttle'\nimport scrollIntoView from 'scroll-into-view-if-needed'\n\nimport useChildren from '../hooks/use-children'\nimport Hotkeys from '../utils/hotkeys'\nimport {\n  HAS_BEFORE_INPUT_SUPPORT,\n  IS_IOS,\n  IS_CHROME,\n  IS_FIREFOX,\n  IS_FIREFOX_LEGACY,\n  IS_QQBROWSER,\n  IS_SAFARI,\n  CAN_USE_DOM,\n} from '../utils/environment'\nimport { ReactEditor } from '..'\nimport { ReadOnlyContext } from '../hooks/use-read-only'\nimport { useSlate } from '../hooks/use-slate'\nimport { useIsomorphicLayoutEffect } from '../hooks/use-isomorphic-layout-effect'\nimport { DecorateContext } from '../hooks/use-decorate'\nimport {\n  DOMElement,\n  DOMNode,\n  DOMRange,\n  getDefaultView,\n  isDOMElement,\n  isDOMNode,\n  isPlainTextOnlyPaste,\n} from '../utils/dom'\n\nimport {\n  EDITOR_TO_ELEMENT,\n  ELEMENT_TO_NODE,\n  IS_READ_ONLY,\n  NODE_TO_ELEMENT,\n  IS_FOCUSED,\n  PLACEHOLDER_SYMBOL,\n  EDITOR_TO_WINDOW,\n} from '../utils/weak-maps'\n\ntype DeferredOperation = () => void\n\nconst Children = (props: Parameters<typeof useChildren>[0]) => (\n  <React.Fragment>{useChildren(props)}</React.Fragment>\n)\n\n/**\n * `RenderElementProps` are passed to the `renderElement` handler.\n */\n\nexport interface RenderElementProps {\n  children: any\n  element: Element\n  attributes: {\n    'data-slate-node': 'element'\n    'data-slate-inline'?: true\n    'data-slate-void'?: true\n    dir?: 'rtl'\n    ref: any\n  }\n}\n\n/**\n * `RenderLeafProps` are passed to the `renderLeaf` handler.\n */\n\nexport interface RenderLeafProps {\n  children: any\n  leaf: Text\n  text: Text\n  attributes: {\n    'data-slate-leaf': true\n  }\n}\n\n/**\n * `EditableProps` are passed to the `<Editable>` component.\n */\n\nexport type EditableProps = {\n  decorate?: (entry: NodeEntry) => Range[]\n  onDOMBeforeInput?: (event: InputEvent) => void\n  placeholder?: string\n  readOnly?: boolean\n  role?: string\n  style?: React.CSSProperties\n  renderElement?: (props: RenderElementProps) => JSX.Element\n  renderLeaf?: (props: RenderLeafProps) => JSX.Element\n  renderPlaceholder?: (props: RenderPlaceholderProps) => JSX.Element\n  scrollSelectionIntoView?: (editor: ReactEditor, domRange: DOMRange) => void\n  as?: React.ElementType\n} & React.TextareaHTMLAttributes<HTMLDivElement>\n\n/**\n * Editable.\n */\n\nexport const Editable = (props: EditableProps) => {\n  const {\n    autoFocus,\n    decorate = defaultDecorate,\n    onDOMBeforeInput: propsOnDOMBeforeInput,\n    placeholder,\n    readOnly = false,\n    renderElement,\n    renderLeaf,\n    renderPlaceholder = props => <DefaultPlaceholder {...props} />,\n    scrollSelectionIntoView = defaultScrollSelectionIntoView,\n    style = {},\n    as: Component = 'div',\n    ...attributes\n  } = props\n  const editor = useSlate()\n  // Rerender editor when composition status changed\n  const [isComposing, setIsComposing] = useState(false)\n  const ref = useRef<HTMLDivElement>(null)\n  const deferredOperations = useRef<DeferredOperation[]>([])\n\n  // Update internal state on each render.\n  IS_READ_ONLY.set(editor, readOnly)\n\n  // Keep track of some state for the event handler logic.\n  const state = useMemo(\n    () => ({\n      isComposing: false,\n      hasInsertPrefixInCompositon: false,\n      isDraggingInternally: false,\n      isUpdatingSelection: false,\n      latestElement: null as DOMElement | null,\n    }),\n    []\n  )\n\n  // Whenever the editor updates...\n  useIsomorphicLayoutEffect(() => {\n    // Update element-related weak maps with the DOM element ref.\n    let window\n    if (ref.current && (window = getDefaultView(ref.current))) {\n      EDITOR_TO_WINDOW.set(editor, window)\n      EDITOR_TO_ELEMENT.set(editor, ref.current)\n      NODE_TO_ELEMENT.set(editor, ref.current)\n      ELEMENT_TO_NODE.set(ref.current, editor)\n    } else {\n      NODE_TO_ELEMENT.delete(editor)\n    }\n\n    // Make sure the DOM selection state is in sync.\n    const { selection } = editor\n    const root = ReactEditor.findDocumentOrShadowRoot(editor)\n    const domSelection = root.getSelection()\n\n    if (state.isComposing || !domSelection || !ReactEditor.isFocused(editor)) {\n      return\n    }\n\n    const hasDomSelection = domSelection.type !== 'None'\n\n    // If the DOM selection is properly unset, we're done.\n    if (!selection && !hasDomSelection) {\n      return\n    }\n\n    // verify that the dom selection is in the editor\n    const editorElement = EDITOR_TO_ELEMENT.get(editor)!\n    let hasDomSelectionInEditor = false\n    if (\n      editorElement.contains(domSelection.anchorNode) &&\n      editorElement.contains(domSelection.focusNode)\n    ) {\n      hasDomSelectionInEditor = true\n    }\n\n    // If the DOM selection is in the editor and the editor selection is already correct, we're done.\n    if (hasDomSelection && hasDomSelectionInEditor && selection) {\n      const slateRange = ReactEditor.toSlateRange(editor, domSelection, {\n        exactMatch: true,\n\n        // domSelection is not necessarily a valid Slate range\n        // (e.g. when clicking on contentEditable:false element)\n        suppressThrow: true,\n      })\n      if (slateRange && Range.equals(slateRange, selection)) {\n        return\n      }\n    }\n\n    // when <Editable/> is being controlled through external value\n    // then its children might just change - DOM responds to it on its own\n    // but Slate's value is not being updated through any operation\n    // and thus it doesn't transform selection on its own\n    if (selection && !ReactEditor.hasRange(editor, selection)) {\n      editor.selection = ReactEditor.toSlateRange(editor, domSelection, {\n        exactMatch: false,\n        suppressThrow: false,\n      })\n      return\n    }\n\n    // Otherwise the DOM selection is out of sync, so update it.\n    state.isUpdatingSelection = true\n\n    const newDomRange = selection && ReactEditor.toDOMRange(editor, selection)\n\n    if (newDomRange) {\n      if (Range.isBackward(selection!)) {\n        domSelection.setBaseAndExtent(\n          newDomRange.endContainer,\n          newDomRange.endOffset,\n          newDomRange.startContainer,\n          newDomRange.startOffset\n        )\n      } else {\n        domSelection.setBaseAndExtent(\n          newDomRange.startContainer,\n          newDomRange.startOffset,\n          newDomRange.endContainer,\n          newDomRange.endOffset\n        )\n      }\n      scrollSelectionIntoView(editor, newDomRange)\n    } else {\n      domSelection.removeAllRanges()\n    }\n\n    setTimeout(() => {\n      // COMPAT: In Firefox, it's not enough to create a range, you also need\n      // to focus the contenteditable element too. (2016/11/16)\n      if (newDomRange && IS_FIREFOX) {\n        const el = ReactEditor.toDOMNode(editor, editor)\n        el.focus()\n      }\n\n      state.isUpdatingSelection = false\n    })\n  })\n\n  // The autoFocus TextareaHTMLAttribute doesn't do anything on a div, so it\n  // needs to be manually focused.\n  useEffect(() => {\n    if (ref.current && autoFocus) {\n      ref.current.focus()\n    }\n  }, [autoFocus])\n\n  // Listen on the native `selectionchange` event to be able to update any time\n  // the selection changes. This is required because React's `onSelect` is leaky\n  // and non-standard so it doesn't fire until after a selection has been\n  // released. This causes issues in situations where another change happens\n  // while a selection is being dragged.\n  const onDOMSelectionChange = useCallback(\n    throttle(() => {\n      if (\n        !state.isComposing &&\n        !state.isUpdatingSelection &&\n        !state.isDraggingInternally\n      ) {\n        const root = ReactEditor.findDocumentOrShadowRoot(editor)\n        const { activeElement } = root\n        const el = ReactEditor.toDOMNode(editor, editor)\n        const domSelection = root.getSelection()\n\n        if (activeElement === el) {\n          state.latestElement = activeElement\n          IS_FOCUSED.set(editor, true)\n        } else {\n          IS_FOCUSED.delete(editor)\n        }\n\n        if (!domSelection) {\n          return Transforms.deselect(editor)\n        }\n\n        const { anchorNode, focusNode } = domSelection\n\n        const anchorNodeSelectable =\n          hasEditableTarget(editor, anchorNode) ||\n          isTargetInsideVoid(editor, anchorNode)\n\n        const focusNodeSelectable =\n          hasEditableTarget(editor, focusNode) ||\n          isTargetInsideVoid(editor, focusNode)\n\n        if (anchorNodeSelectable && focusNodeSelectable) {\n          const range = ReactEditor.toSlateRange(editor, domSelection, {\n            exactMatch: false,\n            suppressThrow: false,\n          })\n          Transforms.select(editor, range)\n        }\n      }\n    }, 100),\n    [readOnly]\n  )\n\n  const scheduleOnDOMSelectionChange = useMemo(\n    () => debounce(onDOMSelectionChange, 0),\n    [onDOMSelectionChange]\n  )\n\n  // Listen on the native `beforeinput` event to get real \"Level 2\" events. This\n  // is required because React's `beforeinput` is fake and never really attaches\n  // to the real event sadly. (2019/11/01)\n  // https://github.com/facebook/react/issues/11211\n  const onDOMBeforeInput = useCallback(\n    (event: InputEvent) => {\n      if (\n        !readOnly &&\n        hasEditableTarget(editor, event.target) &&\n        !isDOMEventHandled(event, propsOnDOMBeforeInput)\n      ) {\n        // Some IMEs/Chrome extensions like e.g. Grammarly set the selection immediately before\n        // triggering a `beforeinput` expecting the change to be applied to the immediately before\n        // set selection.\n        scheduleOnDOMSelectionChange.flush()\n\n        const { selection } = editor\n        const { inputType: type } = event\n        const data = (event as any).dataTransfer || event.data || undefined\n\n        // These two types occur while a user is composing text and can't be\n        // cancelled. Let them through and wait for the composition to end.\n        if (\n          type === 'insertCompositionText' ||\n          type === 'deleteCompositionText'\n        ) {\n          return\n        }\n\n        let native = false\n        if (\n          type === 'insertText' &&\n          selection &&\n          Range.isCollapsed(selection) &&\n          // Only use native character insertion for single characters a-z or space for now.\n          // Long-press events (hold a + press 4 = ä) to choose a special character otherwise\n          // causes duplicate inserts.\n          event.data &&\n          event.data.length === 1 &&\n          /[a-z ]/i.test(event.data) &&\n          // Chrome has issues correctly editing the start of nodes: https://bugs.chromium.org/p/chromium/issues/detail?id=1249405\n          // When there is an inline element, e.g. a link, and you select\n          // right after it (the start of the next node).\n          selection.anchor.offset !== 0\n        ) {\n          native = true\n\n          // Skip native if there are marks, as\n          // `insertText` will insert a node, not just text.\n          if (editor.marks) {\n            native = false\n          }\n\n          // Chrome also has issues correctly editing the end of nodes: https://bugs.chromium.org/p/chromium/issues/detail?id=1259100\n          // Therefore we don't allow native events to insert text at the end of nodes.\n          const { anchor } = selection\n          const inline = Editor.above(editor, {\n            at: anchor,\n            match: n => Editor.isInline(editor, n),\n            mode: 'highest',\n          })\n          if (inline) {\n            const [, inlinePath] = inline\n\n            if (Editor.isEnd(editor, selection.anchor, inlinePath)) {\n              native = false\n            }\n          }\n        }\n\n        if (!native) {\n          event.preventDefault()\n        }\n\n        // COMPAT: For the deleting forward/backward input types we don't want\n        // to change the selection because it is the range that will be deleted,\n        // and those commands determine that for themselves.\n        if (!type.startsWith('delete') || type.startsWith('deleteBy')) {\n          const [targetRange] = (event as any).getTargetRanges()\n\n          if (targetRange) {\n            const range = ReactEditor.toSlateRange(editor, targetRange, {\n              exactMatch: false,\n              suppressThrow: false,\n            })\n\n            if (!selection || !Range.equals(selection, range)) {\n              Transforms.select(editor, range)\n            }\n          }\n        }\n\n        // COMPAT: If the selection is expanded, even if the command seems like\n        // a delete forward/backward command it should delete the selection.\n        if (\n          selection &&\n          Range.isExpanded(selection) &&\n          type.startsWith('delete')\n        ) {\n          const direction = type.endsWith('Backward') ? 'backward' : 'forward'\n          Editor.deleteFragment(editor, { direction })\n          return\n        }\n\n        switch (type) {\n          case 'deleteByComposition':\n          case 'deleteByCut':\n          case 'deleteByDrag': {\n            Editor.deleteFragment(editor)\n            break\n          }\n\n          case 'deleteContent':\n          case 'deleteContentForward': {\n            Editor.deleteForward(editor)\n            break\n          }\n\n          case 'deleteContentBackward': {\n            Editor.deleteBackward(editor)\n            break\n          }\n\n          case 'deleteEntireSoftLine': {\n            Editor.deleteBackward(editor, { unit: 'line' })\n            Editor.deleteForward(editor, { unit: 'line' })\n            break\n          }\n\n          case 'deleteHardLineBackward': {\n            Editor.deleteBackward(editor, { unit: 'block' })\n            break\n          }\n\n          case 'deleteSoftLineBackward': {\n            Editor.deleteBackward(editor, { unit: 'line' })\n            break\n          }\n\n          case 'deleteHardLineForward': {\n            Editor.deleteForward(editor, { unit: 'block' })\n            break\n          }\n\n          case 'deleteSoftLineForward': {\n            Editor.deleteForward(editor, { unit: 'line' })\n            break\n          }\n\n          case 'deleteWordBackward': {\n            Editor.deleteBackward(editor, { unit: 'word' })\n            break\n          }\n\n          case 'deleteWordForward': {\n            Editor.deleteForward(editor, { unit: 'word' })\n            break\n          }\n\n          case 'insertLineBreak':\n          case 'insertParagraph': {\n            Editor.insertBreak(editor)\n            break\n          }\n\n          case 'insertFromComposition':\n          case 'insertFromDrop':\n          case 'insertFromPaste':\n          case 'insertFromYank':\n          case 'insertReplacementText':\n          case 'insertText': {\n            if (type === 'insertFromComposition') {\n              // COMPAT: in Safari, `compositionend` is dispatched after the\n              // `beforeinput` for \"insertFromComposition\". But if we wait for it\n              // then we will abort because we're still composing and the selection\n              // won't be updated properly.\n              // https://www.w3.org/TR/input-events-2/\n              state.isComposing && setIsComposing(false)\n              state.isComposing = false\n            }\n\n            // use a weak comparison instead of 'instanceof' to allow\n            // programmatic access of paste events coming from external windows\n            // like cypress where cy.window does not work realibly\n            if (data?.constructor.name === 'DataTransfer') {\n              ReactEditor.insertData(editor, data)\n            } else if (typeof data === 'string') {\n              // Only insertText operations use the native functionality, for now.\n              // Potentially expand to single character deletes, as well.\n              if (native) {\n                deferredOperations.current.push(() =>\n                  Editor.insertText(editor, data)\n                )\n              } else {\n                Editor.insertText(editor, data)\n              }\n            }\n\n            break\n          }\n        }\n      }\n    },\n    [readOnly, propsOnDOMBeforeInput]\n  )\n\n  // Attach a native DOM event handler for `beforeinput` events, because React's\n  // built-in `onBeforeInput` is actually a leaky polyfill that doesn't expose\n  // real `beforeinput` events sadly... (2019/11/04)\n  // https://github.com/facebook/react/issues/11211\n  useIsomorphicLayoutEffect(() => {\n    if (ref.current && HAS_BEFORE_INPUT_SUPPORT) {\n      // @ts-ignore The `beforeinput` event isn't recognized.\n      ref.current.addEventListener('beforeinput', onDOMBeforeInput)\n    }\n\n    return () => {\n      if (ref.current && HAS_BEFORE_INPUT_SUPPORT) {\n        // @ts-ignore The `beforeinput` event isn't recognized.\n        ref.current.removeEventListener('beforeinput', onDOMBeforeInput)\n      }\n    }\n  }, [onDOMBeforeInput])\n\n  // Attach a native DOM event handler for `selectionchange`, because React's\n  // built-in `onSelect` handler doesn't fire for all selection changes. It's a\n  // leaky polyfill that only fires on keypresses or clicks. Instead, we want to\n  // fire for any change to the selection inside the editor. (2019/11/04)\n  // https://github.com/facebook/react/issues/5785\n  useIsomorphicLayoutEffect(() => {\n    const window = ReactEditor.getWindow(editor)\n    window.document.addEventListener(\n      'selectionchange',\n      scheduleOnDOMSelectionChange\n    )\n\n    return () => {\n      window.document.removeEventListener(\n        'selectionchange',\n        scheduleOnDOMSelectionChange\n      )\n    }\n  }, [scheduleOnDOMSelectionChange])\n\n  const decorations = decorate([editor, []])\n\n  if (\n    placeholder &&\n    editor.children.length === 1 &&\n    Array.from(Node.texts(editor)).length === 1 &&\n    Node.string(editor) === '' &&\n    !isComposing\n  ) {\n    const start = Editor.start(editor, [])\n    decorations.push({\n      [PLACEHOLDER_SYMBOL]: true,\n      placeholder,\n      anchor: start,\n      focus: start,\n    })\n  }\n\n  return (\n    <ReadOnlyContext.Provider value={readOnly}>\n      <DecorateContext.Provider value={decorate}>\n        <Component\n          role={readOnly ? undefined : 'textbox'}\n          {...attributes}\n          // COMPAT: Certain browsers don't support the `beforeinput` event, so we'd\n          // have to use hacks to make these replacement-based features work.\n          // For SSR situations HAS_BEFORE_INPUT_SUPPORT is false and results in prop\n          // mismatch warning app moves to browser. Pass-through consumer props when\n          // not CAN_USE_DOM (SSR) and default to falsy value\n          spellCheck={\n            HAS_BEFORE_INPUT_SUPPORT || !CAN_USE_DOM\n              ? attributes.spellCheck\n              : false\n          }\n          autoCorrect={\n            HAS_BEFORE_INPUT_SUPPORT || !CAN_USE_DOM\n              ? attributes.autoCorrect\n              : 'false'\n          }\n          autoCapitalize={\n            HAS_BEFORE_INPUT_SUPPORT || !CAN_USE_DOM\n              ? attributes.autoCapitalize\n              : 'false'\n          }\n          data-slate-editor\n          data-slate-node=\"value\"\n          // explicitly set this\n          contentEditable={!readOnly}\n          // in some cases, a decoration needs access to the range / selection to decorate a text node,\n          // then you will select the whole text node when you select part the of text\n          // this magic zIndex=\"-1\" will fix it\n          zindex={-1}\n          suppressContentEditableWarning\n          ref={ref}\n          style={{\n            // Allow positioning relative to the editable element.\n            position: 'relative',\n            // Prevent the default outline styles.\n            outline: 'none',\n            // Preserve adjacent whitespace and new lines.\n            whiteSpace: 'pre-wrap',\n            // Allow words to break if they are too long.\n            wordWrap: 'break-word',\n            // Allow for passed-in styles to override anything.\n            ...style,\n          }}\n          onBeforeInput={useCallback(\n            (event: React.FormEvent<HTMLDivElement>) => {\n              // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n              // fall back to React's leaky polyfill instead just for it. It\n              // only works for the `insertText` input type.\n              if (\n                !HAS_BEFORE_INPUT_SUPPORT &&\n                !readOnly &&\n                !isEventHandled(event, attributes.onBeforeInput) &&\n                hasEditableTarget(editor, event.target)\n              ) {\n                event.preventDefault()\n                if (!state.isComposing) {\n                  const text = (event as any).data as string\n                  Editor.insertText(editor, text)\n                }\n              }\n            },\n            [readOnly]\n          )}\n          onInput={useCallback((event: React.SyntheticEvent) => {\n            // Flush native operations, as native events will have propogated\n            // and we can correctly compare DOM text values in components\n            // to stop rendering, so that browser functions like autocorrect\n            // and spellcheck work as expected.\n            for (const op of deferredOperations.current) {\n              op()\n            }\n            deferredOperations.current = []\n          }, [])}\n          onBlur={useCallback(\n            (event: React.FocusEvent<HTMLDivElement>) => {\n              if (\n                readOnly ||\n                state.isUpdatingSelection ||\n                !hasEditableTarget(editor, event.target) ||\n                isEventHandled(event, attributes.onBlur)\n              ) {\n                return\n              }\n\n              // COMPAT: If the current `activeElement` is still the previous\n              // one, this is due to the window being blurred when the tab\n              // itself becomes unfocused, so we want to abort early to allow to\n              // editor to stay focused when the tab becomes focused again.\n              const root = ReactEditor.findDocumentOrShadowRoot(editor)\n              if (state.latestElement === root.activeElement) {\n                return\n              }\n\n              const { relatedTarget } = event\n              const el = ReactEditor.toDOMNode(editor, editor)\n\n              // COMPAT: The event should be ignored if the focus is returning\n              // to the editor from an embedded editable element (eg. an <input>\n              // element inside a void node).\n              if (relatedTarget === el) {\n                return\n              }\n\n              // COMPAT: The event should be ignored if the focus is moving from\n              // the editor to inside a void node's spacer element.\n              if (\n                isDOMElement(relatedTarget) &&\n                relatedTarget.hasAttribute('data-slate-spacer')\n              ) {\n                return\n              }\n\n              // COMPAT: The event should be ignored if the focus is moving to a\n              // non- editable section of an element that isn't a void node (eg.\n              // a list item of the check list example).\n              if (\n                relatedTarget != null &&\n                isDOMNode(relatedTarget) &&\n                ReactEditor.hasDOMNode(editor, relatedTarget)\n              ) {\n                const node = ReactEditor.toSlateNode(editor, relatedTarget)\n\n                if (Element.isElement(node) && !editor.isVoid(node)) {\n                  return\n                }\n              }\n\n              // COMPAT: Safari doesn't always remove the selection even if the content-\n              // editable element no longer has focus. Refer to:\n              // https://stackoverflow.com/questions/12353247/force-contenteditable-div-to-stop-accepting-input-after-it-loses-focus-under-web\n              if (IS_SAFARI) {\n                const domSelection = root.getSelection()\n                domSelection?.removeAllRanges()\n              }\n\n              IS_FOCUSED.delete(editor)\n            },\n            [readOnly, attributes.onBlur]\n          )}\n          onClick={useCallback(\n            (event: React.MouseEvent<HTMLDivElement>) => {\n              if (\n                !readOnly &&\n                hasTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onClick) &&\n                isDOMNode(event.target)\n              ) {\n                const node = ReactEditor.toSlateNode(editor, event.target)\n                const path = ReactEditor.findPath(editor, node)\n\n                // At this time, the Slate document may be arbitrarily different,\n                // because onClick handlers can change the document before we get here.\n                // Therefore we must check that this path actually exists,\n                // and that it still refers to the same node.\n                if (Editor.hasPath(editor, path)) {\n                  const lookupNode = Node.get(editor, path)\n                  if (lookupNode === node) {\n                    const start = Editor.start(editor, path)\n                    const end = Editor.end(editor, path)\n\n                    const startVoid = Editor.void(editor, { at: start })\n                    const endVoid = Editor.void(editor, { at: end })\n\n                    if (\n                      startVoid &&\n                      endVoid &&\n                      Path.equals(startVoid[1], endVoid[1])\n                    ) {\n                      const range = Editor.range(editor, start)\n                      Transforms.select(editor, range)\n                    }\n                  }\n                }\n              }\n            },\n            [readOnly, attributes.onClick]\n          )}\n          onCompositionEnd={useCallback(\n            (event: React.CompositionEvent<HTMLDivElement>) => {\n              if (\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onCompositionEnd)\n              ) {\n                state.isComposing && setIsComposing(false)\n                state.isComposing = false\n\n                // COMPAT: In Chrome, `beforeinput` events for compositions\n                // aren't correct and never fire the \"insertFromComposition\"\n                // type that we need. So instead, insert whenever a composition\n                // ends since it will already have been committed to the DOM.\n                if (\n                  !IS_SAFARI &&\n                  !IS_FIREFOX_LEGACY &&\n                  !IS_IOS &&\n                  !IS_QQBROWSER &&\n                  event.data\n                ) {\n                  Editor.insertText(editor, event.data)\n                }\n\n                if (editor.selection && Range.isCollapsed(editor.selection)) {\n                  const leafPath = editor.selection.anchor.path\n                  const currentTextNode = Node.leaf(editor, leafPath)\n                  if (state.hasInsertPrefixInCompositon) {\n                    state.hasInsertPrefixInCompositon = false\n                    Editor.withoutNormalizing(editor, () => {\n                      // remove Unicode BOM prefix added in `onCompositionStart`\n                      const text = currentTextNode.text.replace(/^\\uFEFF/, '')\n                      Transforms.delete(editor, {\n                        distance: currentTextNode.text.length,\n                        reverse: true,\n                      })\n                      Transforms.insertText(editor, text)\n                    })\n                  }\n                }\n              }\n            },\n            [attributes.onCompositionEnd]\n          )}\n          onCompositionUpdate={useCallback(\n            (event: React.CompositionEvent<HTMLDivElement>) => {\n              if (\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onCompositionUpdate)\n              ) {\n                !state.isComposing && setIsComposing(true)\n                state.isComposing = true\n              }\n            },\n            [attributes.onCompositionUpdate]\n          )}\n          onCompositionStart={useCallback(\n            (event: React.CompositionEvent<HTMLDivElement>) => {\n              if (\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onCompositionStart)\n              ) {\n                const { selection, marks } = editor\n                if (selection) {\n                  if (Range.isExpanded(selection)) {\n                    Editor.deleteFragment(editor)\n                    return\n                  }\n                  const inline = Editor.above(editor, {\n                    match: n => Editor.isInline(editor, n),\n                    mode: 'highest',\n                  })\n                  if (inline) {\n                    const [, inlinePath] = inline\n                    if (Editor.isEnd(editor, selection.anchor, inlinePath)) {\n                      const point = Editor.after(editor, inlinePath)!\n                      Transforms.setSelection(editor, {\n                        anchor: point,\n                        focus: point,\n                      })\n                    }\n                  }\n                  // insert new node in advance to ensure composition text will insert\n                  // along with final input text\n                  // add Unicode BOM prefix to avoid normalize removing this node\n                  if (marks) {\n                    state.hasInsertPrefixInCompositon = true\n                    Transforms.insertNodes(\n                      editor,\n                      {\n                        text: '\\uFEFF',\n                        ...marks,\n                      },\n                      {\n                        select: true,\n                      }\n                    )\n                  }\n                }\n              }\n            },\n            [attributes.onCompositionStart]\n          )}\n          onCopy={useCallback(\n            (event: React.ClipboardEvent<HTMLDivElement>) => {\n              if (\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onCopy)\n              ) {\n                event.preventDefault()\n                ReactEditor.setFragmentData(editor, event.clipboardData)\n              }\n            },\n            [attributes.onCopy]\n          )}\n          onCut={useCallback(\n            (event: React.ClipboardEvent<HTMLDivElement>) => {\n              if (\n                !readOnly &&\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onCut)\n              ) {\n                event.preventDefault()\n                ReactEditor.setFragmentData(editor, event.clipboardData)\n                const { selection } = editor\n\n                if (selection) {\n                  if (Range.isExpanded(selection)) {\n                    Editor.deleteFragment(editor)\n                  } else {\n                    const node = Node.parent(editor, selection.anchor.path)\n                    if (Editor.isVoid(editor, node)) {\n                      Transforms.delete(editor)\n                    }\n                  }\n                }\n              }\n            },\n            [readOnly, attributes.onCut]\n          )}\n          onDragOver={useCallback(\n            (event: React.DragEvent<HTMLDivElement>) => {\n              if (\n                hasTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onDragOver)\n              ) {\n                // Only when the target is void, call `preventDefault` to signal\n                // that drops are allowed. Editable content is droppable by\n                // default, and calling `preventDefault` hides the cursor.\n                const node = ReactEditor.toSlateNode(editor, event.target)\n\n                if (Editor.isVoid(editor, node)) {\n                  event.preventDefault()\n                }\n              }\n            },\n            [attributes.onDragOver]\n          )}\n          onDragStart={useCallback(\n            (event: React.DragEvent<HTMLDivElement>) => {\n              if (\n                !readOnly &&\n                hasTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onDragStart)\n              ) {\n                const node = ReactEditor.toSlateNode(editor, event.target)\n                const path = ReactEditor.findPath(editor, node)\n                const voidMatch =\n                  Editor.isVoid(editor, node) ||\n                  Editor.void(editor, { at: path, voids: true })\n\n                // If starting a drag on a void node, make sure it is selected\n                // so that it shows up in the selection's fragment.\n                if (voidMatch) {\n                  const range = Editor.range(editor, path)\n                  Transforms.select(editor, range)\n                }\n\n                state.isDraggingInternally = true\n\n                ReactEditor.setFragmentData(editor, event.dataTransfer)\n              }\n            },\n            [attributes.onDragStart]\n          )}\n          onDrop={useCallback(\n            (event: React.DragEvent<HTMLDivElement>) => {\n              if (\n                !readOnly &&\n                hasTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onDrop)\n              ) {\n                event.preventDefault()\n\n                // Keep a reference to the dragged range before updating selection\n                const draggedRange = editor.selection\n\n                // Find the range where the drop happened\n                const range = ReactEditor.findEventRange(editor, event)\n                const data = event.dataTransfer\n\n                Transforms.select(editor, range)\n\n                if (state.isDraggingInternally) {\n                  if (\n                    draggedRange &&\n                    !Range.equals(draggedRange, range) &&\n                    !Editor.void(editor, { at: range, voids: true })\n                  ) {\n                    Transforms.delete(editor, {\n                      at: draggedRange,\n                    })\n                  }\n\n                  state.isDraggingInternally = false\n                }\n\n                ReactEditor.insertData(editor, data)\n\n                // When dragging from another source into the editor, it's possible\n                // that the current editor does not have focus.\n                if (!ReactEditor.isFocused(editor)) {\n                  ReactEditor.focus(editor)\n                }\n              }\n            },\n            [readOnly, attributes.onDrop]\n          )}\n          onDragEnd={useCallback(\n            (event: React.DragEvent<HTMLDivElement>) => {\n              // When dropping on a different droppable element than the current editor,\n              // `onDrop` is not called. So we need to clean up in `onDragEnd` instead.\n              // Note: `onDragEnd` is only called when `onDrop` is not called\n              if (\n                !readOnly &&\n                state.isDraggingInternally &&\n                hasTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onDragEnd)\n              ) {\n                state.isDraggingInternally = false\n              }\n            },\n            [readOnly, attributes.onDragEnd]\n          )}\n          onFocus={useCallback(\n            (event: React.FocusEvent<HTMLDivElement>) => {\n              if (\n                !readOnly &&\n                !state.isUpdatingSelection &&\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onFocus)\n              ) {\n                const el = ReactEditor.toDOMNode(editor, editor)\n                const root = ReactEditor.findDocumentOrShadowRoot(editor)\n                state.latestElement = root.activeElement\n\n                // COMPAT: If the editor has nested editable elements, the focus\n                // can go to them. In Firefox, this must be prevented because it\n                // results in issues with keyboard navigation. (2017/03/30)\n                if (IS_FIREFOX && event.target !== el) {\n                  el.focus()\n                  return\n                }\n\n                IS_FOCUSED.set(editor, true)\n              }\n            },\n            [readOnly, attributes.onFocus]\n          )}\n          onKeyDown={useCallback(\n            (event: React.KeyboardEvent<HTMLDivElement>) => {\n              if (\n                !readOnly &&\n                !state.isComposing &&\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onKeyDown)\n              ) {\n                const { nativeEvent } = event\n                const { selection } = editor\n\n                const element =\n                  editor.children[\n                    selection !== null ? selection.focus.path[0] : 0\n                  ]\n                const isRTL = getDirection(Node.string(element)) === 'rtl'\n\n                // COMPAT: Since we prevent the default behavior on\n                // `beforeinput` events, the browser doesn't think there's ever\n                // any history stack to undo or redo, so we have to manage these\n                // hotkeys ourselves. (2019/11/06)\n                if (Hotkeys.isRedo(nativeEvent)) {\n                  event.preventDefault()\n                  const maybeHistoryEditor: any = editor\n\n                  if (typeof maybeHistoryEditor.redo === 'function') {\n                    maybeHistoryEditor.redo()\n                  }\n\n                  return\n                }\n\n                if (Hotkeys.isUndo(nativeEvent)) {\n                  event.preventDefault()\n                  const maybeHistoryEditor: any = editor\n\n                  if (typeof maybeHistoryEditor.undo === 'function') {\n                    maybeHistoryEditor.undo()\n                  }\n\n                  return\n                }\n\n                // COMPAT: Certain browsers don't handle the selection updates\n                // properly. In Chrome, the selection isn't properly extended.\n                // And in Firefox, the selection isn't properly collapsed.\n                // (2017/10/17)\n                if (Hotkeys.isMoveLineBackward(nativeEvent)) {\n                  event.preventDefault()\n                  Transforms.move(editor, { unit: 'line', reverse: true })\n                  return\n                }\n\n                if (Hotkeys.isMoveLineForward(nativeEvent)) {\n                  event.preventDefault()\n                  Transforms.move(editor, { unit: 'line' })\n                  return\n                }\n\n                if (Hotkeys.isExtendLineBackward(nativeEvent)) {\n                  event.preventDefault()\n                  Transforms.move(editor, {\n                    unit: 'line',\n                    edge: 'focus',\n                    reverse: true,\n                  })\n                  return\n                }\n\n                if (Hotkeys.isExtendLineForward(nativeEvent)) {\n                  event.preventDefault()\n                  Transforms.move(editor, { unit: 'line', edge: 'focus' })\n                  return\n                }\n\n                // COMPAT: If a void node is selected, or a zero-width text node\n                // adjacent to an inline is selected, we need to handle these\n                // hotkeys manually because browsers won't be able to skip over\n                // the void node with the zero-width space not being an empty\n                // string.\n                if (Hotkeys.isMoveBackward(nativeEvent)) {\n                  event.preventDefault()\n\n                  if (selection && Range.isCollapsed(selection)) {\n                    Transforms.move(editor, { reverse: !isRTL })\n                  } else {\n                    Transforms.collapse(editor, { edge: 'start' })\n                  }\n\n                  return\n                }\n\n                if (Hotkeys.isMoveForward(nativeEvent)) {\n                  event.preventDefault()\n\n                  if (selection && Range.isCollapsed(selection)) {\n                    Transforms.move(editor, { reverse: isRTL })\n                  } else {\n                    Transforms.collapse(editor, { edge: 'end' })\n                  }\n\n                  return\n                }\n\n                if (Hotkeys.isMoveWordBackward(nativeEvent)) {\n                  event.preventDefault()\n\n                  if (selection && Range.isExpanded(selection)) {\n                    Transforms.collapse(editor, { edge: 'focus' })\n                  }\n\n                  Transforms.move(editor, { unit: 'word', reverse: !isRTL })\n                  return\n                }\n\n                if (Hotkeys.isMoveWordForward(nativeEvent)) {\n                  event.preventDefault()\n\n                  if (selection && Range.isExpanded(selection)) {\n                    Transforms.collapse(editor, { edge: 'focus' })\n                  }\n\n                  Transforms.move(editor, { unit: 'word', reverse: isRTL })\n                  return\n                }\n\n                // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n                // fall back to guessing at the input intention for hotkeys.\n                // COMPAT: In iOS, some of these hotkeys are handled in the\n                if (!HAS_BEFORE_INPUT_SUPPORT) {\n                  // We don't have a core behavior for these, but they change the\n                  // DOM if we don't prevent them, so we have to.\n                  if (\n                    Hotkeys.isBold(nativeEvent) ||\n                    Hotkeys.isItalic(nativeEvent) ||\n                    Hotkeys.isTransposeCharacter(nativeEvent)\n                  ) {\n                    event.preventDefault()\n                    return\n                  }\n\n                  if (Hotkeys.isSplitBlock(nativeEvent)) {\n                    event.preventDefault()\n                    Editor.insertBreak(editor)\n                    return\n                  }\n\n                  if (Hotkeys.isDeleteBackward(nativeEvent)) {\n                    event.preventDefault()\n\n                    if (selection && Range.isExpanded(selection)) {\n                      Editor.deleteFragment(editor, { direction: 'backward' })\n                    } else {\n                      Editor.deleteBackward(editor)\n                    }\n\n                    return\n                  }\n\n                  if (Hotkeys.isDeleteForward(nativeEvent)) {\n                    event.preventDefault()\n\n                    if (selection && Range.isExpanded(selection)) {\n                      Editor.deleteFragment(editor, { direction: 'forward' })\n                    } else {\n                      Editor.deleteForward(editor)\n                    }\n\n                    return\n                  }\n\n                  if (Hotkeys.isDeleteLineBackward(nativeEvent)) {\n                    event.preventDefault()\n\n                    if (selection && Range.isExpanded(selection)) {\n                      Editor.deleteFragment(editor, { direction: 'backward' })\n                    } else {\n                      Editor.deleteBackward(editor, { unit: 'line' })\n                    }\n\n                    return\n                  }\n\n                  if (Hotkeys.isDeleteLineForward(nativeEvent)) {\n                    event.preventDefault()\n\n                    if (selection && Range.isExpanded(selection)) {\n                      Editor.deleteFragment(editor, { direction: 'forward' })\n                    } else {\n                      Editor.deleteForward(editor, { unit: 'line' })\n                    }\n\n                    return\n                  }\n\n                  if (Hotkeys.isDeleteWordBackward(nativeEvent)) {\n                    event.preventDefault()\n\n                    if (selection && Range.isExpanded(selection)) {\n                      Editor.deleteFragment(editor, { direction: 'backward' })\n                    } else {\n                      Editor.deleteBackward(editor, { unit: 'word' })\n                    }\n\n                    return\n                  }\n\n                  if (Hotkeys.isDeleteWordForward(nativeEvent)) {\n                    event.preventDefault()\n\n                    if (selection && Range.isExpanded(selection)) {\n                      Editor.deleteFragment(editor, { direction: 'forward' })\n                    } else {\n                      Editor.deleteForward(editor, { unit: 'word' })\n                    }\n\n                    return\n                  }\n                } else {\n                  if (IS_CHROME || IS_SAFARI) {\n                    // COMPAT: Chrome and Safari support `beforeinput` event but do not fire\n                    // an event when deleting backwards in a selected void inline node\n                    if (\n                      selection &&\n                      (Hotkeys.isDeleteBackward(nativeEvent) ||\n                        Hotkeys.isDeleteForward(nativeEvent)) &&\n                      Range.isCollapsed(selection)\n                    ) {\n                      const currentNode = Node.parent(\n                        editor,\n                        selection.anchor.path\n                      )\n\n                      if (\n                        Element.isElement(currentNode) &&\n                        Editor.isVoid(editor, currentNode) &&\n                        Editor.isInline(editor, currentNode)\n                      ) {\n                        event.preventDefault()\n                        Editor.deleteBackward(editor, { unit: 'block' })\n\n                        return\n                      }\n                    }\n                  }\n                }\n              }\n            },\n            [readOnly, attributes.onKeyDown]\n          )}\n          onPaste={useCallback(\n            (event: React.ClipboardEvent<HTMLDivElement>) => {\n              if (\n                !readOnly &&\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onPaste)\n              ) {\n                // COMPAT: Certain browsers don't support the `beforeinput` event, so we\n                // fall back to React's `onPaste` here instead.\n                // COMPAT: Firefox, Chrome and Safari don't emit `beforeinput` events\n                // when \"paste without formatting\" is used, so fallback. (2020/02/20)\n                if (\n                  !HAS_BEFORE_INPUT_SUPPORT ||\n                  isPlainTextOnlyPaste(event.nativeEvent)\n                ) {\n                  event.preventDefault()\n                  ReactEditor.insertData(editor, event.clipboardData)\n                }\n              }\n            },\n            [readOnly, attributes.onPaste]\n          )}\n        >\n          <Children\n            decorations={decorations}\n            node={editor}\n            renderElement={renderElement}\n            renderPlaceholder={renderPlaceholder}\n            renderLeaf={renderLeaf}\n            selection={editor.selection}\n          />\n        </Component>\n      </DecorateContext.Provider>\n    </ReadOnlyContext.Provider>\n  )\n}\n\n/**\n * The props that get passed to renderPlaceholder\n */\nexport type RenderPlaceholderProps = {\n  children: any\n  attributes: {\n    'data-slate-placeholder': boolean\n    dir?: 'rtl'\n    contentEditable: boolean\n    ref: React.RefObject<any>\n    style: React.CSSProperties\n  }\n}\n\n/**\n * The default placeholder element\n */\n\nexport const DefaultPlaceholder = ({\n  attributes,\n  children,\n}: RenderPlaceholderProps) => <span {...attributes}>{children}</span>\n\n/**\n * A default memoized decorate function.\n */\n\nexport const defaultDecorate: (entry: NodeEntry) => Range[] = () => []\n\n/**\n * A default implement to scroll dom range into view.\n */\n\nconst defaultScrollSelectionIntoView = (\n  editor: ReactEditor,\n  domRange: DOMRange\n) => {\n  // This was affecting the selection of multiple blocks and dragging behavior,\n  // so enabled only if the selection has been collapsed.\n  if (\n    !editor.selection ||\n    (editor.selection && Range.isCollapsed(editor.selection))\n  ) {\n    const leafEl = domRange.startContainer.parentElement!\n    leafEl.getBoundingClientRect = domRange.getBoundingClientRect.bind(domRange)\n    scrollIntoView(leafEl, {\n      scrollMode: 'if-needed',\n    })\n    delete leafEl.getBoundingClientRect\n  }\n}\n\n/**\n * Check if two DOM range objects are equal.\n */\n\nexport const isRangeEqual = (a: DOMRange, b: DOMRange) => {\n  return (\n    (a.startContainer === b.startContainer &&\n      a.startOffset === b.startOffset &&\n      a.endContainer === b.endContainer &&\n      a.endOffset === b.endOffset) ||\n    (a.startContainer === b.endContainer &&\n      a.startOffset === b.endOffset &&\n      a.endContainer === b.startContainer &&\n      a.endOffset === b.startOffset)\n  )\n}\n\n/**\n * Check if the target is in the editor.\n */\n\nexport const hasTarget = (\n  editor: ReactEditor,\n  target: EventTarget | null\n): target is DOMNode => {\n  return isDOMNode(target) && ReactEditor.hasDOMNode(editor, target)\n}\n\n/**\n * Check if the target is editable and in the editor.\n */\n\nexport const hasEditableTarget = (\n  editor: ReactEditor,\n  target: EventTarget | null\n): target is DOMNode => {\n  return (\n    isDOMNode(target) &&\n    ReactEditor.hasDOMNode(editor, target, { editable: true })\n  )\n}\n\n/**\n * Check if the target is inside void and in the editor.\n */\n\nexport const isTargetInsideVoid = (\n  editor: ReactEditor,\n  target: EventTarget | null\n): boolean => {\n  const slateNode =\n    hasTarget(editor, target) && ReactEditor.toSlateNode(editor, target)\n  return Editor.isVoid(editor, slateNode)\n}\n\n/**\n * Check if an event is overrided by a handler.\n */\n\nexport const isEventHandled = <\n  EventType extends React.SyntheticEvent<unknown, unknown>\n>(\n  event: EventType,\n  handler?: (event: EventType) => void | boolean\n) => {\n  if (!handler) {\n    return false\n  }\n  // The custom event handler may return a boolean to specify whether the event\n  // shall be treated as being handled or not.\n  const shouldTreatEventAsHandled = handler(event)\n\n  if (shouldTreatEventAsHandled != null) {\n    return shouldTreatEventAsHandled\n  }\n\n  return event.isDefaultPrevented() || event.isPropagationStopped()\n}\n\n/**\n * Check if a DOM event is overrided by a handler.\n */\n\nexport const isDOMEventHandled = <E extends Event>(\n  event: E,\n  handler?: (event: E) => void | boolean\n) => {\n  if (!handler) {\n    return false\n  }\n\n  // The custom event handler may return a boolean to specify whether the event\n  // shall be treated as being handled or not.\n  const shouldTreatEventAsHandled = handler(event)\n\n  if (shouldTreatEventAsHandled != null) {\n    return shouldTreatEventAsHandled\n  }\n\n  return event.defaultPrevented\n}\n","/**\n * An auto-incrementing identifier for keys.\n */\n\nlet n = 0\n\n/**\n * A class that keeps track of a key string. We use a full class here because we\n * want to be able to use them as keys in `WeakMap` objects.\n */\n\nexport class Key {\n  id: string\n\n  constructor() {\n    this.id = `${n++}`\n  }\n}\n","import { Editor, Node, Path, Point, Range, Transforms, BaseEditor } from 'slate'\n\nimport { Key } from '../utils/key'\nimport {\n  EDITOR_TO_ELEMENT,\n  ELEMENT_TO_NODE,\n  IS_FOCUSED,\n  IS_READ_ONLY,\n  NODE_TO_INDEX,\n  NODE_TO_KEY,\n  NODE_TO_PARENT,\n  EDITOR_TO_WINDOW,\n  EDITOR_TO_KEY_TO_ELEMENT,\n} from '../utils/weak-maps'\nimport {\n  DOMElement,\n  DOMNode,\n  DOMPoint,\n  DOMRange,\n  DOMSelection,\n  DOMStaticRange,\n  isDOMElement,\n  isDOMSelection,\n  normalizeDOMPoint,\n  hasShadowRoot,\n} from '../utils/dom'\nimport { IS_CHROME, IS_FIREFOX } from '../utils/environment'\n\n/**\n * A React and DOM-specific version of the `Editor` interface.\n */\n\nexport interface ReactEditor extends BaseEditor {\n  insertData: (data: DataTransfer) => void\n  insertFragmentData: (data: DataTransfer) => boolean\n  insertTextData: (data: DataTransfer) => boolean\n  setFragmentData: (data: DataTransfer) => void\n  hasRange: (editor: ReactEditor, range: Range) => boolean\n}\n\nexport const ReactEditor = {\n  /**\n   * Return the host window of the current editor.\n   */\n\n  getWindow(editor: ReactEditor): Window {\n    const window = EDITOR_TO_WINDOW.get(editor)\n    if (!window) {\n      throw new Error('Unable to find a host window element for this editor')\n    }\n    return window\n  },\n\n  /**\n   * Find a key for a Slate node.\n   */\n\n  findKey(editor: ReactEditor, node: Node): Key {\n    let key = NODE_TO_KEY.get(node)\n\n    if (!key) {\n      key = new Key()\n      NODE_TO_KEY.set(node, key)\n    }\n\n    return key\n  },\n\n  /**\n   * Find the path of Slate node.\n   */\n\n  findPath(editor: ReactEditor, node: Node): Path {\n    const path: Path = []\n    let child = node\n\n    while (true) {\n      const parent = NODE_TO_PARENT.get(child)\n\n      if (parent == null) {\n        if (Editor.isEditor(child)) {\n          return path\n        } else {\n          break\n        }\n      }\n\n      const i = NODE_TO_INDEX.get(child)\n\n      if (i == null) {\n        break\n      }\n\n      path.unshift(i)\n      child = parent\n    }\n\n    throw new Error(\n      `Unable to find the path for Slate node: ${JSON.stringify(node)}`\n    )\n  },\n\n  /**\n   * Find the DOM node that implements DocumentOrShadowRoot for the editor.\n   */\n\n  findDocumentOrShadowRoot(editor: ReactEditor): Document | ShadowRoot {\n    const el = ReactEditor.toDOMNode(editor, editor)\n    const root = el.getRootNode()\n\n    if (\n      (root instanceof Document || root instanceof ShadowRoot) &&\n      root.getSelection != null\n    ) {\n      return root\n    }\n\n    return el.ownerDocument\n  },\n\n  /**\n   * Check if the editor is focused.\n   */\n\n  isFocused(editor: ReactEditor): boolean {\n    return !!IS_FOCUSED.get(editor)\n  },\n\n  /**\n   * Check if the editor is in read-only mode.\n   */\n\n  isReadOnly(editor: ReactEditor): boolean {\n    return !!IS_READ_ONLY.get(editor)\n  },\n\n  /**\n   * Blur the editor.\n   */\n\n  blur(editor: ReactEditor): void {\n    const el = ReactEditor.toDOMNode(editor, editor)\n    const root = ReactEditor.findDocumentOrShadowRoot(editor)\n    IS_FOCUSED.set(editor, false)\n\n    if (root.activeElement === el) {\n      el.blur()\n    }\n  },\n\n  /**\n   * Focus the editor.\n   */\n\n  focus(editor: ReactEditor): void {\n    const el = ReactEditor.toDOMNode(editor, editor)\n    const root = ReactEditor.findDocumentOrShadowRoot(editor)\n    IS_FOCUSED.set(editor, true)\n\n    if (root.activeElement !== el) {\n      el.focus({ preventScroll: true })\n    }\n  },\n\n  /**\n   * Deselect the editor.\n   */\n\n  deselect(editor: ReactEditor): void {\n    const el = ReactEditor.toDOMNode(editor, editor)\n    const { selection } = editor\n    const root = ReactEditor.findDocumentOrShadowRoot(editor)\n    const domSelection = root.getSelection()\n\n    if (domSelection && domSelection.rangeCount > 0) {\n      domSelection.removeAllRanges()\n    }\n\n    if (selection) {\n      Transforms.deselect(editor)\n    }\n  },\n\n  /**\n   * Check if a DOM node is within the editor.\n   */\n\n  hasDOMNode(\n    editor: ReactEditor,\n    target: DOMNode,\n    options: { editable?: boolean } = {}\n  ): boolean {\n    const { editable = false } = options\n    const editorEl = ReactEditor.toDOMNode(editor, editor)\n    let targetEl\n\n    // COMPAT: In Firefox, reading `target.nodeType` will throw an error if\n    // target is originating from an internal \"restricted\" element (e.g. a\n    // stepper arrow on a number input). (2018/05/04)\n    // https://github.com/ianstormtaylor/slate/issues/1819\n    try {\n      targetEl = (isDOMElement(target)\n        ? target\n        : target.parentElement) as HTMLElement\n    } catch (err) {\n      if (\n        !err.message.includes('Permission denied to access property \"nodeType\"')\n      ) {\n        throw err\n      }\n    }\n\n    if (!targetEl) {\n      return false\n    }\n\n    return (\n      targetEl.closest(`[data-slate-editor]`) === editorEl &&\n      (!editable || targetEl.isContentEditable\n        ? true\n        : (typeof targetEl.isContentEditable === 'boolean' && // isContentEditable exists only on HTMLElement, and on other nodes it will be undefined\n            // this is the core logic that lets you know you got the right editor.selection instead of null when editor is contenteditable=\"false\"(readOnly)\n            targetEl.closest('[contenteditable=\"false\"]') === editorEl) ||\n          !!targetEl.getAttribute('data-slate-zero-width'))\n    )\n  },\n\n  /**\n   * Insert data from a `DataTransfer` into the editor.\n   */\n\n  insertData(editor: ReactEditor, data: DataTransfer): void {\n    editor.insertData(data)\n  },\n\n  /**\n   * Insert fragment data from a `DataTransfer` into the editor.\n   */\n\n  insertFragmentData(editor: ReactEditor, data: DataTransfer): boolean {\n    return editor.insertFragmentData(data)\n  },\n\n  /**\n   * Insert text data from a `DataTransfer` into the editor.\n   */\n\n  insertTextData(editor: ReactEditor, data: DataTransfer): boolean {\n    return editor.insertTextData(data)\n  },\n\n  /**\n   * Sets data from the currently selected fragment on a `DataTransfer`.\n   */\n\n  setFragmentData(editor: ReactEditor, data: DataTransfer): void {\n    editor.setFragmentData(data)\n  },\n\n  /**\n   * Find the native DOM element from a Slate node.\n   */\n\n  toDOMNode(editor: ReactEditor, node: Node): HTMLElement {\n    const KEY_TO_ELEMENT = EDITOR_TO_KEY_TO_ELEMENT.get(editor)\n    const domNode = Editor.isEditor(node)\n      ? EDITOR_TO_ELEMENT.get(editor)\n      : KEY_TO_ELEMENT?.get(ReactEditor.findKey(editor, node))\n\n    if (!domNode) {\n      throw new Error(\n        `Cannot resolve a DOM node from Slate node: ${JSON.stringify(node)}`\n      )\n    }\n\n    return domNode\n  },\n\n  /**\n   * Find a native DOM selection point from a Slate point.\n   */\n\n  toDOMPoint(editor: ReactEditor, point: Point): DOMPoint {\n    const [node] = Editor.node(editor, point.path)\n    const el = ReactEditor.toDOMNode(editor, node)\n    let domPoint: DOMPoint | undefined\n\n    // If we're inside a void node, force the offset to 0, otherwise the zero\n    // width spacing character will result in an incorrect offset of 1\n    if (Editor.void(editor, { at: point })) {\n      point = { path: point.path, offset: 0 }\n    }\n\n    // For each leaf, we need to isolate its content, which means filtering\n    // to its direct text and zero-width spans. (We have to filter out any\n    // other siblings that may have been rendered alongside them.)\n    const selector = `[data-slate-string], [data-slate-zero-width]`\n    const texts = Array.from(el.querySelectorAll(selector))\n    let start = 0\n\n    for (const text of texts) {\n      const domNode = text.childNodes[0] as HTMLElement\n\n      if (domNode == null || domNode.textContent == null) {\n        continue\n      }\n\n      const { length } = domNode.textContent\n      const attr = text.getAttribute('data-slate-length')\n      const trueLength = attr == null ? length : parseInt(attr, 10)\n      const end = start + trueLength\n\n      if (point.offset <= end) {\n        const offset = Math.min(length, Math.max(0, point.offset - start))\n        domPoint = [domNode, offset]\n        break\n      }\n\n      start = end\n    }\n\n    if (!domPoint) {\n      throw new Error(\n        `Cannot resolve a DOM point from Slate point: ${JSON.stringify(point)}`\n      )\n    }\n\n    return domPoint\n  },\n\n  /**\n   * Find a native DOM range from a Slate `range`.\n   *\n   * Notice: the returned range will always be ordinal regardless of the direction of Slate `range` due to DOM API limit.\n   *\n   * there is no way to create a reverse DOM Range using Range.setStart/setEnd\n   * according to https://dom.spec.whatwg.org/#concept-range-bp-set.\n   */\n\n  toDOMRange(editor: ReactEditor, range: Range): DOMRange {\n    const { anchor, focus } = range\n    const isBackward = Range.isBackward(range)\n    const domAnchor = ReactEditor.toDOMPoint(editor, anchor)\n    const domFocus = Range.isCollapsed(range)\n      ? domAnchor\n      : ReactEditor.toDOMPoint(editor, focus)\n\n    const window = ReactEditor.getWindow(editor)\n    const domRange = window.document.createRange()\n    const [startNode, startOffset] = isBackward ? domFocus : domAnchor\n    const [endNode, endOffset] = isBackward ? domAnchor : domFocus\n\n    // A slate Point at zero-width Leaf always has an offset of 0 but a native DOM selection at\n    // zero-width node has an offset of 1 so we have to check if we are in a zero-width node and\n    // adjust the offset accordingly.\n    const startEl = (isDOMElement(startNode)\n      ? startNode\n      : startNode.parentElement) as HTMLElement\n    const isStartAtZeroWidth = !!startEl.getAttribute('data-slate-zero-width')\n    const endEl = (isDOMElement(endNode)\n      ? endNode\n      : endNode.parentElement) as HTMLElement\n    const isEndAtZeroWidth = !!endEl.getAttribute('data-slate-zero-width')\n\n    domRange.setStart(startNode, isStartAtZeroWidth ? 1 : startOffset)\n    domRange.setEnd(endNode, isEndAtZeroWidth ? 1 : endOffset)\n    return domRange\n  },\n\n  /**\n   * Find a Slate node from a native DOM `element`.\n   */\n\n  toSlateNode(editor: ReactEditor, domNode: DOMNode): Node {\n    let domEl = isDOMElement(domNode) ? domNode : domNode.parentElement\n\n    if (domEl && !domEl.hasAttribute('data-slate-node')) {\n      domEl = domEl.closest(`[data-slate-node]`)\n    }\n\n    const node = domEl ? ELEMENT_TO_NODE.get(domEl as HTMLElement) : null\n\n    if (!node) {\n      throw new Error(`Cannot resolve a Slate node from DOM node: ${domEl}`)\n    }\n\n    return node\n  },\n\n  /**\n   * Get the target range from a DOM `event`.\n   */\n\n  findEventRange(editor: ReactEditor, event: any): Range {\n    if ('nativeEvent' in event) {\n      event = event.nativeEvent\n    }\n\n    const { clientX: x, clientY: y, target } = event\n\n    if (x == null || y == null) {\n      throw new Error(`Cannot resolve a Slate range from a DOM event: ${event}`)\n    }\n\n    const node = ReactEditor.toSlateNode(editor, event.target)\n    const path = ReactEditor.findPath(editor, node)\n\n    // If the drop target is inside a void node, move it into either the\n    // next or previous node, depending on which side the `x` and `y`\n    // coordinates are closest to.\n    if (Editor.isVoid(editor, node)) {\n      const rect = target.getBoundingClientRect()\n      const isPrev = editor.isInline(node)\n        ? x - rect.left < rect.left + rect.width - x\n        : y - rect.top < rect.top + rect.height - y\n\n      const edge = Editor.point(editor, path, {\n        edge: isPrev ? 'start' : 'end',\n      })\n      const point = isPrev\n        ? Editor.before(editor, edge)\n        : Editor.after(editor, edge)\n\n      if (point) {\n        const range = Editor.range(editor, point)\n        return range\n      }\n    }\n\n    // Else resolve a range from the caret position where the drop occured.\n    let domRange\n    const { document } = ReactEditor.getWindow(editor)\n\n    // COMPAT: In Firefox, `caretRangeFromPoint` doesn't exist. (2016/07/25)\n    if (document.caretRangeFromPoint) {\n      domRange = document.caretRangeFromPoint(x, y)\n    } else {\n      const position = document.caretPositionFromPoint(x, y)\n\n      if (position) {\n        domRange = document.createRange()\n        domRange.setStart(position.offsetNode, position.offset)\n        domRange.setEnd(position.offsetNode, position.offset)\n      }\n    }\n\n    if (!domRange) {\n      throw new Error(`Cannot resolve a Slate range from a DOM event: ${event}`)\n    }\n\n    // Resolve a Slate range from the DOM range.\n    const range = ReactEditor.toSlateRange(editor, domRange, {\n      exactMatch: false,\n      suppressThrow: false,\n    })\n    return range\n  },\n\n  /**\n   * Find a Slate point from a DOM selection's `domNode` and `domOffset`.\n   */\n\n  toSlatePoint<T extends boolean>(\n    editor: ReactEditor,\n    domPoint: DOMPoint,\n    options: {\n      exactMatch: T\n      suppressThrow: T\n    }\n  ): T extends true ? Point | null : Point {\n    const { exactMatch, suppressThrow } = options\n    const [nearestNode, nearestOffset] = exactMatch\n      ? domPoint\n      : normalizeDOMPoint(domPoint)\n    const parentNode = nearestNode.parentNode as DOMElement\n    let textNode: DOMElement | null = null\n    let offset = 0\n\n    if (parentNode) {\n      const voidNode = parentNode.closest('[data-slate-void=\"true\"]')\n      let leafNode = parentNode.closest('[data-slate-leaf]')\n      let domNode: DOMElement | null = null\n\n      // Calculate how far into the text node the `nearestNode` is, so that we\n      // can determine what the offset relative to the text node is.\n      if (leafNode) {\n        textNode = leafNode.closest('[data-slate-node=\"text\"]')!\n        const window = ReactEditor.getWindow(editor)\n        const range = window.document.createRange()\n        range.setStart(textNode, 0)\n        range.setEnd(nearestNode, nearestOffset)\n\n        const contents = range.cloneContents()\n        const removals = [\n          ...Array.prototype.slice.call(\n            contents.querySelectorAll('[data-slate-zero-width]')\n          ),\n          ...Array.prototype.slice.call(\n            contents.querySelectorAll('[contenteditable=false]')\n          ),\n        ]\n\n        removals.forEach(el => {\n          el!.parentNode!.removeChild(el)\n        })\n\n        // COMPAT: Edge has a bug where Range.prototype.toString() will\n        // convert \\n into \\r\\n. The bug causes a loop when slate-react\n        // attempts to reposition its cursor to match the native position. Use\n        // textContent.length instead.\n        // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/10291116/\n        offset = contents.textContent!.length\n        domNode = textNode\n      } else if (voidNode) {\n        // For void nodes, the element with the offset key will be a cousin, not an\n        // ancestor, so find it by going down from the nearest void parent.\n        leafNode = voidNode.querySelector('[data-slate-leaf]')!\n\n        // COMPAT: In read-only editors the leaf is not rendered.\n        if (!leafNode) {\n          offset = 1\n        } else {\n          textNode = leafNode.closest('[data-slate-node=\"text\"]')!\n          domNode = leafNode\n          offset = domNode.textContent!.length\n          domNode.querySelectorAll('[data-slate-zero-width]').forEach(el => {\n            offset -= el.textContent!.length\n          })\n        }\n      }\n\n      if (\n        domNode &&\n        offset === domNode.textContent!.length &&\n        // COMPAT: If the parent node is a Slate zero-width space, editor is\n        // because the text node should have no characters. However, during IME\n        // composition the ASCII characters will be prepended to the zero-width\n        // space, so subtract 1 from the offset to account for the zero-width\n        // space character.\n        (parentNode.hasAttribute('data-slate-zero-width') ||\n          // COMPAT: In Firefox, `range.cloneContents()` returns an extra trailing '\\n'\n          // when the document ends with a new-line character. This results in the offset\n          // length being off by one, so we need to subtract one to account for this.\n          (IS_FIREFOX && domNode.textContent?.endsWith('\\n\\n')))\n      ) {\n        offset--\n      }\n    }\n\n    if (!textNode) {\n      if (suppressThrow) {\n        return null as T extends true ? Point | null : Point\n      }\n      throw new Error(\n        `Cannot resolve a Slate point from DOM point: ${domPoint}`\n      )\n    }\n\n    // COMPAT: If someone is clicking from one Slate editor into another,\n    // the select event fires twice, once for the old editor's `element`\n    // first, and then afterwards for the correct `element`. (2017/03/03)\n    const slateNode = ReactEditor.toSlateNode(editor, textNode!)\n    const path = ReactEditor.findPath(editor, slateNode)\n    return { path, offset } as T extends true ? Point | null : Point\n  },\n\n  /**\n   * Find a Slate range from a DOM range or selection.\n   */\n\n  toSlateRange<T extends boolean>(\n    editor: ReactEditor,\n    domRange: DOMRange | DOMStaticRange | DOMSelection,\n    options: {\n      exactMatch: T\n      suppressThrow: T\n    }\n  ): T extends true ? Range | null : Range {\n    const { exactMatch, suppressThrow } = options\n    const el = isDOMSelection(domRange)\n      ? domRange.anchorNode\n      : domRange.startContainer\n    let anchorNode\n    let anchorOffset\n    let focusNode\n    let focusOffset\n    let isCollapsed\n\n    if (el) {\n      if (isDOMSelection(domRange)) {\n        anchorNode = domRange.anchorNode\n        anchorOffset = domRange.anchorOffset\n        focusNode = domRange.focusNode\n        focusOffset = domRange.focusOffset\n        // COMPAT: There's a bug in chrome that always returns `true` for\n        // `isCollapsed` for a Selection that comes from a ShadowRoot.\n        // (2020/08/08)\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=447523\n        if (IS_CHROME && hasShadowRoot()) {\n          isCollapsed =\n            domRange.anchorNode === domRange.focusNode &&\n            domRange.anchorOffset === domRange.focusOffset\n        } else {\n          isCollapsed = domRange.isCollapsed\n        }\n      } else {\n        anchorNode = domRange.startContainer\n        anchorOffset = domRange.startOffset\n        focusNode = domRange.endContainer\n        focusOffset = domRange.endOffset\n        isCollapsed = domRange.collapsed\n      }\n    }\n\n    if (\n      anchorNode == null ||\n      focusNode == null ||\n      anchorOffset == null ||\n      focusOffset == null\n    ) {\n      throw new Error(\n        `Cannot resolve a Slate range from DOM range: ${domRange}`\n      )\n    }\n\n    const anchor = ReactEditor.toSlatePoint(\n      editor,\n      [anchorNode, anchorOffset],\n      { exactMatch, suppressThrow }\n    )\n    if (!anchor) {\n      return null as T extends true ? Range | null : Range\n    }\n\n    const focus = isCollapsed\n      ? anchor\n      : ReactEditor.toSlatePoint(editor, [focusNode, focusOffset], {\n          exactMatch,\n          suppressThrow,\n        })\n    if (!focus) {\n      return null as T extends true ? Range | null : Range\n    }\n\n    let range: Range = { anchor: anchor as Point, focus: focus as Point }\n    // if the selection is a hanging range that ends in a void\n    // and the DOM focus is an Element\n    // (meaning that the selection ends before the element)\n    // unhang the range to avoid mistakenly including the void\n    if (\n      Range.isExpanded(range) &&\n      Range.isForward(range) &&\n      isDOMElement(focusNode) &&\n      Editor.void(editor, { at: range.focus, mode: 'highest' })\n    ) {\n      range = Editor.unhangRange(editor, range, { voids: true })\n    }\n\n    return (range as unknown) as T extends true ? Range | null : Range\n  },\n\n  hasRange(editor: ReactEditor, range: Range): boolean {\n    const { anchor, focus } = range\n    return (\n      Editor.hasPath(editor, anchor.path) && Editor.hasPath(editor, focus.path)\n    )\n  },\n}\n","import { Editor, Path, Range, Text } from 'slate'\n\nimport { ReactEditor } from '../../'\nimport { DOMNode } from '../../utils/dom'\n\nexport type Diff = {\n  start: number\n  end: number\n  insertText: string\n  removeText: string\n}\n\nexport interface TextInsertion {\n  text: Diff\n  path: Path\n}\n\ntype TextRange = {\n  start: number\n  end: number\n}\n\n/**\n * Returns the number of characters that are the same at the beginning of the\n * String.\n *\n * @param prev  the previous text\n * @param next  the next text\n * @returns the offset of the start of the difference; null if there is no difference\n */\nfunction getDiffStart(prev: string, next: string): number | null {\n  const length = Math.min(prev.length, next.length)\n\n  for (let i = 0; i < length; i++) {\n    if (prev.charAt(i) !== next.charAt(i)) return i\n  }\n\n  if (prev.length !== next.length) return length\n  return null\n}\n\n/**\n * Returns the number of characters that are the same at the end of the String\n * up to `max`. Max prevents double-counting characters when there are\n * multiple duplicate characters around the diff area.\n *\n * @param prev  the previous text\n * @param next  the next text\n * @param max  the max length to test.\n * @returns number of characters that are the same at the end of the string\n */\nfunction getDiffEnd(prev: string, next: string, max: number): number | null {\n  const prevLength = prev.length\n  const nextLength = next.length\n  const length = Math.min(prevLength, nextLength, max)\n\n  for (let i = 0; i < length; i++) {\n    const prevChar = prev.charAt(prevLength - i - 1)\n    const nextChar = next.charAt(nextLength - i - 1)\n    if (prevChar !== nextChar) return i\n  }\n\n  if (prev.length !== next.length) return length\n  return null\n}\n\n/**\n * Takes two strings and returns an object representing two offsets. The\n * first, `start` represents the number of characters that are the same at\n * the front of the String. The `end` represents the number of characters\n * that are the same at the end of the String.\n *\n * Returns null if they are identical.\n *\n * @param prev  the previous text\n * @param next  the next text\n * @returns the difference text range; null if there are no differences.\n */\nfunction getDiffOffsets(prev: string, next: string): TextRange | null {\n  if (prev === next) return null\n  const start = getDiffStart(prev, next)\n  if (start === null) return null\n  const maxEnd = Math.min(prev.length - start, next.length - start)\n  const end = getDiffEnd(prev, next, maxEnd)!\n  if (end === null) return null\n  return { start, end }\n}\n\n/**\n * Takes a text string and returns a slice from the string at the given text range\n *\n * @param text  the text\n * @param offsets  the text range\n * @returns the text slice at text range\n */\nfunction sliceText(text: string, offsets: TextRange): string {\n  return text.slice(offsets.start, text.length - offsets.end)\n}\n\n/**\n * Takes two strings and returns a smart diff that can be used to describe the\n * change in a way that can be used as operations like inserting, removing or\n * replacing text.\n *\n * @param prev the previous text\n * @param next the next text\n * @returns the text difference\n */\nexport function diffText(prev?: string, next?: string): Diff | null {\n  if (prev === undefined || next === undefined) return null\n  const offsets = getDiffOffsets(prev, next)\n  if (offsets == null) return null\n  const insertText = sliceText(next, offsets)\n  const removeText = sliceText(prev, offsets)\n  return {\n    start: offsets.start,\n    end: prev.length - offsets.end,\n    insertText,\n    removeText,\n  }\n}\n\nexport function combineInsertedText(insertedText: TextInsertion[]): string {\n  return insertedText.reduce((acc, { text }) => `${acc}${text.insertText}`, '')\n}\n\nexport function getTextInsertion<T extends Editor>(\n  editor: T,\n  domNode: DOMNode\n): TextInsertion | undefined {\n  const node = ReactEditor.toSlateNode(editor, domNode)\n\n  if (!Text.isText(node)) {\n    return undefined\n  }\n\n  const prevText = node.text\n  let nextText = domNode.textContent!\n\n  // textContent will pad an extra \\n when the textContent ends with an \\n\n  if (nextText.endsWith('\\n')) {\n    nextText = nextText.slice(0, nextText.length - 1)\n  }\n\n  // If the text is no different, there is no diff.\n  if (nextText !== prevText) {\n    const textDiff = diffText(prevText, nextText)\n    if (textDiff !== null) {\n      const textPath = ReactEditor.findPath(editor, node)\n\n      return {\n        text: textDiff,\n        path: textPath,\n      }\n    }\n  }\n\n  return undefined\n}\n\nexport function normalizeTextInsertionRange(\n  editor: Editor,\n  range: Range | null,\n  { path, text }: TextInsertion\n) {\n  const insertionRange = {\n    anchor: { path, offset: text.start },\n    focus: { path, offset: text.end },\n  }\n\n  if (!range || !Range.isCollapsed(range)) {\n    return insertionRange\n  }\n\n  const { insertText, removeText } = text\n  const isSingleCharacterInsertion =\n    insertText.length === 1 || removeText.length === 1\n\n  /**\n   * This code handles edge cases that arise from text diffing when the\n   * inserted or removed character is a single character, and the character\n   * right before or after the anchor is the same as the one being inserted or\n   * removed.\n   *\n   * Take this example: hello|o\n   *\n   * If another `o` is inserted at the selection's anchor in the example above,\n   * it should be inserted at the anchor, but using text diffing, we actually\n   * detect that the character was inserted after the second `o`:\n   *\n   * helloo[o]|\n   *\n   * Instead, in these very specific edge cases, we assume that the character\n   * needs to be inserted after the anchor rather than where the diff was found:\n   *\n   * hello[o]|o\n   */\n  if (isSingleCharacterInsertion && Path.equals(range.anchor.path, path)) {\n    const [text] = Array.from(\n      Editor.nodes(editor, { at: range, match: Text.isText })\n    )\n\n    if (text) {\n      const [node] = text\n      const { anchor } = range\n      const characterBeforeAnchor = node.text[anchor.offset - 1]\n      const characterAfterAnchor = node.text[anchor.offset]\n\n      if (insertText.length === 1 && insertText === characterAfterAnchor) {\n        // Assume text should be inserted at the anchor\n        return range\n      }\n\n      if (removeText.length === 1 && removeText === characterBeforeAnchor) {\n        // Assume text should be removed right before the anchor\n        return {\n          anchor: { path, offset: anchor.offset - 1 },\n          focus: { path, offset: anchor.offset },\n        }\n      }\n    }\n  }\n\n  return insertionRange\n}\n","import { Editor, Node, Path, Range } from 'slate'\n\nimport { DOMNode } from '../../utils/dom'\nimport { ReactEditor } from '../..'\nimport { TextInsertion, getTextInsertion } from './diff-text'\n\ninterface MutationData {\n  addedNodes: DOMNode[]\n  removedNodes: DOMNode[]\n  insertedText: TextInsertion[]\n  characterDataMutations: MutationRecord[]\n}\n\ntype MutationDetection = (editor: Editor, mutationData: MutationData) => boolean\n\nexport function gatherMutationData(\n  editor: Editor,\n  mutations: MutationRecord[]\n): MutationData {\n  const addedNodes: DOMNode[] = []\n  const removedNodes: DOMNode[] = []\n  const insertedText: TextInsertion[] = []\n  const characterDataMutations: MutationRecord[] = []\n\n  mutations.forEach(mutation => {\n    switch (mutation.type) {\n      case 'childList': {\n        if (mutation.addedNodes.length) {\n          mutation.addedNodes.forEach(addedNode => {\n            addedNodes.push(addedNode)\n          })\n        }\n\n        mutation.removedNodes.forEach(removedNode => {\n          removedNodes.push(removedNode)\n        })\n\n        break\n      }\n      case 'characterData': {\n        characterDataMutations.push(mutation)\n\n        // Changes to text nodes should consider the parent element\n        const { parentNode } = mutation.target\n\n        if (!parentNode) {\n          return\n        }\n\n        const textInsertion = getTextInsertion(editor, parentNode)\n\n        if (!textInsertion) {\n          return\n        }\n\n        // If we've already detected a diff at that path, we can return early\n        if (\n          insertedText.some(({ path }) => Path.equals(path, textInsertion.path))\n        ) {\n          return\n        }\n\n        // Add the text diff to the array of detected text insertions that need to be reconciled\n        insertedText.push(textInsertion)\n      }\n    }\n  })\n\n  return { addedNodes, removedNodes, insertedText, characterDataMutations }\n}\n\n/**\n * In general, when a line break occurs, there will be more `addedNodes` than `removedNodes`.\n *\n * This isn't always the case however. In some cases, there will be more `removedNodes` than\n * `addedNodes`.\n *\n * To account for these edge cases, the most reliable strategy to detect line break mutations\n * is to check whether a new block was inserted of the same type as the current block.\n */\nexport const isLineBreak: MutationDetection = (editor, { addedNodes }) => {\n  const { selection } = editor\n  const parentNode = selection\n    ? Node.parent(editor, selection.anchor.path)\n    : null\n  const parentDOMNode = parentNode\n    ? ReactEditor.toDOMNode(editor, parentNode)\n    : null\n\n  if (!parentDOMNode) {\n    return false\n  }\n\n  return addedNodes.some(\n    addedNode =>\n      addedNode instanceof HTMLElement &&\n      addedNode.tagName === parentDOMNode?.tagName\n  )\n}\n\n/**\n * So long as we check for line break mutations before deletion mutations,\n * we can safely assume that a set of mutations was a deletion if there are\n * removed nodes.\n */\nexport const isDeletion: MutationDetection = (_, { removedNodes }) => {\n  return removedNodes.length > 0\n}\n\n/**\n * If the selection was expanded and there are removed nodes,\n * the contents of the selection need to be replaced with the diff\n */\nexport const isReplaceExpandedSelection: MutationDetection = (\n  { selection },\n  { removedNodes }\n) => {\n  return selection\n    ? Range.isExpanded(selection) && removedNodes.length > 0\n    : false\n}\n\n/**\n * Plain text insertion\n */\nexport const isTextInsertion: MutationDetection = (_, { insertedText }) => {\n  return insertedText.length > 0\n}\n\n/**\n * Edge case. Detect mutations that remove leaf nodes and also update character data\n */\nexport const isRemoveLeafNodes: MutationDetection = (\n  _,\n  { addedNodes, characterDataMutations, removedNodes }\n) => {\n  return (\n    removedNodes.length > 0 &&\n    addedNodes.length === 0 &&\n    characterDataMutations.length > 0\n  )\n}\n","import { ReactEditor } from '../..'\nimport { EDITOR_TO_RESTORE_DOM } from '../../utils/weak-maps'\n\nexport function restoreDOM(editor: ReactEditor) {\n  try {\n    const onRestoreDOM = EDITOR_TO_RESTORE_DOM.get(editor)\n    if (onRestoreDOM) {\n      onRestoreDOM()\n    }\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err)\n  }\n}\n","import { ReactEditor } from '../../plugin/react-editor'\nimport { Editor, Range, Transforms, Text } from 'slate'\n\nimport { DOMNode } from '../../utils/dom'\n\nimport {\n  normalizeTextInsertionRange,\n  combineInsertedText,\n  TextInsertion,\n} from './diff-text'\nimport {\n  gatherMutationData,\n  isDeletion,\n  isLineBreak,\n  isRemoveLeafNodes,\n  isReplaceExpandedSelection,\n  isTextInsertion,\n} from './mutation-detection'\nimport { restoreDOM } from './restore-dom'\n\n// Replace with `const debug = console.log` to debug\nconst debug = (...message: any[]) => {}\n\n/**\n * Based loosely on:\n *\n * https://github.com/facebook/draft-js/blob/master/src/component/handlers/composition/DOMObserver.js\n * https://github.com/ProseMirror/prosemirror-view/blob/master/src/domobserver.js\n *\n * The input manager attempts to map observed mutations on the document to a\n * set of operations in order to reconcile Slate's internal value with the DOM.\n *\n * Mutations are processed synchronously as they come in. Only mutations that occur\n * during a user input loop are processed, as other mutations can occur within the\n * document that were not initiated by user input.\n *\n * The mutation reconciliation process attempts to match mutations to the following\n * patterns:\n *\n * - Text updates\n * - Deletions\n * - Line breaks\n *\n * @param editor\n */\n\nexport class AndroidInputManager {\n  constructor(private editor: ReactEditor) {\n    this.editor = editor\n  }\n\n  /**\n   * Handle MutationObserver flush\n   *\n   * @param mutations\n   */\n\n  flush = (mutations: MutationRecord[]) => {\n    debug('flush')\n\n    try {\n      this.reconcileMutations(mutations)\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err)\n\n      // Failed to reconcile mutations, restore DOM to its previous state\n      restoreDOM(this.editor)\n    }\n  }\n\n  /**\n   * Reconcile a batch of mutations\n   *\n   * @param mutations\n   */\n\n  private reconcileMutations = (mutations: MutationRecord[]) => {\n    const mutationData = gatherMutationData(this.editor, mutations)\n    const { insertedText, removedNodes } = mutationData\n\n    debug('processMutations', mutations, mutationData)\n\n    if (isReplaceExpandedSelection(this.editor, mutationData)) {\n      const text = combineInsertedText(insertedText)\n      this.replaceExpandedSelection(text)\n    } else if (isLineBreak(this.editor, mutationData)) {\n      this.insertBreak()\n    } else if (isRemoveLeafNodes(this.editor, mutationData)) {\n      this.removeLeafNodes(removedNodes)\n    } else if (isDeletion(this.editor, mutationData)) {\n      this.deleteBackward()\n    } else if (isTextInsertion(this.editor, mutationData)) {\n      this.insertText(insertedText)\n    }\n  }\n\n  /**\n   * Apply text diff\n   */\n\n  private insertText = (insertedText: TextInsertion[]) => {\n    debug('insertText')\n\n    const { selection, marks } = this.editor\n\n    // Insert the batched text diffs\n    insertedText.forEach(insertion => {\n      const text = insertion.text.insertText\n      const at = normalizeTextInsertionRange(this.editor, selection, insertion)\n      if (marks) {\n        const node = { text, ...marks }\n        Transforms.insertNodes(this.editor, node, {\n          match: Text.isText,\n          at,\n          select: true,\n        })\n        this.editor.marks = null\n      } else {\n        Transforms.insertText(this.editor, text, {\n          at,\n        })\n      }\n    })\n  }\n\n  /**\n   * Handle line breaks\n   */\n\n  private insertBreak = () => {\n    debug('insertBreak')\n\n    const { selection } = this.editor\n\n    Editor.insertBreak(this.editor)\n\n    // To-do: Need a more granular solution to restoring only a specific portion\n    // of the document. Restoring the entire document is expensive.\n    restoreDOM(this.editor)\n\n    if (selection) {\n      // Compat: Move selection to the newly inserted block if it has not moved\n      setTimeout(() => {\n        if (\n          this.editor.selection &&\n          Range.equals(selection, this.editor.selection)\n        ) {\n          Transforms.move(this.editor)\n        }\n      }, 100)\n    }\n  }\n\n  /**\n   * Handle expanded selection being deleted or replaced by text\n   */\n\n  private replaceExpandedSelection = (text: string) => {\n    debug('replaceExpandedSelection')\n\n    // Delete expanded selection\n    Editor.deleteFragment(this.editor)\n\n    if (text.length) {\n      // Selection was replaced by text, insert the entire text diff\n      Editor.insertText(this.editor, text)\n    }\n\n    restoreDOM(this.editor)\n  }\n\n  /**\n   * Handle `backspace` that merges blocks\n   */\n\n  private deleteBackward = () => {\n    debug('deleteBackward')\n\n    Editor.deleteBackward(this.editor)\n    ReactEditor.focus(this.editor)\n\n    restoreDOM(this.editor)\n  }\n\n  /**\n   * Handle mutations that remove specific leaves\n   */\n  private removeLeafNodes = (nodes: DOMNode[]) => {\n    for (const node of nodes) {\n      const slateNode = ReactEditor.toSlateNode(this.editor, node)\n\n      if (slateNode) {\n        const path = ReactEditor.findPath(this.editor, slateNode)\n\n        Transforms.delete(this.editor, { at: path })\n        restoreDOM(this.editor)\n      }\n    }\n  }\n}\n\nexport default AndroidInputManager\n","import { RefObject, useEffect, useState } from 'react'\nimport { useIsomorphicLayoutEffect } from '../../hooks/use-isomorphic-layout-effect'\n\nexport function useMutationObserver(\n  node: RefObject<HTMLElement>,\n  callback: MutationCallback,\n  options: MutationObserverInit\n) {\n  const [mutationObserver] = useState(() => new MutationObserver(callback))\n\n  useIsomorphicLayoutEffect(() => {\n    // Disconnect mutation observer during render phase\n    mutationObserver.disconnect()\n  })\n\n  useEffect(() => {\n    if (!node.current) {\n      throw new Error('Failed to attach MutationObserver, `node` is undefined')\n    }\n\n    // Attach mutation observer after render phase has finished\n    mutationObserver.observe(node.current, options)\n\n    // Clean up after effect\n    return mutationObserver.disconnect.bind(mutationObserver)\n  })\n}\n","import { useCallback, useEffect, useRef } from 'react'\n\nimport { ReactEditor } from '../..'\nimport { useSlateStatic } from '../../hooks/use-slate-static'\n\nexport function useTrackUserInput() {\n  const editor = useSlateStatic()\n  const receivedUserInput = useRef<boolean>(false)\n  const animationFrameRef = useRef<number | null>(null)\n  const onUserInput = useCallback(() => {\n    if (receivedUserInput.current === false) {\n      const window = ReactEditor.getWindow(editor)\n\n      receivedUserInput.current = true\n\n      if (animationFrameRef.current) {\n        window.cancelAnimationFrame(animationFrameRef.current)\n      }\n\n      animationFrameRef.current = window.requestAnimationFrame(() => {\n        receivedUserInput.current = false\n        animationFrameRef.current = null\n      })\n    }\n  }, [])\n\n  useEffect(() => {\n    // Reset user input tracking on every render\n    if (receivedUserInput.current) {\n      receivedUserInput.current = false\n    }\n  })\n\n  return {\n    receivedUserInput,\n    onUserInput,\n  }\n}\n","import { RefObject, useCallback, useRef, useState } from 'react'\n\nimport { useSlateStatic } from '../../hooks/use-slate-static'\n\nimport { AndroidInputManager } from './android-input-manager'\nimport { useMutationObserver } from './use-mutation-observer'\nimport { useTrackUserInput } from './use-track-user-input'\n\nconst MUTATION_OBSERVER_CONFIG: MutationObserverInit = {\n  childList: true,\n  characterData: true,\n  characterDataOldValue: true,\n  subtree: true,\n}\n\nexport function useAndroidInputManager(node: RefObject<HTMLElement>) {\n  const editor = useSlateStatic()\n  const [inputManager] = useState(() => new AndroidInputManager(editor))\n  const { receivedUserInput, onUserInput } = useTrackUserInput()\n  const timeoutId = useRef<ReturnType<typeof setTimeout> | null>(null)\n  const isReconciling = useRef(false)\n  const flush = useCallback((mutations: MutationRecord[]) => {\n    if (!receivedUserInput.current) {\n      return\n    }\n\n    isReconciling.current = true\n    inputManager.flush(mutations)\n\n    if (timeoutId.current) {\n      clearTimeout(timeoutId.current)\n    }\n\n    timeoutId.current = setTimeout(() => {\n      isReconciling.current = false\n      timeoutId.current = null\n    }, 250)\n  }, [])\n\n  useMutationObserver(node, flush, MUTATION_OBSERVER_CONFIG)\n\n  return {\n    isReconciling,\n    onUserInput,\n  }\n}\n","import React, { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { Descendant, Editor, Element, Node, Range, Transforms } from 'slate'\nimport throttle from 'lodash/throttle'\nimport scrollIntoView from 'scroll-into-view-if-needed'\n\nimport { DefaultPlaceholder, ReactEditor } from '../..'\nimport { ReadOnlyContext } from '../../hooks/use-read-only'\nimport { useSlate } from '../../hooks/use-slate'\nimport { useIsomorphicLayoutEffect } from '../../hooks/use-isomorphic-layout-effect'\nimport { DecorateContext } from '../../hooks/use-decorate'\nimport {\n  DOMElement,\n  isDOMElement,\n  isDOMNode,\n  getDefaultView,\n  getClipboardData,\n  isPlainTextOnlyPaste,\n} from '../../utils/dom'\nimport {\n  EDITOR_TO_ELEMENT,\n  EDITOR_TO_RESTORE_DOM,\n  EDITOR_TO_WINDOW,\n  ELEMENT_TO_NODE,\n  IS_FOCUSED,\n  IS_READ_ONLY,\n  NODE_TO_ELEMENT,\n  PLACEHOLDER_SYMBOL,\n} from '../../utils/weak-maps'\nimport { EditableProps } from '../editable'\nimport useChildren from '../../hooks/use-children'\nimport {\n  defaultDecorate,\n  hasEditableTarget,\n  isEventHandled,\n  isDOMEventHandled,\n  isTargetInsideVoid,\n} from '../editable'\n\nimport { useAndroidInputManager } from './use-android-input-manager'\n\n/**\n * Editable.\n */\n\nexport const AndroidEditable = (props: EditableProps): JSX.Element => {\n  const {\n    autoFocus,\n    decorate = defaultDecorate,\n    onDOMBeforeInput: propsOnDOMBeforeInput,\n    placeholder,\n    readOnly = false,\n    renderElement,\n    renderLeaf,\n    renderPlaceholder = props => <DefaultPlaceholder {...props} />,\n    style = {},\n    as: Component = 'div',\n    ...attributes\n  } = props\n  const editor = useSlate()\n  const ref = useRef<HTMLDivElement>(null)\n  const inputManager = useAndroidInputManager(ref)\n\n  // Update internal state on each render.\n  IS_READ_ONLY.set(editor, readOnly)\n\n  // Keep track of some state for the event handler logic.\n  const state = useMemo(\n    () => ({\n      isUpdatingSelection: false,\n      latestElement: null as DOMElement | null,\n    }),\n    []\n  )\n\n  const [contentKey, setContentKey] = useState(0)\n  const onRestoreDOM = useCallback(() => {\n    setContentKey(prev => prev + 1)\n  }, [contentKey])\n\n  // Whenever the editor updates...\n  useIsomorphicLayoutEffect(() => {\n    // Update element-related weak maps with the DOM element ref.\n    let window\n\n    if (ref.current && (window = getDefaultView(ref.current))) {\n      EDITOR_TO_WINDOW.set(editor, window)\n      EDITOR_TO_ELEMENT.set(editor, ref.current)\n      NODE_TO_ELEMENT.set(editor, ref.current)\n      ELEMENT_TO_NODE.set(ref.current, editor)\n      EDITOR_TO_RESTORE_DOM.set(editor, onRestoreDOM)\n    } else {\n      NODE_TO_ELEMENT.delete(editor)\n      EDITOR_TO_RESTORE_DOM.delete(editor)\n    }\n\n    try {\n      // Make sure the DOM selection state is in sync.\n      const { selection } = editor\n      const root = ReactEditor.findDocumentOrShadowRoot(editor)\n      const domSelection = root.getSelection()\n\n      if (!domSelection || !ReactEditor.isFocused(editor)) {\n        return\n      }\n\n      const hasDomSelection = domSelection.type !== 'None'\n\n      // If the DOM selection is properly unset, we're done.\n      if (!selection && !hasDomSelection) {\n        return\n      }\n\n      // verify that the dom selection is in the editor\n      const editorElement = EDITOR_TO_ELEMENT.get(editor)!\n      let hasDomSelectionInEditor = false\n      if (\n        editorElement.contains(domSelection.anchorNode) &&\n        editorElement.contains(domSelection.focusNode)\n      ) {\n        hasDomSelectionInEditor = true\n      }\n\n      // If the DOM selection is in the editor and the editor selection is already correct, we're done.\n      if (hasDomSelection && hasDomSelectionInEditor && selection) {\n        const slateRange = ReactEditor.toSlateRange(editor, domSelection, {\n          exactMatch: true,\n          suppressThrow: true,\n        })\n        if (slateRange && Range.equals(slateRange, selection)) {\n          return\n        }\n      }\n\n      // when <Editable/> is being controlled through external value\n      // then its children might just change - DOM responds to it on its own\n      // but Slate's value is not being updated through any operation\n      // and thus it doesn't transform selection on its own\n      if (selection && !ReactEditor.hasRange(editor, selection)) {\n        editor.selection = ReactEditor.toSlateRange(editor, domSelection, {\n          exactMatch: false,\n          suppressThrow: false,\n        })\n        return\n      }\n\n      // Otherwise the DOM selection is out of sync, so update it.\n      const el = ReactEditor.toDOMNode(editor, editor)\n      state.isUpdatingSelection = true\n\n      const newDomRange = selection && ReactEditor.toDOMRange(editor, selection)\n\n      if (newDomRange) {\n        if (Range.isBackward(selection!)) {\n          domSelection.setBaseAndExtent(\n            newDomRange.endContainer,\n            newDomRange.endOffset,\n            newDomRange.startContainer,\n            newDomRange.startOffset\n          )\n        } else {\n          domSelection.setBaseAndExtent(\n            newDomRange.startContainer,\n            newDomRange.startOffset,\n            newDomRange.endContainer,\n            newDomRange.endOffset\n          )\n        }\n        const leafEl = newDomRange.startContainer.parentElement!\n        leafEl.getBoundingClientRect = newDomRange.getBoundingClientRect.bind(\n          newDomRange\n        )\n        scrollIntoView(leafEl, {\n          scrollMode: 'if-needed',\n          boundary: el,\n        })\n        // @ts-ignore\n        delete leafEl.getBoundingClientRect\n      } else {\n        domSelection.removeAllRanges()\n      }\n\n      setTimeout(() => {\n        state.isUpdatingSelection = false\n      })\n    } catch {\n      // Failed to update selection, likely due to reconciliation error\n      state.isUpdatingSelection = false\n    }\n  })\n\n  // The autoFocus TextareaHTMLAttribute doesn't do anything on a div, so it\n  // needs to be manually focused.\n  useEffect(() => {\n    if (ref.current && autoFocus) {\n      ref.current.focus()\n    }\n  }, [autoFocus])\n\n  // Listen on the native `beforeinput` event to get real \"Level 2\" events. This\n  // is required because React's `beforeinput` is fake and never really attaches\n  // to the real event sadly. (2019/11/01)\n  // https://github.com/facebook/react/issues/11211\n  const onDOMBeforeInput = useCallback(\n    (event: InputEvent) => {\n      if (\n        !readOnly &&\n        hasEditableTarget(editor, event.target) &&\n        !isDOMEventHandled(event, propsOnDOMBeforeInput)\n      ) {\n        inputManager.onUserInput()\n      }\n    },\n    [readOnly, propsOnDOMBeforeInput]\n  )\n\n  // Attach a native DOM event handler for `beforeinput` events, because React's\n  // built-in `onBeforeInput` is actually a leaky polyfill that doesn't expose\n  // real `beforeinput` events sadly... (2019/11/04)\n  useIsomorphicLayoutEffect(() => {\n    const node = ref.current\n\n    // @ts-ignore The `beforeinput` event isn't recognized.\n    node?.addEventListener('beforeinput', onDOMBeforeInput)\n\n    // @ts-ignore The `beforeinput` event isn't recognized.\n    return () => node?.removeEventListener('beforeinput', onDOMBeforeInput)\n  }, [contentKey, propsOnDOMBeforeInput])\n\n  // Listen on the native `selectionchange` event to be able to update any time\n  // the selection changes. This is required because React's `onSelect` is leaky\n  // and non-standard so it doesn't fire until after a selection has been\n  // released. This causes issues in situations where another change happens\n  // while a selection is being dragged.\n  const onDOMSelectionChange = useCallback(\n    throttle(() => {\n      try {\n        if (!state.isUpdatingSelection && !inputManager.isReconciling.current) {\n          const root = ReactEditor.findDocumentOrShadowRoot(editor)\n          const { activeElement } = root\n          const el = ReactEditor.toDOMNode(editor, editor)\n          const domSelection = root.getSelection()\n\n          if (activeElement === el) {\n            state.latestElement = activeElement\n            IS_FOCUSED.set(editor, true)\n          } else {\n            IS_FOCUSED.delete(editor)\n          }\n\n          if (!domSelection) {\n            return Transforms.deselect(editor)\n          }\n\n          const { anchorNode, focusNode } = domSelection\n\n          const anchorNodeSelectable =\n            hasEditableTarget(editor, anchorNode) ||\n            isTargetInsideVoid(editor, anchorNode)\n\n          const focusNodeSelectable =\n            hasEditableTarget(editor, focusNode) ||\n            isTargetInsideVoid(editor, focusNode)\n\n          if (anchorNodeSelectable && focusNodeSelectable) {\n            const range = ReactEditor.toSlateRange(editor, domSelection, {\n              exactMatch: false,\n              suppressThrow: false,\n            })\n            Transforms.select(editor, range)\n          } else {\n            Transforms.deselect(editor)\n          }\n        }\n      } catch {\n        // Failed to update selection, likely due to reconciliation error\n      }\n    }, 100),\n    [readOnly]\n  )\n\n  // Attach a native DOM event handler for `selectionchange`, because React's\n  // built-in `onSelect` handler doesn't fire for all selection changes. It's a\n  // leaky polyfill that only fires on keypresses or clicks. Instead, we want to\n  // fire for any change to the selection inside the editor. (2019/11/04)\n  // https://github.com/facebook/react/issues/5785\n  useIsomorphicLayoutEffect(() => {\n    const window = ReactEditor.getWindow(editor)\n    window.document.addEventListener('selectionchange', onDOMSelectionChange)\n\n    return () => {\n      window.document.removeEventListener(\n        'selectionchange',\n        onDOMSelectionChange\n      )\n    }\n  })\n\n  const decorations = decorate([editor, []])\n\n  if (\n    placeholder &&\n    editor.children.length === 1 &&\n    Array.from(Node.texts(editor)).length === 1 &&\n    Node.string(editor) === ''\n  ) {\n    const start = Editor.start(editor, [])\n    decorations.push({\n      [PLACEHOLDER_SYMBOL]: true,\n      placeholder,\n      anchor: start,\n      focus: start,\n    })\n  }\n\n  return (\n    <ReadOnlyContext.Provider value={readOnly}>\n      <DecorateContext.Provider value={decorate}>\n        <Component\n          key={contentKey}\n          role={readOnly ? undefined : 'textbox'}\n          {...attributes}\n          spellCheck={attributes.spellCheck}\n          autoCorrect={attributes.autoCorrect}\n          autoCapitalize={attributes.autoCapitalize}\n          data-slate-editor\n          data-slate-node=\"value\"\n          contentEditable={readOnly ? undefined : true}\n          suppressContentEditableWarning\n          ref={ref}\n          style={{\n            // Allow positioning relative to the editable element.\n            position: 'relative',\n            // Prevent the default outline styles.\n            outline: 'none',\n            // Preserve adjacent whitespace and new lines.\n            whiteSpace: 'pre-wrap',\n            // Allow words to break if they are too long.\n            wordWrap: 'break-word',\n            // Allow for passed-in styles to override anything.\n            ...style,\n          }}\n          onCopy={useCallback(\n            (event: React.ClipboardEvent<HTMLDivElement>) => {\n              if (\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onCopy)\n              ) {\n                event.preventDefault()\n                ReactEditor.setFragmentData(editor, event.clipboardData)\n              }\n            },\n            [attributes.onCopy]\n          )}\n          onCut={useCallback(\n            (event: React.ClipboardEvent<HTMLDivElement>) => {\n              if (\n                !readOnly &&\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onCut)\n              ) {\n                event.preventDefault()\n                ReactEditor.setFragmentData(editor, event.clipboardData)\n                const { selection } = editor\n\n                if (selection) {\n                  if (Range.isExpanded(selection)) {\n                    Editor.deleteFragment(editor)\n                  } else {\n                    const node = Node.parent(editor, selection.anchor.path)\n                    if (Editor.isVoid(editor, node)) {\n                      Transforms.delete(editor)\n                    }\n                  }\n                }\n              }\n            },\n            [readOnly, attributes.onCut]\n          )}\n          onFocus={useCallback(\n            (event: React.FocusEvent<HTMLDivElement>) => {\n              if (\n                !readOnly &&\n                !state.isUpdatingSelection &&\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onFocus)\n              ) {\n                const root = ReactEditor.findDocumentOrShadowRoot(editor)\n                state.latestElement = root.activeElement\n\n                IS_FOCUSED.set(editor, true)\n              }\n            },\n            [readOnly, attributes.onFocus]\n          )}\n          onBlur={useCallback(\n            (event: React.FocusEvent<HTMLDivElement>) => {\n              if (\n                readOnly ||\n                state.isUpdatingSelection ||\n                !hasEditableTarget(editor, event.target) ||\n                isEventHandled(event, attributes.onBlur)\n              ) {\n                return\n              }\n\n              // COMPAT: If the current `activeElement` is still the previous\n              // one, this is due to the window being blurred when the tab\n              // itself becomes unfocused, so we want to abort early to allow to\n              // editor to stay focused when the tab becomes focused again.\n              const root = ReactEditor.findDocumentOrShadowRoot(editor)\n              if (state.latestElement === root.activeElement) {\n                return\n              }\n\n              const { relatedTarget } = event\n              const el = ReactEditor.toDOMNode(editor, editor)\n\n              // COMPAT: The event should be ignored if the focus is returning\n              // to the editor from an embedded editable element (eg. an <input>\n              // element inside a void node).\n              if (relatedTarget === el) {\n                return\n              }\n\n              // COMPAT: The event should be ignored if the focus is moving from\n              // the editor to inside a void node's spacer element.\n              if (\n                isDOMElement(relatedTarget) &&\n                relatedTarget.hasAttribute('data-slate-spacer')\n              ) {\n                return\n              }\n\n              // COMPAT: The event should be ignored if the focus is moving to a\n              // non- editable section of an element that isn't a void node (eg.\n              // a list item of the check list example).\n              if (\n                relatedTarget != null &&\n                isDOMNode(relatedTarget) &&\n                ReactEditor.hasDOMNode(editor, relatedTarget)\n              ) {\n                const node = ReactEditor.toSlateNode(editor, relatedTarget)\n\n                if (Element.isElement(node) && !editor.isVoid(node)) {\n                  return\n                }\n              }\n\n              IS_FOCUSED.delete(editor)\n            },\n            [readOnly, attributes.onBlur]\n          )}\n          onPaste={useCallback(\n            (event: React.ClipboardEvent<HTMLDivElement>) => {\n              // this will make application/x-slate-fragment exist when onPaste attributes is passed\n              event.clipboardData = getClipboardData(event.clipboardData)\n              // This unfortunately needs to be handled with paste events instead.\n              if (\n                hasEditableTarget(editor, event.target) &&\n                !isEventHandled(event, attributes.onPaste) &&\n                !readOnly\n              ) {\n                event.preventDefault()\n                ReactEditor.insertData(editor, event.clipboardData)\n              }\n            },\n            [readOnly, attributes.onPaste]\n          )}\n        >\n          {useChildren({\n            decorations,\n            node: editor,\n            renderElement,\n            renderPlaceholder,\n            renderLeaf,\n            selection: editor.selection,\n          })}\n        </Component>\n      </DecorateContext.Provider>\n    </ReadOnlyContext.Provider>\n  )\n}\n","import { createContext, useContext } from 'react'\n\n/**\n * A React context for sharing the `focused` state of the editor.\n */\n\nexport const FocusedContext = createContext(false)\n\n/**\n * Get the current `focused` state of the editor.\n */\n\nexport const useFocused = (): boolean => {\n  return useContext(FocusedContext)\n}\n","import React, { useMemo, useState, useCallback, useEffect } from 'react'\nimport { Editor, Node, Element, Descendant } from 'slate'\nimport { ReactEditor } from '../plugin/react-editor'\nimport { FocusedContext } from '../hooks/use-focused'\nimport { EditorContext } from '../hooks/use-slate-static'\nimport { SlateContext } from '../hooks/use-slate'\nimport { EDITOR_TO_ON_CHANGE } from '../utils/weak-maps'\nimport { useIsomorphicLayoutEffect } from '../hooks/use-isomorphic-layout-effect'\n\n/**\n * A wrapper around the provider to handle `onChange` events, because the editor\n * is a mutable singleton so it won't ever register as \"changed\" otherwise.\n */\n\nexport const Slate = (props: {\n  editor: ReactEditor\n  value: Descendant[]\n  children: React.ReactNode\n  onChange: (value: Descendant[]) => void\n}) => {\n  const { editor, children, onChange, value, ...rest } = props\n\n  const [context, setContext] = React.useState<[ReactEditor]>(() => {\n    if (!Node.isNodeList(value)) {\n      throw new Error(\n        `[Slate] value is invalid! Expected a list of elements` +\n          `but got: ${JSON.stringify(value)}`\n      )\n    }\n    if (!Editor.isEditor(editor)) {\n      throw new Error(\n        `[Slate] editor is invalid! you passed:` + `${JSON.stringify(editor)}`\n      )\n    }\n    editor.children = value\n    Object.assign(editor, rest)\n    return [editor]\n  })\n\n  const onContextChange = useCallback(() => {\n    onChange(editor.children)\n    setContext([editor])\n  }, [onChange])\n\n  EDITOR_TO_ON_CHANGE.set(editor, onContextChange)\n\n  useEffect(() => {\n    return () => {\n      EDITOR_TO_ON_CHANGE.set(editor, () => {})\n    }\n  }, [])\n\n  const [isFocused, setIsFocused] = useState(ReactEditor.isFocused(editor))\n\n  useEffect(() => {\n    setIsFocused(ReactEditor.isFocused(editor))\n  })\n\n  useIsomorphicLayoutEffect(() => {\n    const fn = () => setIsFocused(ReactEditor.isFocused(editor))\n    document.addEventListener('focus', fn, true)\n    return () => document.removeEventListener('focus', fn, true)\n  }, [])\n\n  useIsomorphicLayoutEffect(() => {\n    const fn = () => setIsFocused(ReactEditor.isFocused(editor))\n    document.addEventListener('blur', fn, true)\n    return () => document.removeEventListener('blur', fn, true)\n  }, [])\n\n  return (\n    <SlateContext.Provider value={context}>\n      <EditorContext.Provider value={editor}>\n        <FocusedContext.Provider value={isFocused}>\n          {children}\n        </FocusedContext.Provider>\n      </EditorContext.Provider>\n    </SlateContext.Provider>\n  )\n}\n","import { useContext } from 'react'\n\nimport { EditorContext } from './use-slate-static'\n\n/**\n * Get the current editor object from the React context.\n * @deprecated Use useSlateStatic instead.\n */\n\nexport const useEditor = () => {\n  const editor = useContext(EditorContext)\n\n  if (!editor) {\n    throw new Error(\n      `The \\`useEditor\\` hook must be used inside the <Slate> component's context.`\n    )\n  }\n\n  return editor\n}\n","/**\n * Utilities for single-line deletion\n */\n\nimport { Range, Editor } from 'slate'\nimport { ReactEditor } from '..'\n\nconst doRectsIntersect = (rect: DOMRect, compareRect: DOMRect) => {\n  const middle = (compareRect.top + compareRect.bottom) / 2\n\n  return rect.top <= middle && rect.bottom >= middle\n}\n\nconst areRangesSameLine = (\n  editor: ReactEditor,\n  range1: Range,\n  range2: Range\n) => {\n  const rect1 = ReactEditor.toDOMRange(editor, range1).getBoundingClientRect()\n  const rect2 = ReactEditor.toDOMRange(editor, range2).getBoundingClientRect()\n\n  return doRectsIntersect(rect1, rect2) && doRectsIntersect(rect2, rect1)\n}\n\n/**\n * A helper utility that returns the end portion of a `Range`\n * which is located on a single line.\n *\n * @param {Editor} editor The editor object to compare against\n * @param {Range} parentRange The parent range to compare against\n * @returns {Range} A valid portion of the parentRange which is one a single line\n */\nexport const findCurrentLineRange = (\n  editor: ReactEditor,\n  parentRange: Range\n): Range => {\n  const parentRangeBoundary = Editor.range(editor, Range.end(parentRange))\n  const positions = Array.from(Editor.positions(editor, { at: parentRange }))\n\n  let left = 0\n  let right = positions.length\n  let middle = Math.floor(right / 2)\n\n  if (\n    areRangesSameLine(\n      editor,\n      Editor.range(editor, positions[left]),\n      parentRangeBoundary\n    )\n  ) {\n    return Editor.range(editor, positions[left], parentRangeBoundary)\n  }\n\n  if (positions.length < 2) {\n    return Editor.range(\n      editor,\n      positions[positions.length - 1],\n      parentRangeBoundary\n    )\n  }\n\n  while (middle !== positions.length && middle !== left) {\n    if (\n      areRangesSameLine(\n        editor,\n        Editor.range(editor, positions[middle]),\n        parentRangeBoundary\n      )\n    ) {\n      right = middle\n    } else {\n      left = middle\n    }\n\n    middle = Math.floor((left + right) / 2)\n  }\n\n  return Editor.range(editor, positions[right], parentRangeBoundary)\n}\n","import ReactDOM from 'react-dom'\nimport { Editor, Node, Path, Operation, Transforms, Range } from 'slate'\n\nimport { ReactEditor } from './react-editor'\nimport { Key } from '../utils/key'\nimport {\n  EDITOR_TO_KEY_TO_ELEMENT,\n  EDITOR_TO_ON_CHANGE,\n  NODE_TO_KEY,\n} from '../utils/weak-maps'\nimport {\n  isDOMText,\n  getPlainText,\n  getSlateFragmentAttribute,\n} from '../utils/dom'\nimport { findCurrentLineRange } from '../utils/lines'\n\n/**\n * `withReact` adds React and DOM specific behaviors to the editor.\n *\n * If you are using TypeScript, you must extend Slate's CustomTypes to use\n * this plugin.\n *\n * See https://docs.slatejs.org/concepts/11-typescript to learn how.\n */\n\nexport const withReact = <T extends Editor>(editor: T) => {\n  const e = editor as T & ReactEditor\n  const { apply, onChange, deleteBackward } = e\n\n  // The WeakMap which maps a key to a specific HTMLElement must be scoped to the editor instance to\n  // avoid collisions between editors in the DOM that share the same value.\n  EDITOR_TO_KEY_TO_ELEMENT.set(e, new WeakMap())\n\n  e.deleteBackward = unit => {\n    if (unit !== 'line') {\n      return deleteBackward(unit)\n    }\n\n    if (editor.selection && Range.isCollapsed(editor.selection)) {\n      const parentBlockEntry = Editor.above(editor, {\n        match: n => Editor.isBlock(editor, n),\n        at: editor.selection,\n      })\n\n      if (parentBlockEntry) {\n        const [, parentBlockPath] = parentBlockEntry\n        const parentElementRange = Editor.range(\n          editor,\n          parentBlockPath,\n          editor.selection.anchor\n        )\n\n        const currentLineRange = findCurrentLineRange(e, parentElementRange)\n\n        if (!Range.isCollapsed(currentLineRange)) {\n          Transforms.delete(editor, { at: currentLineRange })\n        }\n      }\n    }\n  }\n\n  e.apply = (op: Operation) => {\n    const matches: [Path, Key][] = []\n\n    switch (op.type) {\n      case 'insert_text':\n      case 'remove_text':\n      case 'set_node': {\n        for (const [node, path] of Editor.levels(e, { at: op.path })) {\n          const key = ReactEditor.findKey(e, node)\n          matches.push([path, key])\n        }\n\n        break\n      }\n\n      case 'insert_node':\n      case 'remove_node':\n      case 'merge_node':\n      case 'split_node': {\n        for (const [node, path] of Editor.levels(e, {\n          at: Path.parent(op.path),\n        })) {\n          const key = ReactEditor.findKey(e, node)\n          matches.push([path, key])\n        }\n\n        break\n      }\n\n      case 'move_node': {\n        for (const [node, path] of Editor.levels(e, {\n          at: Path.common(Path.parent(op.path), Path.parent(op.newPath)),\n        })) {\n          const key = ReactEditor.findKey(e, node)\n          matches.push([path, key])\n        }\n        break\n      }\n    }\n\n    apply(op)\n\n    for (const [path, key] of matches) {\n      const [node] = Editor.node(e, path)\n      NODE_TO_KEY.set(node, key)\n    }\n  }\n\n  e.setFragmentData = (data: Pick<DataTransfer, 'getData' | 'setData'>) => {\n    const { selection } = e\n\n    if (!selection) {\n      return\n    }\n\n    const [start, end] = Range.edges(selection)\n    const startVoid = Editor.void(e, { at: start.path })\n    const endVoid = Editor.void(e, { at: end.path })\n\n    if (Range.isCollapsed(selection) && !startVoid) {\n      return\n    }\n\n    // Create a fake selection so that we can add a Base64-encoded copy of the\n    // fragment to the HTML, to decode on future pastes.\n    const domRange = ReactEditor.toDOMRange(e, selection)\n    let contents = domRange.cloneContents()\n    let attach = contents.childNodes[0] as HTMLElement\n\n    // Make sure attach is non-empty, since empty nodes will not get copied.\n    contents.childNodes.forEach(node => {\n      if (node.textContent && node.textContent.trim() !== '') {\n        attach = node as HTMLElement\n      }\n    })\n\n    // COMPAT: If the end node is a void node, we need to move the end of the\n    // range from the void node's spacer span, to the end of the void node's\n    // content, since the spacer is before void's content in the DOM.\n    if (endVoid) {\n      const [voidNode] = endVoid\n      const r = domRange.cloneRange()\n      const domNode = ReactEditor.toDOMNode(e, voidNode)\n      r.setEndAfter(domNode)\n      contents = r.cloneContents()\n    }\n\n    // COMPAT: If the start node is a void node, we need to attach the encoded\n    // fragment to the void node's content node instead of the spacer, because\n    // attaching it to empty `<div>/<span>` nodes will end up having it erased by\n    // most browsers. (2018/04/27)\n    if (startVoid) {\n      attach = contents.querySelector('[data-slate-spacer]')! as HTMLElement\n    }\n\n    // Remove any zero-width space spans from the cloned DOM so that they don't\n    // show up elsewhere when pasted.\n    Array.from(contents.querySelectorAll('[data-slate-zero-width]')).forEach(\n      zw => {\n        const isNewline = zw.getAttribute('data-slate-zero-width') === 'n'\n        zw.textContent = isNewline ? '\\n' : ''\n      }\n    )\n\n    // Set a `data-slate-fragment` attribute on a non-empty node, so it shows up\n    // in the HTML, and can be used for intra-Slate pasting. If it's a text\n    // node, wrap it in a `<span>` so we have something to set an attribute on.\n    if (isDOMText(attach)) {\n      const span = attach.ownerDocument.createElement('span')\n      // COMPAT: In Chrome and Safari, if we don't add the `white-space` style\n      // then leading and trailing spaces will be ignored. (2017/09/21)\n      span.style.whiteSpace = 'pre'\n      span.appendChild(attach)\n      contents.appendChild(span)\n      attach = span\n    }\n\n    const fragment = e.getFragment()\n    const string = JSON.stringify(fragment)\n    const encoded = window.btoa(encodeURIComponent(string))\n    attach.setAttribute('data-slate-fragment', encoded)\n    data.setData('application/x-slate-fragment', encoded)\n\n    // Add the content to a <div> so that we can get its inner HTML.\n    const div = contents.ownerDocument.createElement('div')\n    div.appendChild(contents)\n    div.setAttribute('hidden', 'true')\n    contents.ownerDocument.body.appendChild(div)\n    data.setData('text/html', div.innerHTML)\n    data.setData('text/plain', getPlainText(div))\n    contents.ownerDocument.body.removeChild(div)\n    return data\n  }\n\n  e.insertData = (data: DataTransfer) => {\n    if (!e.insertFragmentData(data)) {\n      e.insertTextData(data)\n    }\n  }\n\n  e.insertFragmentData = (data: DataTransfer): boolean => {\n    /**\n     * Checking copied fragment from application/x-slate-fragment or data-slate-fragment\n     */\n    const fragment =\n      data.getData('application/x-slate-fragment') ||\n      getSlateFragmentAttribute(data)\n\n    if (fragment) {\n      const decoded = decodeURIComponent(window.atob(fragment))\n      const parsed = JSON.parse(decoded) as Node[]\n      e.insertFragment(parsed)\n      return true\n    }\n    return false\n  }\n\n  e.insertTextData = (data: DataTransfer): boolean => {\n    const text = data.getData('text/plain')\n\n    if (text) {\n      const lines = text.split(/\\r\\n|\\r|\\n/)\n      let split = false\n\n      for (const line of lines) {\n        if (split) {\n          Transforms.splitNodes(e, { always: true })\n        }\n\n        e.insertText(line)\n        split = true\n      }\n      return true\n    }\n    return false\n  }\n\n  e.onChange = () => {\n    // COMPAT: React doesn't batch `setState` hook calls, which means that the\n    // children and selection can get out of sync for one render pass. So we\n    // have to use this unstable API to ensure it batches them. (2019/12/03)\n    // https://github.com/facebook/react/issues/14259#issuecomment-439702367\n    ReactDOM.unstable_batchedUpdates(() => {\n      const onContextChange = EDITOR_TO_ON_CHANGE.get(e)\n\n      if (onContextChange) {\n        onContextChange()\n      }\n\n      onChange()\n    })\n  }\n\n  return e\n}\n","// Components\n// Environment-dependent Editable\nimport { Editable as DefaultEditable } from './components/editable'\nimport { AndroidEditable } from './components/android/android-editable'\nimport { IS_ANDROID } from './utils/environment'\n\nexport const Editable = IS_ANDROID ? AndroidEditable : DefaultEditable\nexport {\n  Editable as DefaultEditable,\n  RenderElementProps,\n  RenderLeafProps,\n  RenderPlaceholderProps,\n  DefaultPlaceholder,\n} from './components/editable'\nexport { AndroidEditable } from './components/android/android-editable'\nexport { DefaultElement } from './components/element'\nexport { DefaultLeaf } from './components/leaf'\nexport { Slate } from './components/slate'\n\n// Hooks\nexport { useEditor } from './hooks/use-editor'\nexport { useSlateStatic } from './hooks/use-slate-static'\nexport { useFocused } from './hooks/use-focused'\nexport { useReadOnly } from './hooks/use-read-only'\nexport { useSelected } from './hooks/use-selected'\nexport { useSlate } from './hooks/use-slate'\n\n// Plugin\nexport { ReactEditor } from './plugin/react-editor'\nexport { withReact } from './plugin/with-react'\n"]},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}