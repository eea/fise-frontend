{"ast":null,"code":"import SimpleMarkdown from './SimpleMarkdown';\nconst getMenuPosition = data => {\n  const positions = {\n    top: 'top',\n    bottom: 'bottom',\n    'left side': 'left',\n    'right side': 'right'\n  };\n  const position = positions[data.menuPosition];\n  if (['left', 'right'].includes(position)) {\n    return {\n      vertical: true,\n      direction: position\n    };\n  }\n  if (['bottom'].includes(position)) {\n    return {\n      attached: position,\n      direction: position\n    };\n  }\n  return {\n    direction: position\n  };\n};\nconst toggleItem = (container, item, hidden) => {\n  // Set visibility to hidden, instead of .hidden attribute\n  // so we can still calculate distance accurately\n  item.style.visibility = hidden ? 'hidden' : '';\n  // item.style.display = hidden ? 'none' : 'flex';\n  // Get tab-item name, if present, so we can match it up with the dropdown menu\n  const itemData = item.getAttribute('item-data');\n  if (itemData) {\n    const itemToHide = container.querySelector(`[underline-item-data=\"${itemData}\"]`);\n    if (itemToHide instanceof HTMLElement) {\n      itemToHide.hidden = !hidden;\n    }\n  }\n};\nexport { SimpleMarkdown, getMenuPosition, toggleItem };\nexport * from './dimensions';","map":{"version":3,"names":["SimpleMarkdown","getMenuPosition","data","positions","top","bottom","position","menuPosition","includes","vertical","direction","attached","toggleItem","container","item","hidden","style","visibility","itemData","getAttribute","itemToHide","querySelector","HTMLElement"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-tabs-block/src/utils/index.js"],"sourcesContent":["import SimpleMarkdown from './SimpleMarkdown';\n\nconst getMenuPosition = (data) => {\n  const positions = {\n    top: 'top',\n    bottom: 'bottom',\n    'left side': 'left',\n    'right side': 'right',\n  };\n  const position = positions[data.menuPosition];\n  if (['left', 'right'].includes(position)) {\n    return {\n      vertical: true,\n      direction: position,\n    };\n  }\n  if (['bottom'].includes(position)) {\n    return {\n      attached: position,\n      direction: position,\n    };\n  }\n  return {\n    direction: position,\n  };\n};\n\nconst toggleItem = (container, item, hidden) => {\n  // Set visibility to hidden, instead of .hidden attribute\n  // so we can still calculate distance accurately\n  item.style.visibility = hidden ? 'hidden' : '';\n  // item.style.display = hidden ? 'none' : 'flex';\n  // Get tab-item name, if present, so we can match it up with the dropdown menu\n  const itemData = item.getAttribute('item-data');\n  if (itemData) {\n    const itemToHide = container.querySelector(\n      `[underline-item-data=\"${itemData}\"]`,\n    );\n    if (itemToHide instanceof HTMLElement) {\n      itemToHide.hidden = !hidden;\n    }\n  }\n};\n\nexport { SimpleMarkdown, getMenuPosition, toggleItem };\nexport * from './dimensions';\n"],"mappings":"AAAA,OAAOA,cAAc,MAAM,kBAAkB;AAE7C,MAAMC,eAAe,GAAIC,IAAI,IAAK;EAChC,MAAMC,SAAS,GAAG;IAChBC,GAAG,EAAE,KAAK;IACVC,MAAM,EAAE,QAAQ;IAChB,WAAW,EAAE,MAAM;IACnB,YAAY,EAAE;EAChB,CAAC;EACD,MAAMC,QAAQ,GAAGH,SAAS,CAACD,IAAI,CAACK,YAAY,CAAC;EAC7C,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAACC,QAAQ,CAACF,QAAQ,CAAC,EAAE;IACxC,OAAO;MACLG,QAAQ,EAAE,IAAI;MACdC,SAAS,EAAEJ;IACb,CAAC;EACH;EACA,IAAI,CAAC,QAAQ,CAAC,CAACE,QAAQ,CAACF,QAAQ,CAAC,EAAE;IACjC,OAAO;MACLK,QAAQ,EAAEL,QAAQ;MAClBI,SAAS,EAAEJ;IACb,CAAC;EACH;EACA,OAAO;IACLI,SAAS,EAAEJ;EACb,CAAC;AACH,CAAC;AAED,MAAMM,UAAU,GAAG,CAACC,SAAS,EAAEC,IAAI,EAAEC,MAAM,KAAK;EAC9C;EACA;EACAD,IAAI,CAACE,KAAK,CAACC,UAAU,GAAGF,MAAM,GAAG,QAAQ,GAAG,EAAE;EAC9C;EACA;EACA,MAAMG,QAAQ,GAAGJ,IAAI,CAACK,YAAY,CAAC,WAAW,CAAC;EAC/C,IAAID,QAAQ,EAAE;IACZ,MAAME,UAAU,GAAGP,SAAS,CAACQ,aAAa,CACvC,yBAAwBH,QAAS,IAAG,CACtC;IACD,IAAIE,UAAU,YAAYE,WAAW,EAAE;MACrCF,UAAU,CAACL,MAAM,GAAG,CAACA,MAAM;IAC7B;EACF;AACF,CAAC;AAED,SAASf,cAAc,EAAEC,eAAe,EAAEW,UAAU;AACpD,cAAc,cAAc"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}