{"ast":null,"code":"import _slicedToArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport ReactDOM from 'react-dom';\nimport { defineMessages } from 'react-intl'; // , defineMessages\nimport { v4 as uuid } from 'uuid';\nimport { getBlocksFieldname, getBlocksLayoutFieldname } from '@plone/volto/helpers';\nimport { makeInlineElementPlugin } from '@plone/volto-slate/elementEditor';\nimport { _insertElement } from '@plone/volto-slate/elementEditor/utils';\nimport { FootnoteEditorSchema } from './schema';\nimport { withFootnote, withBeforeInsertFragment } from './extensions';\nimport { FOOTNOTE } from '../constants';\nimport { FootnoteElement } from './render';\nimport FootnoteEditor from './FootnoteEditor';\nimport './styles.less';\nvar messages = defineMessages({\n  edit: {\n    \"id\": \"Edit footnote\",\n    \"defaultMessage\": \"Edit footnote\"\n  },\n  \"delete\": {\n    \"id\": \"Remove footnote\",\n    \"defaultMessage\": \"Remove footnote\"\n  }\n});\nexport default function install(config) {\n  var opts = {\n    title: 'Footnote',\n    pluginId: FOOTNOTE,\n    elementType: FOOTNOTE,\n    pluginEditor: FootnoteEditor,\n    element: FootnoteElement,\n    isInlineElement: true,\n    editSchema: FootnoteEditorSchema,\n    extensions: [withFootnote, withBeforeInsertFragment],\n    hasValue: function hasValue(formData) {\n      return !!formData.footnote;\n    },\n    insertElement: function insertElement(editor, data) {\n      var _config, _config$blocks, _config$blocks$blocks, _config$blocks$blocks2;\n      // the default behavior is _insertElement,\n      // it returns whether an element was possibly inserted\n      if (!_insertElement(FOOTNOTE)(editor, data)) {\n        return;\n      }\n      if (!editor.getBlockProps) return;\n      var _editor$getBlockProps = editor.getBlockProps(),\n        properties = _editor$getBlockProps.properties,\n        onChangeField = _editor$getBlockProps.onChangeField;\n\n      // the usual functions used to work with the form state data\n      var blocksFieldname = getBlocksFieldname(properties);\n      var blocksLayoutFieldname = getBlocksLayoutFieldname(properties);\n      var blocks = (properties === null || properties === void 0 ? void 0 : properties[blocksFieldname]) || {};\n      var blocks_layout = (properties === null || properties === void 0 ? void 0 : properties[blocksLayoutFieldname]) || {};\n\n      // Auto-add footnote block\n      if ((_config = config) !== null && _config !== void 0 && (_config$blocks = _config.blocks) !== null && _config$blocks !== void 0 && (_config$blocks$blocks = _config$blocks.blocksConfig) !== null && _config$blocks$blocks !== void 0 && (_config$blocks$blocks2 = _config$blocks$blocks.slateFootnotes) !== null && _config$blocks$blocks2 !== void 0 && _config$blocks$blocks2.autoAdd) {\n        // whether the footnotes block exists already\n        var footnotesBlockExists = false;\n        for (var b in blocks) {\n          var bb = blocks[b];\n          if (bb['@type'] === 'slateFootnotes') {\n            footnotesBlockExists = true;\n            break;\n          }\n        }\n        // if not, create it\n        if (!footnotesBlockExists) {\n          var id = uuid();\n          var nb = {\n            '@type': 'slateFootnotes',\n            title: 'Footnotes'\n          };\n          var formData = {\n            blocks: _objectSpread(_objectSpread({}, blocks), {}, _defineProperty({}, id, nb)),\n            blocks_layout: {\n              items: [].concat(_toConsumableArray(blocks_layout.items), [id])\n            }\n          };\n          ReactDOM.unstable_batchedUpdates(function () {\n            onChangeField(blocksFieldname, formData[blocksFieldname]);\n            onChangeField(blocksLayoutFieldname, formData[blocksLayoutFieldname]);\n          });\n        }\n      }\n    },\n    messages: messages\n  };\n  var _makeInlineElementPlu = makeInlineElementPlugin(opts),\n    _makeInlineElementPlu2 = _slicedToArray(_makeInlineElementPlu, 1),\n    installFootnoteEditor = _makeInlineElementPlu2[0];\n  config = installFootnoteEditor(config);\n  var slate = config.settings.slate;\n  slate.toolbarButtons = [].concat(_toConsumableArray(slate.toolbarButtons || []), ['footnote']);\n  slate.expandedToolbarButtons = [].concat(_toConsumableArray(slate.expandedToolbarButtons || []), ['footnote']);\n  return config;\n}","map":{"version":3,"names":["ReactDOM","defineMessages","v4","uuid","getBlocksFieldname","getBlocksLayoutFieldname","makeInlineElementPlugin","_insertElement","FootnoteEditorSchema","withFootnote","withBeforeInsertFragment","FOOTNOTE","FootnoteElement","FootnoteEditor","messages","edit","install","config","opts","title","pluginId","elementType","pluginEditor","element","isInlineElement","editSchema","extensions","hasValue","formData","footnote","insertElement","editor","data","getBlockProps","properties","onChangeField","blocksFieldname","blocksLayoutFieldname","blocks","blocks_layout","blocksConfig","slateFootnotes","autoAdd","footnotesBlockExists","b","bb","id","nb","items","unstable_batchedUpdates","installFootnoteEditor","slate","settings","toolbarButtons","expandedToolbarButtons"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-slate-footnote/src/editor/index.js"],"sourcesContent":["import ReactDOM from 'react-dom';\nimport { defineMessages } from 'react-intl'; // , defineMessages\nimport { v4 as uuid } from 'uuid';\nimport {\n  getBlocksFieldname,\n  getBlocksLayoutFieldname,\n} from '@plone/volto/helpers';\nimport { makeInlineElementPlugin } from '@plone/volto-slate/elementEditor';\nimport { _insertElement } from '@plone/volto-slate/elementEditor/utils';\nimport { FootnoteEditorSchema } from './schema';\nimport { withFootnote, withBeforeInsertFragment } from './extensions';\nimport { FOOTNOTE } from '../constants';\nimport { FootnoteElement } from './render';\nimport FootnoteEditor from './FootnoteEditor';\n\nimport './styles.less';\n\nconst messages = defineMessages({\n  edit: {\n    id: 'Edit footnote',\n    defaultMessage: 'Edit footnote',\n  },\n  delete: {\n    id: 'Remove footnote',\n    defaultMessage: 'Remove footnote',\n  },\n});\n\nexport default function install(config) {\n  const opts = {\n    title: 'Footnote',\n    pluginId: FOOTNOTE,\n    elementType: FOOTNOTE,\n    pluginEditor: FootnoteEditor,\n    element: FootnoteElement,\n    isInlineElement: true,\n    editSchema: FootnoteEditorSchema,\n    extensions: [withFootnote, withBeforeInsertFragment],\n    hasValue: (formData) => !!formData.footnote,\n    insertElement: (editor, data) => {\n      // the default behavior is _insertElement,\n      // it returns whether an element was possibly inserted\n      if (!_insertElement(FOOTNOTE)(editor, data)) {\n        return;\n      }\n\n      if (!editor.getBlockProps) return;\n\n      const { properties, onChangeField } = editor.getBlockProps();\n\n      // the usual functions used to work with the form state data\n      const blocksFieldname = getBlocksFieldname(properties);\n      const blocksLayoutFieldname = getBlocksLayoutFieldname(properties);\n\n      const blocks = properties?.[blocksFieldname] || {};\n      const blocks_layout = properties?.[blocksLayoutFieldname] || {};\n\n      // Auto-add footnote block\n      if (config?.blocks?.blocksConfig?.slateFootnotes?.autoAdd) {\n        // whether the footnotes block exists already\n        let footnotesBlockExists = false;\n        for (const b in blocks) {\n          const bb = blocks[b];\n          if (bb['@type'] === 'slateFootnotes') {\n            footnotesBlockExists = true;\n            break;\n          }\n        }\n        // if not, create it\n        if (!footnotesBlockExists) {\n          const id = uuid();\n          const nb = {\n            '@type': 'slateFootnotes',\n            title: 'Footnotes',\n          };\n          const formData = {\n            blocks: { ...blocks, [id]: nb },\n            blocks_layout: {\n              items: [...blocks_layout.items, id],\n            },\n          };\n\n          ReactDOM.unstable_batchedUpdates(() => {\n            onChangeField(blocksFieldname, formData[blocksFieldname]);\n            onChangeField(\n              blocksLayoutFieldname,\n              formData[blocksLayoutFieldname],\n            );\n          });\n        }\n      }\n    },\n    messages,\n  };\n  const [installFootnoteEditor] = makeInlineElementPlugin(opts);\n  config = installFootnoteEditor(config);\n\n  const { slate } = config.settings;\n\n  slate.toolbarButtons = [...(slate.toolbarButtons || []), 'footnote'];\n  slate.expandedToolbarButtons = [\n    ...(slate.expandedToolbarButtons || []),\n    'footnote',\n  ];\n\n  return config;\n}\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Edit footnote","defaultMessage":"Edit footnote"},{"id":"Remove footnote","defaultMessage":"Remove footnote"}]}},"sourceType":"module","externalDependencies":[]}