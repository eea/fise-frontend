{"ast":null,"code":"import _isEqual from \"lodash/isEqual\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Blocks/HTML/Edit.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n/**\n * Edit html block.\n * @module components/manage/Blocks/HTML/Edit\n */\n\nimport { compose } from 'redux';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Popup } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport loadable from '@loadable/component';\nimport { Icon } from '@plone/volto/components';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport showSVG from '@plone/volto/icons/show.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport codeSVG from '@plone/volto/icons/code.svg';\nimport indentSVG from '@plone/volto/icons/indent.svg';\nconst Editor = loadable({\n  resolved: {},\n  chunkName() {\n    return \"react-simple-code-editor\";\n  },\n  isReady(props) {\n    var key = this.resolve(props);\n    if (this.resolved[key] !== true) {\n      return false;\n    }\n    if (typeof __webpack_modules__ !== 'undefined') {\n      return !!__webpack_modules__[key];\n    }\n    return false;\n  },\n  importAsync: () => import( /* webpackChunkName: \"react-simple-code-editor\" */'react-simple-code-editor'),\n  requireAsync(props) {\n    var _this = this;\n    var key = this.resolve(props);\n    this.resolved[key] = false;\n    return this.importAsync(props).then(function (resolved) {\n      _this.resolved[key] = true;\n      return resolved;\n    });\n  },\n  requireSync(props) {\n    var id = this.resolve(props);\n    if (typeof __webpack_require__ !== 'undefined') {\n      return __webpack_require__(id);\n    }\n    return eval('module.require')(id);\n  },\n  resolve() {\n    if (require.resolveWeak) {\n      return require.resolveWeak(\"react-simple-code-editor\");\n    }\n    return eval('require.resolve')(\"react-simple-code-editor\");\n  }\n});\nconst messages = defineMessages({\n  source: {\n    \"id\": \"Source\",\n    \"defaultMessage\": \"Source\"\n  },\n  preview: {\n    \"id\": \"Preview\",\n    \"defaultMessage\": \"Preview\"\n  },\n  placeholder: {\n    \"id\": \"<p>Add some HTML here</p>\",\n    \"defaultMessage\": \"<p>Add some HTML here</p>\"\n  },\n  prettier: {\n    \"id\": \"Prettify your code\",\n    \"defaultMessage\": \"Prettify your code\"\n  },\n  clear: {\n    \"id\": \"Clear\",\n    \"defaultMessage\": \"Clear\"\n  },\n  code: {\n    \"id\": \"Code\",\n    \"defaultMessage\": \"Code\"\n  }\n});\n\n/**\n * Edit html block class.\n * @class Edit\n * @extends Component\n */\nclass Edit extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   */\n  constructor(props) {\n    super(props);\n    _defineProperty(this, \"codeEditorRef\", /*#__PURE__*/React.createRef());\n    _defineProperty(this, \"savedSelection\", {});\n    _defineProperty(this, \"onPrettify\", () => {\n      try {\n        const code = this.props.prettierStandalone.format(this.getValue(), {\n          parser: 'html',\n          plugins: [this.props.prettierParserHtml]\n        }).trim();\n        this.onChangeCode(code);\n      } catch (ex) {\n        // error while parsing the user-typed HTML\n        // TODO: show a toast notification or something similar to the user\n      }\n    });\n    _defineProperty(this, \"getSelection\", editor => {\n      if (!editor || !editor._input) {\n        return {};\n      }\n      const o = {};\n      if (editor._input.selectionStart) {\n        o.selectionStart = editor._input.selectionStart;\n      }\n      if (editor._input.selectionEnd) {\n        o.selectionEnd = editor._input.selectionEnd;\n      }\n      return o;\n    });\n    _defineProperty(this, \"restoreSelectionAndFocus\", editor => {\n      var _this$savedSelection, _this$savedSelection2;\n      // Don't restore selection when the block is not selected.\n      if (this.props.selected && editor._input && typeof ((_this$savedSelection = this.savedSelection) === null || _this$savedSelection === void 0 ? void 0 : _this$savedSelection.selectionStart) === 'number' && typeof ((_this$savedSelection2 = this.savedSelection) === null || _this$savedSelection2 === void 0 ? void 0 : _this$savedSelection2.selectionEnd) === 'number') {\n        var _this$savedSelection3, _this$savedSelection4;\n        editor._input.selectionStart = (_this$savedSelection3 = this.savedSelection) === null || _this$savedSelection3 === void 0 ? void 0 : _this$savedSelection3.selectionStart;\n        editor._input.selectionEnd = (_this$savedSelection4 = this.savedSelection) === null || _this$savedSelection4 === void 0 ? void 0 : _this$savedSelection4.selectionEnd;\n        editor._input.focus();\n      }\n    });\n    this.state = {\n      isPreview: false\n    };\n    this.onChangeCode = this.onChangeCode.bind(this);\n    this.onPreview = this.onPreview.bind(this);\n    this.onCodeEditor = this.onCodeEditor.bind(this);\n  }\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    // The selection is saved in the snapshot.\n    this.savedSelection = snapshot;\n    this.restoreSelectionAndFocus(this.codeEditorRef.current);\n  }\n\n  /**\n   * @param {*} nextProps\n   * @param {*} nextState\n   * @returns {boolean}\n   * @memberof Edit\n   */\n  shouldComponentUpdate(nextProps) {\n    // Always rerender when the DOM node is not created for the Editor (the\n    // first call to shouldComponentUpdate).\n    if (!this._input) {\n      return true;\n    }\n\n    // Rerender the entire component when the Editor in it changes its selection\n    // because this way we get a call to getSnapshotBeforeUpdate where we can\n    // save the selection.\n    return this.props.selected || !_isEqual(this.props.data, nextProps.data) || this._input.selectionStart !== this.savedSelection.selectionStart || this._input.selectionEnd !== this.savedSelection.selectionEnd;\n  }\n\n  /**\n   * Change html handler\n   * @method onChangeCode\n   * @param {string} code New value html\n   * @returns {undefined}\n   */\n  onChangeCode(code) {\n    this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n      html: code\n    }));\n  }\n  getValue() {\n    return this.props.data.html || '';\n  }\n\n  /**\n   * Preview mode handler\n   * @method onPreview\n   * @returns {undefined}\n   */\n  onPreview() {\n    try {\n      const code = this.props.prettierStandalone.format(this.getValue(), {\n        parser: 'html',\n        plugins: [this.props.prettierParserHtml]\n      }).trim();\n      this.setState({\n        isPreview: !this.state.isPreview\n      }, () => this.onChangeCode(code));\n    } catch (ex) {\n      // error while parsing the user-typed HTML\n      // TODO: show a toast notification or something similar to the user\n    }\n  }\n\n  /**\n   * Prettify handler\n   * @method onPrettify\n   * @returns {undefined}\n   */\n\n  /**\n   * Code Editor mode handler\n   * @method onPreview\n   * @returns {undefined}\n   */\n  onCodeEditor() {\n    this.setState({\n      isPreview: !this.state.isPreview\n    });\n  }\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    return this.getSelection(this.codeEditorRef.current);\n  }\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    var _this$props$prismCore, _this$props$prismCore2, _this$props$prismCore3;\n    const placeholder = this.props.data.placeholder || this.props.intl.formatMessage(messages.placeholder);\n    const value = this.getValue();\n    return __jsx(React.Fragment, null, this.props.selected && value && __jsx(\"div\", {\n      className: \"toolbar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 11\n      }\n    }, __jsx(Popup, {\n      trigger: __jsx(Button, {\n        icon: true,\n        basic: true,\n        \"aria-label\": this.props.intl.formatMessage(messages.source),\n        active: !this.state.isPreview,\n        onClick: this.onCodeEditor,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 17\n        }\n      }, __jsx(Icon, {\n        name: codeSVG,\n        size: \"24px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 19\n        }\n      })),\n      position: \"top center\",\n      content: this.props.intl.formatMessage(messages.code),\n      size: \"mini\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 13\n      }\n    }), __jsx(Popup, {\n      trigger: __jsx(Button, {\n        icon: true,\n        basic: true,\n        \"aria-label\": this.props.intl.formatMessage(messages.preview),\n        active: this.state.isPreview,\n        onClick: this.onPreview,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 17\n        }\n      }, __jsx(Icon, {\n        name: showSVG,\n        size: \"24px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 19\n        }\n      })),\n      position: \"top center\",\n      content: this.props.intl.formatMessage(messages.preview),\n      size: \"mini\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 13\n      }\n    }), __jsx(Popup, {\n      trigger: __jsx(Button, {\n        icon: true,\n        basic: true,\n        \"aria-label\": this.props.intl.formatMessage(messages.prettier),\n        onClick: this.onPrettify,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 17\n        }\n      }, __jsx(Icon, {\n        name: indentSVG,\n        size: \"24px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 19\n        }\n      })),\n      position: \"top center\",\n      content: this.props.intl.formatMessage(messages.prettier),\n      size: \"mini\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 13\n      }\n    }), __jsx(\"div\", {\n      className: \"separator\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 13\n      }\n    }), __jsx(Popup, {\n      trigger: __jsx(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 17\n        }\n      }, __jsx(Button, {\n        icon: true,\n        basic: true,\n        onClick: () => this.onChangeCode(''),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 19\n        }\n      }, __jsx(Icon, {\n        name: clearSVG,\n        size: \"24px\",\n        color: \"#e40166\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 21\n        }\n      }))),\n      position: \"top center\",\n      content: this.props.intl.formatMessage(messages.clear),\n      size: \"mini\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 13\n      }\n    })), this.state.isPreview ? __jsx(\"div\", {\n      dangerouslySetInnerHTML: {\n        __html: value\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 11\n      }\n    }) : __jsx(Editor, {\n      value: this.getValue(),\n      readOnly: !this.props.editable,\n      placeholder: placeholder,\n      onValueChange: code => this.onChangeCode(code),\n      highlight: (_this$props$prismCore = this.props.prismCore) !== null && _this$props$prismCore !== void 0 && _this$props$prismCore.highlight && (_this$props$prismCore2 = this.props.prismCore) !== null && _this$props$prismCore2 !== void 0 && (_this$props$prismCore3 = _this$props$prismCore2.languages) !== null && _this$props$prismCore3 !== void 0 && _this$props$prismCore3.html ? code => this.props.prismCore.highlight(code, this.props.prismCore.languages.html, 'html') : () => {},\n      padding: 8,\n      className: \"html-editor\",\n      ref: node => {\n        if (node) {\n          this.codeEditorRef.current = node;\n        }\n      },\n      ignoreTabKey: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 11\n      }\n    }));\n  }\n}\n_defineProperty(Edit, \"propTypes\", {\n  selected: PropTypes.bool.isRequired,\n  block: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  onChangeBlock: PropTypes.func.isRequired,\n  onSelectBlock: PropTypes.func.isRequired,\n  onDeleteBlock: PropTypes.func.isRequired,\n  handleKeyDown: PropTypes.func.isRequired,\n  editable: PropTypes.bool\n});\n_defineProperty(Edit, \"defaultProps\", {\n  editable: true\n});\nconst withPrismMarkup = WrappedComponent => props => {\n  const [loaded, setLoaded] = React.useState();\n  const promise = React.useRef(null);\n  const cancelled = React.useRef(false);\n  React.useEffect(() => {\n    promise.current = import('prismjs/components/prism-markup');\n    promise.current.then(() => {\n      if (!cancelled.current) {\n        setLoaded(true);\n      }\n    });\n    return () => {\n      cancelled.current = true;\n    };\n  }, []);\n  return loaded ? __jsx(WrappedComponent, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 19\n    }\n  })) : null;\n};\nexport default compose(injectLazyLibs(['prettierStandalone', 'prettierParserHtml', 'prismCore']), withPrismMarkup, injectIntl)(Edit);","map":{"version":3,"names":["compose","React","Component","PropTypes","Button","Popup","defineMessages","injectIntl","loadable","Icon","injectLazyLibs","showSVG","clearSVG","codeSVG","indentSVG","Editor","messages","source","preview","placeholder","prettier","clear","code","Edit","constructor","props","createRef","prettierStandalone","format","getValue","parser","plugins","prettierParserHtml","trim","onChangeCode","ex","editor","_input","o","selectionStart","selectionEnd","selected","savedSelection","focus","state","isPreview","bind","onPreview","onCodeEditor","componentDidUpdate","prevProps","prevState","snapshot","restoreSelectionAndFocus","codeEditorRef","current","shouldComponentUpdate","nextProps","data","onChangeBlock","block","html","setState","getSnapshotBeforeUpdate","getSelection","render","intl","formatMessage","value","onPrettify","__html","editable","prismCore","highlight","languages","node","bool","isRequired","string","index","number","objectOf","any","func","onSelectBlock","onDeleteBlock","handleKeyDown","withPrismMarkup","WrappedComponent","loaded","setLoaded","useState","promise","useRef","cancelled","useEffect","then"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Blocks/HTML/Edit.jsx"],"sourcesContent":["/**\n * Edit html block.\n * @module components/manage/Blocks/HTML/Edit\n */\n\nimport { compose } from 'redux';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Popup } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport loadable from '@loadable/component';\nimport { isEqual } from 'lodash';\n\nimport { Icon } from '@plone/volto/components';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport showSVG from '@plone/volto/icons/show.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport codeSVG from '@plone/volto/icons/code.svg';\nimport indentSVG from '@plone/volto/icons/indent.svg';\n\nconst Editor = loadable(() => import('react-simple-code-editor'));\n\nconst messages = defineMessages({\n  source: {\n    id: 'Source',\n    defaultMessage: 'Source',\n  },\n  preview: {\n    id: 'Preview',\n    defaultMessage: 'Preview',\n  },\n  placeholder: {\n    id: '<p>Add some HTML here</p>',\n    defaultMessage: '<p>Add some HTML here</p>',\n  },\n  prettier: {\n    id: 'Prettify your code',\n    defaultMessage: 'Prettify your code',\n  },\n  clear: {\n    id: 'Clear',\n    defaultMessage: 'Clear',\n  },\n  code: {\n    id: 'Code',\n    defaultMessage: 'Code',\n  },\n});\n\n/**\n * Edit html block class.\n * @class Edit\n * @extends Component\n */\nclass Edit extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    selected: PropTypes.bool.isRequired,\n    block: PropTypes.string.isRequired,\n    index: PropTypes.number.isRequired,\n    data: PropTypes.objectOf(PropTypes.any).isRequired,\n    onChangeBlock: PropTypes.func.isRequired,\n    onSelectBlock: PropTypes.func.isRequired,\n    onDeleteBlock: PropTypes.func.isRequired,\n    handleKeyDown: PropTypes.func.isRequired,\n    editable: PropTypes.bool,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    editable: true,\n  };\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      isPreview: false,\n    };\n    this.onChangeCode = this.onChangeCode.bind(this);\n    this.onPreview = this.onPreview.bind(this);\n    this.onCodeEditor = this.onCodeEditor.bind(this);\n  }\n\n  codeEditorRef = React.createRef();\n  savedSelection = {};\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    // The selection is saved in the snapshot.\n    this.savedSelection = snapshot;\n\n    this.restoreSelectionAndFocus(this.codeEditorRef.current);\n  }\n\n  /**\n   * @param {*} nextProps\n   * @param {*} nextState\n   * @returns {boolean}\n   * @memberof Edit\n   */\n  shouldComponentUpdate(nextProps) {\n    // Always rerender when the DOM node is not created for the Editor (the\n    // first call to shouldComponentUpdate).\n    if (!this._input) {\n      return true;\n    }\n\n    // Rerender the entire component when the Editor in it changes its selection\n    // because this way we get a call to getSnapshotBeforeUpdate where we can\n    // save the selection.\n    return (\n      this.props.selected ||\n      !isEqual(this.props.data, nextProps.data) ||\n      this._input.selectionStart !== this.savedSelection.selectionStart ||\n      this._input.selectionEnd !== this.savedSelection.selectionEnd\n    );\n  }\n\n  /**\n   * Change html handler\n   * @method onChangeCode\n   * @param {string} code New value html\n   * @returns {undefined}\n   */\n  onChangeCode(code) {\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      html: code,\n    });\n  }\n\n  getValue() {\n    return this.props.data.html || '';\n  }\n\n  /**\n   * Preview mode handler\n   * @method onPreview\n   * @returns {undefined}\n   */\n  onPreview() {\n    try {\n      const code = this.props.prettierStandalone\n        .format(this.getValue(), {\n          parser: 'html',\n          plugins: [this.props.prettierParserHtml],\n        })\n        .trim();\n      this.setState(\n        {\n          isPreview: !this.state.isPreview,\n        },\n        () => this.onChangeCode(code),\n      );\n    } catch (ex) {\n      // error while parsing the user-typed HTML\n      // TODO: show a toast notification or something similar to the user\n    }\n  }\n\n  /**\n   * Prettify handler\n   * @method onPrettify\n   * @returns {undefined}\n   */\n  onPrettify = () => {\n    try {\n      const code = this.props.prettierStandalone\n        .format(this.getValue(), {\n          parser: 'html',\n          plugins: [this.props.prettierParserHtml],\n        })\n        .trim();\n      this.onChangeCode(code);\n    } catch (ex) {\n      // error while parsing the user-typed HTML\n      // TODO: show a toast notification or something similar to the user\n    }\n  };\n\n  /**\n   * Code Editor mode handler\n   * @method onPreview\n   * @returns {undefined}\n   */\n  onCodeEditor() {\n    this.setState({ isPreview: !this.state.isPreview });\n  }\n\n  getSelection = (editor) => {\n    if (!editor || !editor._input) {\n      return {};\n    }\n\n    const o = {};\n    if (editor._input.selectionStart) {\n      o.selectionStart = editor._input.selectionStart;\n    }\n    if (editor._input.selectionEnd) {\n      o.selectionEnd = editor._input.selectionEnd;\n    }\n    return o;\n  };\n\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    return this.getSelection(this.codeEditorRef.current);\n  }\n\n  restoreSelectionAndFocus = (editor) => {\n    // Don't restore selection when the block is not selected.\n    if (\n      this.props.selected &&\n      editor._input &&\n      typeof this.savedSelection?.selectionStart === 'number' &&\n      typeof this.savedSelection?.selectionEnd === 'number'\n    ) {\n      editor._input.selectionStart = this.savedSelection?.selectionStart;\n      editor._input.selectionEnd = this.savedSelection?.selectionEnd;\n      editor._input.focus();\n    }\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const placeholder =\n      this.props.data.placeholder ||\n      this.props.intl.formatMessage(messages.placeholder);\n    const value = this.getValue();\n    return (\n      <>\n        {this.props.selected && value && (\n          <div className=\"toolbar\">\n            <Popup\n              trigger={\n                <Button\n                  icon\n                  basic\n                  aria-label={this.props.intl.formatMessage(messages.source)}\n                  active={!this.state.isPreview}\n                  onClick={this.onCodeEditor}\n                >\n                  <Icon name={codeSVG} size=\"24px\" />\n                </Button>\n              }\n              position=\"top center\"\n              content={this.props.intl.formatMessage(messages.code)}\n              size=\"mini\"\n            />\n            <Popup\n              trigger={\n                <Button\n                  icon\n                  basic\n                  aria-label={this.props.intl.formatMessage(messages.preview)}\n                  active={this.state.isPreview}\n                  onClick={this.onPreview}\n                >\n                  <Icon name={showSVG} size=\"24px\" />\n                </Button>\n              }\n              position=\"top center\"\n              content={this.props.intl.formatMessage(messages.preview)}\n              size=\"mini\"\n            />\n            <Popup\n              trigger={\n                <Button\n                  icon\n                  basic\n                  aria-label={this.props.intl.formatMessage(messages.prettier)}\n                  onClick={this.onPrettify}\n                >\n                  <Icon name={indentSVG} size=\"24px\" />\n                </Button>\n              }\n              position=\"top center\"\n              content={this.props.intl.formatMessage(messages.prettier)}\n              size=\"mini\"\n            />\n            <div className=\"separator\" />\n            <Popup\n              trigger={\n                <Button.Group>\n                  <Button icon basic onClick={() => this.onChangeCode('')}>\n                    <Icon name={clearSVG} size=\"24px\" color=\"#e40166\" />\n                  </Button>\n                </Button.Group>\n              }\n              position=\"top center\"\n              content={this.props.intl.formatMessage(messages.clear)}\n              size=\"mini\"\n            />\n          </div>\n        )}\n        {this.state.isPreview ? (\n          <div dangerouslySetInnerHTML={{ __html: value }} />\n        ) : (\n          <Editor\n            value={this.getValue()}\n            readOnly={!this.props.editable}\n            placeholder={placeholder}\n            onValueChange={(code) => this.onChangeCode(code)}\n            highlight={\n              this.props.prismCore?.highlight &&\n              this.props.prismCore?.languages?.html\n                ? (code) =>\n                    this.props.prismCore.highlight(\n                      code,\n                      this.props.prismCore.languages.html,\n                      'html',\n                    )\n                : () => {}\n            }\n            padding={8}\n            className=\"html-editor\"\n            ref={(node) => {\n              if (node) {\n                this.codeEditorRef.current = node;\n              }\n            }}\n            ignoreTabKey={true}\n          />\n        )}\n      </>\n    );\n  }\n}\n\nconst withPrismMarkup = (WrappedComponent) => (props) => {\n  const [loaded, setLoaded] = React.useState();\n  const promise = React.useRef(null);\n  const cancelled = React.useRef(false);\n\n  React.useEffect(() => {\n    promise.current = import('prismjs/components/prism-markup');\n    promise.current.then(() => {\n      if (!cancelled.current) {\n        setLoaded(true);\n      }\n    });\n    return () => {\n      cancelled.current = true;\n    };\n  }, []);\n\n  return loaded ? <WrappedComponent {...props} /> : null;\n};\n\nexport default compose(\n  injectLazyLibs(['prettierStandalone', 'prettierParserHtml', 'prismCore']),\n  withPrismMarkup,\n  injectIntl,\n)(Edit);\n"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;;AAEA,SAASA,OAAO,QAAQ,OAAO;AAC/B,OAAOC,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,MAAM,EAAEC,KAAK,QAAQ,mBAAmB;AACjD,SAASC,cAAc,EAAEC,UAAU,QAAQ,YAAY;AACvD,OAAOC,QAAQ,MAAM,qBAAqB;AAG1C,SAASC,IAAI,QAAQ,yBAAyB;AAC9C,SAASC,cAAc,QAAQ,wCAAwC;AACvE,OAAOC,OAAO,MAAM,6BAA6B;AACjD,OAAOC,QAAQ,MAAM,8BAA8B;AACnD,OAAOC,OAAO,MAAM,6BAA6B;AACjD,OAAOC,SAAS,MAAM,+BAA+B;AAErD,MAAMC,MAAM,GAAGP,QAAQ;EAAA;EAAA;IAAA;EAAA;EAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;EAAA;EAAA,aAAC,MAAM,MAAM,oDAAC,0BAA0B,CAAC;EAAA;IAAA;IAAA;IAAA;IAAA;MAAA;MAAA;IAAA;EAAA;EAAA;IAAA;IAAA;MAAA;IAAA;IAAA;EAAA;EAAA;IAAA;MAAA;IAAA;IAAA;EAAA;AAAA,EAAC;AAEjE,MAAMQ,QAAQ,GAAGV,cAAc,CAAC;EAC9BW,MAAM;IAAA;IAAA;EAAA,CAGL;EACDC,OAAO;IAAA;IAAA;EAAA,CAGN;EACDC,WAAW;IAAA;IAAA;EAAA,CAGV;EACDC,QAAQ;IAAA;IAAA;EAAA,CAGP;EACDC,KAAK;IAAA;IAAA;EAAA,CAGJ;EACDC,IAAI;IAAA;IAAA;EAAA;AAIN,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA,MAAMC,IAAI,SAASrB,SAAS,CAAC;EAC3B;AACF;AACA;AACA;AACA;;EAaE;AACF;AACA;AACA;AACA;;EAIE;AACF;AACA;AACA;AACA;EACEsB,WAAW,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IAAC,oDASCxB,KAAK,CAACyB,SAAS,EAAE;IAAA,wCAChB,CAAC,CAAC;IAAA,oCAgFN,MAAM;MACjB,IAAI;QACF,MAAMJ,IAAI,GAAG,IAAI,CAACG,KAAK,CAACE,kBAAkB,CACvCC,MAAM,CAAC,IAAI,CAACC,QAAQ,EAAE,EAAE;UACvBC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE,CAAC,IAAI,CAACN,KAAK,CAACO,kBAAkB;QACzC,CAAC,CAAC,CACDC,IAAI,EAAE;QACT,IAAI,CAACC,YAAY,CAACZ,IAAI,CAAC;MACzB,CAAC,CAAC,OAAOa,EAAE,EAAE;QACX;QACA;MAAA;IAEJ,CAAC;IAAA,sCAWeC,MAAM,IAAK;MACzB,IAAI,CAACA,MAAM,IAAI,CAACA,MAAM,CAACC,MAAM,EAAE;QAC7B,OAAO,CAAC,CAAC;MACX;MAEA,MAAMC,CAAC,GAAG,CAAC,CAAC;MACZ,IAAIF,MAAM,CAACC,MAAM,CAACE,cAAc,EAAE;QAChCD,CAAC,CAACC,cAAc,GAAGH,MAAM,CAACC,MAAM,CAACE,cAAc;MACjD;MACA,IAAIH,MAAM,CAACC,MAAM,CAACG,YAAY,EAAE;QAC9BF,CAAC,CAACE,YAAY,GAAGJ,MAAM,CAACC,MAAM,CAACG,YAAY;MAC7C;MACA,OAAOF,CAAC;IACV,CAAC;IAAA,kDAM2BF,MAAM,IAAK;MAAA;MACrC;MACA,IACE,IAAI,CAACX,KAAK,CAACgB,QAAQ,IACnBL,MAAM,CAACC,MAAM,IACb,gCAAO,IAAI,CAACK,cAAc,yDAAnB,qBAAqBH,cAAc,MAAK,QAAQ,IACvD,iCAAO,IAAI,CAACG,cAAc,0DAAnB,sBAAqBF,YAAY,MAAK,QAAQ,EACrD;QAAA;QACAJ,MAAM,CAACC,MAAM,CAACE,cAAc,4BAAG,IAAI,CAACG,cAAc,0DAAnB,sBAAqBH,cAAc;QAClEH,MAAM,CAACC,MAAM,CAACG,YAAY,4BAAG,IAAI,CAACE,cAAc,0DAAnB,sBAAqBF,YAAY;QAC9DJ,MAAM,CAACC,MAAM,CAACM,KAAK,EAAE;MACvB;IACF,CAAC;IAhJC,IAAI,CAACC,KAAK,GAAG;MACXC,SAAS,EAAE;IACb,CAAC;IACD,IAAI,CAACX,YAAY,GAAG,IAAI,CAACA,YAAY,CAACY,IAAI,CAAC,IAAI,CAAC;IAChD,IAAI,CAACC,SAAS,GAAG,IAAI,CAACA,SAAS,CAACD,IAAI,CAAC,IAAI,CAAC;IAC1C,IAAI,CAACE,YAAY,GAAG,IAAI,CAACA,YAAY,CAACF,IAAI,CAAC,IAAI,CAAC;EAClD;EAKAG,kBAAkB,CAACC,SAAS,EAAEC,SAAS,EAAEC,QAAQ,EAAE;IACjD;IACA,IAAI,CAACV,cAAc,GAAGU,QAAQ;IAE9B,IAAI,CAACC,wBAAwB,CAAC,IAAI,CAACC,aAAa,CAACC,OAAO,CAAC;EAC3D;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEC,qBAAqB,CAACC,SAAS,EAAE;IAC/B;IACA;IACA,IAAI,CAAC,IAAI,CAACpB,MAAM,EAAE;MAChB,OAAO,IAAI;IACb;;IAEA;IACA;IACA;IACA,OACE,IAAI,CAACZ,KAAK,CAACgB,QAAQ,IACnB,CAAC,SAAQ,IAAI,CAAChB,KAAK,CAACiC,IAAI,EAAED,SAAS,CAACC,IAAI,CAAC,IACzC,IAAI,CAACrB,MAAM,CAACE,cAAc,KAAK,IAAI,CAACG,cAAc,CAACH,cAAc,IACjE,IAAI,CAACF,MAAM,CAACG,YAAY,KAAK,IAAI,CAACE,cAAc,CAACF,YAAY;EAEjE;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEN,YAAY,CAACZ,IAAI,EAAE;IACjB,IAAI,CAACG,KAAK,CAACkC,aAAa,CAAC,IAAI,CAAClC,KAAK,CAACmC,KAAK,kCACpC,IAAI,CAACnC,KAAK,CAACiC,IAAI;MAClBG,IAAI,EAAEvC;IAAI,GACV;EACJ;EAEAO,QAAQ,GAAG;IACT,OAAO,IAAI,CAACJ,KAAK,CAACiC,IAAI,CAACG,IAAI,IAAI,EAAE;EACnC;;EAEA;AACF;AACA;AACA;AACA;EACEd,SAAS,GAAG;IACV,IAAI;MACF,MAAMzB,IAAI,GAAG,IAAI,CAACG,KAAK,CAACE,kBAAkB,CACvCC,MAAM,CAAC,IAAI,CAACC,QAAQ,EAAE,EAAE;QACvBC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE,CAAC,IAAI,CAACN,KAAK,CAACO,kBAAkB;MACzC,CAAC,CAAC,CACDC,IAAI,EAAE;MACT,IAAI,CAAC6B,QAAQ,CACX;QACEjB,SAAS,EAAE,CAAC,IAAI,CAACD,KAAK,CAACC;MACzB,CAAC,EACD,MAAM,IAAI,CAACX,YAAY,CAACZ,IAAI,CAAC,CAC9B;IACH,CAAC,CAAC,OAAOa,EAAE,EAAE;MACX;MACA;IAAA;EAEJ;;EAEA;AACF;AACA;AACA;AACA;;EAgBE;AACF;AACA;AACA;AACA;EACEa,YAAY,GAAG;IACb,IAAI,CAACc,QAAQ,CAAC;MAAEjB,SAAS,EAAE,CAAC,IAAI,CAACD,KAAK,CAACC;IAAU,CAAC,CAAC;EACrD;EAiBAkB,uBAAuB,CAACb,SAAS,EAAEC,SAAS,EAAE;IAC5C,OAAO,IAAI,CAACa,YAAY,CAAC,IAAI,CAACV,aAAa,CAACC,OAAO,CAAC;EACtD;EAgBA;AACF;AACA;AACA;AACA;EACEU,MAAM,GAAG;IAAA;IACP,MAAM9C,WAAW,GACf,IAAI,CAACM,KAAK,CAACiC,IAAI,CAACvC,WAAW,IAC3B,IAAI,CAACM,KAAK,CAACyC,IAAI,CAACC,aAAa,CAACnD,QAAQ,CAACG,WAAW,CAAC;IACrD,MAAMiD,KAAK,GAAG,IAAI,CAACvC,QAAQ,EAAE;IAC7B,OACE,4BACG,IAAI,CAACJ,KAAK,CAACgB,QAAQ,IAAI2B,KAAK,IAC3B;MAAK,SAAS,EAAC,SAAS;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACtB,MAAC,KAAK;MACJ,OAAO,EACL,MAAC,MAAM;QACL,IAAI;QACJ,KAAK;QACL,cAAY,IAAI,CAAC3C,KAAK,CAACyC,IAAI,CAACC,aAAa,CAACnD,QAAQ,CAACC,MAAM,CAAE;QAC3D,MAAM,EAAE,CAAC,IAAI,CAAC2B,KAAK,CAACC,SAAU;QAC9B,OAAO,EAAE,IAAI,CAACG,YAAa;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAE3B,MAAC,IAAI;QAAC,IAAI,EAAEnC,OAAQ;QAAC,IAAI,EAAC,MAAM;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAAG,CAEtC;MACD,QAAQ,EAAC,YAAY;MACrB,OAAO,EAAE,IAAI,CAACY,KAAK,CAACyC,IAAI,CAACC,aAAa,CAACnD,QAAQ,CAACM,IAAI,CAAE;MACtD,IAAI,EAAC,MAAM;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EACX,EACF,MAAC,KAAK;MACJ,OAAO,EACL,MAAC,MAAM;QACL,IAAI;QACJ,KAAK;QACL,cAAY,IAAI,CAACG,KAAK,CAACyC,IAAI,CAACC,aAAa,CAACnD,QAAQ,CAACE,OAAO,CAAE;QAC5D,MAAM,EAAE,IAAI,CAAC0B,KAAK,CAACC,SAAU;QAC7B,OAAO,EAAE,IAAI,CAACE,SAAU;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAExB,MAAC,IAAI;QAAC,IAAI,EAAEpC,OAAQ;QAAC,IAAI,EAAC,MAAM;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAAG,CAEtC;MACD,QAAQ,EAAC,YAAY;MACrB,OAAO,EAAE,IAAI,CAACc,KAAK,CAACyC,IAAI,CAACC,aAAa,CAACnD,QAAQ,CAACE,OAAO,CAAE;MACzD,IAAI,EAAC,MAAM;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EACX,EACF,MAAC,KAAK;MACJ,OAAO,EACL,MAAC,MAAM;QACL,IAAI;QACJ,KAAK;QACL,cAAY,IAAI,CAACO,KAAK,CAACyC,IAAI,CAACC,aAAa,CAACnD,QAAQ,CAACI,QAAQ,CAAE;QAC7D,OAAO,EAAE,IAAI,CAACiD,UAAW;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAEzB,MAAC,IAAI;QAAC,IAAI,EAAEvD,SAAU;QAAC,IAAI,EAAC,MAAM;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAAG,CAExC;MACD,QAAQ,EAAC,YAAY;MACrB,OAAO,EAAE,IAAI,CAACW,KAAK,CAACyC,IAAI,CAACC,aAAa,CAACnD,QAAQ,CAACI,QAAQ,CAAE;MAC1D,IAAI,EAAC,MAAM;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EACX,EACF;MAAK,SAAS,EAAC,WAAW;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAG,EAC7B,MAAC,KAAK;MACJ,OAAO,EACL,MAAC,MAAM,CAAC,KAAK;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GACX,MAAC,MAAM;QAAC,IAAI;QAAC,KAAK;QAAC,OAAO,EAAE,MAAM,IAAI,CAACc,YAAY,CAAC,EAAE,CAAE;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GACtD,MAAC,IAAI;QAAC,IAAI,EAAEtB,QAAS;QAAC,IAAI,EAAC,MAAM;QAAC,KAAK,EAAC,SAAS;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAAG,CAC7C,CAEZ;MACD,QAAQ,EAAC,YAAY;MACrB,OAAO,EAAE,IAAI,CAACa,KAAK,CAACyC,IAAI,CAACC,aAAa,CAACnD,QAAQ,CAACK,KAAK,CAAE;MACvD,IAAI,EAAC,MAAM;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EACX,CAEL,EACA,IAAI,CAACuB,KAAK,CAACC,SAAS,GACnB;MAAK,uBAAuB,EAAE;QAAEyB,MAAM,EAAEF;MAAM,CAAE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAG,GAEnD,MAAC,MAAM;MACL,KAAK,EAAE,IAAI,CAACvC,QAAQ,EAAG;MACvB,QAAQ,EAAE,CAAC,IAAI,CAACJ,KAAK,CAAC8C,QAAS;MAC/B,WAAW,EAAEpD,WAAY;MACzB,aAAa,EAAGG,IAAI,IAAK,IAAI,CAACY,YAAY,CAACZ,IAAI,CAAE;MACjD,SAAS,EACP,6BAAI,CAACG,KAAK,CAAC+C,SAAS,kDAApB,sBAAsBC,SAAS,8BAC/B,IAAI,CAAChD,KAAK,CAAC+C,SAAS,6EAApB,uBAAsBE,SAAS,mDAA/B,uBAAiCb,IAAI,GAChCvC,IAAI,IACH,IAAI,CAACG,KAAK,CAAC+C,SAAS,CAACC,SAAS,CAC5BnD,IAAI,EACJ,IAAI,CAACG,KAAK,CAAC+C,SAAS,CAACE,SAAS,CAACb,IAAI,EACnC,MAAM,CACP,GACH,MAAM,CAAC,CACZ;MACD,OAAO,EAAE,CAAE;MACX,SAAS,EAAC,aAAa;MACvB,GAAG,EAAGc,IAAI,IAAK;QACb,IAAIA,IAAI,EAAE;UACR,IAAI,CAACrB,aAAa,CAACC,OAAO,GAAGoB,IAAI;QACnC;MACF,CAAE;MACF,YAAY,EAAE,IAAK;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAEtB,CACA;EAEP;AACF;AAAC,gBA/RKpD,IAAI,eAMW;EACjBkB,QAAQ,EAAEtC,SAAS,CAACyE,IAAI,CAACC,UAAU;EACnCjB,KAAK,EAAEzD,SAAS,CAAC2E,MAAM,CAACD,UAAU;EAClCE,KAAK,EAAE5E,SAAS,CAAC6E,MAAM,CAACH,UAAU;EAClCnB,IAAI,EAAEvD,SAAS,CAAC8E,QAAQ,CAAC9E,SAAS,CAAC+E,GAAG,CAAC,CAACL,UAAU;EAClDlB,aAAa,EAAExD,SAAS,CAACgF,IAAI,CAACN,UAAU;EACxCO,aAAa,EAAEjF,SAAS,CAACgF,IAAI,CAACN,UAAU;EACxCQ,aAAa,EAAElF,SAAS,CAACgF,IAAI,CAACN,UAAU;EACxCS,aAAa,EAAEnF,SAAS,CAACgF,IAAI,CAACN,UAAU;EACxCN,QAAQ,EAAEpE,SAAS,CAACyE;AACtB,CAAC;AAAA,gBAhBGrD,IAAI,kBAuBc;EACpBgD,QAAQ,EAAE;AACZ,CAAC;AAwQH,MAAMgB,eAAe,GAAIC,gBAAgB,IAAM/D,KAAK,IAAK;EACvD,MAAM,CAACgE,MAAM,EAAEC,SAAS,CAAC,GAAGzF,KAAK,CAAC0F,QAAQ,EAAE;EAC5C,MAAMC,OAAO,GAAG3F,KAAK,CAAC4F,MAAM,CAAC,IAAI,CAAC;EAClC,MAAMC,SAAS,GAAG7F,KAAK,CAAC4F,MAAM,CAAC,KAAK,CAAC;EAErC5F,KAAK,CAAC8F,SAAS,CAAC,MAAM;IACpBH,OAAO,CAACrC,OAAO,GAAG,MAAM,CAAC,iCAAiC,CAAC;IAC3DqC,OAAO,CAACrC,OAAO,CAACyC,IAAI,CAAC,MAAM;MACzB,IAAI,CAACF,SAAS,CAACvC,OAAO,EAAE;QACtBmC,SAAS,CAAC,IAAI,CAAC;MACjB;IACF,CAAC,CAAC;IACF,OAAO,MAAM;MACXI,SAAS,CAACvC,OAAO,GAAG,IAAI;IAC1B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOkC,MAAM,GAAG,MAAC,gBAAgB,eAAKhE,KAAK;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAI,GAAG,IAAI;AACxD,CAAC;AAED,eAAezB,OAAO,CACpBU,cAAc,CAAC,CAAC,oBAAoB,EAAE,oBAAoB,EAAE,WAAW,CAAC,CAAC,EACzE6E,eAAe,EACfhF,UAAU,CACX,CAACgB,IAAI,CAAC"},"metadata":{"react-intl":{"messages":[{"id":"Source","defaultMessage":"Source"},{"id":"Preview","defaultMessage":"Preview"},{"id":"<p>Add some HTML here</p>","defaultMessage":"<p>Add some HTML here</p>"},{"id":"Prettify your code","defaultMessage":"Prettify your code"},{"id":"Clear","defaultMessage":"Clear"},{"id":"Code","defaultMessage":"Code"}]}},"sourceType":"module","externalDependencies":[]}