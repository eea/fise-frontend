{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport { SET_BLOCKS_CLIPBOARD, RESET_BLOCKS_CLIPBOARD } from '@plone/volto/constants/ActionTypes';\n\n/**\n * Copy blocks to clipboard function.\n * @function copyBlocks\n * @param {array} blocksData Block data\n * @returns {Object} Copy action.\n */\nexport function setBlocksClipboard(payload) {\n  return _objectSpread({\n    type: SET_BLOCKS_CLIPBOARD\n  }, Object.assign({}, payload.cut ? {\n    cut: payload.cut.filter(b => !!b)\n  } : {}, payload.copy ? {\n    copy: payload.copy.filter(b => !!b)\n  } : {}));\n}\n\n/**\n * Reset blocks clipboard function.\n * @function resetBlocksClipboard\n * @returns {Object} Reset blocks clipboard\n */\nexport function resetBlocksClipboard() {\n  return {\n    type: RESET_BLOCKS_CLIPBOARD\n  };\n}","map":{"version":3,"names":["SET_BLOCKS_CLIPBOARD","RESET_BLOCKS_CLIPBOARD","setBlocksClipboard","payload","type","Object","assign","cut","filter","b","copy","resetBlocksClipboard"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/actions/blocksClipboard/blocksClipboard.js"],"sourcesContent":["import {\n  SET_BLOCKS_CLIPBOARD,\n  RESET_BLOCKS_CLIPBOARD,\n} from '@plone/volto/constants/ActionTypes';\n\n/**\n * Copy blocks to clipboard function.\n * @function copyBlocks\n * @param {array} blocksData Block data\n * @returns {Object} Copy action.\n */\nexport function setBlocksClipboard(payload) {\n  return {\n    type: SET_BLOCKS_CLIPBOARD,\n    ...Object.assign(\n      {},\n      payload.cut ? { cut: payload.cut.filter((b) => !!b) } : {},\n      payload.copy ? { copy: payload.copy.filter((b) => !!b) } : {},\n    ),\n  };\n}\n\n/**\n * Reset blocks clipboard function.\n * @function resetBlocksClipboard\n * @returns {Object} Reset blocks clipboard\n */\nexport function resetBlocksClipboard() {\n  return {\n    type: RESET_BLOCKS_CLIPBOARD,\n  };\n}\n"],"mappings":";;;AAAA,SACEA,oBAAoB,EACpBC,sBAAsB,QACjB,oCAAoC;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,kBAAkB,CAACC,OAAO,EAAE;EAC1C;IACEC,IAAI,EAAEJ;EAAoB,GACvBK,MAAM,CAACC,MAAM,CACd,CAAC,CAAC,EACFH,OAAO,CAACI,GAAG,GAAG;IAAEA,GAAG,EAAEJ,OAAO,CAACI,GAAG,CAACC,MAAM,CAAEC,CAAC,IAAK,CAAC,CAACA,CAAC;EAAE,CAAC,GAAG,CAAC,CAAC,EAC1DN,OAAO,CAACO,IAAI,GAAG;IAAEA,IAAI,EAAEP,OAAO,CAACO,IAAI,CAACF,MAAM,CAAEC,CAAC,IAAK,CAAC,CAACA,CAAC;EAAE,CAAC,GAAG,CAAC,CAAC,CAC9D;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,oBAAoB,GAAG;EACrC,OAAO;IACLP,IAAI,EAAEH;EACR,CAAC;AACH"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}