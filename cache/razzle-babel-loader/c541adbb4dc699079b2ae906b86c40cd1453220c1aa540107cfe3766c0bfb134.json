{"ast":null,"code":"import { defineMessages } from 'react-intl';\nvar messages = defineMessages({\n  hideHeaders: {\n    \"id\": \"Hide headers\",\n    \"defaultMessage\": \"Hide headers\"\n  },\n  responsive: {\n    \"id\": \"Responsive\",\n    \"defaultMessage\": \"Responsive\"\n  },\n  sortable: {\n    \"id\": \"Make the table sortable\",\n    \"defaultMessage\": \"Make the table sortable\"\n  },\n  sortableDescription: {\n    \"id\": \"Visible only in view mode\",\n    \"defaultMessage\": \"Visible only in view mode\"\n  },\n  fixed: {\n    \"id\": \"Fixed width table cells\",\n    \"defaultMessage\": \"Fixed width table cells\"\n  },\n  compact: {\n    \"id\": \"Make the table compact\",\n    \"defaultMessage\": \"Make the table compact\"\n  },\n  basic: {\n    \"id\": \"Reduce complexity\",\n    \"defaultMessage\": \"Reduce complexity\"\n  },\n  celled: {\n    \"id\": \"Divide each row into separate cells\",\n    \"defaultMessage\": \"Divide each row into separate cells\"\n  },\n  inverted: {\n    \"id\": \"Table color inverted\",\n    \"defaultMessage\": \"Table color inverted\"\n  },\n  striped: {\n    \"id\": \"Stripe alternate rows with color\",\n    \"defaultMessage\": \"Stripe alternate rows with color\"\n  },\n  textAlign: {\n    \"id\": \"Align text\",\n    \"defaultMessage\": \"Align text\"\n  },\n  verticalAlign: {\n    \"id\": \"Vertical align\",\n    \"defaultMessage\": \"Vertical align\"\n  },\n  left: {\n    \"id\": \"Left\",\n    \"defaultMessage\": \"Left\"\n  },\n  center: {\n    \"id\": \"Center\",\n    \"defaultMessage\": \"Center\"\n  },\n  right: {\n    \"id\": \"Right\",\n    \"defaultMessage\": \"Right\"\n  },\n  bottom: {\n    \"id\": \"Bottom\",\n    \"defaultMessage\": \"Bottom\"\n  },\n  middle: {\n    \"id\": \"Middle\",\n    \"defaultMessage\": \"Middle\"\n  },\n  top: {\n    \"id\": \"Top\",\n    \"defaultMessage\": \"Top\"\n  }\n});\nexport default (function (props) {\n  var intl = props.intl;\n  return {\n    title: 'Table',\n    fieldsets: [{\n      id: 'default',\n      title: 'Default',\n      fields: ['hideHeaders', 'sortable', 'responsive', 'fixed', 'celled', 'striped', 'compact', 'basic', 'inverted', 'textAlign', 'verticalAlign']\n    }],\n    properties: {\n      hideHeaders: {\n        title: intl.formatMessage(messages.hideHeaders),\n        type: 'boolean'\n      },\n      sortable: {\n        title: intl.formatMessage(messages.sortable),\n        description: 'Visible only in view mode',\n        type: 'boolean'\n      },\n      responsive: {\n        title: intl.formatMessage(messages.responsive),\n        type: 'boolean'\n      },\n      fixed: {\n        title: intl.formatMessage(messages.fixed),\n        type: 'boolean'\n      },\n      celled: {\n        title: intl.formatMessage(messages.celled),\n        type: 'boolean'\n      },\n      striped: {\n        title: intl.formatMessage(messages.striped),\n        type: 'boolean'\n      },\n      compact: {\n        title: intl.formatMessage(messages.compact),\n        type: 'boolean'\n      },\n      basic: {\n        title: intl.formatMessage(messages.basic),\n        type: 'boolean'\n      },\n      inverted: {\n        title: intl.formatMessage(messages.inverted),\n        type: 'boolean'\n      },\n      textAlign: {\n        title: intl.formatMessage(messages.textAlign),\n        widget: 'align'\n      },\n      verticalAlign: {\n        title: intl.formatMessage(messages.textAlign),\n        choices: [['bottom', intl.formatMessage(messages.bottom)], ['middle', intl.formatMessage(messages.middle)], ['top', intl.formatMessage(messages.top)]]\n      }\n    },\n    required: []\n  };\n});","map":{"version":3,"names":["defineMessages","messages","hideHeaders","responsive","sortable","sortableDescription","fixed","compact","basic","celled","inverted","striped","textAlign","verticalAlign","left","center","right","bottom","middle","top","props","intl","title","fieldsets","id","fields","properties","formatMessage","type","description","widget","choices","required"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-slate/src/blocks/Table/schema.js"],"sourcesContent":["import { defineMessages } from 'react-intl';\n\nconst messages = defineMessages({\n  hideHeaders: {\n    id: 'Hide headers',\n    defaultMessage: 'Hide headers',\n  },\n  responsive: {\n    id: 'Responsive',\n    defaultMessage: 'Responsive',\n  },\n  sortable: {\n    id: 'Make the table sortable',\n    defaultMessage: 'Make the table sortable',\n  },\n  sortableDescription: {\n    id: 'Visible only in view mode',\n    defaultMessage: 'Visible only in view mode',\n  },\n  fixed: {\n    id: 'Fixed width table cells',\n    defaultMessage: 'Fixed width table cells',\n  },\n  compact: {\n    id: 'Make the table compact',\n    defaultMessage: 'Make the table compact',\n  },\n  basic: {\n    id: 'Reduce complexity',\n    defaultMessage: 'Reduce complexity',\n  },\n  celled: {\n    id: 'Divide each row into separate cells',\n    defaultMessage: 'Divide each row into separate cells',\n  },\n  inverted: {\n    id: 'Table color inverted',\n    defaultMessage: 'Table color inverted',\n  },\n  striped: {\n    id: 'Stripe alternate rows with color',\n    defaultMessage: 'Stripe alternate rows with color',\n  },\n  textAlign: {\n    id: 'Align text',\n    defaultMessage: 'Align text',\n  },\n  verticalAlign: {\n    id: 'Vertical align',\n    defaultMessage: 'Vertical align',\n  },\n  left: {\n    id: 'Left',\n    defaultMessage: 'Left',\n  },\n  center: {\n    id: 'Center',\n    defaultMessage: 'Center',\n  },\n  right: {\n    id: 'Right',\n    defaultMessage: 'Right',\n  },\n  bottom: {\n    id: 'Bottom',\n    defaultMessage: 'Bottom',\n  },\n  middle: {\n    id: 'Middle',\n    defaultMessage: 'Middle',\n  },\n  top: {\n    id: 'Top',\n    defaultMessage: 'Top',\n  },\n});\n\nexport default (props) => {\n  const { intl } = props;\n\n  return {\n    title: 'Table',\n    fieldsets: [\n      {\n        id: 'default',\n        title: 'Default',\n        fields: [\n          'hideHeaders',\n          'sortable',\n          'responsive',\n          'fixed',\n          'celled',\n          'striped',\n          'compact',\n          'basic',\n          'inverted',\n          'textAlign',\n          'verticalAlign',\n        ],\n      },\n    ],\n    properties: {\n      hideHeaders: {\n        title: intl.formatMessage(messages.hideHeaders),\n        type: 'boolean',\n      },\n      sortable: {\n        title: intl.formatMessage(messages.sortable),\n        description: 'Visible only in view mode',\n        type: 'boolean',\n      },\n      responsive: {\n        title: intl.formatMessage(messages.responsive),\n        type: 'boolean',\n      },\n      fixed: {\n        title: intl.formatMessage(messages.fixed),\n        type: 'boolean',\n      },\n      celled: {\n        title: intl.formatMessage(messages.celled),\n        type: 'boolean',\n      },\n      striped: {\n        title: intl.formatMessage(messages.striped),\n        type: 'boolean',\n      },\n      compact: {\n        title: intl.formatMessage(messages.compact),\n        type: 'boolean',\n      },\n      basic: {\n        title: intl.formatMessage(messages.basic),\n        type: 'boolean',\n      },\n      inverted: {\n        title: intl.formatMessage(messages.inverted),\n        type: 'boolean',\n      },\n      textAlign: {\n        title: intl.formatMessage(messages.textAlign),\n        widget: 'align',\n      },\n      verticalAlign: {\n        title: intl.formatMessage(messages.textAlign),\n        choices: [\n          ['bottom', intl.formatMessage(messages.bottom)],\n          ['middle', intl.formatMessage(messages.middle)],\n          ['top', intl.formatMessage(messages.top)],\n        ],\n      },\n    },\n    required: [],\n  };\n};\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Hide headers","defaultMessage":"Hide headers"},{"id":"Responsive","defaultMessage":"Responsive"},{"id":"Make the table sortable","defaultMessage":"Make the table sortable"},{"id":"Visible only in view mode","defaultMessage":"Visible only in view mode"},{"id":"Fixed width table cells","defaultMessage":"Fixed width table cells"},{"id":"Make the table compact","defaultMessage":"Make the table compact"},{"id":"Reduce complexity","defaultMessage":"Reduce complexity"},{"id":"Divide each row into separate cells","defaultMessage":"Divide each row into separate cells"},{"id":"Table color inverted","defaultMessage":"Table color inverted"},{"id":"Stripe alternate rows with color","defaultMessage":"Stripe alternate rows with color"},{"id":"Align text","defaultMessage":"Align text"},{"id":"Vertical align","defaultMessage":"Vertical align"},{"id":"Left","defaultMessage":"Left"},{"id":"Center","defaultMessage":"Center"},{"id":"Right","defaultMessage":"Right"},{"id":"Bottom","defaultMessage":"Bottom"},{"id":"Middle","defaultMessage":"Middle"},{"id":"Top","defaultMessage":"Top"}]}},"sourceType":"module","externalDependencies":[]}