{"ast":null,"code":"export var matchesEntityType = function matchesEntityType(type) {\n  return type === 'LINK';\n};\n\n/**\n *\n *\n * @export strategy\n * @param {*} contentBlock contentBlock\n * @param {*} cb cb\n * @param {*} contentState contentState\n * @returns {*} string\n */\nexport default function strategy(contentBlock, cb, contentState) {\n  if (!contentState) return;\n  contentBlock.findEntityRanges(function (character) {\n    var entityKey = character.getEntity();\n    return entityKey !== null && matchesEntityType(contentState.getEntity(entityKey).getType());\n  }, cb);\n}","map":{"version":3,"names":["matchesEntityType","type","strategy","contentBlock","cb","contentState","findEntityRanges","character","entityKey","getEntity","getType"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/AnchorPlugin/linkStrategy.js"],"sourcesContent":["export const matchesEntityType = (type) => type === 'LINK';\n\n/**\n *\n *\n * @export strategy\n * @param {*} contentBlock contentBlock\n * @param {*} cb cb\n * @param {*} contentState contentState\n * @returns {*} string\n */\nexport default function strategy(contentBlock, cb, contentState) {\n  if (!contentState) return;\n  contentBlock.findEntityRanges((character) => {\n    const entityKey = character.getEntity();\n    return (\n      entityKey !== null &&\n      matchesEntityType(contentState.getEntity(entityKey).getType())\n    );\n  }, cb);\n}\n"],"mappings":"AAAA,OAAO,IAAMA,iBAAiB,GAAG,SAApBA,iBAAiB,CAAIC,IAAI;EAAA,OAAKA,IAAI,KAAK,MAAM;AAAA;;AAE1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,QAAQ,CAACC,YAAY,EAAEC,EAAE,EAAEC,YAAY,EAAE;EAC/D,IAAI,CAACA,YAAY,EAAE;EACnBF,YAAY,CAACG,gBAAgB,CAAC,UAACC,SAAS,EAAK;IAC3C,IAAMC,SAAS,GAAGD,SAAS,CAACE,SAAS,EAAE;IACvC,OACED,SAAS,KAAK,IAAI,IAClBR,iBAAiB,CAACK,YAAY,CAACI,SAAS,CAACD,SAAS,CAAC,CAACE,OAAO,EAAE,CAAC;EAElE,CAAC,EAAEN,EAAE,CAAC;AACR"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}