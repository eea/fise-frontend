{"ast":null,"code":"import _extends from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/extends.js\";\nimport _slicedToArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _isEqual from \"lodash/isEqual\";\nimport _map from \"lodash/map\";\nimport _keys from \"lodash/keys\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Form/InlineForm.jsx\",\n  _this = this,\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Accordion, Segment, Message } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport AnimateHeight from 'react-animate-height';\nimport { Field, Icon } from '@plone/volto/components';\nimport upSVG from '@plone/volto/icons/up-key.svg';\nimport downSVG from '@plone/volto/icons/down-key.svg';\nvar messages = defineMessages({\n  editValues: {\n    \"id\": \"Edit values\",\n    \"defaultMessage\": \"Edit values\"\n  },\n  error: {\n    \"id\": \"Error\",\n    \"defaultMessage\": \"Error\"\n  },\n  thereWereSomeErrors: {\n    \"id\": \"There were some errors\",\n    \"defaultMessage\": \"There were some errors\"\n  }\n});\nvar InlineForm = function InlineForm(props) {\n  _s();\n  var block = props.block,\n    description = props.description,\n    error = props.error,\n    _props$errors = props.errors,\n    errors = _props$errors === void 0 ? {} : _props$errors,\n    formData = props.formData,\n    onChangeField = props.onChangeField,\n    schema = props.schema,\n    title = props.title,\n    icon = props.icon,\n    headerActions = props.headerActions,\n    footer = props.footer,\n    focusIndex = props.focusIndex,\n    intl = props.intl;\n  var _ = intl.formatMessage;\n  var defaultFieldset = schema.fieldsets.find(function (o) {\n    return o.id === 'default';\n  });\n  var other = schema.fieldsets.filter(function (o) {\n    return o.id !== 'default';\n  });\n  React.useEffect(function () {\n    // Will set field values from schema, by matching the default values\n\n    var objectSchema = typeof schema === 'function' ? schema(props) : schema;\n    var initialData = _objectSpread(_objectSpread({}, Object.keys(objectSchema.properties).reduce(function (accumulator, currentField) {\n      return objectSchema.properties[currentField][\"default\"] ? _objectSpread(_objectSpread({}, accumulator), {}, _defineProperty({}, currentField, objectSchema.properties[currentField][\"default\"])) : accumulator;\n    }, {})), formData);\n    Object.keys(initialData).forEach(function (k) {\n      if (!_isEqual(initialData[k], formData === null || formData === void 0 ? void 0 : formData[k])) {\n        onChangeField(k, initialData[k]);\n      }\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  var _React$useState = React.useState(0),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    currentActiveFieldset = _React$useState2[0],\n    setCurrentActiveFieldset = _React$useState2[1];\n  function handleCurrentActiveFieldset(e, blockProps) {\n    var index = blockProps.index;\n    var newIndex = currentActiveFieldset === index ? -1 : index;\n    setCurrentActiveFieldset(newIndex);\n  }\n  return __jsx(\"div\", {\n    className: \"ui form\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, title && __jsx(\"header\", {\n    className: \"header pulled\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, icon, __jsx(\"h2\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, title || _(messages.editValues)), headerActions), description && __jsx(Segment, {\n    secondary: true,\n    className: \"attached\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, description), _keys(errors).length > 0 && __jsx(Message, {\n    icon: \"warning\",\n    negative: true,\n    attached: true,\n    header: _(messages.error),\n    content: _(messages.thereWereSomeErrors),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }), error && __jsx(Message, {\n    icon: \"warning\",\n    negative: true,\n    attached: true,\n    header: _(messages.error),\n    content: error.message,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }), __jsx(\"div\", {\n    id: \"blockform-fieldset-\".concat(defaultFieldset.id),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, __jsx(Segment, {\n    className: \"form attached\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, _map(defaultFieldset.fields, function (field, index) {\n    return __jsx(Field, _extends({}, schema.properties[field], {\n      id: field,\n      fieldSet: defaultFieldset.title.toLowerCase(),\n      focus: index === focusIndex,\n      value: formData[field],\n      required: schema.required.indexOf(field) !== -1,\n      onChange: function onChange(id, value) {\n        onChangeField(id, value);\n      },\n      key: field,\n      error: errors[field],\n      block: block,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 13\n      }\n    }));\n  }))), other.map(function (fieldset, index) {\n    return __jsx(Accordion, {\n      fluid: true,\n      styled: true,\n      className: \"form\",\n      key: fieldset.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      key: fieldset.id,\n      id: \"blockform-fieldset-\".concat(fieldset.id),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }\n    }, __jsx(Accordion.Title, {\n      active: currentActiveFieldset === index,\n      index: index,\n      onClick: handleCurrentActiveFieldset,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 13\n      }\n    }, fieldset.title && __jsx(React.Fragment, null, fieldset.title), currentActiveFieldset === index ? __jsx(Icon, {\n      name: upSVG,\n      size: \"20px\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 17\n      }\n    }) : __jsx(Icon, {\n      name: downSVG,\n      size: \"20px\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }\n    })), __jsx(Accordion.Content, {\n      active: currentActiveFieldset === index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 13\n      }\n    }, __jsx(AnimateHeight, {\n      animateOpacity: true,\n      duration: 500,\n      height: currentActiveFieldset === index ? 'auto' : 0,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 15\n      }\n    }, __jsx(Segment, {\n      className: \"attached\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }\n    }, _map(fieldset.fields, function (field) {\n      return __jsx(Field, _extends({}, schema.properties[field], {\n        id: field,\n        value: formData[field],\n        required: schema.required.indexOf(field) !== -1,\n        onChange: function onChange(id, value) {\n          onChangeField(id, value);\n        },\n        key: field,\n        error: errors[field],\n        block: block,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }\n      }));\n    }))))));\n  }), footer);\n};\n_s(InlineForm, \"GKMnGPzds9HQ5xLCRnAeu7rTBuI=\");\n_c = InlineForm;\nInlineForm.defaultProps = {\n  block: null,\n  description: null,\n  formData: null,\n  onChangeField: null,\n  error: null,\n  errors: {},\n  schema: {},\n  focusIndex: null\n};\nInlineForm.propTypes = {\n  block: PropTypes.string,\n  description: PropTypes.string,\n  schema: PropTypes.shape({\n    fieldsets: PropTypes.arrayOf(PropTypes.shape({\n      fields: PropTypes.arrayOf(PropTypes.string),\n      id: PropTypes.string,\n      title: PropTypes.string\n    })),\n    properties: PropTypes.objectOf(PropTypes.any),\n    definitions: PropTypes.objectOf(PropTypes.any),\n    required: PropTypes.arrayOf(PropTypes.string)\n  }),\n  formData: PropTypes.objectOf(PropTypes.any),\n  pathname: PropTypes.string,\n  onChangeField: PropTypes.func,\n  error: PropTypes.shape({\n    message: PropTypes.string\n  }),\n  focusIndex: PropTypes.number\n};\nexport default _c2 = injectIntl(InlineForm, {\n  forwardRef: true\n});\nvar _c, _c2;\n$RefreshReg$(_c, \"InlineForm\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","PropTypes","Accordion","Segment","Message","defineMessages","injectIntl","AnimateHeight","Field","Icon","upSVG","downSVG","messages","editValues","error","thereWereSomeErrors","InlineForm","props","block","description","errors","formData","onChangeField","schema","title","icon","headerActions","footer","focusIndex","intl","_","formatMessage","defaultFieldset","fieldsets","find","o","id","other","filter","useEffect","objectSchema","initialData","Object","keys","properties","reduce","accumulator","currentField","forEach","k","useState","currentActiveFieldset","setCurrentActiveFieldset","handleCurrentActiveFieldset","e","blockProps","index","newIndex","length","message","fields","field","toLowerCase","required","indexOf","value","map","fieldset","defaultProps","propTypes","string","shape","arrayOf","objectOf","any","definitions","pathname","func","number","forwardRef"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Form/InlineForm.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Accordion, Segment, Message } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport AnimateHeight from 'react-animate-height';\nimport { keys, map, isEqual } from 'lodash';\n\nimport { Field, Icon } from '@plone/volto/components';\n\nimport upSVG from '@plone/volto/icons/up-key.svg';\nimport downSVG from '@plone/volto/icons/down-key.svg';\n\nconst messages = defineMessages({\n  editValues: {\n    id: 'Edit values',\n    defaultMessage: 'Edit values',\n  },\n  error: {\n    id: 'Error',\n    defaultMessage: 'Error',\n  },\n  thereWereSomeErrors: {\n    id: 'There were some errors',\n    defaultMessage: 'There were some errors',\n  },\n});\n\nconst InlineForm = (props) => {\n  const {\n    block,\n    description,\n    error, // Such as {message: \"It's not good\"}\n    errors = {},\n    formData,\n    onChangeField,\n    schema,\n    title,\n    icon,\n    headerActions,\n    footer,\n    focusIndex,\n    intl,\n  } = props;\n  const _ = intl.formatMessage;\n  const defaultFieldset = schema.fieldsets.find((o) => o.id === 'default');\n  const other = schema.fieldsets.filter((o) => o.id !== 'default');\n\n  React.useEffect(() => {\n    // Will set field values from schema, by matching the default values\n\n    const objectSchema = typeof schema === 'function' ? schema(props) : schema;\n    const initialData = {\n      ...Object.keys(objectSchema.properties).reduce(\n        (accumulator, currentField) => {\n          return objectSchema.properties[currentField].default\n            ? {\n                ...accumulator,\n                [currentField]: objectSchema.properties[currentField].default,\n              }\n            : accumulator;\n        },\n        {},\n      ),\n      ...formData,\n    };\n\n    Object.keys(initialData).forEach((k) => {\n      if (!isEqual(initialData[k], formData?.[k])) {\n        onChangeField(k, initialData[k]);\n      }\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const [currentActiveFieldset, setCurrentActiveFieldset] = React.useState(0);\n  function handleCurrentActiveFieldset(e, blockProps) {\n    const { index } = blockProps;\n    const newIndex = currentActiveFieldset === index ? -1 : index;\n\n    setCurrentActiveFieldset(newIndex);\n  }\n\n  return (\n    <div className=\"ui form\">\n      {title && (\n        <header className=\"header pulled\">\n          {icon}\n          <h2>{title || _(messages.editValues)}</h2>\n          {headerActions}\n        </header>\n      )}\n      {description && (\n        <Segment secondary className=\"attached\">\n          {description}\n        </Segment>\n      )}\n      {keys(errors).length > 0 && (\n        <Message\n          icon=\"warning\"\n          negative\n          attached\n          header={_(messages.error)}\n          content={_(messages.thereWereSomeErrors)}\n        />\n      )}\n      {error && (\n        <Message\n          icon=\"warning\"\n          negative\n          attached\n          header={_(messages.error)}\n          content={error.message}\n        />\n      )}\n\n      <div id={`blockform-fieldset-${defaultFieldset.id}`}>\n        <Segment className=\"form attached\">\n          {map(defaultFieldset.fields, (field, index) => (\n            <Field\n              {...schema.properties[field]}\n              id={field}\n              fieldSet={defaultFieldset.title.toLowerCase()}\n              focus={index === focusIndex}\n              value={formData[field]}\n              required={schema.required.indexOf(field) !== -1}\n              onChange={(id, value) => {\n                onChangeField(id, value);\n              }}\n              key={field}\n              error={errors[field]}\n              block={block}\n            />\n          ))}\n        </Segment>\n      </div>\n\n      {other.map((fieldset, index) => (\n        <Accordion fluid styled className=\"form\" key={fieldset.id}>\n          <div key={fieldset.id} id={`blockform-fieldset-${fieldset.id}`}>\n            <Accordion.Title\n              active={currentActiveFieldset === index}\n              index={index}\n              onClick={handleCurrentActiveFieldset}\n            >\n              {fieldset.title && <>{fieldset.title}</>}\n              {currentActiveFieldset === index ? (\n                <Icon name={upSVG} size=\"20px\" />\n              ) : (\n                <Icon name={downSVG} size=\"20px\" />\n              )}\n            </Accordion.Title>\n            <Accordion.Content active={currentActiveFieldset === index}>\n              <AnimateHeight\n                animateOpacity\n                duration={500}\n                height={currentActiveFieldset === index ? 'auto' : 0}\n              >\n                <Segment className=\"attached\">\n                  {map(fieldset.fields, (field) => (\n                    <Field\n                      {...schema.properties[field]}\n                      id={field}\n                      value={formData[field]}\n                      required={schema.required.indexOf(field) !== -1}\n                      onChange={(id, value) => {\n                        onChangeField(id, value);\n                      }}\n                      key={field}\n                      error={errors[field]}\n                      block={block}\n                    />\n                  ))}\n                </Segment>\n              </AnimateHeight>\n            </Accordion.Content>\n          </div>\n        </Accordion>\n      ))}\n      {footer}\n    </div>\n  );\n};\n\nInlineForm.defaultProps = {\n  block: null,\n  description: null,\n  formData: null,\n  onChangeField: null,\n  error: null,\n  errors: {},\n  schema: {},\n  focusIndex: null,\n};\n\nInlineForm.propTypes = {\n  block: PropTypes.string,\n  description: PropTypes.string,\n  schema: PropTypes.shape({\n    fieldsets: PropTypes.arrayOf(\n      PropTypes.shape({\n        fields: PropTypes.arrayOf(PropTypes.string),\n        id: PropTypes.string,\n        title: PropTypes.string,\n      }),\n    ),\n    properties: PropTypes.objectOf(PropTypes.any),\n    definitions: PropTypes.objectOf(PropTypes.any),\n    required: PropTypes.arrayOf(PropTypes.string),\n  }),\n  formData: PropTypes.objectOf(PropTypes.any),\n  pathname: PropTypes.string,\n  onChangeField: PropTypes.func,\n  error: PropTypes.shape({\n    message: PropTypes.string,\n  }),\n  focusIndex: PropTypes.number,\n};\n\nexport default injectIntl(InlineForm, { forwardRef: true });\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Edit values","defaultMessage":"Edit values"},{"id":"Error","defaultMessage":"Error"},{"id":"There were some errors","defaultMessage":"There were some errors"}]}},"sourceType":"module","externalDependencies":[]}