{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/theme/Search/SearchTags.jsx\";\nvar __jsx = React.createElement;\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n/**\n * Search tags components.\n * @module components/theme/Search/SearchTags\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { getVocabulary } from '@plone/volto/actions';\nconst vocabulary = 'plone.app.vocabularies.Keywords';\n\n/**\n * Search tags container class.\n * @class SearchTags\n * @extends Component\n */\nclass SearchTags extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  componentDidMount() {\n    this.props.getVocabulary({\n      vocabNameOrURL: vocabulary\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return this.props.items && this.props.items.length > 0 ? __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 7\n      }\n    }, this.props.items.map(item => __jsx(Link, {\n      className: \"ui label\",\n      to: `/search?Subject=${item.label}`,\n      key: item.label,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }\n    }, item.label))) : __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }\n    });\n  }\n}\n_defineProperty(SearchTags, \"propTypes\", {\n  getVocabulary: PropTypes.func.isRequired,\n  items: PropTypes.arrayOf(PropTypes.shape({\n    label: PropTypes.string\n  })).isRequired\n});\nexport default connect(state => ({\n  items: state.vocabularies[vocabulary] && state.vocabularies[vocabulary].items ? state.vocabularies[vocabulary].items : []\n}), {\n  getVocabulary\n})(SearchTags);","map":{"version":3,"names":["React","Component","PropTypes","connect","Link","getVocabulary","vocabulary","SearchTags","componentDidMount","props","vocabNameOrURL","render","items","length","map","item","label","func","isRequired","arrayOf","shape","string","state","vocabularies"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/theme/Search/SearchTags.jsx"],"sourcesContent":["/**\n * Search tags components.\n * @module components/theme/Search/SearchTags\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nimport { getVocabulary } from '@plone/volto/actions';\n\nconst vocabulary = 'plone.app.vocabularies.Keywords';\n\n/**\n * Search tags container class.\n * @class SearchTags\n * @extends Component\n */\nclass SearchTags extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    getVocabulary: PropTypes.func.isRequired,\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        label: PropTypes.string,\n      }),\n    ).isRequired,\n  };\n\n  componentDidMount() {\n    this.props.getVocabulary({ vocabNameOrURL: vocabulary });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return this.props.items && this.props.items.length > 0 ? (\n      <div>\n        {this.props.items.map((item) => (\n          <Link\n            className=\"ui label\"\n            to={`/search?Subject=${item.label}`}\n            key={item.label}\n          >\n            {item.label}\n          </Link>\n        ))}\n      </div>\n    ) : (\n      <span />\n    );\n  }\n}\n\nexport default connect(\n  (state) => ({\n    items:\n      state.vocabularies[vocabulary] && state.vocabularies[vocabulary].items\n        ? state.vocabularies[vocabulary].items\n        : [],\n  }),\n  { getVocabulary },\n)(SearchTags);\n"],"mappings":";;;AAAA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,IAAI,QAAQ,kBAAkB;AAEvC,SAASC,aAAa,QAAQ,sBAAsB;AAEpD,MAAMC,UAAU,GAAG,iCAAiC;;AAEpD;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,SAASN,SAAS,CAAC;EACjC;AACF;AACA;AACA;AACA;;EAUEO,iBAAiB,GAAG;IAClB,IAAI,CAACC,KAAK,CAACJ,aAAa,CAAC;MAAEK,cAAc,EAAEJ;IAAW,CAAC,CAAC;EAC1D;;EAEA;AACF;AACA;AACA;AACA;EACEK,MAAM,GAAG;IACP,OAAO,IAAI,CAACF,KAAK,CAACG,KAAK,IAAI,IAAI,CAACH,KAAK,CAACG,KAAK,CAACC,MAAM,GAAG,CAAC,GACpD;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACG,IAAI,CAACJ,KAAK,CAACG,KAAK,CAACE,GAAG,CAAEC,IAAI,IACzB,MAAC,IAAI;MACH,SAAS,EAAC,UAAU;MACpB,EAAE,EAAG,mBAAkBA,IAAI,CAACC,KAAM,EAAE;MACpC,GAAG,EAAED,IAAI,CAACC,KAAM;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAEfD,IAAI,CAACC,KAAK,CAEd,CAAC,CACE,GAEN;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EACD;EACH;AACF;AAAC,gBAzCKT,UAAU,eAMK;EACjBF,aAAa,EAAEH,SAAS,CAACe,IAAI,CAACC,UAAU;EACxCN,KAAK,EAAEV,SAAS,CAACiB,OAAO,CACtBjB,SAAS,CAACkB,KAAK,CAAC;IACdJ,KAAK,EAAEd,SAAS,CAACmB;EACnB,CAAC,CAAC,CACH,CAACH;AACJ,CAAC;AA8BH,eAAef,OAAO,CACnBmB,KAAK,KAAM;EACVV,KAAK,EACHU,KAAK,CAACC,YAAY,CAACjB,UAAU,CAAC,IAAIgB,KAAK,CAACC,YAAY,CAACjB,UAAU,CAAC,CAACM,KAAK,GAClEU,KAAK,CAACC,YAAY,CAACjB,UAAU,CAAC,CAACM,KAAK,GACpC;AACR,CAAC,CAAC,EACF;EAAEP;AAAc,CAAC,CAClB,CAACE,UAAU,CAAC"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}