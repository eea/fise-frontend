{"ast":null,"code":"import _slicedToArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { blockTagDeserializer } from 'volto-slate/editor/deserialize';\nimport { TABLE, TR, TD, TFOOT, THEAD, TBODY, TH } from 'volto-slate/constants';\nimport { Editor, Point, Range } from 'slate';\nexport var withTable = function withTable(editor) {\n  var deleteBackward = editor.deleteBackward,\n    deleteForward = editor.deleteForward,\n    insertBreak = editor.insertBreak;\n\n  // paste support\n  editor.htmlTagsToSlate = _objectSpread(_objectSpread({}, editor.htmlTagsToSlate), {}, {\n    TABLE: blockTagDeserializer(TABLE),\n    THEAD: blockTagDeserializer(THEAD),\n    TFOOT: blockTagDeserializer(TFOOT),\n    TBODY: blockTagDeserializer(TBODY),\n    TR: blockTagDeserializer(TR),\n    TH: blockTagDeserializer(TH),\n    TD: blockTagDeserializer(TD)\n  });\n  editor.deleteBackward = function (unit) {\n    var selection = editor.selection;\n    if (selection && Range.isCollapsed(selection)) {\n      var _Editor$nodes = Editor.nodes(editor, {\n          match: function match(n) {\n            return n.type === TD;\n          }\n        }),\n        _Editor$nodes2 = _slicedToArray(_Editor$nodes, 1),\n        cell = _Editor$nodes2[0];\n      if (cell) {\n        var _cell = _slicedToArray(cell, 2),\n          cellPath = _cell[1];\n        var start = Editor.start(editor, cellPath);\n        if (Point.equals(selection.anchor, start)) {\n          return;\n        }\n      }\n    }\n    deleteBackward(unit);\n  };\n  editor.deleteForward = function (unit) {\n    var selection = editor.selection;\n    if (selection && Range.isCollapsed(selection)) {\n      var _Editor$nodes3 = Editor.nodes(editor, {\n          match: function match(n) {\n            return n.type === TD;\n          }\n        }),\n        _Editor$nodes4 = _slicedToArray(_Editor$nodes3, 1),\n        cell = _Editor$nodes4[0];\n      if (cell) {\n        var _cell2 = _slicedToArray(cell, 2),\n          cellPath = _cell2[1];\n        var end = Editor.end(editor, cellPath);\n        if (Point.equals(selection.anchor, end)) {\n          return;\n        }\n      }\n    }\n    deleteForward(unit);\n  };\n  editor.insertBreak = function () {\n    var selection = editor.selection;\n    if (selection) {\n      var _Editor$nodes5 = Editor.nodes(editor, {\n          match: function match(n) {\n            return n.type === TABLE;\n          }\n        }),\n        _Editor$nodes6 = _slicedToArray(_Editor$nodes5, 1),\n        table = _Editor$nodes6[0];\n      if (table) {\n        return;\n      }\n    }\n    insertBreak();\n  };\n  return editor;\n};","map":{"version":3,"names":["blockTagDeserializer","TABLE","TR","TD","TFOOT","THEAD","TBODY","TH","Editor","Point","Range","withTable","editor","deleteBackward","deleteForward","insertBreak","htmlTagsToSlate","unit","selection","isCollapsed","nodes","match","n","type","cell","cellPath","start","equals","anchor","end","table"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-slate/src/editor/plugins/Table/extensions.js"],"sourcesContent":["import { blockTagDeserializer } from 'volto-slate/editor/deserialize';\nimport { TABLE, TR, TD, TFOOT, THEAD, TBODY, TH } from 'volto-slate/constants';\nimport { Editor, Point, Range } from 'slate';\n\nexport const withTable = (editor) => {\n  const { deleteBackward, deleteForward, insertBreak } = editor;\n\n  // paste support\n  editor.htmlTagsToSlate = {\n    ...editor.htmlTagsToSlate,\n    TABLE: blockTagDeserializer(TABLE),\n    THEAD: blockTagDeserializer(THEAD),\n    TFOOT: blockTagDeserializer(TFOOT),\n    TBODY: blockTagDeserializer(TBODY),\n    TR: blockTagDeserializer(TR),\n    TH: blockTagDeserializer(TH),\n    TD: blockTagDeserializer(TD),\n  };\n\n  editor.deleteBackward = (unit) => {\n    const { selection } = editor;\n\n    if (selection && Range.isCollapsed(selection)) {\n      const [cell] = Editor.nodes(editor, {\n        match: (n) => n.type === TD,\n      });\n\n      if (cell) {\n        const [, cellPath] = cell;\n        const start = Editor.start(editor, cellPath);\n\n        if (Point.equals(selection.anchor, start)) {\n          return;\n        }\n      }\n    }\n\n    deleteBackward(unit);\n  };\n\n  editor.deleteForward = (unit) => {\n    const { selection } = editor;\n\n    if (selection && Range.isCollapsed(selection)) {\n      const [cell] = Editor.nodes(editor, {\n        match: (n) => n.type === TD,\n      });\n\n      if (cell) {\n        const [, cellPath] = cell;\n        const end = Editor.end(editor, cellPath);\n\n        if (Point.equals(selection.anchor, end)) {\n          return;\n        }\n      }\n    }\n\n    deleteForward(unit);\n  };\n\n  editor.insertBreak = () => {\n    const { selection } = editor;\n\n    if (selection) {\n      const [table] = Editor.nodes(editor, {\n        match: (n) => n.type === TABLE,\n      });\n\n      if (table) {\n        return;\n      }\n    }\n\n    insertBreak();\n  };\n\n  return editor;\n};\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}