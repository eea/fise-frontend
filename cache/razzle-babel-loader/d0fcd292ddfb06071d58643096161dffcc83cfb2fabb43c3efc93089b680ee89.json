{"ast":null,"code":"import { FOOTNOTE } from '../constants';\nimport { nanoid } from '@plone/volto-slate/utils';\nimport { Transforms } from 'slate';\nexport const withFootnote = editor => {\n  const {\n    normalizeNode,\n    isInline\n  } = editor;\n  editor.isInline = element => {\n    return element.type === FOOTNOTE ? true : isInline(element);\n  };\n  editor.normalizeNode = entry => {\n    var _node$data;\n    const [node, path] = entry;\n    if (node.type === FOOTNOTE && !((_node$data = node.data) !== null && _node$data !== void 0 && _node$data.uid)) {\n      var _node$data2;\n      Transforms.setNodes(editor, {\n        data: {\n          uid: nanoid(5),\n          footnote: (_node$data2 = node.data) === null || _node$data2 === void 0 ? void 0 : _node$data2.footnote\n        }\n      }, {\n        at: path\n      });\n    }\n    return normalizeNode(entry);\n  };\n  return editor;\n};\n// will replace existing uid with a new one\n// this will be usefull when copy/pase items have the same uid\nexport const withBeforeInsertFragment = editor => {\n  const {\n    beforeInsertFragment\n  } = editor;\n  editor.beforeInsertFragment = parsed => {\n    var _parsed$, _parsed$$children, _parsed$$children$, _parsed$$children$$da;\n    if (parsed !== null && parsed !== void 0 && (_parsed$ = parsed[0]) !== null && _parsed$ !== void 0 && (_parsed$$children = _parsed$.children) !== null && _parsed$$children !== void 0 && (_parsed$$children$ = _parsed$$children[0]) !== null && _parsed$$children$ !== void 0 && (_parsed$$children$$da = _parsed$$children$.data) !== null && _parsed$$children$$da !== void 0 && _parsed$$children$$da.uid) {\n      parsed[0].children[0].data.uid = nanoid(5);\n    }\n    return beforeInsertFragment ? beforeInsertFragment(parsed) : parsed;\n  };\n  return editor;\n};","map":{"version":3,"names":["FOOTNOTE","nanoid","Transforms","withFootnote","editor","normalizeNode","isInline","element","type","entry","node","path","data","uid","setNodes","footnote","at","withBeforeInsertFragment","beforeInsertFragment","parsed","children"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-slate-footnote/src/editor/extensions.js"],"sourcesContent":["import { FOOTNOTE } from '../constants';\nimport { nanoid } from '@plone/volto-slate/utils';\nimport { Transforms } from 'slate';\n\nexport const withFootnote = (editor) => {\n  const { normalizeNode, isInline } = editor;\n\n  editor.isInline = (element) => {\n    return element.type === FOOTNOTE ? true : isInline(element);\n  };\n\n  editor.normalizeNode = (entry) => {\n    const [node, path] = entry;\n\n    if (node.type === FOOTNOTE && !node.data?.uid) {\n      Transforms.setNodes(\n        editor,\n        {\n          data: {\n            uid: nanoid(5),\n            footnote: node.data?.footnote,\n          },\n        },\n        {\n          at: path,\n        },\n      );\n    }\n    return normalizeNode(entry);\n  };\n\n  return editor;\n};\n// will replace existing uid with a new one\n// this will be usefull when copy/pase items have the same uid\nexport const withBeforeInsertFragment = (editor) => {\n  const { beforeInsertFragment } = editor;\n  editor.beforeInsertFragment = (parsed) => {\n    if (parsed?.[0]?.children?.[0]?.data?.uid) {\n      parsed[0].children[0].data.uid = nanoid(5);\n    }\n    return beforeInsertFragment ? beforeInsertFragment(parsed) : parsed;\n  };\n\n  return editor;\n};\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,cAAc;AACvC,SAASC,MAAM,QAAQ,0BAA0B;AACjD,SAASC,UAAU,QAAQ,OAAO;AAElC,OAAO,MAAMC,YAAY,GAAIC,MAAM,IAAK;EACtC,MAAM;IAAEC,aAAa;IAAEC;EAAS,CAAC,GAAGF,MAAM;EAE1CA,MAAM,CAACE,QAAQ,GAAIC,OAAO,IAAK;IAC7B,OAAOA,OAAO,CAACC,IAAI,KAAKR,QAAQ,GAAG,IAAI,GAAGM,QAAQ,CAACC,OAAO,CAAC;EAC7D,CAAC;EAEDH,MAAM,CAACC,aAAa,GAAII,KAAK,IAAK;IAAA;IAChC,MAAM,CAACC,IAAI,EAAEC,IAAI,CAAC,GAAGF,KAAK;IAE1B,IAAIC,IAAI,CAACF,IAAI,KAAKR,QAAQ,IAAI,gBAACU,IAAI,CAACE,IAAI,uCAAT,WAAWC,GAAG,GAAE;MAAA;MAC7CX,UAAU,CAACY,QAAQ,CACjBV,MAAM,EACN;QACEQ,IAAI,EAAE;UACJC,GAAG,EAAEZ,MAAM,CAAC,CAAC,CAAC;UACdc,QAAQ,iBAAEL,IAAI,CAACE,IAAI,gDAAT,YAAWG;QACvB;MACF,CAAC,EACD;QACEC,EAAE,EAAEL;MACN,CAAC,CACF;IACH;IACA,OAAON,aAAa,CAACI,KAAK,CAAC;EAC7B,CAAC;EAED,OAAOL,MAAM;AACf,CAAC;AACD;AACA;AACA,OAAO,MAAMa,wBAAwB,GAAIb,MAAM,IAAK;EAClD,MAAM;IAAEc;EAAqB,CAAC,GAAGd,MAAM;EACvCA,MAAM,CAACc,oBAAoB,GAAIC,MAAM,IAAK;IAAA;IACxC,IAAIA,MAAM,aAANA,MAAM,2BAANA,MAAM,CAAG,CAAC,CAAC,0DAAX,SAAaC,QAAQ,oEAArB,kBAAwB,CAAC,CAAC,wEAA1B,mBAA4BR,IAAI,kDAAhC,sBAAkCC,GAAG,EAAE;MACzCM,MAAM,CAAC,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAAC,CAACR,IAAI,CAACC,GAAG,GAAGZ,MAAM,CAAC,CAAC,CAAC;IAC5C;IACA,OAAOiB,oBAAoB,GAAGA,oBAAoB,CAACC,MAAM,CAAC,GAAGA,MAAM;EACrE,CAAC;EAED,OAAOf,MAAM;AACf,CAAC"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}