{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-tabs-block/src/utils/SimpleMarkdown.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport React from 'react';\nconst TAGS = {\n  '': (text, props) => __jsx(\"p\", _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 4,\n      columnNumber: 24\n    }\n  }), text),\n  '#': (text, props) => __jsx(\"h1\", _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 5,\n      columnNumber: 25\n    }\n  }), text),\n  '##': (text, props) => __jsx(\"h2\", _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 26\n    }\n  }), text),\n  '###': (text, props) => __jsx(\"h3\", _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 27\n    }\n  }), text),\n  '####': (text, props) => __jsx(\"h4\", _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 28\n    }\n  }), text),\n  '#####': (text, props) => __jsx(\"h5\", _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 29\n    }\n  }), text),\n  '######': (text, props) => __jsx(\"h6\", _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 30\n    }\n  }), text)\n};\nconst SimpleMarkdown = props => {\n  var _TAGS$defaultTag, _TAGS$TAG;\n  const {\n    md = '',\n    defaultTag = ''\n  } = props;\n  const [TAG, ...text] = md.split(' ');\n  const attrs = {\n    ref: props.ref,\n    className: props.className,\n    id: props.id,\n    style: props.style\n  };\n  if (!md) return __jsx(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 19\n    }\n  });\n  if (!text.length) return (_TAGS$defaultTag = TAGS[defaultTag]) === null || _TAGS$defaultTag === void 0 ? void 0 : _TAGS$defaultTag.call(TAGS, TAG, attrs);\n  if (!(TAG in TAGS)) {\n    var _TAGS$defaultTag2;\n    text.unshift(TAG);\n    return (_TAGS$defaultTag2 = TAGS[defaultTag]) === null || _TAGS$defaultTag2 === void 0 ? void 0 : _TAGS$defaultTag2.call(TAGS, text.join(' '), attrs);\n  }\n  return (_TAGS$TAG = TAGS[TAG]) === null || _TAGS$TAG === void 0 ? void 0 : _TAGS$TAG.call(TAGS, text.join(' '), attrs);\n};\nexport default SimpleMarkdown;","map":{"version":3,"names":["React","TAGS","text","props","SimpleMarkdown","md","defaultTag","TAG","split","attrs","ref","className","id","style","length","unshift","join"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-tabs-block/src/utils/SimpleMarkdown.jsx"],"sourcesContent":["import React from 'react';\n\nconst TAGS = {\n  '': (text, props) => <p {...props}>{text}</p>,\n  '#': (text, props) => <h1 {...props}>{text}</h1>,\n  '##': (text, props) => <h2 {...props}>{text}</h2>,\n  '###': (text, props) => <h3 {...props}>{text}</h3>,\n  '####': (text, props) => <h4 {...props}>{text}</h4>,\n  '#####': (text, props) => <h5 {...props}>{text}</h5>,\n  '######': (text, props) => <h6 {...props}>{text}</h6>,\n};\n\nconst SimpleMarkdown = (props) => {\n  const { md = '', defaultTag = '' } = props;\n  const [TAG, ...text] = md.split(' ');\n  const attrs = {\n    ref: props.ref,\n    className: props.className,\n    id: props.id,\n    style: props.style,\n  };\n\n  if (!md) return <React.Fragment />;\n  if (!text.length) return TAGS[defaultTag]?.(TAG, attrs);\n  if (!(TAG in TAGS)) {\n    text.unshift(TAG);\n    return TAGS[defaultTag]?.(text.join(' '), attrs);\n  }\n  return TAGS[TAG]?.(text.join(' '), attrs);\n};\n\nexport default SimpleMarkdown;\n"],"mappings":";;;AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,IAAI,GAAG;EACX,EAAE,EAAE,CAACC,IAAI,EAAEC,KAAK,KAAK,wBAAOA,KAAK;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,IAAGD,IAAI,CAAK;EAC7C,GAAG,EAAE,CAACA,IAAI,EAAEC,KAAK,KAAK,yBAAQA,KAAK;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,IAAGD,IAAI,CAAM;EAChD,IAAI,EAAE,CAACA,IAAI,EAAEC,KAAK,KAAK,yBAAQA,KAAK;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,IAAGD,IAAI,CAAM;EACjD,KAAK,EAAE,CAACA,IAAI,EAAEC,KAAK,KAAK,yBAAQA,KAAK;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,IAAGD,IAAI,CAAM;EAClD,MAAM,EAAE,CAACA,IAAI,EAAEC,KAAK,KAAK,yBAAQA,KAAK;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,IAAGD,IAAI,CAAM;EACnD,OAAO,EAAE,CAACA,IAAI,EAAEC,KAAK,KAAK,yBAAQA,KAAK;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,IAAGD,IAAI,CAAM;EACpD,QAAQ,EAAE,CAACA,IAAI,EAAEC,KAAK,KAAK,yBAAQA,KAAK;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,IAAGD,IAAI;AACjD,CAAC;AAED,MAAME,cAAc,GAAID,KAAK,IAAK;EAAA;EAChC,MAAM;IAAEE,EAAE,GAAG,EAAE;IAAEC,UAAU,GAAG;EAAG,CAAC,GAAGH,KAAK;EAC1C,MAAM,CAACI,GAAG,EAAE,GAAGL,IAAI,CAAC,GAAGG,EAAE,CAACG,KAAK,CAAC,GAAG,CAAC;EACpC,MAAMC,KAAK,GAAG;IACZC,GAAG,EAAEP,KAAK,CAACO,GAAG;IACdC,SAAS,EAAER,KAAK,CAACQ,SAAS;IAC1BC,EAAE,EAAET,KAAK,CAACS,EAAE;IACZC,KAAK,EAAEV,KAAK,CAACU;EACf,CAAC;EAED,IAAI,CAACR,EAAE,EAAE,OAAO,MAAC,KAAK,CAAC,QAAQ;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAG;EAClC,IAAI,CAACH,IAAI,CAACY,MAAM,EAAE,2BAAOb,IAAI,CAACK,UAAU,CAAC,qDAAhB,sBAAAL,IAAI,EAAeM,GAAG,EAAEE,KAAK,CAAC;EACvD,IAAI,EAAEF,GAAG,IAAIN,IAAI,CAAC,EAAE;IAAA;IAClBC,IAAI,CAACa,OAAO,CAACR,GAAG,CAAC;IACjB,4BAAON,IAAI,CAACK,UAAU,CAAC,sDAAhB,uBAAAL,IAAI,EAAeC,IAAI,CAACc,IAAI,CAAC,GAAG,CAAC,EAAEP,KAAK,CAAC;EAClD;EACA,oBAAOR,IAAI,CAACM,GAAG,CAAC,8CAAT,eAAAN,IAAI,EAAQC,IAAI,CAACc,IAAI,CAAC,GAAG,CAAC,EAAEP,KAAK,CAAC;AAC3C,CAAC;AAED,eAAeL,cAAc"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}