{"ast":null,"code":"const _excluded = [\"block\", \"items\", \"gridSize\", \"isEditMode\", \"hasDate\", \"hasDescription\"];\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-listing-block/src/blocks/Listing/templates/CardsGallery.jsx\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport UniversalCard from '@eeacms/volto-listing-block/components/UniversalCard/UniversalCard';\nimport config from '@plone/volto/registry';\nconst CardsGallery = _ref => {\n  let {\n      block,\n      items,\n      gridSize,\n      isEditMode,\n      hasDate,\n      hasDescription\n    } = _ref,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  moment.locale(config.settings.dateLocale);\n  return __jsx(React.Fragment, null, items && items.length > 0 && __jsx(\"div\", {\n    className: `ui fluid ${gridSize || ''} cards`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, items.map((item, i) => __jsx(UniversalCard, _extends({\n    key: i\n  }, rest, {\n    block: block,\n    item: item,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }\n  })))));\n};\nCardsGallery.schemaEnhancer = args => {\n  const schema = UniversalCard.schemaEnhancer(args);\n  // schema.fieldsets[0].fields.push('gridSize');\n  schema.fieldsets.splice(1, 0, {\n    id: 'cardsGallery',\n    title: 'Gallery',\n    fields: ['gridSize']\n  });\n  schema.properties = _objectSpread(_objectSpread({}, schema.properties), {}, {\n    gridSize: {\n      title: 'Grid Size',\n      choices: [['three', 'Three'], ['four', 'Four']],\n      default: 'three',\n      factory: 'Choice',\n      type: 'string'\n    }\n  });\n  return schema;\n};\nCardsGallery.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.any).isRequired,\n  linkMore: PropTypes.any,\n  isEditMode: PropTypes.bool\n};\nexport default CardsGallery;\n\n// const makeTextBody = (item) => (\n//   <Card.Content>\n//     <Card.Meta>\n//       {hasDate && item.effective && (\n//         <span className=\"category\">\n//           {moment(item.effective).format('ll')}\n//         </span>\n//       )}\n//     </Card.Meta>\n//     <Card.Header>{item.title ? item.title : item.id}</Card.Header>\n//     {hasDescription && (\n//       <Card.Description>\n//         <p>{item.description}</p>\n//       </Card.Description>\n//     )}\n//   </Card.Content>\n// );\n//\n// const makeImage = (item) => {\n//   return (\n//     <ConditionalLink className=\"image\" item={item} condition={!isEditMode}>\n//       <PreviewImage item={item} alt={item.title} />\n//     </ConditionalLink>\n//   );\n// };\n//\n// <Card key={item['@id']} className={cx('centered', styles?.theme)}>\n//   {makeImage(item)}\n//   {makeTextBody(item)}\n// </Card>\n\n// import PreviewImage from '@eeacms/volto-listing-block/PreviewImage';\n// import { ConditionalLink } from '@plone/volto/components';\n// import { Card } from 'semantic-ui-react';\n// import cx from 'classnames';\n// styles,\n// itemModel,","map":{"version":3,"names":["moment","PropTypes","React","UniversalCard","config","CardsGallery","block","items","gridSize","isEditMode","hasDate","hasDescription","rest","locale","settings","dateLocale","length","map","item","i","schemaEnhancer","args","schema","fieldsets","splice","id","title","fields","properties","choices","default","factory","type","propTypes","arrayOf","any","isRequired","linkMore","bool"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-listing-block/src/blocks/Listing/templates/CardsGallery.jsx"],"sourcesContent":["import moment from 'moment';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport UniversalCard from '@eeacms/volto-listing-block/components/UniversalCard/UniversalCard';\nimport config from '@plone/volto/registry';\n\nconst CardsGallery = ({\n  block,\n  items,\n  gridSize,\n  isEditMode,\n  hasDate,\n  hasDescription,\n  ...rest\n}) => {\n  moment.locale(config.settings.dateLocale);\n  return (\n    <>\n      {items && items.length > 0 && (\n        <div className={`ui fluid ${gridSize || ''} cards`}>\n          {items.map((item, i) => (\n            <UniversalCard key={i} {...rest} block={block} item={item} />\n          ))}\n        </div>\n      )}\n    </>\n  );\n};\n\nCardsGallery.schemaEnhancer = (args) => {\n  const schema = UniversalCard.schemaEnhancer(args);\n  // schema.fieldsets[0].fields.push('gridSize');\n  schema.fieldsets.splice(1, 0, {\n    id: 'cardsGallery',\n    title: 'Gallery',\n    fields: ['gridSize'],\n  });\n\n  schema.properties = {\n    ...schema.properties,\n    gridSize: {\n      title: 'Grid Size',\n      choices: [\n        ['three', 'Three'],\n        ['four', 'Four'],\n      ],\n      default: 'three',\n      factory: 'Choice',\n      type: 'string',\n    },\n  };\n  return schema;\n};\n\nCardsGallery.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.any).isRequired,\n  linkMore: PropTypes.any,\n  isEditMode: PropTypes.bool,\n};\n\nexport default CardsGallery;\n\n// const makeTextBody = (item) => (\n//   <Card.Content>\n//     <Card.Meta>\n//       {hasDate && item.effective && (\n//         <span className=\"category\">\n//           {moment(item.effective).format('ll')}\n//         </span>\n//       )}\n//     </Card.Meta>\n//     <Card.Header>{item.title ? item.title : item.id}</Card.Header>\n//     {hasDescription && (\n//       <Card.Description>\n//         <p>{item.description}</p>\n//       </Card.Description>\n//     )}\n//   </Card.Content>\n// );\n//\n// const makeImage = (item) => {\n//   return (\n//     <ConditionalLink className=\"image\" item={item} condition={!isEditMode}>\n//       <PreviewImage item={item} alt={item.title} />\n//     </ConditionalLink>\n//   );\n// };\n//\n// <Card key={item['@id']} className={cx('centered', styles?.theme)}>\n//   {makeImage(item)}\n//   {makeTextBody(item)}\n// </Card>\n\n// import PreviewImage from '@eeacms/volto-listing-block/PreviewImage';\n// import { ConditionalLink } from '@plone/volto/components';\n// import { Card } from 'semantic-ui-react';\n// import cx from 'classnames';\n// styles,\n// itemModel,\n"],"mappings":";;;;;;;;;AAAA,OAAOA,MAAM,MAAM,QAAQ;AAC3B,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,MAAM,oEAAoE;AAC9F,OAAOC,MAAM,MAAM,uBAAuB;AAE1C,MAAMC,YAAY,GAAG,QAQf;EAAA,IARgB;MACpBC,KAAK;MACLC,KAAK;MACLC,QAAQ;MACRC,UAAU;MACVC,OAAO;MACPC;IAEF,CAAC;IADIC,IAAI;EAEPZ,MAAM,CAACa,MAAM,CAACT,MAAM,CAACU,QAAQ,CAACC,UAAU,CAAC;EACzC,OACE,4BACGR,KAAK,IAAIA,KAAK,CAACS,MAAM,GAAG,CAAC,IACxB;IAAK,SAAS,EAAG,YAAWR,QAAQ,IAAI,EAAG,QAAQ;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAChDD,KAAK,CAACU,GAAG,CAAC,CAACC,IAAI,EAAEC,CAAC,KACjB,MAAC,aAAa;IAAC,GAAG,EAAEA;EAAE,GAAKP,IAAI;IAAE,KAAK,EAAEN,KAAM;IAAC,IAAI,EAAEY,IAAK;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAC3D,CAAC,CAEL,CACA;AAEP,CAAC;AAEDb,YAAY,CAACe,cAAc,GAAIC,IAAI,IAAK;EACtC,MAAMC,MAAM,GAAGnB,aAAa,CAACiB,cAAc,CAACC,IAAI,CAAC;EACjD;EACAC,MAAM,CAACC,SAAS,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE;IAC5BC,EAAE,EAAE,cAAc;IAClBC,KAAK,EAAE,SAAS;IAChBC,MAAM,EAAE,CAAC,UAAU;EACrB,CAAC,CAAC;EAEFL,MAAM,CAACM,UAAU,mCACZN,MAAM,CAACM,UAAU;IACpBpB,QAAQ,EAAE;MACRkB,KAAK,EAAE,WAAW;MAClBG,OAAO,EAAE,CACP,CAAC,OAAO,EAAE,OAAO,CAAC,EAClB,CAAC,MAAM,EAAE,MAAM,CAAC,CACjB;MACDC,OAAO,EAAE,OAAO;MAChBC,OAAO,EAAE,QAAQ;MACjBC,IAAI,EAAE;IACR;EAAC,EACF;EACD,OAAOV,MAAM;AACf,CAAC;AAEDjB,YAAY,CAAC4B,SAAS,GAAG;EACvB1B,KAAK,EAAEN,SAAS,CAACiC,OAAO,CAACjC,SAAS,CAACkC,GAAG,CAAC,CAACC,UAAU;EAClDC,QAAQ,EAAEpC,SAAS,CAACkC,GAAG;EACvB1B,UAAU,EAAER,SAAS,CAACqC;AACxB,CAAC;AAED,eAAejC,YAAY;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}