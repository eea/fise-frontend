{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Widgets/TokenWidget.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n/**\n * TokenWidget component.\n * @module components/manage/Widgets/TokenWidget\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { getVocabFromHint, getVocabFromField, getVocabFromItems } from '@plone/volto/helpers';\nimport { getVocabulary } from '@plone/volto/actions';\nimport { Option, DropdownIndicator, ClearIndicator, MultiValueContainer, selectTheme, customSelectStyles } from '@plone/volto/components/manage/Widgets/SelectStyling';\nimport { FormFieldWrapper } from '@plone/volto/components';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nconst messages = defineMessages({\n  select: {\n    \"id\": \"Select\\u2026\",\n    \"defaultMessage\": \"Select\\u2026\"\n  },\n  no_options: {\n    \"id\": \"No options\",\n    \"defaultMessage\": \"No options\"\n  }\n});\n\n/**\n * TokenWidget component class.\n *\n * Because new terms are created through the web by using the widget, the token\n * widget conflates the meaning of token, label and value and assumes they can\n * be used interchangeably.\n *\n * @class TokenWidget\n * @extends Component\n */\nclass TokenWidget extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Actions\n   */\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    var _this$props$choices;\n    if (!((_this$props$choices = this.props.choices) !== null && _this$props$choices !== void 0 && _this$props$choices.length)) {\n      this.props.getVocabulary({\n        vocabNameOrURL: this.props.vocabBaseUrl,\n        size: -1,\n        subrequest: this.props.lang\n      });\n    }\n  }\n  componentDidUpdate() {\n    var _this$props$choices2;\n    if (!((_this$props$choices2 = this.props.choices) !== null && _this$props$choices2 !== void 0 && _this$props$choices2.length) && this.props.vocabLoading === undefined && !this.props.vocabLoaded) {\n      this.props.getVocabulary({\n        vocabNameOrURL: this.props.vocabBaseUrl,\n        size: -1,\n        subrequest: this.props.lang\n      });\n    }\n  }\n\n  /**\n   * Handle the field change, store it in the local state and back to simple\n   * array of tokens for correct serialization\n   * @method handleChange\n   * @param {array} selectedOption The selected options (already aggregated).\n   * @returns {undefined}\n   */\n  handleChange(selectedOption) {\n    this.props.onChange(this.props.id, selectedOption ? selectedOption.map(item => item.label) : null);\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    var _this$props$placehold;\n    const selectedOption = this.props.value ? this.props.value.map(item => ({\n      label: item,\n      value: item\n    })) : [];\n    const defaultOptions = (this.props.choices || []).filter(item => !selectedOption.find(({\n      label\n    }) => label === item.label)).map(item => ({\n      label: item.label || item.value,\n      value: item.value\n    }));\n    const CreatableSelect = this.props.reactSelectCreateable.default;\n    return __jsx(FormFieldWrapper, _extends({}, this.props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 7\n      }\n    }), __jsx(CreatableSelect, {\n      id: `field-${this.props.id}`,\n      key: this.props.id,\n      isDisabled: this.props.isDisabled,\n      className: \"react-select-container\",\n      classNamePrefix: \"react-select\",\n      defaultOptions: defaultOptions,\n      options: defaultOptions,\n      styles: customSelectStyles,\n      theme: selectTheme,\n      components: {\n        MultiValueContainer,\n        ClearIndicator,\n        DropdownIndicator,\n        Option\n      },\n      isMulti: true,\n      value: selectedOption || [],\n      onChange: this.handleChange,\n      placeholder: (_this$props$placehold = this.props.placeholder) !== null && _this$props$placehold !== void 0 ? _this$props$placehold : this.props.intl.formatMessage(messages.select),\n      noOptionsMessage: () => this.props.intl.formatMessage(messages.no_options),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }\n    }));\n  }\n}\n_defineProperty(TokenWidget, \"propTypes\", {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  required: PropTypes.bool,\n  error: PropTypes.arrayOf(PropTypes.string),\n  getVocabulary: PropTypes.func.isRequired,\n  choices: PropTypes.arrayOf(PropTypes.object),\n  vocabLoading: PropTypes.bool,\n  vocabLoaded: PropTypes.bool,\n  items: PropTypes.shape({\n    vocabulary: PropTypes.object\n  }),\n  widgetOptions: PropTypes.shape({\n    vocabulary: PropTypes.object\n  }),\n  value: PropTypes.arrayOf(PropTypes.string),\n  onChange: PropTypes.func.isRequired,\n  wrapped: PropTypes.bool,\n  placeholder: PropTypes.string\n});\n_defineProperty(TokenWidget, \"defaultProps\", {\n  description: null,\n  required: false,\n  items: {\n    vocabulary: null\n  },\n  widgetOptions: {\n    vocabulary: null\n  },\n  error: [],\n  choices: [],\n  value: null\n});\nexport default compose(injectIntl, injectLazyLibs(['reactSelectCreateable']), connect((state, props) => {\n  var _state$vocabularies, _state$vocabularies$v, _state$vocabularies$v2;\n  const vocabBaseUrl = getVocabFromHint(props) || getVocabFromField(props) || getVocabFromItems(props);\n  const vocabState = (_state$vocabularies = state.vocabularies) === null || _state$vocabularies === void 0 ? void 0 : (_state$vocabularies$v = _state$vocabularies[vocabBaseUrl]) === null || _state$vocabularies$v === void 0 ? void 0 : (_state$vocabularies$v2 = _state$vocabularies$v.subrequests) === null || _state$vocabularies$v2 === void 0 ? void 0 : _state$vocabularies$v2[state.intl.locale];\n  if (vocabState) {\n    return {\n      choices: vocabState.items ? vocabState.items.map(item => ({\n        label: item.label || item.value,\n        value: item.value\n      })) : [],\n      vocabLoading: vocabState.loading,\n      vocabLoaded: vocabState.loaded,\n      vocabBaseUrl,\n      lang: state.intl.locale\n    };\n  }\n  return {\n    vocabBaseUrl,\n    lang: state.intl.locale\n  };\n}, {\n  getVocabulary\n}))(TokenWidget);","map":{"version":3,"names":["React","Component","PropTypes","compose","connect","defineMessages","injectIntl","getVocabFromHint","getVocabFromField","getVocabFromItems","getVocabulary","Option","DropdownIndicator","ClearIndicator","MultiValueContainer","selectTheme","customSelectStyles","FormFieldWrapper","injectLazyLibs","messages","select","no_options","TokenWidget","constructor","props","handleChange","bind","componentDidMount","choices","length","vocabNameOrURL","vocabBaseUrl","size","subrequest","lang","componentDidUpdate","vocabLoading","undefined","vocabLoaded","selectedOption","onChange","id","map","item","label","render","value","defaultOptions","filter","find","CreatableSelect","reactSelectCreateable","default","isDisabled","placeholder","intl","formatMessage","string","isRequired","title","description","required","bool","error","arrayOf","func","object","items","shape","vocabulary","widgetOptions","wrapped","state","vocabState","vocabularies","subrequests","locale","loading","loaded"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Widgets/TokenWidget.jsx"],"sourcesContent":["/**\n * TokenWidget component.\n * @module components/manage/Widgets/TokenWidget\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport {\n  getVocabFromHint,\n  getVocabFromField,\n  getVocabFromItems,\n} from '@plone/volto/helpers';\nimport { getVocabulary } from '@plone/volto/actions';\n\nimport {\n  Option,\n  DropdownIndicator,\n  ClearIndicator,\n  MultiValueContainer,\n  selectTheme,\n  customSelectStyles,\n} from '@plone/volto/components/manage/Widgets/SelectStyling';\n\nimport { FormFieldWrapper } from '@plone/volto/components';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\n\nconst messages = defineMessages({\n  select: {\n    id: 'Select…',\n    defaultMessage: 'Select…',\n  },\n  no_options: {\n    id: 'No options',\n    defaultMessage: 'No options',\n  },\n});\n\n/**\n * TokenWidget component class.\n *\n * Because new terms are created through the web by using the widget, the token\n * widget conflates the meaning of token, label and value and assumes they can\n * be used interchangeably.\n *\n * @class TokenWidget\n * @extends Component\n */\nclass TokenWidget extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string,\n    required: PropTypes.bool,\n    error: PropTypes.arrayOf(PropTypes.string),\n    getVocabulary: PropTypes.func.isRequired,\n    choices: PropTypes.arrayOf(PropTypes.object),\n    vocabLoading: PropTypes.bool,\n    vocabLoaded: PropTypes.bool,\n    items: PropTypes.shape({\n      vocabulary: PropTypes.object,\n    }),\n    widgetOptions: PropTypes.shape({\n      vocabulary: PropTypes.object,\n    }),\n    value: PropTypes.arrayOf(PropTypes.string),\n    onChange: PropTypes.func.isRequired,\n    wrapped: PropTypes.bool,\n    placeholder: PropTypes.string,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    description: null,\n    required: false,\n    items: {\n      vocabulary: null,\n    },\n    widgetOptions: {\n      vocabulary: null,\n    },\n    error: [],\n    choices: [],\n    value: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Actions\n   */\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    if (!this.props.choices?.length) {\n      this.props.getVocabulary({\n        vocabNameOrURL: this.props.vocabBaseUrl,\n        size: -1,\n        subrequest: this.props.lang,\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    if (\n      !this.props.choices?.length &&\n      this.props.vocabLoading === undefined &&\n      !this.props.vocabLoaded\n    ) {\n      this.props.getVocabulary({\n        vocabNameOrURL: this.props.vocabBaseUrl,\n        size: -1,\n        subrequest: this.props.lang,\n      });\n    }\n  }\n\n  /**\n   * Handle the field change, store it in the local state and back to simple\n   * array of tokens for correct serialization\n   * @method handleChange\n   * @param {array} selectedOption The selected options (already aggregated).\n   * @returns {undefined}\n   */\n  handleChange(selectedOption) {\n    this.props.onChange(\n      this.props.id,\n      selectedOption ? selectedOption.map((item) => item.label) : null,\n    );\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const selectedOption = this.props.value\n      ? this.props.value.map((item) => ({ label: item, value: item }))\n      : [];\n\n    const defaultOptions = (this.props.choices || [])\n      .filter(\n        (item) => !selectedOption.find(({ label }) => label === item.label),\n      )\n      .map((item) => ({\n        label: item.label || item.value,\n        value: item.value,\n      }));\n    const CreatableSelect = this.props.reactSelectCreateable.default;\n\n    return (\n      <FormFieldWrapper {...this.props}>\n        <CreatableSelect\n          id={`field-${this.props.id}`}\n          key={this.props.id}\n          isDisabled={this.props.isDisabled}\n          className=\"react-select-container\"\n          classNamePrefix=\"react-select\"\n          defaultOptions={defaultOptions}\n          options={defaultOptions}\n          styles={customSelectStyles}\n          theme={selectTheme}\n          components={{\n            MultiValueContainer,\n            ClearIndicator,\n            DropdownIndicator,\n            Option,\n          }}\n          isMulti\n          value={selectedOption || []}\n          onChange={this.handleChange}\n          placeholder={\n            this.props.placeholder ??\n            this.props.intl.formatMessage(messages.select)\n          }\n          noOptionsMessage={() =>\n            this.props.intl.formatMessage(messages.no_options)\n          }\n        />\n      </FormFieldWrapper>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  injectLazyLibs(['reactSelectCreateable']),\n  connect(\n    (state, props) => {\n      const vocabBaseUrl =\n        getVocabFromHint(props) ||\n        getVocabFromField(props) ||\n        getVocabFromItems(props);\n\n      const vocabState =\n        state.vocabularies?.[vocabBaseUrl]?.subrequests?.[state.intl.locale];\n\n      if (vocabState) {\n        return {\n          choices: vocabState.items\n            ? vocabState.items.map((item) => ({\n                label: item.label || item.value,\n                value: item.value,\n              }))\n            : [],\n          vocabLoading: vocabState.loading,\n          vocabLoaded: vocabState.loaded,\n          vocabBaseUrl,\n          lang: state.intl.locale,\n        };\n      }\n      return { vocabBaseUrl, lang: state.intl.locale };\n    },\n    { getVocabulary },\n  ),\n)(TokenWidget);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Select…","defaultMessage":"Select…"},{"id":"No options","defaultMessage":"No options"}]}},"sourceType":"module","externalDependencies":[]}