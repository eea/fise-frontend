{"ast":null,"code":"import _uniq from \"lodash/uniq\";\nconst _excluded = [\"selectedColorscale\", \"color\", \"onChange\"];\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-plotlycharts/src/ChartEditor/MarkerColor.jsx\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport Field from 'react-chart-editor/lib/components/fields/Field';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connectToContainer } from 'react-chart-editor/lib';\nimport RadioBlocks from 'react-chart-editor/lib/components/widgets/RadioBlocks';\nimport MultiColorPicker from 'react-chart-editor/lib/components/fields/MultiColorPicker';\nimport Numeric from 'react-chart-editor/lib/components/fields/Numeric';\nimport Radio from 'react-chart-editor/lib/components/fields/Radio';\nimport Info from 'react-chart-editor/lib/components/fields/Info';\nimport DataSelector from 'react-chart-editor/lib/components/fields/DataSelector';\nimport VisibilitySelect from 'react-chart-editor/lib/components/fields/VisibilitySelect';\nimport { MULTI_VALUED, COLORS } from 'react-chart-editor/lib/lib/constants';\nimport ColorscalePickerWidget from 'react-chart-editor/lib/components/widgets/ColorscalePicker';\nimport { Dropdown } from 'semantic-ui-react';\nimport config from '@plone/volto/registry';\nimport loadable from '@loadable/component';\nimport CustomMarkerColorscales from './CustomMarkerColorscales';\nconst ReactColor = loadable.lib({\n  resolved: {},\n  chunkName() {\n    return \"react-color\";\n  },\n  isReady(props) {\n    var key = this.resolve(props);\n    if (this.resolved[key] !== true) {\n      return false;\n    }\n    if (typeof __webpack_modules__ !== 'undefined') {\n      return !!__webpack_modules__[key];\n    }\n    return false;\n  },\n  importAsync: () => import( /* webpackChunkName: \"react-color\" */'react-color'),\n  requireAsync(props) {\n    var _this = this;\n    var key = this.resolve(props);\n    this.resolved[key] = false;\n    return this.importAsync(props).then(function (resolved) {\n      _this.resolved[key] = true;\n      return resolved;\n    });\n  },\n  requireSync(props) {\n    var id = this.resolve(props);\n    if (typeof __webpack_require__ !== 'undefined') {\n      return __webpack_require__(id);\n    }\n    return eval('module.require')(id);\n  },\n  resolve() {\n    if (require.resolveWeak) {\n      return require.resolveWeak(\"react-color\");\n    }\n    return eval('require.resolve')(\"react-color\");\n  }\n});\n\n/**\n * React color picker component.\n *\n * @param {object} props\n * @param {string[]} props.selectedColorscale The color set from which the user\n * can choose.\n * @param {string} props.color Currently selected color.\n * @param {function} props.onChange Handler function for when the selected color\n * changes.\n */\nconst ColorPicker = _ref => {\n  let {\n      selectedColorscale,\n      color,\n      onChange\n    } = _ref,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  const [dropdownOpen, setDropdownOpen] = React.useState(false);\n\n  /**\n   * Returns black or white according to the given background color. Inspired\n   * from https://stackoverflow.com/a/1855903/258462.\n   * @returns {string} The color that should be used as foreground on the given\n   * background.\n   * @todo Make this work with colors other than the format #RRGGBB.\n   */\n  const contrastColor = React.useCallback(color => {\n    // color = color.replace(/ /g, '').replace('#', '').split(',').map(Number);\n    color = color.replace('#', '').split('');\n    let rr = color[0] + color[1];\n    let gg = color[2] + color[3];\n    let bb = color[4] + color[5];\n    rr = parseInt(rr, 16);\n    gg = parseInt(gg, 16);\n    bb = parseInt(bb, 16);\n    const l = (0.299 * rr + 0.587 * gg + 0.114 * bb) / 255;\n    let d;\n    if (l > 0.5) {\n      d = 0; // bright colors - black font\n    } else {\n      d = 255; // dark colors - white font\n    }\n\n    return `rgb(${d}, ${d}, ${d})`;\n  }, []);\n  const cc = React.useMemo(() => {\n    return contrastColor(color);\n  }, [color, contrastColor]);\n  return __jsx(Dropdown, _extends({}, rest, {\n    open: dropdownOpen,\n    onClose: () => {\n      setDropdownOpen(false);\n    },\n    direction: \"left\",\n    trigger: __jsx(\"button\", {\n      onClick: () => {\n        setDropdownOpen(!dropdownOpen);\n      },\n      style: {\n        backgroundColor: `${color}`,\n        color: cc,\n        fontFamily: 'monospace',\n        // without this it is 'capitalize', because of other CSS applied to <button>:\n        textTransform: 'uppercase'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, color),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }), __jsx(Dropdown.Menu, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, __CLIENT__ && __jsx(ReactColor, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, ({\n    CirclePicker\n  }) => {\n    return __jsx(CirclePicker, {\n      color: color,\n      onChange: onChange,\n      colors: selectedColorscale,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }\n    });\n  })));\n};\n\n/**\n * React color picker field component. Just an enhanced ColorPicker with a label\n * before it.\n *\n * @param {object} props\n * @param {string} props.name The string to put in the label.\n * @param {string} props.color Currently selected color.\n * @param {function} props.onChange Handler function for when the selected color\n * changes.\n * @param {string[]} props.colorscale The color set from which the user can\n * choose.\n */\nconst ColorPickerField = ({\n  name,\n  color,\n  colorscale,\n  onChange\n}) => {\n  return __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      width: '100%',\n      marginTop: '0.1rem'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 5\n    }\n  }, __jsx(\"label\", {\n    style: {\n      alignSelf: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }, name), __jsx(\"div\", {\n    style: {\n      flexGrow: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }), __jsx(ColorPicker, {\n    style: {\n      textAlign: 'right',\n      marginRight: '1rem',\n      flexShrink: 0\n    },\n    color: 1 <= color && color <= colorscale.length ? colorscale[color - 1] : colorscale[Math.floor(Math.random() * colorscale.length)],\n    selectedColorscale: colorscale,\n    onChange: onChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }));\n};\n\n/**\n * @description The three container property paths relevant to bar charts with\n * categorical coloured axis are:\n *  - `marker.colorscale` - the color scale, an array of colors (currently only\n *    \\# followed by 6 hex digits are supported)\n *  - `meta.manualcolor`: association between every unique value in the\n *    categoricalaxis and a color index representing a color in the\n *    marker.colorscale,\n *  - `marker.categoricalaxis`: can be `'x'` or `'y'` or `null` (initially it is\n *    `null`)\n *\n * *Related to color indices:* `-1` invalid array index, `0` valid array index,\n * so `0` means invalid color index in any given colorscale.\n * @todo handle indices using special functions that transform e.g. `0` in `1`\n * and `8` in `7`.\n */\nclass UnconnectedMarkerColor extends Component {\n  constructor(props, context) {\n    var _props$container, _props$container$mark;\n    super(props, context);\n    _defineProperty(this, \"updateCategoricalsInData\", obj => {\n      //TODO: this updateContainer is resetting layout to some defaults when loading component\n      //TODO: need to go around that\n      //this.context.updateContainer(obj);\n      this.updateCategoricalsInVisual();\n    });\n    _defineProperty(this, \"updateCategoricalsInVisual\", () => {\n      var _this$props$container, _this$props$container2;\n      const isManual = (_this$props$container = this.props.container) === null || _this$props$container === void 0 ? void 0 : (_this$props$container2 = _this$props$container.marker) === null || _this$props$container2 === void 0 ? void 0 : _this$props$container2.categoricalaxis;\n      if (!isManual && this.props.container && this.props.container.marker) {\n        this.context.updateContainer({\n          'marker.color': undefined\n        });\n        return;\n      }\n      const data = this.props.container && this.props.container.marker ? this.props.container[this.props.container.marker.categoricalaxis].map(item => this.props.container.marker.colorscale[this.props.container.meta.manualcolor[item] - 1]) : [];\n      if (this.props.container && this.props.container.marker) {\n        this.context.updateContainer({\n          'marker.color': data\n        });\n      }\n    });\n    _defineProperty(this, \"handleAxisChange\", opt => {\n      this.updateCategoricalsInData({\n        'marker.categoricalaxis': opt\n        // 'marker.colorscale': defaultColorscale,\n        // 'meta.manualcolor': ,\n      });\n\n      this.rebuildColorPickers();\n    });\n    _defineProperty(this, \"factoryHandleColorPickerChange\", (val, cs) => {\n      let val2 = val;\n      return newColor => {\n        var _this$props$container3, _this$props$container4;\n        this.updateCategoricalsInData({\n          'meta.manualcolor': _objectSpread(_objectSpread({}, ((_this$props$container3 = this.props.container) === null || _this$props$container3 === void 0 ? void 0 : (_this$props$container4 = _this$props$container3.meta) === null || _this$props$container4 === void 0 ? void 0 : _this$props$container4.manualcolor) || {}), {}, {\n            [val2]: cs.indexOf(newColor.hex) + 1\n          })\n        });\n        this.rebuildColorPickers();\n      };\n    });\n    _defineProperty(this, \"handleColorscaleChange\", cs => {\n      this.updateCategoricalsInData({\n        'marker.colorscale': cs\n      });\n      this.rebuildColorPickers();\n    });\n    _defineProperty(this, \"rebuildColorPickers\", () => {\n      var _this$props$container5;\n      if (this.props.container.type !== 'bar') {\n        this.updateCategoricalsInData({\n          'marker.colorscale': null,\n          'meta.manualcolor': null,\n          'marker.categoricalaxis': null\n        });\n        return;\n      }\n      const colors = {};\n      const data = this.props.container[this.props.container.marker.categoricalaxis];\n\n      // the colorscale array\n      const cs = (_this$props$container5 = this.props.container.marker) === null || _this$props$container5 === void 0 ? void 0 : _this$props$container5.colorscale;\n\n      // if a color scale is not yet set\n      if (!cs) {\n        return;\n      }\n\n      // for each unique value\n      _uniq(data).forEach((x, i) => {\n        // if the current unique value from the axis has a color\n        if (this.props.container.meta.manualcolor[x] && this.props.container.meta.manualcolor[x] > 0) {\n          colors[x] = this.props.container.meta.manualcolor[x];\n          return;\n        }\n\n        // if not, use an increasing integer\n        if (i < cs.length) {\n          colors[x] = i + 1;\n          return;\n        }\n\n        // if the increasing integer is not valid, set a random valid index\n        const rnd = Math.floor(Math.random() * cs.length) + 1;\n        colors[x] = rnd;\n      });\n      this.updateCategoricalsInData({\n        'meta.manualcolor': colors\n      });\n    });\n    let type = null;\n    if ((_props$container = props.container) !== null && _props$container !== void 0 && (_props$container$mark = _props$container.marker) !== null && _props$container$mark !== void 0 && _props$container$mark.categoricalaxis) {\n      type = 'manual';\n    } else if (!props.container.marker || props.container.marker && !props.container.marker.colorsrc) {\n      type = 'constant';\n    } else if (props.container.marker && Array.isArray(props.container.marker.color) && props.fullContainer.marker && Array.isArray(props.fullContainer.marker.color)) {\n      type = 'variable';\n    }\n    this.state = {\n      type,\n      value: {\n        constant: type === 'constant' ? props.fullValue : COLORS.mutedBlue,\n        variable: type === 'variable' ? props.fullValue : null,\n        manual: type === 'manual' ? props.fullValue : null\n      },\n      selectedConstantColorOption: type === 'constant' && props.multiValued ? 'multiple' : 'single'\n    };\n    this.setType = this.setType.bind(this);\n    this.setColor = this.setColor.bind(this);\n    this.setColorScale = this.setColorScale.bind(this);\n    this.onConstantColorOptionChange = this.onConstantColorOptionChange.bind(this);\n    this.applyType(type, true);\n  }\n\n  /**\n   * Also accepts usual fields, not just the custom ones.\n   */\n\n  /**\n   * An event handler for when the user selects Manual, Constant or Variable.\n   * @param {string} type\n   */\n  setType(type) {\n    if (this.state.type !== type) {\n      this.setState({\n        type\n      });\n      this.props.updatePlot(this.state.value[type]);\n      this.applyType(type, false);\n    }\n  }\n\n  /**\n   * Applies the change of the type (manual, constant or variable) to the chart\n   * data. In the next render this component will show a different section.\n   * @param {string} type\n   * @param {boolean} initial Whether the method can write state through\n   * this.state, if not, then uses this.setState. React throws an error in the\n   * browser console when using this.setState inside a component constructor,\n   * even indirectly.\n   */\n  applyType(type, initial) {\n    var _this$props$container6, _this$props$container7, _this$props$container8, _this$props$container9, _this$props$container10, _this$props$container11;\n    switch (type) {\n      case 'constant':\n        this.updateCategoricalsInData({\n          'marker.colorsrc': null,\n          'marker.colorscale': null,\n          'marker.showscale': null,\n          'marker.categoricalaxis': null,\n          'meta.manualcolor': null\n        });\n        if (initial) {\n          if (typeof this.state !== 'object') {\n            this.setState({});\n          }\n          this.setState({\n            colorScale: null\n          });\n        } else {\n          this.setState({\n            colorscale: null\n          });\n        }\n        break;\n      case 'manual':\n        this.updateCategoricalsInData({\n          'marker.colorscale': ((_this$props$container6 = this.props.container) === null || _this$props$container6 === void 0 ? void 0 : (_this$props$container7 = _this$props$container6.marker) === null || _this$props$container7 === void 0 ? void 0 : _this$props$container7.colorscale) || config.settings.plotlyChartsColorScale,\n          'marker.categoricalaxis': ((_this$props$container8 = this.props.container) === null || _this$props$container8 === void 0 ? void 0 : (_this$props$container9 = _this$props$container8.marker) === null || _this$props$container9 === void 0 ? void 0 : _this$props$container9.categoricalaxis) || 'x',\n          'meta.manualcolor': ((_this$props$container10 = this.props.container) === null || _this$props$container10 === void 0 ? void 0 : (_this$props$container11 = _this$props$container10.meta) === null || _this$props$container11 === void 0 ? void 0 : _this$props$container11.manualcolor) || {}\n        });\n        this.rebuildColorPickers();\n        break;\n      case 'variable':\n        this.updateCategoricalsInData({\n          'marker.color': null,\n          'marker.colorsrc': null,\n          'marker.colorscale': null,\n          'marker.categoricalaxis': null,\n          'meta.manualcolor': null\n        });\n        break;\n      default:\n        // console.error('Unknown marker color type', type);\n        return;\n    }\n  }\n  setColor(inputValue) {\n    const {\n      type\n    } = this.state;\n    if (type === 'manual') {\n      // console.error(\n      //   'When type is set to \"manual\", setColor should not be called.',\n      // );\n      return;\n    }\n    this.setState(type === 'constant' ? {\n      value: {\n        constant: inputValue\n      }\n    } : {\n      value: {\n        variable: inputValue\n      }\n    });\n    this.props.updatePlot(inputValue);\n  }\n  setColorScale(inputValue) {\n    this.setState({\n      colorscale: inputValue\n    });\n    this.context.updateContainer({\n      'marker.colorscale': inputValue\n    });\n  }\n  isMultiValued() {\n    return this.props.multiValued || Array.isArray(this.props.fullValue) && this.props.fullValue.includes(MULTI_VALUED) || this.props.container.marker && this.props.container.marker.colorscale && this.props.container.marker.colorscale === MULTI_VALUED || this.props.container.marker && this.props.container.marker.colorsrc && this.props.container.marker.colorsrc === MULTI_VALUED || this.props.container.marker && this.props.container.marker.color && Array.isArray(this.props.container.marker.color) && this.props.container.marker.color.includes(MULTI_VALUED);\n  }\n  onConstantColorOptionChange(value) {\n    this.setState({\n      selectedConstantColorOption: value\n    });\n  }\n  renderConstantControls() {\n    const _ = this.context.localize;\n    return __jsx(MultiColorPicker, {\n      attr: \"marker.color\",\n      multiColorMessage: _('Each trace will be colored according to the selected colorscale.'),\n      singleColorMessage: _('All traces will be colored in the the same color.'),\n      setColor: this.setColor,\n      setColorScale: this.setColorScale,\n      onConstantColorOptionChange: this.onConstantColorOptionChange,\n      parentSelectedConstantColorOption: this.state.selectedConstantColorOption,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 7\n      }\n    });\n  }\n\n  /**\n   *  When the selected categorical axis is changed.\n   */\n\n  renderManualControls() {\n    var _this$props$container12, _this$props$container13, _this$props$container14, _this$props$container15, _this$props$container16, _this$props$container17, _this$props$container18, _this$props$container19;\n    const _ = this.context.localize;\n    const options = [{\n      label: _('X Axis'),\n      value: 'x'\n    }, {\n      label: _('Y axis'),\n      value: 'y'\n    }];\n    const categoricalColorscale = (_this$props$container12 = this.props.container) === null || _this$props$container12 === void 0 ? void 0 : (_this$props$container13 = _this$props$container12.marker) === null || _this$props$container13 === void 0 ? void 0 : _this$props$container13.colorscale;\n    return __jsx(React.Fragment, null, __jsx(RadioBlocks, {\n      options: options,\n      activeOption: ((_this$props$container14 = this.props.container) === null || _this$props$container14 === void 0 ? void 0 : (_this$props$container15 = _this$props$container14.marker) === null || _this$props$container15 === void 0 ? void 0 : _this$props$container15.categoricalaxis) || null,\n      onOptionChange: this.handleAxisChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 9\n      }\n    }), ((_this$props$container16 = this.props.container) === null || _this$props$container16 === void 0 ? void 0 : (_this$props$container17 = _this$props$container16.marker) === null || _this$props$container17 === void 0 ? void 0 : _this$props$container17.categoricalaxis) && __jsx(React.Fragment, null, __jsx(ColorscalePickerWidget, {\n      selected: categoricalColorscale,\n      onColorscaleChange: this.handleColorscaleChange.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 13\n      }\n    }), Object.entries(((_this$props$container18 = this.props.container) === null || _this$props$container18 === void 0 ? void 0 : (_this$props$container19 = _this$props$container18.meta) === null || _this$props$container19 === void 0 ? void 0 : _this$props$container19.manualcolor) || {}).map(([val, color], i) => {\n      return __jsx(ColorPickerField, {\n        key: val,\n        name: val,\n        color: color,\n        colorscale: categoricalColorscale,\n        onChange: newColor => {\n          this.factoryHandleColorPickerChange(val, categoricalColorscale).bind(this)(newColor);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 509,\n          columnNumber: 19\n        }\n      });\n    })));\n  }\n  renderVariableControls() {\n    var _this$props$container20, _this$props$container21;\n    const multiValued = this.props.container && this.props.container.marker && (this.props.container.marker.colorscale && this.props.container.marker.colorscale === MULTI_VALUED || this.props.container.marker.colorsrc && this.props.container.marker.colorsrc === MULTI_VALUED);\n    const colorscaleState = this.state.colorscale;\n    const colorscaleProps = (_this$props$container20 = this.props.container) === null || _this$props$container20 === void 0 ? void 0 : (_this$props$container21 = _this$props$container20.marker) === null || _this$props$container21 === void 0 ? void 0 : _this$props$container21.colorscale;\n    const activeColorscale = colorscaleState ? colorscaleState : colorscaleProps;\n    return __jsx(Field, {\n      multiValued: multiValued,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 7\n      }\n    }, __jsx(DataSelector, {\n      suppressMultiValuedMessage: true,\n      attr: \"marker.color\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 548,\n        columnNumber: 9\n      }\n    }), this.props.container.marker && this.props.container.marker.colorscale === MULTI_VALUED ? null : __jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 11\n      }\n    }, __jsx(CustomMarkerColorscales, {\n      _: this.props._,\n      handleChange: this.setColorScale,\n      colorscale: activeColorscale,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 13\n      }\n    })));\n  }\n  render() {\n    const {\n      attr\n    } = this.props;\n    const {\n      localize: _,\n      container\n    } = this.context;\n\n    // TO DO: https://github.com/plotly/react-chart-editor/issues/654\n    const noSplitsPresent = container && (!container.transforms || !container.transforms.filter(t => t.type === 'groupby').length);\n    if (noSplitsPresent) {\n      const {\n        type\n      } = this.state;\n      const options = [{\n        label: _('Manual'),\n        value: 'manual'\n      }, {\n        label: _('Constant'),\n        value: 'constant'\n      }, {\n        label: _('Variable'),\n        value: 'variable'\n      }];\n\n      // TODO: the minimum width is too big, there should be a margin to the\n      // right of Variable that should be like the other fields with 100% width\n      return __jsx(React.Fragment, null, __jsx(Field, _extends({}, this.props, {\n        attr: attr,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 585,\n          columnNumber: 11\n        }\n      }), __jsx(Field, {\n        multiValued: this.isMultiValued() && !this.state.type,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 586,\n          columnNumber: 13\n        }\n      }, __jsx(RadioBlocks, {\n        options: options,\n        activeOption: type,\n        onOptionChange: this.setType,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 587,\n          columnNumber: 15\n        }\n      }), !type ? null : __jsx(Info, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 594,\n          columnNumber: 17\n        }\n      }, type === 'constant' ? _('All points in a trace are colored in the same color.') : type === 'variable' ? _('Each point in a trace is colored according to data.') : _('Each point in a trace is colored according to the selected axis and the below manually set colors.'))), type === 'manual' && this.renderManualControls(), type === 'constant' && this.renderConstantControls(), type === 'variable' && this.renderVariableControls()), type === 'constant' ? null : __jsx(React.Fragment, null, __jsx(Radio, {\n        label: _('Colorscale Direction'),\n        attr: \"marker.reversescale\",\n        options: [{\n          label: _('Normal'),\n          value: false\n        }, {\n          label: _('Reversed'),\n          value: true\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 612,\n          columnNumber: 15\n        }\n      }), __jsx(Radio, {\n        label: _('Color Bar'),\n        attr: \"marker.showscale\",\n        options: [{\n          label: _('Show'),\n          value: true\n        }, {\n          label: _('Hide'),\n          value: false\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 620,\n          columnNumber: 15\n        }\n      }), __jsx(VisibilitySelect, {\n        label: _('Colorscale Range'),\n        attr: \"marker.cauto\",\n        options: [{\n          label: _('Auto'),\n          value: true\n        }, {\n          label: _('Custom'),\n          value: false\n        }],\n        showOn: false,\n        defaultOpt: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 628,\n          columnNumber: 15\n        }\n      }, __jsx(Numeric, {\n        label: _('Min'),\n        attr: \"marker.cmin\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 638,\n          columnNumber: 17\n        }\n      }), __jsx(Numeric, {\n        label: _('Max'),\n        attr: \"marker.cmax\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 639,\n          columnNumber: 17\n        }\n      }))));\n    }\n    return __jsx(Field, _extends({}, this.props, {\n      attr: attr,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 648,\n        columnNumber: 7\n      }\n    }), this.renderConstantControls());\n  }\n}\nUnconnectedMarkerColor.propTypes = _objectSpread({\n  fullValue: PropTypes.any,\n  updatePlot: PropTypes.func\n}, Field.propTypes);\nUnconnectedMarkerColor.contextTypes = {\n  localize: PropTypes.func,\n  updateContainer: PropTypes.func,\n  traceIndexes: PropTypes.array,\n  container: PropTypes.object\n};\nUnconnectedMarkerColor.displayName = 'UnconnectedMarkerColor';\nexport default connectToContainer(UnconnectedMarkerColor);","map":{"version":3,"names":["Field","PropTypes","React","Component","connectToContainer","RadioBlocks","MultiColorPicker","Numeric","Radio","Info","DataSelector","VisibilitySelect","MULTI_VALUED","COLORS","ColorscalePickerWidget","Dropdown","config","loadable","CustomMarkerColorscales","ReactColor","lib","ColorPicker","selectedColorscale","color","onChange","rest","dropdownOpen","setDropdownOpen","useState","contrastColor","useCallback","replace","split","rr","gg","bb","parseInt","l","d","cc","useMemo","backgroundColor","fontFamily","textTransform","__CLIENT__","CirclePicker","ColorPickerField","name","colorscale","display","width","marginTop","alignSelf","flexGrow","textAlign","marginRight","flexShrink","length","Math","floor","random","UnconnectedMarkerColor","constructor","props","context","obj","updateCategoricalsInVisual","isManual","container","marker","categoricalaxis","updateContainer","undefined","data","map","item","meta","manualcolor","opt","updateCategoricalsInData","rebuildColorPickers","val","cs","val2","newColor","indexOf","hex","type","colors","forEach","x","i","rnd","colorsrc","Array","isArray","fullContainer","state","value","constant","fullValue","mutedBlue","variable","manual","selectedConstantColorOption","multiValued","setType","bind","setColor","setColorScale","onConstantColorOptionChange","applyType","setState","updatePlot","initial","colorScale","settings","plotlyChartsColorScale","inputValue","isMultiValued","includes","renderConstantControls","_","localize","renderManualControls","options","label","categoricalColorscale","handleAxisChange","handleColorscaleChange","Object","entries","factoryHandleColorPickerChange","renderVariableControls","colorscaleState","colorscaleProps","activeColorscale","render","attr","noSplitsPresent","transforms","filter","t","propTypes","any","func","contextTypes","traceIndexes","array","object","displayName"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-plotlycharts/src/ChartEditor/MarkerColor.jsx"],"sourcesContent":["import Field from 'react-chart-editor/lib/components/fields/Field';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connectToContainer } from 'react-chart-editor/lib';\nimport RadioBlocks from 'react-chart-editor/lib/components/widgets/RadioBlocks';\nimport MultiColorPicker from 'react-chart-editor/lib/components/fields/MultiColorPicker';\nimport Numeric from 'react-chart-editor/lib/components/fields/Numeric';\nimport Radio from 'react-chart-editor/lib/components/fields/Radio';\nimport Info from 'react-chart-editor/lib/components/fields/Info';\nimport DataSelector from 'react-chart-editor/lib/components/fields/DataSelector';\nimport VisibilitySelect from 'react-chart-editor/lib/components/fields/VisibilitySelect';\nimport { MULTI_VALUED, COLORS } from 'react-chart-editor/lib/lib/constants';\nimport ColorscalePickerWidget from 'react-chart-editor/lib/components/widgets/ColorscalePicker';\nimport loadash from 'lodash';\nimport { Dropdown } from 'semantic-ui-react';\nimport config from '@plone/volto/registry';\n\nimport loadable from '@loadable/component';\nimport CustomMarkerColorscales from './CustomMarkerColorscales';\n\nconst ReactColor = loadable.lib(() => import('react-color'));\n\n/**\n * React color picker component.\n *\n * @param {object} props\n * @param {string[]} props.selectedColorscale The color set from which the user\n * can choose.\n * @param {string} props.color Currently selected color.\n * @param {function} props.onChange Handler function for when the selected color\n * changes.\n */\nconst ColorPicker = ({ selectedColorscale, color, onChange, ...rest }) => {\n  const [dropdownOpen, setDropdownOpen] = React.useState(false);\n\n  /**\n   * Returns black or white according to the given background color. Inspired\n   * from https://stackoverflow.com/a/1855903/258462.\n   * @returns {string} The color that should be used as foreground on the given\n   * background.\n   * @todo Make this work with colors other than the format #RRGGBB.\n   */\n  const contrastColor = React.useCallback((color) => {\n    // color = color.replace(/ /g, '').replace('#', '').split(',').map(Number);\n    color = color.replace('#', '').split('');\n\n    let rr = color[0] + color[1];\n    let gg = color[2] + color[3];\n    let bb = color[4] + color[5];\n\n    rr = parseInt(rr, 16);\n    gg = parseInt(gg, 16);\n    bb = parseInt(bb, 16);\n\n    const l = (0.299 * rr + 0.587 * gg + 0.114 * bb) / 255;\n\n    let d;\n    if (l > 0.5) {\n      d = 0; // bright colors - black font\n    } else {\n      d = 255; // dark colors - white font\n    }\n    return `rgb(${d}, ${d}, ${d})`;\n  }, []);\n\n  const cc = React.useMemo(() => {\n    return contrastColor(color);\n  }, [color, contrastColor]);\n\n  return (\n    <Dropdown\n      {...rest}\n      open={dropdownOpen}\n      onClose={() => {\n        setDropdownOpen(false);\n      }}\n      direction=\"left\"\n      trigger={\n        <button\n          onClick={() => {\n            setDropdownOpen(!dropdownOpen);\n          }}\n          style={{\n            backgroundColor: `${color}`,\n            color: cc,\n            fontFamily: 'monospace',\n            // without this it is 'capitalize', because of other CSS applied to <button>:\n            textTransform: 'uppercase',\n          }}\n        >\n          {color}\n        </button>\n      }\n    >\n      <Dropdown.Menu>\n        {__CLIENT__ && (\n          <ReactColor>\n            {({ CirclePicker }) => {\n              return (\n                <CirclePicker\n                  color={color}\n                  onChange={onChange}\n                  colors={selectedColorscale}\n                />\n              );\n            }}\n          </ReactColor>\n        )}\n      </Dropdown.Menu>\n    </Dropdown>\n  );\n};\n\n/**\n * React color picker field component. Just an enhanced ColorPicker with a label\n * before it.\n *\n * @param {object} props\n * @param {string} props.name The string to put in the label.\n * @param {string} props.color Currently selected color.\n * @param {function} props.onChange Handler function for when the selected color\n * changes.\n * @param {string[]} props.colorscale The color set from which the user can\n * choose.\n */\nconst ColorPickerField = ({ name, color, colorscale, onChange }) => {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        width: '100%',\n        marginTop: '0.1rem',\n      }}\n    >\n      <label\n        style={{\n          alignSelf: 'center',\n        }}\n      >\n        {name}\n      </label>\n      <div style={{ flexGrow: 1 }}></div>\n      <ColorPicker\n        style={{\n          textAlign: 'right',\n          marginRight: '1rem',\n          flexShrink: 0,\n        }}\n        color={\n          1 <= color && color <= colorscale.length\n            ? colorscale[color - 1]\n            : colorscale[Math.floor(Math.random() * colorscale.length)]\n        }\n        selectedColorscale={colorscale}\n        onChange={onChange}\n      />\n    </div>\n  );\n};\n\n/**\n * @description The three container property paths relevant to bar charts with\n * categorical coloured axis are:\n *  - `marker.colorscale` - the color scale, an array of colors (currently only\n *    \\# followed by 6 hex digits are supported)\n *  - `meta.manualcolor`: association between every unique value in the\n *    categoricalaxis and a color index representing a color in the\n *    marker.colorscale,\n *  - `marker.categoricalaxis`: can be `'x'` or `'y'` or `null` (initially it is\n *    `null`)\n *\n * *Related to color indices:* `-1` invalid array index, `0` valid array index,\n * so `0` means invalid color index in any given colorscale.\n * @todo handle indices using special functions that transform e.g. `0` in `1`\n * and `8` in `7`.\n */\nclass UnconnectedMarkerColor extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    let type = null;\n\n    if (props.container?.marker?.categoricalaxis) {\n      type = 'manual';\n    } else if (\n      !props.container.marker ||\n      (props.container.marker && !props.container.marker.colorsrc)\n    ) {\n      type = 'constant';\n    } else if (\n      props.container.marker &&\n      Array.isArray(props.container.marker.color) &&\n      props.fullContainer.marker &&\n      Array.isArray(props.fullContainer.marker.color)\n    ) {\n      type = 'variable';\n    }\n\n    this.state = {\n      type,\n      value: {\n        constant: type === 'constant' ? props.fullValue : COLORS.mutedBlue,\n        variable: type === 'variable' ? props.fullValue : null,\n        manual: type === 'manual' ? props.fullValue : null,\n      },\n      selectedConstantColorOption:\n        type === 'constant' && props.multiValued ? 'multiple' : 'single',\n    };\n\n    this.setType = this.setType.bind(this);\n    this.setColor = this.setColor.bind(this);\n    this.setColorScale = this.setColorScale.bind(this);\n    this.onConstantColorOptionChange = this.onConstantColorOptionChange.bind(\n      this,\n    );\n\n    this.applyType(type, true);\n  }\n\n  /**\n   * Also accepts usual fields, not just the custom ones.\n   */\n  updateCategoricalsInData = (obj) => {\n    //TODO: this updateContainer is resetting layout to some defaults when loading component\n    //TODO: need to go around that\n    //this.context.updateContainer(obj);\n    this.updateCategoricalsInVisual();\n  };\n\n  /**\n   * Based on data of the current trace which contains custom fields.\n   */\n  updateCategoricalsInVisual = () => {\n    const isManual = this.props.container?.marker?.categoricalaxis;\n    if (!isManual && this.props.container && this.props.container.marker) {\n      this.context.updateContainer({\n        'marker.color': undefined,\n      });\n      return;\n    }\n\n    const data =\n      this.props.container && this.props.container.marker\n        ? this.props.container[this.props.container.marker.categoricalaxis].map(\n            (item) =>\n              this.props.container.marker.colorscale[\n                this.props.container.meta.manualcolor[item] - 1\n              ],\n          )\n        : [];\n\n    if (this.props.container && this.props.container.marker) {\n      this.context.updateContainer({\n        'marker.color': data,\n      });\n    }\n  };\n\n  /**\n   * An event handler for when the user selects Manual, Constant or Variable.\n   * @param {string} type\n   */\n  setType(type) {\n    if (this.state.type !== type) {\n      this.setState({ type });\n      this.props.updatePlot(this.state.value[type]);\n      this.applyType(type, false);\n    }\n  }\n\n  /**\n   * Applies the change of the type (manual, constant or variable) to the chart\n   * data. In the next render this component will show a different section.\n   * @param {string} type\n   * @param {boolean} initial Whether the method can write state through\n   * this.state, if not, then uses this.setState. React throws an error in the\n   * browser console when using this.setState inside a component constructor,\n   * even indirectly.\n   */\n  applyType(type, initial) {\n    switch (type) {\n      case 'constant':\n        this.updateCategoricalsInData({\n          'marker.colorsrc': null,\n          'marker.colorscale': null,\n          'marker.showscale': null,\n          'marker.categoricalaxis': null,\n          'meta.manualcolor': null,\n        });\n        if (initial) {\n          if (typeof this.state !== 'object') {\n            this.setState({});\n          }\n          this.setState({ colorScale: null });\n        } else {\n          this.setState({ colorscale: null });\n        }\n        break;\n\n      case 'manual':\n        this.updateCategoricalsInData({\n          'marker.colorscale':\n            this.props.container?.marker?.colorscale ||\n            config.settings.plotlyChartsColorScale,\n          'marker.categoricalaxis':\n            this.props.container?.marker?.categoricalaxis || 'x',\n          'meta.manualcolor': this.props.container?.meta?.manualcolor || {},\n        });\n        this.rebuildColorPickers();\n        break;\n\n      case 'variable':\n        this.updateCategoricalsInData({\n          'marker.color': null,\n          'marker.colorsrc': null,\n          'marker.colorscale': null,\n          'marker.categoricalaxis': null,\n          'meta.manualcolor': null,\n        });\n        break;\n\n      default:\n        // console.error('Unknown marker color type', type);\n        return;\n    }\n  }\n\n  setColor(inputValue) {\n    const { type } = this.state;\n\n    if (type === 'manual') {\n      // console.error(\n      //   'When type is set to \"manual\", setColor should not be called.',\n      // );\n      return;\n    }\n\n    this.setState(\n      type === 'constant'\n        ? { value: { constant: inputValue } }\n        : { value: { variable: inputValue } },\n    );\n    this.props.updatePlot(inputValue);\n  }\n\n  setColorScale(inputValue) {\n    this.setState({ colorscale: inputValue });\n    this.context.updateContainer({ 'marker.colorscale': inputValue });\n  }\n\n  isMultiValued() {\n    return (\n      this.props.multiValued ||\n      (Array.isArray(this.props.fullValue) &&\n        this.props.fullValue.includes(MULTI_VALUED)) ||\n      (this.props.container.marker &&\n        this.props.container.marker.colorscale &&\n        this.props.container.marker.colorscale === MULTI_VALUED) ||\n      (this.props.container.marker &&\n        this.props.container.marker.colorsrc &&\n        this.props.container.marker.colorsrc === MULTI_VALUED) ||\n      (this.props.container.marker &&\n        this.props.container.marker.color &&\n        Array.isArray(this.props.container.marker.color) &&\n        this.props.container.marker.color.includes(MULTI_VALUED))\n    );\n  }\n\n  onConstantColorOptionChange(value) {\n    this.setState({\n      selectedConstantColorOption: value,\n    });\n  }\n\n  renderConstantControls() {\n    const _ = this.context.localize;\n    return (\n      <MultiColorPicker\n        attr=\"marker.color\"\n        multiColorMessage={_(\n          'Each trace will be colored according to the selected colorscale.',\n        )}\n        singleColorMessage={_(\n          'All traces will be colored in the the same color.',\n        )}\n        setColor={this.setColor}\n        setColorScale={this.setColorScale}\n        onConstantColorOptionChange={this.onConstantColorOptionChange}\n        parentSelectedConstantColorOption={\n          this.state.selectedConstantColorOption\n        }\n      />\n    );\n  }\n\n  /**\n   *  When the selected categorical axis is changed.\n   */\n  handleAxisChange = (opt) => {\n    this.updateCategoricalsInData({\n      'marker.categoricalaxis': opt,\n      // 'marker.colorscale': defaultColorscale,\n      // 'meta.manualcolor': ,\n    });\n    this.rebuildColorPickers();\n  };\n\n  factoryHandleColorPickerChange = (val, cs) => {\n    let val2 = val;\n\n    return (newColor) => {\n      this.updateCategoricalsInData({\n        'meta.manualcolor': {\n          ...(this.props.container?.meta?.manualcolor || {}),\n          [val2]: cs.indexOf(newColor.hex) + 1,\n        },\n      });\n      this.rebuildColorPickers();\n    };\n  };\n\n  handleColorscaleChange = (cs) => {\n    this.updateCategoricalsInData({\n      'marker.colorscale': cs,\n    });\n    this.rebuildColorPickers();\n  };\n\n  /**\n   * Requires categorical axis and categorical colorscale defined.\n   */\n  rebuildColorPickers = () => {\n    if (this.props.container.type !== 'bar') {\n      this.updateCategoricalsInData({\n        'marker.colorscale': null,\n        'meta.manualcolor': null,\n        'marker.categoricalaxis': null,\n      });\n      return;\n    }\n\n    const colors = {};\n\n    const data = this.props.container[\n      this.props.container.marker.categoricalaxis\n    ];\n\n    // the colorscale array\n    const cs = this.props.container.marker?.colorscale;\n\n    // if a color scale is not yet set\n    if (!cs) {\n      return;\n    }\n\n    // for each unique value\n    loadash.uniq(data).forEach((x, i) => {\n      // if the current unique value from the axis has a color\n      if (\n        this.props.container.meta.manualcolor[x] &&\n        this.props.container.meta.manualcolor[x] > 0\n      ) {\n        colors[x] = this.props.container.meta.manualcolor[x];\n        return;\n      }\n\n      // if not, use an increasing integer\n      if (i < cs.length) {\n        colors[x] = i + 1;\n        return;\n      }\n\n      // if the increasing integer is not valid, set a random valid index\n      const rnd = Math.floor(Math.random() * cs.length) + 1;\n      colors[x] = rnd;\n    });\n\n    this.updateCategoricalsInData({\n      'meta.manualcolor': colors,\n    });\n  };\n\n  renderManualControls() {\n    const _ = this.context.localize;\n\n    const options = [\n      { label: _('X Axis'), value: 'x' },\n      { label: _('Y axis'), value: 'y' },\n    ];\n\n    const categoricalColorscale = this.props.container?.marker?.colorscale;\n\n    return (\n      <>\n        <RadioBlocks\n          options={options}\n          activeOption={this.props.container?.marker?.categoricalaxis || null}\n          onOptionChange={this.handleAxisChange}\n        />\n        {this.props.container?.marker?.categoricalaxis && (\n          <>\n            <ColorscalePickerWidget\n              selected={categoricalColorscale}\n              onColorscaleChange={this.handleColorscaleChange.bind(this)}\n            />\n            {Object.entries(this.props.container?.meta?.manualcolor || {}).map(\n              ([val, color], i) => {\n                return (\n                  <ColorPickerField\n                    key={val}\n                    name={val}\n                    color={color}\n                    colorscale={categoricalColorscale}\n                    onChange={(newColor) => {\n                      this.factoryHandleColorPickerChange(\n                        val,\n                        categoricalColorscale,\n                      ).bind(this)(newColor);\n                    }}\n                  />\n                );\n              },\n            )}\n          </>\n        )}\n      </>\n    );\n  }\n\n  renderVariableControls() {\n    const multiValued =\n      this.props.container &&\n      this.props.container.marker &&\n      ((this.props.container.marker.colorscale &&\n        this.props.container.marker.colorscale === MULTI_VALUED) ||\n        (this.props.container.marker.colorsrc &&\n          this.props.container.marker.colorsrc === MULTI_VALUED));\n\n    const colorscaleState = this.state.colorscale;\n    const colorscaleProps = this.props.container?.marker?.colorscale;\n\n    const activeColorscale = colorscaleState\n      ? colorscaleState\n      : colorscaleProps;\n\n    return (\n      <Field multiValued={multiValued}>\n        <DataSelector suppressMultiValuedMessage attr=\"marker.color\" />\n        {this.props.container.marker &&\n        this.props.container.marker.colorscale === MULTI_VALUED ? null : (\n          <React.Fragment>\n            <CustomMarkerColorscales\n              _={this.props._}\n              handleChange={this.setColorScale}\n              colorscale={activeColorscale}\n            />\n          </React.Fragment>\n        )}\n      </Field>\n    );\n  }\n\n  render() {\n    const { attr } = this.props;\n    const { localize: _, container } = this.context;\n\n    // TO DO: https://github.com/plotly/react-chart-editor/issues/654\n    const noSplitsPresent =\n      container &&\n      (!container.transforms ||\n        !container.transforms.filter((t) => t.type === 'groupby').length);\n\n    if (noSplitsPresent) {\n      const { type } = this.state;\n      const options = [\n        { label: _('Manual'), value: 'manual' },\n        { label: _('Constant'), value: 'constant' },\n        { label: _('Variable'), value: 'variable' },\n      ];\n\n      // TODO: the minimum width is too big, there should be a margin to the\n      // right of Variable that should be like the other fields with 100% width\n      return (\n        <>\n          <Field {...this.props} attr={attr}>\n            <Field multiValued={this.isMultiValued() && !this.state.type}>\n              <RadioBlocks\n                options={options}\n                activeOption={type}\n                onOptionChange={this.setType}\n              />\n\n              {!type ? null : (\n                <Info>\n                  {type === 'constant'\n                    ? _('All points in a trace are colored in the same color.')\n                    : type === 'variable'\n                    ? _('Each point in a trace is colored according to data.')\n                    : _(\n                        'Each point in a trace is colored according to the selected axis and the below manually set colors.',\n                      )}\n                </Info>\n              )}\n            </Field>\n\n            {type === 'manual' && this.renderManualControls()}\n            {type === 'constant' && this.renderConstantControls()}\n            {type === 'variable' && this.renderVariableControls()}\n          </Field>\n          {type === 'constant' ? null : (\n            <>\n              <Radio\n                label={_('Colorscale Direction')}\n                attr=\"marker.reversescale\"\n                options={[\n                  { label: _('Normal'), value: false },\n                  { label: _('Reversed'), value: true },\n                ]}\n              />\n              <Radio\n                label={_('Color Bar')}\n                attr=\"marker.showscale\"\n                options={[\n                  { label: _('Show'), value: true },\n                  { label: _('Hide'), value: false },\n                ]}\n              />\n              <VisibilitySelect\n                label={_('Colorscale Range')}\n                attr=\"marker.cauto\"\n                options={[\n                  { label: _('Auto'), value: true },\n                  { label: _('Custom'), value: false },\n                ]}\n                showOn={false}\n                defaultOpt={true}\n              >\n                <Numeric label={_('Min')} attr=\"marker.cmin\" />\n                <Numeric label={_('Max')} attr=\"marker.cmax\" />\n              </VisibilitySelect>\n            </>\n          )}\n        </>\n      );\n    }\n\n    return (\n      <Field {...this.props} attr={attr}>\n        {this.renderConstantControls()}\n      </Field>\n    );\n  }\n}\n\nUnconnectedMarkerColor.propTypes = {\n  fullValue: PropTypes.any,\n  updatePlot: PropTypes.func,\n  ...Field.propTypes,\n};\n\nUnconnectedMarkerColor.contextTypes = {\n  localize: PropTypes.func,\n  updateContainer: PropTypes.func,\n  traceIndexes: PropTypes.array,\n  container: PropTypes.object,\n};\n\nUnconnectedMarkerColor.displayName = 'UnconnectedMarkerColor';\n\nexport default connectToContainer(UnconnectedMarkerColor);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}