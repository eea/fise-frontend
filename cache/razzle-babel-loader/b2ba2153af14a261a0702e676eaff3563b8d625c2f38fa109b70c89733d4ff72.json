{"ast":null,"code":"import _extends from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/extends.js\";\nimport _objectWithoutProperties from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _filter from \"lodash/filter\";\nimport _escapeRegExp from \"lodash/escapeRegExp\";\nvar _excluded = [\"__isNew__\", \"extra\"];\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-slate-footnote/src/editor/MultiSelectSearchWidget.jsx\",\n  _this = this,\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\n/**\n * ArrayWidget component.\n * @module components/manage/Widgets/ArrayWidget\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { defineMessages } from 'react-intl';\nimport { Option, DropdownIndicator, selectTheme, customSelectStyles } from '@plone/volto/components/manage/Widgets/SelectStyling';\nimport { nanoid } from '@plone/volto-slate/utils';\nimport { FormFieldWrapper } from '@plone/volto/components';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nvar messages = defineMessages({\n  select: {\n    \"id\": \"Select\\u2026\",\n    \"defaultMessage\": \"Select\\u2026\"\n  },\n  no_options: {\n    \"id\": \"No options\",\n    \"defaultMessage\": \"No options\"\n  }\n});\nvar MultiSelectSearchWidget = injectLazyLibs('reactSelectAsyncCreateable')(_s(function (props) {\n  _s();\n  var _useState = useState([]),\n    selectedOption = _useState[0],\n    setSelectedOption = _useState[1];\n  var _useState2 = useState([]),\n    defaultOptions = _useState2[0],\n    setDefaultOptions = _useState2[1];\n  var _useState3 = useState(props.value),\n    parentFootnote = _useState3[0],\n    setParentFootnote = _useState3[1];\n  useEffect(function () {\n    if (props.value) {\n      var parentFootnoteCurrent = props.value;\n      var extraValues = parentFootnoteCurrent && props.value.extra ? props.value.extra : [];\n      var selectedOptionCurrent = parentFootnoteCurrent.value ? [parentFootnoteCurrent].concat(_toConsumableArray(extraValues)) : [];\n      setSelectedOption(selectedOptionCurrent);\n\n      // from choices (list of all footnotes available including current in value) get all not\n      // found in current in value\n      // consider that new footnotes have value and footnote undefined\n      var _defaultOptions = (props.choices || []).filter(function (item) {\n        return !selectedOption.find(function (_ref) {\n          var label = _ref.label;\n          return label === item.label;\n        }) && item.value;\n      });\n      setDefaultOptions(_defaultOptions);\n      setParentFootnote(props.value);\n    }\n  }, [props]); // eslint-disable-line\n\n  /**\n   * evaluate on Regex to filter results\n   * @param {Object} e - event\n   * @param {Object} data\n   */\n  var loadOptions = function loadOptions(search) {\n    var re = new RegExp(_escapeRegExp(search), 'i');\n    var isMatch = function isMatch(result) {\n      return re.test(result.value);\n    };\n    var resultsFiltered = _filter(props.choices, isMatch);\n    return new Promise(function (resolve, reject) {\n      resolve(resultsFiltered);\n    });\n  };\n\n  /**\n   * If the list is empty or the first is not parent, return true\n   * @param {Object[]} optionsList list of objects - footnotes\n   * @returns {boolean}\n   */\n  var isParetFootnoteRemoved = function isParetFootnoteRemoved(optionsList) {\n    return !optionsList[0] || optionsList[0].value !== parentFootnote.value;\n  };\n\n  /**\n   * replace all parentFootnote data except uid, with the first from the list\n   * @param {Object[]} optionsList list of objects - footnotes\n   * @returns {Object}\n   */\n  var setParentFootnoteFromExtra = function setParentFootnoteFromExtra(optionsList) {\n    var _optionsList$;\n    var _ref2 = optionsList[0] || [],\n      footnote = _ref2.footnote,\n      label = _ref2.label,\n      value = _ref2.value;\n    return _objectSpread(_objectSpread({}, parentFootnote), {}, {\n      footnote: footnote || ((_optionsList$ = optionsList[0]) === null || _optionsList$ === void 0 ? void 0 : _optionsList$.value),\n      label: label,\n      value: value,\n      extra: optionsList.slice(1)\n    });\n  };\n\n  /**\n   * Will make the footnotes object, that will be saved as first from optionsList\n   * the rest will be added to extra\n   * @param {Object[]} optionsList\n   * @returns\n   */\n  var setFootnoteFromSelection = function setFootnoteFromSelection(optionsList) {\n    var extra = optionsList.slice(1).map(function (item) {\n      var obj = _objectSpread(_objectSpread({}, item), {}, {\n        footnote: item.value\n      });\n      var remove = obj.__isNew__,\n        extra = obj.extra,\n        rest = _objectWithoutProperties(obj, _excluded);\n      return rest;\n    });\n    return _objectSpread(_objectSpread({}, parentFootnote), {}, {\n      extra: extra\n    });\n  };\n\n  /**\n   * Handle the field change, will remake the result based on the new selected list\n   * @method handleChange\n   * @param {array} optionsList The selected options (already aggregated).\n   * @returns {undefined}\n   */\n  var handleChange = function handleChange(optionsList) {\n    var formattedSelectedOptions = optionsList.map(function (option) {\n      return _objectSpread(_objectSpread({\n        footnoteId: nanoid(5)\n      }, option), {}, {\n        uid: nanoid(5),\n        // overwrite existing, thus creating new record for the same text\n        footnote: option.value\n      });\n    });\n    setSelectedOption(formattedSelectedOptions);\n\n    // manage case if parent footnotes (first from the options) was removed\n    var resultSelected = isParetFootnoteRemoved(formattedSelectedOptions) ? setParentFootnoteFromExtra(formattedSelectedOptions) : setFootnoteFromSelection(formattedSelectedOptions);\n    props.onChange({\n      footnote: resultSelected\n    });\n  };\n  var AsyncCreatableSelect = props.reactSelectAsyncCreateable[\"default\"];\n  return __jsx(FormFieldWrapper, _extends({}, props, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }\n  }), __jsx(AsyncCreatableSelect, {\n    isDisabled: props.isDisabled,\n    className: \"react-select-container\",\n    classNamePrefix: \"react-select\",\n    defaultOptions: defaultOptions,\n    styles: customSelectStyles,\n    theme: selectTheme,\n    components: {\n      DropdownIndicator: DropdownIndicator,\n      Option: Option\n    },\n    isMulti: true,\n    options: defaultOptions,\n    value: selectedOption || [],\n    loadOptions: loadOptions,\n    onChange: handleChange,\n    placeholder: props.intl.formatMessage(messages.select),\n    noOptionsMessage: function noOptionsMessage() {\n      return props.intl.formatMessage(messages.no_options);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }\n  }));\n}, \"kuueDIuQglOTCdDARgGbVVvq05I=\"));\nexport default MultiSelectSearchWidget;","map":{"version":3,"names":["React","useState","useEffect","defineMessages","Option","DropdownIndicator","selectTheme","customSelectStyles","nanoid","FormFieldWrapper","injectLazyLibs","messages","select","no_options","MultiSelectSearchWidget","props","selectedOption","setSelectedOption","defaultOptions","setDefaultOptions","value","parentFootnote","setParentFootnote","parentFootnoteCurrent","extraValues","extra","selectedOptionCurrent","choices","filter","item","find","label","loadOptions","search","re","RegExp","isMatch","result","test","resultsFiltered","Promise","resolve","reject","isParetFootnoteRemoved","optionsList","setParentFootnoteFromExtra","footnote","slice","setFootnoteFromSelection","map","obj","remove","__isNew__","rest","handleChange","formattedSelectedOptions","option","footnoteId","uid","resultSelected","onChange","AsyncCreatableSelect","reactSelectAsyncCreateable","isDisabled","intl","formatMessage"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-slate-footnote/src/editor/MultiSelectSearchWidget.jsx"],"sourcesContent":["/**\n * ArrayWidget component.\n * @module components/manage/Widgets/ArrayWidget\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { defineMessages } from 'react-intl';\nimport {\n  Option,\n  DropdownIndicator,\n  selectTheme,\n  customSelectStyles,\n} from '@plone/volto/components/manage/Widgets/SelectStyling';\nimport { escapeRegExp, filter } from 'lodash';\nimport { nanoid } from '@plone/volto-slate/utils';\n\nimport { FormFieldWrapper } from '@plone/volto/components';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\n\nconst messages = defineMessages({\n  select: {\n    id: 'Select…',\n    defaultMessage: 'Select…',\n  },\n  no_options: {\n    id: 'No options',\n    defaultMessage: 'No options',\n  },\n});\n\nconst MultiSelectSearchWidget = injectLazyLibs('reactSelectAsyncCreateable')(\n  (props) => {\n    const [selectedOption, setSelectedOption] = useState([]);\n    const [defaultOptions, setDefaultOptions] = useState([]);\n    const [parentFootnote, setParentFootnote] = useState(props.value);\n\n    useEffect(() => {\n      if (props.value) {\n        const parentFootnoteCurrent = props.value;\n\n        const extraValues =\n          parentFootnoteCurrent && props.value.extra ? props.value.extra : [];\n        const selectedOptionCurrent = parentFootnoteCurrent.value\n          ? [...[parentFootnoteCurrent], ...extraValues]\n          : [];\n        setSelectedOption(selectedOptionCurrent);\n\n        // from choices (list of all footnotes available including current in value) get all not\n        // found in current in value\n        // consider that new footnotes have value and footnote undefined\n        const defaultOptions = (props.choices || []).filter(\n          (item) =>\n            !selectedOption.find(({ label }) => label === item.label) &&\n            item.value,\n        );\n        setDefaultOptions(defaultOptions);\n        setParentFootnote(props.value);\n      }\n    }, [props]); // eslint-disable-line\n\n    /**\n     * evaluate on Regex to filter results\n     * @param {Object} e - event\n     * @param {Object} data\n     */\n    const loadOptions = (search) => {\n      const re = new RegExp(escapeRegExp(search), 'i');\n      const isMatch = (result) => re.test(result.value);\n      const resultsFiltered = filter(props.choices, isMatch);\n\n      return new Promise((resolve, reject) => {\n        resolve(resultsFiltered);\n      });\n    };\n\n    /**\n     * If the list is empty or the first is not parent, return true\n     * @param {Object[]} optionsList list of objects - footnotes\n     * @returns {boolean}\n     */\n    const isParetFootnoteRemoved = (optionsList) =>\n      !optionsList[0] || optionsList[0].value !== parentFootnote.value;\n\n    /**\n     * replace all parentFootnote data except uid, with the first from the list\n     * @param {Object[]} optionsList list of objects - footnotes\n     * @returns {Object}\n     */\n    const setParentFootnoteFromExtra = (optionsList) => {\n      const { footnote, label, value } = optionsList[0] || [];\n\n      return {\n        ...parentFootnote,\n        footnote: footnote || optionsList[0]?.value,\n        label,\n        value,\n        extra: optionsList.slice(1),\n      };\n    };\n\n    /**\n     * Will make the footnotes object, that will be saved as first from optionsList\n     * the rest will be added to extra\n     * @param {Object[]} optionsList\n     * @returns\n     */\n    const setFootnoteFromSelection = (optionsList) => {\n      const extra = optionsList.slice(1).map((item) => {\n        const obj = {\n          ...item,\n          footnote: item.value,\n        };\n\n        const { __isNew__: remove, extra, ...rest } = obj;\n        return rest;\n      });\n      return { ...parentFootnote, extra };\n    };\n\n    /**\n     * Handle the field change, will remake the result based on the new selected list\n     * @method handleChange\n     * @param {array} optionsList The selected options (already aggregated).\n     * @returns {undefined}\n     */\n    const handleChange = (optionsList) => {\n      const formattedSelectedOptions = optionsList.map((option) => ({\n        footnoteId: nanoid(5), // to be overwritten if already exists (keep as a reference to same text)\n        ...option,\n        uid: nanoid(5), // overwrite existing, thus creating new record for the same text\n        footnote: option.value,\n      }));\n      setSelectedOption(formattedSelectedOptions);\n\n      // manage case if parent footnotes (first from the options) was removed\n      const resultSelected = isParetFootnoteRemoved(formattedSelectedOptions)\n        ? setParentFootnoteFromExtra(formattedSelectedOptions)\n        : setFootnoteFromSelection(formattedSelectedOptions);\n\n      props.onChange({\n        footnote: resultSelected,\n      });\n    };\n\n    const AsyncCreatableSelect = props.reactSelectAsyncCreateable.default;\n    return (\n      <FormFieldWrapper {...props}>\n        <AsyncCreatableSelect\n          isDisabled={props.isDisabled}\n          className=\"react-select-container\"\n          classNamePrefix=\"react-select\"\n          defaultOptions={defaultOptions}\n          styles={customSelectStyles}\n          theme={selectTheme}\n          components={{ DropdownIndicator, Option }}\n          isMulti\n          options={defaultOptions}\n          value={selectedOption || []}\n          loadOptions={loadOptions}\n          onChange={handleChange}\n          placeholder={props.intl.formatMessage(messages.select)}\n          noOptionsMessage={() => props.intl.formatMessage(messages.no_options)}\n        />\n      </FormFieldWrapper>\n    );\n  },\n);\n\nexport default MultiSelectSearchWidget;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Select…","defaultMessage":"Select…"},{"id":"No options","defaultMessage":"No options"}]}},"sourceType":"module","externalDependencies":[]}