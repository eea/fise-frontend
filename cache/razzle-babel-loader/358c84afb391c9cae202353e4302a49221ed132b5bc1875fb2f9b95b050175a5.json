{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-plotlycharts/src/ConnectedChart/ConnectedChartWrapper.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n/*\n * The most basic connected block chart\n */\n\nimport React from 'react';\nimport ConnectedChart from './ConnectedChart';\nimport { VisibilitySensor } from '@eeacms/volto-datablocks/components';\n\n/*\n * @param { object } data The chart data, layout,  extra config, etc.\n * @param { boolean } useLiveData Will update the chart with the data from the provider\n * @param { boolean } filterWithDataParameters Will filter live data with parameters from context\n *\n */\nfunction ConnectedChartWrapper(props) {\n  return __jsx(React.Fragment, null, __jsx(VisibilitySensor, {\n    className: \"connected-chart\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }, __jsx(ConnectedChart, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }))));\n}\nexport default ConnectedChartWrapper;","map":{"version":3,"names":["React","ConnectedChart","VisibilitySensor","ConnectedChartWrapper","props"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-plotlycharts/src/ConnectedChart/ConnectedChartWrapper.jsx"],"sourcesContent":["/*\n * The most basic connected block chart\n */\n\nimport React from 'react';\nimport ConnectedChart from './ConnectedChart';\n\nimport { VisibilitySensor } from '@eeacms/volto-datablocks/components';\n\n/*\n * @param { object } data The chart data, layout,  extra config, etc.\n * @param { boolean } useLiveData Will update the chart with the data from the provider\n * @param { boolean } filterWithDataParameters Will filter live data with parameters from context\n *\n */\nfunction ConnectedChartWrapper(props) {\n  return (\n    <>\n      <VisibilitySensor className=\"connected-chart\">\n        <ConnectedChart {...props} />\n      </VisibilitySensor>\n    </>\n  );\n}\n\nexport default ConnectedChartWrapper;\n"],"mappings":";;;AAAA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,cAAc,MAAM,kBAAkB;AAE7C,SAASC,gBAAgB,QAAQ,qCAAqC;;AAEtE;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,qBAAqB,CAACC,KAAK,EAAE;EACpC,OACE,4BACE,MAAC,gBAAgB;IAAC,SAAS,EAAC,iBAAiB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAC3C,MAAC,cAAc,eAAKA,KAAK;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAI,CACZ,CAClB;AAEP;AAEA,eAAeD,qBAAqB"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}