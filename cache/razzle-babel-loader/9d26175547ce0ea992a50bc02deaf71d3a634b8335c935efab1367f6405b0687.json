{"ast":null,"code":"import _without from \"lodash/without\";\nimport _omit from \"lodash/omit\";\nimport _isEqual from \"lodash/isEqual\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Form/BlocksToolbar.jsx\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport React from 'react';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { messages, getBlocksFieldname, getBlocksLayoutFieldname } from '@plone/volto/helpers';\nimport { Icon } from '@plone/volto/components';\nimport { Plug } from '@plone/volto/components/manage/Pluggable';\nimport { v4 as uuid } from 'uuid';\nimport { load } from 'redux-localstorage-simple';\nimport { setBlocksClipboard, resetBlocksClipboard } from '@plone/volto/actions';\nimport config from '@plone/volto/registry';\nimport copySVG from '@plone/volto/icons/copy.svg';\nimport cutSVG from '@plone/volto/icons/cut.svg';\nimport pasteSVG from '@plone/volto/icons/paste.svg';\nimport trashSVG from '@plone/volto/icons/delete.svg';\nexport class BlocksToolbarComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.copyBlocksToClipboard = this.copyBlocksToClipboard.bind(this);\n    this.cutBlocksToClipboard = this.cutBlocksToClipboard.bind(this);\n    this.deleteBlocks = this.deleteBlocks.bind(this);\n    this.loadFromStorage = this.loadFromStorage.bind(this);\n    this.pasteBlocks = this.pasteBlocks.bind(this);\n    this.setBlocksClipboard = this.setBlocksClipboard.bind(this);\n  }\n  loadFromStorage() {\n    var _load;\n    const clipboard = (_load = load({\n      states: ['blocksClipboard']\n    })) === null || _load === void 0 ? void 0 : _load.blocksClipboard;\n    if (!_isEqual(clipboard, this.props.blocksClipboard)) this.props.setBlocksClipboard(clipboard || {});\n  }\n  componentDidMount() {\n    window.addEventListener('storage', this.loadFromStorage, true);\n  }\n  componentWillUnmount() {\n    window.removeEventListener('storage', this.loadFromStorage);\n  }\n  deleteBlocks() {\n    const blockIds = this.props.selectedBlocks;\n    const {\n      formData\n    } = this.props;\n    const blocksFieldname = getBlocksFieldname(formData);\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n\n    // Might need ReactDOM.unstable_batchedUpdates()\n    this.props.onSelectBlock(null);\n    const newBlockData = {\n      [blocksFieldname]: _omit(formData[blocksFieldname], blockIds),\n      [blocksLayoutFieldname]: _objectSpread(_objectSpread({}, formData[blocksLayoutFieldname]), {}, {\n        items: _without(formData[blocksLayoutFieldname].items, ...blockIds)\n      })\n    };\n    this.props.onChangeBlocks(newBlockData);\n  }\n  copyBlocksToClipboard() {\n    this.setBlocksClipboard('copy');\n  }\n  cutBlocksToClipboard() {\n    this.setBlocksClipboard('cut');\n    this.deleteBlocks();\n  }\n  setBlocksClipboard(actionType) {\n    const {\n      formData\n    } = this.props;\n    const blocksFieldname = getBlocksFieldname(formData);\n    const blocks = formData[blocksFieldname];\n    const blocksData = this.props.selectedBlocks.map(blockId => blocks[blockId]);\n    this.props.setBlocksClipboard({\n      [actionType]: blocksData\n    });\n    this.props.onSetSelectedBlocks([]);\n  }\n  pasteBlocks(e) {\n    const {\n      formData,\n      blocksClipboard = {},\n      selectedBlock\n    } = this.props;\n    const mode = Object.keys(blocksClipboard).includes('cut') ? 'cut' : 'copy';\n    const blocksData = blocksClipboard[mode] || [];\n    const cloneWithIds = blocksData.filter(blockData => !!blockData['@type']).map(blockData => {\n      const blockConfig = config.blocks.blocksConfig[blockData['@type']];\n      return mode === 'copy' ? blockConfig.cloneData ? blockConfig.cloneData(blockData) : [uuid(), blockData] : [uuid(), blockData]; // if cut/pasting blocks, we don't clone\n    }).filter(info => !!info); // some blocks may refuse to be copied\n    const blocksFieldname = getBlocksFieldname(formData);\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n    const selectedIndex = formData[blocksLayoutFieldname].items.indexOf(selectedBlock) + 1;\n    const newBlockData = {\n      [blocksFieldname]: _objectSpread(_objectSpread({}, formData[blocksFieldname]), Object.assign({}, ...cloneWithIds.map(([id, data]) => ({\n        [id]: data\n      })))),\n      [blocksLayoutFieldname]: _objectSpread(_objectSpread({}, formData[blocksLayoutFieldname]), {}, {\n        items: [...formData[blocksLayoutFieldname].items.slice(0, selectedIndex), ...cloneWithIds.map(([id]) => id), ...formData[blocksLayoutFieldname].items.slice(selectedIndex)]\n      })\n    };\n    if (!(e.ctrlKey || e.metaKey)) this.props.resetBlocksClipboard();\n    this.props.onChangeBlocks(newBlockData);\n  }\n  render() {\n    const {\n      blocksClipboard = {},\n      selectedBlock,\n      selectedBlocks,\n      intl\n    } = this.props;\n    return __jsx(React.Fragment, null, selectedBlocks.length > 0 ? __jsx(React.Fragment, null, __jsx(Plug, {\n      pluggable: \"main.toolbar.bottom\",\n      id: \"blocks-delete-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 13\n      }\n    }, __jsx(\"button\", {\n      \"aria-label\": intl.formatMessage(messages.deleteBlocks),\n      onClick: this.deleteBlocks,\n      tabIndex: 0,\n      className: \"deleteBlocks\",\n      id: \"toolbar-delete-blocks\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 15\n      }\n    }, __jsx(Icon, {\n      name: trashSVG,\n      size: \"30px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }\n    }))), __jsx(Plug, {\n      pluggable: \"main.toolbar.bottom\",\n      id: \"blocks-cut-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }\n    }, __jsx(\"button\", {\n      \"aria-label\": intl.formatMessage(messages.cutBlocks),\n      onClick: this.cutBlocksToClipboard,\n      tabIndex: 0,\n      className: \"cutBlocks\",\n      id: \"toolbar-cut-blocks\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 15\n      }\n    }, __jsx(Icon, {\n      name: cutSVG,\n      size: \"30px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }\n    }))), __jsx(Plug, {\n      pluggable: \"main.toolbar.bottom\",\n      id: \"blocks-copy-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 13\n      }\n    }, __jsx(\"button\", {\n      \"aria-label\": intl.formatMessage(messages.copyBlocks),\n      onClick: this.copyBlocksToClipboard,\n      tabIndex: 0,\n      className: \"copyBlocks\",\n      id: \"toolbar-copy-blocks\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 15\n      }\n    }, __jsx(Icon, {\n      name: copySVG,\n      size: \"30px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }\n    })))) : '', selectedBlock && ((blocksClipboard === null || blocksClipboard === void 0 ? void 0 : blocksClipboard.cut) || (blocksClipboard === null || blocksClipboard === void 0 ? void 0 : blocksClipboard.copy)) && __jsx(Plug, {\n      pluggable: \"main.toolbar.bottom\",\n      id: \"block-paste-btn\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }\n    }, __jsx(\"button\", {\n      \"aria-label\": intl.formatMessage(messages.pasteBlocks),\n      onClick: this.pasteBlocks,\n      tabIndex: 0,\n      className: \"pasteBlocks\",\n      id: \"toolbar-paste-blocks\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 13\n      }\n    }, __jsx(\"span\", {\n      className: \"blockCount\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 15\n      }\n    }, (blocksClipboard.cut || blocksClipboard.copy).length), __jsx(Icon, {\n      name: pasteSVG,\n      size: \"30px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 15\n      }\n    }))));\n  }\n}\nexport default compose(injectIntl, connect(state => {\n  return {\n    blocksClipboard: (state === null || state === void 0 ? void 0 : state.blocksClipboard) || {}\n  };\n}, {\n  setBlocksClipboard,\n  resetBlocksClipboard\n}))(BlocksToolbarComponent);","map":{"version":3,"names":["React","compose","connect","injectIntl","messages","getBlocksFieldname","getBlocksLayoutFieldname","Icon","Plug","v4","uuid","load","setBlocksClipboard","resetBlocksClipboard","config","copySVG","cutSVG","pasteSVG","trashSVG","BlocksToolbarComponent","Component","constructor","props","copyBlocksToClipboard","bind","cutBlocksToClipboard","deleteBlocks","loadFromStorage","pasteBlocks","clipboard","states","blocksClipboard","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","blockIds","selectedBlocks","formData","blocksFieldname","blocksLayoutFieldname","onSelectBlock","newBlockData","items","onChangeBlocks","actionType","blocks","blocksData","map","blockId","onSetSelectedBlocks","e","selectedBlock","mode","Object","keys","includes","cloneWithIds","filter","blockData","blockConfig","blocksConfig","cloneData","info","selectedIndex","indexOf","assign","id","data","slice","ctrlKey","metaKey","render","intl","length","formatMessage","cutBlocks","copyBlocks","cut","copy","state"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Form/BlocksToolbar.jsx"],"sourcesContent":["import React from 'react';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport {\n  messages,\n  getBlocksFieldname,\n  getBlocksLayoutFieldname,\n} from '@plone/volto/helpers';\nimport { Icon } from '@plone/volto/components';\nimport { Plug } from '@plone/volto/components/manage/Pluggable';\nimport { v4 as uuid } from 'uuid';\nimport { load } from 'redux-localstorage-simple';\nimport { isEqual, omit, without } from 'lodash';\n\nimport { setBlocksClipboard, resetBlocksClipboard } from '@plone/volto/actions';\nimport config from '@plone/volto/registry';\n\nimport copySVG from '@plone/volto/icons/copy.svg';\nimport cutSVG from '@plone/volto/icons/cut.svg';\nimport pasteSVG from '@plone/volto/icons/paste.svg';\nimport trashSVG from '@plone/volto/icons/delete.svg';\n\nexport class BlocksToolbarComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.copyBlocksToClipboard = this.copyBlocksToClipboard.bind(this);\n    this.cutBlocksToClipboard = this.cutBlocksToClipboard.bind(this);\n    this.deleteBlocks = this.deleteBlocks.bind(this);\n    this.loadFromStorage = this.loadFromStorage.bind(this);\n    this.pasteBlocks = this.pasteBlocks.bind(this);\n    this.setBlocksClipboard = this.setBlocksClipboard.bind(this);\n  }\n\n  loadFromStorage() {\n    const clipboard = load({ states: ['blocksClipboard'] })?.blocksClipboard;\n    if (!isEqual(clipboard, this.props.blocksClipboard))\n      this.props.setBlocksClipboard(clipboard || {});\n  }\n\n  componentDidMount() {\n    window.addEventListener('storage', this.loadFromStorage, true);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('storage', this.loadFromStorage);\n  }\n\n  deleteBlocks() {\n    const blockIds = this.props.selectedBlocks;\n\n    const { formData } = this.props;\n    const blocksFieldname = getBlocksFieldname(formData);\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n\n    // Might need ReactDOM.unstable_batchedUpdates()\n    this.props.onSelectBlock(null);\n    const newBlockData = {\n      [blocksFieldname]: omit(formData[blocksFieldname], blockIds),\n      [blocksLayoutFieldname]: {\n        ...formData[blocksLayoutFieldname],\n        items: without(formData[blocksLayoutFieldname].items, ...blockIds),\n      },\n    };\n    this.props.onChangeBlocks(newBlockData);\n  }\n\n  copyBlocksToClipboard() {\n    this.setBlocksClipboard('copy');\n  }\n\n  cutBlocksToClipboard() {\n    this.setBlocksClipboard('cut');\n    this.deleteBlocks();\n  }\n\n  setBlocksClipboard(actionType) {\n    const { formData } = this.props;\n    const blocksFieldname = getBlocksFieldname(formData);\n    const blocks = formData[blocksFieldname];\n    const blocksData = this.props.selectedBlocks.map(\n      (blockId) => blocks[blockId],\n    );\n    this.props.setBlocksClipboard({ [actionType]: blocksData });\n    this.props.onSetSelectedBlocks([]);\n  }\n\n  pasteBlocks(e) {\n    const { formData, blocksClipboard = {}, selectedBlock } = this.props;\n    const mode = Object.keys(blocksClipboard).includes('cut') ? 'cut' : 'copy';\n    const blocksData = blocksClipboard[mode] || [];\n    const cloneWithIds = blocksData\n      .filter((blockData) => !!blockData['@type'])\n      .map((blockData) => {\n        const blockConfig = config.blocks.blocksConfig[blockData['@type']];\n        return mode === 'copy'\n          ? blockConfig.cloneData\n            ? blockConfig.cloneData(blockData)\n            : [uuid(), blockData]\n          : [uuid(), blockData]; // if cut/pasting blocks, we don't clone\n      })\n      .filter((info) => !!info); // some blocks may refuse to be copied\n    const blocksFieldname = getBlocksFieldname(formData);\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n    const selectedIndex =\n      formData[blocksLayoutFieldname].items.indexOf(selectedBlock) + 1;\n\n    const newBlockData = {\n      [blocksFieldname]: {\n        ...formData[blocksFieldname],\n        ...Object.assign(\n          {},\n          ...cloneWithIds.map(([id, data]) => ({ [id]: data })),\n        ),\n      },\n      [blocksLayoutFieldname]: {\n        ...formData[blocksLayoutFieldname],\n        items: [\n          ...formData[blocksLayoutFieldname].items.slice(0, selectedIndex),\n          ...cloneWithIds.map(([id]) => id),\n          ...formData[blocksLayoutFieldname].items.slice(selectedIndex),\n        ],\n      },\n    };\n\n    if (!(e.ctrlKey || e.metaKey)) this.props.resetBlocksClipboard();\n    this.props.onChangeBlocks(newBlockData);\n  }\n\n  render() {\n    const {\n      blocksClipboard = {},\n      selectedBlock,\n      selectedBlocks,\n      intl,\n    } = this.props;\n    return (\n      <>\n        {selectedBlocks.length > 0 ? (\n          <>\n            <Plug pluggable=\"main.toolbar.bottom\" id=\"blocks-delete-btn\">\n              <button\n                aria-label={intl.formatMessage(messages.deleteBlocks)}\n                onClick={this.deleteBlocks}\n                tabIndex={0}\n                className=\"deleteBlocks\"\n                id=\"toolbar-delete-blocks\"\n              >\n                <Icon name={trashSVG} size=\"30px\" />\n              </button>\n            </Plug>\n            <Plug pluggable=\"main.toolbar.bottom\" id=\"blocks-cut-btn\">\n              <button\n                aria-label={intl.formatMessage(messages.cutBlocks)}\n                onClick={this.cutBlocksToClipboard}\n                tabIndex={0}\n                className=\"cutBlocks\"\n                id=\"toolbar-cut-blocks\"\n              >\n                <Icon name={cutSVG} size=\"30px\" />\n              </button>\n            </Plug>\n            <Plug pluggable=\"main.toolbar.bottom\" id=\"blocks-copy-btn\">\n              <button\n                aria-label={intl.formatMessage(messages.copyBlocks)}\n                onClick={this.copyBlocksToClipboard}\n                tabIndex={0}\n                className=\"copyBlocks\"\n                id=\"toolbar-copy-blocks\"\n              >\n                <Icon name={copySVG} size=\"30px\" />\n              </button>\n            </Plug>\n          </>\n        ) : (\n          ''\n        )}\n        {selectedBlock && (blocksClipboard?.cut || blocksClipboard?.copy) && (\n          <Plug pluggable=\"main.toolbar.bottom\" id=\"block-paste-btn\">\n            <button\n              aria-label={intl.formatMessage(messages.pasteBlocks)}\n              onClick={this.pasteBlocks}\n              tabIndex={0}\n              className=\"pasteBlocks\"\n              id=\"toolbar-paste-blocks\"\n            >\n              <span className=\"blockCount\">\n                {(blocksClipboard.cut || blocksClipboard.copy).length}\n              </span>\n              <Icon name={pasteSVG} size=\"30px\" />\n            </button>\n          </Plug>\n        )}\n      </>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state) => {\n      return {\n        blocksClipboard: state?.blocksClipboard || {},\n      };\n    },\n    { setBlocksClipboard, resetBlocksClipboard },\n  ),\n)(BlocksToolbarComponent);\n"],"mappings":";;;;;;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,OAAO;AAC/B,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,UAAU,QAAQ,YAAY;AACvC,SACEC,QAAQ,EACRC,kBAAkB,EAClBC,wBAAwB,QACnB,sBAAsB;AAC7B,SAASC,IAAI,QAAQ,yBAAyB;AAC9C,SAASC,IAAI,QAAQ,0CAA0C;AAC/D,SAASC,EAAE,IAAIC,IAAI,QAAQ,MAAM;AACjC,SAASC,IAAI,QAAQ,2BAA2B;AAGhD,SAASC,kBAAkB,EAAEC,oBAAoB,QAAQ,sBAAsB;AAC/E,OAAOC,MAAM,MAAM,uBAAuB;AAE1C,OAAOC,OAAO,MAAM,6BAA6B;AACjD,OAAOC,MAAM,MAAM,4BAA4B;AAC/C,OAAOC,QAAQ,MAAM,8BAA8B;AACnD,OAAOC,QAAQ,MAAM,+BAA+B;AAEpD,OAAO,MAAMC,sBAAsB,SAASnB,KAAK,CAACoB,SAAS,CAAC;EAC1DC,WAAW,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IAEZ,IAAI,CAACC,qBAAqB,GAAG,IAAI,CAACA,qBAAqB,CAACC,IAAI,CAAC,IAAI,CAAC;IAClE,IAAI,CAACC,oBAAoB,GAAG,IAAI,CAACA,oBAAoB,CAACD,IAAI,CAAC,IAAI,CAAC;IAChE,IAAI,CAACE,YAAY,GAAG,IAAI,CAACA,YAAY,CAACF,IAAI,CAAC,IAAI,CAAC;IAChD,IAAI,CAACG,eAAe,GAAG,IAAI,CAACA,eAAe,CAACH,IAAI,CAAC,IAAI,CAAC;IACtD,IAAI,CAACI,WAAW,GAAG,IAAI,CAACA,WAAW,CAACJ,IAAI,CAAC,IAAI,CAAC;IAC9C,IAAI,CAACZ,kBAAkB,GAAG,IAAI,CAACA,kBAAkB,CAACY,IAAI,CAAC,IAAI,CAAC;EAC9D;EAEAG,eAAe,GAAG;IAAA;IAChB,MAAME,SAAS,YAAGlB,IAAI,CAAC;MAAEmB,MAAM,EAAE,CAAC,iBAAiB;IAAE,CAAC,CAAC,0CAArC,MAAuCC,eAAe;IACxE,IAAI,CAAC,SAAQF,SAAS,EAAE,IAAI,CAACP,KAAK,CAACS,eAAe,CAAC,EACjD,IAAI,CAACT,KAAK,CAACV,kBAAkB,CAACiB,SAAS,IAAI,CAAC,CAAC,CAAC;EAClD;EAEAG,iBAAiB,GAAG;IAClBC,MAAM,CAACC,gBAAgB,CAAC,SAAS,EAAE,IAAI,CAACP,eAAe,EAAE,IAAI,CAAC;EAChE;EAEAQ,oBAAoB,GAAG;IACrBF,MAAM,CAACG,mBAAmB,CAAC,SAAS,EAAE,IAAI,CAACT,eAAe,CAAC;EAC7D;EAEAD,YAAY,GAAG;IACb,MAAMW,QAAQ,GAAG,IAAI,CAACf,KAAK,CAACgB,cAAc;IAE1C,MAAM;MAAEC;IAAS,CAAC,GAAG,IAAI,CAACjB,KAAK;IAC/B,MAAMkB,eAAe,GAAGnC,kBAAkB,CAACkC,QAAQ,CAAC;IACpD,MAAME,qBAAqB,GAAGnC,wBAAwB,CAACiC,QAAQ,CAAC;;IAEhE;IACA,IAAI,CAACjB,KAAK,CAACoB,aAAa,CAAC,IAAI,CAAC;IAC9B,MAAMC,YAAY,GAAG;MACnB,CAACH,eAAe,GAAG,MAAKD,QAAQ,CAACC,eAAe,CAAC,EAAEH,QAAQ,CAAC;MAC5D,CAACI,qBAAqB,mCACjBF,QAAQ,CAACE,qBAAqB,CAAC;QAClCG,KAAK,EAAE,SAAQL,QAAQ,CAACE,qBAAqB,CAAC,CAACG,KAAK,EAAE,GAAGP,QAAQ;MAAC;IAEtE,CAAC;IACD,IAAI,CAACf,KAAK,CAACuB,cAAc,CAACF,YAAY,CAAC;EACzC;EAEApB,qBAAqB,GAAG;IACtB,IAAI,CAACX,kBAAkB,CAAC,MAAM,CAAC;EACjC;EAEAa,oBAAoB,GAAG;IACrB,IAAI,CAACb,kBAAkB,CAAC,KAAK,CAAC;IAC9B,IAAI,CAACc,YAAY,EAAE;EACrB;EAEAd,kBAAkB,CAACkC,UAAU,EAAE;IAC7B,MAAM;MAAEP;IAAS,CAAC,GAAG,IAAI,CAACjB,KAAK;IAC/B,MAAMkB,eAAe,GAAGnC,kBAAkB,CAACkC,QAAQ,CAAC;IACpD,MAAMQ,MAAM,GAAGR,QAAQ,CAACC,eAAe,CAAC;IACxC,MAAMQ,UAAU,GAAG,IAAI,CAAC1B,KAAK,CAACgB,cAAc,CAACW,GAAG,CAC7CC,OAAO,IAAKH,MAAM,CAACG,OAAO,CAAC,CAC7B;IACD,IAAI,CAAC5B,KAAK,CAACV,kBAAkB,CAAC;MAAE,CAACkC,UAAU,GAAGE;IAAW,CAAC,CAAC;IAC3D,IAAI,CAAC1B,KAAK,CAAC6B,mBAAmB,CAAC,EAAE,CAAC;EACpC;EAEAvB,WAAW,CAACwB,CAAC,EAAE;IACb,MAAM;MAAEb,QAAQ;MAAER,eAAe,GAAG,CAAC,CAAC;MAAEsB;IAAc,CAAC,GAAG,IAAI,CAAC/B,KAAK;IACpE,MAAMgC,IAAI,GAAGC,MAAM,CAACC,IAAI,CAACzB,eAAe,CAAC,CAAC0B,QAAQ,CAAC,KAAK,CAAC,GAAG,KAAK,GAAG,MAAM;IAC1E,MAAMT,UAAU,GAAGjB,eAAe,CAACuB,IAAI,CAAC,IAAI,EAAE;IAC9C,MAAMI,YAAY,GAAGV,UAAU,CAC5BW,MAAM,CAAEC,SAAS,IAAK,CAAC,CAACA,SAAS,CAAC,OAAO,CAAC,CAAC,CAC3CX,GAAG,CAAEW,SAAS,IAAK;MAClB,MAAMC,WAAW,GAAG/C,MAAM,CAACiC,MAAM,CAACe,YAAY,CAACF,SAAS,CAAC,OAAO,CAAC,CAAC;MAClE,OAAON,IAAI,KAAK,MAAM,GAClBO,WAAW,CAACE,SAAS,GACnBF,WAAW,CAACE,SAAS,CAACH,SAAS,CAAC,GAChC,CAAClD,IAAI,EAAE,EAAEkD,SAAS,CAAC,GACrB,CAAClD,IAAI,EAAE,EAAEkD,SAAS,CAAC,CAAC,CAAC;IAC3B,CAAC,CAAC,CACDD,MAAM,CAAEK,IAAI,IAAK,CAAC,CAACA,IAAI,CAAC,CAAC,CAAC;IAC7B,MAAMxB,eAAe,GAAGnC,kBAAkB,CAACkC,QAAQ,CAAC;IACpD,MAAME,qBAAqB,GAAGnC,wBAAwB,CAACiC,QAAQ,CAAC;IAChE,MAAM0B,aAAa,GACjB1B,QAAQ,CAACE,qBAAqB,CAAC,CAACG,KAAK,CAACsB,OAAO,CAACb,aAAa,CAAC,GAAG,CAAC;IAElE,MAAMV,YAAY,GAAG;MACnB,CAACH,eAAe,mCACXD,QAAQ,CAACC,eAAe,CAAC,GACzBe,MAAM,CAACY,MAAM,CACd,CAAC,CAAC,EACF,GAAGT,YAAY,CAACT,GAAG,CAAC,CAAC,CAACmB,EAAE,EAAEC,IAAI,CAAC,MAAM;QAAE,CAACD,EAAE,GAAGC;MAAK,CAAC,CAAC,CAAC,CACtD,CACF;MACD,CAAC5B,qBAAqB,mCACjBF,QAAQ,CAACE,qBAAqB,CAAC;QAClCG,KAAK,EAAE,CACL,GAAGL,QAAQ,CAACE,qBAAqB,CAAC,CAACG,KAAK,CAAC0B,KAAK,CAAC,CAAC,EAAEL,aAAa,CAAC,EAChE,GAAGP,YAAY,CAACT,GAAG,CAAC,CAAC,CAACmB,EAAE,CAAC,KAAKA,EAAE,CAAC,EACjC,GAAG7B,QAAQ,CAACE,qBAAqB,CAAC,CAACG,KAAK,CAAC0B,KAAK,CAACL,aAAa,CAAC;MAC9D;IAEL,CAAC;IAED,IAAI,EAAEb,CAAC,CAACmB,OAAO,IAAInB,CAAC,CAACoB,OAAO,CAAC,EAAE,IAAI,CAAClD,KAAK,CAACT,oBAAoB,EAAE;IAChE,IAAI,CAACS,KAAK,CAACuB,cAAc,CAACF,YAAY,CAAC;EACzC;EAEA8B,MAAM,GAAG;IACP,MAAM;MACJ1C,eAAe,GAAG,CAAC,CAAC;MACpBsB,aAAa;MACbf,cAAc;MACdoC;IACF,CAAC,GAAG,IAAI,CAACpD,KAAK;IACd,OACE,4BACGgB,cAAc,CAACqC,MAAM,GAAG,CAAC,GACxB,4BACE,MAAC,IAAI;MAAC,SAAS,EAAC,qBAAqB;MAAC,EAAE,EAAC,mBAAmB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAC1D;MACE,cAAYD,IAAI,CAACE,aAAa,CAACxE,QAAQ,CAACsB,YAAY,CAAE;MACtD,OAAO,EAAE,IAAI,CAACA,YAAa;MAC3B,QAAQ,EAAE,CAAE;MACZ,SAAS,EAAC,cAAc;MACxB,EAAE,EAAC,uBAAuB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAE1B,MAAC,IAAI;MAAC,IAAI,EAAER,QAAS;MAAC,IAAI,EAAC,MAAM;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAG,CAC7B,CACJ,EACP,MAAC,IAAI;MAAC,SAAS,EAAC,qBAAqB;MAAC,EAAE,EAAC,gBAAgB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACvD;MACE,cAAYwD,IAAI,CAACE,aAAa,CAACxE,QAAQ,CAACyE,SAAS,CAAE;MACnD,OAAO,EAAE,IAAI,CAACpD,oBAAqB;MACnC,QAAQ,EAAE,CAAE;MACZ,SAAS,EAAC,WAAW;MACrB,EAAE,EAAC,oBAAoB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAEvB,MAAC,IAAI;MAAC,IAAI,EAAET,MAAO;MAAC,IAAI,EAAC,MAAM;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAG,CAC3B,CACJ,EACP,MAAC,IAAI;MAAC,SAAS,EAAC,qBAAqB;MAAC,EAAE,EAAC,iBAAiB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACxD;MACE,cAAY0D,IAAI,CAACE,aAAa,CAACxE,QAAQ,CAAC0E,UAAU,CAAE;MACpD,OAAO,EAAE,IAAI,CAACvD,qBAAsB;MACpC,QAAQ,EAAE,CAAE;MACZ,SAAS,EAAC,YAAY;MACtB,EAAE,EAAC,qBAAqB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAExB,MAAC,IAAI;MAAC,IAAI,EAAER,OAAQ;MAAC,IAAI,EAAC,MAAM;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAG,CAC5B,CACJ,CACN,GAEH,EACD,EACAsC,aAAa,KAAK,CAAAtB,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEgD,GAAG,MAAIhD,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEiD,IAAI,EAAC,IAC/D,MAAC,IAAI;MAAC,SAAS,EAAC,qBAAqB;MAAC,EAAE,EAAC,iBAAiB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACxD;MACE,cAAYN,IAAI,CAACE,aAAa,CAACxE,QAAQ,CAACwB,WAAW,CAAE;MACrD,OAAO,EAAE,IAAI,CAACA,WAAY;MAC1B,QAAQ,EAAE,CAAE;MACZ,SAAS,EAAC,aAAa;MACvB,EAAE,EAAC,sBAAsB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAEzB;MAAM,SAAS,EAAC,YAAY;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACzB,CAACG,eAAe,CAACgD,GAAG,IAAIhD,eAAe,CAACiD,IAAI,EAAEL,MAAM,CAChD,EACP,MAAC,IAAI;MAAC,IAAI,EAAE1D,QAAS;MAAC,IAAI,EAAC,MAAM;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAG,CAC7B,CAEZ,CACA;EAEP;AACF;AAEA,eAAehB,OAAO,CACpBE,UAAU,EACVD,OAAO,CACJ+E,KAAK,IAAK;EACT,OAAO;IACLlD,eAAe,EAAE,CAAAkD,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAElD,eAAe,KAAI,CAAC;EAC9C,CAAC;AACH,CAAC,EACD;EAAEnB,kBAAkB;EAAEC;AAAqB,CAAC,CAC7C,CACF,CAACM,sBAAsB,CAAC"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}