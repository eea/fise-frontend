{"ast":null,"code":"import _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { GET_SPARQL_DATA } from '../constants';\nvar initialState = {\n  error: null,\n  attachments: [],\n  loaded: false,\n  loading: false\n};\nexport default function sparql_data() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  switch (action.type) {\n    case \"\".concat(GET_SPARQL_DATA, \"_PENDING\"):\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: null,\n        loaded: false,\n        loading: true\n      });\n    case \"\".concat(GET_SPARQL_DATA, \"_SUCCESS\"):\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: null,\n        sparql_data: action.result.items,\n        loaded: true,\n        loading: false\n      });\n    case \"\".concat(GET_SPARQL_DATA, \"_FAIL\"):\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.error,\n        sparq_data: [],\n        loaded: false,\n        loading: false\n      });\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["GET_SPARQL_DATA","initialState","error","attachments","loaded","loading","sparql_data","state","action","type","result","items","sparq_data"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-datablocks/src/reducers/sparql_data.js"],"sourcesContent":["import { GET_SPARQL_DATA } from '../constants';\n\nconst initialState = {\n  error: null,\n  attachments: [],\n  loaded: false,\n  loading: false,\n};\n\nexport default function sparql_data(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${GET_SPARQL_DATA}_PENDING`:\n      return {\n        ...state,\n        error: null,\n        loaded: false,\n        loading: true,\n      };\n\n    case `${GET_SPARQL_DATA}_SUCCESS`:\n      return {\n        ...state,\n        error: null,\n        sparql_data: action.result.items,\n        loaded: true,\n        loading: false,\n      };\n\n    case `${GET_SPARQL_DATA}_FAIL`:\n      return {\n        ...state,\n        error: action.error,\n        sparq_data: [],\n        loaded: false,\n        loading: false,\n      };\n\n    default:\n      return state;\n  }\n}\n"],"mappings":";AAAA,SAASA,eAAe,QAAQ,cAAc;AAE9C,IAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,IAAI;EACXC,WAAW,EAAE,EAAE;EACfC,MAAM,EAAE,KAAK;EACbC,OAAO,EAAE;AACX,CAAC;AAED,eAAe,SAASC,WAAW,GAAoC;EAAA,IAAnCC,KAAK,uEAAGN,YAAY;EAAA,IAAEO,MAAM,uEAAG,CAAC,CAAC;EACnE,QAAQA,MAAM,CAACC,IAAI;IACjB,eAAQT,eAAe;MACrB,uCACKO,KAAK;QACRL,KAAK,EAAE,IAAI;QACXE,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;MAAI;IAGjB,eAAQL,eAAe;MACrB,uCACKO,KAAK;QACRL,KAAK,EAAE,IAAI;QACXI,WAAW,EAAEE,MAAM,CAACE,MAAM,CAACC,KAAK;QAChCP,MAAM,EAAE,IAAI;QACZC,OAAO,EAAE;MAAK;IAGlB,eAAQL,eAAe;MACrB,uCACKO,KAAK;QACRL,KAAK,EAAEM,MAAM,CAACN,KAAK;QACnBU,UAAU,EAAE,EAAE;QACdR,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;MAAK;IAGlB;MACE,OAAOE,KAAK;EAAC;AAEnB"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}