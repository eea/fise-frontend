{"ast":null,"code":"import _classCallCheck from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _keys from \"lodash/keys\";\nimport _map from \"lodash/map\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Preferences/PersonalPreferences.jsx\";\nvar __jsx = React.createElement;\n/**\n * Personal preferences component.\n * @module components/manage/Preferences/PersonalPreferences\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { withCookies } from 'react-cookie';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { toast } from 'react-toastify';\nimport { Form, Toast } from '@plone/volto/components';\nimport languages from '@plone/volto/constants/Languages';\nimport { changeLanguage } from '@plone/volto/actions';\nimport { normalizeLanguageName } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\nvar messages = defineMessages({\n  personalPreferences: {\n    \"id\": \"Personal Preferences\",\n    \"defaultMessage\": \"Personal Preferences\"\n  },\n  \"default\": {\n    \"id\": \"Default\",\n    \"defaultMessage\": \"Default\"\n  },\n  language: {\n    \"id\": \"Language\",\n    \"defaultMessage\": \"Language\"\n  },\n  languageDescription: {\n    \"id\": \"Your preferred language\",\n    \"defaultMessage\": \"Your preferred language\"\n  },\n  saved: {\n    \"id\": \"Changes saved\",\n    \"defaultMessage\": \"Changes saved\"\n  },\n  back: {\n    \"id\": \"Back\",\n    \"defaultMessage\": \"Back\"\n  },\n  success: {\n    \"id\": \"Success\",\n    \"defaultMessage\": \"Success\"\n  }\n});\n\n/**\n * PersonalPreferences class.\n * @class PersonalPreferences\n * @extends Component\n */\nvar PersonalPreferences = /*#__PURE__*/function (_Component) {\n  _inherits(PersonalPreferences, _Component);\n  var _super = _createSuper(PersonalPreferences);\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs PersonalPreferences\n   */\n  function PersonalPreferences(props) {\n    var _this;\n    _classCallCheck(this, PersonalPreferences);\n    _this = _super.call(this, props);\n    _this.onCancel = _this.onCancel.bind(_assertThisInitialized(_this));\n    _this.onSubmit = _this.onSubmit.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  _createClass(PersonalPreferences, [{\n    key: \"onSubmit\",\n    value: function onSubmit(data) {\n      var _this2 = this;\n      var language = data.language || 'en';\n      if (config.settings.supportedLanguages.includes(language)) {\n        var langFileName = normalizeLanguageName(language);\n        import('@root/../locales/' + langFileName + '.json').then(function (locale) {\n          _this2.props.changeLanguage(language, locale[\"default\"]);\n        });\n      }\n      toast.success(__jsx(Toast, {\n        success: true,\n        title: this.props.intl.formatMessage(messages.saved),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 7\n        }\n      }));\n      this.props.closeMenu();\n    }\n\n    /**\n     * Cancel handler\n     * @method onCancel\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onCancel\",\n    value: function onCancel() {\n      this.props.closeMenu();\n    }\n\n    /**\n     * Render method.\n     * @method render\n     * @returns {string} Markup for the component.\n     */\n  }, {\n    key: \"render\",\n    value: function render() {\n      var cookies = this.props.cookies;\n      return __jsx(Form, {\n        formData: {\n          language: cookies.get('I18N_LANGUAGE') || ''\n        },\n        schema: {\n          fieldsets: [{\n            id: 'default',\n            title: this.props.intl.formatMessage(messages[\"default\"]),\n            fields: ['language']\n          }],\n          properties: {\n            language: {\n              description: this.props.intl.formatMessage(messages.languageDescription),\n              title: this.props.intl.formatMessage(messages.language),\n              type: 'string',\n              choices: _map(_keys(languages), function (lang) {\n                return [lang, languages[lang]];\n              })\n            }\n          },\n          required: []\n        },\n        onSubmit: this.onSubmit,\n        onCancel: this.onCancel,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 7\n        }\n      });\n    }\n  }]);\n  return PersonalPreferences;\n}(Component);\n_defineProperty(PersonalPreferences, \"propTypes\", {\n  changeLanguage: PropTypes.func.isRequired,\n  closeMenu: PropTypes.func.isRequired\n});\nexport default compose(injectIntl, withCookies, connect(null, {\n  changeLanguage: changeLanguage\n}))(PersonalPreferences);","map":{"version":3,"names":["React","Component","PropTypes","connect","compose","withCookies","defineMessages","injectIntl","toast","Form","Toast","languages","changeLanguage","normalizeLanguageName","config","messages","personalPreferences","language","languageDescription","saved","back","success","PersonalPreferences","props","onCancel","bind","onSubmit","data","settings","supportedLanguages","includes","langFileName","then","locale","intl","formatMessage","closeMenu","cookies","get","fieldsets","id","title","fields","properties","description","type","choices","lang","required","func","isRequired"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Preferences/PersonalPreferences.jsx"],"sourcesContent":["/**\n * Personal preferences component.\n * @module components/manage/Preferences/PersonalPreferences\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { map, keys } from 'lodash';\nimport { withCookies } from 'react-cookie';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { toast } from 'react-toastify';\n\nimport { Form, Toast } from '@plone/volto/components';\nimport languages from '@plone/volto/constants/Languages';\nimport { changeLanguage } from '@plone/volto/actions';\nimport { normalizeLanguageName } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\n\nconst messages = defineMessages({\n  personalPreferences: {\n    id: 'Personal Preferences',\n    defaultMessage: 'Personal Preferences',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  language: {\n    id: 'Language',\n    defaultMessage: 'Language',\n  },\n  languageDescription: {\n    id: 'Your preferred language',\n    defaultMessage: 'Your preferred language',\n  },\n  saved: {\n    id: 'Changes saved',\n    defaultMessage: 'Changes saved',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  success: {\n    id: 'Success',\n    defaultMessage: 'Success',\n  },\n});\n\n/**\n * PersonalPreferences class.\n * @class PersonalPreferences\n * @extends Component\n */\nclass PersonalPreferences extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    changeLanguage: PropTypes.func.isRequired,\n    closeMenu: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs PersonalPreferences\n   */\n  constructor(props) {\n    super(props);\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    let language = data.language || 'en';\n    if (config.settings.supportedLanguages.includes(language)) {\n      const langFileName = normalizeLanguageName(language);\n      import('@root/../locales/' + langFileName + '.json').then((locale) => {\n        this.props.changeLanguage(language, locale.default);\n      });\n    }\n    toast.success(\n      <Toast success title={this.props.intl.formatMessage(messages.saved)} />,\n    );\n    this.props.closeMenu();\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.props.closeMenu();\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { cookies } = this.props;\n    return (\n      <Form\n        formData={{ language: cookies.get('I18N_LANGUAGE') || '' }}\n        schema={{\n          fieldsets: [\n            {\n              id: 'default',\n              title: this.props.intl.formatMessage(messages.default),\n              fields: ['language'],\n            },\n          ],\n          properties: {\n            language: {\n              description: this.props.intl.formatMessage(\n                messages.languageDescription,\n              ),\n              title: this.props.intl.formatMessage(messages.language),\n              type: 'string',\n              choices: map(keys(languages), (lang) => [lang, languages[lang]]),\n            },\n          },\n          required: [],\n        }}\n        onSubmit={this.onSubmit}\n        onCancel={this.onCancel}\n      />\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  withCookies,\n  connect(null, { changeLanguage }),\n)(PersonalPreferences);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Personal Preferences","defaultMessage":"Personal Preferences"},{"id":"Default","defaultMessage":"Default"},{"id":"Language","defaultMessage":"Language"},{"id":"Your preferred language","defaultMessage":"Your preferred language"},{"id":"Changes saved","defaultMessage":"Changes saved"},{"id":"Back","defaultMessage":"Back"},{"id":"Success","defaultMessage":"Success"}]}},"sourceType":"module","externalDependencies":[]}