{"ast":null,"code":"import _map from \"lodash/map\";\nimport _find from \"lodash/find\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/theme/LanguageSelector/LanguageSelector.js\";\nvar __jsx = React.createElement;\n/**\n * Language selector component.\n * @module components/LanguageSelector/LanguageSelector\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport cx from 'classnames';\nimport { Helmet, langmap, flattenToAppURL } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\nimport { defineMessages, useIntl } from 'react-intl';\nconst messages = defineMessages({\n  switchLanguageTo: {\n    \"id\": \"Switch to\",\n    \"defaultMessage\": \"Switch to\"\n  }\n});\nconst LanguageSelector = props => {\n  const intl = useIntl();\n  const currentLang = useSelector(state => state.intl.locale);\n  const translations = useSelector(state => {\n    var _state$content$data, _state$content$data$, _state$content$data$$;\n    return (_state$content$data = state.content.data) === null || _state$content$data === void 0 ? void 0 : (_state$content$data$ = _state$content$data['@components']) === null || _state$content$data$ === void 0 ? void 0 : (_state$content$data$$ = _state$content$data$.translations) === null || _state$content$data$$ === void 0 ? void 0 : _state$content$data$$.items;\n  });\n  const {\n    settings\n  } = config;\n  return settings.isMultilingual ? __jsx(\"div\", {\n    className: \"language-selector\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, _map(settings.supportedLanguages, lang => {\n    const translation = _find(translations, {\n      language: lang\n    });\n    return __jsx(Link, {\n      \"aria-label\": `${intl.formatMessage(messages.switchLanguageTo)} ${langmap[lang].nativeName.toLowerCase()}`,\n      className: cx({\n        selected: lang === currentLang\n      }),\n      to: translation ? flattenToAppURL(translation['@id']) : `/${lang}`,\n      title: langmap[lang].nativeName,\n      onClick: () => {\n        props.onClickAction();\n      },\n      key: `language-selector-${lang}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }\n    }, langmap[lang].nativeName);\n  })) : __jsx(Helmet, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, __jsx(\"html\", {\n    lang: settings.defaultLanguage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }));\n};\nLanguageSelector.propTypes = {\n  onClickAction: PropTypes.func\n};\nLanguageSelector.defaultProps = {\n  onClickAction: () => {}\n};\nexport default LanguageSelector;","map":{"version":3,"names":["React","PropTypes","Link","useSelector","cx","Helmet","langmap","flattenToAppURL","config","defineMessages","useIntl","messages","switchLanguageTo","LanguageSelector","props","intl","currentLang","state","locale","translations","content","data","items","settings","isMultilingual","supportedLanguages","lang","translation","language","formatMessage","nativeName","toLowerCase","selected","onClickAction","defaultLanguage","propTypes","func","defaultProps"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/theme/LanguageSelector/LanguageSelector.js"],"sourcesContent":["/**\n * Language selector component.\n * @module components/LanguageSelector/LanguageSelector\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nimport { useSelector } from 'react-redux';\nimport cx from 'classnames';\nimport { find, map } from 'lodash';\n\nimport { Helmet, langmap, flattenToAppURL } from '@plone/volto/helpers';\n\nimport config from '@plone/volto/registry';\n\nimport { defineMessages, useIntl } from 'react-intl';\n\nconst messages = defineMessages({\n  switchLanguageTo: {\n    id: 'Switch to',\n    defaultMessage: 'Switch to',\n  },\n});\n\nconst LanguageSelector = (props) => {\n  const intl = useIntl();\n  const currentLang = useSelector((state) => state.intl.locale);\n  const translations = useSelector(\n    (state) => state.content.data?.['@components']?.translations?.items,\n  );\n\n  const { settings } = config;\n\n  return settings.isMultilingual ? (\n    <div className=\"language-selector\">\n      {map(settings.supportedLanguages, (lang) => {\n        const translation = find(translations, { language: lang });\n        return (\n          <Link\n            aria-label={`${intl.formatMessage(\n              messages.switchLanguageTo,\n            )} ${langmap[lang].nativeName.toLowerCase()}`}\n            className={cx({ selected: lang === currentLang })}\n            to={translation ? flattenToAppURL(translation['@id']) : `/${lang}`}\n            title={langmap[lang].nativeName}\n            onClick={() => {\n              props.onClickAction();\n            }}\n            key={`language-selector-${lang}`}\n          >\n            {langmap[lang].nativeName}\n          </Link>\n        );\n      })}\n    </div>\n  ) : (\n    <Helmet>\n      <html lang={settings.defaultLanguage} />\n    </Helmet>\n  );\n};\n\nLanguageSelector.propTypes = {\n  onClickAction: PropTypes.func,\n};\n\nLanguageSelector.defaultProps = {\n  onClickAction: () => {},\n};\n\nexport default LanguageSelector;\n"],"mappings":";;;;AAAA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,IAAI,QAAQ,kBAAkB;AAEvC,SAASC,WAAW,QAAQ,aAAa;AACzC,OAAOC,EAAE,MAAM,YAAY;AAG3B,SAASC,MAAM,EAAEC,OAAO,EAAEC,eAAe,QAAQ,sBAAsB;AAEvE,OAAOC,MAAM,MAAM,uBAAuB;AAE1C,SAASC,cAAc,EAAEC,OAAO,QAAQ,YAAY;AAEpD,MAAMC,QAAQ,GAAGF,cAAc,CAAC;EAC9BG,gBAAgB;IAAA;IAAA;EAAA;AAIlB,CAAC,CAAC;AAEF,MAAMC,gBAAgB,GAAIC,KAAK,IAAK;EAClC,MAAMC,IAAI,GAAGL,OAAO,EAAE;EACtB,MAAMM,WAAW,GAAGb,WAAW,CAAEc,KAAK,IAAKA,KAAK,CAACF,IAAI,CAACG,MAAM,CAAC;EAC7D,MAAMC,YAAY,GAAGhB,WAAW,CAC7Bc,KAAK;IAAA;IAAA,8BAAKA,KAAK,CAACG,OAAO,CAACC,IAAI,gFAAlB,oBAAqB,aAAa,CAAC,kFAAnC,qBAAqCF,YAAY,0DAAjD,sBAAmDG,KAAK;EAAA,EACpE;EAED,MAAM;IAAEC;EAAS,CAAC,GAAGf,MAAM;EAE3B,OAAOe,QAAQ,CAACC,cAAc,GAC5B;IAAK,SAAS,EAAC,mBAAmB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAC/B,KAAID,QAAQ,CAACE,kBAAkB,EAAGC,IAAI,IAAK;IAC1C,MAAMC,WAAW,GAAG,MAAKR,YAAY,EAAE;MAAES,QAAQ,EAAEF;IAAK,CAAC,CAAC;IAC1D,OACE,MAAC,IAAI;MACH,cAAa,GAAEX,IAAI,CAACc,aAAa,CAC/BlB,QAAQ,CAACC,gBAAgB,CACzB,IAAGN,OAAO,CAACoB,IAAI,CAAC,CAACI,UAAU,CAACC,WAAW,EAAG,EAAE;MAC9C,SAAS,EAAE3B,EAAE,CAAC;QAAE4B,QAAQ,EAAEN,IAAI,KAAKV;MAAY,CAAC,CAAE;MAClD,EAAE,EAAEW,WAAW,GAAGpB,eAAe,CAACoB,WAAW,CAAC,KAAK,CAAC,CAAC,GAAI,IAAGD,IAAK,EAAE;MACnE,KAAK,EAAEpB,OAAO,CAACoB,IAAI,CAAC,CAACI,UAAW;MAChC,OAAO,EAAE,MAAM;QACbhB,KAAK,CAACmB,aAAa,EAAE;MACvB,CAAE;MACF,GAAG,EAAG,qBAAoBP,IAAK,EAAE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAEhCpB,OAAO,CAACoB,IAAI,CAAC,CAACI,UAAU,CACpB;EAEX,CAAC,CAAC,CACE,GAEN,MAAC,MAAM;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACL;IAAM,IAAI,EAAEP,QAAQ,CAACW,eAAgB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAG,CAE3C;AACH,CAAC;AAEDrB,gBAAgB,CAACsB,SAAS,GAAG;EAC3BF,aAAa,EAAEhC,SAAS,CAACmC;AAC3B,CAAC;AAEDvB,gBAAgB,CAACwB,YAAY,GAAG;EAC9BJ,aAAa,EAAE,MAAM,CAAC;AACxB,CAAC;AAED,eAAepB,gBAAgB"},"metadata":{"react-intl":{"messages":[{"id":"Switch to","defaultMessage":"Switch to"}]}},"sourceType":"module","externalDependencies":[]}