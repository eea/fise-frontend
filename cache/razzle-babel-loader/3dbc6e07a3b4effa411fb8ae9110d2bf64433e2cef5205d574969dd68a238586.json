{"ast":null,"code":"import _map from \"lodash/map\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Contents/ContentsTagsModal.jsx\";\nvar __jsx = React.createElement;\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n/**\n * Contents tags modal.\n * @module components/manage/Contents/ContentsTagsModal\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { updateContent } from '@plone/volto/actions';\nimport { ModalForm } from '@plone/volto/components';\nconst messages = defineMessages({\n  default: {\n    \"id\": \"Default\",\n    \"defaultMessage\": \"Default\"\n  },\n  tags: {\n    \"id\": \"Tags\",\n    \"defaultMessage\": \"Tags\"\n  },\n  tagsToRemove: {\n    \"id\": \"Tags to remove\",\n    \"defaultMessage\": \"Tags to remove\"\n  },\n  tagsToAdd: {\n    \"id\": \"Tags to add\",\n    \"defaultMessage\": \"Tags to add\"\n  }\n});\n\n/**\n * ContentsTagsModal class.\n * @class ContentsTagsModal\n * @extends Component\n */\nclass ContentsTagsModal extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ContentsUploadModal\n   */\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.request.loading && nextProps.request.loaded) {\n      this.props.onOk();\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {Object} data Form data\n   * @returns {undefined}\n   */\n  onSubmit({\n    tags_to_add = [],\n    tags_to_remove = []\n  }) {\n    this.props.updateContent(_map(this.props.items, item => item.url), _map(this.props.items, item => {\n      var _item$subjects;\n      return {\n        subjects: [...new Set(((_item$subjects = item.subjects) !== null && _item$subjects !== void 0 ? _item$subjects : []).filter(s => !tags_to_remove.includes(s)).concat(tags_to_add))]\n      };\n    }));\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const currentSetTags = [...new Set(this.props.items.map(item => item.subjects).flat())];\n    return this.props.open && __jsx(ModalForm, {\n      open: this.props.open,\n      onSubmit: this.onSubmit,\n      onCancel: this.props.onCancel,\n      title: this.props.intl.formatMessage(messages.tags),\n      schema: {\n        fieldsets: [{\n          id: 'default',\n          title: this.props.intl.formatMessage(messages.default),\n          fields: ['tags_to_remove', 'tags_to_add']\n        }],\n        properties: {\n          tags_to_remove: {\n            type: 'array',\n            widget: 'array',\n            title: this.props.intl.formatMessage(messages.tagsToRemove),\n            choices: currentSetTags.map(tag => [tag, tag])\n          },\n          tags_to_add: {\n            type: 'array',\n            widget: 'token',\n            title: this.props.intl.formatMessage(messages.tagsToAdd),\n            items: {\n              vocabulary: {\n                '@id': 'plone.app.vocabularies.Keywords'\n              }\n            }\n          }\n        },\n        required: []\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }\n    });\n  }\n}\n_defineProperty(ContentsTagsModal, \"propTypes\", {\n  updateContent: PropTypes.func.isRequired,\n  items: PropTypes.arrayOf(PropTypes.shape({\n    subjects: PropTypes.arrayOf(PropTypes.string),\n    url: PropTypes.string\n  })).isRequired,\n  request: PropTypes.shape({\n    loading: PropTypes.bool,\n    loaded: PropTypes.bool\n  }).isRequired,\n  open: PropTypes.bool.isRequired,\n  onOk: PropTypes.func.isRequired,\n  onCancel: PropTypes.func.isRequired\n});\nexport default compose(injectIntl, connect(state => ({\n  request: state.content.update\n}), {\n  updateContent\n}))(ContentsTagsModal);","map":{"version":3,"names":["React","Component","PropTypes","connect","compose","defineMessages","injectIntl","updateContent","ModalForm","messages","default","tags","tagsToRemove","tagsToAdd","ContentsTagsModal","constructor","props","onSubmit","bind","UNSAFE_componentWillReceiveProps","nextProps","request","loading","loaded","onOk","tags_to_add","tags_to_remove","items","item","url","subjects","Set","filter","s","includes","concat","render","currentSetTags","map","flat","open","onCancel","intl","formatMessage","fieldsets","id","title","fields","properties","type","widget","choices","tag","vocabulary","required","func","isRequired","arrayOf","shape","string","bool","state","content","update"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Contents/ContentsTagsModal.jsx"],"sourcesContent":["/**\n * Contents tags modal.\n * @module components/manage/Contents/ContentsTagsModal\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { map } from 'lodash';\nimport { defineMessages, injectIntl } from 'react-intl';\n\nimport { updateContent } from '@plone/volto/actions';\nimport { ModalForm } from '@plone/volto/components';\n\nconst messages = defineMessages({\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  tags: {\n    id: 'Tags',\n    defaultMessage: 'Tags',\n  },\n  tagsToRemove: {\n    id: 'Tags to remove',\n    defaultMessage: 'Tags to remove',\n  },\n  tagsToAdd: {\n    id: 'Tags to add',\n    defaultMessage: 'Tags to add',\n  },\n});\n\n/**\n * ContentsTagsModal class.\n * @class ContentsTagsModal\n * @extends Component\n */\nclass ContentsTagsModal extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    updateContent: PropTypes.func.isRequired,\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        subjects: PropTypes.arrayOf(PropTypes.string),\n        url: PropTypes.string,\n      }),\n    ).isRequired,\n    request: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    open: PropTypes.bool.isRequired,\n    onOk: PropTypes.func.isRequired,\n    onCancel: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ContentsUploadModal\n   */\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.request.loading && nextProps.request.loaded) {\n      this.props.onOk();\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {Object} data Form data\n   * @returns {undefined}\n   */\n  onSubmit({ tags_to_add = [], tags_to_remove = [] }) {\n    this.props.updateContent(\n      map(this.props.items, (item) => item.url),\n      map(this.props.items, (item) => ({\n        subjects: [\n          ...new Set(\n            (item.subjects ?? [])\n              .filter((s) => !tags_to_remove.includes(s))\n              .concat(tags_to_add),\n          ),\n        ],\n      })),\n    );\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const currentSetTags = [\n      ...new Set(this.props.items.map((item) => item.subjects).flat()),\n    ];\n\n    return (\n      this.props.open && (\n        <ModalForm\n          open={this.props.open}\n          onSubmit={this.onSubmit}\n          onCancel={this.props.onCancel}\n          title={this.props.intl.formatMessage(messages.tags)}\n          schema={{\n            fieldsets: [\n              {\n                id: 'default',\n                title: this.props.intl.formatMessage(messages.default),\n                fields: ['tags_to_remove', 'tags_to_add'],\n              },\n            ],\n            properties: {\n              tags_to_remove: {\n                type: 'array',\n                widget: 'array',\n                title: this.props.intl.formatMessage(messages.tagsToRemove),\n                choices: currentSetTags.map((tag) => [tag, tag]),\n              },\n              tags_to_add: {\n                type: 'array',\n                widget: 'token',\n                title: this.props.intl.formatMessage(messages.tagsToAdd),\n                items: {\n                  vocabulary: { '@id': 'plone.app.vocabularies.Keywords' },\n                },\n              },\n            },\n            required: [],\n          }}\n        />\n      )\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state) => ({\n      request: state.content.update,\n    }),\n    { updateContent },\n  ),\n)(ContentsTagsModal);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Default","defaultMessage":"Default"},{"id":"Tags","defaultMessage":"Tags"},{"id":"Tags to remove","defaultMessage":"Tags to remove"},{"id":"Tags to add","defaultMessage":"Tags to add"}]}},"sourceType":"module","externalDependencies":[]}