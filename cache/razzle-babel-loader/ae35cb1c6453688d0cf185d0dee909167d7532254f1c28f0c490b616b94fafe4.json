{"ast":null,"code":"import _filter from \"lodash/filter\";\nimport _escapeRegExp from \"lodash/escapeRegExp\";\nconst _excluded = [\"__isNew__\", \"extra\"];\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-slate-footnote/src/editor/MultiSelectSearchWidget.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n/**\n * ArrayWidget component.\n * @module components/manage/Widgets/ArrayWidget\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { defineMessages } from 'react-intl';\nimport { Option, DropdownIndicator, selectTheme, customSelectStyles } from '@plone/volto/components/manage/Widgets/SelectStyling';\nimport { nanoid } from '@plone/volto-slate/utils';\nimport { FormFieldWrapper } from '@plone/volto/components';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nconst messages = defineMessages({\n  select: {\n    \"id\": \"Select\\u2026\",\n    \"defaultMessage\": \"Select\\u2026\"\n  },\n  no_options: {\n    \"id\": \"No options\",\n    \"defaultMessage\": \"No options\"\n  }\n});\nconst MultiSelectSearchWidget = injectLazyLibs('reactSelectAsyncCreateable')(props => {\n  const {\n    0: selectedOption,\n    1: setSelectedOption\n  } = useState([]);\n  const {\n    0: defaultOptions,\n    1: setDefaultOptions\n  } = useState([]);\n  const {\n    0: parentFootnote,\n    1: setParentFootnote\n  } = useState(props.value);\n  useEffect(() => {\n    if (props.value) {\n      const parentFootnoteCurrent = props.value;\n      const extraValues = parentFootnoteCurrent && props.value.extra ? props.value.extra : [];\n      const selectedOptionCurrent = parentFootnoteCurrent.value ? [...[parentFootnoteCurrent], ...extraValues] : [];\n      setSelectedOption(selectedOptionCurrent);\n\n      // from choices (list of all footnotes available including current in value) get all not\n      // found in current in value\n      // consider that new footnotes have value and footnote undefined\n      const defaultOptions = (props.choices || []).filter(item => !selectedOption.find(({\n        label\n      }) => label === item.label) && item.value);\n      setDefaultOptions(defaultOptions);\n      setParentFootnote(props.value);\n    }\n  }, [props]); // eslint-disable-line\n\n  /**\n   * evaluate on Regex to filter results\n   * @param {Object} e - event\n   * @param {Object} data\n   */\n  const loadOptions = search => {\n    const re = new RegExp(_escapeRegExp(search), 'i');\n    const isMatch = result => re.test(result.value);\n    const resultsFiltered = _filter(props.choices, isMatch);\n    return new Promise((resolve, reject) => {\n      resolve(resultsFiltered);\n    });\n  };\n\n  /**\n   * If the list is empty or the first is not parent, return true\n   * @param {Object[]} optionsList list of objects - footnotes\n   * @returns {boolean}\n   */\n  const isParetFootnoteRemoved = optionsList => !optionsList[0] || optionsList[0].value !== parentFootnote.value;\n\n  /**\n   * replace all parentFootnote data except uid, with the first from the list\n   * @param {Object[]} optionsList list of objects - footnotes\n   * @returns {Object}\n   */\n  const setParentFootnoteFromExtra = optionsList => {\n    var _optionsList$;\n    const {\n      footnote,\n      label,\n      value\n    } = optionsList[0] || [];\n    return _objectSpread(_objectSpread({}, parentFootnote), {}, {\n      footnote: footnote || ((_optionsList$ = optionsList[0]) === null || _optionsList$ === void 0 ? void 0 : _optionsList$.value),\n      label,\n      value,\n      extra: optionsList.slice(1)\n    });\n  };\n\n  /**\n   * Will make the footnotes object, that will be saved as first from optionsList\n   * the rest will be added to extra\n   * @param {Object[]} optionsList\n   * @returns\n   */\n  const setFootnoteFromSelection = optionsList => {\n    const extra = optionsList.slice(1).map(item => {\n      const obj = _objectSpread(_objectSpread({}, item), {}, {\n        footnote: item.value\n      });\n      const {\n          __isNew__: remove,\n          extra\n        } = obj,\n        rest = _objectWithoutProperties(obj, _excluded);\n      return rest;\n    });\n    return _objectSpread(_objectSpread({}, parentFootnote), {}, {\n      extra\n    });\n  };\n\n  /**\n   * Handle the field change, will remake the result based on the new selected list\n   * @method handleChange\n   * @param {array} optionsList The selected options (already aggregated).\n   * @returns {undefined}\n   */\n  const handleChange = optionsList => {\n    const formattedSelectedOptions = optionsList.map(option => _objectSpread(_objectSpread({\n      footnoteId: nanoid(5)\n    }, option), {}, {\n      uid: nanoid(5),\n      // overwrite existing, thus creating new record for the same text\n      footnote: option.value\n    }));\n    setSelectedOption(formattedSelectedOptions);\n\n    // manage case if parent footnotes (first from the options) was removed\n    const resultSelected = isParetFootnoteRemoved(formattedSelectedOptions) ? setParentFootnoteFromExtra(formattedSelectedOptions) : setFootnoteFromSelection(formattedSelectedOptions);\n    props.onChange({\n      footnote: resultSelected\n    });\n  };\n  const AsyncCreatableSelect = props.reactSelectAsyncCreateable.default;\n  return __jsx(FormFieldWrapper, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }\n  }), __jsx(AsyncCreatableSelect, {\n    isDisabled: props.isDisabled,\n    className: \"react-select-container\",\n    classNamePrefix: \"react-select\",\n    defaultOptions: defaultOptions,\n    styles: customSelectStyles,\n    theme: selectTheme,\n    components: {\n      DropdownIndicator,\n      Option\n    },\n    isMulti: true,\n    options: defaultOptions,\n    value: selectedOption || [],\n    loadOptions: loadOptions,\n    onChange: handleChange,\n    placeholder: props.intl.formatMessage(messages.select),\n    noOptionsMessage: () => props.intl.formatMessage(messages.no_options),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }\n  }));\n});\nexport default MultiSelectSearchWidget;","map":{"version":3,"names":["React","useState","useEffect","defineMessages","Option","DropdownIndicator","selectTheme","customSelectStyles","nanoid","FormFieldWrapper","injectLazyLibs","messages","select","no_options","MultiSelectSearchWidget","props","selectedOption","setSelectedOption","defaultOptions","setDefaultOptions","parentFootnote","setParentFootnote","value","parentFootnoteCurrent","extraValues","extra","selectedOptionCurrent","choices","filter","item","find","label","loadOptions","search","re","RegExp","isMatch","result","test","resultsFiltered","Promise","resolve","reject","isParetFootnoteRemoved","optionsList","setParentFootnoteFromExtra","footnote","slice","setFootnoteFromSelection","map","obj","__isNew__","remove","rest","handleChange","formattedSelectedOptions","option","footnoteId","uid","resultSelected","onChange","AsyncCreatableSelect","reactSelectAsyncCreateable","default","isDisabled","intl","formatMessage"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-slate-footnote/src/editor/MultiSelectSearchWidget.jsx"],"sourcesContent":["/**\n * ArrayWidget component.\n * @module components/manage/Widgets/ArrayWidget\n */\n\nimport React, { useState, useEffect } from 'react';\nimport { defineMessages } from 'react-intl';\nimport {\n  Option,\n  DropdownIndicator,\n  selectTheme,\n  customSelectStyles,\n} from '@plone/volto/components/manage/Widgets/SelectStyling';\nimport { escapeRegExp, filter } from 'lodash';\nimport { nanoid } from '@plone/volto-slate/utils';\n\nimport { FormFieldWrapper } from '@plone/volto/components';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\n\nconst messages = defineMessages({\n  select: {\n    id: 'Select…',\n    defaultMessage: 'Select…',\n  },\n  no_options: {\n    id: 'No options',\n    defaultMessage: 'No options',\n  },\n});\n\nconst MultiSelectSearchWidget = injectLazyLibs('reactSelectAsyncCreateable')(\n  (props) => {\n    const [selectedOption, setSelectedOption] = useState([]);\n    const [defaultOptions, setDefaultOptions] = useState([]);\n    const [parentFootnote, setParentFootnote] = useState(props.value);\n\n    useEffect(() => {\n      if (props.value) {\n        const parentFootnoteCurrent = props.value;\n\n        const extraValues =\n          parentFootnoteCurrent && props.value.extra ? props.value.extra : [];\n        const selectedOptionCurrent = parentFootnoteCurrent.value\n          ? [...[parentFootnoteCurrent], ...extraValues]\n          : [];\n        setSelectedOption(selectedOptionCurrent);\n\n        // from choices (list of all footnotes available including current in value) get all not\n        // found in current in value\n        // consider that new footnotes have value and footnote undefined\n        const defaultOptions = (props.choices || []).filter(\n          (item) =>\n            !selectedOption.find(({ label }) => label === item.label) &&\n            item.value,\n        );\n        setDefaultOptions(defaultOptions);\n        setParentFootnote(props.value);\n      }\n    }, [props]); // eslint-disable-line\n\n    /**\n     * evaluate on Regex to filter results\n     * @param {Object} e - event\n     * @param {Object} data\n     */\n    const loadOptions = (search) => {\n      const re = new RegExp(escapeRegExp(search), 'i');\n      const isMatch = (result) => re.test(result.value);\n      const resultsFiltered = filter(props.choices, isMatch);\n\n      return new Promise((resolve, reject) => {\n        resolve(resultsFiltered);\n      });\n    };\n\n    /**\n     * If the list is empty or the first is not parent, return true\n     * @param {Object[]} optionsList list of objects - footnotes\n     * @returns {boolean}\n     */\n    const isParetFootnoteRemoved = (optionsList) =>\n      !optionsList[0] || optionsList[0].value !== parentFootnote.value;\n\n    /**\n     * replace all parentFootnote data except uid, with the first from the list\n     * @param {Object[]} optionsList list of objects - footnotes\n     * @returns {Object}\n     */\n    const setParentFootnoteFromExtra = (optionsList) => {\n      const { footnote, label, value } = optionsList[0] || [];\n\n      return {\n        ...parentFootnote,\n        footnote: footnote || optionsList[0]?.value,\n        label,\n        value,\n        extra: optionsList.slice(1),\n      };\n    };\n\n    /**\n     * Will make the footnotes object, that will be saved as first from optionsList\n     * the rest will be added to extra\n     * @param {Object[]} optionsList\n     * @returns\n     */\n    const setFootnoteFromSelection = (optionsList) => {\n      const extra = optionsList.slice(1).map((item) => {\n        const obj = {\n          ...item,\n          footnote: item.value,\n        };\n\n        const { __isNew__: remove, extra, ...rest } = obj;\n        return rest;\n      });\n      return { ...parentFootnote, extra };\n    };\n\n    /**\n     * Handle the field change, will remake the result based on the new selected list\n     * @method handleChange\n     * @param {array} optionsList The selected options (already aggregated).\n     * @returns {undefined}\n     */\n    const handleChange = (optionsList) => {\n      const formattedSelectedOptions = optionsList.map((option) => ({\n        footnoteId: nanoid(5), // to be overwritten if already exists (keep as a reference to same text)\n        ...option,\n        uid: nanoid(5), // overwrite existing, thus creating new record for the same text\n        footnote: option.value,\n      }));\n      setSelectedOption(formattedSelectedOptions);\n\n      // manage case if parent footnotes (first from the options) was removed\n      const resultSelected = isParetFootnoteRemoved(formattedSelectedOptions)\n        ? setParentFootnoteFromExtra(formattedSelectedOptions)\n        : setFootnoteFromSelection(formattedSelectedOptions);\n\n      props.onChange({\n        footnote: resultSelected,\n      });\n    };\n\n    const AsyncCreatableSelect = props.reactSelectAsyncCreateable.default;\n    return (\n      <FormFieldWrapper {...props}>\n        <AsyncCreatableSelect\n          isDisabled={props.isDisabled}\n          className=\"react-select-container\"\n          classNamePrefix=\"react-select\"\n          defaultOptions={defaultOptions}\n          styles={customSelectStyles}\n          theme={selectTheme}\n          components={{ DropdownIndicator, Option }}\n          isMulti\n          options={defaultOptions}\n          value={selectedOption || []}\n          loadOptions={loadOptions}\n          onChange={handleChange}\n          placeholder={props.intl.formatMessage(messages.select)}\n          noOptionsMessage={() => props.intl.formatMessage(messages.no_options)}\n        />\n      </FormFieldWrapper>\n    );\n  },\n);\n\nexport default MultiSelectSearchWidget;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Select…","defaultMessage":"Select…"},{"id":"No options","defaultMessage":"No options"}]}},"sourceType":"module","externalDependencies":[]}