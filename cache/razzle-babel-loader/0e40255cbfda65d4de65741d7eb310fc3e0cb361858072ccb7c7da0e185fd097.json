{"ast":null,"code":"import _map from \"lodash/map\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Messages/Messages.jsx\";\nvar __jsx = React.createElement;\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n/**\n * Messages component.\n * @module components/manage/Messages/Messages\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Message, Container } from 'semantic-ui-react';\nimport { removeMessage } from '@plone/volto/actions';\n\n/**\n * Messages container class.\n * @class Messages\n * @extends Component\n */\nclass Messages extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Messages\n   */\n  constructor(props) {\n    super(props);\n    this.onDismiss = this.onDismiss.bind(this);\n  }\n\n  // /**\n  //  * Component will receive props\n  //  * @method componentWillReceiveProps\n  //  * @param {Object} nextProps Next properties\n  //  * @returns {undefined}\n  //  */\n  // componentWillReceiveProps(nextProps) {\n  //   if (nextProps.messages.length > this.props.messages.length) {\n  //     window.setTimeout(() => {\n  //       if (this.props.messages.length > 0) {\n  //         this.props.removeMessage(-1);\n  //       }\n  //     }, 6000);\n  //   }\n  // }\n\n  /**\n   * On dismiss\n   * @method onDismiss\n   * @param {Object} event Event object\n   * @param {number} value Index of message\n   * @returns {undefined}\n   */\n  onDismiss(event, {\n    value\n  }) {\n    this.props.removeMessage(value);\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return this.props.messages && __jsx(Container, {\n      className: \"messages\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }\n    }, _map(this.props.messages, (message, index) => __jsx(Message, {\n      key: message.id,\n      value: index,\n      onDismiss: this.onDismiss,\n      error: message.level === 'error',\n      success: message.level === 'success',\n      warning: message.level === 'warning',\n      info: message.level === 'info',\n      header: message.title,\n      content: message.body,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 13\n      }\n    })));\n  }\n}\n_defineProperty(Messages, \"propTypes\", {\n  removeMessage: PropTypes.func.isRequired,\n  messages: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string,\n    body: PropTypes.string,\n    level: PropTypes.string\n  })).isRequired\n});\nexport default connect(state => ({\n  messages: state.messages.messages\n}), {\n  removeMessage\n})(Messages);","map":{"version":3,"names":["React","Component","PropTypes","connect","Message","Container","removeMessage","Messages","constructor","props","onDismiss","bind","event","value","render","messages","message","index","id","level","title","body","func","isRequired","arrayOf","shape","string","state"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Messages/Messages.jsx"],"sourcesContent":["/**\n * Messages component.\n * @module components/manage/Messages/Messages\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Message, Container } from 'semantic-ui-react';\nimport { map } from 'lodash';\n\nimport { removeMessage } from '@plone/volto/actions';\n\n/**\n * Messages container class.\n * @class Messages\n * @extends Component\n */\nclass Messages extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    removeMessage: PropTypes.func.isRequired,\n    messages: PropTypes.arrayOf(\n      PropTypes.shape({\n        title: PropTypes.string,\n        body: PropTypes.string,\n        level: PropTypes.string,\n      }),\n    ).isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Messages\n   */\n  constructor(props) {\n    super(props);\n    this.onDismiss = this.onDismiss.bind(this);\n  }\n\n  // /**\n  //  * Component will receive props\n  //  * @method componentWillReceiveProps\n  //  * @param {Object} nextProps Next properties\n  //  * @returns {undefined}\n  //  */\n  // componentWillReceiveProps(nextProps) {\n  //   if (nextProps.messages.length > this.props.messages.length) {\n  //     window.setTimeout(() => {\n  //       if (this.props.messages.length > 0) {\n  //         this.props.removeMessage(-1);\n  //       }\n  //     }, 6000);\n  //   }\n  // }\n\n  /**\n   * On dismiss\n   * @method onDismiss\n   * @param {Object} event Event object\n   * @param {number} value Index of message\n   * @returns {undefined}\n   */\n  onDismiss(event, { value }) {\n    this.props.removeMessage(value);\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      this.props.messages && (\n        <Container className=\"messages\">\n          {map(this.props.messages, (message, index) => (\n            <Message\n              key={message.id}\n              value={index}\n              onDismiss={this.onDismiss}\n              error={message.level === 'error'}\n              success={message.level === 'success'}\n              warning={message.level === 'warning'}\n              info={message.level === 'info'}\n              header={message.title}\n              content={message.body}\n            />\n          ))}\n        </Container>\n      )\n    );\n  }\n}\n\nexport default connect(\n  (state) => ({\n    messages: state.messages.messages,\n  }),\n  { removeMessage },\n)(Messages);\n"],"mappings":";;;;AAAA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,OAAO,EAAEC,SAAS,QAAQ,mBAAmB;AAGtD,SAASC,aAAa,QAAQ,sBAAsB;;AAEpD;AACA;AACA;AACA;AACA;AACA,MAAMC,QAAQ,SAASN,SAAS,CAAC;EAC/B;AACF;AACA;AACA;AACA;;EAYE;AACF;AACA;AACA;AACA;AACA;EACEO,WAAW,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IACZ,IAAI,CAACC,SAAS,GAAG,IAAI,CAACA,SAAS,CAACC,IAAI,CAAC,IAAI,CAAC;EAC5C;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACED,SAAS,CAACE,KAAK,EAAE;IAAEC;EAAM,CAAC,EAAE;IAC1B,IAAI,CAACJ,KAAK,CAACH,aAAa,CAACO,KAAK,CAAC;EACjC;;EAEA;AACF;AACA;AACA;AACA;EACEC,MAAM,GAAG;IACP,OACE,IAAI,CAACL,KAAK,CAACM,QAAQ,IACjB,MAAC,SAAS;MAAC,SAAS,EAAC,UAAU;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAC5B,KAAI,IAAI,CAACN,KAAK,CAACM,QAAQ,EAAE,CAACC,OAAO,EAAEC,KAAK,KACvC,MAAC,OAAO;MACN,GAAG,EAAED,OAAO,CAACE,EAAG;MAChB,KAAK,EAAED,KAAM;MACb,SAAS,EAAE,IAAI,CAACP,SAAU;MAC1B,KAAK,EAAEM,OAAO,CAACG,KAAK,KAAK,OAAQ;MACjC,OAAO,EAAEH,OAAO,CAACG,KAAK,KAAK,SAAU;MACrC,OAAO,EAAEH,OAAO,CAACG,KAAK,KAAK,SAAU;MACrC,IAAI,EAAEH,OAAO,CAACG,KAAK,KAAK,MAAO;MAC/B,MAAM,EAAEH,OAAO,CAACI,KAAM;MACtB,OAAO,EAAEJ,OAAO,CAACK,IAAK;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAEzB,CAAC,CAEL;EAEL;AACF;AAAC,gBAjFKd,QAAQ,eAMO;EACjBD,aAAa,EAAEJ,SAAS,CAACoB,IAAI,CAACC,UAAU;EACxCR,QAAQ,EAAEb,SAAS,CAACsB,OAAO,CACzBtB,SAAS,CAACuB,KAAK,CAAC;IACdL,KAAK,EAAElB,SAAS,CAACwB,MAAM;IACvBL,IAAI,EAAEnB,SAAS,CAACwB,MAAM;IACtBP,KAAK,EAAEjB,SAAS,CAACwB;EACnB,CAAC,CAAC,CACH,CAACH;AACJ,CAAC;AAoEH,eAAepB,OAAO,CACnBwB,KAAK,KAAM;EACVZ,QAAQ,EAAEY,KAAK,CAACZ,QAAQ,CAACA;AAC3B,CAAC,CAAC,EACF;EAAET;AAAc,CAAC,CAClB,CAACC,QAAQ,CAAC"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}