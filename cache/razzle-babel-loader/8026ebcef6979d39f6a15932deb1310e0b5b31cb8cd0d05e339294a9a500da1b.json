{"ast":null,"code":"import _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _map from \"lodash/map\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/packages/volto-slate/src/blocks/Table/TableBlockView.jsx\",\n  _this = this,\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\n/**\n * Slate Table block's View component.\n * @module volto-slate/blocks/Table/View\n */\n\nimport React, { useState, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Table } from 'semantic-ui-react';\nimport { serializeNodes, serializeNodesToText } from '@plone/volto-slate/editor/render';\nimport { Node } from 'slate';\n\n// TODO: loading LESS files with `volto-slate/...` paths does not work currently\nimport '../../editor/plugins/Table/less/public.less';\n\n/**\n * Slate Table block's View class.\n * @class View\n * @extends Component\n * @param {object} data The table data to render as a table.\n */\nvar View = function View(_ref) {\n  _s();\n  var data = _ref.data;\n  var _useState = useState({\n      column: null,\n      direction: null\n    }),\n    state = _useState[0],\n    setState = _useState[1];\n  var headers = useMemo(function () {\n    var _data$table$rows, _data$table$rows$;\n    return (_data$table$rows = data.table.rows) === null || _data$table$rows === void 0 ? void 0 : (_data$table$rows$ = _data$table$rows[0]) === null || _data$table$rows$ === void 0 ? void 0 : _data$table$rows$.cells;\n  }, [data.table.rows]);\n  var rows = useMemo(function () {\n    var items = {};\n    if (!data.table.rows) return {};\n    data.table.rows.forEach(function (row, index) {\n      if (index > 0) {\n        items[row.key] = [];\n        row.cells.forEach(function (cell, cellIndex) {\n          items[row.key][cellIndex] = _objectSpread(_objectSpread({}, cell), {}, {\n            value: cell.value && Node.string({\n              children: cell.value\n            }).length > 0 ? serializeNodes(cell.value) : \"\\xA0\",\n            valueText: cell.value && Node.string({\n              children: cell.value\n            }).length > 0 ? serializeNodesToText(cell.value) : \"\\xA0\"\n          });\n        });\n      }\n    });\n    return items;\n  }, [data.table.rows]);\n  var sortedRows = useMemo(function () {\n    if (state.column === null) return Object.keys(rows);\n    return Object.keys(rows).sort(function (a, b) {\n      var a_text = rows[a][state.column].valueText;\n      var b_text = rows[b][state.column].valueText;\n      if (state.direction === 'ascending' ? a_text < b_text : a_text > b_text) {\n        return -1;\n      }\n      if (state.direction === 'ascending' ? a_text > b_text : a_text < b_text) {\n        return 1;\n      }\n      return 0;\n    });\n  }, [state, rows]);\n  return __jsx(React.Fragment, null, data && data.table && __jsx(Table, {\n    fixed: data.table.fixed,\n    compact: data.table.compact,\n    basic: data.table.basic ? 'very' : false,\n    celled: data.table.celled,\n    inverted: data.table.inverted,\n    striped: data.table.striped,\n    sortable: data.table.sortable,\n    className: \"slate-table-block\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, !data.table.hideHeaders ? __jsx(Table.Header, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, __jsx(Table.Row, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 15\n    }\n  }, headers.map(function (cell, index) {\n    return __jsx(Table.HeaderCell, {\n      key: cell.key,\n      textAlign: \"left\",\n      verticalAlign: \"middle\",\n      sorted: state.column === index ? state.direction : null,\n      onClick: function onClick() {\n        if (!data.table.sortable) return;\n        setState({\n          column: index,\n          direction: state.column !== index ? 'ascending' : state.direction === 'ascending' ? 'descending' : 'ascending'\n        });\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 19\n      }\n    }, cell.value && Node.string({\n      children: cell.value\n    }).length > 0 ? serializeNodes(cell.value) : \"\\xA0\");\n  }))) : '', __jsx(Table.Body, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 11\n    }\n  }, _map(sortedRows, function (row) {\n    return __jsx(Table.Row, {\n      key: row,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 15\n      }\n    }, _map(rows[row], function (cell) {\n      return __jsx(Table.Cell, {\n        key: cell.key,\n        textAlign: \"left\",\n        verticalAlign: \"middle\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 19\n        }\n      }, cell.value);\n    }));\n  }))));\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\n_s(View, \"K1OWSQpW47Eg+p/8fmty680VNms=\");\n_c = View;\nView.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired\n};\nexport default View;\nvar _c;\n$RefreshReg$(_c, \"View\");","map":{"version":3,"names":["React","useState","useMemo","PropTypes","Table","serializeNodes","serializeNodesToText","Node","View","data","column","direction","state","setState","headers","table","rows","cells","items","forEach","row","index","key","cell","cellIndex","value","string","children","length","valueText","sortedRows","Object","keys","sort","a","b","a_text","b_text","fixed","compact","basic","celled","inverted","striped","sortable","hideHeaders","map","propTypes","objectOf","any","isRequired"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/packages/volto-slate/src/blocks/Table/TableBlockView.jsx"],"sourcesContent":["/**\n * Slate Table block's View component.\n * @module volto-slate/blocks/Table/View\n */\n\nimport React, { useState, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport { Table } from 'semantic-ui-react';\nimport { map } from 'lodash';\nimport {\n  serializeNodes,\n  serializeNodesToText,\n} from '@plone/volto-slate/editor/render';\nimport { Node } from 'slate';\n\n// TODO: loading LESS files with `volto-slate/...` paths does not work currently\nimport '../../editor/plugins/Table/less/public.less';\n\n/**\n * Slate Table block's View class.\n * @class View\n * @extends Component\n * @param {object} data The table data to render as a table.\n */\nconst View = ({ data }) => {\n  const [state, setState] = useState({\n    column: null,\n    direction: null,\n  });\n\n  const headers = useMemo(() => {\n    return data.table.rows?.[0]?.cells;\n  }, [data.table.rows]);\n\n  const rows = useMemo(() => {\n    const items = {};\n    if (!data.table.rows) return {};\n    data.table.rows.forEach((row, index) => {\n      if (index > 0) {\n        items[row.key] = [];\n        row.cells.forEach((cell, cellIndex) => {\n          items[row.key][cellIndex] = {\n            ...cell,\n            value:\n              cell.value && Node.string({ children: cell.value }).length > 0\n                ? serializeNodes(cell.value)\n                : '\\u00A0',\n            valueText:\n              cell.value && Node.string({ children: cell.value }).length > 0\n                ? serializeNodesToText(cell.value)\n                : '\\u00A0',\n          };\n        });\n      }\n    });\n    return items;\n  }, [data.table.rows]);\n\n  const sortedRows = useMemo(() => {\n    if (state.column === null) return Object.keys(rows);\n    return Object.keys(rows).sort((a, b) => {\n      const a_text = rows[a][state.column].valueText;\n      const b_text = rows[b][state.column].valueText;\n      if (state.direction === 'ascending' ? a_text < b_text : a_text > b_text) {\n        return -1;\n      }\n      if (state.direction === 'ascending' ? a_text > b_text : a_text < b_text) {\n        return 1;\n      }\n      return 0;\n    });\n  }, [state, rows]);\n\n  return (\n    <>\n      {data && data.table && (\n        <Table\n          fixed={data.table.fixed}\n          compact={data.table.compact}\n          basic={data.table.basic ? 'very' : false}\n          celled={data.table.celled}\n          inverted={data.table.inverted}\n          striped={data.table.striped}\n          sortable={data.table.sortable}\n          className=\"slate-table-block\"\n        >\n          {!data.table.hideHeaders ? (\n            <Table.Header>\n              <Table.Row>\n                {headers.map((cell, index) => (\n                  <Table.HeaderCell\n                    key={cell.key}\n                    textAlign=\"left\"\n                    verticalAlign=\"middle\"\n                    sorted={state.column === index ? state.direction : null}\n                    onClick={() => {\n                      if (!data.table.sortable) return;\n                      setState({\n                        column: index,\n                        direction:\n                          state.column !== index\n                            ? 'ascending'\n                            : state.direction === 'ascending'\n                            ? 'descending'\n                            : 'ascending',\n                      });\n                    }}\n                  >\n                    {cell.value &&\n                    Node.string({ children: cell.value }).length > 0\n                      ? serializeNodes(cell.value)\n                      : '\\u00A0'}\n                  </Table.HeaderCell>\n                ))}\n              </Table.Row>\n            </Table.Header>\n          ) : (\n            ''\n          )}\n          <Table.Body>\n            {map(sortedRows, (row) => (\n              <Table.Row key={row}>\n                {map(rows[row], (cell) => (\n                  <Table.Cell\n                    key={cell.key}\n                    textAlign=\"left\"\n                    verticalAlign=\"middle\"\n                  >\n                    {cell.value}\n                  </Table.Cell>\n                ))}\n              </Table.Row>\n            ))}\n          </Table.Body>\n        </Table>\n      )}\n    </>\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nView.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default View;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}