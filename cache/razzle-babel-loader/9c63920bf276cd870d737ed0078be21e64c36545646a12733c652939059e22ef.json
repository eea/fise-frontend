{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-plotlycharts/src/Blocks/Treemap/Treemap.jsx\";\nvar __jsx = React.createElement;\n/*\n * The most basic connected block chart\n */\n\nimport React from 'react';\nimport { compose } from 'redux';\nimport loadable from '@loadable/component';\nimport config from '@plone/volto/registry';\nimport { connectToProviderData } from '@eeacms/volto-datablocks/hocs';\nimport { VisibilitySensor } from '@eeacms/volto-datablocks/components';\nvar LoadablePlotly = loadable({\n  resolved: {},\n  chunkName: function chunkName() {\n    return \"bise-react-plotly\";\n  },\n  isReady: function isReady(props) {\n    var key = this.resolve(props);\n    if (this.resolved[key] !== true) {\n      return false;\n    }\n    if (typeof __webpack_modules__ !== 'undefined') {\n      return !!__webpack_modules__[key];\n    }\n    return false;\n  },\n  importAsync: function importAsync() {\n    return import( /* webpackChunkName: \"bise-react-plotly\" */'react-plotly.js');\n  },\n  requireAsync: function requireAsync(props) {\n    var _this = this;\n    var key = this.resolve(props);\n    this.resolved[key] = false;\n    return this.importAsync(props).then(function (resolved) {\n      _this.resolved[key] = true;\n      return resolved;\n    });\n  },\n  requireSync: function requireSync(props) {\n    var id = this.resolve(props);\n    if (typeof __webpack_require__ !== 'undefined') {\n      return __webpack_require__(id);\n    }\n    return eval('module.require')(id);\n  },\n  resolve: function resolve() {\n    if (require.resolveWeak) {\n      return require.resolveWeak(\"react-plotly.js\");\n    }\n    return eval('require.resolve')(\"react-plotly.js\");\n  }\n});\n\n/*\n * @param { object } data The chart data, layout,  extra config, etc.\n * @param { boolean } useLiveData Will update the chart with the data from the provider\n * @param { boolean } filterWithDataParameters Will filter live data with parameters from context\n *\n */\n_c = LoadablePlotly;\nfunction Treemap(props) {\n  var layout = {\n    autosize: true,\n    dragmode: false,\n    font: {\n      family: config.settings.chartLayoutFontFamily || \"'Roboto', sans-serif\"\n    },\n    margin: {\n      b: 10,\n      l: 10,\n      pad: 0,\n      r: 10,\n      t: 10\n    }\n  };\n  var _props$provider_data = props.provider_data,\n    provider_data = _props$provider_data === void 0 ? {} : _props$provider_data,\n    _props$data = props.data,\n    data = _props$data === void 0 ? {} : _props$data;\n  var size_column = data.size_column,\n    parent_column = data.parent_column,\n    label_column = data.label_column;\n  provider_data = provider_data || {};\n  var traces = [{\n    type: 'treemap',\n    labels: provider_data[label_column] || [],\n    parents: provider_data[parent_column] || [],\n    values: provider_data[size_column] || [],\n    marker: {\n      pad: {\n        // t: 100,\n      }\n    }\n  }];\n  return __jsx(\"div\", {\n    className: \"treemap-chart\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, __jsx(VisibilitySensor, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"connected-chart-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, __jsx(LoadablePlotly, {\n    data: traces,\n    layout: layout,\n    frames: [],\n    config: {\n      displayModeBar: false,\n      editable: false,\n      responsive: true,\n      useResizeHandler: true\n    },\n    style: {\n      width: '100%',\n      height: '450px',\n      margin: 'auto'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }))));\n}\n_c2 = Treemap;\nexport default compose(connectToProviderData(function (props) {\n  return {\n    provider_url: props.data.url || props.data.provider_url\n  };\n}))(Treemap);\nvar _c, _c2;\n$RefreshReg$(_c, \"LoadablePlotly\");\n$RefreshReg$(_c2, \"Treemap\");","map":{"version":3,"names":["React","compose","loadable","config","connectToProviderData","VisibilitySensor","LoadablePlotly","Treemap","props","layout","autosize","dragmode","font","family","settings","chartLayoutFontFamily","margin","b","l","pad","r","t","provider_data","data","size_column","parent_column","label_column","traces","type","labels","parents","values","marker","displayModeBar","editable","responsive","useResizeHandler","width","height","provider_url","url"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-plotlycharts/src/Blocks/Treemap/Treemap.jsx"],"sourcesContent":["/*\n * The most basic connected block chart\n */\n\nimport React from 'react';\nimport { compose } from 'redux';\nimport loadable from '@loadable/component';\nimport config from '@plone/volto/registry';\nimport { connectToProviderData } from '@eeacms/volto-datablocks/hocs';\nimport { VisibilitySensor } from '@eeacms/volto-datablocks/components';\n\nconst LoadablePlotly = loadable(() =>\n  import(\n    /* webpackChunkName: \"bise-react-plotly\" */\n    'react-plotly.js'\n  ),\n);\n\n/*\n * @param { object } data The chart data, layout,  extra config, etc.\n * @param { boolean } useLiveData Will update the chart with the data from the provider\n * @param { boolean } filterWithDataParameters Will filter live data with parameters from context\n *\n */\nfunction Treemap(props) {\n  const layout = {\n    autosize: true,\n    dragmode: false,\n    font: {\n      family: config.settings.chartLayoutFontFamily || \"'Roboto', sans-serif\",\n    },\n    margin: { b: 10, l: 10, pad: 0, r: 10, t: 10 },\n  };\n\n  let { provider_data = {}, data = {} } = props;\n  const { size_column, parent_column, label_column } = data;\n\n  provider_data = provider_data || {};\n\n  let traces = [\n    {\n      type: 'treemap',\n      labels: provider_data[label_column] || [],\n      parents: provider_data[parent_column] || [],\n      values: provider_data[size_column] || [],\n      marker: {\n        pad: {\n          // t: 100,\n        },\n      },\n    },\n  ];\n\n  return (\n    <div className=\"treemap-chart\">\n      <VisibilitySensor>\n        <div className=\"connected-chart-wrapper\">\n          <LoadablePlotly\n            data={traces}\n            layout={layout}\n            frames={[]}\n            config={{\n              displayModeBar: false,\n              editable: false,\n              responsive: true,\n              useResizeHandler: true,\n            }}\n            style={{\n              width: '100%',\n              height: '450px',\n              margin: 'auto',\n            }}\n          />\n        </div>\n      </VisibilitySensor>\n    </div>\n  );\n}\n\nexport default compose(\n  connectToProviderData((props) => ({\n    provider_url: props.data.url || props.data.provider_url,\n  })),\n)(Treemap);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}