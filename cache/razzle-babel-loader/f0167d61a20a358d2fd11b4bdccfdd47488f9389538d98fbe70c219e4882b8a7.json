{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-datablocks/src/components/manage/Blocks/DataConnectedEmbedBlock/Edit.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n/**\n * Edit map block.\n * @module components/manage/Blocks/Maps/Edit\n */\n\nimport InlineForm from '@plone/volto/components/manage/Form/InlineForm';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Message } from 'semantic-ui-react';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport cx from 'classnames';\nimport PrivacyProtection from '@eeacms/volto-embed/PrivacyProtection/PrivacyProtection';\nimport { SidebarPortal } from '@plone/volto/components';\nimport mapsBlockSVG from '@plone/volto/components/manage/Blocks/Maps/block-maps.svg';\nimport schema from './schema';\nimport { addPrivacyProtectionToSchema } from '@eeacms/volto-embed/PrivacyProtection';\nconst messages = defineMessages({\n  MapsBlockInputPlaceholder: {\n    \"id\": \"Enter map Embed Code\",\n    \"defaultMessage\": \"Enter map Embed Code\"\n  },\n  left: {\n    \"id\": \"Left\",\n    \"defaultMessage\": \"Left\"\n  },\n  right: {\n    \"id\": \"Right\",\n    \"defaultMessage\": \"Right\"\n  },\n  center: {\n    \"id\": \"Center\",\n    \"defaultMessage\": \"Center\"\n  },\n  full: {\n    \"id\": \"Full\",\n    \"defaultMessage\": \"Full\"\n  },\n  GoogleMapsEmbeddedBlock: {\n    \"id\": \"Google Maps Embedded Block\",\n    \"defaultMessage\": \"Google Maps Embedded Block\"\n  }\n});\n\n/**\n * Edit image block class.\n * @class Edit\n * @extends Component\n */\nclass Edit extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.getSrc = this.getSrc.bind(this);\n    this.state = {\n      url: '',\n      error: null\n    };\n    this.onSubmitUrl = this.onSubmitUrl.bind(this);\n  }\n\n  /**\n   * Submit url handler\n   * @method onSubmitUrl\n   * @param {string} e event\n   * @returns {undefined}\n   */\n  onSubmitUrl() {\n    this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n      url: this.getSrc(this.props.data.url)\n    }));\n  }\n  componentDidUpdate(prevProps, prevState) {\n    const {\n      data\n    } = this.props;\n    if (data.url !== prevProps.data.url) {\n      this.onSubmitUrl();\n    }\n  }\n  /**\n   * get getSrc handler\n   * @method getSrc\n   * @param {string} embed Embed HTML code from Google Maps share option\n   * @returns {string} Source URL\n   */\n  // getSrc(embed) {\n  //   // Optimization, don't need the src\n  //   if (!embed.trim().startsWith('<iframe')) {\n  //     return embed;\n  //   }\n  //   const parser = new DOMParser();\n  //   const doc = parser.parseFromString(embed, 'text/html');\n  //   const iframe = doc.getElementsByTagName('iframe');\n  //   if (iframe.length === 0) {\n  //     this.setState({ error: true });\n  //     return '';\n  //   }\n  //   this.setState({ error: false });\n  //   return iframe[0].src;\n  // }\n  getSrc(embed) {\n    if (embed) {\n      var _this$props$propertie, _this$props$propertie2, _this$props$propertie3;\n      const nuts_code = ((_this$props$propertie = this.props.properties) === null || _this$props$propertie === void 0 ? void 0 : (_this$props$propertie2 = _this$props$propertie.data_query) === null || _this$props$propertie2 === void 0 ? void 0 : (_this$props$propertie3 = _this$props$propertie2[0]) === null || _this$props$propertie3 === void 0 ? void 0 : _this$props$propertie3.v[0]) || '<<NUTS_CODE>>';\n      return embed.replace('<<NUTS_CODE>>', nuts_code);\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return __jsx(\"div\", {\n      className: cx('block maps align', {\n        center: !Boolean(this.props.data.align)\n      }, this.props.data.align),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 7\n      }\n    }, this.props.data.url ? __jsx(PrivacyProtection, _extends({\n      data: this.props.data,\n      isEditMode: true\n    }, this.props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }\n    }), __jsx(\"div\", {\n      className: cx('maps-inner', {\n        'full-width': this.props.data.align === 'full'\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }\n    }, this.props.selected ? null : __jsx(\"div\", {\n      style: {\n        position: 'absolute',\n        top: '0',\n        left: '0',\n        right: '0',\n        bottom: '0',\n        width: '100%',\n        height: '100%'\n      },\n      className: \"embed-chart-overlay\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }\n    }), __jsx(\"iframe\", {\n      title: this.props.intl.formatMessage(messages.GoogleMapsEmbeddedBlock),\n      src: this.props.data.url,\n      className: \"google-map\",\n      frameBorder: \"0\",\n      allowFullScreen: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 15\n      }\n    }))) : __jsx(Message, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }\n    }, __jsx(\"center\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 13\n      }\n    }, __jsx(\"img\", {\n      src: mapsBlockSVG,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 15\n      }\n    }), __jsx(\"div\", {\n      className: \"message-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 15\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Please use the sidebar to add Embed URL\",\n      defaultMessage: \"Please use the sidebar to add Embed URL.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }\n    }), this.state.error && __jsx(\"div\", {\n      style: {\n        color: 'red'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 19\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Embed code error, please follow the instructions and try again.\",\n      defaultMessage: \"Embed code error, please follow the instructions and try again.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 21\n      }\n    }))))), __jsx(SidebarPortal, {\n      selected: this.props.selected,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }\n    }, __jsx(InlineForm, {\n      schema: addPrivacyProtectionToSchema(schema),\n      title: schema.title,\n      onChangeField: (id, value) => {\n        this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n          [id]: value\n        }));\n      },\n      formData: this.props.data,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 11\n      }\n    })));\n  }\n}\n_defineProperty(Edit, \"propTypes\", {\n  selected: PropTypes.bool.isRequired,\n  block: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  pathname: PropTypes.string.isRequired,\n  onChangeBlock: PropTypes.func.isRequired,\n  onSelectBlock: PropTypes.func.isRequired,\n  onDeleteBlock: PropTypes.func.isRequired,\n  onFocusPreviousBlock: PropTypes.func.isRequired,\n  onFocusNextBlock: PropTypes.func.isRequired,\n  handleKeyDown: PropTypes.func.isRequired\n});\nexport default injectIntl(Edit);","map":{"version":3,"names":["InlineForm","React","Component","PropTypes","Message","defineMessages","FormattedMessage","injectIntl","cx","PrivacyProtection","SidebarPortal","mapsBlockSVG","schema","addPrivacyProtectionToSchema","messages","MapsBlockInputPlaceholder","left","right","center","full","GoogleMapsEmbeddedBlock","Edit","constructor","props","getSrc","bind","state","url","error","onSubmitUrl","onChangeBlock","block","data","componentDidUpdate","prevProps","prevState","embed","nuts_code","properties","data_query","v","replace","render","Boolean","align","selected","position","top","bottom","width","height","intl","formatMessage","color","title","id","value","bool","isRequired","string","index","number","objectOf","any","pathname","func","onSelectBlock","onDeleteBlock","onFocusPreviousBlock","onFocusNextBlock","handleKeyDown"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-datablocks/src/components/manage/Blocks/DataConnectedEmbedBlock/Edit.jsx"],"sourcesContent":["/**\n * Edit map block.\n * @module components/manage/Blocks/Maps/Edit\n */\n\nimport InlineForm from '@plone/volto/components/manage/Form/InlineForm';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Message } from 'semantic-ui-react';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport cx from 'classnames';\nimport PrivacyProtection from '@eeacms/volto-embed/PrivacyProtection/PrivacyProtection';\n\nimport { SidebarPortal } from '@plone/volto/components';\nimport mapsBlockSVG from '@plone/volto/components/manage/Blocks/Maps/block-maps.svg';\nimport schema from './schema';\nimport { addPrivacyProtectionToSchema } from '@eeacms/volto-embed/PrivacyProtection';\n\nconst messages = defineMessages({\n  MapsBlockInputPlaceholder: {\n    id: 'Enter map Embed Code',\n    defaultMessage: 'Enter map Embed Code',\n  },\n  left: {\n    id: 'Left',\n    defaultMessage: 'Left',\n  },\n  right: {\n    id: 'Right',\n    defaultMessage: 'Right',\n  },\n  center: {\n    id: 'Center',\n    defaultMessage: 'Center',\n  },\n  full: {\n    id: 'Full',\n    defaultMessage: 'Full',\n  },\n  GoogleMapsEmbeddedBlock: {\n    id: 'Google Maps Embedded Block',\n    defaultMessage: 'Google Maps Embedded Block',\n  },\n});\n\n/**\n * Edit image block class.\n * @class Edit\n * @extends Component\n */\nclass Edit extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    selected: PropTypes.bool.isRequired,\n    block: PropTypes.string.isRequired,\n    index: PropTypes.number.isRequired,\n    data: PropTypes.objectOf(PropTypes.any).isRequired,\n    pathname: PropTypes.string.isRequired,\n    onChangeBlock: PropTypes.func.isRequired,\n    onSelectBlock: PropTypes.func.isRequired,\n    onDeleteBlock: PropTypes.func.isRequired,\n    onFocusPreviousBlock: PropTypes.func.isRequired,\n    onFocusNextBlock: PropTypes.func.isRequired,\n    handleKeyDown: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.getSrc = this.getSrc.bind(this);\n    this.state = {\n      url: '',\n      error: null,\n    };\n    this.onSubmitUrl = this.onSubmitUrl.bind(this);\n  }\n\n  /**\n   * Submit url handler\n   * @method onSubmitUrl\n   * @param {string} e event\n   * @returns {undefined}\n   */\n  onSubmitUrl() {\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      url: this.getSrc(this.props.data.url),\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { data } = this.props;\n    if (data.url !== prevProps.data.url) {\n      this.onSubmitUrl();\n    }\n  }\n  /**\n   * get getSrc handler\n   * @method getSrc\n   * @param {string} embed Embed HTML code from Google Maps share option\n   * @returns {string} Source URL\n   */\n  // getSrc(embed) {\n  //   // Optimization, don't need the src\n  //   if (!embed.trim().startsWith('<iframe')) {\n  //     return embed;\n  //   }\n  //   const parser = new DOMParser();\n  //   const doc = parser.parseFromString(embed, 'text/html');\n  //   const iframe = doc.getElementsByTagName('iframe');\n  //   if (iframe.length === 0) {\n  //     this.setState({ error: true });\n  //     return '';\n  //   }\n  //   this.setState({ error: false });\n  //   return iframe[0].src;\n  // }\n  getSrc(embed) {\n    if (embed) {\n      const nuts_code =\n        this.props.properties?.data_query?.[0]?.v[0] || '<<NUTS_CODE>>';\n      return embed.replace('<<NUTS_CODE>>', nuts_code);\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <div\n        className={cx(\n          'block maps align',\n          {\n            center: !Boolean(this.props.data.align),\n          },\n          this.props.data.align,\n        )}\n      >\n        {this.props.data.url ? (\n          <PrivacyProtection data={this.props.data} isEditMode {...this.props}>\n            <div\n              className={cx('maps-inner', {\n                'full-width': this.props.data.align === 'full',\n              })}\n            >\n              {this.props.selected ? null : (\n                <div\n                  style={{\n                    position: 'absolute',\n                    top: '0',\n                    left: '0',\n                    right: '0',\n                    bottom: '0',\n                    width: '100%',\n                    height: '100%',\n                  }}\n                  className=\"embed-chart-overlay\"\n                />\n              )}\n              <iframe\n                title={this.props.intl.formatMessage(\n                  messages.GoogleMapsEmbeddedBlock,\n                )}\n                src={this.props.data.url}\n                className=\"google-map\"\n                frameBorder=\"0\"\n                allowFullScreen\n              />\n            </div>\n          </PrivacyProtection>\n        ) : (\n          <Message>\n            <center>\n              <img src={mapsBlockSVG} alt=\"\" />\n              <div className=\"message-text\">\n                <FormattedMessage\n                  id=\"Please use the sidebar to add Embed URL\"\n                  defaultMessage=\"Please use the sidebar to add Embed URL.\"\n                />\n                {this.state.error && (\n                  <div style={{ color: 'red' }}>\n                    <FormattedMessage\n                      id=\"Embed code error, please follow the instructions and try again.\"\n                      defaultMessage=\"Embed code error, please follow the instructions and try again.\"\n                    />\n                  </div>\n                )}\n              </div>\n            </center>\n          </Message>\n        )}\n        <SidebarPortal selected={this.props.selected}>\n          <InlineForm\n            schema={addPrivacyProtectionToSchema(schema)}\n            title={schema.title}\n            onChangeField={(id, value) => {\n              this.props.onChangeBlock(this.props.block, {\n                ...this.props.data,\n                [id]: value,\n              });\n            }}\n            formData={this.props.data}\n          />\n        </SidebarPortal>\n      </div>\n    );\n  }\n}\n\nexport default injectIntl(Edit);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Enter map Embed Code","defaultMessage":"Enter map Embed Code"},{"id":"Left","defaultMessage":"Left"},{"id":"Right","defaultMessage":"Right"},{"id":"Center","defaultMessage":"Center"},{"id":"Full","defaultMessage":"Full"},{"id":"Google Maps Embedded Block","defaultMessage":"Google Maps Embedded Block"},{"id":"Please use the sidebar to add Embed URL","defaultMessage":"Please use the sidebar to add Embed URL."},{"id":"Embed code error, please follow the instructions and try again.","defaultMessage":"Embed code error, please follow the instructions and try again."}]}},"sourceType":"module","externalDependencies":[]}