{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-addons-forest/src/Collection/BlockEdit.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport navTreeSVG from '@plone/volto/icons/nav.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport { Segment } from 'semantic-ui-react';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { SidebarPortal } from '@plone/volto/components';\nimport { TextWidget } from '@plone/volto/components';\nimport { connect } from 'react-redux';\nimport { getBaseUrl } from '@plone/volto/helpers';\nimport { getContent, getVocabulary } from '@plone/volto/actions';\nimport SelectListingType from './SelectListingType';\nimport { SelectWidget } from '@plone/volto/components';\nimport BlockView from './BlockView';\nconst vocabulary = 'plone.app.contenttypes.metadatafields';\nclass Edit extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: []\n      // index_name: this.props.data.index_name || '',\n    };\n\n    this.updateContent = this.updateContent.bind(this);\n    this.getRequestKey = this.getRequestKey.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(id, value) {\n    const data = this.props.data;\n    this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, data), {}, {\n      [id]: value\n    }));\n  }\n  getRequestKey() {\n    return `col-content:${this.props.block}`;\n  }\n  updateContent() {\n    const path = this.props.data.collection_url;\n    if (!path) return;\n    const url = `${getBaseUrl(path)}`;\n    this.props.getContent(url, null, this.getRequestKey());\n  }\n  componentDidUpdate(prevProps) {\n    // console.log('metadata', this.props.metadataFields);\n    if (prevProps.data.collection_url !== this.props.data.collection_url) {\n      return this.updateContent();\n    }\n    const key = this.getRequestKey();\n    if (!prevProps.contentSubrequests[key]) {\n      return;\n    }\n    const prev = prevProps.contentSubrequests[key];\n    const now = this.props.contentSubrequests[key];\n    if (prev.loading && now.loaded) {\n      this.setState({\n        items: now.data.items\n      });\n    }\n  }\n  componentDidMount() {\n    this.props.getVocabulary(vocabulary);\n    this.updateContent();\n  }\n  render() {\n    const data = _objectSpread(_objectSpread({}, this.props.data), {}, {\n      collection_url: this.props.data.collection_url || ''\n    });\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 7\n      }\n    }, data.collection_url ? __jsx(BlockView, _extends({}, this.props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 32\n      }\n    })) : '', __jsx(SidebarPortal, {\n      selected: this.props.selected,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }\n    }, __jsx(Segment.Group, {\n      raised: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }\n    }, __jsx(\"header\", {\n      className: \"header pulled\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }\n    }, __jsx(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 15\n      }\n    }, \"Collection\")), __jsx(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }, __jsx(TextWidget, {\n      id: \"collection_url\",\n      title: \"Query\",\n      required: false,\n      value: data.collection_url.split('/').slice(-1)[0],\n      icon: data.collection_url ? clearSVG : navTreeSVG,\n      iconAction: data.collection_url ? () => {\n        this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, data), {}, {\n          collection_url: data.href\n        }));\n      } : () => this.props.openObjectBrowser({\n        dataName: 'collection_url',\n        mode: 'link'\n      }),\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 15\n      }\n    }), __jsx(SelectListingType, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 15\n      }\n    }), __jsx(SelectWidget, {\n      required: false,\n      error: [],\n      fieldSet: \"collection\",\n      id: \"index_name\",\n      title: \"Use filter\",\n      choices: this.props.metadataFields,\n      value: this.props.data.index_name || [],\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 15\n      }\n    })))));\n  }\n}\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nEdit.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired\n};\nexport default connect((state, props) => {\n  // console.log('vocabs', state.vocabularies);\n  return {\n    contentSubrequests: state.content.subrequests,\n    metadataFields: state.vocabularies[vocabulary] && state.vocabularies[vocabulary].items ? state.vocabularies[vocabulary].items.map(o => [o.value, o.label]) : []\n  };\n}, {\n  getVocabulary,\n  getContent\n})(Edit);","map":{"version":3,"names":["navTreeSVG","clearSVG","Segment","PropTypes","React","Component","SidebarPortal","TextWidget","connect","getBaseUrl","getContent","getVocabulary","SelectListingType","SelectWidget","BlockView","vocabulary","Edit","constructor","props","state","items","updateContent","bind","getRequestKey","handleChange","id","value","data","onChangeBlock","block","path","collection_url","url","componentDidUpdate","prevProps","key","contentSubrequests","prev","now","loading","loaded","setState","componentDidMount","render","selected","split","slice","href","openObjectBrowser","dataName","mode","metadataFields","index_name","propTypes","objectOf","any","isRequired","content","subrequests","vocabularies","map","o","label"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-addons-forest/src/Collection/BlockEdit.jsx"],"sourcesContent":["import navTreeSVG from '@plone/volto/icons/nav.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport { Segment } from 'semantic-ui-react';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { SidebarPortal } from '@plone/volto/components';\nimport { TextWidget } from '@plone/volto/components';\nimport { connect } from 'react-redux';\nimport { getBaseUrl } from '@plone/volto/helpers';\nimport { getContent, getVocabulary } from '@plone/volto/actions';\nimport SelectListingType from './SelectListingType';\nimport { SelectWidget } from '@plone/volto/components';\nimport BlockView from './BlockView';\n\nconst vocabulary = 'plone.app.contenttypes.metadatafields';\n\nclass Edit extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      items: [],\n      // index_name: this.props.data.index_name || '',\n    };\n\n    this.updateContent = this.updateContent.bind(this);\n    this.getRequestKey = this.getRequestKey.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(id, value) {\n    const data = this.props.data;\n\n    this.props.onChangeBlock(this.props.block, {\n      ...data,\n      [id]: value,\n    });\n  }\n\n  getRequestKey() {\n    return `col-content:${this.props.block}`;\n  }\n\n  updateContent() {\n    const path = this.props.data.collection_url;\n    if (!path) return;\n\n    const url = `${getBaseUrl(path)}`;\n    this.props.getContent(url, null, this.getRequestKey());\n  }\n\n  componentDidUpdate(prevProps) {\n    // console.log('metadata', this.props.metadataFields);\n    if (prevProps.data.collection_url !== this.props.data.collection_url) {\n      return this.updateContent();\n    }\n    const key = this.getRequestKey();\n    if (!prevProps.contentSubrequests[key]) {\n      return;\n    }\n\n    const prev = prevProps.contentSubrequests[key];\n    const now = this.props.contentSubrequests[key];\n\n    if (prev.loading && now.loaded) {\n      this.setState({ items: now.data.items });\n    }\n  }\n\n  componentDidMount() {\n    this.props.getVocabulary(vocabulary);\n    this.updateContent();\n  }\n\n  render() {\n    const data = {\n      ...this.props.data,\n      collection_url: this.props.data.collection_url || '',\n    };\n\n    return (\n      <div>\n        {data.collection_url ? <BlockView {...this.props} /> : ''}\n\n        <SidebarPortal selected={this.props.selected}>\n          <Segment.Group raised>\n            <header className=\"header pulled\">\n              <h2>Collection</h2>\n            </header>\n            <Segment>\n              <TextWidget\n                id=\"collection_url\"\n                title=\"Query\"\n                required={false}\n                value={data.collection_url.split('/').slice(-1)[0]}\n                icon={data.collection_url ? clearSVG : navTreeSVG}\n                iconAction={\n                  data.collection_url\n                    ? () => {\n                        this.props.onChangeBlock(this.props.block, {\n                          ...data,\n                          collection_url: data.href,\n                        });\n                      }\n                    : () =>\n                        this.props.openObjectBrowser({\n                          dataName: 'collection_url',\n                          mode: 'link',\n                        })\n                }\n                onChange={this.handleChange}\n              />\n\n              <SelectListingType />\n\n              <SelectWidget\n                required={false}\n                error={[]}\n                fieldSet=\"collection\"\n                id=\"index_name\"\n                title=\"Use filter\"\n                choices={this.props.metadataFields}\n                value={this.props.data.index_name || []}\n                onChange={this.handleChange}\n              />\n            </Segment>\n          </Segment.Group>\n        </SidebarPortal>\n      </div>\n    );\n  }\n}\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nEdit.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default connect(\n  (state, props) => {\n    // console.log('vocabs', state.vocabularies);\n    return {\n      contentSubrequests: state.content.subrequests,\n      metadataFields:\n        state.vocabularies[vocabulary] && state.vocabularies[vocabulary].items\n          ? state.vocabularies[vocabulary].items.map((o) => [o.value, o.label])\n          : [],\n    };\n  },\n  {\n    getVocabulary,\n    getContent,\n  },\n)(Edit);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}