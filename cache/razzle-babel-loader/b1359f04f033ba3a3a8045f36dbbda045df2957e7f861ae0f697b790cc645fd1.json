{"ast":null,"code":"import superagent from 'superagent';\nimport cookie from 'react-cookie';\nimport qs from 'querystring';\nimport { parse as parseUrl } from 'url';\nimport config from '@plone/volto/registry';\nconst getProtocol = url => {\n  var _url$protocol;\n  return (url === null || url === void 0 ? void 0 : (_url$protocol = url.protocol) === null || _url$protocol === void 0 ? void 0 : _url$protocol.slice(0, url.protocol.length - 1)) || '';\n};\nconst getDefaultPort = url => {\n  const protocol = getProtocol(url);\n  return protocol === 'http' ? ':80' : ':443';\n};\nconst getReqPath = req => {\n  const reqPath = req.path;\n  const reqQuery = qs.stringify(req.query);\n  return !reqQuery ? reqPath : `${reqPath}?${reqQuery}`;\n};\nconst getVirtualHost = () => {\n  const {\n    settings\n  } = config;\n  const vh = process.env.RAZZLE_VIRTUAL_HOST || settings.virtualHost;\n  const vhUrl = vh ? parseUrl(vh) : null;\n  const internalApiUrl = parseUrl(settings.internalApiPath || settings.apiPath);\n  const apiUrl = parseUrl(settings.apiPath);\n  const publicUrl = parseUrl(settings.publicURL);\n  const virtualHost = vhUrl ? `/${getProtocol(vhUrl)}/${vhUrl.hostname}${getDefaultPort(vhUrl)}${internalApiUrl.path}` : `/${getProtocol(apiUrl)}/${__DEVELOPMENT__ ? publicUrl.host : publicUrl.hostname}${getDefaultPort(apiUrl)}${internalApiUrl.path}`;\n  return `${internalApiUrl.protocol}//${internalApiUrl.host}/VirtualHostBase${virtualHost}/VirtualHostRoot`;\n};\nexport const getAPIResourceWithAuth = req => {\n  return new Promise((resolve, reject) => {\n    const url = `${getVirtualHost()}${getReqPath(req)}`;\n    const request = superagent.get(url).buffer().type('text');\n    const authToken = cookie.load('auth_token');\n    if (authToken) {\n      request.set('Authorization', `Bearer ${authToken}`);\n    }\n    request.end((error, res) => {\n      if (error) {\n        return reject(error);\n      }\n      return resolve(res);\n    });\n  });\n};\nexport default (config => {\n  if (__SERVER__) {\n    var _process$env$RAZZLE_V;\n    const vhPaths = ((_process$env$RAZZLE_V = process.env.RAZZLE_VIRTUAL_HOSTED_PATHS) === null || _process$env$RAZZLE_V === void 0 ? void 0 : _process$env$RAZZLE_V.split(',')) || config.settings.virtualHostedPaths || [];\n    if (vhPaths.length) {\n      const express = require('express');\n      const middleware = express.Router();\n      vhPaths.forEach(path => {\n        middleware.all(path, function (req, res) {\n          getAPIResourceWithAuth(req).then(resource => {\n            const content_type = resource.get('content-type');\n            res.set('Content-Type', content_type);\n            res.send(resource.text);\n          }).catch(error => {\n            res.status(error.status).send(error);\n          });\n        });\n      });\n      middleware.id = 'vh-proxy-middleware';\n      config.settings.expressMiddleware = [...config.settings.expressMiddleware, middleware];\n    }\n  }\n  return config;\n});","map":{"version":3,"names":["superagent","cookie","qs","parse","parseUrl","config","getProtocol","url","protocol","slice","length","getDefaultPort","getReqPath","req","reqPath","path","reqQuery","stringify","query","getVirtualHost","settings","vh","process","env","RAZZLE_VIRTUAL_HOST","virtualHost","vhUrl","internalApiUrl","internalApiPath","apiPath","apiUrl","publicUrl","publicURL","hostname","__DEVELOPMENT__","host","getAPIResourceWithAuth","Promise","resolve","reject","request","get","buffer","type","authToken","load","set","end","error","res","__SERVER__","vhPaths","RAZZLE_VIRTUAL_HOSTED_PATHS","split","virtualHostedPaths","express","require","middleware","Router","forEach","all","then","resource","content_type","send","text","catch","status","id","expressMiddleware"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-middleware-vh/src/index.js"],"sourcesContent":["import superagent from 'superagent';\nimport cookie from 'react-cookie';\nimport qs from 'querystring';\nimport { parse as parseUrl } from 'url';\n\nimport config from '@plone/volto/registry';\n\nconst getProtocol = (url) => {\n  return url?.protocol?.slice(0, url.protocol.length - 1) || '';\n};\n\nconst getDefaultPort = (url) => {\n  const protocol = getProtocol(url);\n  return protocol === 'http' ? ':80' : ':443';\n};\n\nconst getReqPath = (req) => {\n  const reqPath = req.path;\n  const reqQuery = qs.stringify(req.query);\n\n  return !reqQuery ? reqPath : `${reqPath}?${reqQuery}`;\n};\n\nconst getVirtualHost = () => {\n  const { settings } = config;\n  const vh = process.env.RAZZLE_VIRTUAL_HOST || settings.virtualHost;\n  const vhUrl = vh ? parseUrl(vh) : null;\n  const internalApiUrl = parseUrl(settings.internalApiPath || settings.apiPath);\n  const apiUrl = parseUrl(settings.apiPath);\n  const publicUrl = parseUrl(settings.publicURL);\n  const virtualHost = vhUrl\n    ? `/${getProtocol(vhUrl)}/${vhUrl.hostname}${getDefaultPort(vhUrl)}${\n        internalApiUrl.path\n      }`\n    : `/${getProtocol(apiUrl)}/${\n        __DEVELOPMENT__ ? publicUrl.host : publicUrl.hostname\n      }${getDefaultPort(apiUrl)}${internalApiUrl.path}`;\n\n  return `${internalApiUrl.protocol}//${internalApiUrl.host}/VirtualHostBase${virtualHost}/VirtualHostRoot`;\n};\n\nexport const getAPIResourceWithAuth = (req) => {\n  return new Promise((resolve, reject) => {\n    const url = `${getVirtualHost()}${getReqPath(req)}`;\n    const request = superagent.get(url).buffer().type('text');\n    const authToken = cookie.load('auth_token');\n    if (authToken) {\n      request.set('Authorization', `Bearer ${authToken}`);\n    }\n    request.end((error, res) => {\n      if (error) {\n        return reject(error);\n      }\n      return resolve(res);\n    });\n  });\n};\n\nexport default (config) => {\n  if (__SERVER__) {\n    const vhPaths =\n      process.env.RAZZLE_VIRTUAL_HOSTED_PATHS?.split(',') ||\n      config.settings.virtualHostedPaths ||\n      [];\n    if (vhPaths.length) {\n      const express = require('express');\n      const middleware = express.Router();\n      vhPaths.forEach((path) => {\n        middleware.all(path, function (req, res) {\n          getAPIResourceWithAuth(req)\n            .then((resource) => {\n              const content_type = resource.get('content-type');\n              res.set('Content-Type', content_type);\n              res.send(resource.text);\n            })\n            .catch((error) => {\n              res.status(error.status).send(error);\n            });\n        });\n      });\n      middleware.id = 'vh-proxy-middleware';\n\n      config.settings.expressMiddleware = [\n        ...config.settings.expressMiddleware,\n        middleware,\n      ];\n    }\n  }\n  return config;\n};\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}