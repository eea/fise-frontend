{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport { GET_TAXONOMY, UPDATE_TAXONOMY } from './constants';\nconst initialState = {};\nfunction getRequestKey(actionType) {\n  return actionType.split('_')[0].toLowerCase();\n}\nexport function taxonomy(state = initialState, action) {\n  switch (action.type) {\n    case `${GET_TAXONOMY}_PENDING`:\n    case `${UPDATE_TAXONOMY}_PENDING`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [getRequestKey(action.type)]: {\n          loading: true,\n          loaded: false,\n          error: null\n        }\n      });\n    case `${GET_TAXONOMY}_SUCCESS`:\n    case `${UPDATE_TAXONOMY}_SUCCESS`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        data: _objectSpread(_objectSpread({}, state.data), {}, {\n          [action.url]: action.result\n        }),\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null\n        }\n      });\n    case `${GET_TAXONOMY}_FAIL`:\n    case `${UPDATE_TAXONOMY}_FAIL`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error\n        }\n      });\n    default:\n      break;\n  }\n  return state;\n}","map":{"version":3,"names":["GET_TAXONOMY","UPDATE_TAXONOMY","initialState","getRequestKey","actionType","split","toLowerCase","taxonomy","state","action","type","loading","loaded","error","data","url","result"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-taxonomy/src/reducers.js"],"sourcesContent":["import { GET_TAXONOMY, UPDATE_TAXONOMY } from './constants';\n\nconst initialState = {};\n\nfunction getRequestKey(actionType) {\n  return actionType.split('_')[0].toLowerCase();\n}\n\nexport function taxonomy(state = initialState, action) {\n  switch (action.type) {\n    case `${GET_TAXONOMY}_PENDING`:\n    case `${UPDATE_TAXONOMY}_PENDING`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: true,\n          loaded: false,\n          error: null,\n        },\n      };\n    case `${GET_TAXONOMY}_SUCCESS`:\n    case `${UPDATE_TAXONOMY}_SUCCESS`:\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.url]: action.result,\n        },\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${GET_TAXONOMY}_FAIL`:\n    case `${UPDATE_TAXONOMY}_FAIL`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    default:\n      break;\n  }\n  return state;\n}\n"],"mappings":";;;AAAA,SAASA,YAAY,EAAEC,eAAe,QAAQ,aAAa;AAE3D,MAAMC,YAAY,GAAG,CAAC,CAAC;AAEvB,SAASC,aAAa,CAACC,UAAU,EAAE;EACjC,OAAOA,UAAU,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACC,WAAW,EAAE;AAC/C;AAEA,OAAO,SAASC,QAAQ,CAACC,KAAK,GAAGN,YAAY,EAAEO,MAAM,EAAE;EACrD,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAM,GAAEV,YAAa,UAAS;IAC9B,KAAM,GAAEC,eAAgB,UAAS;MAC/B,uCACKO,KAAK;QACR,CAACL,aAAa,CAACM,MAAM,CAACC,IAAI,CAAC,GAAG;UAC5BC,OAAO,EAAE,IAAI;UACbC,MAAM,EAAE,KAAK;UACbC,KAAK,EAAE;QACT;MAAC;IAEL,KAAM,GAAEb,YAAa,UAAS;IAC9B,KAAM,GAAEC,eAAgB,UAAS;MAC/B,uCACKO,KAAK;QACRM,IAAI,kCACCN,KAAK,CAACM,IAAI;UACb,CAACL,MAAM,CAACM,GAAG,GAAGN,MAAM,CAACO;QAAM,EAC5B;QACD,CAACb,aAAa,CAACM,MAAM,CAACC,IAAI,CAAC,GAAG;UAC5BC,OAAO,EAAE,KAAK;UACdC,MAAM,EAAE,IAAI;UACZC,KAAK,EAAE;QACT;MAAC;IAEL,KAAM,GAAEb,YAAa,OAAM;IAC3B,KAAM,GAAEC,eAAgB,OAAM;MAC5B,uCACKO,KAAK;QACR,CAACL,aAAa,CAACM,MAAM,CAACC,IAAI,CAAC,GAAG;UAC5BC,OAAO,EAAE,KAAK;UACdC,MAAM,EAAE,KAAK;UACbC,KAAK,EAAEJ,MAAM,CAACI;QAChB;MAAC;IAEL;MACE;EAAM;EAEV,OAAOL,KAAK;AACd"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}