{"ast":null,"code":"import _toConsumableArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _map from \"lodash/map\";\nimport _merge from \"lodash/merge\";\nimport _concat from \"lodash/concat\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Contents/ContentsRenameModal.jsx\";\nvar __jsx = React.createElement;\n/**\n * Contents rename modal.\n * @module components/manage/Contents/ContentsRenameModal\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { updateContent } from '@plone/volto/actions';\nimport { ModalForm } from '@plone/volto/components';\nvar messages = defineMessages({\n  renameItems: {\n    \"id\": \"Rename items\",\n    \"defaultMessage\": \"Rename items\"\n  },\n  \"default\": {\n    \"id\": \"Default\",\n    \"defaultMessage\": \"Default\"\n  },\n  title: {\n    \"id\": \"Title\",\n    \"defaultMessage\": \"Title\"\n  },\n  shortName: {\n    \"id\": \"Short name\",\n    \"defaultMessage\": \"Short name\"\n  },\n  shortNameDescription: {\n    \"id\": \"This name will be displayed in the URL.\",\n    \"defaultMessage\": \"This name will be displayed in the URL.\"\n  },\n  loadingMessage: {\n    \"id\": \"Rename Items Loading Message\",\n    \"defaultMessage\": \"Renaming items...\"\n  }\n});\n\n/**\n * ContentsRenameModal class.\n * @class ContentsRenameModal\n * @extends Component\n */\nvar ContentsRenameModal = /*#__PURE__*/function (_Component) {\n  _inherits(ContentsRenameModal, _Component);\n  var _super = _createSuper(ContentsRenameModal);\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ContentsUploadModal\n   */\n  function ContentsRenameModal(props) {\n    var _this;\n    _classCallCheck(this, ContentsRenameModal);\n    _this = _super.call(this, props);\n    _this.onSubmit = _this.onSubmit.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  _createClass(ContentsRenameModal, [{\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      if (this.props.request.loading && nextProps.request.loaded) {\n        this.props.onOk();\n      }\n    }\n\n    /**\n     * Submit handler\n     * @method onSubmit\n     * @param {Object} data Form data\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(data) {\n      this.props.updateContent(_map(this.props.items, function (item) {\n        return item.url;\n      }), _map(this.props.items, function (item, index) {\n        return {\n          id: data[\"\".concat(index, \"_id\")],\n          title: data[\"\".concat(index, \"_title\")]\n        };\n      }));\n    }\n\n    /**\n     * Render method.\n     * @method render\n     * @returns {string} Markup for the component.\n     */\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      return this.props.open && __jsx(ModalForm, {\n        open: this.props.open,\n        loading: this.props.request.loading,\n        loadingMessage: this.props.intl.formatMessage(messages.loadingMessage),\n        onSubmit: this.onSubmit,\n        onCancel: this.props.onCancel,\n        formData: _merge.apply(void 0, _toConsumableArray(_map(this.props.items, function (item, index) {\n          var _ref;\n          return _ref = {}, _defineProperty(_ref, \"\".concat(index, \"_title\"), item.title), _defineProperty(_ref, \"\".concat(index, \"_id\"), item.id), _ref;\n        }))),\n        title: this.props.intl.formatMessage(messages.renameItems),\n        schema: {\n          fieldsets: [{\n            id: 'default',\n            title: this.props.intl.formatMessage(messages[\"default\"]),\n            fields: _concat.apply(void 0, _toConsumableArray(_map(this.props.items, function (item, index) {\n              return [\"\".concat(index, \"_title\"), \"\".concat(index, \"_id\")];\n            })))\n          }],\n          properties: _merge.apply(void 0, _toConsumableArray(_map(this.props.items, function (item, index) {\n            var _ref2;\n            return _ref2 = {}, _defineProperty(_ref2, \"\".concat(index, \"_title\"), {\n              title: _this2.props.intl.formatMessage(messages.title),\n              type: 'string',\n              description: ''\n            }), _defineProperty(_ref2, \"\".concat(index, \"_id\"), {\n              title: _this2.props.intl.formatMessage(messages.shortName),\n              type: 'id',\n              description: _this2.props.intl.formatMessage(messages.shortNameDescription)\n            }), _ref2;\n          }))),\n          required: []\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 9\n        }\n      });\n    }\n  }]);\n  return ContentsRenameModal;\n}(Component);\n_defineProperty(ContentsRenameModal, \"propTypes\", {\n  updateContent: PropTypes.func.isRequired,\n  items: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string,\n    title: PropTypes.string,\n    url: PropTypes.string\n  })).isRequired,\n  request: PropTypes.shape({\n    loading: PropTypes.bool,\n    loaded: PropTypes.bool\n  }).isRequired,\n  open: PropTypes.bool.isRequired,\n  onOk: PropTypes.func.isRequired,\n  onCancel: PropTypes.func.isRequired\n});\nexport default compose(injectIntl, connect(function (state) {\n  return {\n    request: state.content.update\n  };\n}, {\n  updateContent: updateContent\n}))(ContentsRenameModal);","map":{"version":3,"names":["React","Component","PropTypes","connect","compose","defineMessages","injectIntl","updateContent","ModalForm","messages","renameItems","title","shortName","shortNameDescription","loadingMessage","ContentsRenameModal","props","onSubmit","bind","nextProps","request","loading","loaded","onOk","data","items","item","url","index","id","open","intl","formatMessage","onCancel","fieldsets","fields","properties","type","description","required","func","isRequired","arrayOf","shape","string","bool","state","content","update"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Contents/ContentsRenameModal.jsx"],"sourcesContent":["/**\n * Contents rename modal.\n * @module components/manage/Contents/ContentsRenameModal\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { concat, merge, map } from 'lodash';\nimport { defineMessages, injectIntl } from 'react-intl';\n\nimport { updateContent } from '@plone/volto/actions';\nimport { ModalForm } from '@plone/volto/components';\n\nconst messages = defineMessages({\n  renameItems: {\n    id: 'Rename items',\n    defaultMessage: 'Rename items',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  title: {\n    id: 'Title',\n    defaultMessage: 'Title',\n  },\n  shortName: {\n    id: 'Short name',\n    defaultMessage: 'Short name',\n  },\n  shortNameDescription: {\n    id: 'This name will be displayed in the URL.',\n    defaultMessage: 'This name will be displayed in the URL.',\n  },\n  loadingMessage: {\n    id: 'Rename Items Loading Message',\n    defaultMessage: 'Renaming items...',\n  },\n});\n\n/**\n * ContentsRenameModal class.\n * @class ContentsRenameModal\n * @extends Component\n */\nclass ContentsRenameModal extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    updateContent: PropTypes.func.isRequired,\n    items: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string,\n        title: PropTypes.string,\n        url: PropTypes.string,\n      }),\n    ).isRequired,\n    request: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    open: PropTypes.bool.isRequired,\n    onOk: PropTypes.func.isRequired,\n    onCancel: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ContentsUploadModal\n   */\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.request.loading && nextProps.request.loaded) {\n      this.props.onOk();\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {Object} data Form data\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    this.props.updateContent(\n      map(this.props.items, (item) => item.url),\n      map(this.props.items, (item, index) => ({\n        id: data[`${index}_id`],\n        title: data[`${index}_title`],\n      })),\n    );\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      this.props.open && (\n        <ModalForm\n          open={this.props.open}\n          loading={this.props.request.loading}\n          loadingMessage={this.props.intl.formatMessage(\n            messages.loadingMessage,\n          )}\n          onSubmit={this.onSubmit}\n          onCancel={this.props.onCancel}\n          formData={merge(\n            ...map(this.props.items, (item, index) => ({\n              [`${index}_title`]: item.title,\n              [`${index}_id`]: item.id,\n            })),\n          )}\n          title={this.props.intl.formatMessage(messages.renameItems)}\n          schema={{\n            fieldsets: [\n              {\n                id: 'default',\n                title: this.props.intl.formatMessage(messages.default),\n                fields: concat(\n                  ...map(this.props.items, (item, index) => [\n                    `${index}_title`,\n                    `${index}_id`,\n                  ]),\n                ),\n              },\n            ],\n            properties: merge(\n              ...map(this.props.items, (item, index) => ({\n                [`${index}_title`]: {\n                  title: this.props.intl.formatMessage(messages.title),\n                  type: 'string',\n                  description: '',\n                },\n                [`${index}_id`]: {\n                  title: this.props.intl.formatMessage(messages.shortName),\n                  type: 'id',\n                  description: this.props.intl.formatMessage(\n                    messages.shortNameDescription,\n                  ),\n                },\n              })),\n            ),\n            required: [],\n          }}\n        />\n      )\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state) => ({\n      request: state.content.update,\n    }),\n    { updateContent },\n  ),\n)(ContentsRenameModal);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Rename items","defaultMessage":"Rename items"},{"id":"Default","defaultMessage":"Default"},{"id":"Title","defaultMessage":"Title"},{"id":"Short name","defaultMessage":"Short name"},{"id":"This name will be displayed in the URL.","defaultMessage":"This name will be displayed in the URL."},{"id":"Rename Items Loading Message","defaultMessage":"Renaming items..."}]}},"sourceType":"module","externalDependencies":[]}