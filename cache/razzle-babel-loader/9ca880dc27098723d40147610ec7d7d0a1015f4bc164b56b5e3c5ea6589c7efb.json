{"ast":null,"code":"const _excluded = [\"children\", \"scrollCheck\", \"resizeCheck\", \"partialVisibility\", \"delayedCall\", \"offset\", \"Placeholder\"];\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-datablocks/src/components/theme/VisibilitySensor/VisibilitySensor.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport React from 'react';\nimport ReactVisibilitySensor from 'react-visibility-sensor';\nconst VisibilitySensor = _ref => {\n  let {\n      children,\n      scrollCheck = true,\n      resizeCheck = true,\n      partialVisibility = true,\n      delayedCall = true,\n      offset = {\n        top: -50,\n        bottom: -50\n      },\n      Placeholder = () => __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 23\n        }\n      }, \"\\xA0\")\n    } = _ref,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  const [active, setActive] = React.useState(true);\n  return __jsx(ReactVisibilitySensor, _extends({\n    scrollCheck: scrollCheck,\n    resizeCheck: resizeCheck,\n    partialVisibility: partialVisibility,\n    delayedCall: delayedCall,\n    onChange: visible => {\n      if (visible && active) {\n        setActive(false);\n      }\n    },\n    active: active,\n    getDOMElement: val => {\n      return val === null || val === void 0 ? void 0 : val.el;\n    },\n    offset: offset\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }), ({\n    isVisible\n  }) => {\n    if (isVisible || !active) {\n      return children;\n    }\n    return __jsx(Placeholder, _extends({}, rest, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 16\n      }\n    }));\n  });\n};\nexport default VisibilitySensor;","map":{"version":3,"names":["React","ReactVisibilitySensor","VisibilitySensor","children","scrollCheck","resizeCheck","partialVisibility","delayedCall","offset","top","bottom","Placeholder","rest","active","setActive","useState","visible","val","el","isVisible"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-datablocks/src/components/theme/VisibilitySensor/VisibilitySensor.jsx"],"sourcesContent":["import React from 'react';\nimport ReactVisibilitySensor from 'react-visibility-sensor';\n\nconst VisibilitySensor = ({\n  children,\n  scrollCheck = true,\n  resizeCheck = true,\n  partialVisibility = true,\n  delayedCall = true,\n  offset = { top: -50, bottom: -50 },\n  Placeholder = () => <div>&nbsp;</div>,\n  ...rest\n}) => {\n  const [active, setActive] = React.useState(true);\n\n  return (\n    <ReactVisibilitySensor\n      scrollCheck={scrollCheck}\n      resizeCheck={resizeCheck}\n      partialVisibility={partialVisibility}\n      delayedCall={delayedCall}\n      onChange={(visible) => {\n        if (visible && active) {\n          setActive(false);\n        }\n      }}\n      active={active}\n      getDOMElement={(val) => {\n        return val?.el;\n      }}\n      offset={offset}\n      {...rest}\n    >\n      {({ isVisible }) => {\n        if (isVisible || !active) {\n          return children;\n        }\n\n        return <Placeholder {...rest} />;\n      }}\n    </ReactVisibilitySensor>\n  );\n};\n\nexport default VisibilitySensor;\n"],"mappings":";;;;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,qBAAqB,MAAM,yBAAyB;AAE3D,MAAMC,gBAAgB,GAAG,QASnB;EAAA,IAToB;MACxBC,QAAQ;MACRC,WAAW,GAAG,IAAI;MAClBC,WAAW,GAAG,IAAI;MAClBC,iBAAiB,GAAG,IAAI;MACxBC,WAAW,GAAG,IAAI;MAClBC,MAAM,GAAG;QAAEC,GAAG,EAAE,CAAC,EAAE;QAAEC,MAAM,EAAE,CAAC;MAAG,CAAC;MAClCC,WAAW,GAAG,MAAM;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA;IAEtB,CAAC;IADIC,IAAI;EAEP,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGd,KAAK,CAACe,QAAQ,CAAC,IAAI,CAAC;EAEhD,OACE,MAAC,qBAAqB;IACpB,WAAW,EAAEX,WAAY;IACzB,WAAW,EAAEC,WAAY;IACzB,iBAAiB,EAAEC,iBAAkB;IACrC,WAAW,EAAEC,WAAY;IACzB,QAAQ,EAAGS,OAAO,IAAK;MACrB,IAAIA,OAAO,IAAIH,MAAM,EAAE;QACrBC,SAAS,CAAC,KAAK,CAAC;MAClB;IACF,CAAE;IACF,MAAM,EAAED,MAAO;IACf,aAAa,EAAGI,GAAG,IAAK;MACtB,OAAOA,GAAG,aAAHA,GAAG,uBAAHA,GAAG,CAAEC,EAAE;IAChB,CAAE;IACF,MAAM,EAAEV;EAAO,GACXI,IAAI;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,IAEP,CAAC;IAAEO;EAAU,CAAC,KAAK;IAClB,IAAIA,SAAS,IAAI,CAACN,MAAM,EAAE;MACxB,OAAOV,QAAQ;IACjB;IAEA,OAAO,MAAC,WAAW,eAAKS,IAAI;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAI;EAClC,CAAC,CACqB;AAE5B,CAAC;AAED,eAAeV,gBAAgB"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}