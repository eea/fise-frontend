{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-slate-footnote/src/Blocks/Footnote/FootnotesBlockEdit.jsx\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport React from 'react';\nimport FootnotesBlockView from './FootnotesBlockView';\nimport { InlineForm, SidebarPortal } from '@plone/volto/components';\nimport { FootnoteBlockSchema as schema } from './schema';\nimport { Segment } from 'semantic-ui-react';\n\n/**\n * @summary The React component that allows the footnotes block view to be\n * edited using a form in a sidebar portal.\n * @param {object} props Contains the props received by any Edit component of a\n * registered Volto block: `selected`, `block`, `data`, `onChangeBlock` etc.\n */\nconst FootnotesBlockEdit = props => {\n  var _data$instructions;\n  const {\n    selected,\n    block,\n    data,\n    onChangeBlock,\n    properties\n  } = props;\n  // Get editing instructions from block settings or props\n  let instructions = (data === null || data === void 0 ? void 0 : (_data$instructions = data.instructions) === null || _data$instructions === void 0 ? void 0 : _data$instructions.data) || (data === null || data === void 0 ? void 0 : data.instructions);\n  if (!instructions || instructions === '<p><br/></p>') {\n    instructions = props.formDescription;\n  }\n  return __jsx(React.Fragment, null, __jsx(FootnotesBlockView, _extends({}, props, {\n    properties: properties,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  })), __jsx(SidebarPortal, {\n    selected: selected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, instructions && __jsx(Segment, {\n    attached: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: instructions\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  })), !(data !== null && data !== void 0 && data.readOnlySettings) && __jsx(InlineForm, {\n    schema: schema,\n    title: schema.title,\n    onChangeField: (id, value) => {\n      onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n        [id]: value\n      }));\n    },\n    formData: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 11\n    }\n  })));\n};\nexport default FootnotesBlockEdit;","map":{"version":3,"names":["React","FootnotesBlockView","InlineForm","SidebarPortal","FootnoteBlockSchema","schema","Segment","FootnotesBlockEdit","props","selected","block","data","onChangeBlock","properties","instructions","formDescription","__html","readOnlySettings","title","id","value"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-slate-footnote/src/Blocks/Footnote/FootnotesBlockEdit.jsx"],"sourcesContent":["import React from 'react';\nimport FootnotesBlockView from './FootnotesBlockView';\nimport { InlineForm, SidebarPortal } from '@plone/volto/components';\nimport { FootnoteBlockSchema as schema } from './schema';\nimport { Segment } from 'semantic-ui-react';\n\n/**\n * @summary The React component that allows the footnotes block view to be\n * edited using a form in a sidebar portal.\n * @param {object} props Contains the props received by any Edit component of a\n * registered Volto block: `selected`, `block`, `data`, `onChangeBlock` etc.\n */\nconst FootnotesBlockEdit = (props) => {\n  const { selected, block, data, onChangeBlock, properties } = props;\n  // Get editing instructions from block settings or props\n  let instructions = data?.instructions?.data || data?.instructions;\n  if (!instructions || instructions === '<p><br/></p>') {\n    instructions = props.formDescription;\n  }\n\n  return (\n    <>\n      <FootnotesBlockView {...props} properties={properties} />\n      <SidebarPortal selected={selected}>\n        {instructions && (\n          <Segment attached>\n            <div dangerouslySetInnerHTML={{ __html: instructions }} />\n          </Segment>\n        )}\n        {!data?.readOnlySettings && (\n          <InlineForm\n            schema={schema}\n            title={schema.title}\n            onChangeField={(id, value) => {\n              onChangeBlock(block, {\n                ...data,\n                [id]: value,\n              });\n            }}\n            formData={data}\n          />\n        )}\n      </SidebarPortal>\n    </>\n  );\n};\n\nexport default FootnotesBlockEdit;\n"],"mappings":";;;;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,kBAAkB,MAAM,sBAAsB;AACrD,SAASC,UAAU,EAAEC,aAAa,QAAQ,yBAAyB;AACnE,SAASC,mBAAmB,IAAIC,MAAM,QAAQ,UAAU;AACxD,SAASC,OAAO,QAAQ,mBAAmB;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,kBAAkB,GAAIC,KAAK,IAAK;EAAA;EACpC,MAAM;IAAEC,QAAQ;IAAEC,KAAK;IAAEC,IAAI;IAAEC,aAAa;IAAEC;EAAW,CAAC,GAAGL,KAAK;EAClE;EACA,IAAIM,YAAY,GAAG,CAAAH,IAAI,aAAJA,IAAI,6CAAJA,IAAI,CAAEG,YAAY,uDAAlB,mBAAoBH,IAAI,MAAIA,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEG,YAAY;EACjE,IAAI,CAACA,YAAY,IAAIA,YAAY,KAAK,cAAc,EAAE;IACpDA,YAAY,GAAGN,KAAK,CAACO,eAAe;EACtC;EAEA,OACE,4BACE,MAAC,kBAAkB,eAAKP,KAAK;IAAE,UAAU,EAAEK,UAAW;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAG,EACzD,MAAC,aAAa;IAAC,QAAQ,EAAEJ,QAAS;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAC/BK,YAAY,IACX,MAAC,OAAO;IAAC,QAAQ;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACf;IAAK,uBAAuB,EAAE;MAAEE,MAAM,EAAEF;IAAa,CAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAG,CAE7D,EACA,EAACH,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEM,gBAAgB,KACtB,MAAC,UAAU;IACT,MAAM,EAAEZ,MAAO;IACf,KAAK,EAAEA,MAAM,CAACa,KAAM;IACpB,aAAa,EAAE,CAACC,EAAE,EAAEC,KAAK,KAAK;MAC5BR,aAAa,CAACF,KAAK,kCACdC,IAAI;QACP,CAACQ,EAAE,GAAGC;MAAK,GACX;IACJ,CAAE;IACF,QAAQ,EAAET,IAAK;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAElB,CACa,CACf;AAEP,CAAC;AAED,eAAeJ,kBAAkB"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}