{"ast":null,"code":"import _isObject from \"lodash/isObject\";\nimport _find from \"lodash/find\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Widgets/ArrayWidget.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n/**\n * ArrayWidget component.\n * @module components/manage/Widgets/ArrayWidget\n */\n\nimport React, { Component } from 'react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport { getVocabFromHint, getVocabFromField, getVocabFromItems } from '@plone/volto/helpers';\nimport { getVocabulary } from '@plone/volto/actions';\nimport { Option, DropdownIndicator, ClearIndicator, selectTheme, customSelectStyles, MenuList, SortableMultiValue, SortableMultiValueLabel } from '@plone/volto/components/manage/Widgets/SelectStyling';\nimport { FormFieldWrapper } from '@plone/volto/components';\nconst messages = defineMessages({\n  select: {\n    \"id\": \"Select\\u2026\",\n    \"defaultMessage\": \"Select\\u2026\"\n  },\n  no_value: {\n    \"id\": \"No value\",\n    \"defaultMessage\": \"No value\"\n  },\n  no_options: {\n    \"id\": \"No options\",\n    \"defaultMessage\": \"No options\"\n  }\n});\nfunction arrayMove(array, from, to) {\n  const slicedArray = array.slice();\n  slicedArray.splice(to < 0 ? array.length + to : to, 0, slicedArray.splice(from, 1)[0]);\n  return slicedArray;\n}\nfunction normalizeArrayValue(choices, value) {\n  if (!value || !Array.isArray(value)) return [];\n  if (value.length === 0) return value;\n  if (typeof value[0] === 'string') {\n    // raw value like ['foo', 'bar']\n    return value.map(v => {\n      var _find2;\n      return {\n        label: ((_find2 = _find(choices, c => c.value === v)) === null || _find2 === void 0 ? void 0 : _find2.label) || v,\n        value: v\n      };\n    });\n  }\n  if (_isObject(value[0]) && Object.keys(value[0]).includes('token') // Array of objects, w/ label+value\n  ) {\n    return value.map(v => {\n      const item = _find(choices, c => c.value === v.token);\n      return item ? {\n        label: item.label || item.title || item.token,\n        value: v.token\n      } : {\n        // avoid a crash if choices doesn't include this item\n        label: v.label,\n        value: v.token\n      };\n    }).filter(f => !!f);\n  }\n  return [];\n}\nfunction normalizeChoices(choices) {\n  if (Array.isArray(choices) && choices.length && Array.isArray(choices[0])) {\n    return choices.map(option => ({\n      value: option[0],\n      label:\n      // Fix \"None\" on the serializer, to remove when fixed in p.restapi\n      option[1] !== 'None' && option[1] ? option[1] : option[0]\n    }));\n  }\n  return choices;\n}\n\n/**\n * Compare values and return true if equal.\n * Consider upper and lower case.\n * @method compareOption\n * @param {*} inputValue\n * @param {*} option\n * @param {*} accessors\n * @returns {boolean}\n */\nconst compareOption = (inputValue = '', option, accessors) => {\n  const candidate = String(inputValue);\n  const optionValue = String(accessors.getOptionValue(option));\n  const optionLabel = String(accessors.getOptionLabel(option));\n  return optionValue === candidate || optionLabel === candidate;\n};\n\n/**\n * ArrayWidget component class.\n * @class ArrayWidget\n * @extends Component\n *\n * A createable select array widget will be rendered if the named vocabulary is\n * in the widget definition (hint) like:\n *\n * ```\n * list_field_voc_unconstrained = schema.List(\n *     title=u\"List field with values from vocabulary but not constrained to them.\",\n *     description=u\"zope.schema.List\",\n *     value_type=schema.TextLine(),\n *     required=False,\n *     missing_value=[],\n * )\n * directives.widget(\n *     \"list_field_voc_unconstrained\",\n *     AjaxSelectFieldWidget,\n *     vocabulary=\"plone.app.vocabularies.PortalTypes\",\n * )\n * ```\n */\nclass ArrayWidget extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Actions\n   */\n  constructor(props) {\n    super(props);\n    _defineProperty(this, \"onSortEnd\", (selectedOption, {\n      oldIndex,\n      newIndex\n    }) => {\n      const newValue = arrayMove(selectedOption, oldIndex, newIndex);\n      this.handleChange(newValue);\n    });\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    var _this$props$items, _this$props$items$cho, _this$props$choices;\n    if (!((_this$props$items = this.props.items) !== null && _this$props$items !== void 0 && (_this$props$items$cho = _this$props$items.choices) !== null && _this$props$items$cho !== void 0 && _this$props$items$cho.length) && !((_this$props$choices = this.props.choices) !== null && _this$props$choices !== void 0 && _this$props$choices.length) && this.props.vocabBaseUrl) {\n      this.props.getVocabulary({\n        vocabNameOrURL: this.props.vocabBaseUrl,\n        size: -1,\n        subrequest: this.props.lang\n      });\n    }\n  }\n  componentDidUpdate() {\n    var _this$props$items2, _this$props$items2$ch, _this$props$choices2;\n    if (!((_this$props$items2 = this.props.items) !== null && _this$props$items2 !== void 0 && (_this$props$items2$ch = _this$props$items2.choices) !== null && _this$props$items2$ch !== void 0 && _this$props$items2$ch.length) && !((_this$props$choices2 = this.props.choices) !== null && _this$props$choices2 !== void 0 && _this$props$choices2.length) && this.props.vocabLoading === undefined && !this.props.vocabLoaded) {\n      this.props.getVocabulary({\n        vocabNameOrURL: this.props.vocabBaseUrl,\n        size: -1,\n        subrequest: this.props.lang\n      });\n    }\n  }\n\n  /**\n   * Handle the field change, store it in the local state and back to simple\n   * array of tokens for correct serialization\n   * @method handleChange\n   * @param {array} selectedOption The selected options (already aggregated).\n   * @returns {undefined}\n   */\n  handleChange(selectedOption) {\n    this.props.onChange(this.props.id, selectedOption ? selectedOption.map(item => item.value) : null);\n  }\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    var _this$props, _this$props2, _this$props$choices3, _this$props$placehold;\n    const choices = normalizeChoices(((_this$props = this.props) === null || _this$props === void 0 ? void 0 : _this$props.choices) || []);\n    const selectedOption = normalizeArrayValue(choices, this.props.value);\n    const CreatableSelect = this.props.reactSelectCreateable.default;\n    const {\n      SortableContainer\n    } = this.props.reactSortableHOC;\n    const Select = this.props.reactSelect.default;\n    const SortableSelect =\n    // It will be only createable if the named vocabulary is in the widget definition\n    // (hint) like:\n    // list_field_voc_unconstrained = schema.List(\n    //     title=u\"List field with values from vocabulary but not constrained to them.\",\n    //     description=u\"zope.schema.List\",\n    //     value_type=schema.TextLine(),\n    //     required=False,\n    //     missing_value=[],\n    // )\n    // directives.widget(\n    //     \"list_field_voc_unconstrained\",\n    //     AjaxSelectFieldWidget,\n    //     vocabulary=\"plone.app.vocabularies.PortalTypes\",\n    // )\n    (_this$props2 = this.props) !== null && _this$props2 !== void 0 && _this$props2.choices && !getVocabFromHint(this.props) && !this.props.creatable ? SortableContainer(Select) : SortableContainer(CreatableSelect);\n    return __jsx(FormFieldWrapper, _extends({}, this.props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 7\n      }\n    }), __jsx(SortableSelect, {\n      useDragHandle: true\n      // react-sortable-hoc props:\n      ,\n      axis: \"xy\",\n      onSortEnd: this.onSortEnd,\n      distance: 4\n      // small fix for https://github.com/clauderic/react-sortable-hoc/pull/352:\n      ,\n      getHelperDimensions: ({\n        node\n      }) => node.getBoundingClientRect(),\n      id: `field-${this.props.id}`,\n      key: this.props.id,\n      isDisabled: this.props.disabled || this.props.isDisabled,\n      className: \"react-select-container\",\n      classNamePrefix: \"react-select\",\n      options: this.props.vocabBaseUrl ? choices : this.props.choices ? [...choices, ...(this.props.noValueOption && !this.props.default ? [{\n        label: this.props.intl.formatMessage(messages.no_value),\n        value: 'no-value'\n      }] : [])] : [{\n        label: this.props.intl.formatMessage(messages.no_value),\n        value: 'no-value'\n      }],\n      styles: customSelectStyles,\n      theme: selectTheme,\n      components: _objectSpread(_objectSpread({}, ((_this$props$choices3 = this.props.choices) === null || _this$props$choices3 === void 0 ? void 0 : _this$props$choices3.length) > 25 && {\n        MenuList\n      }), {}, {\n        MultiValue: SortableMultiValue,\n        MultiValueLabel: SortableMultiValueLabel,\n        DropdownIndicator,\n        ClearIndicator,\n        Option\n      }),\n      value: selectedOption || [],\n      placeholder: (_this$props$placehold = this.props.placeholder) !== null && _this$props$placehold !== void 0 ? _this$props$placehold : this.props.intl.formatMessage(messages.select),\n      onChange: this.handleChange,\n      isValidNewOption: (inputValue, selectValue, selectOptions, accessors) => !(!inputValue || selectValue.some(option => compareOption(inputValue, option, accessors)) || selectOptions.some(option => compareOption(inputValue, option, accessors))),\n      isClearable: true,\n      isMulti: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 9\n      }\n    }));\n  }\n}\n_defineProperty(ArrayWidget, \"propTypes\", {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  required: PropTypes.bool,\n  error: PropTypes.arrayOf(PropTypes.string),\n  getVocabulary: PropTypes.func.isRequired,\n  choices: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.object, PropTypes.array])),\n  vocabLoading: PropTypes.bool,\n  vocabLoaded: PropTypes.bool,\n  items: PropTypes.shape({\n    vocabulary: PropTypes.object\n  }),\n  widgetOptions: PropTypes.shape({\n    vocabulary: PropTypes.object\n  }),\n  value: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.object, PropTypes.string])),\n  placeholder: PropTypes.string,\n  onChange: PropTypes.func.isRequired,\n  wrapped: PropTypes.bool,\n  creatable: PropTypes.bool //if widget has no vocab and you want to be creatable\n});\n_defineProperty(ArrayWidget, \"defaultProps\", {\n  description: null,\n  required: false,\n  items: {\n    vocabulary: null\n  },\n  widgetOptions: {\n    vocabulary: null\n  },\n  error: [],\n  choices: [],\n  value: null,\n  creatable: false\n});\nexport const ArrayWidgetComponent = injectIntl(ArrayWidget);\nexport default compose(injectIntl, injectLazyLibs(['reactSelect', 'reactSelectCreateable', 'reactSortableHOC']), connect((state, props) => {\n  var _state$vocabularies, _state$vocabularies$v, _state$vocabularies$v2, _props$items;\n  const vocabBaseUrl = getVocabFromHint(props) || getVocabFromField(props) || getVocabFromItems(props);\n  const vocabState = (_state$vocabularies = state.vocabularies) === null || _state$vocabularies === void 0 ? void 0 : (_state$vocabularies$v = _state$vocabularies[vocabBaseUrl]) === null || _state$vocabularies$v === void 0 ? void 0 : (_state$vocabularies$v2 = _state$vocabularies$v.subrequests) === null || _state$vocabularies$v2 === void 0 ? void 0 : _state$vocabularies$v2[state.intl.locale];\n\n  // If the schema already has the choices in it, then do not try to get the vocab,\n  // even if there is one\n  if ((_props$items = props.items) !== null && _props$items !== void 0 && _props$items.choices) {\n    return {\n      choices: props.items.choices,\n      lang: state.intl.locale\n    };\n  } else if (vocabState) {\n    return {\n      choices: vocabState.items,\n      vocabBaseUrl,\n      vocabLoading: vocabState.loading,\n      vocabLoaded: vocabState.loaded,\n      lang: state.intl.locale\n    };\n  }\n  return {\n    vocabBaseUrl,\n    lang: state.intl.locale\n  };\n}, {\n  getVocabulary\n}))(ArrayWidget);","map":{"version":3,"names":["React","Component","defineMessages","injectIntl","PropTypes","compose","connect","injectLazyLibs","getVocabFromHint","getVocabFromField","getVocabFromItems","getVocabulary","Option","DropdownIndicator","ClearIndicator","selectTheme","customSelectStyles","MenuList","SortableMultiValue","SortableMultiValueLabel","FormFieldWrapper","messages","select","no_value","no_options","arrayMove","array","from","to","slicedArray","slice","splice","length","normalizeArrayValue","choices","value","Array","isArray","map","v","label","c","Object","keys","includes","item","token","title","filter","f","normalizeChoices","option","compareOption","inputValue","accessors","candidate","String","optionValue","getOptionValue","optionLabel","getOptionLabel","ArrayWidget","constructor","props","selectedOption","oldIndex","newIndex","newValue","handleChange","bind","componentDidMount","items","vocabBaseUrl","vocabNameOrURL","size","subrequest","lang","componentDidUpdate","vocabLoading","undefined","vocabLoaded","onChange","id","render","CreatableSelect","reactSelectCreateable","default","SortableContainer","reactSortableHOC","Select","reactSelect","SortableSelect","creatable","onSortEnd","node","getBoundingClientRect","disabled","isDisabled","noValueOption","intl","formatMessage","MultiValue","MultiValueLabel","placeholder","selectValue","selectOptions","some","string","isRequired","description","required","bool","error","arrayOf","func","oneOfType","object","shape","vocabulary","widgetOptions","wrapped","ArrayWidgetComponent","state","vocabState","vocabularies","subrequests","locale","loading","loaded"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Widgets/ArrayWidget.jsx"],"sourcesContent":["/**\n * ArrayWidget component.\n * @module components/manage/Widgets/ArrayWidget\n */\n\nimport React, { Component } from 'react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport { find, isObject } from 'lodash';\n\nimport {\n  getVocabFromHint,\n  getVocabFromField,\n  getVocabFromItems,\n} from '@plone/volto/helpers';\nimport { getVocabulary } from '@plone/volto/actions';\n\nimport {\n  Option,\n  DropdownIndicator,\n  ClearIndicator,\n  selectTheme,\n  customSelectStyles,\n  MenuList,\n  SortableMultiValue,\n  SortableMultiValueLabel,\n} from '@plone/volto/components/manage/Widgets/SelectStyling';\n\nimport { FormFieldWrapper } from '@plone/volto/components';\n\nconst messages = defineMessages({\n  select: {\n    id: 'Select…',\n    defaultMessage: 'Select…',\n  },\n  no_value: {\n    id: 'No value',\n    defaultMessage: 'No value',\n  },\n  no_options: {\n    id: 'No options',\n    defaultMessage: 'No options',\n  },\n});\n\nfunction arrayMove(array, from, to) {\n  const slicedArray = array.slice();\n  slicedArray.splice(\n    to < 0 ? array.length + to : to,\n    0,\n    slicedArray.splice(from, 1)[0],\n  );\n  return slicedArray;\n}\n\nfunction normalizeArrayValue(choices, value) {\n  if (!value || !Array.isArray(value)) return [];\n  if (value.length === 0) return value;\n\n  if (typeof value[0] === 'string') {\n    // raw value like ['foo', 'bar']\n    return value.map((v) => {\n      return {\n        label: find(choices, (c) => c.value === v)?.label || v,\n        value: v,\n      };\n    });\n  }\n\n  if (\n    isObject(value[0]) &&\n    Object.keys(value[0]).includes('token') // Array of objects, w/ label+value\n  ) {\n    return value\n      .map((v) => {\n        const item = find(choices, (c) => c.value === v.token);\n        return item\n          ? {\n              label: item.label || item.title || item.token,\n              value: v.token,\n            }\n          : {\n              // avoid a crash if choices doesn't include this item\n              label: v.label,\n              value: v.token,\n            };\n      })\n      .filter((f) => !!f);\n  }\n\n  return [];\n}\n\nfunction normalizeChoices(choices) {\n  if (Array.isArray(choices) && choices.length && Array.isArray(choices[0])) {\n    return choices.map((option) => ({\n      value: option[0],\n      label:\n        // Fix \"None\" on the serializer, to remove when fixed in p.restapi\n        option[1] !== 'None' && option[1] ? option[1] : option[0],\n    }));\n  }\n\n  return choices;\n}\n\n/**\n * Compare values and return true if equal.\n * Consider upper and lower case.\n * @method compareOption\n * @param {*} inputValue\n * @param {*} option\n * @param {*} accessors\n * @returns {boolean}\n */\nconst compareOption = (inputValue = '', option, accessors) => {\n  const candidate = String(inputValue);\n  const optionValue = String(accessors.getOptionValue(option));\n  const optionLabel = String(accessors.getOptionLabel(option));\n  return optionValue === candidate || optionLabel === candidate;\n};\n\n/**\n * ArrayWidget component class.\n * @class ArrayWidget\n * @extends Component\n *\n * A createable select array widget will be rendered if the named vocabulary is\n * in the widget definition (hint) like:\n *\n * ```\n * list_field_voc_unconstrained = schema.List(\n *     title=u\"List field with values from vocabulary but not constrained to them.\",\n *     description=u\"zope.schema.List\",\n *     value_type=schema.TextLine(),\n *     required=False,\n *     missing_value=[],\n * )\n * directives.widget(\n *     \"list_field_voc_unconstrained\",\n *     AjaxSelectFieldWidget,\n *     vocabulary=\"plone.app.vocabularies.PortalTypes\",\n * )\n * ```\n */\nclass ArrayWidget extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string,\n    required: PropTypes.bool,\n    error: PropTypes.arrayOf(PropTypes.string),\n    getVocabulary: PropTypes.func.isRequired,\n    choices: PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    ),\n    vocabLoading: PropTypes.bool,\n    vocabLoaded: PropTypes.bool,\n    items: PropTypes.shape({\n      vocabulary: PropTypes.object,\n    }),\n    widgetOptions: PropTypes.shape({\n      vocabulary: PropTypes.object,\n    }),\n    value: PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n    ),\n    placeholder: PropTypes.string,\n    onChange: PropTypes.func.isRequired,\n    wrapped: PropTypes.bool,\n    creatable: PropTypes.bool, //if widget has no vocab and you want to be creatable\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    description: null,\n    required: false,\n    items: {\n      vocabulary: null,\n    },\n    widgetOptions: {\n      vocabulary: null,\n    },\n    error: [],\n    choices: [],\n    value: null,\n    creatable: false,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Actions\n   */\n  constructor(props) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    if (\n      !this.props.items?.choices?.length &&\n      !this.props.choices?.length &&\n      this.props.vocabBaseUrl\n    ) {\n      this.props.getVocabulary({\n        vocabNameOrURL: this.props.vocabBaseUrl,\n        size: -1,\n        subrequest: this.props.lang,\n      });\n    }\n  }\n\n  componentDidUpdate() {\n    if (\n      !this.props.items?.choices?.length &&\n      !this.props.choices?.length &&\n      this.props.vocabLoading === undefined &&\n      !this.props.vocabLoaded\n    ) {\n      this.props.getVocabulary({\n        vocabNameOrURL: this.props.vocabBaseUrl,\n        size: -1,\n        subrequest: this.props.lang,\n      });\n    }\n  }\n\n  /**\n   * Handle the field change, store it in the local state and back to simple\n   * array of tokens for correct serialization\n   * @method handleChange\n   * @param {array} selectedOption The selected options (already aggregated).\n   * @returns {undefined}\n   */\n  handleChange(selectedOption) {\n    this.props.onChange(\n      this.props.id,\n      selectedOption ? selectedOption.map((item) => item.value) : null,\n    );\n  }\n\n  onSortEnd = (selectedOption, { oldIndex, newIndex }) => {\n    const newValue = arrayMove(selectedOption, oldIndex, newIndex);\n\n    this.handleChange(newValue);\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const choices = normalizeChoices(this.props?.choices || []);\n    const selectedOption = normalizeArrayValue(choices, this.props.value);\n\n    const CreatableSelect = this.props.reactSelectCreateable.default;\n    const { SortableContainer } = this.props.reactSortableHOC;\n    const Select = this.props.reactSelect.default;\n    const SortableSelect =\n      // It will be only createable if the named vocabulary is in the widget definition\n      // (hint) like:\n      // list_field_voc_unconstrained = schema.List(\n      //     title=u\"List field with values from vocabulary but not constrained to them.\",\n      //     description=u\"zope.schema.List\",\n      //     value_type=schema.TextLine(),\n      //     required=False,\n      //     missing_value=[],\n      // )\n      // directives.widget(\n      //     \"list_field_voc_unconstrained\",\n      //     AjaxSelectFieldWidget,\n      //     vocabulary=\"plone.app.vocabularies.PortalTypes\",\n      // )\n      this.props?.choices &&\n      !getVocabFromHint(this.props) &&\n      !this.props.creatable\n        ? SortableContainer(Select)\n        : SortableContainer(CreatableSelect);\n\n    return (\n      <FormFieldWrapper {...this.props}>\n        <SortableSelect\n          useDragHandle\n          // react-sortable-hoc props:\n          axis=\"xy\"\n          onSortEnd={this.onSortEnd}\n          distance={4}\n          // small fix for https://github.com/clauderic/react-sortable-hoc/pull/352:\n          getHelperDimensions={({ node }) => node.getBoundingClientRect()}\n          id={`field-${this.props.id}`}\n          key={this.props.id}\n          isDisabled={this.props.disabled || this.props.isDisabled}\n          className=\"react-select-container\"\n          classNamePrefix=\"react-select\"\n          options={\n            this.props.vocabBaseUrl\n              ? choices\n              : this.props.choices\n              ? [\n                  ...choices,\n                  ...(this.props.noValueOption && !this.props.default\n                    ? [\n                        {\n                          label: this.props.intl.formatMessage(\n                            messages.no_value,\n                          ),\n                          value: 'no-value',\n                        },\n                      ]\n                    : []),\n                ]\n              : [\n                  {\n                    label: this.props.intl.formatMessage(messages.no_value),\n                    value: 'no-value',\n                  },\n                ]\n          }\n          styles={customSelectStyles}\n          theme={selectTheme}\n          components={{\n            ...(this.props.choices?.length > 25 && {\n              MenuList,\n            }),\n            MultiValue: SortableMultiValue,\n            MultiValueLabel: SortableMultiValueLabel,\n            DropdownIndicator,\n            ClearIndicator,\n            Option,\n          }}\n          value={selectedOption || []}\n          placeholder={\n            this.props.placeholder ??\n            this.props.intl.formatMessage(messages.select)\n          }\n          onChange={this.handleChange}\n          isValidNewOption={(\n            inputValue,\n            selectValue,\n            selectOptions,\n            accessors,\n          ) =>\n            !(\n              !inputValue ||\n              selectValue.some((option) =>\n                compareOption(inputValue, option, accessors),\n              ) ||\n              selectOptions.some((option) =>\n                compareOption(inputValue, option, accessors),\n              )\n            )\n          }\n          isClearable\n          isMulti\n        />\n      </FormFieldWrapper>\n    );\n  }\n}\n\nexport const ArrayWidgetComponent = injectIntl(ArrayWidget);\n\nexport default compose(\n  injectIntl,\n  injectLazyLibs(['reactSelect', 'reactSelectCreateable', 'reactSortableHOC']),\n  connect(\n    (state, props) => {\n      const vocabBaseUrl =\n        getVocabFromHint(props) ||\n        getVocabFromField(props) ||\n        getVocabFromItems(props);\n\n      const vocabState =\n        state.vocabularies?.[vocabBaseUrl]?.subrequests?.[state.intl.locale];\n\n      // If the schema already has the choices in it, then do not try to get the vocab,\n      // even if there is one\n      if (props.items?.choices) {\n        return {\n          choices: props.items.choices,\n          lang: state.intl.locale,\n        };\n      } else if (vocabState) {\n        return {\n          choices: vocabState.items,\n          vocabBaseUrl,\n          vocabLoading: vocabState.loading,\n          vocabLoaded: vocabState.loaded,\n          lang: state.intl.locale,\n        };\n      }\n      return { vocabBaseUrl, lang: state.intl.locale };\n    },\n    { getVocabulary },\n  ),\n)(ArrayWidget);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Select…","defaultMessage":"Select…"},{"id":"No value","defaultMessage":"No value"},{"id":"No options","defaultMessage":"No options"}]}},"sourceType":"module","externalDependencies":[]}