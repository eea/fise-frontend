{"ast":null,"code":"import _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _join from \"lodash/join\";\nimport _nth from \"lodash/nth\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Controlpanels/ContentTypeLayout.jsx\";\nvar __jsx = React.createElement;\n/**\n * Content Type component.\n * @module components/manage/Controlpanels/ContentTypeLayout\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { getParentUrl, hasBlocksData, getBlocksFieldname, getBlocksLayoutFieldname } from '@plone/volto/helpers';\nimport { Portal } from 'react-portal';\nimport { Button, Segment } from 'semantic-ui-react';\nimport { toast } from 'react-toastify';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport { Error, Form, Icon, Toolbar, Sidebar, Toast } from '@plone/volto/components';\nimport { getSchema, updateSchema, getControlpanel, updateControlpanel } from '@plone/volto/actions';\nimport saveSVG from '@plone/volto/icons/save.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport backSVG from '@plone/volto/icons/back.svg';\nvar messages = defineMessages({\n  changesSaved: {\n    \"id\": \"Changes saved.\",\n    \"defaultMessage\": \"Changes saved.\"\n  },\n  back: {\n    \"id\": \"Back\",\n    \"defaultMessage\": \"Back\"\n  },\n  save: {\n    \"id\": \"Save\",\n    \"defaultMessage\": \"Save\"\n  },\n  cancel: {\n    \"id\": \"Cancel\",\n    \"defaultMessage\": \"Cancel\"\n  },\n  info: {\n    \"id\": \"Info\",\n    \"defaultMessage\": \"Info\"\n  },\n  enable: {\n    \"id\": \"Enable editable Blocks\",\n    \"defaultMessage\": \"Enable editable Blocks\"\n  }\n});\n\n/**\n * ContentTypeLayout class.\n * @class ContentTypeLayout\n * @extends Component\n */\nvar ContentTypeLayout = /*#__PURE__*/function (_Component) {\n  _inherits(ContentTypeLayout, _Component);\n  var _super = _createSuper(ContentTypeLayout);\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ContentTypeLayout\n   */\n  function ContentTypeLayout(props) {\n    var _this;\n    _classCallCheck(this, ContentTypeLayout);\n    _this = _super.call(this, props);\n    _defineProperty(_assertThisInitialized(_this), \"onSubmit\", function (data) {\n      var schema = {\n        properties: {}\n      };\n      Object.keys(data).filter(function (k) {\n        return data[k];\n      }).forEach(function (k) {\n        return schema.properties[k] = {\n          \"default\": data[k]\n        };\n      });\n      _this.props.updateSchema(_this.props.id, schema);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onCancel\", function () {\n      var url = getParentUrl(_this.props.pathname);\n      _this.props.history.push(getParentUrl(url));\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onEnableBlocks\", function () {\n      var _properties$blocksFie, _properties$blocksLay;\n      var _this$props$schema$pr = _this.props.schema.properties,\n        properties = _this$props$schema$pr === void 0 ? {} : _this$props$schema$pr;\n      var blocksFieldName = getBlocksFieldname(properties);\n      var blocksLayoutFieldname = getBlocksLayoutFieldname(properties);\n      var schema = {\n        fieldsets: [{\n          id: 'layout',\n          title: 'Layout',\n          fields: ['blocks', 'blocks_layout']\n        }],\n        properties: {\n          blocks: {\n            title: 'Blocks',\n            type: 'dict',\n            widget: 'json',\n            factory: 'JSONField',\n            \"default\": ((_properties$blocksFie = properties[blocksFieldName]) === null || _properties$blocksFie === void 0 ? void 0 : _properties$blocksFie[\"default\"]) || {}\n          },\n          blocks_layout: {\n            title: 'Blocks Layout',\n            type: 'dict',\n            widget: 'json',\n            factory: 'JSONField',\n            \"default\": ((_properties$blocksLay = properties[blocksLayoutFieldname]) === null || _properties$blocksLay === void 0 ? void 0 : _properties$blocksLay[\"default\"]) || {\n              items: []\n            }\n          }\n        }\n      };\n      _this.props.updateSchema(_this.props.id, schema);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onDisableBlocksBehavior\", function () {\n      var _this$props$updateCon;\n      _this.props.updateControlpanel(_this.props.controlpanel['@id'], (_this$props$updateCon = {}, _defineProperty(_this$props$updateCon, _this.state.readOnlyBehavior, false), _defineProperty(_this$props$updateCon, 'volto.blocks.editable.layout', true), _this$props$updateCon));\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onEnableBlocksBehavior\", function () {\n      _this.props.updateControlpanel(_this.props.controlpanel['@id'], {\n        'volto.blocks.editable.layout': true\n      });\n    });\n    _this.state = {\n      visual: false,\n      content: null,\n      readOnlyBehavior: null,\n      error: null,\n      isClient: false\n    };\n    _this.form = /*#__PURE__*/React.createRef();\n    return _this;\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  _createClass(ContentTypeLayout, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.getControlpanel(_join([this.props.parent, this.props.id], '/'));\n      this.props.getSchema(this.props.id);\n      this.setState({\n        isClient: true\n      });\n    }\n\n    /**\n     * Component will receive props\n     * @method componentWillReceiveProps\n     * @param {Object} nextProps Next properties\n     * @returns {undefined}\n     */\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      // Control Panel GET\n      if (this.props.cpanelRequest.get.loading && nextProps.cpanelRequest.get.error) {\n        this.setState({\n          error: nextProps.cpanelRequest.get.error\n        });\n      }\n\n      // Schema GET\n      if (this.props.schemaRequest.loading && nextProps.schemaRequest.loaded) {\n        var _nextProps$schema;\n        var properties = ((_nextProps$schema = nextProps.schema) === null || _nextProps$schema === void 0 ? void 0 : _nextProps$schema.properties) || {};\n        var content = {};\n        for (var key in properties) {\n          var value = properties[key][\"default\"];\n          if (value) {\n            content[key] = value;\n          }\n        }\n        if (hasBlocksData(properties)) {\n          var _properties$blocksFie2, _properties$blocksLay2, _properties$blocksFie3;\n          this.setState({\n            visual: true\n          });\n          var blocksFieldName = getBlocksFieldname(properties);\n          var blocksLayoutFieldname = getBlocksLayoutFieldname(properties);\n          content[blocksFieldName] = ((_properties$blocksFie2 = properties[blocksFieldName]) === null || _properties$blocksFie2 === void 0 ? void 0 : _properties$blocksFie2[\"default\"]) || {};\n          content[blocksLayoutFieldname] = ((_properties$blocksLay2 = properties[blocksLayoutFieldname]) === null || _properties$blocksLay2 === void 0 ? void 0 : _properties$blocksLay2[\"default\"]) || {\n            items: []\n          };\n          var blocksBehavior = ((_properties$blocksFie3 = properties[blocksFieldName]) === null || _properties$blocksFie3 === void 0 ? void 0 : _properties$blocksFie3.behavior) || '';\n          this.setState({\n            readOnlyBehavior: !blocksBehavior.includes('generated') ? blocksBehavior : ''\n          });\n        } else {\n          this.setState({\n            visual: false,\n            readOnlyBehavior: ''\n          });\n        }\n        this.setState({\n          content: content\n        });\n      }\n\n      // Schema updated\n      if (this.props.schemaRequest.update.loading && nextProps.schemaRequest.update.loaded) {\n        this.props.getSchema(this.props.id);\n        toast.info(__jsx(Toast, {\n          info: true,\n          title: this.props.intl.formatMessage(messages.info),\n          content: this.props.intl.formatMessage(messages.changesSaved),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 9\n          }\n        }));\n      }\n\n      // Blocks behavior disabled\n      if (this.props.cpanelRequest.update.loading && nextProps.cpanelRequest.update.loaded) {\n        this.onEnableBlocks();\n      }\n    }\n\n    /**\n     * Submit handler\n     * @method onSubmit\n     * @param {object} data Form data.\n     * @returns {undefined}\n     */\n  }, {\n    key: \"render\",\n    value:\n    /**\n     * Render method.\n     * @method render\n     * @returns {string} Markup for the component.\n     */\n    function render() {\n      var _this2 = this,\n        _this$props$schema,\n        _this$props$schema2;\n      // Error\n      if (this.state.error) {\n        return __jsx(Error, {\n          error: this.state.error,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 14\n          }\n        });\n      }\n      if (!this.state.visual) {\n        var _this$props, _this$props$controlpa;\n        // Still loading\n        if (!this.state.content) {\n          return __jsx(\"div\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 318,\n              columnNumber: 16\n            }\n          });\n        }\n\n        // Blocks are not enabled\n        return __jsx(React.Fragment, null, __jsx(Segment, {\n          placeholder: true,\n          id: \"page-controlpanel-layout\",\n          className: \"ui container center aligned\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 11\n          }\n        }, __jsx(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 329,\n            columnNumber: 13\n          }\n        }, __jsx(FormattedMessage, {\n          id: \"Can not edit Layout for <strong>{type}</strong> content-type as it doesn't have support for <strong>Volto Blocks</strong> enabled\",\n          defaultMessage: \"Can not edit Layout for <strong>{type}</strong> content-type as it doesn't have support for <strong>Volto Blocks</strong> enabled\",\n          values: {\n            strong: function strong() {\n              for (var _len = arguments.length, chunks = new Array(_len), _key = 0; _key < _len; _key++) {\n                chunks[_key] = arguments[_key];\n              }\n              return __jsx(\"strong\", {\n                __self: _this2,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 334,\n                  columnNumber: 42\n                }\n              }, chunks);\n            },\n            type: ((_this$props = this.props) === null || _this$props === void 0 ? void 0 : (_this$props$controlpa = _this$props.controlpanel) === null || _this$props$controlpa === void 0 ? void 0 : _this$props$controlpa.title) || this.props.id\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 15\n          }\n        })), __jsx(\"div\", {\n          className: \"ui divider\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 13\n          }\n        }), __jsx(Button, {\n          primary: true,\n          onClick: this.onEnableBlocksBehavior,\n          content: this.props.intl.formatMessage(messages.enable),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 13\n          }\n        })), __jsx(Portal, {\n          node: this.state.isClient && document.getElementById('toolbar'),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 11\n          }\n        }, __jsx(Toolbar, {\n          pathname: this.props.pathname,\n          hideDefaultViewButtons: true,\n          inner: __jsx(React.Fragment, null, __jsx(Link, {\n            className: \"item\",\n            to: \"#\",\n            onClick: function onClick() {\n              return _this2.onCancel();\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 19\n            }\n          }, __jsx(Icon, {\n            name: backSVG,\n            size: \"30px\",\n            className: \"contents circled\",\n            title: this.props.intl.formatMessage(messages.back),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 355,\n              columnNumber: 21\n            }\n          }))),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 13\n          }\n        })));\n      }\n      if (this.state.readOnlyBehavior) {\n        var _this$props2, _this$props2$controlp;\n        return __jsx(React.Fragment, null, __jsx(Segment, {\n          placeholder: true,\n          id: \"page-controlpanel-layout\",\n          className: \"ui container center aligned\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 11\n          }\n        }, __jsx(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 13\n          }\n        }, __jsx(FormattedMessage, {\n          id: \"Can not edit Layout for <strong>{type}</strong> content-type as the <strong>Blocks behavior</strong> is enabled and <strong>read-only</strong>\",\n          defaultMessage: \"Can not edit Layout for <strong>{type}</strong> content-type as the <strong>Blocks behavior</strong> is enabled and <strong>read-only</strong>\",\n          values: {\n            strong: function strong() {\n              for (var _len2 = arguments.length, chunks = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n                chunks[_key2] = arguments[_key2];\n              }\n              return __jsx(\"strong\", {\n                __self: _this2,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 383,\n                  columnNumber: 42\n                }\n              }, chunks);\n            },\n            type: ((_this$props2 = this.props) === null || _this$props2 === void 0 ? void 0 : (_this$props2$controlp = _this$props2.controlpanel) === null || _this$props2$controlp === void 0 ? void 0 : _this$props2$controlp.title) || this.props.id\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 379,\n            columnNumber: 15\n          }\n        })), __jsx(\"div\", {\n          className: \"ui divider\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 13\n          }\n        }), __jsx(Button, {\n          primary: true,\n          onClick: this.onDisableBlocksBehavior,\n          content: this.props.intl.formatMessage(messages.enable),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 389,\n            columnNumber: 13\n          }\n        })), __jsx(Portal, {\n          node: this.state.isClient && document.getElementById('toolbar'),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 395,\n            columnNumber: 11\n          }\n        }, __jsx(Toolbar, {\n          pathname: this.props.pathname,\n          hideDefaultViewButtons: true,\n          inner: __jsx(React.Fragment, null, __jsx(Link, {\n            className: \"item\",\n            to: \"#\",\n            onClick: function onClick() {\n              return _this2.onCancel();\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 403,\n              columnNumber: 19\n            }\n          }, __jsx(Icon, {\n            name: backSVG,\n            size: \"30px\",\n            className: \"contents circled\",\n            title: this.props.intl.formatMessage(messages.back),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 404,\n              columnNumber: 21\n            }\n          }))),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 398,\n            columnNumber: 13\n          }\n        })));\n      }\n\n      // Render layout editor\n      var blocksFieldName = getBlocksFieldname(((_this$props$schema = this.props.schema) === null || _this$props$schema === void 0 ? void 0 : _this$props$schema.properties) || {});\n      var blocksLayoutFieldname = getBlocksLayoutFieldname(((_this$props$schema2 = this.props.schema) === null || _this$props$schema2 === void 0 ? void 0 : _this$props$schema2.properties) || {});\n      return __jsx(\"div\", {\n        id: \"page-controlpanel-layout\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 7\n        }\n      }, __jsx(Form, {\n        isAdminForm: true,\n        ref: this.form,\n        schema: {\n          fieldsets: [{\n            id: 'layout',\n            title: 'Layout',\n            fields: [blocksFieldName, blocksLayoutFieldname]\n          }],\n          properties: _objectSpread(_objectSpread({}, this.props.schema.properties[blocksFieldName]), this.props.schema.properties[blocksLayoutFieldname]),\n          required: []\n        },\n        formData: this.state.content,\n        onSubmit: this.onSubmit,\n        onCancel: this.onCancel,\n        pathname: this.props.pathname,\n        visual: this.state.visual,\n        hideActions: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 9\n        }\n      }), __jsx(Portal, {\n        node: this.state.isClient && document.getElementById('sidebar'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 452,\n          columnNumber: 9\n        }\n      }, __jsx(Sidebar, {\n        settingsTab: true,\n        documentTab: false,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 11\n        }\n      })), __jsx(Portal, {\n        node: this.state.isClient && document.getElementById('toolbar'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 9\n        }\n      }, __jsx(Toolbar, {\n        pathname: this.props.pathname,\n        hideDefaultViewButtons: true,\n        inner: __jsx(React.Fragment, null, __jsx(Button, {\n          id: \"toolbar-save\",\n          className: \"save\",\n          \"aria-label\": this.props.intl.formatMessage(messages.save),\n          onClick: function onClick() {\n            return _this2.form.current.onSubmit();\n          },\n          disabled: this.props.schemaRequest.update.loading,\n          loading: this.props.schemaRequest.update.loading,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 465,\n            columnNumber: 17\n          }\n        }, __jsx(Icon, {\n          name: saveSVG,\n          className: \"circled\",\n          size: \"30px\",\n          title: this.props.intl.formatMessage(messages.save),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 473,\n            columnNumber: 19\n          }\n        })), __jsx(Button, {\n          className: \"cancel\",\n          \"aria-label\": this.props.intl.formatMessage(messages.cancel),\n          onClick: function onClick() {\n            return _this2.onCancel();\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 480,\n            columnNumber: 17\n          }\n        }, __jsx(Icon, {\n          name: clearSVG,\n          className: \"circled\",\n          size: \"30px\",\n          title: this.props.intl.formatMessage(messages.cancel),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 485,\n            columnNumber: 19\n          }\n        }))),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 11\n        }\n      })));\n    }\n  }]);\n  return ContentTypeLayout;\n}(Component);\n_defineProperty(ContentTypeLayout, \"propTypes\", {\n  updateControlpanel: PropTypes.func.isRequired,\n  getControlpanel: PropTypes.func.isRequired,\n  getSchema: PropTypes.func.isRequired,\n  updateSchema: PropTypes.func.isRequired,\n  id: PropTypes.string.isRequired,\n  parent: PropTypes.string.isRequired,\n  pathname: PropTypes.string.isRequired,\n  schemaRequest: PropTypes.objectOf(PropTypes.any).isRequired,\n  cpanelRequest: PropTypes.objectOf(PropTypes.any).isRequired,\n  schema: PropTypes.objectOf(PropTypes.any),\n  controlpanel: PropTypes.shape({\n    '@id': PropTypes.string,\n    data: PropTypes.object,\n    schema: PropTypes.object,\n    title: PropTypes.string\n  })\n});\n_defineProperty(ContentTypeLayout, \"defaultProps\", {\n  schema: {},\n  controlpanel: null\n});\nexport default compose(injectIntl, connect(function (state, props) {\n  return {\n    schema: state.schema.schema,\n    schemaRequest: state.schema,\n    cpanelRequest: state.controlpanels,\n    controlpanel: state.controlpanels.controlpanel,\n    pathname: props.location.pathname,\n    id: _nth(props.location.pathname.split('/'), -2),\n    parent: _nth(props.location.pathname.split('/'), -3)\n  };\n}, {\n  getSchema: getSchema,\n  updateSchema: updateSchema,\n  getControlpanel: getControlpanel,\n  updateControlpanel: updateControlpanel\n}))(ContentTypeLayout);","map":{"version":3,"names":["React","Component","PropTypes","connect","compose","Link","getParentUrl","hasBlocksData","getBlocksFieldname","getBlocksLayoutFieldname","Portal","Button","Segment","toast","defineMessages","injectIntl","FormattedMessage","Error","Form","Icon","Toolbar","Sidebar","Toast","getSchema","updateSchema","getControlpanel","updateControlpanel","saveSVG","clearSVG","backSVG","messages","changesSaved","back","save","cancel","info","enable","ContentTypeLayout","props","data","schema","properties","Object","keys","filter","k","forEach","id","url","pathname","history","push","blocksFieldName","blocksLayoutFieldname","fieldsets","title","fields","blocks","type","widget","factory","blocks_layout","items","controlpanel","state","readOnlyBehavior","visual","content","error","isClient","form","createRef","parent","setState","nextProps","cpanelRequest","get","loading","schemaRequest","loaded","key","value","blocksBehavior","behavior","includes","update","intl","formatMessage","onEnableBlocks","strong","chunks","onEnableBlocksBehavior","document","getElementById","onCancel","onDisableBlocksBehavior","required","onSubmit","current","func","isRequired","string","objectOf","any","shape","object","controlpanels","location","split"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Controlpanels/ContentTypeLayout.jsx"],"sourcesContent":["/**\n * Content Type component.\n * @module components/manage/Controlpanels/ContentTypeLayout\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport {\n  getParentUrl,\n  hasBlocksData,\n  getBlocksFieldname,\n  getBlocksLayoutFieldname,\n} from '@plone/volto/helpers';\nimport { Portal } from 'react-portal';\nimport { Button, Segment } from 'semantic-ui-react';\nimport { toast } from 'react-toastify';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport { nth, join } from 'lodash';\nimport {\n  Error,\n  Form,\n  Icon,\n  Toolbar,\n  Sidebar,\n  Toast,\n} from '@plone/volto/components';\nimport {\n  getSchema,\n  updateSchema,\n  getControlpanel,\n  updateControlpanel,\n} from '@plone/volto/actions';\n\nimport saveSVG from '@plone/volto/icons/save.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport backSVG from '@plone/volto/icons/back.svg';\n\nconst messages = defineMessages({\n  changesSaved: {\n    id: 'Changes saved.',\n    defaultMessage: 'Changes saved.',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  save: {\n    id: 'Save',\n    defaultMessage: 'Save',\n  },\n  cancel: {\n    id: 'Cancel',\n    defaultMessage: 'Cancel',\n  },\n  info: {\n    id: 'Info',\n    defaultMessage: 'Info',\n  },\n  enable: {\n    id: 'Enable editable Blocks',\n    defaultMessage: 'Enable editable Blocks',\n  },\n});\n\n/**\n * ContentTypeLayout class.\n * @class ContentTypeLayout\n * @extends Component\n */\nclass ContentTypeLayout extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    updateControlpanel: PropTypes.func.isRequired,\n    getControlpanel: PropTypes.func.isRequired,\n    getSchema: PropTypes.func.isRequired,\n    updateSchema: PropTypes.func.isRequired,\n    id: PropTypes.string.isRequired,\n    parent: PropTypes.string.isRequired,\n    pathname: PropTypes.string.isRequired,\n    schemaRequest: PropTypes.objectOf(PropTypes.any).isRequired,\n    cpanelRequest: PropTypes.objectOf(PropTypes.any).isRequired,\n    schema: PropTypes.objectOf(PropTypes.any),\n    controlpanel: PropTypes.shape({\n      '@id': PropTypes.string,\n      data: PropTypes.object,\n      schema: PropTypes.object,\n      title: PropTypes.string,\n    }),\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    schema: {},\n    controlpanel: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ContentTypeLayout\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      visual: false,\n      content: null,\n      readOnlyBehavior: null,\n      error: null,\n      isClient: false,\n    };\n\n    this.form = React.createRef();\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.getControlpanel(join([this.props.parent, this.props.id], '/'));\n    this.props.getSchema(this.props.id);\n    this.setState({ isClient: true });\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    // Control Panel GET\n    if (\n      this.props.cpanelRequest.get.loading &&\n      nextProps.cpanelRequest.get.error\n    ) {\n      this.setState({\n        error: nextProps.cpanelRequest.get.error,\n      });\n    }\n\n    // Schema GET\n    if (this.props.schemaRequest.loading && nextProps.schemaRequest.loaded) {\n      const properties = nextProps.schema?.properties || {};\n      const content = {};\n      for (const key in properties) {\n        const value = properties[key].default;\n        if (value) {\n          content[key] = value;\n        }\n      }\n\n      if (hasBlocksData(properties)) {\n        this.setState({\n          visual: true,\n        });\n\n        const blocksFieldName = getBlocksFieldname(properties);\n        const blocksLayoutFieldname = getBlocksLayoutFieldname(properties);\n        content[blocksFieldName] = properties[blocksFieldName]?.default || {};\n        content[blocksLayoutFieldname] = properties[blocksLayoutFieldname]\n          ?.default || { items: [] };\n\n        const blocksBehavior = properties[blocksFieldName]?.behavior || '';\n        this.setState({\n          readOnlyBehavior: !blocksBehavior.includes('generated')\n            ? blocksBehavior\n            : '',\n        });\n      } else {\n        this.setState({\n          visual: false,\n          readOnlyBehavior: '',\n        });\n      }\n\n      this.setState({\n        content: content,\n      });\n    }\n\n    // Schema updated\n    if (\n      this.props.schemaRequest.update.loading &&\n      nextProps.schemaRequest.update.loaded\n    ) {\n      this.props.getSchema(this.props.id);\n      toast.info(\n        <Toast\n          info\n          title={this.props.intl.formatMessage(messages.info)}\n          content={this.props.intl.formatMessage(messages.changesSaved)}\n        />,\n      );\n    }\n\n    // Blocks behavior disabled\n    if (\n      this.props.cpanelRequest.update.loading &&\n      nextProps.cpanelRequest.update.loaded\n    ) {\n      this.onEnableBlocks();\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit = (data) => {\n    const schema = { properties: {} };\n    Object.keys(data)\n      .filter((k) => data[k])\n      .forEach((k) => (schema.properties[k] = { default: data[k] }));\n    this.props.updateSchema(this.props.id, schema);\n  };\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel = () => {\n    const url = getParentUrl(this.props.pathname);\n    this.props.history.push(getParentUrl(url));\n  };\n\n  /**\n   * Enable blocks handler\n   * @method onEnableBlocks\n   * @returns {undefined}\n   */\n  onEnableBlocks = () => {\n    const { properties = {} } = this.props.schema;\n    const blocksFieldName = getBlocksFieldname(properties);\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(properties);\n    const schema = {\n      fieldsets: [\n        {\n          id: 'layout',\n          title: 'Layout',\n          fields: ['blocks', 'blocks_layout'],\n        },\n      ],\n      properties: {\n        blocks: {\n          title: 'Blocks',\n          type: 'dict',\n          widget: 'json',\n          factory: 'JSONField',\n          default: properties[blocksFieldName]?.default || {},\n        },\n        blocks_layout: {\n          title: 'Blocks Layout',\n          type: 'dict',\n          widget: 'json',\n          factory: 'JSONField',\n          default: properties[blocksLayoutFieldname]?.default || { items: [] },\n        },\n      },\n    };\n    this.props.updateSchema(this.props.id, schema);\n  };\n\n  /**\n   * Disable Blocks behavior handler\n   * @method onDisableBlocksBehavior\n   * @returns {undefined}\n   */\n  onDisableBlocksBehavior = () => {\n    this.props.updateControlpanel(this.props.controlpanel['@id'], {\n      [this.state.readOnlyBehavior]: false,\n      'volto.blocks.editable.layout': true,\n    });\n  };\n\n  /**\n   * Enable Blocks behavior handler\n   * @method onEnableBlocksBehavior\n   * @returns {undefined}\n   */\n  onEnableBlocksBehavior = () => {\n    this.props.updateControlpanel(this.props.controlpanel['@id'], {\n      'volto.blocks.editable.layout': true,\n    });\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    // Error\n    if (this.state.error) {\n      return <Error error={this.state.error} />;\n    }\n\n    if (!this.state.visual) {\n      // Still loading\n      if (!this.state.content) {\n        return <div />;\n      }\n\n      // Blocks are not enabled\n      return (\n        <>\n          <Segment\n            placeholder\n            id=\"page-controlpanel-layout\"\n            className=\"ui container center aligned\"\n          >\n            <div>\n              <FormattedMessage\n                id=\"Can not edit Layout for <strong>{type}</strong> content-type as it doesn't have support for <strong>Volto Blocks</strong> enabled\"\n                defaultMessage=\"Can not edit Layout for <strong>{type}</strong> content-type as it doesn't have support for <strong>Volto Blocks</strong> enabled\"\n                values={{\n                  strong: (...chunks) => <strong>{chunks}</strong>,\n                  type: this.props?.controlpanel?.title || this.props.id,\n                }}\n              />\n            </div>\n            <div className=\"ui divider\"></div>\n            <Button\n              primary\n              onClick={this.onEnableBlocksBehavior}\n              content={this.props.intl.formatMessage(messages.enable)}\n            />\n          </Segment>\n          <Portal\n            node={this.state.isClient && document.getElementById('toolbar')}\n          >\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={\n                <>\n                  <Link className=\"item\" to=\"#\" onClick={() => this.onCancel()}>\n                    <Icon\n                      name={backSVG}\n                      size=\"30px\"\n                      className=\"contents circled\"\n                      title={this.props.intl.formatMessage(messages.back)}\n                    />\n                  </Link>\n                </>\n              }\n            />\n          </Portal>\n        </>\n      );\n    }\n\n    if (this.state.readOnlyBehavior) {\n      return (\n        <>\n          <Segment\n            placeholder\n            id=\"page-controlpanel-layout\"\n            className=\"ui container center aligned\"\n          >\n            <div>\n              <FormattedMessage\n                id=\"Can not edit Layout for <strong>{type}</strong> content-type as the <strong>Blocks behavior</strong> is enabled and <strong>read-only</strong>\"\n                defaultMessage=\"Can not edit Layout for <strong>{type}</strong> content-type as the <strong>Blocks behavior</strong> is enabled and <strong>read-only</strong>\"\n                values={{\n                  strong: (...chunks) => <strong>{chunks}</strong>,\n                  type: this.props?.controlpanel?.title || this.props.id,\n                }}\n              />\n            </div>\n            <div className=\"ui divider\"></div>\n            <Button\n              primary\n              onClick={this.onDisableBlocksBehavior}\n              content={this.props.intl.formatMessage(messages.enable)}\n            />\n          </Segment>\n          <Portal\n            node={this.state.isClient && document.getElementById('toolbar')}\n          >\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={\n                <>\n                  <Link className=\"item\" to=\"#\" onClick={() => this.onCancel()}>\n                    <Icon\n                      name={backSVG}\n                      size=\"30px\"\n                      className=\"contents circled\"\n                      title={this.props.intl.formatMessage(messages.back)}\n                    />\n                  </Link>\n                </>\n              }\n            />\n          </Portal>\n        </>\n      );\n    }\n\n    // Render layout editor\n    const blocksFieldName = getBlocksFieldname(\n      this.props.schema?.properties || {},\n    );\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(\n      this.props.schema?.properties || {},\n    );\n    return (\n      <div id=\"page-controlpanel-layout\">\n        <Form\n          isAdminForm\n          ref={this.form}\n          schema={{\n            fieldsets: [\n              {\n                id: 'layout',\n                title: 'Layout',\n                fields: [blocksFieldName, blocksLayoutFieldname],\n              },\n            ],\n            properties: {\n              ...this.props.schema.properties[blocksFieldName],\n              ...this.props.schema.properties[blocksLayoutFieldname],\n            },\n            required: [],\n          }}\n          formData={this.state.content}\n          onSubmit={this.onSubmit}\n          onCancel={this.onCancel}\n          pathname={this.props.pathname}\n          visual={this.state.visual}\n          hideActions\n        />\n        <Portal\n          node={this.state.isClient && document.getElementById('sidebar')}\n        >\n          <Sidebar settingsTab={true} documentTab={false} />\n        </Portal>\n        <Portal\n          node={this.state.isClient && document.getElementById('toolbar')}\n        >\n          <Toolbar\n            pathname={this.props.pathname}\n            hideDefaultViewButtons\n            inner={\n              <>\n                <Button\n                  id=\"toolbar-save\"\n                  className=\"save\"\n                  aria-label={this.props.intl.formatMessage(messages.save)}\n                  onClick={() => this.form.current.onSubmit()}\n                  disabled={this.props.schemaRequest.update.loading}\n                  loading={this.props.schemaRequest.update.loading}\n                >\n                  <Icon\n                    name={saveSVG}\n                    className=\"circled\"\n                    size=\"30px\"\n                    title={this.props.intl.formatMessage(messages.save)}\n                  />\n                </Button>\n                <Button\n                  className=\"cancel\"\n                  aria-label={this.props.intl.formatMessage(messages.cancel)}\n                  onClick={() => this.onCancel()}\n                >\n                  <Icon\n                    name={clearSVG}\n                    className=\"circled\"\n                    size=\"30px\"\n                    title={this.props.intl.formatMessage(messages.cancel)}\n                  />\n                </Button>\n              </>\n            }\n          />\n        </Portal>\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      schema: state.schema.schema,\n      schemaRequest: state.schema,\n      cpanelRequest: state.controlpanels,\n      controlpanel: state.controlpanels.controlpanel,\n      pathname: props.location.pathname,\n      id: nth(props.location.pathname.split('/'), -2),\n      parent: nth(props.location.pathname.split('/'), -3),\n    }),\n    { getSchema, updateSchema, getControlpanel, updateControlpanel },\n  ),\n)(ContentTypeLayout);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Changes saved.","defaultMessage":"Changes saved."},{"id":"Back","defaultMessage":"Back"},{"id":"Save","defaultMessage":"Save"},{"id":"Cancel","defaultMessage":"Cancel"},{"id":"Info","defaultMessage":"Info"},{"id":"Enable editable Blocks","defaultMessage":"Enable editable Blocks"},{"id":"Can not edit Layout for <strong>{type}</strong> content-type as it doesn't have support for <strong>Volto Blocks</strong> enabled","defaultMessage":"Can not edit Layout for <strong>{type}</strong> content-type as it doesn't have support for <strong>Volto Blocks</strong> enabled"},{"id":"Can not edit Layout for <strong>{type}</strong> content-type as the <strong>Blocks behavior</strong> is enabled and <strong>read-only</strong>","defaultMessage":"Can not edit Layout for <strong>{type}</strong> content-type as the <strong>Blocks behavior</strong> is enabled and <strong>read-only</strong>"}]}},"sourceType":"module","externalDependencies":[]}