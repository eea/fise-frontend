{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Actions/Actions.jsx\";\nvar __jsx = React.createElement;\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n/**\n * Actions component.\n * @module components/manage/Actions/Actions\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Dropdown, Icon } from 'semantic-ui-react';\nimport { toast } from 'react-toastify';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport { cut, copy, copyContent, moveContent } from '@plone/volto/actions';\nimport { getBaseUrl } from '@plone/volto/helpers';\nimport { ContentsRenameModal, Toast } from '@plone/volto/components';\nconst messages = defineMessages({\n  cut: {\n    \"id\": \"Cut\",\n    \"defaultMessage\": \"Cut\"\n  },\n  copy: {\n    \"id\": \"Copy\",\n    \"defaultMessage\": \"Copy\"\n  },\n  paste: {\n    \"id\": \"Paste\",\n    \"defaultMessage\": \"Paste\"\n  },\n  rename: {\n    \"id\": \"Rename\",\n    \"defaultMessage\": \"Rename\"\n  },\n  messageCopied: {\n    \"id\": \"{title} copied.\",\n    \"defaultMessage\": \"{title} copied.\"\n  },\n  messageCut: {\n    \"id\": \"{title} cut.\",\n    \"defaultMessage\": \"{title} cut.\"\n  },\n  messageDeleted: {\n    \"id\": \"{title} has been deleted.\",\n    \"defaultMessage\": \"{title} has been deleted.\"\n  },\n  messagePasted: {\n    \"id\": \"Item(s) pasted.\",\n    \"defaultMessage\": \"Item(s) pasted.\"\n  },\n  success: {\n    \"id\": \"Success\",\n    \"defaultMessage\": \"Success\"\n  }\n});\n\n/**\n * Actions container class.\n * @class Actions\n * @extends Component\n */\nclass Actions extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Actions\n   */\n  constructor(props) {\n    super(props);\n    this.cut = this.cut.bind(this);\n    this.copy = this.copy.bind(this);\n    this.paste = this.paste.bind(this);\n    this.rename = this.rename.bind(this);\n    this.onRenameOk = this.onRenameOk.bind(this);\n    this.onRenameCancel = this.onRenameCancel.bind(this);\n    this.state = {\n      showRename: false\n    };\n  }\n\n  /**\n   * On rename ok\n   * @method onRenameOk\n   * @returns {undefined}\n   */\n  onRenameOk() {\n    this.setState({\n      showRename: false\n    });\n  }\n\n  /**\n   * On rename cancel\n   * @method onRenameCancel\n   * @returns {undefined}\n   */\n  onRenameCancel() {\n    this.setState({\n      showRename: false\n    });\n  }\n\n  /**\n   * Cut handler\n   * @method cut\n   * @returns {undefined}\n   */\n  cut() {\n    this.props.cut([getBaseUrl(this.props.pathname)]);\n    toast.success(__jsx(Toast, {\n      success: true,\n      title: this.props.intl.formatMessage(messages.success),\n      content: this.props.intl.formatMessage(messages.messageCut, {\n        title: this.props.title\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 7\n      }\n    }));\n  }\n\n  /**\n   * Copy handler\n   * @method copy\n   * @returns {undefined}\n   */\n  copy() {\n    this.props.copy([getBaseUrl(this.props.pathname)]);\n    toast.success(__jsx(Toast, {\n      success: true,\n      title: this.props.intl.formatMessage(messages.success),\n      content: this.props.intl.formatMessage(messages.messageCopied, {\n        title: this.props.title\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 7\n      }\n    }));\n  }\n\n  /**\n   * Paste handler\n   * @method paste\n   * @returns {undefined}\n   */\n  paste() {\n    if (this.props.action === 'copy') {\n      this.props.copyContent(this.props.source, getBaseUrl(this.props.pathname));\n    }\n    if (this.props.action === 'cut') {\n      this.props.moveContent(this.props.source, getBaseUrl(this.props.pathname));\n    }\n    toast.success(__jsx(Toast, {\n      success: true,\n      title: this.props.intl.formatMessage(messages.success),\n      content: this.props.intl.formatMessage(messages.messagePasted),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 7\n      }\n    }));\n  }\n\n  /**\n   * Rename handler\n   * @method rename\n   * @returns {undefined}\n   */\n  rename() {\n    this.setState({\n      showRename: true\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return __jsx(Dropdown, {\n      item: true,\n      id: \"toolbar-actions\",\n      trigger: __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }\n      }, __jsx(Icon, {\n        name: \"lightning\",\n        size: \"big\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 13\n        }\n      }), ' ', __jsx(FormattedMessage, {\n        id: \"Actions\",\n        defaultMessage: \"Actions\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 7\n      }\n    }, __jsx(Dropdown.Menu, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 9\n      }\n    }, this.props.actions.object_buttons && this.props.actions.object_buttons.map(item => {\n      switch (item.id) {\n        case 'cut':\n          return __jsx(Dropdown.Item, {\n            key: item.id,\n            icon: \"cut\",\n            text: item.title,\n            onClick: this.cut,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 21\n            }\n          });\n        case 'copy':\n          return __jsx(Dropdown.Item, {\n            key: item.id,\n            icon: \"copy\",\n            text: item.title,\n            onClick: this.copy,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 21\n            }\n          });\n        case 'paste':\n          return __jsx(Dropdown.Item, {\n            key: item.id,\n            icon: \"paste\",\n            text: item.title,\n            onClick: this.paste,\n            disabled: this.props.action === null,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 21\n            }\n          });\n        case 'delete':\n          return __jsx(Link, {\n            key: item.id,\n            to: `${this.props.pathname}/delete`,\n            className: \"item\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 21\n            }\n          }, __jsx(Icon, {\n            name: \"trash\",\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 23\n            }\n          }), item.title);\n        case 'rename':\n          return __jsx(Dropdown.Item, {\n            key: item.id,\n            icon: \"text cursor\",\n            text: item.title,\n            onClick: this.rename,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 21\n            }\n          });\n        default:\n          return null;\n      }\n    }), __jsx(ContentsRenameModal, {\n      open: this.state.showRename,\n      onCancel: this.onRenameCancel,\n      onOk: this.onRenameOk,\n      items: [{\n        url: this.props.pathname,\n        title: this.props.title,\n        id: this.props.id\n      }],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 11\n      }\n    })));\n  }\n}\n_defineProperty(Actions, \"propTypes\", {\n  actions: PropTypes.shape({\n    object: PropTypes.arrayOf(PropTypes.object),\n    object_buttons: PropTypes.arrayOf(PropTypes.object),\n    user: PropTypes.arrayOf(PropTypes.object)\n  }),\n  pathname: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  action: PropTypes.string,\n  source: PropTypes.arrayOf(PropTypes.string),\n  cut: PropTypes.func.isRequired,\n  copy: PropTypes.func.isRequired,\n  copyContent: PropTypes.func.isRequired,\n  moveContent: PropTypes.func.isRequired\n});\n_defineProperty(Actions, \"defaultProps\", {\n  action: null,\n  actions: null,\n  source: null\n});\nexport default compose(injectIntl, connect(state => ({\n  actions: state.actions.actions,\n  action: state.clipboard.action,\n  source: state.clipboard.source,\n  id: state.content.data ? state.content.data.id : '',\n  title: state.content.data ? state.content.data.title : ''\n}), {\n  cut,\n  copy,\n  copyContent,\n  moveContent\n}))(Actions);","map":{"version":3,"names":["React","Component","PropTypes","compose","connect","Link","Dropdown","Icon","toast","FormattedMessage","defineMessages","injectIntl","cut","copy","copyContent","moveContent","getBaseUrl","ContentsRenameModal","Toast","messages","paste","rename","messageCopied","messageCut","messageDeleted","messagePasted","success","Actions","constructor","props","bind","onRenameOk","onRenameCancel","state","showRename","setState","pathname","intl","formatMessage","title","action","source","render","actions","object_buttons","map","item","id","url","shape","object","arrayOf","user","string","isRequired","func","clipboard","content","data"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Actions/Actions.jsx"],"sourcesContent":["/**\n * Actions component.\n * @module components/manage/Actions/Actions\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Dropdown, Icon } from 'semantic-ui-react';\nimport { toast } from 'react-toastify';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\n\nimport { cut, copy, copyContent, moveContent } from '@plone/volto/actions';\nimport { getBaseUrl } from '@plone/volto/helpers';\nimport { ContentsRenameModal, Toast } from '@plone/volto/components';\n\nconst messages = defineMessages({\n  cut: {\n    id: 'Cut',\n    defaultMessage: 'Cut',\n  },\n  copy: {\n    id: 'Copy',\n    defaultMessage: 'Copy',\n  },\n  paste: {\n    id: 'Paste',\n    defaultMessage: 'Paste',\n  },\n  rename: {\n    id: 'Rename',\n    defaultMessage: 'Rename',\n  },\n  messageCopied: {\n    id: '{title} copied.',\n    defaultMessage: '{title} copied.',\n  },\n  messageCut: {\n    id: '{title} cut.',\n    defaultMessage: '{title} cut.',\n  },\n  messageDeleted: {\n    id: '{title} has been deleted.',\n    defaultMessage: '{title} has been deleted.',\n  },\n  messagePasted: {\n    id: 'Item(s) pasted.',\n    defaultMessage: 'Item(s) pasted.',\n  },\n  success: {\n    id: 'Success',\n    defaultMessage: 'Success',\n  },\n});\n\n/**\n * Actions container class.\n * @class Actions\n * @extends Component\n */\nclass Actions extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    actions: PropTypes.shape({\n      object: PropTypes.arrayOf(PropTypes.object),\n      object_buttons: PropTypes.arrayOf(PropTypes.object),\n      user: PropTypes.arrayOf(PropTypes.object),\n    }),\n    pathname: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    action: PropTypes.string,\n    source: PropTypes.arrayOf(PropTypes.string),\n    cut: PropTypes.func.isRequired,\n    copy: PropTypes.func.isRequired,\n    copyContent: PropTypes.func.isRequired,\n    moveContent: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    action: null,\n    actions: null,\n    source: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Actions\n   */\n  constructor(props) {\n    super(props);\n    this.cut = this.cut.bind(this);\n    this.copy = this.copy.bind(this);\n    this.paste = this.paste.bind(this);\n    this.rename = this.rename.bind(this);\n    this.onRenameOk = this.onRenameOk.bind(this);\n    this.onRenameCancel = this.onRenameCancel.bind(this);\n    this.state = {\n      showRename: false,\n    };\n  }\n\n  /**\n   * On rename ok\n   * @method onRenameOk\n   * @returns {undefined}\n   */\n  onRenameOk() {\n    this.setState({\n      showRename: false,\n    });\n  }\n\n  /**\n   * On rename cancel\n   * @method onRenameCancel\n   * @returns {undefined}\n   */\n  onRenameCancel() {\n    this.setState({\n      showRename: false,\n    });\n  }\n\n  /**\n   * Cut handler\n   * @method cut\n   * @returns {undefined}\n   */\n  cut() {\n    this.props.cut([getBaseUrl(this.props.pathname)]);\n    toast.success(\n      <Toast\n        success\n        title={this.props.intl.formatMessage(messages.success)}\n        content={this.props.intl.formatMessage(messages.messageCut, {\n          title: this.props.title,\n        })}\n      />,\n    );\n  }\n\n  /**\n   * Copy handler\n   * @method copy\n   * @returns {undefined}\n   */\n  copy() {\n    this.props.copy([getBaseUrl(this.props.pathname)]);\n    toast.success(\n      <Toast\n        success\n        title={this.props.intl.formatMessage(messages.success)}\n        content={this.props.intl.formatMessage(messages.messageCopied, {\n          title: this.props.title,\n        })}\n      />,\n    );\n  }\n\n  /**\n   * Paste handler\n   * @method paste\n   * @returns {undefined}\n   */\n  paste() {\n    if (this.props.action === 'copy') {\n      this.props.copyContent(\n        this.props.source,\n        getBaseUrl(this.props.pathname),\n      );\n    }\n    if (this.props.action === 'cut') {\n      this.props.moveContent(\n        this.props.source,\n        getBaseUrl(this.props.pathname),\n      );\n    }\n    toast.success(\n      <Toast\n        success\n        title={this.props.intl.formatMessage(messages.success)}\n        content={this.props.intl.formatMessage(messages.messagePasted)}\n      />,\n    );\n  }\n\n  /**\n   * Rename handler\n   * @method rename\n   * @returns {undefined}\n   */\n  rename() {\n    this.setState({\n      showRename: true,\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <Dropdown\n        item\n        id=\"toolbar-actions\"\n        trigger={\n          <span>\n            <Icon name=\"lightning\" size=\"big\" />{' '}\n            <FormattedMessage id=\"Actions\" defaultMessage=\"Actions\" />\n          </span>\n        }\n      >\n        <Dropdown.Menu>\n          {this.props.actions.object_buttons &&\n            this.props.actions.object_buttons.map((item) => {\n              switch (item.id) {\n                case 'cut':\n                  return (\n                    <Dropdown.Item\n                      key={item.id}\n                      icon=\"cut\"\n                      text={item.title}\n                      onClick={this.cut}\n                    />\n                  );\n                case 'copy':\n                  return (\n                    <Dropdown.Item\n                      key={item.id}\n                      icon=\"copy\"\n                      text={item.title}\n                      onClick={this.copy}\n                    />\n                  );\n                case 'paste':\n                  return (\n                    <Dropdown.Item\n                      key={item.id}\n                      icon=\"paste\"\n                      text={item.title}\n                      onClick={this.paste}\n                      disabled={this.props.action === null}\n                    />\n                  );\n                case 'delete':\n                  return (\n                    <Link\n                      key={item.id}\n                      to={`${this.props.pathname}/delete`}\n                      className=\"item\"\n                    >\n                      <Icon name=\"trash\" />\n                      {item.title}\n                    </Link>\n                  );\n                case 'rename':\n                  return (\n                    <Dropdown.Item\n                      key={item.id}\n                      icon=\"text cursor\"\n                      text={item.title}\n                      onClick={this.rename}\n                    />\n                  );\n                default:\n                  return null;\n              }\n            })}\n\n          <ContentsRenameModal\n            open={this.state.showRename}\n            onCancel={this.onRenameCancel}\n            onOk={this.onRenameOk}\n            items={[\n              {\n                url: this.props.pathname,\n                title: this.props.title,\n                id: this.props.id,\n              },\n            ]}\n          />\n        </Dropdown.Menu>\n      </Dropdown>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state) => ({\n      actions: state.actions.actions,\n      action: state.clipboard.action,\n      source: state.clipboard.source,\n      id: state.content.data ? state.content.data.id : '',\n      title: state.content.data ? state.content.data.title : '',\n    }),\n    {\n      cut,\n      copy,\n      copyContent,\n      moveContent,\n    },\n  ),\n)(Actions);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Cut","defaultMessage":"Cut"},{"id":"Copy","defaultMessage":"Copy"},{"id":"Paste","defaultMessage":"Paste"},{"id":"Rename","defaultMessage":"Rename"},{"id":"{title} copied.","defaultMessage":"{title} copied."},{"id":"{title} cut.","defaultMessage":"{title} cut."},{"id":"{title} has been deleted.","defaultMessage":"{title} has been deleted."},{"id":"Item(s) pasted.","defaultMessage":"Item(s) pasted."},{"id":"Success","defaultMessage":"Success"},{"id":"Actions","defaultMessage":"Actions"}]}},"sourceType":"module","externalDependencies":[]}