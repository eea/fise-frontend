{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport { Editor, Range, Transforms, Text, Node } from 'slate';\nimport { getMaxRange, selectAll, getSelectionNodesArrayByType } from 'volto-slate/utils';\nimport { P, LI, UL, OL } from 'volto-slate/constants';\nexport function unwrapNodesByType(editor, types, options = {}) {\n  Transforms.unwrapNodes(editor, _objectSpread({\n    match: n => types.includes(n.type)\n  }, options));\n}\nexport function unwrapList(editor, willWrapAgain, {\n  typeUl = UL,\n  typeOl = OL,\n  typeLi = LI,\n  unwrapFromList = false\n} = {}) {\n  // TODO: toggling from one list type to another should keep the structure untouched\n  if (editor.selection && Range.isExpanded(editor.selection) && unwrapFromList) {\n    if (unwrapFromList) {\n      // unwrapNodesByType(editor, [typeLi]);\n      // unwrapNodesByType(editor, [typeUl, typeOl], {\n      //   split: true,\n      // });\n      // else ...\n    }\n  } else {\n    unwrapNodesByType(editor, [typeLi], {\n      at: getMaxRange(editor)\n    });\n    unwrapNodesByType(editor, [typeUl, typeOl], {\n      at: getMaxRange(editor)\n    });\n  }\n  if (!willWrapAgain) {\n    convertAllToParagraph(editor);\n  }\n}\nexport function convertAllToParagraph(editor) {\n  // let count = Array.from(Node.children(editor, [])).length;\n  let result = recursive(editor);\n  compactAndNormalize(result);\n  Editor.withoutNormalizing(editor, () => {\n    Transforms.removeNodes(editor, {\n      at: [0 /* , i */]\n    });\n    Transforms.insertNodes(editor, {\n      type: P,\n      children: [{\n        text: ''\n      }]\n    }, {\n      at: [0]\n    });\n    Transforms.insertFragment(editor, [...result], {\n      at: [0]\n    });\n  });\n}\nexport function recursive(myNode) {\n  if (Text.isText(myNode)) return [_objectSpread({}, myNode)];\n  let output = [];\n  let children = Node.children(myNode, []);\n  for (const [node] of children) {\n    if (Text.isText(node)) {\n      output.push(_objectSpread({}, node));\n    } else {\n      let count = Array.from(node.children).length;\n      for (let i = 0; i < count; ++i) {\n        let o = recursive(node.children[i]);\n        for (let j = 0; j < o.length; ++j) {\n          output.push(o[j]);\n        }\n      }\n    }\n  }\n  return output;\n}\n\n// TODO: make this add a space between any two Text instances\nexport function compactAndNormalize(result) {\n  for (let i = 0; i < result.length - 1; ++i) {\n    let a = result[i];\n    let b = result[i + 1];\n    let m = textsMatch(a, b);\n    if (m) {\n      result[i].text += b.text;\n      result.splice(i + 1, 1);\n    }\n  }\n  if (result.length === 0) {\n    result.push({\n      text: ''\n    });\n  }\n  return;\n}\n\n// TODO: optimize this:\nexport function textsMatch(a, b) {\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n  for (let x in a) {\n    if (x === 'text') continue;\n    if (aKeys.includes(x) && bKeys.includes(x)) {\n      if (a[x] !== b[x]) {\n        return false;\n      }\n    }\n  }\n  for (let x in b) {\n    if (x === 'text') continue;\n    if (aKeys.includes(x) && bKeys.includes(x)) {\n      if (a[x] !== b[x]) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * @summary Toggles list type.\n * @todo need to redo this\n * @todo should preserve structure of list if going from a list type to another\n * @todo allow nested lists, currently the Markdown plugin uses this function but crashes when making a UL in an OL's LI\n * @param {Editor} editor\n * @param {object} options\n */\nexport function toggleList(editor, {\n  typeList,\n  typeUl = UL,\n  typeOl = OL,\n  typeLi = LI,\n  typeP = P,\n  isBulletedActive = false,\n  isNumberedActive = false\n}) {\n  // TODO: set previous selection (not this 'select all' command) after toggling list (in all three cases: toggling to numbered, bulleted or none)\n  selectAll(editor);\n\n  // const isActive = isNodeInSelection(editor, [typeList]);\n\n  // if (the list type/s are unset) {\n\n  const B = typeList === UL;\n  const N = typeList === OL;\n  if (N && !isBulletedActive && !isNumberedActive) {\n    convertAllToParagraph(editor);\n    // go on with const willWrapAgain etc.\n  } else if (N && !isBulletedActive && isNumberedActive) {\n    convertAllToParagraph(editor);\n    return;\n  } else if (N && isBulletedActive && !isNumberedActive) {\n    // go on with const willWrapAgain etc.\n  } else if (B && !isBulletedActive && !isNumberedActive) {\n    convertAllToParagraph(editor);\n    // go on with const willWrapAgain etc.\n  } else if (B && !isBulletedActive && isNumberedActive) {\n    // go on with const willWrapAgain etc.\n  } else if (B && isBulletedActive && !isNumberedActive) {\n    convertAllToParagraph(editor);\n    return;\n  }\n  selectAll(editor);\n  const willWrapAgain = !isBulletedActive;\n  unwrapList(editor, willWrapAgain, {\n    unwrapFromList: isBulletedActive\n  });\n\n  // a new list is created and everything in the editor is put in it;\n  // `children` property is added automatically as an empty array then\n  // normalized\n  const list = {\n    type: typeList\n  };\n  Transforms.wrapNodes(editor, list);\n\n  // get all the selected paragraphs\n  const nodes = getSelectionNodesArrayByType(editor, typeP);\n\n  // for each paragraph\n  for (const [, path] of nodes) {\n    // convert the paragraph to a list item\n    Transforms.setNodes(editor, {\n      type: LI\n    }, {\n      at: path\n    });\n  }\n}","map":{"version":3,"names":["Editor","Range","Transforms","Text","Node","getMaxRange","selectAll","getSelectionNodesArrayByType","P","LI","UL","OL","unwrapNodesByType","editor","types","options","unwrapNodes","match","n","includes","type","unwrapList","willWrapAgain","typeUl","typeOl","typeLi","unwrapFromList","selection","isExpanded","at","convertAllToParagraph","result","recursive","compactAndNormalize","withoutNormalizing","removeNodes","insertNodes","children","text","insertFragment","myNode","isText","output","node","push","count","Array","from","length","i","o","j","a","b","m","textsMatch","splice","aKeys","Object","keys","bKeys","x","toggleList","typeList","typeP","isBulletedActive","isNumberedActive","B","N","list","wrapNodes","nodes","path","setNodes"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-slate/src/editor/plugins/Markdown/utils.js"],"sourcesContent":["import { Editor, Range, Transforms, Text, Node } from 'slate';\nimport {\n  getMaxRange,\n  selectAll,\n  getSelectionNodesArrayByType,\n} from 'volto-slate/utils';\nimport { P, LI, UL, OL } from 'volto-slate/constants';\n\nexport function unwrapNodesByType(editor, types, options = {}) {\n  Transforms.unwrapNodes(editor, {\n    match: (n) => types.includes(n.type),\n    ...options,\n  });\n}\n\nexport function unwrapList(\n  editor,\n  willWrapAgain,\n  { typeUl = UL, typeOl = OL, typeLi = LI, unwrapFromList = false } = {},\n) {\n  // TODO: toggling from one list type to another should keep the structure untouched\n  if (\n    editor.selection &&\n    Range.isExpanded(editor.selection) &&\n    unwrapFromList\n  ) {\n    if (unwrapFromList) {\n      // unwrapNodesByType(editor, [typeLi]);\n      // unwrapNodesByType(editor, [typeUl, typeOl], {\n      //   split: true,\n      // });\n      // else ...\n    }\n  } else {\n    unwrapNodesByType(editor, [typeLi], { at: getMaxRange(editor) });\n    unwrapNodesByType(editor, [typeUl, typeOl], {\n      at: getMaxRange(editor),\n    });\n  }\n\n  if (!willWrapAgain) {\n    convertAllToParagraph(editor);\n  }\n}\n\nexport function convertAllToParagraph(editor) {\n  // let count = Array.from(Node.children(editor, [])).length;\n  let result = recursive(editor);\n  compactAndNormalize(result);\n\n  Editor.withoutNormalizing(editor, () => {\n    Transforms.removeNodes(editor, { at: [0 /* , i */] });\n    Transforms.insertNodes(\n      editor,\n      { type: P, children: [{ text: '' }] },\n      { at: [0] },\n    );\n    Transforms.insertFragment(editor, [...result], { at: [0] });\n  });\n}\n\nexport function recursive(myNode) {\n  if (Text.isText(myNode)) return [{ ...myNode }];\n\n  let output = [];\n  let children = Node.children(myNode, []);\n\n  for (const [node] of children) {\n    if (Text.isText(node)) {\n      output.push({ ...node });\n    } else {\n      let count = Array.from(node.children).length;\n      for (let i = 0; i < count; ++i) {\n        let o = recursive(node.children[i]);\n        for (let j = 0; j < o.length; ++j) {\n          output.push(o[j]);\n        }\n      }\n    }\n  }\n\n  return output;\n}\n\n// TODO: make this add a space between any two Text instances\nexport function compactAndNormalize(result) {\n  for (let i = 0; i < result.length - 1; ++i) {\n    let a = result[i];\n    let b = result[i + 1];\n\n    let m = textsMatch(a, b);\n    if (m) {\n      result[i].text += b.text;\n      result.splice(i + 1, 1);\n    }\n  }\n\n  if (result.length === 0) {\n    result.push({ text: '' });\n  }\n\n  return;\n}\n\n// TODO: optimize this:\nexport function textsMatch(a, b) {\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n\n  for (let x in a) {\n    if (x === 'text') continue;\n    if (aKeys.includes(x) && bKeys.includes(x)) {\n      if (a[x] !== b[x]) {\n        return false;\n      }\n    }\n  }\n\n  for (let x in b) {\n    if (x === 'text') continue;\n    if (aKeys.includes(x) && bKeys.includes(x)) {\n      if (a[x] !== b[x]) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\n/**\n * @summary Toggles list type.\n * @todo need to redo this\n * @todo should preserve structure of list if going from a list type to another\n * @todo allow nested lists, currently the Markdown plugin uses this function but crashes when making a UL in an OL's LI\n * @param {Editor} editor\n * @param {object} options\n */\nexport function toggleList(\n  editor,\n  {\n    typeList,\n    typeUl = UL,\n    typeOl = OL,\n    typeLi = LI,\n    typeP = P,\n    isBulletedActive = false,\n    isNumberedActive = false,\n  },\n) {\n  // TODO: set previous selection (not this 'select all' command) after toggling list (in all three cases: toggling to numbered, bulleted or none)\n  selectAll(editor);\n\n  // const isActive = isNodeInSelection(editor, [typeList]);\n\n  // if (the list type/s are unset) {\n\n  const B = typeList === UL;\n  const N = typeList === OL;\n\n  if (N && !isBulletedActive && !isNumberedActive) {\n    convertAllToParagraph(editor);\n    // go on with const willWrapAgain etc.\n  } else if (N && !isBulletedActive && isNumberedActive) {\n    convertAllToParagraph(editor);\n    return;\n  } else if (N && isBulletedActive && !isNumberedActive) {\n    // go on with const willWrapAgain etc.\n  } else if (B && !isBulletedActive && !isNumberedActive) {\n    convertAllToParagraph(editor);\n    // go on with const willWrapAgain etc.\n  } else if (B && !isBulletedActive && isNumberedActive) {\n    // go on with const willWrapAgain etc.\n  } else if (B && isBulletedActive && !isNumberedActive) {\n    convertAllToParagraph(editor);\n    return;\n  }\n\n  selectAll(editor);\n\n  const willWrapAgain = !isBulletedActive;\n  unwrapList(editor, willWrapAgain, { unwrapFromList: isBulletedActive });\n\n  // a new list is created and everything in the editor is put in it;\n  // `children` property is added automatically as an empty array then\n  // normalized\n  const list = { type: typeList };\n  Transforms.wrapNodes(editor, list);\n\n  // get all the selected paragraphs\n  const nodes = getSelectionNodesArrayByType(editor, typeP);\n\n  // for each paragraph\n  for (const [, path] of nodes) {\n    // convert the paragraph to a list item\n    Transforms.setNodes(editor, { type: LI }, { at: path });\n  }\n}\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}