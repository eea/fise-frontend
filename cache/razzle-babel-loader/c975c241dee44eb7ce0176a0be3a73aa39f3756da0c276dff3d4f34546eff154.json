{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-group-block/src/components/manage/Blocks/Group/EditBlockWrapper.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport React from 'react';\nimport { Icon, BlockChooser } from '@plone/volto/components';\nimport { blockHasValue } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\nimport { Button } from 'semantic-ui-react';\nimport includes from 'lodash/includes';\nimport isBoolean from 'lodash/isBoolean';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { doesNodeContainClick } from 'semantic-ui-react/dist/commonjs/lib';\nimport cx from 'classnames';\nimport dragSVG from '@plone/volto/icons/drag.svg';\nimport addSVG from '@plone/volto/icons/circle-plus.svg';\nimport trashSVG from '@plone/volto/icons/delete.svg';\nconst messages = defineMessages({\n  unknownBlock: {\n    \"id\": \"Unknown Block\",\n    \"defaultMessage\": \"Unknown Block {block}\"\n  },\n  delete: {\n    \"id\": \"delete\",\n    \"defaultMessage\": \"delete\"\n  }\n});\nclass EditBlockWrapper extends React.Component {\n  constructor(props) {\n    super(props);\n    _defineProperty(this, \"handleClickOutside\", e => {\n      if (this.blockNode.current && doesNodeContainClick(this.blockNode.current, e)) return;\n      if (this.state.addNewBlockOpened) {\n        this.setState({\n          addNewBlockOpened: false\n        });\n        return true;\n      }\n    });\n    _defineProperty(this, \"blockNode\", /*#__PURE__*/React.createRef());\n    this.state = {\n      addNewBlockOpened: false\n    };\n  }\n  componentDidMount() {\n    document.addEventListener('mousedown', this.handleClickOutside, false);\n  }\n  componentWillUnmount() {\n    document.removeEventListener('mousedown', this.handleClickOutside);\n  }\n  render() {\n    var _data$instructions;\n    const {\n      intl,\n      blockProps,\n      draginfo,\n      extraControls,\n      disabled,\n      children\n    } = this.props;\n    const {\n      allowedBlocks,\n      block,\n      data,\n      onSelectBlock,\n      onDeleteBlock,\n      onMutateBlock,\n      onInsertBlock,\n      selected\n    } = blockProps;\n    const type = data['@type'];\n    const {\n      disableNewBlocks\n    } = data;\n    const dragVisible = !data.fixed;\n    const visible = selected;\n    const required = isBoolean(data.required) ? data.required : includes(config.blocks.requiredBlocks, type);\n\n    // Get editing instructions from block settings or props\n    let instructions = (data === null || data === void 0 ? void 0 : (_data$instructions = data.instructions) === null || _data$instructions === void 0 ? void 0 : _data$instructions.data) || (data === null || data === void 0 ? void 0 : data.instructions);\n    if (!instructions || instructions === '<p><br/></p>') {\n      instructions = '';\n    }\n    return __jsx(\"div\", {\n      ref: this.blockNode,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", _extends({\n      ref: draginfo === null || draginfo === void 0 ? void 0 : draginfo.innerRef\n    }, selected ? draginfo === null || draginfo === void 0 ? void 0 : draginfo.draggableProps : null, {\n      className: `block-editor-${data['@type']}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }\n    }), (!selected || !visible || disabled) && __jsx(\"div\", _extends({\n      style: {\n        display: 'none'\n        // keep react-beautiful-dnd happy\n      }\n    }, draginfo.dragHandleProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }\n    })), visible && __jsx(\"div\", {\n      className: \"block-toolbar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }\n    }, instructions ? extraControls : '', !disabled && __jsx(React.Fragment, null, __jsx(\"div\", _extends({\n      style: {\n        display: dragVisible ? 'inline-block' : 'none'\n      }\n    }, draginfo.dragHandleProps, {\n      className: \"drag handle wrapper-group-block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 19\n      }\n    }), __jsx(Button, {\n      icon: true,\n      basic: true,\n      title: \"Drag and drop\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 21\n      }\n    }, __jsx(Icon, {\n      name: dragSVG,\n      size: \"19px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 23\n      }\n    }))), !disableNewBlocks && !blockHasValue(data) && __jsx(Button, {\n      icon: true,\n      basic: true,\n      title: \"Add block\",\n      onClick: () => {\n        this.setState({\n          addNewBlockOpened: !this.state.addNewBlockOpened\n        });\n      },\n      className: \"group-block-add-button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 21\n      }\n    }, __jsx(Icon, {\n      name: addSVG,\n      className: \"\",\n      size: \"19px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 23\n      }\n    })), !required && __jsx(Button, {\n      icon: true,\n      basic: true,\n      title: \"Remove block\",\n      onClick: () => onDeleteBlock(block),\n      className: \"delete-button-group-block\",\n      \"aria-label\": intl.formatMessage(messages.delete),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 21\n      }\n    }, __jsx(Icon, {\n      name: trashSVG,\n      size: \"19px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 23\n      }\n    })), this.state.addNewBlockOpened && __jsx(BlockChooser, {\n      onMutateBlock: (id, value) => {\n        onMutateBlock(id, value);\n        this.setState({\n          addNewBlockOpened: false\n        });\n      },\n      onInsertBlock: (id, value) => {\n        onSelectBlock(onInsertBlock(id, value));\n        this.setState({\n          addNewBlockOpened: false\n        });\n      },\n      currentBlock: block,\n      allowedBlocks: allowedBlocks,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 21\n      }\n    }))), __jsx(\"div\", {\n      className: cx('ui drag block wrapper inner', type, {\n        multiSelected: this.props.multiSelected\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }\n    }, children)));\n  }\n}\nexport default injectIntl(EditBlockWrapper);","map":{"version":3,"names":["React","Icon","BlockChooser","blockHasValue","config","Button","includes","isBoolean","defineMessages","injectIntl","doesNodeContainClick","cx","dragSVG","addSVG","trashSVG","messages","unknownBlock","delete","EditBlockWrapper","Component","constructor","props","e","blockNode","current","state","addNewBlockOpened","setState","createRef","componentDidMount","document","addEventListener","handleClickOutside","componentWillUnmount","removeEventListener","render","intl","blockProps","draginfo","extraControls","disabled","children","allowedBlocks","block","data","onSelectBlock","onDeleteBlock","onMutateBlock","onInsertBlock","selected","type","disableNewBlocks","dragVisible","fixed","visible","required","blocks","requiredBlocks","instructions","innerRef","draggableProps","display","dragHandleProps","formatMessage","id","value","multiSelected"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-group-block/src/components/manage/Blocks/Group/EditBlockWrapper.jsx"],"sourcesContent":["import React from 'react';\nimport { Icon, BlockChooser } from '@plone/volto/components';\nimport { blockHasValue } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\nimport { Button } from 'semantic-ui-react';\nimport includes from 'lodash/includes';\nimport isBoolean from 'lodash/isBoolean';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { doesNodeContainClick } from 'semantic-ui-react/dist/commonjs/lib';\nimport cx from 'classnames';\n\nimport dragSVG from '@plone/volto/icons/drag.svg';\nimport addSVG from '@plone/volto/icons/circle-plus.svg';\nimport trashSVG from '@plone/volto/icons/delete.svg';\n\nconst messages = defineMessages({\n  unknownBlock: {\n    id: 'Unknown Block',\n    defaultMessage: 'Unknown Block {block}',\n  },\n  delete: {\n    id: 'delete',\n    defaultMessage: 'delete',\n  },\n});\n\nclass EditBlockWrapper extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      addNewBlockOpened: false,\n    };\n  }\n\n  componentDidMount() {\n    document.addEventListener('mousedown', this.handleClickOutside, false);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('mousedown', this.handleClickOutside);\n  }\n\n  handleClickOutside = (e) => {\n    if (\n      this.blockNode.current &&\n      doesNodeContainClick(this.blockNode.current, e)\n    )\n      return;\n\n    if (this.state.addNewBlockOpened) {\n      this.setState({\n        addNewBlockOpened: false,\n      });\n      return true;\n    }\n  };\n\n  blockNode = React.createRef();\n\n  render() {\n    const {\n      intl,\n      blockProps,\n      draginfo,\n      extraControls,\n      disabled,\n      children,\n    } = this.props;\n\n    const {\n      allowedBlocks,\n      block,\n      data,\n      onSelectBlock,\n      onDeleteBlock,\n      onMutateBlock,\n      onInsertBlock,\n      selected,\n    } = blockProps;\n    const type = data['@type'];\n    const { disableNewBlocks } = data;\n    const dragVisible = !data.fixed;\n    const visible = selected;\n\n    const required = isBoolean(data.required)\n      ? data.required\n      : includes(config.blocks.requiredBlocks, type);\n\n    // Get editing instructions from block settings or props\n    let instructions = data?.instructions?.data || data?.instructions;\n    if (!instructions || instructions === '<p><br/></p>') {\n      instructions = '';\n    }\n\n    return (\n      <div ref={this.blockNode}>\n        <div\n          ref={draginfo?.innerRef}\n          {...(selected ? draginfo?.draggableProps : null)}\n          className={`block-editor-${data['@type']}`}\n        >\n          {(!selected || !visible || disabled) && (\n            <div\n              style={{\n                display: 'none',\n                // keep react-beautiful-dnd happy\n              }}\n              {...draginfo.dragHandleProps}\n            ></div>\n          )}\n          {visible && (\n            <div className=\"block-toolbar\">\n              {instructions ? extraControls : ''}\n\n              {!disabled && (\n                <>\n                  <div\n                    style={{\n                      display: dragVisible ? 'inline-block' : 'none',\n                    }}\n                    {...draginfo.dragHandleProps}\n                    className=\"drag handle wrapper-group-block\"\n                  >\n                    <Button icon basic title=\"Drag and drop\">\n                      <Icon name={dragSVG} size=\"19px\" />\n                    </Button>\n                  </div>\n\n                  {!disableNewBlocks && !blockHasValue(data) && (\n                    <Button\n                      icon\n                      basic\n                      title=\"Add block\"\n                      onClick={() => {\n                        this.setState({\n                          addNewBlockOpened: !this.state.addNewBlockOpened,\n                        });\n                      }}\n                      className=\"group-block-add-button\"\n                    >\n                      <Icon name={addSVG} className=\"\" size=\"19px\" />\n                    </Button>\n                  )}\n                  {!required && (\n                    <Button\n                      icon\n                      basic\n                      title=\"Remove block\"\n                      onClick={() => onDeleteBlock(block)}\n                      className=\"delete-button-group-block\"\n                      aria-label={intl.formatMessage(messages.delete)}\n                    >\n                      <Icon name={trashSVG} size=\"19px\" />\n                    </Button>\n                  )}\n                  {this.state.addNewBlockOpened && (\n                    <BlockChooser\n                      onMutateBlock={(id, value) => {\n                        onMutateBlock(id, value);\n                        this.setState({ addNewBlockOpened: false });\n                      }}\n                      onInsertBlock={(id, value) => {\n                        onSelectBlock(onInsertBlock(id, value));\n                        this.setState({ addNewBlockOpened: false });\n                      }}\n                      currentBlock={block}\n                      allowedBlocks={allowedBlocks}\n                    />\n                  )}\n                </>\n              )}\n            </div>\n          )}\n\n          <div\n            className={cx('ui drag block wrapper inner', type, {\n              multiSelected: this.props.multiSelected,\n            })}\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default injectIntl(EditBlockWrapper);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Unknown Block","defaultMessage":"Unknown Block {block}"},{"id":"delete","defaultMessage":"delete"}]}},"sourceType":"module","externalDependencies":[]}