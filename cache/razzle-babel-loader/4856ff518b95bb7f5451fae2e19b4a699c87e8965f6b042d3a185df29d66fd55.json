{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Preferences/ChangePassword.jsx\";\nvar __jsx = React.createElement;\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n/**\n * Change password component.\n * @module components/manage/Preferences/ChangePassword\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from '@plone/volto/helpers';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Portal } from 'react-portal';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { Container } from 'semantic-ui-react';\nimport jwtDecode from 'jwt-decode';\nimport { toast } from 'react-toastify';\nimport { Form, Icon, Toast, Toolbar } from '@plone/volto/components';\nimport { updatePassword } from '@plone/volto/actions';\nimport { getBaseUrl } from '@plone/volto/helpers';\nimport backSVG from '@plone/volto/icons/back.svg';\nconst messages = defineMessages({\n  changePassword: {\n    \"id\": \"Change Password\",\n    \"defaultMessage\": \"Change Password\"\n  },\n  default: {\n    \"id\": \"Default\",\n    \"defaultMessage\": \"Default\"\n  },\n  oldPasswordTitle: {\n    \"id\": \"Current password\",\n    \"defaultMessage\": \"Current password\"\n  },\n  oldPasswordDescription: {\n    \"id\": \"Enter your current password.\",\n    \"defaultMessage\": \"Enter your current password.\"\n  },\n  newPasswordTitle: {\n    \"id\": \"New password\",\n    \"defaultMessage\": \"New password\"\n  },\n  newPasswordDescription: {\n    \"id\": \"Enter your new password. Minimum 5 characters.\",\n    \"defaultMessage\": \"Enter your new password. Minimum 5 characters.\"\n  },\n  newPasswordRepeatTitle: {\n    \"id\": \"Confirm password\",\n    \"defaultMessage\": \"Confirm password\"\n  },\n  newPasswordRepeatDescription: {\n    \"id\": \"Re-enter the password. Make sure the passwords are identical.\",\n    \"defaultMessage\": \"Re-enter the password. Make sure the passwords are identical.\"\n  },\n  saved: {\n    \"id\": \"Changes saved\",\n    \"defaultMessage\": \"Changes saved\"\n  },\n  back: {\n    \"id\": \"Back\",\n    \"defaultMessage\": \"Back\"\n  },\n  success: {\n    \"id\": \"Success\",\n    \"defaultMessage\": \"Success\"\n  }\n});\n\n/**\n * ChangePassword class.\n * @class ChangePassword\n * @extends Component\n */\nclass ChangePassword extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ChangePassword\n   */\n  constructor(props) {\n    super(props);\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = {\n      isClient: false\n    };\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.setState({\n      isClient: true\n    });\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    if (data.newPassword === data.newPasswordRepeat) {\n      this.props.updatePassword(this.props.userId, data.oldPassword, data.newPassword);\n      toast.success(__jsx(Toast, {\n        success: true,\n        title: this.props.intl.formatMessage(messages.success),\n        content: this.props.intl.formatMessage(messages.saved),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 9\n        }\n      }));\n    }\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.props.history.goBack();\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return __jsx(Container, {\n      id: \"page-change-password\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 7\n      }\n    }, __jsx(Helmet, {\n      title: this.props.intl.formatMessage(messages.changePassword),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }\n    }), __jsx(Form, {\n      schema: {\n        fieldsets: [{\n          id: 'default',\n          title: this.props.intl.formatMessage(messages.default),\n          fields: ['oldPassword', 'newPassword', 'newPasswordRepeat']\n        }],\n        properties: {\n          oldPassword: {\n            description: this.props.intl.formatMessage(messages.oldPasswordDescription),\n            title: this.props.intl.formatMessage(messages.oldPasswordTitle),\n            type: 'string',\n            widget: 'password'\n          },\n          newPassword: {\n            description: this.props.intl.formatMessage(messages.newPasswordDescription),\n            title: this.props.intl.formatMessage(messages.newPasswordTitle),\n            type: 'string',\n            widget: 'password'\n          },\n          newPasswordRepeat: {\n            description: this.props.intl.formatMessage(messages.newPasswordRepeatDescription),\n            title: this.props.intl.formatMessage(messages.newPasswordRepeatTitle),\n            type: 'string',\n            widget: 'password'\n          }\n        },\n        required: ['oldPassword', 'newPassword', 'newPasswordRepeat']\n      },\n      onSubmit: this.onSubmit,\n      onCancel: this.onCancel,\n      loading: this.props.loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }\n    }), this.state.isClient && __jsx(Portal, {\n      node: document.getElementById('toolbar'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 11\n      }\n    }, __jsx(Toolbar, {\n      pathname: this.props.pathname,\n      hideDefaultViewButtons: true,\n      inner: __jsx(Link, {\n        to: `${getBaseUrl(this.props.pathname)}`,\n        className: \"item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 17\n        }\n      }, __jsx(Icon, {\n        name: backSVG,\n        className: \"contents circled\",\n        size: \"30px\",\n        title: this.props.intl.formatMessage(messages.back),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 19\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 13\n      }\n    })));\n  }\n}\n_defineProperty(ChangePassword, \"propTypes\", {\n  userId: PropTypes.string.isRequired,\n  loading: PropTypes.bool.isRequired,\n  updatePassword: PropTypes.func.isRequired,\n  pathname: PropTypes.string.isRequired\n});\nexport default compose(withRouter, injectIntl, connect((state, props) => ({\n  userId: state.userSession.token ? jwtDecode(state.userSession.token).sub : '',\n  loading: state.users.update_password.loading,\n  pathname: props.location.pathname\n}), {\n  updatePassword\n}))(ChangePassword);","map":{"version":3,"names":["React","Component","PropTypes","Helmet","connect","compose","Link","withRouter","Portal","defineMessages","injectIntl","Container","jwtDecode","toast","Form","Icon","Toast","Toolbar","updatePassword","getBaseUrl","backSVG","messages","changePassword","default","oldPasswordTitle","oldPasswordDescription","newPasswordTitle","newPasswordDescription","newPasswordRepeatTitle","newPasswordRepeatDescription","saved","back","success","ChangePassword","constructor","props","onCancel","bind","onSubmit","state","isClient","componentDidMount","setState","data","newPassword","newPasswordRepeat","userId","oldPassword","intl","formatMessage","history","goBack","render","fieldsets","id","title","fields","properties","description","type","widget","required","loading","document","getElementById","pathname","string","isRequired","bool","func","userSession","token","sub","users","update_password","location"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Preferences/ChangePassword.jsx"],"sourcesContent":["/**\n * Change password component.\n * @module components/manage/Preferences/ChangePassword\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from '@plone/volto/helpers';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Portal } from 'react-portal';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { Container } from 'semantic-ui-react';\nimport jwtDecode from 'jwt-decode';\nimport { toast } from 'react-toastify';\n\nimport { Form, Icon, Toast, Toolbar } from '@plone/volto/components';\nimport { updatePassword } from '@plone/volto/actions';\nimport { getBaseUrl } from '@plone/volto/helpers';\n\nimport backSVG from '@plone/volto/icons/back.svg';\n\nconst messages = defineMessages({\n  changePassword: {\n    id: 'Change Password',\n    defaultMessage: 'Change Password',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  oldPasswordTitle: {\n    id: 'Current password',\n    defaultMessage: 'Current password',\n  },\n  oldPasswordDescription: {\n    id: 'Enter your current password.',\n    defaultMessage: 'Enter your current password.',\n  },\n  newPasswordTitle: {\n    id: 'New password',\n    defaultMessage: 'New password',\n  },\n  newPasswordDescription: {\n    id: 'Enter your new password. Minimum 5 characters.',\n    defaultMessage: 'Enter your new password. Minimum 5 characters.',\n  },\n  newPasswordRepeatTitle: {\n    id: 'Confirm password',\n    defaultMessage: 'Confirm password',\n  },\n  newPasswordRepeatDescription: {\n    id: 'Re-enter the password. Make sure the passwords are identical.',\n    defaultMessage:\n      'Re-enter the password. Make sure the passwords are identical.',\n  },\n  saved: {\n    id: 'Changes saved',\n    defaultMessage: 'Changes saved',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  success: {\n    id: 'Success',\n    defaultMessage: 'Success',\n  },\n});\n\n/**\n * ChangePassword class.\n * @class ChangePassword\n * @extends Component\n */\nclass ChangePassword extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    userId: PropTypes.string.isRequired,\n    loading: PropTypes.bool.isRequired,\n    updatePassword: PropTypes.func.isRequired,\n    pathname: PropTypes.string.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ChangePassword\n   */\n  constructor(props) {\n    super(props);\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = { isClient: false };\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.setState({ isClient: true });\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    if (data.newPassword === data.newPasswordRepeat) {\n      this.props.updatePassword(\n        this.props.userId,\n        data.oldPassword,\n        data.newPassword,\n      );\n      toast.success(\n        <Toast\n          success\n          title={this.props.intl.formatMessage(messages.success)}\n          content={this.props.intl.formatMessage(messages.saved)}\n        />,\n      );\n    }\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.props.history.goBack();\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <Container id=\"page-change-password\">\n        <Helmet\n          title={this.props.intl.formatMessage(messages.changePassword)}\n        />\n        <Form\n          schema={{\n            fieldsets: [\n              {\n                id: 'default',\n                title: this.props.intl.formatMessage(messages.default),\n                fields: ['oldPassword', 'newPassword', 'newPasswordRepeat'],\n              },\n            ],\n            properties: {\n              oldPassword: {\n                description: this.props.intl.formatMessage(\n                  messages.oldPasswordDescription,\n                ),\n                title: this.props.intl.formatMessage(messages.oldPasswordTitle),\n                type: 'string',\n                widget: 'password',\n              },\n              newPassword: {\n                description: this.props.intl.formatMessage(\n                  messages.newPasswordDescription,\n                ),\n                title: this.props.intl.formatMessage(messages.newPasswordTitle),\n                type: 'string',\n                widget: 'password',\n              },\n              newPasswordRepeat: {\n                description: this.props.intl.formatMessage(\n                  messages.newPasswordRepeatDescription,\n                ),\n                title: this.props.intl.formatMessage(\n                  messages.newPasswordRepeatTitle,\n                ),\n                type: 'string',\n                widget: 'password',\n              },\n            },\n            required: ['oldPassword', 'newPassword', 'newPasswordRepeat'],\n          }}\n          onSubmit={this.onSubmit}\n          onCancel={this.onCancel}\n          loading={this.props.loading}\n        />\n        {this.state.isClient && (\n          <Portal node={document.getElementById('toolbar')}>\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={\n                <Link\n                  to={`${getBaseUrl(this.props.pathname)}`}\n                  className=\"item\"\n                >\n                  <Icon\n                    name={backSVG}\n                    className=\"contents circled\"\n                    size=\"30px\"\n                    title={this.props.intl.formatMessage(messages.back)}\n                  />\n                </Link>\n              }\n            />\n          </Portal>\n        )}\n      </Container>\n    );\n  }\n}\n\nexport default compose(\n  withRouter,\n  injectIntl,\n  connect(\n    (state, props) => ({\n      userId: state.userSession.token\n        ? jwtDecode(state.userSession.token).sub\n        : '',\n      loading: state.users.update_password.loading,\n      pathname: props.location.pathname,\n    }),\n    { updatePassword },\n  ),\n)(ChangePassword);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Change Password","defaultMessage":"Change Password"},{"id":"Default","defaultMessage":"Default"},{"id":"Current password","defaultMessage":"Current password"},{"id":"Enter your current password.","defaultMessage":"Enter your current password."},{"id":"New password","defaultMessage":"New password"},{"id":"Enter your new password. Minimum 5 characters.","defaultMessage":"Enter your new password. Minimum 5 characters."},{"id":"Confirm password","defaultMessage":"Confirm password"},{"id":"Re-enter the password. Make sure the passwords are identical.","defaultMessage":"Re-enter the password. Make sure the passwords are identical."},{"id":"Changes saved","defaultMessage":"Changes saved"},{"id":"Back","defaultMessage":"Back"},{"id":"Success","defaultMessage":"Success"}]}},"sourceType":"module","externalDependencies":[]}