{"ast":null,"code":"import _extends from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/extends.js\";\nimport _slicedToArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _without from \"lodash/without\";\nimport _isEmpty from \"lodash/isEmpty\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-columns-block/src/ColumnsBlock/ColumnsBlockEdit.jsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport { compose } from 'redux';\nimport { Grid, Segment } from 'semantic-ui-react';\nimport { SidebarPortal, BlocksToolbar, Icon } from '@plone/volto/components'; // BlocksForm, Icon,\nimport InlineForm from '@plone/volto/components/manage/Form/InlineForm';\nimport { emptyBlocksForm, getBlocksLayoutFieldname } from '@plone/volto/helpers';\nimport { setSidebarTab } from '@plone/volto/actions';\nimport { connect } from 'react-redux';\nimport { BlocksForm } from '@plone/volto/components';\nimport { Button } from 'semantic-ui-react';\nimport config from '@plone/volto/registry';\nimport cx from 'classnames';\nimport { ColumnsBlockSchema } from './schema';\nimport { getColumns, empty, defaultNewColumn, hasColumns, forEachColumn, columnIsEmpty } from './utils';\nimport ColumnVariations from './ColumnVariations';\nimport EditBlockWrapper from './EditBlockWrapper';\nimport { COLUMNSBLOCK } from '@eeacms/volto-columns-block/constants';\nimport { makeStyleSchema, getStyle } from '../Styles';\nimport tuneSVG from '@plone/volto/icons/column.svg';\nimport upSVG from '@plone/volto/icons/up.svg';\nimport '../less/columns.less';\nvar messages = defineMessages({\n  labelColumn: {\n    \"id\": \"Column\",\n    \"defaultMessage\": \"Column\"\n  },\n  labelColumnsBlock: {\n    \"id\": \"Columns block\",\n    \"defaultMessage\": \"Columns block\"\n  },\n  labelToColSettings: {\n    \"id\": \"Go to Column settings\",\n    \"defaultMessage\": \"Go to Column settings\"\n  }\n});\n\n/*\n * not pretty, there's a lot of render props passing, to please React\n * reconciliation algos\n *\n\nColumnsBlockEdit -> passes EditBlockWrapper into\n  -> BlocksForm -> which passes (with EditBlock) into\n    -> DragDropList -> which renders them all\n*/\nvar ColumnsBlockEdit = /*#__PURE__*/function (_React$Component) {\n  _inherits(ColumnsBlockEdit, _React$Component);\n  var _super = _createSuper(ColumnsBlockEdit);\n  function ColumnsBlockEdit(props) {\n    var _this;\n    _classCallCheck(this, ColumnsBlockEdit);\n    _this = _super.call(this, props);\n    _defineProperty(_assertThisInitialized(_this), \"createFrom\", function (initialData) {\n      var gridCols = initialData.gridCols,\n        gridSize = initialData.gridSize;\n      return {\n        data: empty(gridCols.length),\n        gridSize: gridSize,\n        gridCols: gridCols\n      };\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleKeyDown\", function (e, index, block, node) {\n      var _ref = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {},\n        _ref$disableEnter = _ref.disableEnter,\n        disableEnter = _ref$disableEnter === void 0 ? false : _ref$disableEnter,\n        _ref$disableArrowUp = _ref.disableArrowUp,\n        disableArrowUp = _ref$disableArrowUp === void 0 ? false : _ref$disableArrowUp,\n        _ref$disableArrowDown = _ref.disableArrowDown,\n        disableArrowDown = _ref$disableArrowDown === void 0 ? false : _ref$disableArrowDown;\n      var hasblockActive = Object.keys(_this.state.colSelections).length > 0;\n      if (e.key === 'ArrowUp' && !disableArrowUp && !hasblockActive) {\n        _this.props.onFocusPreviousBlock(block, node);\n        e.preventDefault();\n      }\n      if (e.key === 'ArrowDown' && !disableArrowDown && !hasblockActive) {\n        _this.props.onFocusNextBlock(block, node);\n        e.preventDefault();\n      }\n      if (e.key === 'Enter' && !disableEnter && !hasblockActive) {\n        _this.props.onAddBlock(config.settings.defaultBlockType, index + 1);\n        e.preventDefault();\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onChangeColumnSettings\", function (id, value) {\n      var _coldata$blocks, _coldata$blocks2, _coldata$blocks2$_thi;\n      var _this$props = _this.props,\n        data = _this$props.data,\n        onChangeBlock = _this$props.onChangeBlock,\n        block = _this$props.block;\n      var coldata = data.data;\n      var formData = _objectSpread(_objectSpread({}, data), {}, {\n        data: _objectSpread(_objectSpread({}, coldata), {}, {\n          blocks: _objectSpread(_objectSpread({}, coldata.blocks), {}, _defineProperty({}, _this.state.activeColumn, _objectSpread(_objectSpread({}, (_coldata$blocks = coldata.blocks) === null || _coldata$blocks === void 0 ? void 0 : _coldata$blocks[_this.state.activeColumn]), {}, {\n            settings: _objectSpread(_objectSpread({}, (_coldata$blocks2 = coldata.blocks) === null || _coldata$blocks2 === void 0 ? void 0 : (_coldata$blocks2$_thi = _coldata$blocks2[_this.state.activeColumn]) === null || _coldata$blocks2$_thi === void 0 ? void 0 : _coldata$blocks2$_thi.settings), {}, _defineProperty({}, id, value))\n          })))\n        })\n      });\n      onChangeBlock(block, formData);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onChangeColumnData\", function (id, value, colId) {\n      var _this$props2 = _this.props,\n        data = _this$props2.data,\n        onChangeBlock = _this$props2.onChangeBlock,\n        block = _this$props2.block,\n        onChangeField = _this$props2.onChangeField;\n      var coldata = data.data;\n      // special handling of blocks and blocks_layout\n      if (['blocks', 'blocks_layout'].indexOf(id) > -1) {\n        var _coldata$blocks3;\n        _this.blocksState[id] = value;\n        onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n          data: _objectSpread(_objectSpread({}, coldata), {}, {\n            blocks: _objectSpread(_objectSpread({}, coldata.blocks), {}, _defineProperty({}, colId, _objectSpread(_objectSpread({}, (_coldata$blocks3 = coldata.blocks) === null || _coldata$blocks3 === void 0 ? void 0 : _coldata$blocks3[colId]), _this.blocksState)))\n          })\n        }));\n      } else {\n        onChangeField(id, value);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onSelectBlock\", function (id, colId, colData, activeBlock, isMultipleSelection, event) {\n      var newMultiSelected = [];\n      var selected = id;\n      if (isMultipleSelection) {\n        selected = null;\n        var blocksLayoutFieldname = getBlocksLayoutFieldname(colData);\n        var blocks_layout = colData[blocksLayoutFieldname].items;\n        if (event.shiftKey) {\n          var anchor = _this.state.multiSelected.length > 0 ? blocks_layout.indexOf(_this.state.multiSelected[0]) : blocks_layout.indexOf(activeBlock);\n          var focus = blocks_layout.indexOf(id);\n          if (anchor === focus) {\n            newMultiSelected = [id];\n          } else if (focus > anchor) {\n            newMultiSelected = _toConsumableArray(blocks_layout.slice(anchor, focus + 1));\n          } else {\n            newMultiSelected = _toConsumableArray(blocks_layout.slice(focus, anchor + 1));\n          }\n        }\n        if ((event.ctrlKey || event.metaKey) && !event.shiftKey) {\n          if (_this.state.multiSelected.includes(id)) {\n            selected = null;\n            newMultiSelected = _without(_this.state.multiSelected, id);\n          } else {\n            newMultiSelected = [].concat(_toConsumableArray(_this.state.multiSelected || []), [id]);\n          }\n        }\n      }\n      _this.setState({\n        multiSelected: newMultiSelected,\n        colSelections: _defineProperty({}, colId, selected)\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getColumnsBlockSchema\", function () {\n      var _config$blocks$blocks, _config$blocks$blocks2;\n      var variants = ((_config$blocks$blocks = config.blocks.blocksConfig) === null || _config$blocks$blocks === void 0 ? void 0 : (_config$blocks$blocks2 = _config$blocks$blocks[COLUMNSBLOCK]) === null || _config$blocks$blocks2 === void 0 ? void 0 : _config$blocks$blocks2.variants) || [];\n      var schema = ColumnsBlockSchema(_this.props.intl);\n      var data = _this.props.data;\n      var _ref2 = data.data || {},\n        _ref2$blocks_layout = _ref2.blocks_layout,\n        blocks_layout = _ref2$blocks_layout === void 0 ? {} : _ref2$blocks_layout;\n      var nrOfColumns = ((blocks_layout === null || blocks_layout === void 0 ? void 0 : blocks_layout.items) || []).length;\n      var available_variants = variants.filter(function (_ref3) {\n        var _defaultData$gridCols;\n        var defaultData = _ref3.defaultData;\n        return (defaultData === null || defaultData === void 0 ? void 0 : (_defaultData$gridCols = defaultData.gridCols) === null || _defaultData$gridCols === void 0 ? void 0 : _defaultData$gridCols.length) === nrOfColumns;\n      });\n      schema.properties.gridCols.choices = available_variants.map(function (_ref4) {\n        var defaultData = _ref4.defaultData,\n          title = _ref4.title;\n        return [defaultData === null || defaultData === void 0 ? void 0 : defaultData.gridCols, title];\n      });\n      return schema;\n    });\n    _this.state = {\n      multiSelected: [],\n      colSelections: {},\n      // selected block for each column\n      showSidebar: false,\n      activeColumn: null\n    };\n\n    // This special variable is needed because of the onChangeField(block...) is\n    // immediately followed by onChangeField(blocks_layout...), we want to save\n    // this incoming information as data for the block, but because it is only\n    // partial, we'll overwrite it in the second request. So we take advantage\n    // of what happens between batched updates, we know that there will be two\n    // calls, so even if we overwrite the state improperly on the first pass,\n    // it will be fixed on the second pass if we have access to the proper\n    // value from the first pass.\n    //\n    // We have volto-slate that does:\n    // ReactDOM.unstable_batchedUpdates(() => {\n    //    this.onChangeField(blocks, {})\n    //    this.onChangeField(blocks_layout, {})\n    // }\n    // volto-slate needs to be neutral, to work in the main Volto form, but\n    // also these types of subforms, so it should continue to use batched\n    // onChangeField, as that works fine. So volto-columns-block needs that\n    // blockState trick to overcome this. If there would be a onChangeBlocks or\n    // onChangeFormData in Volto core, then BlocksForm could match that API\n    // and this wouldn't be needed (together with the unstable_batchedUpdates\n    // calls).\n    _this.blocksState = {};\n    return _this;\n  }\n  _createClass(ColumnsBlockEdit, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _config$blocks$blocks3, _config$blocks$blocks4, _this$props$data$data, _this$props$data$data2, _prevProps$data$data, _prevProps$data$data$;\n      var variants = ((_config$blocks$blocks3 = config.blocks.blocksConfig) === null || _config$blocks$blocks3 === void 0 ? void 0 : (_config$blocks$blocks4 = _config$blocks$blocks3[COLUMNSBLOCK]) === null || _config$blocks$blocks4 === void 0 ? void 0 : _config$blocks$blocks4.variants) || [];\n      var cols = ((_this$props$data$data = this.props.data.data) === null || _this$props$data$data === void 0 ? void 0 : (_this$props$data$data2 = _this$props$data$data.blocks_layout) === null || _this$props$data$data2 === void 0 ? void 0 : _this$props$data$data2.items) || [];\n      var prevCols = ((_prevProps$data$data = prevProps.data.data) === null || _prevProps$data$data === void 0 ? void 0 : (_prevProps$data$data$ = _prevProps$data$data.blocks_layout) === null || _prevProps$data$data$ === void 0 ? void 0 : _prevProps$data$data$.items) || [];\n      var colNumChanged = cols.length !== prevCols.length;\n      var initialLayoutSelection = Object.keys(prevProps.data).length === 1;\n      var shouldUpdateLayout = colNumChanged && !initialLayoutSelection;\n      if (shouldUpdateLayout) {\n        var available_variants = variants.filter(function (_ref5) {\n          var _defaultData$gridCols2;\n          var defaultData = _ref5.defaultData;\n          return (defaultData === null || defaultData === void 0 ? void 0 : (_defaultData$gridCols2 = defaultData.gridCols) === null || _defaultData$gridCols2 === void 0 ? void 0 : _defaultData$gridCols2.length) === cols.length;\n        });\n        var variant = available_variants === null || available_variants === void 0 ? void 0 : available_variants[0];\n        if (variant) {\n          return this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n            gridSize: variant.defaultData.gridSize,\n            gridCols: variant.defaultData.gridCols\n          }));\n        }\n      }\n      var _this$props3 = this.props,\n        block = _this$props3.block,\n        onChangeBlock = _this$props3.onChangeBlock,\n        data = _this$props3.data;\n\n      // fill empty columns\n      if (hasColumns(data.data)) {\n        forEachColumn(data.data, function (_ref6) {\n          var _ref7 = _slicedToArray(_ref6, 2),\n            colId = _ref7[0],\n            colData = _ref7[1];\n          if (columnIsEmpty(colData)) {\n            var newData = _objectSpread(_objectSpread({}, data), {}, {\n              data: _objectSpread(_objectSpread({}, data.data), {}, {\n                blocks: _objectSpread(_objectSpread({}, data.data.blocks), {}, _defineProperty({}, colId, defaultNewColumn()))\n              })\n            });\n            onChangeBlock(block, newData);\n          }\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _coldata$blocks4,\n        _this2 = this,\n        _data$data3,\n        _data$data3$blocks,\n        _data$data3$blocks$th;\n      var _this$props4 = this.props,\n        block = _this$props4.block,\n        data = _this$props4.data,\n        onChangeBlock = _this$props4.onChangeBlock,\n        pathname = _this$props4.pathname,\n        selected = _this$props4.selected,\n        manage = _this$props4.manage;\n      var metadata = this.props.metadata || this.props.properties;\n      var gridCols = data.gridCols,\n        gridSize = data.gridSize;\n      var coldata = data.data;\n      var columnList = getColumns(coldata);\n      var selectedCol = Object.keys(this.state.colSelections).length > 0 ? Object.keys(this.state.colSelections)[0] : null;\n      var selectedColData = (coldata === null || coldata === void 0 ? void 0 : (_coldata$blocks4 = coldata.blocks) === null || _coldata$blocks4 === void 0 ? void 0 : _coldata$blocks4[selectedCol]) || null;\n      var selectedBlock = this.state.colSelections[selectedCol];\n      var _config$blocks$blocks5 = config.blocks.blocksConfig[COLUMNSBLOCK],\n        gridSizes = _config$blocks$blocks5.gridSizes,\n        variants = _config$blocks$blocks5.variants,\n        available_colors = _config$blocks$blocks5.available_colors;\n      var ColumnSchema = makeStyleSchema({\n        available_colors: available_colors\n      }, this.props.intl);\n      return __jsx(\"div\", {\n        role: \"presentation\",\n        className: \"columns-block\",\n        onKeyDown: function onKeyDown(e) {\n          _this2.handleKeyDown(e, _this2.props.index, _this2.props.block, _this2.props.blockNode.current);\n        }\n        // The tabIndex is required for the keyboard navigation\n        /* eslint-disable jsx-a11y/no-noninteractive-tabindex */,\n        tabIndex: -1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 7\n        }\n      }, data.coldata ? 'old style columns block, safe to remove it' : '', !(data !== null && data !== void 0 && data.data) ? __jsx(ColumnVariations, {\n        variants: variants.filter(function (variant) {\n          return variant.common;\n        }),\n        data: data,\n        onChange: function onChange(initialData) {\n          onChangeBlock(block, _objectSpread(_objectSpread({}, data), _this2.createFrom(initialData)));\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 11\n        }\n      }) : __jsx(React.Fragment, null, __jsx(\"div\", {\n        className: \"columns-header\",\n        onClick: function onClick() {\n          _this2.setState({\n            showSidebar: true,\n            colSelections: {}\n          });\n          _this2.props.setSidebarTab(1);\n        },\n        \"aria-hidden\": \"true\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 13\n        }\n      }, data.title || __jsx(FormattedMessage, {\n        id: \"Columns block\",\n        defaultMessage: \"Columns block\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 17\n        }\n      })), __jsx(Grid, {\n        columns: gridSize,\n        className: \"column-grid\",\n        stackable: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 13\n        }\n      }, columnList.map(function (_ref8, index) {\n        var _data$data, _data$data$blocks, _data$data$blocks$col, _data$data$blocks$col2, _data$data2, _data$data2$blocks, _data$data2$blocks$co, _data$instructions;\n        var _ref9 = _slicedToArray(_ref8, 2),\n          colId = _ref9[0],\n          column = _ref9[1];\n        return __jsx(Grid.Column, _extends({\n          className: cx('block-column', data === null || data === void 0 ? void 0 : (_data$data = data.data) === null || _data$data === void 0 ? void 0 : (_data$data$blocks = _data$data.blocks) === null || _data$data$blocks === void 0 ? void 0 : (_data$data$blocks$col = _data$data$blocks[colId]) === null || _data$data$blocks$col === void 0 ? void 0 : (_data$data$blocks$col2 = _data$data$blocks$col.settings) === null || _data$data$blocks$col2 === void 0 ? void 0 : _data$data$blocks$col2.column_class),\n          key: colId\n        }, gridSizes[gridCols[index]] || gridCols[index], getStyle((data === null || data === void 0 ? void 0 : (_data$data2 = data.data) === null || _data$data2 === void 0 ? void 0 : (_data$data2$blocks = _data$data2.blocks) === null || _data$data2$blocks === void 0 ? void 0 : (_data$data2$blocks$co = _data$data2$blocks[colId]) === null || _data$data2$blocks$co === void 0 ? void 0 : _data$data2$blocks$co.settings) || {}), {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 17\n          }\n        }), __jsx(BlocksForm, {\n          key: colId,\n          title: data === null || data === void 0 ? void 0 : data.placeholder,\n          description: data === null || data === void 0 ? void 0 : (_data$instructions = data.instructions) === null || _data$instructions === void 0 ? void 0 : _data$instructions.data,\n          manage: manage,\n          allowedBlocks: data === null || data === void 0 ? void 0 : data.allowedBlocks,\n          metadata: metadata,\n          properties: _objectSpread(_objectSpread({}, metadata), _isEmpty(column) ? emptyBlocksForm() : column),\n          disableEvents: true,\n          selectedBlock: selected ? _this2.state.colSelections[colId] : null,\n          onSelectBlock: function onSelectBlock(id, selected, e) {\n            var isMultipleSelection = e ? e.shiftKey || e.ctrlKey || e.metaKey : false;\n            _this2.onSelectBlock(id, colId, selectedColData, selectedBlock, selectedCol !== colId || selectedBlock === id ? false : isMultipleSelection, e);\n          },\n          onChangeFormData: function onChangeFormData(newFormData) {\n            var _coldata$blocks5;\n            onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n              data: _objectSpread(_objectSpread({}, coldata), {}, {\n                blocks: _objectSpread(_objectSpread({}, coldata.blocks), {}, _defineProperty({}, colId, _objectSpread(_objectSpread({}, (_coldata$blocks5 = coldata.blocks) === null || _coldata$blocks5 === void 0 ? void 0 : _coldata$blocks5[colId]), {}, {\n                  blocks: newFormData.blocks,\n                  blocks_layout: newFormData.blocks_layout\n                })))\n              })\n            }));\n          },\n          onChangeField: function onChangeField(id, value) {\n            return _this2.onChangeColumnData(id, value, colId);\n          },\n          pathname: pathname,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 19\n          }\n        }, function (_ref10, editBlock, blockProps) {\n          var draginfo = _ref10.draginfo;\n          return __jsx(EditBlockWrapper, {\n            draginfo: draginfo,\n            blockProps: blockProps,\n            extraControls: __jsx(React.Fragment, null, !(data !== null && data !== void 0 && data.readOnlySettings) && __jsx(Button, {\n              icon: true,\n              basic: true,\n              title: _this2.props.intl.formatMessage(messages.labelToColSettings),\n              onClick: function onClick() {\n                _this2.setState({\n                  showSidebar: true,\n                  activeColumn: colId,\n                  colSelections: {}\n                });\n                _this2.props.setSidebarTab(1);\n              },\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 436,\n                columnNumber: 31\n              }\n            }, __jsx(Icon, {\n              name: tuneSVG,\n              className: \"\",\n              size: \"19px\",\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 451,\n                columnNumber: 33\n              }\n            }))),\n            multiSelected: _this2.state.multiSelected.includes(blockProps.block),\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 430,\n              columnNumber: 23\n            }\n          }, editBlock);\n        }));\n      }))), selected && selectedColData ? __jsx(BlocksToolbar, {\n        formData: selectedColData,\n        selectedBlock: selectedBlock,\n        selectedBlocks: this.state.multiSelected,\n        onChangeBlocks: function onChangeBlocks(newBlockData) {\n          onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n            data: _objectSpread(_objectSpread({}, coldata), {}, {\n              blocks: _objectSpread(_objectSpread({}, coldata.blocks), {}, _defineProperty({}, selectedCol, _objectSpread(_objectSpread({}, selectedColData), newBlockData)))\n            })\n          }));\n        },\n        onSetSelectedBlocks: function onSetSelectedBlocks(blockIds) {\n          _this2.setState({\n            multiSelected: blockIds\n          });\n        },\n        onSelectBlock: this.onSelectBlock,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 11\n        }\n      }) : '', Object.keys(this.state.colSelections).length === 0 && !(data !== null && data !== void 0 && data.readOnlySettings) ? __jsx(SidebarPortal, {\n        selected: selected,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 11\n        }\n      }, this.state.activeColumn ? __jsx(React.Fragment, null, __jsx(Segment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 17\n        }\n      }, __jsx(Button, {\n        onClick: function onClick() {\n          return _this2.setState({\n            activeColumn: null\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 19\n        }\n      }, __jsx(Icon, {\n        name: upSVG,\n        size: \"14px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 21\n        }\n      }), __jsx(FormattedMessage, {\n        id: \"Edit parent columns block\",\n        defaultMessage: \"Edit parent columns block\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 504,\n          columnNumber: 21\n        }\n      }))), __jsx(InlineForm, {\n        schema: ColumnSchema,\n        title: \"\".concat(this.props.intl.formatMessage(messages.labelColumn), \" \").concat(columnList.map(function (_ref11) {\n          var _ref12 = _slicedToArray(_ref11, 1),\n            colId = _ref12[0];\n          return colId;\n        }).indexOf(this.state.activeColumn) + 1),\n        onChangeField: this.onChangeColumnSettings,\n        formData: (data === null || data === void 0 ? void 0 : (_data$data3 = data.data) === null || _data$data3 === void 0 ? void 0 : (_data$data3$blocks = _data$data3.blocks) === null || _data$data3$blocks === void 0 ? void 0 : (_data$data3$blocks$th = _data$data3$blocks[this.state.activeColumn]) === null || _data$data3$blocks$th === void 0 ? void 0 : _data$data3$blocks$th.settings) || {},\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 510,\n          columnNumber: 17\n        }\n      })) : __jsx(InlineForm, {\n        schema: this.getColumnsBlockSchema(),\n        title: this.props.intl.formatMessage(messages.labelColumnsBlock),\n        onChangeField: function onChangeField(id, value) {\n          onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, _defineProperty({}, id, value)));\n        },\n        formData: data,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 15\n        }\n      })) : '');\n    }\n  }]);\n  return ColumnsBlockEdit;\n}(React.Component);\nexport default compose(injectIntl, connect(function (state, props) {\n  return {};\n}, {\n  setSidebarTab: setSidebarTab\n}))(ColumnsBlockEdit);","map":{"version":3,"names":["React","defineMessages","FormattedMessage","injectIntl","compose","Grid","Segment","SidebarPortal","BlocksToolbar","Icon","InlineForm","emptyBlocksForm","getBlocksLayoutFieldname","setSidebarTab","connect","BlocksForm","Button","config","cx","ColumnsBlockSchema","getColumns","empty","defaultNewColumn","hasColumns","forEachColumn","columnIsEmpty","ColumnVariations","EditBlockWrapper","COLUMNSBLOCK","makeStyleSchema","getStyle","tuneSVG","upSVG","messages","labelColumn","labelColumnsBlock","labelToColSettings","ColumnsBlockEdit","props","initialData","gridCols","gridSize","data","length","e","index","block","node","disableEnter","disableArrowUp","disableArrowDown","hasblockActive","Object","keys","state","colSelections","key","onFocusPreviousBlock","preventDefault","onFocusNextBlock","onAddBlock","settings","defaultBlockType","id","value","onChangeBlock","coldata","formData","blocks","activeColumn","colId","onChangeField","indexOf","blocksState","colData","activeBlock","isMultipleSelection","event","newMultiSelected","selected","blocksLayoutFieldname","blocks_layout","items","shiftKey","anchor","multiSelected","focus","slice","ctrlKey","metaKey","includes","setState","variants","blocksConfig","schema","intl","nrOfColumns","available_variants","filter","defaultData","properties","choices","map","title","showSidebar","prevProps","cols","prevCols","colNumChanged","initialLayoutSelection","shouldUpdateLayout","variant","newData","pathname","manage","metadata","columnList","selectedCol","selectedColData","selectedBlock","gridSizes","available_colors","ColumnSchema","handleKeyDown","blockNode","current","common","createFrom","column","column_class","placeholder","instructions","allowedBlocks","onSelectBlock","newFormData","onChangeColumnData","editBlock","blockProps","draginfo","readOnlySettings","formatMessage","newBlockData","blockIds","onChangeColumnSettings","getColumnsBlockSchema","Component"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-columns-block/src/ColumnsBlock/ColumnsBlockEdit.jsx"],"sourcesContent":["import React from 'react';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport { compose } from 'redux';\nimport { Grid, Segment } from 'semantic-ui-react';\nimport { isEmpty, without } from 'lodash';\nimport { SidebarPortal, BlocksToolbar, Icon } from '@plone/volto/components'; // BlocksForm, Icon,\nimport InlineForm from '@plone/volto/components/manage/Form/InlineForm';\nimport {\n  emptyBlocksForm,\n  getBlocksLayoutFieldname,\n} from '@plone/volto/helpers';\nimport { setSidebarTab } from '@plone/volto/actions';\nimport { connect } from 'react-redux';\nimport { BlocksForm } from '@plone/volto/components';\nimport { Button } from 'semantic-ui-react';\nimport config from '@plone/volto/registry';\nimport cx from 'classnames';\n\nimport { ColumnsBlockSchema } from './schema';\nimport {\n  getColumns,\n  empty,\n  defaultNewColumn,\n  hasColumns,\n  forEachColumn,\n  columnIsEmpty,\n} from './utils';\nimport ColumnVariations from './ColumnVariations';\nimport EditBlockWrapper from './EditBlockWrapper';\n\nimport { COLUMNSBLOCK } from '@eeacms/volto-columns-block/constants';\nimport { makeStyleSchema, getStyle } from '../Styles';\n\nimport tuneSVG from '@plone/volto/icons/column.svg';\nimport upSVG from '@plone/volto/icons/up.svg';\n\nimport '../less/columns.less';\n\nconst messages = defineMessages({\n  labelColumn: {\n    id: 'Column',\n    defaultMessage: 'Column',\n  },\n  labelColumnsBlock: {\n    id: 'Columns block',\n    defaultMessage: 'Columns block',\n  },\n  labelToColSettings: {\n    id: 'Go to Column settings',\n    defaultMessage: 'Go to Column settings',\n  },\n});\n\n/*\n * not pretty, there's a lot of render props passing, to please React\n * reconciliation algos\n *\n\nColumnsBlockEdit -> passes EditBlockWrapper into\n  -> BlocksForm -> which passes (with EditBlock) into\n    -> DragDropList -> which renders them all\n*/\nclass ColumnsBlockEdit extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      multiSelected: [],\n      colSelections: {}, // selected block for each column\n      showSidebar: false,\n      activeColumn: null,\n    };\n\n    // This special variable is needed because of the onChangeField(block...) is\n    // immediately followed by onChangeField(blocks_layout...), we want to save\n    // this incoming information as data for the block, but because it is only\n    // partial, we'll overwrite it in the second request. So we take advantage\n    // of what happens between batched updates, we know that there will be two\n    // calls, so even if we overwrite the state improperly on the first pass,\n    // it will be fixed on the second pass if we have access to the proper\n    // value from the first pass.\n    //\n    // We have volto-slate that does:\n    // ReactDOM.unstable_batchedUpdates(() => {\n    //    this.onChangeField(blocks, {})\n    //    this.onChangeField(blocks_layout, {})\n    // }\n    // volto-slate needs to be neutral, to work in the main Volto form, but\n    // also these types of subforms, so it should continue to use batched\n    // onChangeField, as that works fine. So volto-columns-block needs that\n    // blockState trick to overcome this. If there would be a onChangeBlocks or\n    // onChangeFormData in Volto core, then BlocksForm could match that API\n    // and this wouldn't be needed (together with the unstable_batchedUpdates\n    // calls).\n    this.blocksState = {};\n  }\n\n  createFrom = (initialData) => {\n    const { gridCols, gridSize } = initialData;\n    return {\n      data: empty(gridCols.length),\n      gridSize,\n      gridCols,\n    };\n  };\n\n  handleKeyDown = (\n    e,\n    index,\n    block,\n    node,\n    {\n      disableEnter = false,\n      disableArrowUp = false,\n      disableArrowDown = false,\n    } = {},\n  ) => {\n    const hasblockActive = Object.keys(this.state.colSelections).length > 0;\n    if (e.key === 'ArrowUp' && !disableArrowUp && !hasblockActive) {\n      this.props.onFocusPreviousBlock(block, node);\n      e.preventDefault();\n    }\n    if (e.key === 'ArrowDown' && !disableArrowDown && !hasblockActive) {\n      this.props.onFocusNextBlock(block, node);\n      e.preventDefault();\n    }\n    if (e.key === 'Enter' && !disableEnter && !hasblockActive) {\n      this.props.onAddBlock(config.settings.defaultBlockType, index + 1);\n      e.preventDefault();\n    }\n  };\n\n  onChangeColumnSettings = (id, value) => {\n    const { data, onChangeBlock, block } = this.props;\n    const coldata = data.data;\n    const formData = {\n      ...data,\n      data: {\n        ...coldata,\n        blocks: {\n          ...coldata.blocks,\n          [this.state.activeColumn]: {\n            ...coldata.blocks?.[this.state.activeColumn],\n            settings: {\n              ...coldata.blocks?.[this.state.activeColumn]?.settings,\n              [id]: value,\n            },\n          },\n        },\n      },\n    };\n    onChangeBlock(block, formData);\n  };\n\n  onChangeColumnData = (id, value, colId) => {\n    const { data, onChangeBlock, block, onChangeField } = this.props;\n    const coldata = data.data;\n    // special handling of blocks and blocks_layout\n    if (['blocks', 'blocks_layout'].indexOf(id) > -1) {\n      this.blocksState[id] = value;\n      onChangeBlock(block, {\n        ...data,\n        data: {\n          ...coldata,\n          blocks: {\n            ...coldata.blocks,\n            [colId]: {\n              ...coldata.blocks?.[colId],\n              ...this.blocksState,\n            },\n          },\n        },\n      });\n    } else {\n      onChangeField(id, value);\n    }\n  };\n\n  onSelectBlock = (\n    id,\n    colId,\n    colData,\n    activeBlock,\n    isMultipleSelection,\n    event,\n  ) => {\n    let newMultiSelected = [];\n    let selected = id;\n\n    if (isMultipleSelection) {\n      selected = null;\n      const blocksLayoutFieldname = getBlocksLayoutFieldname(colData);\n\n      const blocks_layout = colData[blocksLayoutFieldname].items;\n\n      if (event.shiftKey) {\n        const anchor =\n          this.state.multiSelected.length > 0\n            ? blocks_layout.indexOf(this.state.multiSelected[0])\n            : blocks_layout.indexOf(activeBlock);\n        const focus = blocks_layout.indexOf(id);\n\n        if (anchor === focus) {\n          newMultiSelected = [id];\n        } else if (focus > anchor) {\n          newMultiSelected = [...blocks_layout.slice(anchor, focus + 1)];\n        } else {\n          newMultiSelected = [...blocks_layout.slice(focus, anchor + 1)];\n        }\n      }\n\n      if ((event.ctrlKey || event.metaKey) && !event.shiftKey) {\n        if (this.state.multiSelected.includes(id)) {\n          selected = null;\n          newMultiSelected = without(this.state.multiSelected, id);\n        } else {\n          newMultiSelected = [...(this.state.multiSelected || []), id];\n        }\n      }\n    }\n\n    this.setState({\n      multiSelected: newMultiSelected,\n      colSelections: {\n        // this invalidates selection in all other columns\n        [colId]: selected,\n      },\n    });\n  };\n\n  getColumnsBlockSchema = () => {\n    const variants = config.blocks.blocksConfig?.[COLUMNSBLOCK]?.variants || [];\n    const schema = ColumnsBlockSchema(this.props.intl);\n    const { data } = this.props;\n    const { blocks_layout = {} } = data.data || {};\n    const nrOfColumns = (blocks_layout?.items || []).length;\n    const available_variants = variants.filter(\n      ({ defaultData }) => defaultData?.gridCols?.length === nrOfColumns,\n    );\n\n    schema.properties.gridCols.choices = available_variants.map(\n      ({ defaultData, title }) => [defaultData?.gridCols, title],\n    );\n    return schema;\n  };\n\n  componentDidUpdate(prevProps) {\n    const variants = config.blocks.blocksConfig?.[COLUMNSBLOCK]?.variants || [];\n    const cols = this.props.data.data?.blocks_layout?.items || [];\n    const prevCols = prevProps.data.data?.blocks_layout?.items || [];\n\n    const colNumChanged = cols.length !== prevCols.length;\n    const initialLayoutSelection = Object.keys(prevProps.data).length === 1;\n    const shouldUpdateLayout = colNumChanged && !initialLayoutSelection;\n\n    if (shouldUpdateLayout) {\n      const available_variants = variants.filter(\n        ({ defaultData }) => defaultData?.gridCols?.length === cols.length,\n      );\n      const variant = available_variants?.[0];\n      if (variant) {\n        return this.props.onChangeBlock(this.props.block, {\n          ...this.props.data,\n          gridSize: variant.defaultData.gridSize,\n          gridCols: variant.defaultData.gridCols,\n        });\n      }\n    }\n\n    const { block, onChangeBlock, data } = this.props;\n\n    // fill empty columns\n    if (hasColumns(data.data)) {\n      forEachColumn(data.data, ([colId, colData]) => {\n        if (columnIsEmpty(colData)) {\n          const newData = {\n            ...data,\n            data: {\n              ...data.data,\n              blocks: {\n                ...data.data.blocks,\n                [colId]: defaultNewColumn(),\n              },\n            },\n          };\n          onChangeBlock(block, newData);\n        }\n      });\n    }\n  }\n\n  render() {\n    const {\n      block,\n      data,\n      onChangeBlock,\n      pathname,\n      selected,\n      manage,\n    } = this.props;\n\n    const metadata = this.props.metadata || this.props.properties;\n    const { gridCols, gridSize } = data;\n    const coldata = data.data;\n    const columnList = getColumns(coldata);\n    const selectedCol =\n      Object.keys(this.state.colSelections).length > 0\n        ? Object.keys(this.state.colSelections)[0]\n        : null;\n    const selectedColData = coldata?.blocks?.[selectedCol] || null;\n    const selectedBlock = this.state.colSelections[selectedCol];\n\n    const {\n      gridSizes,\n      variants,\n      available_colors,\n    } = config.blocks.blocksConfig[COLUMNSBLOCK];\n    const ColumnSchema = makeStyleSchema({ available_colors }, this.props.intl);\n\n    return (\n      <div\n        role=\"presentation\"\n        className=\"columns-block\"\n        onKeyDown={(e) => {\n          this.handleKeyDown(\n            e,\n            this.props.index,\n            this.props.block,\n            this.props.blockNode.current,\n          );\n        }}\n        // The tabIndex is required for the keyboard navigation\n        /* eslint-disable jsx-a11y/no-noninteractive-tabindex */\n        tabIndex={-1}\n      >\n        {data.coldata ? 'old style columns block, safe to remove it' : ''}\n        {!data?.data ? (\n          <ColumnVariations\n            variants={variants.filter((variant) => variant.common)}\n            data={data}\n            onChange={(initialData) => {\n              onChangeBlock(block, {\n                ...data,\n                ...this.createFrom(initialData),\n              });\n            }}\n          />\n        ) : (\n          <>\n            <div\n              className=\"columns-header\"\n              onClick={() => {\n                this.setState({\n                  showSidebar: true,\n                  colSelections: {},\n                });\n                this.props.setSidebarTab(1);\n              }}\n              aria-hidden=\"true\"\n            >\n              {data.title || (\n                <FormattedMessage\n                  id=\"Columns block\"\n                  defaultMessage=\"Columns block\"\n                />\n              )}\n            </div>\n            <Grid columns={gridSize} className=\"column-grid\" stackable>\n              {columnList.map(([colId, column], index) => (\n                <Grid.Column\n                  className={cx(\n                    'block-column',\n                    data?.data?.blocks?.[colId]?.settings?.column_class,\n                  )}\n                  key={colId}\n                  {...(gridSizes[gridCols[index]] || gridCols[index])}\n                  {...getStyle(data?.data?.blocks?.[colId]?.settings || {})}\n                >\n                  <BlocksForm\n                    key={colId}\n                    title={data?.placeholder}\n                    description={data?.instructions?.data}\n                    manage={manage}\n                    allowedBlocks={data?.allowedBlocks}\n                    metadata={metadata}\n                    properties={{\n                      ...metadata,\n                      ...(isEmpty(column) ? emptyBlocksForm() : column),\n                    }}\n                    disableEvents={true}\n                    selectedBlock={\n                      selected ? this.state.colSelections[colId] : null\n                    }\n                    onSelectBlock={(id, selected, e) => {\n                      const isMultipleSelection = e\n                        ? e.shiftKey || e.ctrlKey || e.metaKey\n                        : false;\n                      this.onSelectBlock(\n                        id,\n                        colId,\n                        selectedColData,\n                        selectedBlock,\n                        selectedCol !== colId || selectedBlock === id\n                          ? false\n                          : isMultipleSelection,\n                        e,\n                      );\n                    }}\n                    onChangeFormData={(newFormData) => {\n                      onChangeBlock(block, {\n                        ...data,\n                        data: {\n                          ...coldata,\n                          blocks: {\n                            ...coldata.blocks,\n                            [colId]: {\n                              ...coldata.blocks?.[colId],\n                              blocks: newFormData.blocks,\n                              blocks_layout: newFormData.blocks_layout,\n                            },\n                          },\n                        },\n                      });\n                    }}\n                    onChangeField={(id, value) =>\n                      this.onChangeColumnData(id, value, colId)\n                    }\n                    pathname={pathname}\n                  >\n                    {({ draginfo }, editBlock, blockProps) => (\n                      <EditBlockWrapper\n                        draginfo={draginfo}\n                        blockProps={blockProps}\n                        extraControls={\n                          <>\n                            {!data?.readOnlySettings && (\n                              <Button\n                                icon\n                                basic\n                                title={this.props.intl.formatMessage(\n                                  messages.labelToColSettings,\n                                )}\n                                onClick={() => {\n                                  this.setState({\n                                    showSidebar: true,\n                                    activeColumn: colId,\n                                    colSelections: {},\n                                  });\n                                  this.props.setSidebarTab(1);\n                                }}\n                              >\n                                <Icon name={tuneSVG} className=\"\" size=\"19px\" />\n                              </Button>\n                            )}\n                          </>\n                        }\n                        multiSelected={this.state.multiSelected.includes(\n                          blockProps.block,\n                        )}\n                      >\n                        {editBlock}\n                      </EditBlockWrapper>\n                    )}\n                  </BlocksForm>\n                </Grid.Column>\n              ))}\n            </Grid>\n          </>\n        )}\n\n        {selected && selectedColData ? (\n          <BlocksToolbar\n            formData={selectedColData}\n            selectedBlock={selectedBlock}\n            selectedBlocks={this.state.multiSelected}\n            onChangeBlocks={(newBlockData) => {\n              onChangeBlock(block, {\n                ...data,\n                data: {\n                  ...coldata,\n                  blocks: {\n                    ...coldata.blocks,\n                    [selectedCol]: { ...selectedColData, ...newBlockData },\n                  },\n                },\n              });\n            }}\n            onSetSelectedBlocks={(blockIds) => {\n              this.setState({ multiSelected: blockIds });\n            }}\n            onSelectBlock={this.onSelectBlock}\n          />\n        ) : (\n          ''\n        )}\n\n        {Object.keys(this.state.colSelections).length === 0 &&\n        !data?.readOnlySettings ? (\n          <SidebarPortal selected={selected}>\n            {this.state.activeColumn ? (\n              <>\n                <Segment>\n                  <Button onClick={() => this.setState({ activeColumn: null })}>\n                    <Icon name={upSVG} size=\"14px\" />\n                    <FormattedMessage\n                      id=\"Edit parent columns block\"\n                      defaultMessage=\"Edit parent columns block\"\n                    />\n                  </Button>\n                </Segment>\n                <InlineForm\n                  schema={ColumnSchema}\n                  title={`${this.props.intl.formatMessage(\n                    messages.labelColumn,\n                  )} ${\n                    columnList\n                      .map(([colId]) => colId)\n                      .indexOf(this.state.activeColumn) + 1\n                  }`}\n                  onChangeField={this.onChangeColumnSettings}\n                  formData={\n                    data?.data?.blocks?.[this.state.activeColumn]?.settings ||\n                    {}\n                  }\n                />\n              </>\n            ) : (\n              <InlineForm\n                schema={this.getColumnsBlockSchema()}\n                title={this.props.intl.formatMessage(\n                  messages.labelColumnsBlock,\n                )}\n                onChangeField={(id, value) => {\n                  onChangeBlock(block, {\n                    ...data,\n                    [id]: value,\n                  });\n                }}\n                formData={data}\n              />\n            )}\n          </SidebarPortal>\n        ) : (\n          ''\n        )}\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => {\n      return {};\n    },\n    { setSidebarTab },\n  ),\n)(ColumnsBlockEdit);\n"],"mappings":";;;;;;;;;;;;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,cAAc,EAAEC,gBAAgB,EAAEC,UAAU,QAAQ,YAAY;AACzE,SAASC,OAAO,QAAQ,OAAO;AAC/B,SAASC,IAAI,EAAEC,OAAO,QAAQ,mBAAmB;AAEjD,SAASC,aAAa,EAAEC,aAAa,EAAEC,IAAI,QAAQ,yBAAyB,CAAC,CAAC;AAC9E,OAAOC,UAAU,MAAM,gDAAgD;AACvE,SACEC,eAAe,EACfC,wBAAwB,QACnB,sBAAsB;AAC7B,SAASC,aAAa,QAAQ,sBAAsB;AACpD,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,UAAU,QAAQ,yBAAyB;AACpD,SAASC,MAAM,QAAQ,mBAAmB;AAC1C,OAAOC,MAAM,MAAM,uBAAuB;AAC1C,OAAOC,EAAE,MAAM,YAAY;AAE3B,SAASC,kBAAkB,QAAQ,UAAU;AAC7C,SACEC,UAAU,EACVC,KAAK,EACLC,gBAAgB,EAChBC,UAAU,EACVC,aAAa,EACbC,aAAa,QACR,SAAS;AAChB,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,OAAOC,gBAAgB,MAAM,oBAAoB;AAEjD,SAASC,YAAY,QAAQ,uCAAuC;AACpE,SAASC,eAAe,EAAEC,QAAQ,QAAQ,WAAW;AAErD,OAAOC,OAAO,MAAM,+BAA+B;AACnD,OAAOC,KAAK,MAAM,2BAA2B;AAE7C,OAAO,sBAAsB;AAE7B,IAAMC,QAAQ,GAAGhC,cAAc,CAAC;EAC9BiC,WAAW;IAAA;IAAA;EAAA,CAGV;EACDC,iBAAiB;IAAA;IAAA;EAAA,CAGhB;EACDC,kBAAkB;IAAA;IAAA;EAAA;AAIpB,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA,IASMC,gBAAgB;EAAA;EAAA;EACpB,0BAAYC,KAAK,EAAE;IAAA;IAAA;IACjB,0BAAMA,KAAK;IAAE,6DAgCF,UAACC,WAAW,EAAK;MAC5B,IAAQC,QAAQ,GAAeD,WAAW,CAAlCC,QAAQ;QAAEC,QAAQ,GAAKF,WAAW,CAAxBE,QAAQ;MAC1B,OAAO;QACLC,IAAI,EAAErB,KAAK,CAACmB,QAAQ,CAACG,MAAM,CAAC;QAC5BF,QAAQ,EAARA,QAAQ;QACRD,QAAQ,EAARA;MACF,CAAC;IACH,CAAC;IAAA,gEAEe,UACdI,CAAC,EACDC,KAAK,EACLC,KAAK,EACLC,IAAI,EAMD;MAAA,+EADC,CAAC,CAAC;QAAA,yBAHJC,YAAY;QAAZA,YAAY,kCAAG,KAAK;QAAA,2BACpBC,cAAc;QAAdA,cAAc,oCAAG,KAAK;QAAA,6BACtBC,gBAAgB;QAAhBA,gBAAgB,sCAAG,KAAK;MAG1B,IAAMC,cAAc,GAAGC,MAAM,CAACC,IAAI,CAAC,MAAKC,KAAK,CAACC,aAAa,CAAC,CAACZ,MAAM,GAAG,CAAC;MACvE,IAAIC,CAAC,CAACY,GAAG,KAAK,SAAS,IAAI,CAACP,cAAc,IAAI,CAACE,cAAc,EAAE;QAC7D,MAAKb,KAAK,CAACmB,oBAAoB,CAACX,KAAK,EAAEC,IAAI,CAAC;QAC5CH,CAAC,CAACc,cAAc,EAAE;MACpB;MACA,IAAId,CAAC,CAACY,GAAG,KAAK,WAAW,IAAI,CAACN,gBAAgB,IAAI,CAACC,cAAc,EAAE;QACjE,MAAKb,KAAK,CAACqB,gBAAgB,CAACb,KAAK,EAAEC,IAAI,CAAC;QACxCH,CAAC,CAACc,cAAc,EAAE;MACpB;MACA,IAAId,CAAC,CAACY,GAAG,KAAK,OAAO,IAAI,CAACR,YAAY,IAAI,CAACG,cAAc,EAAE;QACzD,MAAKb,KAAK,CAACsB,UAAU,CAAC3C,MAAM,CAAC4C,QAAQ,CAACC,gBAAgB,EAAEjB,KAAK,GAAG,CAAC,CAAC;QAClED,CAAC,CAACc,cAAc,EAAE;MACpB;IACF,CAAC;IAAA,yEAEwB,UAACK,EAAE,EAAEC,KAAK,EAAK;MAAA;MACtC,kBAAuC,MAAK1B,KAAK;QAAzCI,IAAI,eAAJA,IAAI;QAAEuB,aAAa,eAAbA,aAAa;QAAEnB,KAAK,eAALA,KAAK;MAClC,IAAMoB,OAAO,GAAGxB,IAAI,CAACA,IAAI;MACzB,IAAMyB,QAAQ,mCACTzB,IAAI;QACPA,IAAI,kCACCwB,OAAO;UACVE,MAAM,kCACDF,OAAO,CAACE,MAAM,2BAChB,MAAKd,KAAK,CAACe,YAAY,qDACnBH,OAAO,CAACE,MAAM,oDAAd,gBAAiB,MAAKd,KAAK,CAACe,YAAY,CAAC;YAC5CR,QAAQ,sDACHK,OAAO,CAACE,MAAM,8EAAd,iBAAiB,MAAKd,KAAK,CAACe,YAAY,CAAC,0DAAzC,sBAA2CR,QAAQ,2BACrDE,EAAE,EAAGC,KAAK;UACZ;QAEJ;MACF,EACF;MACDC,aAAa,CAACnB,KAAK,EAAEqB,QAAQ,CAAC;IAChC,CAAC;IAAA,qEAEoB,UAACJ,EAAE,EAAEC,KAAK,EAAEM,KAAK,EAAK;MACzC,mBAAsD,MAAKhC,KAAK;QAAxDI,IAAI,gBAAJA,IAAI;QAAEuB,aAAa,gBAAbA,aAAa;QAAEnB,KAAK,gBAALA,KAAK;QAAEyB,aAAa,gBAAbA,aAAa;MACjD,IAAML,OAAO,GAAGxB,IAAI,CAACA,IAAI;MACzB;MACA,IAAI,CAAC,QAAQ,EAAE,eAAe,CAAC,CAAC8B,OAAO,CAACT,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE;QAAA;QAChD,MAAKU,WAAW,CAACV,EAAE,CAAC,GAAGC,KAAK;QAC5BC,aAAa,CAACnB,KAAK,kCACdJ,IAAI;UACPA,IAAI,kCACCwB,OAAO;YACVE,MAAM,kCACDF,OAAO,CAACE,MAAM,2BAChBE,KAAK,sDACDJ,OAAO,CAACE,MAAM,qDAAd,iBAAiBE,KAAK,CAAC,GACvB,MAAKG,WAAW;UAEtB;QACF,GACD;MACJ,CAAC,MAAM;QACLF,aAAa,CAACR,EAAE,EAAEC,KAAK,CAAC;MAC1B;IACF,CAAC;IAAA,gEAEe,UACdD,EAAE,EACFO,KAAK,EACLI,OAAO,EACPC,WAAW,EACXC,mBAAmB,EACnBC,KAAK,EACF;MACH,IAAIC,gBAAgB,GAAG,EAAE;MACzB,IAAIC,QAAQ,GAAGhB,EAAE;MAEjB,IAAIa,mBAAmB,EAAE;QACvBG,QAAQ,GAAG,IAAI;QACf,IAAMC,qBAAqB,GAAGpE,wBAAwB,CAAC8D,OAAO,CAAC;QAE/D,IAAMO,aAAa,GAAGP,OAAO,CAACM,qBAAqB,CAAC,CAACE,KAAK;QAE1D,IAAIL,KAAK,CAACM,QAAQ,EAAE;UAClB,IAAMC,MAAM,GACV,MAAK9B,KAAK,CAAC+B,aAAa,CAAC1C,MAAM,GAAG,CAAC,GAC/BsC,aAAa,CAACT,OAAO,CAAC,MAAKlB,KAAK,CAAC+B,aAAa,CAAC,CAAC,CAAC,CAAC,GAClDJ,aAAa,CAACT,OAAO,CAACG,WAAW,CAAC;UACxC,IAAMW,KAAK,GAAGL,aAAa,CAACT,OAAO,CAACT,EAAE,CAAC;UAEvC,IAAIqB,MAAM,KAAKE,KAAK,EAAE;YACpBR,gBAAgB,GAAG,CAACf,EAAE,CAAC;UACzB,CAAC,MAAM,IAAIuB,KAAK,GAAGF,MAAM,EAAE;YACzBN,gBAAgB,sBAAOG,aAAa,CAACM,KAAK,CAACH,MAAM,EAAEE,KAAK,GAAG,CAAC,CAAC,CAAC;UAChE,CAAC,MAAM;YACLR,gBAAgB,sBAAOG,aAAa,CAACM,KAAK,CAACD,KAAK,EAAEF,MAAM,GAAG,CAAC,CAAC,CAAC;UAChE;QACF;QAEA,IAAI,CAACP,KAAK,CAACW,OAAO,IAAIX,KAAK,CAACY,OAAO,KAAK,CAACZ,KAAK,CAACM,QAAQ,EAAE;UACvD,IAAI,MAAK7B,KAAK,CAAC+B,aAAa,CAACK,QAAQ,CAAC3B,EAAE,CAAC,EAAE;YACzCgB,QAAQ,GAAG,IAAI;YACfD,gBAAgB,GAAG,SAAQ,MAAKxB,KAAK,CAAC+B,aAAa,EAAEtB,EAAE,CAAC;UAC1D,CAAC,MAAM;YACLe,gBAAgB,gCAAQ,MAAKxB,KAAK,CAAC+B,aAAa,IAAI,EAAE,IAAGtB,EAAE,EAAC;UAC9D;QACF;MACF;MAEA,MAAK4B,QAAQ,CAAC;QACZN,aAAa,EAAEP,gBAAgB;QAC/BvB,aAAa,sBAEVe,KAAK,EAAGS,QAAQ;MAErB,CAAC,CAAC;IACJ,CAAC;IAAA,wEAEuB,YAAM;MAAA;MAC5B,IAAMa,QAAQ,GAAG,0BAAA3E,MAAM,CAACmD,MAAM,CAACyB,YAAY,oFAA1B,sBAA6BjE,YAAY,CAAC,2DAA1C,uBAA4CgE,QAAQ,KAAI,EAAE;MAC3E,IAAME,MAAM,GAAG3E,kBAAkB,CAAC,MAAKmB,KAAK,CAACyD,IAAI,CAAC;MAClD,IAAQrD,IAAI,GAAK,MAAKJ,KAAK,CAAnBI,IAAI;MACZ,YAA+BA,IAAI,CAACA,IAAI,IAAI,CAAC,CAAC;QAAA,4BAAtCuC,aAAa;QAAbA,aAAa,oCAAG,CAAC,CAAC;MAC1B,IAAMe,WAAW,GAAG,CAAC,CAAAf,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAEC,KAAK,KAAI,EAAE,EAAEvC,MAAM;MACvD,IAAMsD,kBAAkB,GAAGL,QAAQ,CAACM,MAAM,CACxC;QAAA;QAAA,IAAGC,WAAW,SAAXA,WAAW;QAAA,OAAO,CAAAA,WAAW,aAAXA,WAAW,gDAAXA,WAAW,CAAE3D,QAAQ,0DAArB,sBAAuBG,MAAM,MAAKqD,WAAW;MAAA,EACnE;MAEDF,MAAM,CAACM,UAAU,CAAC5D,QAAQ,CAAC6D,OAAO,GAAGJ,kBAAkB,CAACK,GAAG,CACzD;QAAA,IAAGH,WAAW,SAAXA,WAAW;UAAEI,KAAK,SAALA,KAAK;QAAA,OAAO,CAACJ,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAE3D,QAAQ,EAAE+D,KAAK,CAAC;MAAA,EAC3D;MACD,OAAOT,MAAM;IACf,CAAC;IAlLC,MAAKxC,KAAK,GAAG;MACX+B,aAAa,EAAE,EAAE;MACjB9B,aAAa,EAAE,CAAC,CAAC;MAAE;MACnBiD,WAAW,EAAE,KAAK;MAClBnC,YAAY,EAAE;IAChB,CAAC;;IAED;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,MAAKI,WAAW,GAAG,CAAC,CAAC;IAAC;EACxB;EAAC;IAAA;IAAA,OAuJD,4BAAmBgC,SAAS,EAAE;MAAA;MAC5B,IAAMb,QAAQ,GAAG,2BAAA3E,MAAM,CAACmD,MAAM,CAACyB,YAAY,qFAA1B,uBAA6BjE,YAAY,CAAC,2DAA1C,uBAA4CgE,QAAQ,KAAI,EAAE;MAC3E,IAAMc,IAAI,GAAG,8BAAI,CAACpE,KAAK,CAACI,IAAI,CAACA,IAAI,oFAApB,sBAAsBuC,aAAa,2DAAnC,uBAAqCC,KAAK,KAAI,EAAE;MAC7D,IAAMyB,QAAQ,GAAG,yBAAAF,SAAS,CAAC/D,IAAI,CAACA,IAAI,kFAAnB,qBAAqBuC,aAAa,0DAAlC,sBAAoCC,KAAK,KAAI,EAAE;MAEhE,IAAM0B,aAAa,GAAGF,IAAI,CAAC/D,MAAM,KAAKgE,QAAQ,CAAChE,MAAM;MACrD,IAAMkE,sBAAsB,GAAGzD,MAAM,CAACC,IAAI,CAACoD,SAAS,CAAC/D,IAAI,CAAC,CAACC,MAAM,KAAK,CAAC;MACvE,IAAMmE,kBAAkB,GAAGF,aAAa,IAAI,CAACC,sBAAsB;MAEnE,IAAIC,kBAAkB,EAAE;QACtB,IAAMb,kBAAkB,GAAGL,QAAQ,CAACM,MAAM,CACxC;UAAA;UAAA,IAAGC,WAAW,SAAXA,WAAW;UAAA,OAAO,CAAAA,WAAW,aAAXA,WAAW,iDAAXA,WAAW,CAAE3D,QAAQ,2DAArB,uBAAuBG,MAAM,MAAK+D,IAAI,CAAC/D,MAAM;QAAA,EACnE;QACD,IAAMoE,OAAO,GAAGd,kBAAkB,aAAlBA,kBAAkB,uBAAlBA,kBAAkB,CAAG,CAAC,CAAC;QACvC,IAAIc,OAAO,EAAE;UACX,OAAO,IAAI,CAACzE,KAAK,CAAC2B,aAAa,CAAC,IAAI,CAAC3B,KAAK,CAACQ,KAAK,kCAC3C,IAAI,CAACR,KAAK,CAACI,IAAI;YAClBD,QAAQ,EAAEsE,OAAO,CAACZ,WAAW,CAAC1D,QAAQ;YACtCD,QAAQ,EAAEuE,OAAO,CAACZ,WAAW,CAAC3D;UAAQ,GACtC;QACJ;MACF;MAEA,mBAAuC,IAAI,CAACF,KAAK;QAAzCQ,KAAK,gBAALA,KAAK;QAAEmB,aAAa,gBAAbA,aAAa;QAAEvB,IAAI,gBAAJA,IAAI;;MAElC;MACA,IAAInB,UAAU,CAACmB,IAAI,CAACA,IAAI,CAAC,EAAE;QACzBlB,aAAa,CAACkB,IAAI,CAACA,IAAI,EAAE,iBAAsB;UAAA;YAApB4B,KAAK;YAAEI,OAAO;UACvC,IAAIjD,aAAa,CAACiD,OAAO,CAAC,EAAE;YAC1B,IAAMsC,OAAO,mCACRtE,IAAI;cACPA,IAAI,kCACCA,IAAI,CAACA,IAAI;gBACZ0B,MAAM,kCACD1B,IAAI,CAACA,IAAI,CAAC0B,MAAM,2BAClBE,KAAK,EAAGhD,gBAAgB,EAAE;cAC5B;YACF,EACF;YACD2C,aAAa,CAACnB,KAAK,EAAEkE,OAAO,CAAC;UAC/B;QACF,CAAC,CAAC;MACJ;IACF;EAAC;IAAA;IAAA,OAED,kBAAS;MAAA;QAAA;QAAA;QAAA;QAAA;MACP,mBAOI,IAAI,CAAC1E,KAAK;QANZQ,KAAK,gBAALA,KAAK;QACLJ,IAAI,gBAAJA,IAAI;QACJuB,aAAa,gBAAbA,aAAa;QACbgD,QAAQ,gBAARA,QAAQ;QACRlC,QAAQ,gBAARA,QAAQ;QACRmC,MAAM,gBAANA,MAAM;MAGR,IAAMC,QAAQ,GAAG,IAAI,CAAC7E,KAAK,CAAC6E,QAAQ,IAAI,IAAI,CAAC7E,KAAK,CAAC8D,UAAU;MAC7D,IAAQ5D,QAAQ,GAAeE,IAAI,CAA3BF,QAAQ;QAAEC,QAAQ,GAAKC,IAAI,CAAjBD,QAAQ;MAC1B,IAAMyB,OAAO,GAAGxB,IAAI,CAACA,IAAI;MACzB,IAAM0E,UAAU,GAAGhG,UAAU,CAAC8C,OAAO,CAAC;MACtC,IAAMmD,WAAW,GACfjE,MAAM,CAACC,IAAI,CAAC,IAAI,CAACC,KAAK,CAACC,aAAa,CAAC,CAACZ,MAAM,GAAG,CAAC,GAC5CS,MAAM,CAACC,IAAI,CAAC,IAAI,CAACC,KAAK,CAACC,aAAa,CAAC,CAAC,CAAC,CAAC,GACxC,IAAI;MACV,IAAM+D,eAAe,GAAG,CAAApD,OAAO,aAAPA,OAAO,2CAAPA,OAAO,CAAEE,MAAM,qDAAf,iBAAkBiD,WAAW,CAAC,KAAI,IAAI;MAC9D,IAAME,aAAa,GAAG,IAAI,CAACjE,KAAK,CAACC,aAAa,CAAC8D,WAAW,CAAC;MAE3D,6BAIIpG,MAAM,CAACmD,MAAM,CAACyB,YAAY,CAACjE,YAAY,CAAC;QAH1C4F,SAAS,0BAATA,SAAS;QACT5B,QAAQ,0BAARA,QAAQ;QACR6B,gBAAgB,0BAAhBA,gBAAgB;MAElB,IAAMC,YAAY,GAAG7F,eAAe,CAAC;QAAE4F,gBAAgB,EAAhBA;MAAiB,CAAC,EAAE,IAAI,CAACnF,KAAK,CAACyD,IAAI,CAAC;MAE3E,OACE;QACE,IAAI,EAAC,cAAc;QACnB,SAAS,EAAC,eAAe;QACzB,SAAS,EAAE,mBAACnD,CAAC,EAAK;UAChB,MAAI,CAAC+E,aAAa,CAChB/E,CAAC,EACD,MAAI,CAACN,KAAK,CAACO,KAAK,EAChB,MAAI,CAACP,KAAK,CAACQ,KAAK,EAChB,MAAI,CAACR,KAAK,CAACsF,SAAS,CAACC,OAAO,CAC7B;QACH;QACA;QACA;QACA,QAAQ,EAAE,CAAC,CAAE;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAEZnF,IAAI,CAACwB,OAAO,GAAG,4CAA4C,GAAG,EAAE,EAChE,EAACxB,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEA,IAAI,IACV,MAAC,gBAAgB;QACf,QAAQ,EAAEkD,QAAQ,CAACM,MAAM,CAAC,UAACa,OAAO;UAAA,OAAKA,OAAO,CAACe,MAAM;QAAA,EAAE;QACvD,IAAI,EAAEpF,IAAK;QACX,QAAQ,EAAE,kBAACH,WAAW,EAAK;UACzB0B,aAAa,CAACnB,KAAK,kCACdJ,IAAI,GACJ,MAAI,CAACqF,UAAU,CAACxF,WAAW,CAAC,EAC/B;QACJ,CAAE;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EACF,GAEF,4BACE;QACE,SAAS,EAAC,gBAAgB;QAC1B,OAAO,EAAE,mBAAM;UACb,MAAI,CAACoD,QAAQ,CAAC;YACZa,WAAW,EAAE,IAAI;YACjBjD,aAAa,EAAE,CAAC;UAClB,CAAC,CAAC;UACF,MAAI,CAACjB,KAAK,CAACzB,aAAa,CAAC,CAAC,CAAC;QAC7B,CAAE;QACF,eAAY,MAAM;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAEjB6B,IAAI,CAAC6D,KAAK,IACT,MAAC,gBAAgB;QACf,EAAE,EAAC,eAAe;QAClB,cAAc,EAAC,eAAe;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAEjC,CACG,EACN,MAAC,IAAI;QAAC,OAAO,EAAE9D,QAAS;QAAC,SAAS,EAAC,aAAa;QAAC,SAAS;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GACvD2E,UAAU,CAACd,GAAG,CAAC,iBAAkBzD,KAAK;QAAA;QAAA;UAArByB,KAAK;UAAE0D,MAAM;QAAA,OAC7B,MAAC,IAAI,CAAC,MAAM;UACV,SAAS,EAAE9G,EAAE,CACX,cAAc,EACdwB,IAAI,aAAJA,IAAI,qCAAJA,IAAI,CAAEA,IAAI,oEAAV,WAAY0B,MAAM,+EAAlB,kBAAqBE,KAAK,CAAC,oFAA3B,sBAA6BT,QAAQ,2DAArC,uBAAuCoE,YAAY,CACnD;UACF,GAAG,EAAE3D;QAAM,GACNkD,SAAS,CAAChF,QAAQ,CAACK,KAAK,CAAC,CAAC,IAAIL,QAAQ,CAACK,KAAK,CAAC,EAC9Cf,QAAQ,CAAC,CAAAY,IAAI,aAAJA,IAAI,sCAAJA,IAAI,CAAEA,IAAI,sEAAV,YAAY0B,MAAM,gFAAlB,mBAAqBE,KAAK,CAAC,0DAA3B,sBAA6BT,QAAQ,KAAI,CAAC,CAAC,CAAC;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,IAEzD,MAAC,UAAU;UACT,GAAG,EAAES,KAAM;UACX,KAAK,EAAE5B,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEwF,WAAY;UACzB,WAAW,EAAExF,IAAI,aAAJA,IAAI,6CAAJA,IAAI,CAAEyF,YAAY,uDAAlB,mBAAoBzF,IAAK;UACtC,MAAM,EAAEwE,MAAO;UACf,aAAa,EAAExE,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAE0F,aAAc;UACnC,QAAQ,EAAEjB,QAAS;UACnB,UAAU,kCACLA,QAAQ,GACP,SAAQa,MAAM,CAAC,GAAGrH,eAAe,EAAE,GAAGqH,MAAM,CAChD;UACF,aAAa,EAAE,IAAK;UACpB,aAAa,EACXjD,QAAQ,GAAG,MAAI,CAACzB,KAAK,CAACC,aAAa,CAACe,KAAK,CAAC,GAAG,IAC9C;UACD,aAAa,EAAE,uBAACP,EAAE,EAAEgB,QAAQ,EAAEnC,CAAC,EAAK;YAClC,IAAMgC,mBAAmB,GAAGhC,CAAC,GACzBA,CAAC,CAACuC,QAAQ,IAAIvC,CAAC,CAAC4C,OAAO,IAAI5C,CAAC,CAAC6C,OAAO,GACpC,KAAK;YACT,MAAI,CAAC4C,aAAa,CAChBtE,EAAE,EACFO,KAAK,EACLgD,eAAe,EACfC,aAAa,EACbF,WAAW,KAAK/C,KAAK,IAAIiD,aAAa,KAAKxD,EAAE,GACzC,KAAK,GACLa,mBAAmB,EACvBhC,CAAC,CACF;UACH,CAAE;UACF,gBAAgB,EAAE,0BAAC0F,WAAW,EAAK;YAAA;YACjCrE,aAAa,CAACnB,KAAK,kCACdJ,IAAI;cACPA,IAAI,kCACCwB,OAAO;gBACVE,MAAM,kCACDF,OAAO,CAACE,MAAM,2BAChBE,KAAK,sDACDJ,OAAO,CAACE,MAAM,qDAAd,iBAAiBE,KAAK,CAAC;kBAC1BF,MAAM,EAAEkE,WAAW,CAAClE,MAAM;kBAC1Ba,aAAa,EAAEqD,WAAW,CAACrD;gBAAa;cAE3C;YACF,GACD;UACJ,CAAE;UACF,aAAa,EAAE,uBAAClB,EAAE,EAAEC,KAAK;YAAA,OACvB,MAAI,CAACuE,kBAAkB,CAACxE,EAAE,EAAEC,KAAK,EAAEM,KAAK,CAAC;UAAA,CAC1C;UACD,QAAQ,EAAE2C,QAAS;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,GAElB,kBAAeuB,SAAS,EAAEC,UAAU;UAAA,IAAjCC,QAAQ,UAARA,QAAQ;UAAA,OACV,MAAC,gBAAgB;YACf,QAAQ,EAAEA,QAAS;YACnB,UAAU,EAAED,UAAW;YACvB,aAAa,EACX,4BACG,EAAC/F,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEiG,gBAAgB,KACtB,MAAC,MAAM;cACL,IAAI;cACJ,KAAK;cACL,KAAK,EAAE,MAAI,CAACrG,KAAK,CAACyD,IAAI,CAAC6C,aAAa,CAClC3G,QAAQ,CAACG,kBAAkB,CAC3B;cACF,OAAO,EAAE,mBAAM;gBACb,MAAI,CAACuD,QAAQ,CAAC;kBACZa,WAAW,EAAE,IAAI;kBACjBnC,YAAY,EAAEC,KAAK;kBACnBf,aAAa,EAAE,CAAC;gBAClB,CAAC,CAAC;gBACF,MAAI,CAACjB,KAAK,CAACzB,aAAa,CAAC,CAAC,CAAC;cAC7B,CAAE;cAAA;cAAA;gBAAA;gBAAA;gBAAA;cAAA;YAAA,GAEF,MAAC,IAAI;cAAC,IAAI,EAAEkB,OAAQ;cAAC,SAAS,EAAC,EAAE;cAAC,IAAI,EAAC,MAAM;cAAA;cAAA;gBAAA;gBAAA;gBAAA;cAAA;YAAA,EAAG,CAEnD,CAEJ;YACD,aAAa,EAAE,MAAI,CAACuB,KAAK,CAAC+B,aAAa,CAACK,QAAQ,CAC9C+C,UAAU,CAAC3F,KAAK,CAChB;YAAA;YAAA;cAAA;cAAA;cAAA;YAAA;UAAA,GAED0F,SAAS,CACO;QAAA,CACpB,CACU,CACD;MAAA,CACf,CAAC,CACG,CAEV,EAEAzD,QAAQ,IAAIuC,eAAe,GAC1B,MAAC,aAAa;QACZ,QAAQ,EAAEA,eAAgB;QAC1B,aAAa,EAAEC,aAAc;QAC7B,cAAc,EAAE,IAAI,CAACjE,KAAK,CAAC+B,aAAc;QACzC,cAAc,EAAE,wBAACwD,YAAY,EAAK;UAChC5E,aAAa,CAACnB,KAAK,kCACdJ,IAAI;YACPA,IAAI,kCACCwB,OAAO;cACVE,MAAM,kCACDF,OAAO,CAACE,MAAM,2BAChBiD,WAAW,kCAAQC,eAAe,GAAKuB,YAAY;YACrD;UACF,GACD;QACJ,CAAE;QACF,mBAAmB,EAAE,6BAACC,QAAQ,EAAK;UACjC,MAAI,CAACnD,QAAQ,CAAC;YAAEN,aAAa,EAAEyD;UAAS,CAAC,CAAC;QAC5C,CAAE;QACF,aAAa,EAAE,IAAI,CAACT,aAAc;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAClC,GAEF,EACD,EAEAjF,MAAM,CAACC,IAAI,CAAC,IAAI,CAACC,KAAK,CAACC,aAAa,CAAC,CAACZ,MAAM,KAAK,CAAC,IACnD,EAACD,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEiG,gBAAgB,IACrB,MAAC,aAAa;QAAC,QAAQ,EAAE5D,QAAS;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAC/B,IAAI,CAACzB,KAAK,CAACe,YAAY,GACtB,4BACE,MAAC,OAAO;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GACN,MAAC,MAAM;QAAC,OAAO,EAAE;UAAA,OAAM,MAAI,CAACsB,QAAQ,CAAC;YAAEtB,YAAY,EAAE;UAAK,CAAC,CAAC;QAAA,CAAC;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAC3D,MAAC,IAAI;QAAC,IAAI,EAAErC,KAAM;QAAC,IAAI,EAAC,MAAM;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAAG,EACjC,MAAC,gBAAgB;QACf,EAAE,EAAC,2BAA2B;QAC9B,cAAc,EAAC,2BAA2B;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAC1C,CACK,CACD,EACV,MAAC,UAAU;QACT,MAAM,EAAE0F,YAAa;QACrB,KAAK,YAAK,IAAI,CAACpF,KAAK,CAACyD,IAAI,CAAC6C,aAAa,CACrC3G,QAAQ,CAACC,WAAW,CACrB,cACCkF,UAAU,CACPd,GAAG,CAAC;UAAA;YAAEhC,KAAK;UAAA,OAAMA,KAAK;QAAA,EAAC,CACvBE,OAAO,CAAC,IAAI,CAAClB,KAAK,CAACe,YAAY,CAAC,GAAG,CAAC,CACtC;QACH,aAAa,EAAE,IAAI,CAAC0E,sBAAuB;QAC3C,QAAQ,EACN,CAAArG,IAAI,aAAJA,IAAI,sCAAJA,IAAI,CAAEA,IAAI,sEAAV,YAAY0B,MAAM,gFAAlB,mBAAqB,IAAI,CAACd,KAAK,CAACe,YAAY,CAAC,0DAA7C,sBAA+CR,QAAQ,KACvD,CAAC,CACF;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EACD,CACD,GAEH,MAAC,UAAU;QACT,MAAM,EAAE,IAAI,CAACmF,qBAAqB,EAAG;QACrC,KAAK,EAAE,IAAI,CAAC1G,KAAK,CAACyD,IAAI,CAAC6C,aAAa,CAClC3G,QAAQ,CAACE,iBAAiB,CAC1B;QACF,aAAa,EAAE,uBAAC4B,EAAE,EAAEC,KAAK,EAAK;UAC5BC,aAAa,CAACnB,KAAK,kCACdJ,IAAI,2BACNqB,EAAE,EAAGC,KAAK,GACX;QACJ,CAAE;QACF,QAAQ,EAAEtB,IAAK;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAElB,CACa,GAEhB,EACD,CACG;IAEV;EAAC;EAAA;AAAA,EApe4B1C,KAAK,CAACiJ,SAAS;AAue9C,eAAe7I,OAAO,CACpBD,UAAU,EACVW,OAAO,CACL,UAACwC,KAAK,EAAEhB,KAAK,EAAK;EAChB,OAAO,CAAC,CAAC;AACX,CAAC,EACD;EAAEzB,aAAa,EAAbA;AAAc,CAAC,CAClB,CACF,CAACwB,gBAAgB,CAAC"},"metadata":{"react-intl":{"messages":[{"id":"Column","defaultMessage":"Column"},{"id":"Columns block","defaultMessage":"Columns block"},{"id":"Go to Column settings","defaultMessage":"Go to Column settings"},{"id":"Edit parent columns block","defaultMessage":"Edit parent columns block"}]}},"sourceType":"module","externalDependencies":[]}