{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Widgets/ColorPickerWidget.jsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Form } from 'semantic-ui-react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport { defineMessages, useIntl } from 'react-intl';\nconst messages = defineMessages({\n  Color: {\n    \"id\": \"Color\",\n    \"defaultMessage\": \"Color\"\n  }\n});\nconst ColorPickerWidget = props => {\n  const {\n    id,\n    title,\n    required,\n    value,\n    onChange,\n    colors,\n    className\n  } = props;\n  const intl = useIntl();\n  React.useEffect(() => {\n    if (!props.value && props.default) {\n      props.onChange(props.id, props.default);\n    }\n    // Yes, this is correct.\n  });\n\n  return colors.length > 0 ? __jsx(Form.Field, {\n    inline: true,\n    required: required,\n    className: className,\n    id: 'field-' + id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, __jsx(Grid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }\n  }, __jsx(Grid.Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, __jsx(Grid.Column, {\n    width: \"12\",\n    className: \"color-picker-widget\",\n    verticalAlign: \"middle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    className: \"wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }, __jsx(\"label\", {\n    htmlFor: `field-${id}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 15\n    }\n  }, title ? title : intl.formatMessage(messages.Color)), __jsx(\"div\", {\n    className: \"buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 15\n    }\n  }, colors.map(color => {\n    return __jsx(Button, {\n      key: id + color.name,\n      className: color.name,\n      onClick: e => {\n        e.preventDefault();\n        e.stopPropagation();\n        onChange(id, color.name);\n      },\n      active: value === color.name,\n      circular: true,\n      \"aria-label\": color.label,\n      title: color.label,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 21\n      }\n    });\n  }))))))) : null;\n};\nColorPickerWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  required: PropTypes.bool,\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n  colors: PropTypes.array\n};\nColorPickerWidget.defaultProps = {\n  required: false,\n  value: null,\n  onChange: null,\n  colors: []\n};\nexport default ColorPickerWidget;","map":{"version":3,"names":["React","PropTypes","Form","Grid","Button","defineMessages","useIntl","messages","Color","ColorPickerWidget","props","id","title","required","value","onChange","colors","className","intl","useEffect","default","length","formatMessage","map","color","name","e","preventDefault","stopPropagation","label","propTypes","string","isRequired","bool","func","array","defaultProps"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Widgets/ColorPickerWidget.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Form } from 'semantic-ui-react';\nimport { Grid, Button } from 'semantic-ui-react';\nimport { defineMessages, useIntl } from 'react-intl';\n\nconst messages = defineMessages({\n  Color: {\n    id: 'Color',\n    defaultMessage: 'Color',\n  },\n});\n\nconst ColorPickerWidget = (props) => {\n  const { id, title, required, value, onChange, colors, className } = props;\n\n  const intl = useIntl();\n\n  React.useEffect(() => {\n    if (!props.value && props.default) {\n      props.onChange(props.id, props.default);\n    }\n    // Yes, this is correct.\n  });\n\n  return colors.length > 0 ? (\n    <Form.Field\n      inline\n      required={required}\n      className={className}\n      id={'field-' + id}\n    >\n      <Grid>\n        <Grid.Row>\n          <Grid.Column\n            width=\"12\"\n            className=\"color-picker-widget\"\n            verticalAlign=\"middle\"\n          >\n            <div className=\"wrapper\">\n              <label htmlFor={`field-${id}`}>\n                {title ? title : intl.formatMessage(messages.Color)}\n              </label>\n\n              <div className=\"buttons\">\n                {colors.map((color) => {\n                  return (\n                    <Button\n                      key={id + color.name}\n                      className={color.name}\n                      onClick={(e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        onChange(id, color.name);\n                      }}\n                      active={value === color.name}\n                      circular\n                      aria-label={color.label}\n                      title={color.label}\n                    />\n                  );\n                })}\n              </div>\n            </div>\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </Form.Field>\n  ) : null;\n};\n\nColorPickerWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  required: PropTypes.bool,\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n  colors: PropTypes.array,\n};\n\nColorPickerWidget.defaultProps = {\n  required: false,\n  value: null,\n  onChange: null,\n  colors: [],\n};\n\nexport default ColorPickerWidget;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Color","defaultMessage":"Color"}]}},"sourceType":"module","externalDependencies":[]}