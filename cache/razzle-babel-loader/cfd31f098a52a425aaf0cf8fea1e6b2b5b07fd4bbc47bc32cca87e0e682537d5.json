{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport { Node, Range } from 'slate';\nimport config from '@plone/volto/registry';\n\n/**\n * highlightByType.\n *\n * @param {} editor\n * @param {} node, path\n * @param {} ranges\n */\nexport const highlightByType = (editor, [node, path], ranges) => {\n  const {\n    slate\n  } = config.settings;\n  const {\n    nodeTypesToHighlight\n  } = slate;\n  if (nodeTypesToHighlight.includes(node.type)) {\n    const [found] = Node.texts(editor, {\n      from: path,\n      to: path\n    });\n    const visualSelectionRanges = highlightSelection(editor, found, ranges);\n    const text = Node.string(node) || '';\n    const range = {\n      anchor: {\n        path,\n        offset: 0\n      },\n      focus: {\n        path,\n        offset: text.length\n      },\n      highlight: true,\n      highlightType: visualSelectionRanges.length === 0 ? node.type : null,\n      isSelection: visualSelectionRanges.length > 0\n    };\n    return [range];\n  }\n  return ranges;\n};\n\n/**\n * @function highlightSelection\n *\n * @summary A runtime decorator that decorates the saved selection, when the editor is\n * is no longer active.\n *\n * @param {Editor} editor The editor on which to apply the decorator.\n * @param {Node} node\n * @param {Path} path\n * @param {Array} ranges\n */\nexport function highlightSelection(editor, [node, path], ranges) {\n  let selected = editor.isSelected();\n  if (selected && !editor.selection && editor.getSavedSelection()) {\n    const newSelection = editor.getSavedSelection();\n    if (JSON.stringify(path) === JSON.stringify(newSelection.anchor.path)) {\n      const range = _objectSpread(_objectSpread({}, newSelection), {}, {\n        highlight: true,\n        isSelection: true\n      });\n      if (Range.isExpanded(range)) {\n        ranges.push(range);\n      }\n    }\n  }\n  // if (ranges.length) console.log('RANGES!', ranges, editor.children);\n  // console.log(node, path, editor.savedSelection);\n  return ranges;\n}","map":{"version":3,"names":["Node","Range","config","highlightByType","editor","node","path","ranges","slate","settings","nodeTypesToHighlight","includes","type","found","texts","from","to","visualSelectionRanges","highlightSelection","text","string","range","anchor","offset","focus","length","highlight","highlightType","isSelection","selected","isSelected","selection","getSavedSelection","newSelection","JSON","stringify","isExpanded","push"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/volto-slate/src/editor/decorate.js"],"sourcesContent":["import { Node, Range } from 'slate';\n\nimport config from '@plone/volto/registry';\n\n/**\n * highlightByType.\n *\n * @param {} editor\n * @param {} node, path\n * @param {} ranges\n */\nexport const highlightByType = (editor, [node, path], ranges) => {\n  const { slate } = config.settings;\n  const { nodeTypesToHighlight } = slate;\n\n  if (nodeTypesToHighlight.includes(node.type)) {\n    const [found] = Node.texts(editor, { from: path, to: path });\n    const visualSelectionRanges = highlightSelection(editor, found, ranges);\n    const text = Node.string(node) || '';\n    const range = {\n      anchor: { path, offset: 0 },\n      focus: { path, offset: text.length },\n      highlight: true,\n      highlightType: visualSelectionRanges.length === 0 ? node.type : null,\n      isSelection: visualSelectionRanges.length > 0,\n    };\n    return [range];\n  }\n\n  return ranges;\n};\n\n/**\n * @function highlightSelection\n *\n * @summary A runtime decorator that decorates the saved selection, when the editor is\n * is no longer active.\n *\n * @param {Editor} editor The editor on which to apply the decorator.\n * @param {Node} node\n * @param {Path} path\n * @param {Array} ranges\n */\nexport function highlightSelection(editor, [node, path], ranges) {\n  let selected = editor.isSelected();\n\n  if (selected && !editor.selection && editor.getSavedSelection()) {\n    const newSelection = editor.getSavedSelection();\n    if (JSON.stringify(path) === JSON.stringify(newSelection.anchor.path)) {\n      const range = {\n        ...newSelection,\n        highlight: true,\n        isSelection: true,\n      };\n      if (Range.isExpanded(range)) {\n        ranges.push(range);\n      }\n    }\n  }\n  // if (ranges.length) console.log('RANGES!', ranges, editor.children);\n  // console.log(node, path, editor.savedSelection);\n  return ranges;\n}\n"],"mappings":";;;AAAA,SAASA,IAAI,EAAEC,KAAK,QAAQ,OAAO;AAEnC,OAAOC,MAAM,MAAM,uBAAuB;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,eAAe,GAAG,CAACC,MAAM,EAAE,CAACC,IAAI,EAAEC,IAAI,CAAC,EAAEC,MAAM,KAAK;EAC/D,MAAM;IAAEC;EAAM,CAAC,GAAGN,MAAM,CAACO,QAAQ;EACjC,MAAM;IAAEC;EAAqB,CAAC,GAAGF,KAAK;EAEtC,IAAIE,oBAAoB,CAACC,QAAQ,CAACN,IAAI,CAACO,IAAI,CAAC,EAAE;IAC5C,MAAM,CAACC,KAAK,CAAC,GAAGb,IAAI,CAACc,KAAK,CAACV,MAAM,EAAE;MAAEW,IAAI,EAAET,IAAI;MAAEU,EAAE,EAAEV;IAAK,CAAC,CAAC;IAC5D,MAAMW,qBAAqB,GAAGC,kBAAkB,CAACd,MAAM,EAAES,KAAK,EAAEN,MAAM,CAAC;IACvE,MAAMY,IAAI,GAAGnB,IAAI,CAACoB,MAAM,CAACf,IAAI,CAAC,IAAI,EAAE;IACpC,MAAMgB,KAAK,GAAG;MACZC,MAAM,EAAE;QAAEhB,IAAI;QAAEiB,MAAM,EAAE;MAAE,CAAC;MAC3BC,KAAK,EAAE;QAAElB,IAAI;QAAEiB,MAAM,EAAEJ,IAAI,CAACM;MAAO,CAAC;MACpCC,SAAS,EAAE,IAAI;MACfC,aAAa,EAAEV,qBAAqB,CAACQ,MAAM,KAAK,CAAC,GAAGpB,IAAI,CAACO,IAAI,GAAG,IAAI;MACpEgB,WAAW,EAAEX,qBAAqB,CAACQ,MAAM,GAAG;IAC9C,CAAC;IACD,OAAO,CAACJ,KAAK,CAAC;EAChB;EAEA,OAAOd,MAAM;AACf,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASW,kBAAkB,CAACd,MAAM,EAAE,CAACC,IAAI,EAAEC,IAAI,CAAC,EAAEC,MAAM,EAAE;EAC/D,IAAIsB,QAAQ,GAAGzB,MAAM,CAAC0B,UAAU,EAAE;EAElC,IAAID,QAAQ,IAAI,CAACzB,MAAM,CAAC2B,SAAS,IAAI3B,MAAM,CAAC4B,iBAAiB,EAAE,EAAE;IAC/D,MAAMC,YAAY,GAAG7B,MAAM,CAAC4B,iBAAiB,EAAE;IAC/C,IAAIE,IAAI,CAACC,SAAS,CAAC7B,IAAI,CAAC,KAAK4B,IAAI,CAACC,SAAS,CAACF,YAAY,CAACX,MAAM,CAAChB,IAAI,CAAC,EAAE;MACrE,MAAMe,KAAK,mCACNY,YAAY;QACfP,SAAS,EAAE,IAAI;QACfE,WAAW,EAAE;MAAI,EAClB;MACD,IAAI3B,KAAK,CAACmC,UAAU,CAACf,KAAK,CAAC,EAAE;QAC3Bd,MAAM,CAAC8B,IAAI,CAAChB,KAAK,CAAC;MACpB;IACF;EACF;EACA;EACA;EACA,OAAOd,MAAM;AACf"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}