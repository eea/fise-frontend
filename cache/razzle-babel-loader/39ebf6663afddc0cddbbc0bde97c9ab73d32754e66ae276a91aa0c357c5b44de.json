{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/helpers/Extensions/withBlockSchemaEnhancer.js\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectDestructuringEmpty(obj) { if (obj == null) throw new TypeError(\"Cannot destructure \" + obj); }\nimport { defineMessages } from 'react-intl';\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport config from '@plone/volto/registry';\nimport { cloneDeepSchema } from '@plone/volto/helpers/Utils/Utils';\nimport { defaultStyleSchema } from '@plone/volto/components/manage/Blocks/Block/StylesSchema';\nconst messages = defineMessages({\n  variation: {\n    \"id\": \"Variation\",\n    \"defaultMessage\": \"Variation\"\n  },\n  styling: {\n    \"id\": \"Styling\",\n    \"defaultMessage\": \"Styling\"\n  }\n});\n\n/**\n * Sets the field name as first field in schema\n */\nfunction _addField(schema, name) {\n  if (schema.fieldsets[0].fields.indexOf(name) === -1) {\n    schema.fieldsets[0].fields.unshift(name);\n  }\n}\n\n/**\n * Gets the blocksConfig from the props or from the global config object\n */\nfunction getBlocksConfig(props) {\n  const {\n    blocks\n  } = config;\n  if (props.blocksConfig) {\n    return props.blocksConfig;\n  }\n  return blocks === null || blocks === void 0 ? void 0 : blocks.blocksConfig;\n}\n\n/**\n * Utility function that adds the Select dropdown field to a schema\n */\nexport const addExtensionFieldToSchema = ({\n  schema,\n  name,\n  items,\n  intl,\n  title,\n  description,\n  insertFieldToOrder = _addField\n}) => {\n  const _ = intl.formatMessage;\n  insertFieldToOrder(schema, name);\n  const hasDefaultExtension = (items === null || items === void 0 ? void 0 : items.findIndex(({\n    isDefault\n  }) => isDefault)) > -1;\n  if (!hasDefaultExtension) {\n    // eslint-disable-next-line\n    console.warn('You should provide a default extension in extension:', name);\n  }\n  schema.properties[name] = {\n    title: _(title),\n    choices: items === null || items === void 0 ? void 0 : items.map(({\n      id,\n      title\n    }) => [id, _({\n      id: title,\n      defaultMessage: title\n    })]),\n    noValueOption: false,\n    default: hasDefaultExtension ? items === null || items === void 0 ? void 0 : items.find(item => item.isDefault).id : null\n  };\n  return schema;\n};\n\n/**\n * A generic HOC that provides \"schema enhancer functionality\" for any custom\n * block extension.\n *\n * This enables blocks to have additional \"variations\", beyond the usual\n * `variations` field. This function is not directly used by Volto.\n *\n * To be used with a block configuration like:\n *\n * ```\n *  {\n *    id: 'someBlockId',\n *    extensions: {\n *      '<someExtensionName>': {\n *        items: [\n *          {\n *            id: 'selectFacet',\n *            title: 'Select',\n *            view: SelectFacet,\n *            isDefault: true,\n *          },\n *          {\n *            id: 'checkboxFacet',\n *            title: 'Checkbox',\n *            view: CheckboxFacet,\n *            isDefault: false,\n *          },\n *        ]\n *      }\n *     }\n *  }\n * ```\n */\nexport const withBlockSchemaEnhancer = (FormComponent, extensionName = 'vendor', insertFieldToOrder = _addField) => _ref => {\n  var _blocksConfig$blockTy, _blocksConfig$blockTy2, _extensionConfig$item, _extensionConfig$item2, _activeItem, _blocksConfig$blockTy3, _extensionConfig$item3;\n  let props = Object.assign({}, (_objectDestructuringEmpty(_ref), _ref));\n  const {\n    formData,\n    schema: originalSchema\n  } = props;\n  const intl = useIntl();\n  const blocksConfig = getBlocksConfig(props);\n  const blockType = formData['@type'];\n  const extensionConfig = blocksConfig === null || blocksConfig === void 0 ? void 0 : (_blocksConfig$blockTy = blocksConfig[blockType]) === null || _blocksConfig$blockTy === void 0 ? void 0 : (_blocksConfig$blockTy2 = _blocksConfig$blockTy.extensions) === null || _blocksConfig$blockTy2 === void 0 ? void 0 : _blocksConfig$blockTy2[extensionName];\n  if (!extensionConfig) return __jsx(FormComponent, _extends({}, props, {\n    schema: originalSchema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 12\n    }\n  }));\n  const activeItemName = formData === null || formData === void 0 ? void 0 : formData[extensionName];\n  let activeItem = (_extensionConfig$item = extensionConfig.items) === null || _extensionConfig$item === void 0 ? void 0 : _extensionConfig$item.find(item => item.id === activeItemName);\n  if (!activeItem) activeItem = (_extensionConfig$item2 = extensionConfig.items) === null || _extensionConfig$item2 === void 0 ? void 0 : _extensionConfig$item2.find(item => item.isDefault);\n  const schemaEnhancer =\n  // For the main \"variation\" of blocks, allow simply passing a\n  // schemaEnhancer in the block configuration\n  ((_activeItem = activeItem) === null || _activeItem === void 0 ? void 0 : _activeItem['schemaEnhancer']) || extensionName === 'variation' && (blocksConfig === null || blocksConfig === void 0 ? void 0 : (_blocksConfig$blockTy3 = blocksConfig[blockType]) === null || _blocksConfig$blockTy3 === void 0 ? void 0 : _blocksConfig$blockTy3.schemaEnhancer);\n  let schema = schemaEnhancer ? schemaEnhancer({\n    schema: cloneDeepSchema(originalSchema),\n    formData,\n    intl\n  }) : cloneDeepSchema(originalSchema);\n  const {\n    title = messages.variation,\n    description\n  } = extensionConfig;\n  if (((_extensionConfig$item3 = extensionConfig.items) === null || _extensionConfig$item3 === void 0 ? void 0 : _extensionConfig$item3.length) > 1) {\n    addExtensionFieldToSchema({\n      schema,\n      name: extensionName,\n      items: extensionConfig.items || [],\n      intl,\n      title,\n      description,\n      insertFieldToOrder\n    });\n  }\n  return __jsx(FormComponent, _extends({}, props, {\n    schema: schema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 10\n    }\n  }));\n};\n\n/**\n * Apply block variation schema enhancers to the provided schema, using block\n * information from the provided block data (as `formData`).\n *\n * Blocks can be enhanced with variations declared like:\n *\n * ```\n *  {\n *    id: 'searchBlock',\n *    schemaEnhancer: ({schema, formData, intl}) => schema,\n *    variations: [\n *      {\n *        id: 'facetsRightSide',\n *        title: 'Facets on right side',\n *        view: RightColumnFacets,\n *        isDefault: true,\n *      },\n *      {\n *        id: 'facetsLeftSide',\n *        title: 'Facets on left side',\n *        view: LeftColumnFacets,\n *        isDefault: false,\n *        schemaEnhancer: ({schema, formData, intl}) => schema,\n *      },\n *    ],\n *\n * ```\n * Notice that each variation can declare an option schema enhancer, and each\n * block supports an optional `schemaEnhancer` function.\n */\nexport const applySchemaEnhancer = ({\n  schema: originalSchema,\n  formData,\n  intl,\n  blocksConfig = config.blocks.blocksConfig\n}) => {\n  var _blocksConfig$blockTy4, _activeItem2, _blocksConfig$blockTy6;\n  let schema, schemaEnhancer;\n  const blockType = formData['@type'];\n  const variations = (blocksConfig === null || blocksConfig === void 0 ? void 0 : (_blocksConfig$blockTy4 = blocksConfig[blockType]) === null || _blocksConfig$blockTy4 === void 0 ? void 0 : _blocksConfig$blockTy4.variations) || [];\n  if (variations.length === 0) {\n    var _blocksConfig$blockTy5;\n    // No variations present but we finalize the schema with a schemaEnhancer\n    // in the block config (if present)\n    schemaEnhancer = blocksConfig === null || blocksConfig === void 0 ? void 0 : (_blocksConfig$blockTy5 = blocksConfig[blockType]) === null || _blocksConfig$blockTy5 === void 0 ? void 0 : _blocksConfig$blockTy5.schemaEnhancer;\n    if (schemaEnhancer) schema = schemaEnhancer({\n      schema: cloneDeepSchema(originalSchema),\n      formData,\n      intl\n    });\n    return schema || originalSchema;\n  }\n  const activeItemName = formData === null || formData === void 0 ? void 0 : formData.variation;\n  let activeItem = variations.find(item => item.id === activeItemName);\n  if (!activeItem) activeItem = variations.find(item => item.isDefault);\n  schemaEnhancer = (_activeItem2 = activeItem) === null || _activeItem2 === void 0 ? void 0 : _activeItem2['schemaEnhancer'];\n  schema = schemaEnhancer ? schemaEnhancer({\n    schema: cloneDeepSchema(originalSchema),\n    formData,\n    intl\n  }) : cloneDeepSchema(originalSchema);\n\n  // Finalize the schema with a schemaEnhancer in the block config;\n  schemaEnhancer = blocksConfig === null || blocksConfig === void 0 ? void 0 : (_blocksConfig$blockTy6 = blocksConfig[blockType]) === null || _blocksConfig$blockTy6 === void 0 ? void 0 : _blocksConfig$blockTy6.schemaEnhancer;\n  if (schemaEnhancer) schema = schemaEnhancer({\n    schema,\n    formData,\n    intl\n  });\n  return schema || originalSchema;\n};\n\n/**\n * A HOC that enhances the incoming schema prop with block variations support\n * by:\n *\n * - applies the selected variation's schema enhancer\n * - adds the variation selection input (as a choice widget)\n */\nexport const withVariationSchemaEnhancer = FormComponent => props => {\n  var _blocksConfig$blockTy7;\n  const {\n    formData,\n    schema: originalSchema\n  } = props;\n  const intl = useIntl();\n  const blocksConfig = getBlocksConfig(props);\n  const blockType = formData['@type'];\n  const variations = ((_blocksConfig$blockTy7 = blocksConfig[blockType]) === null || _blocksConfig$blockTy7 === void 0 ? void 0 : _blocksConfig$blockTy7.variations) || [];\n  let schema = applySchemaEnhancer({\n    schema: originalSchema,\n    formData,\n    intl\n  });\n  if (variations.length > 1) {\n    addExtensionFieldToSchema({\n      schema,\n      name: 'variation',\n      items: variations,\n      intl,\n      title: messages.variation,\n      insertFieldToOrder: _addField\n    });\n  }\n  return __jsx(FormComponent, _extends({}, props, {\n    schema: schema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 10\n    }\n  }));\n};\n\n/**\n * A HOC that enhances the incoming schema prop with styling widget support\n * by:\n *\n * - adds the variation selection input (as a choice widget)\n */\nexport const withStylingSchemaEnhancer = FormComponent => props => {\n  var _blocksConfig$blockTy8;\n  const {\n    formData,\n    schema\n  } = props;\n  const intl = useIntl();\n  const blocksConfig = getBlocksConfig(props);\n  const blockType = formData['@type'];\n  const enableStyling = (_blocksConfig$blockTy8 = blocksConfig[blockType]) === null || _blocksConfig$blockTy8 === void 0 ? void 0 : _blocksConfig$blockTy8.enableStyling;\n  if (enableStyling) {\n    var _blocksConfig$blockTy9;\n    const stylesSchema = ((_blocksConfig$blockTy9 = blocksConfig[blockType]) === null || _blocksConfig$blockTy9 === void 0 ? void 0 : _blocksConfig$blockTy9.stylesSchema) || defaultStyleSchema;\n    schema.fieldsets.push({\n      id: 'styling',\n      title: intl.formatMessage(messages.styling),\n      fields: ['styles']\n    });\n    schema.properties.styles = {\n      widget: 'object',\n      title: intl.formatMessage(messages.styling),\n      schema: stylesSchema({\n        schema: defaultStyleSchema({\n          formData,\n          intl\n        }),\n        formData,\n        intl\n      })\n    };\n  }\n  return __jsx(FormComponent, _extends({}, props, {\n    schema: schema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 10\n    }\n  }));\n};","map":{"version":3,"names":["defineMessages","React","useIntl","config","cloneDeepSchema","defaultStyleSchema","messages","variation","styling","_addField","schema","name","fieldsets","fields","indexOf","unshift","getBlocksConfig","props","blocks","blocksConfig","addExtensionFieldToSchema","items","intl","title","description","insertFieldToOrder","_","formatMessage","hasDefaultExtension","findIndex","isDefault","console","warn","properties","choices","map","id","defaultMessage","noValueOption","default","find","item","withBlockSchemaEnhancer","FormComponent","extensionName","formData","originalSchema","blockType","extensionConfig","extensions","activeItemName","activeItem","schemaEnhancer","length","applySchemaEnhancer","variations","withVariationSchemaEnhancer","withStylingSchemaEnhancer","enableStyling","stylesSchema","push","styles","widget"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/helpers/Extensions/withBlockSchemaEnhancer.js"],"sourcesContent":["import { defineMessages } from 'react-intl';\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport config from '@plone/volto/registry';\nimport { cloneDeepSchema } from '@plone/volto/helpers/Utils/Utils';\nimport { defaultStyleSchema } from '@plone/volto/components/manage/Blocks/Block/StylesSchema';\n\nconst messages = defineMessages({\n  variation: {\n    id: 'Variation',\n    defaultMessage: 'Variation',\n  },\n  styling: {\n    id: 'Styling',\n    defaultMessage: 'Styling',\n  },\n});\n\n/**\n * Sets the field name as first field in schema\n */\nfunction _addField(schema, name) {\n  if (schema.fieldsets[0].fields.indexOf(name) === -1) {\n    schema.fieldsets[0].fields.unshift(name);\n  }\n}\n\n/**\n * Gets the blocksConfig from the props or from the global config object\n */\nfunction getBlocksConfig(props) {\n  const { blocks } = config;\n\n  if (props.blocksConfig) {\n    return props.blocksConfig;\n  }\n\n  return blocks?.blocksConfig;\n}\n\n/**\n * Utility function that adds the Select dropdown field to a schema\n */\nexport const addExtensionFieldToSchema = ({\n  schema,\n  name,\n  items,\n  intl,\n  title,\n  description,\n  insertFieldToOrder = _addField,\n}) => {\n  const _ = intl.formatMessage;\n\n  insertFieldToOrder(schema, name);\n\n  const hasDefaultExtension =\n    items?.findIndex(({ isDefault }) => isDefault) > -1;\n\n  if (!hasDefaultExtension) {\n    // eslint-disable-next-line\n    console.warn('You should provide a default extension in extension:', name);\n  }\n\n  schema.properties[name] = {\n    title: _(title),\n    choices: items?.map(({ id, title }) => [\n      id,\n      _({ id: title, defaultMessage: title }),\n    ]),\n    noValueOption: false,\n    default: hasDefaultExtension\n      ? items?.find((item) => item.isDefault).id\n      : null,\n  };\n\n  return schema;\n};\n\n/**\n * A generic HOC that provides \"schema enhancer functionality\" for any custom\n * block extension.\n *\n * This enables blocks to have additional \"variations\", beyond the usual\n * `variations` field. This function is not directly used by Volto.\n *\n * To be used with a block configuration like:\n *\n * ```\n *  {\n *    id: 'someBlockId',\n *    extensions: {\n *      '<someExtensionName>': {\n *        items: [\n *          {\n *            id: 'selectFacet',\n *            title: 'Select',\n *            view: SelectFacet,\n *            isDefault: true,\n *          },\n *          {\n *            id: 'checkboxFacet',\n *            title: 'Checkbox',\n *            view: CheckboxFacet,\n *            isDefault: false,\n *          },\n *        ]\n *      }\n *     }\n *  }\n * ```\n */\nexport const withBlockSchemaEnhancer = (\n  FormComponent,\n  extensionName = 'vendor',\n  insertFieldToOrder = _addField,\n) => ({ ...props }) => {\n  const { formData, schema: originalSchema } = props;\n  const intl = useIntl();\n\n  const blocksConfig = getBlocksConfig(props);\n\n  const blockType = formData['@type'];\n  const extensionConfig =\n    blocksConfig?.[blockType]?.extensions?.[extensionName];\n\n  if (!extensionConfig)\n    return <FormComponent {...props} schema={originalSchema} />;\n\n  const activeItemName = formData?.[extensionName];\n  let activeItem = extensionConfig.items?.find(\n    (item) => item.id === activeItemName,\n  );\n  if (!activeItem)\n    activeItem = extensionConfig.items?.find((item) => item.isDefault);\n\n  const schemaEnhancer =\n    // For the main \"variation\" of blocks, allow simply passing a\n    // schemaEnhancer in the block configuration\n    activeItem?.['schemaEnhancer'] ||\n    (extensionName === 'variation' &&\n      blocksConfig?.[blockType]?.schemaEnhancer);\n\n  let schema = schemaEnhancer\n    ? schemaEnhancer({\n        schema: cloneDeepSchema(originalSchema),\n        formData,\n        intl,\n      })\n    : cloneDeepSchema(originalSchema);\n\n  const { title = messages.variation, description } = extensionConfig;\n\n  if (extensionConfig.items?.length > 1) {\n    addExtensionFieldToSchema({\n      schema,\n      name: extensionName,\n      items: extensionConfig.items || [],\n      intl,\n      title,\n      description,\n      insertFieldToOrder,\n    });\n  }\n\n  return <FormComponent {...props} schema={schema} />;\n};\n\n/**\n * Apply block variation schema enhancers to the provided schema, using block\n * information from the provided block data (as `formData`).\n *\n * Blocks can be enhanced with variations declared like:\n *\n * ```\n *  {\n *    id: 'searchBlock',\n *    schemaEnhancer: ({schema, formData, intl}) => schema,\n *    variations: [\n *      {\n *        id: 'facetsRightSide',\n *        title: 'Facets on right side',\n *        view: RightColumnFacets,\n *        isDefault: true,\n *      },\n *      {\n *        id: 'facetsLeftSide',\n *        title: 'Facets on left side',\n *        view: LeftColumnFacets,\n *        isDefault: false,\n *        schemaEnhancer: ({schema, formData, intl}) => schema,\n *      },\n *    ],\n *\n * ```\n * Notice that each variation can declare an option schema enhancer, and each\n * block supports an optional `schemaEnhancer` function.\n */\nexport const applySchemaEnhancer = ({\n  schema: originalSchema,\n  formData,\n  intl,\n  blocksConfig = config.blocks.blocksConfig,\n}) => {\n  let schema, schemaEnhancer;\n\n  const blockType = formData['@type'];\n  const variations = blocksConfig?.[blockType]?.variations || [];\n\n  if (variations.length === 0) {\n    // No variations present but we finalize the schema with a schemaEnhancer\n    // in the block config (if present)\n    schemaEnhancer = blocksConfig?.[blockType]?.schemaEnhancer;\n\n    if (schemaEnhancer)\n      schema = schemaEnhancer({\n        schema: cloneDeepSchema(originalSchema),\n        formData,\n        intl,\n      });\n    return schema || originalSchema;\n  }\n\n  const activeItemName = formData?.variation;\n  let activeItem = variations.find((item) => item.id === activeItemName);\n  if (!activeItem) activeItem = variations.find((item) => item.isDefault);\n\n  schemaEnhancer = activeItem?.['schemaEnhancer'];\n\n  schema = schemaEnhancer\n    ? schemaEnhancer({\n        schema: cloneDeepSchema(originalSchema),\n        formData,\n        intl,\n      })\n    : cloneDeepSchema(originalSchema);\n\n  // Finalize the schema with a schemaEnhancer in the block config;\n  schemaEnhancer = blocksConfig?.[blockType]?.schemaEnhancer;\n  if (schemaEnhancer) schema = schemaEnhancer({ schema, formData, intl });\n\n  return schema || originalSchema;\n};\n\n/**\n * A HOC that enhances the incoming schema prop with block variations support\n * by:\n *\n * - applies the selected variation's schema enhancer\n * - adds the variation selection input (as a choice widget)\n */\nexport const withVariationSchemaEnhancer = (FormComponent) => (props) => {\n  const { formData, schema: originalSchema } = props;\n  const intl = useIntl();\n\n  const blocksConfig = getBlocksConfig(props);\n\n  const blockType = formData['@type'];\n  const variations = blocksConfig[blockType]?.variations || [];\n\n  let schema = applySchemaEnhancer({ schema: originalSchema, formData, intl });\n\n  if (variations.length > 1) {\n    addExtensionFieldToSchema({\n      schema,\n      name: 'variation',\n      items: variations,\n      intl,\n      title: messages.variation,\n      insertFieldToOrder: _addField,\n    });\n  }\n\n  return <FormComponent {...props} schema={schema} />;\n};\n\n/**\n * A HOC that enhances the incoming schema prop with styling widget support\n * by:\n *\n * - adds the variation selection input (as a choice widget)\n */\nexport const withStylingSchemaEnhancer = (FormComponent) => (props) => {\n  const { formData, schema } = props;\n  const intl = useIntl();\n\n  const blocksConfig = getBlocksConfig(props);\n\n  const blockType = formData['@type'];\n  const enableStyling = blocksConfig[blockType]?.enableStyling;\n\n  if (enableStyling) {\n    const stylesSchema =\n      blocksConfig[blockType]?.stylesSchema || defaultStyleSchema;\n\n    schema.fieldsets.push({\n      id: 'styling',\n      title: intl.formatMessage(messages.styling),\n      fields: ['styles'],\n    });\n\n    schema.properties.styles = {\n      widget: 'object',\n      title: intl.formatMessage(messages.styling),\n      schema: stylesSchema({\n        schema: defaultStyleSchema({ formData, intl }),\n        formData,\n        intl,\n      }),\n    };\n  }\n  return <FormComponent {...props} schema={schema} />;\n};\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Variation","defaultMessage":"Variation"},{"id":"Styling","defaultMessage":"Styling"}]}},"sourceType":"module","externalDependencies":[]}