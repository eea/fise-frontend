{"ast":null,"code":"import _union from \"lodash/union\";\nimport _flatten from \"lodash/flatten\";\nimport _compact from \"lodash/compact\";\nconst _excluded = [\"expand\"],\n  _excluded2 = [\"request\", \"type\", \"mode\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/**\n * Api middleware.\n * @module middleware/api\n */\n\nimport Cookies from 'universal-cookie';\nimport jwtDecode from 'jwt-decode';\nimport { matchPath } from 'react-router';\nimport qs from 'query-string';\nimport config from '@plone/volto/registry';\nimport { GET_CONTENT, LOGIN, RESET_APIERROR, SET_APIERROR } from '@plone/volto/constants/ActionTypes';\nimport { changeLanguage } from '@plone/volto/actions';\nimport { normalizeLanguageName, getCookieOptions } from '@plone/volto/helpers';\nlet socket = null;\n\n/**\n *\n * Add configured expanders to an api call for an action\n * Requirements:\n *\n * - It should add the expanders set in the config settings\n * - It should preserve any query if present\n * - It should preserve (and add) any expand parameter (if present) e.g. translations\n * - It should take use the correct codification for arrays in querystring (repeated parameter for each member of the array)\n *\n * @function addExpandersToPath\n * @param {string} path The url/path including the querystring\n * @param {*} type The action type\n * @returns {string} The url/path with the configured expanders added to the query string\n */\nexport function addExpandersToPath(path, type) {\n  const {\n    settings\n  } = config;\n  const {\n    apiExpanders = []\n  } = settings;\n  const _qs$parseUrl = qs.parseUrl(path),\n    {\n      url,\n      query: {\n        expand\n      }\n    } = _qs$parseUrl,\n    query = _objectWithoutProperties(_qs$parseUrl.query, _excluded);\n  const expandersFromConfig = apiExpanders.filter(expand => matchPath(url, expand.match) && expand[type]).map(expand => expand[type]);\n  const expandMerge = _compact(_union([expand, ..._flatten(expandersFromConfig)]));\n  const stringifiedExpand = qs.stringify({\n    expand: expandMerge\n  }, {\n    arrayFormat: 'comma',\n    encode: false\n  });\n  const querystringFromConfig = apiExpanders.filter(expand => matchPath(url, expand.match) && expand[type]).reduce((acc, expand) => _objectSpread(_objectSpread({}, acc), expand === null || expand === void 0 ? void 0 : expand['querystring']), {});\n  const queryMerge = _objectSpread(_objectSpread({}, query), querystringFromConfig);\n  const stringifiedQuery = qs.stringify(queryMerge, {\n    encode: false\n  });\n  if (stringifiedQuery && stringifiedExpand) {\n    return `${url}?${stringifiedExpand}&${stringifiedQuery}`;\n  } else if (!stringifiedQuery && stringifiedExpand) {\n    return `${url}?${stringifiedExpand}`;\n  } else if (stringifiedQuery && !stringifiedExpand) {\n    return `${url}?${stringifiedQuery}`;\n  } else {\n    return url;\n  }\n}\n\n/**\n * Send a message on a websocket.\n * @function sendOnSocket\n * @param {Object} request Request object.\n * @returns {Promise} message is send\n */\nfunction sendOnSocket(request) {\n  return new Promise((resolve, reject) => {\n    switch (socket.readyState) {\n      case socket.CONNECTING:\n        socket.addEventListener('open', () => resolve(socket));\n        socket.addEventListener('error', reject);\n        break;\n      case socket.OPEN:\n        resolve(socket);\n        break;\n      default:\n        reject();\n        break;\n    }\n  }).then(() => {\n    socket.send(JSON.stringify(request));\n  });\n}\n\n/**\n * Api middleware.\n * @function\n * @param {Object} api Api object.\n * @returns {Promise} Action promise.\n */\nexport default (api => ({\n  dispatch,\n  getState\n}) => next => action => {\n  const {\n    settings\n  } = config;\n  if (typeof action === 'function') {\n    return action(dispatch, getState);\n  }\n  const {\n      request,\n      type,\n      mode = 'parallel'\n    } = action,\n    rest = _objectWithoutProperties(action, _excluded2);\n  const {\n    subrequest\n  } = action; // We want subrequest remains in `...rest` above\n\n  let actionPromise;\n  if (!request) {\n    return next(action);\n  }\n  next(_objectSpread(_objectSpread({}, rest), {}, {\n    type: `${type}_PENDING`\n  }));\n  if (socket) {\n    actionPromise = Array.isArray(request) ? Promise.all(request.map(item => sendOnSocket(_objectSpread(_objectSpread({}, item), {}, {\n      path: addExpandersToPath(item.path, type),\n      id: type\n    })))) : sendOnSocket(_objectSpread(_objectSpread({}, request), {}, {\n      path: addExpandersToPath(request.path, type),\n      id: type\n    }));\n  } else {\n    actionPromise = Array.isArray(request) ? mode === 'serial' ? request.reduce((prevPromise, item) => {\n      return prevPromise.then(acc => {\n        return api[item.op](addExpandersToPath(item.path, type), {\n          data: item.data,\n          type: item.type,\n          headers: item.headers,\n          params: request.params,\n          checkUrl: settings.actions_raising_api_errors.includes(action.type)\n        }).then(reqres => {\n          return [...acc, reqres];\n        });\n      });\n    }, Promise.resolve([])) : Promise.all(request.map(item => api[item.op](addExpandersToPath(item.path, type), {\n      data: item.data,\n      type: item.type,\n      headers: item.headers,\n      params: request.params,\n      checkUrl: settings.actions_raising_api_errors.includes(action.type)\n    }))) : api[request.op](addExpandersToPath(request.path, type), {\n      data: request.data,\n      type: request.type,\n      headers: request.headers,\n      params: request.params,\n      checkUrl: settings.actions_raising_api_errors.includes(action.type)\n    });\n    actionPromise.then(result => {\n      const {\n        settings\n      } = config;\n      if (getState().apierror.connectionRefused) {\n        next(_objectSpread(_objectSpread({}, rest), {}, {\n          type: RESET_APIERROR\n        }));\n      }\n      if (type === GET_CONTENT) {\n        var _result$language;\n        const lang = result === null || result === void 0 ? void 0 : (_result$language = result.language) === null || _result$language === void 0 ? void 0 : _result$language.token;\n        if (lang && getState().intl.language !== lang && !subrequest && config.settings.supportedLanguages.includes(lang)) {\n          const langFileName = normalizeLanguageName(lang);\n          import(\"../../../../../locales/\" + langFileName + '.json').then(locale => {\n            dispatch(changeLanguage(lang, locale.default));\n          });\n        }\n      }\n      if (type === LOGIN && settings.websockets) {\n        const cookies = new Cookies();\n        cookies.set('auth_token', result.token, getCookieOptions({\n          expires: new Date(jwtDecode(result.token).exp * 1000)\n        }));\n        api.get('/@wstoken').then(res => {\n          socket = new WebSocket(`${settings.apiPath.replace('http', 'ws')}/@ws?ws_token=${res.token}`);\n          socket.onmessage = message => {\n            const packet = JSON.parse(message.data);\n            if (packet.error) {\n              dispatch({\n                type: `${packet.id}_FAIL`,\n                error: packet.error\n              });\n            } else {\n              dispatch({\n                type: `${packet.id}_SUCCESS`,\n                result: JSON.parse(packet.data)\n              });\n            }\n          };\n        });\n      }\n      return next(_objectSpread(_objectSpread({}, rest), {}, {\n        result,\n        type: `${type}_SUCCESS`\n      }));\n    }, error => {\n      // Only SRR can set ECONNREFUSED\n      if (error.code === 'ECONNREFUSED') {\n        next(_objectSpread(_objectSpread({}, rest), {}, {\n          error,\n          statusCode: error.code,\n          connectionRefused: true,\n          type: SET_APIERROR\n        }));\n      }\n\n      // Response error is marked crossDomain if CORS error happen\n      else if (error.crossDomain) {\n        next(_objectSpread(_objectSpread({}, rest), {}, {\n          error,\n          statusCode: 'CORSERROR',\n          connectionRefused: false,\n          type: SET_APIERROR\n        }));\n      }\n\n      // Check for actions who can raise api errors\n      if (settings.actions_raising_api_errors.includes(action.type)) {\n        var _error$response, _error$response2;\n        // Gateway timeout\n        if ((error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.statusCode) === 504) {\n          next(_objectSpread(_objectSpread({}, rest), {}, {\n            error,\n            statusCode: error.code,\n            connectionRefused: true,\n            type: SET_APIERROR\n          }));\n        }\n\n        // Redirect\n        else if ((error === null || error === void 0 ? void 0 : error.code) === 301) {\n          next(_objectSpread(_objectSpread({}, rest), {}, {\n            error,\n            statusCode: error.code,\n            connectionRefused: false,\n            type: SET_APIERROR\n          }));\n        }\n\n        // Redirect\n        else if ((error === null || error === void 0 ? void 0 : error.code) === 408) {\n          next(_objectSpread(_objectSpread({}, rest), {}, {\n            error,\n            statusCode: error.code,\n            connectionRefused: false,\n            type: SET_APIERROR\n          }));\n        }\n\n        // Unauthorized\n        else if ((error === null || error === void 0 ? void 0 : (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.statusCode) === 401) {\n          next(_objectSpread(_objectSpread({}, rest), {}, {\n            error,\n            statusCode: error.response,\n            message: error.response.body.message,\n            connectionRefused: false,\n            type: SET_APIERROR\n          }));\n        }\n      }\n      return next(_objectSpread(_objectSpread({}, rest), {}, {\n        error,\n        type: `${type}_FAIL`\n      }));\n    });\n  }\n  return actionPromise;\n});","map":{"version":3,"names":["Cookies","jwtDecode","matchPath","qs","config","GET_CONTENT","LOGIN","RESET_APIERROR","SET_APIERROR","changeLanguage","normalizeLanguageName","getCookieOptions","socket","addExpandersToPath","path","type","settings","apiExpanders","parseUrl","url","query","expand","expandersFromConfig","filter","match","map","expandMerge","stringifiedExpand","stringify","arrayFormat","encode","querystringFromConfig","reduce","acc","queryMerge","stringifiedQuery","sendOnSocket","request","Promise","resolve","reject","readyState","CONNECTING","addEventListener","OPEN","then","send","JSON","api","dispatch","getState","next","action","mode","rest","subrequest","actionPromise","Array","isArray","all","item","id","prevPromise","op","data","headers","params","checkUrl","actions_raising_api_errors","includes","reqres","result","apierror","connectionRefused","lang","language","token","intl","supportedLanguages","langFileName","locale","default","websockets","cookies","set","expires","Date","exp","get","res","WebSocket","apiPath","replace","onmessage","message","packet","parse","error","code","statusCode","crossDomain","response","body"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/middleware/api.js"],"sourcesContent":["/**\n * Api middleware.\n * @module middleware/api\n */\n\nimport Cookies from 'universal-cookie';\nimport jwtDecode from 'jwt-decode';\nimport { compact, flatten, union } from 'lodash';\nimport { matchPath } from 'react-router';\nimport qs from 'query-string';\n\nimport config from '@plone/volto/registry';\n\nimport {\n  GET_CONTENT,\n  LOGIN,\n  RESET_APIERROR,\n  SET_APIERROR,\n} from '@plone/volto/constants/ActionTypes';\nimport { changeLanguage } from '@plone/volto/actions';\nimport { normalizeLanguageName, getCookieOptions } from '@plone/volto/helpers';\nlet socket = null;\n\n/**\n *\n * Add configured expanders to an api call for an action\n * Requirements:\n *\n * - It should add the expanders set in the config settings\n * - It should preserve any query if present\n * - It should preserve (and add) any expand parameter (if present) e.g. translations\n * - It should take use the correct codification for arrays in querystring (repeated parameter for each member of the array)\n *\n * @function addExpandersToPath\n * @param {string} path The url/path including the querystring\n * @param {*} type The action type\n * @returns {string} The url/path with the configured expanders added to the query string\n */\nexport function addExpandersToPath(path, type) {\n  const { settings } = config;\n  const { apiExpanders = [] } = settings;\n\n  const {\n    url,\n    query: { expand, ...query },\n  } = qs.parseUrl(path);\n\n  const expandersFromConfig = apiExpanders\n    .filter((expand) => matchPath(url, expand.match) && expand[type])\n    .map((expand) => expand[type]);\n\n  const expandMerge = compact(union([expand, ...flatten(expandersFromConfig)]));\n\n  const stringifiedExpand = qs.stringify(\n    { expand: expandMerge },\n    {\n      arrayFormat: 'comma',\n      encode: false,\n    },\n  );\n\n  const querystringFromConfig = apiExpanders\n    .filter((expand) => matchPath(url, expand.match) && expand[type])\n    .reduce((acc, expand) => ({ ...acc, ...expand?.['querystring'] }), {});\n\n  const queryMerge = { ...query, ...querystringFromConfig };\n\n  const stringifiedQuery = qs.stringify(queryMerge, {\n    encode: false,\n  });\n\n  if (stringifiedQuery && stringifiedExpand) {\n    return `${url}?${stringifiedExpand}&${stringifiedQuery}`;\n  } else if (!stringifiedQuery && stringifiedExpand) {\n    return `${url}?${stringifiedExpand}`;\n  } else if (stringifiedQuery && !stringifiedExpand) {\n    return `${url}?${stringifiedQuery}`;\n  } else {\n    return url;\n  }\n}\n\n/**\n * Send a message on a websocket.\n * @function sendOnSocket\n * @param {Object} request Request object.\n * @returns {Promise} message is send\n */\nfunction sendOnSocket(request) {\n  return new Promise((resolve, reject) => {\n    switch (socket.readyState) {\n      case socket.CONNECTING:\n        socket.addEventListener('open', () => resolve(socket));\n        socket.addEventListener('error', reject);\n        break;\n      case socket.OPEN:\n        resolve(socket);\n        break;\n      default:\n        reject();\n        break;\n    }\n  }).then(() => {\n    socket.send(JSON.stringify(request));\n  });\n}\n\n/**\n * Api middleware.\n * @function\n * @param {Object} api Api object.\n * @returns {Promise} Action promise.\n */\nexport default (api) => ({ dispatch, getState }) => (next) => (action) => {\n  const { settings } = config;\n\n  if (typeof action === 'function') {\n    return action(dispatch, getState);\n  }\n\n  const { request, type, mode = 'parallel', ...rest } = action;\n  const { subrequest } = action; // We want subrequest remains in `...rest` above\n\n  let actionPromise;\n\n  if (!request) {\n    return next(action);\n  }\n\n  next({ ...rest, type: `${type}_PENDING` });\n\n  if (socket) {\n    actionPromise = Array.isArray(request)\n      ? Promise.all(\n          request.map((item) =>\n            sendOnSocket({\n              ...item,\n              path: addExpandersToPath(item.path, type),\n              id: type,\n            }),\n          ),\n        )\n      : sendOnSocket({\n          ...request,\n          path: addExpandersToPath(request.path, type),\n          id: type,\n        });\n  } else {\n    actionPromise = Array.isArray(request)\n      ? mode === 'serial'\n        ? request.reduce((prevPromise, item) => {\n            return prevPromise.then((acc) => {\n              return api[item.op](addExpandersToPath(item.path, type), {\n                data: item.data,\n                type: item.type,\n                headers: item.headers,\n                params: request.params,\n                checkUrl: settings.actions_raising_api_errors.includes(\n                  action.type,\n                ),\n              }).then((reqres) => {\n                return [...acc, reqres];\n              });\n            });\n          }, Promise.resolve([]))\n        : Promise.all(\n            request.map((item) =>\n              api[item.op](addExpandersToPath(item.path, type), {\n                data: item.data,\n                type: item.type,\n                headers: item.headers,\n                params: request.params,\n                checkUrl: settings.actions_raising_api_errors.includes(\n                  action.type,\n                ),\n              }),\n            ),\n          )\n      : api[request.op](addExpandersToPath(request.path, type), {\n          data: request.data,\n          type: request.type,\n          headers: request.headers,\n          params: request.params,\n          checkUrl: settings.actions_raising_api_errors.includes(action.type),\n        });\n    actionPromise.then(\n      (result) => {\n        const { settings } = config;\n        if (getState().apierror.connectionRefused) {\n          next({\n            ...rest,\n            type: RESET_APIERROR,\n          });\n        }\n        if (type === GET_CONTENT) {\n          const lang = result?.language?.token;\n          if (\n            lang &&\n            getState().intl.language !== lang &&\n            !subrequest &&\n            config.settings.supportedLanguages.includes(lang)\n          ) {\n            const langFileName = normalizeLanguageName(lang);\n            import('~/../locales/' + langFileName + '.json').then((locale) => {\n              dispatch(changeLanguage(lang, locale.default));\n            });\n          }\n        }\n        if (type === LOGIN && settings.websockets) {\n          const cookies = new Cookies();\n          cookies.set(\n            'auth_token',\n            result.token,\n            getCookieOptions({\n              expires: new Date(jwtDecode(result.token).exp * 1000),\n            }),\n          );\n          api.get('/@wstoken').then((res) => {\n            socket = new WebSocket(\n              `${settings.apiPath.replace('http', 'ws')}/@ws?ws_token=${\n                res.token\n              }`,\n            );\n            socket.onmessage = (message) => {\n              const packet = JSON.parse(message.data);\n              if (packet.error) {\n                dispatch({\n                  type: `${packet.id}_FAIL`,\n                  error: packet.error,\n                });\n              } else {\n                dispatch({\n                  type: `${packet.id}_SUCCESS`,\n                  result: JSON.parse(packet.data),\n                });\n              }\n            };\n          });\n        }\n        return next({ ...rest, result, type: `${type}_SUCCESS` });\n      },\n      (error) => {\n        // Only SRR can set ECONNREFUSED\n        if (error.code === 'ECONNREFUSED') {\n          next({\n            ...rest,\n            error,\n            statusCode: error.code,\n            connectionRefused: true,\n            type: SET_APIERROR,\n          });\n        }\n\n        // Response error is marked crossDomain if CORS error happen\n        else if (error.crossDomain) {\n          next({\n            ...rest,\n            error,\n            statusCode: 'CORSERROR',\n            connectionRefused: false,\n            type: SET_APIERROR,\n          });\n        }\n\n        // Check for actions who can raise api errors\n        if (settings.actions_raising_api_errors.includes(action.type)) {\n          // Gateway timeout\n          if (error?.response?.statusCode === 504) {\n            next({\n              ...rest,\n              error,\n              statusCode: error.code,\n              connectionRefused: true,\n              type: SET_APIERROR,\n            });\n          }\n\n          // Redirect\n          else if (error?.code === 301) {\n            next({\n              ...rest,\n              error,\n              statusCode: error.code,\n              connectionRefused: false,\n              type: SET_APIERROR,\n            });\n          }\n\n          // Redirect\n          else if (error?.code === 408) {\n            next({\n              ...rest,\n              error,\n              statusCode: error.code,\n              connectionRefused: false,\n              type: SET_APIERROR,\n            });\n          }\n\n          // Unauthorized\n          else if (error?.response?.statusCode === 401) {\n            next({\n              ...rest,\n              error,\n              statusCode: error.response,\n              message: error.response.body.message,\n              connectionRefused: false,\n              type: SET_APIERROR,\n            });\n          }\n        }\n        return next({ ...rest, error, type: `${type}_FAIL` });\n      },\n    );\n  }\n\n  return actionPromise;\n};\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}