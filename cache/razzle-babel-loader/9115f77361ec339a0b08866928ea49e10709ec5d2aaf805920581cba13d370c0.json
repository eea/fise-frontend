{"ast":null,"code":"import _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _toConsumableArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-slate/src/blocks/Text/DefaultTextBlockEditor.jsx\",\n  _this = this,\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\nimport ReactDOM from 'react-dom';\nimport React from 'react';\nimport { readAsDataURL } from 'promise-file-reader';\nimport Dropzone from 'react-dropzone';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { useInView } from 'react-intersection-observer';\nimport { Dimmer, Loader, Message, Segment } from 'semantic-ui-react';\nimport { flattenToAppURL, getBaseUrl } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\nimport { BlockDataForm, SidebarPortal, BlockChooserButton } from '@plone/volto/components';\nimport { SlateEditor } from 'volto-slate/editor';\nimport { serializeNodesToText } from 'volto-slate/editor/render';\nimport { createImageBlock, parseDefaultSelection, deconstructToVoltoBlocks } from 'volto-slate/utils';\nimport { Transforms } from 'slate';\nimport PersistentSlashMenu from './SlashMenu';\nimport ShortcutListing from './ShortcutListing';\nimport MarkdownIntroduction from './MarkdownIntroduction';\nimport { handleKey } from './keyboard';\nimport TextBlockSchema from './schema';\nimport imageBlockSVG from '@plone/volto/components/manage/Blocks/Image/block-image.svg';\nimport './css/editor.css';\n\n// TODO: refactor dropzone to separate component wrapper\n\nvar messages = defineMessages({\n  text: {\n    \"id\": \"Type text\\u2026\",\n    \"defaultMessage\": \"Type text\\u2026\"\n  }\n});\nvar DEBUG = false;\nexport var DefaultTextBlockEditor = function DefaultTextBlockEditor(props) {\n  _s();\n  var _data$instructions, _data$plaintext;\n  var block = props.block,\n    blocksConfig = props.blocksConfig,\n    data = props.data,\n    _props$detached = props.detached,\n    detached = _props$detached === void 0 ? false : _props$detached,\n    index = props.index,\n    onChangeBlock = props.onChangeBlock,\n    _onInsertBlock = props.onInsertBlock,\n    onMutateBlock = props.onMutateBlock,\n    onSelectBlock = props.onSelectBlock,\n    pathname = props.pathname,\n    properties = props.properties,\n    selected = props.selected,\n    uploadRequest = props.uploadRequest,\n    uploadContent = props.uploadContent,\n    uploadedContent = props.uploadedContent,\n    defaultSelection = props.defaultSelection,\n    saveSlateBlockSelection = props.saveSlateBlockSelection,\n    allowedBlocks = props.allowedBlocks,\n    formTitle = props.formTitle,\n    formDescription = props.formDescription;\n  var slate = config.settings.slate;\n  var textblockExtensions = slate.textblockExtensions;\n  var value = data.value;\n\n  // const [addNewBlockOpened, setAddNewBlockOpened] = React.useState();\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    showDropzone = _React$useState2[0],\n    setShowDropzone = _React$useState2[1];\n  var _React$useState3 = React.useState(false),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    uploading = _React$useState4[0],\n    setUploading = _React$useState4[1];\n  var _React$useState5 = React.useState(null),\n    _React$useState6 = _slicedToArray(_React$useState5, 2),\n    newImageId = _React$useState6[0],\n    setNewImageId = _React$useState6[1];\n  var prevReq = React.useRef(null);\n  var withBlockProperties = React.useCallback(function (editor) {\n    editor.getBlockProps = function () {\n      return props;\n    };\n    return editor;\n  }, [props]);\n  var slateSettings = React.useMemo(function () {\n    return _objectSpread(_objectSpread({}, config.settings.slate), {}, {\n      persistentHelpers: [].concat(_toConsumableArray(config.settings.slate.persistentHelpers), [PersistentSlashMenu])\n    });\n  }, []);\n  var onDrop = React.useCallback(function (files) {\n    // TODO: need to fix setUploading, treat uploading indicator\n    // inteligently, show progress report on uploading files\n    setUploading(true);\n    files.forEach(function (file) {\n      var _file$type$split = file.type.split('/'),\n        _file$type$split2 = _slicedToArray(_file$type$split, 1),\n        mime = _file$type$split2[0];\n      if (mime !== 'image') return;\n      readAsDataURL(file).then(function (data) {\n        var fields = data.match(/^data:(.*);(.*),(.*)$/);\n        uploadContent(getBaseUrl(pathname), {\n          '@type': 'Image',\n          title: file.name,\n          image: {\n            data: fields[3],\n            encoding: fields[2],\n            'content-type': fields[1],\n            filename: file.name\n          }\n        }, block);\n      });\n    });\n    setShowDropzone(false);\n  }, [pathname, uploadContent, block]);\n  var loaded = uploadRequest.loaded,\n    loading = uploadRequest.loading;\n  var imageId = uploadedContent['@id'];\n  var prevLoaded = prevReq.current;\n  React.useEffect(function () {\n    if (loaded && !loading && !prevLoaded && newImageId !== imageId) {\n      var url = flattenToAppURL(imageId);\n      setNewImageId(imageId);\n      createImageBlock(url, index, props);\n    }\n    prevReq.current = loaded;\n  }, [props, loaded, loading, prevLoaded, imageId, newImageId, index]);\n  var handleUpdate = React.useCallback(function (editor) {\n    // defaultSelection is used for things such as \"restoring\" the selection\n    // when joining blocks or moving the selection to block start on block\n    // split\n    if (defaultSelection) {\n      var selection = parseDefaultSelection(editor, defaultSelection);\n      if (selection) {\n        setTimeout(function () {\n          Transforms.select(editor, selection);\n          saveSlateBlockSelection(block, null);\n        }, 120);\n        // TODO: use React sync render API\n        // without setTimeout, the join is not correct. Slate uses internally\n        // a 100ms throttle, so setting to a bigger value seems to help\n      }\n    }\n  }, [defaultSelection, block, saveSlateBlockSelection]);\n  var onEditorChange = function onEditorChange(value, editor) {\n    ReactDOM.unstable_batchedUpdates(function () {\n      onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n        value: value,\n        plaintext: serializeNodesToText(value || [])\n        // TODO: also add html serialized value\n      }));\n\n      deconstructToVoltoBlocks(editor);\n    });\n  };\n\n  // Get editing instructions from block settings or props\n  var instructions = (data === null || data === void 0 ? void 0 : (_data$instructions = data.instructions) === null || _data$instructions === void 0 ? void 0 : _data$instructions.data) || (data === null || data === void 0 ? void 0 : data.instructions);\n  if (!instructions || instructions === '<p><br/></p>') {\n    instructions = formDescription;\n  }\n  var intl = useIntl();\n  var placeholder = data.placeholder || formTitle || intl.formatMessage(messages.text);\n  var schema = TextBlockSchema(data);\n  var disableNewBlocks = (data === null || data === void 0 ? void 0 : data.disableNewBlocks) || detached;\n  var _useInView = useInView({\n      threshold: 0,\n      rootMargin: '0px 0px 200px 0px'\n    }),\n    ref = _useInView.ref,\n    inView = _useInView.inView;\n  var handleFocus = React.useCallback(function () {\n    if (!selected) {\n      onSelectBlock(block);\n    }\n  }, [onSelectBlock, selected, block]);\n  return __jsx(\"div\", {\n    className: \"text-slate-editor-inner\",\n    ref: ref,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 5\n    }\n  }, __jsx(React.Fragment, null, __jsx(Dropzone, {\n    disableClick: true,\n    onDrop: onDrop,\n    className: \"dropzone\",\n    onDragOver: function onDragOver() {\n      return setShowDropzone(true);\n    },\n    onDragLeave: function onDragLeave() {\n      return setShowDropzone(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 9\n    }\n  }, function (_ref) {\n    var getRootProps = _ref.getRootProps,\n      getInputProps = _ref.getInputProps;\n    return showDropzone ? __jsx(\"div\", {\n      className: \"drop-indicator\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 15\n      }\n    }, uploading ? __jsx(Dimmer, {\n      active: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 19\n      }\n    }, __jsx(Loader, {\n      indeterminate: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 21\n      }\n    }, \"Uploading image\")) : __jsx(Message, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 19\n      }\n    }, __jsx(\"center\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 21\n      }\n    }, __jsx(\"img\", {\n      src: imageBlockSVG,\n      alt: \"\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 23\n      }\n    })))) : __jsx(React.Fragment, null, __jsx(SlateEditor, {\n      index: index,\n      readOnly: !inView,\n      properties: properties,\n      extensions: textblockExtensions,\n      renderExtensions: [withBlockProperties],\n      value: value,\n      block: block /* is this needed? */,\n      defaultSelection: defaultSelection,\n      onUpdate: handleUpdate,\n      debug: DEBUG,\n      onFocus: handleFocus,\n      onChange: function onChange(value, editor) {\n        return onEditorChange(value, editor);\n      },\n      onKeyDown: handleKey,\n      selected: selected,\n      placeholder: placeholder,\n      slateSettings: slateSettings,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 17\n      }\n    }), DEBUG ? __jsx(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 26\n      }\n    }, block) : '');\n  }), selected && !((_data$plaintext = data.plaintext) !== null && _data$plaintext !== void 0 && _data$plaintext.trim()) && !disableNewBlocks && __jsx(BlockChooserButton, {\n    data: data,\n    block: block,\n    onInsertBlock: function onInsertBlock(id, value) {\n      onSelectBlock(_onInsertBlock(id, value));\n    },\n    onMutateBlock: onMutateBlock,\n    allowedBlocks: allowedBlocks,\n    blocksConfig: blocksConfig,\n    size: \"24px\",\n    className: \"block-add-button\",\n    properties: properties,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 11\n    }\n  }), __jsx(SidebarPortal, {\n    selected: selected,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    id: \"slate-plugin-sidebar\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 11\n    }\n  }), instructions ? __jsx(Segment, {\n    attached: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: instructions\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 15\n    }\n  })) : __jsx(React.Fragment, null, __jsx(ShortcutListing, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 15\n    }\n  }), __jsx(MarkdownIntroduction, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 15\n    }\n  }), __jsx(BlockDataForm, {\n    schema: schema,\n    title: schema.title,\n    onChangeField: function onChangeField(id, value) {\n      onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, _defineProperty({}, id, value)));\n    },\n    formData: data,\n    block: block,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 15\n    }\n  })))));\n};\n_s(DefaultTextBlockEditor, \"bU//Avw4FMYBqDLHezB4Xh9KYNo=\", false, function () {\n  return [useIntl, useInView];\n});\n_c = DefaultTextBlockEditor;\nexport default DefaultTextBlockEditor;\nvar _c;\n$RefreshReg$(_c, \"DefaultTextBlockEditor\");","map":{"version":3,"names":["ReactDOM","React","readAsDataURL","Dropzone","defineMessages","useIntl","useInView","Dimmer","Loader","Message","Segment","flattenToAppURL","getBaseUrl","config","BlockDataForm","SidebarPortal","BlockChooserButton","SlateEditor","serializeNodesToText","createImageBlock","parseDefaultSelection","deconstructToVoltoBlocks","Transforms","PersistentSlashMenu","ShortcutListing","MarkdownIntroduction","handleKey","TextBlockSchema","imageBlockSVG","messages","text","DEBUG","DefaultTextBlockEditor","props","block","blocksConfig","data","detached","index","onChangeBlock","onInsertBlock","onMutateBlock","onSelectBlock","pathname","properties","selected","uploadRequest","uploadContent","uploadedContent","defaultSelection","saveSlateBlockSelection","allowedBlocks","formTitle","formDescription","slate","settings","textblockExtensions","value","useState","showDropzone","setShowDropzone","uploading","setUploading","newImageId","setNewImageId","prevReq","useRef","withBlockProperties","useCallback","editor","getBlockProps","slateSettings","useMemo","persistentHelpers","onDrop","files","forEach","file","type","split","mime","then","fields","match","title","name","image","encoding","filename","loaded","loading","imageId","prevLoaded","current","useEffect","url","handleUpdate","selection","setTimeout","select","onEditorChange","unstable_batchedUpdates","plaintext","instructions","intl","placeholder","formatMessage","schema","disableNewBlocks","threshold","rootMargin","ref","inView","handleFocus","getRootProps","getInputProps","trim","id","__html"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-slate/src/blocks/Text/DefaultTextBlockEditor.jsx"],"sourcesContent":["import ReactDOM from 'react-dom';\nimport React from 'react';\nimport { readAsDataURL } from 'promise-file-reader';\nimport Dropzone from 'react-dropzone';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { useInView } from 'react-intersection-observer';\nimport { Dimmer, Loader, Message, Segment } from 'semantic-ui-react';\n\nimport { flattenToAppURL, getBaseUrl } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\nimport {\n  BlockDataForm,\n  SidebarPortal,\n  BlockChooserButton,\n} from '@plone/volto/components';\n\nimport { SlateEditor } from 'volto-slate/editor';\nimport { serializeNodesToText } from 'volto-slate/editor/render';\nimport {\n  createImageBlock,\n  parseDefaultSelection,\n  deconstructToVoltoBlocks,\n} from 'volto-slate/utils';\nimport { Transforms } from 'slate';\n\nimport PersistentSlashMenu from './SlashMenu';\nimport ShortcutListing from './ShortcutListing';\nimport MarkdownIntroduction from './MarkdownIntroduction';\nimport { handleKey } from './keyboard';\nimport TextBlockSchema from './schema';\n\nimport imageBlockSVG from '@plone/volto/components/manage/Blocks/Image/block-image.svg';\n\nimport './css/editor.css';\n\n// TODO: refactor dropzone to separate component wrapper\n\nconst messages = defineMessages({\n  text: {\n    id: 'Type text…',\n    defaultMessage: 'Type text…',\n  },\n});\n\nconst DEBUG = false;\n\nexport const DefaultTextBlockEditor = (props) => {\n  const {\n    block,\n    blocksConfig,\n    data,\n    detached = false,\n    index,\n    onChangeBlock,\n    onInsertBlock,\n    onMutateBlock,\n    onSelectBlock,\n    pathname,\n    properties,\n    selected,\n    uploadRequest,\n    uploadContent,\n    uploadedContent,\n    defaultSelection,\n    saveSlateBlockSelection,\n    allowedBlocks,\n    formTitle,\n    formDescription,\n  } = props;\n\n  const { slate } = config.settings;\n  const { textblockExtensions } = slate;\n  const { value } = data;\n\n  // const [addNewBlockOpened, setAddNewBlockOpened] = React.useState();\n  const [showDropzone, setShowDropzone] = React.useState(false);\n  const [uploading, setUploading] = React.useState(false);\n  const [newImageId, setNewImageId] = React.useState(null);\n\n  const prevReq = React.useRef(null);\n\n  const withBlockProperties = React.useCallback(\n    (editor) => {\n      editor.getBlockProps = () => props;\n      return editor;\n    },\n    [props],\n  );\n\n  const slateSettings = React.useMemo(\n    () => ({\n      ...config.settings.slate,\n      persistentHelpers: [\n        ...config.settings.slate.persistentHelpers,\n        PersistentSlashMenu,\n      ],\n    }),\n    [],\n  );\n\n  const onDrop = React.useCallback(\n    (files) => {\n      // TODO: need to fix setUploading, treat uploading indicator\n      // inteligently, show progress report on uploading files\n      setUploading(true);\n      files.forEach((file) => {\n        const [mime] = file.type.split('/');\n        if (mime !== 'image') return;\n\n        readAsDataURL(file).then((data) => {\n          const fields = data.match(/^data:(.*);(.*),(.*)$/);\n          uploadContent(\n            getBaseUrl(pathname),\n            {\n              '@type': 'Image',\n              title: file.name,\n              image: {\n                data: fields[3],\n                encoding: fields[2],\n                'content-type': fields[1],\n                filename: file.name,\n              },\n            },\n            block,\n          );\n        });\n      });\n      setShowDropzone(false);\n    },\n    [pathname, uploadContent, block],\n  );\n\n  const { loaded, loading } = uploadRequest;\n  const imageId = uploadedContent['@id'];\n  const prevLoaded = prevReq.current;\n\n  React.useEffect(() => {\n    if (loaded && !loading && !prevLoaded && newImageId !== imageId) {\n      const url = flattenToAppURL(imageId);\n      setNewImageId(imageId);\n\n      createImageBlock(url, index, props);\n    }\n    prevReq.current = loaded;\n  }, [props, loaded, loading, prevLoaded, imageId, newImageId, index]);\n\n  const handleUpdate = React.useCallback(\n    (editor) => {\n      // defaultSelection is used for things such as \"restoring\" the selection\n      // when joining blocks or moving the selection to block start on block\n      // split\n      if (defaultSelection) {\n        const selection = parseDefaultSelection(editor, defaultSelection);\n        if (selection) {\n          setTimeout(() => {\n            Transforms.select(editor, selection);\n            saveSlateBlockSelection(block, null);\n          }, 120);\n          // TODO: use React sync render API\n          // without setTimeout, the join is not correct. Slate uses internally\n          // a 100ms throttle, so setting to a bigger value seems to help\n        }\n      }\n    },\n    [defaultSelection, block, saveSlateBlockSelection],\n  );\n\n  const onEditorChange = (value, editor) => {\n    ReactDOM.unstable_batchedUpdates(() => {\n      onChangeBlock(block, {\n        ...data,\n        value,\n        plaintext: serializeNodesToText(value || []),\n        // TODO: also add html serialized value\n      });\n      deconstructToVoltoBlocks(editor);\n    });\n  };\n\n  // Get editing instructions from block settings or props\n  let instructions = data?.instructions?.data || data?.instructions;\n  if (!instructions || instructions === '<p><br/></p>') {\n    instructions = formDescription;\n  }\n\n  const intl = useIntl();\n  const placeholder =\n    data.placeholder || formTitle || intl.formatMessage(messages.text);\n  const schema = TextBlockSchema(data);\n\n  const disableNewBlocks = data?.disableNewBlocks || detached;\n  const { ref, inView } = useInView({\n    threshold: 0,\n    rootMargin: '0px 0px 200px 0px',\n  });\n\n  const handleFocus = React.useCallback(() => {\n    if (!selected) {\n      onSelectBlock(block);\n    }\n  }, [onSelectBlock, selected, block]);\n\n  return (\n    <div className=\"text-slate-editor-inner\" ref={ref}>\n      <>\n        <Dropzone\n          disableClick\n          onDrop={onDrop}\n          className=\"dropzone\"\n          onDragOver={() => setShowDropzone(true)}\n          onDragLeave={() => setShowDropzone(false)}\n        >\n          {({ getRootProps, getInputProps }) => {\n            return showDropzone ? (\n              <div className=\"drop-indicator\">\n                {uploading ? (\n                  <Dimmer active>\n                    <Loader indeterminate>Uploading image</Loader>\n                  </Dimmer>\n                ) : (\n                  <Message>\n                    <center>\n                      <img src={imageBlockSVG} alt=\"\" />\n                    </center>\n                  </Message>\n                )}\n              </div>\n            ) : (\n              <>\n                <SlateEditor\n                  index={index}\n                  readOnly={!inView}\n                  properties={properties}\n                  extensions={textblockExtensions}\n                  renderExtensions={[withBlockProperties]}\n                  value={value}\n                  block={block /* is this needed? */}\n                  defaultSelection={defaultSelection}\n                  onUpdate={handleUpdate}\n                  debug={DEBUG}\n                  onFocus={handleFocus}\n                  onChange={(value, editor) => onEditorChange(value, editor)}\n                  onKeyDown={handleKey}\n                  selected={selected}\n                  placeholder={placeholder}\n                  slateSettings={slateSettings}\n                />\n                {DEBUG ? <div>{block}</div> : ''}\n              </>\n            );\n          }}\n        </Dropzone>\n\n        {selected && !data.plaintext?.trim() && !disableNewBlocks && (\n          <BlockChooserButton\n            data={data}\n            block={block}\n            onInsertBlock={(id, value) => {\n              onSelectBlock(onInsertBlock(id, value));\n            }}\n            onMutateBlock={onMutateBlock}\n            allowedBlocks={allowedBlocks}\n            blocksConfig={blocksConfig}\n            size=\"24px\"\n            className=\"block-add-button\"\n            properties={properties}\n          />\n        )}\n\n        <SidebarPortal selected={selected}>\n          <div id=\"slate-plugin-sidebar\"></div>\n          {instructions ? (\n            <Segment attached>\n              <div dangerouslySetInnerHTML={{ __html: instructions }} />\n            </Segment>\n          ) : (\n            <>\n              <ShortcutListing />\n              <MarkdownIntroduction />\n              <BlockDataForm\n                schema={schema}\n                title={schema.title}\n                onChangeField={(id, value) => {\n                  onChangeBlock(block, {\n                    ...data,\n                    [id]: value,\n                  });\n                }}\n                formData={data}\n                block={block}\n              />\n            </>\n          )}\n        </SidebarPortal>\n      </>\n    </div>\n  );\n};\n\nexport default DefaultTextBlockEditor;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Type text…","defaultMessage":"Type text…"}]}},"sourceType":"module","externalDependencies":[]}