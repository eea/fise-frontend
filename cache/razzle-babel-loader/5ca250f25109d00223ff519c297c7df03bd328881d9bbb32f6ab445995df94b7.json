{"ast":null,"code":"import _slicedToArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Multilingual/CreateTranslation.jsx\",\n  _this = this,\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { changeLanguage, getTranslationLocator, getContent } from '@plone/volto/actions';\nimport { flattenToAppURL, normalizeLanguageName } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\nvar CreateTranslation = function CreateTranslation(props) {\n  _s();\n  var dispatch = useDispatch();\n  var _props$location$state = props.location.state,\n    language = _props$location$state.language,\n    translationOf = _props$location$state.translationOf;\n  var _React$useState = React.useState(null),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    translationLocation = _React$useState2[0],\n    setTranslationLocation = _React$useState2[1];\n  var _React$useState3 = React.useState(null),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    translationObject = _React$useState4[0],\n    setTranslationObject = _React$useState4[1];\n  var languageFrom = useSelector(function (state) {\n    return state.intl.locale;\n  });\n  React.useEffect(function () {\n    // Only on mount, we dispatch the locator query\n    dispatch(getTranslationLocator(translationOf, language)).then(function (resp) {\n      setTranslationLocation(resp['@id']);\n    });\n\n    //and we load the translationObject\n    dispatch(getContent(translationOf, null, 'translationObject')).then(function (resp) {\n      setTranslationObject(resp);\n    });\n\n    // On unmount we dispatch the language change\n    return function () {\n      // We change the interface language\n      if (config.settings.supportedLanguages.includes(language)) {\n        var langFileName = normalizeLanguageName(language);\n        import('@root/../locales/' + langFileName + '.json').then(function (locale) {\n          dispatch(changeLanguage(language, locale[\"default\"]));\n        });\n      }\n    };\n    // On mount only\n    /* eslint-disable react-hooks/exhaustive-deps */\n  }, []);\n  return translationLocation && translationObject && __jsx(Redirect, {\n    to: {\n      pathname: \"\".concat(flattenToAppURL(translationLocation), \"/add\"),\n      search: \"?type=\".concat(props.location.state.type),\n      state: {\n        translationOf: props.location.state.translationOf,\n        language: props.location.state.language,\n        translationObject: translationObject,\n        languageFrom: languageFrom\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  });\n};\n_s(CreateTranslation, \"2Zq6zejxLz3CDYAxOOiBr0ghLoU=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = CreateTranslation;\nexport default CreateTranslation;\nvar _c;\n$RefreshReg$(_c, \"CreateTranslation\");","map":{"version":3,"names":["React","Redirect","useDispatch","useSelector","changeLanguage","getTranslationLocator","getContent","flattenToAppURL","normalizeLanguageName","config","CreateTranslation","props","dispatch","location","state","language","translationOf","useState","translationLocation","setTranslationLocation","translationObject","setTranslationObject","languageFrom","intl","locale","useEffect","then","resp","settings","supportedLanguages","includes","langFileName","pathname","search","type"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Multilingual/CreateTranslation.jsx"],"sourcesContent":["import React from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  changeLanguage,\n  getTranslationLocator,\n  getContent,\n} from '@plone/volto/actions';\nimport { flattenToAppURL, normalizeLanguageName } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\n\nconst CreateTranslation = (props) => {\n  const dispatch = useDispatch();\n  const { language, translationOf } = props.location.state;\n  const [translationLocation, setTranslationLocation] = React.useState(null);\n  const [translationObject, setTranslationObject] = React.useState(null);\n  const languageFrom = useSelector((state) => state.intl.locale);\n\n  React.useEffect(() => {\n    // Only on mount, we dispatch the locator query\n    dispatch(getTranslationLocator(translationOf, language)).then((resp) => {\n      setTranslationLocation(resp['@id']);\n    });\n\n    //and we load the translationObject\n    dispatch(getContent(translationOf, null, 'translationObject')).then(\n      (resp) => {\n        setTranslationObject(resp);\n      },\n    );\n\n    // On unmount we dispatch the language change\n    return () => {\n      // We change the interface language\n      if (config.settings.supportedLanguages.includes(language)) {\n        const langFileName = normalizeLanguageName(language);\n        import('@root/../locales/' + langFileName + '.json').then((locale) => {\n          dispatch(changeLanguage(language, locale.default));\n        });\n      }\n    };\n    // On mount only\n    /* eslint-disable react-hooks/exhaustive-deps */\n  }, []);\n\n  return (\n    translationLocation &&\n    translationObject && (\n      <Redirect\n        to={{\n          pathname: `${flattenToAppURL(translationLocation)}/add`,\n          search: `?type=${props.location.state.type}`,\n          state: {\n            translationOf: props.location.state.translationOf,\n            language: props.location.state.language,\n            translationObject: translationObject,\n            languageFrom,\n          },\n        }}\n      />\n    )\n  );\n};\n\nexport default CreateTranslation;\n"],"mappings":";;;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SACEC,cAAc,EACdC,qBAAqB,EACrBC,UAAU,QACL,sBAAsB;AAC7B,SAASC,eAAe,EAAEC,qBAAqB,QAAQ,sBAAsB;AAC7E,OAAOC,MAAM,MAAM,uBAAuB;AAE1C,IAAMC,iBAAiB,GAAG,SAApBA,iBAAiB,CAAIC,KAAK,EAAK;EAAA;EACnC,IAAMC,QAAQ,GAAGV,WAAW,EAAE;EAC9B,4BAAoCS,KAAK,CAACE,QAAQ,CAACC,KAAK;IAAhDC,QAAQ,yBAARA,QAAQ;IAAEC,aAAa,yBAAbA,aAAa;EAC/B,sBAAsDhB,KAAK,CAACiB,QAAQ,CAAC,IAAI,CAAC;IAAA;IAAnEC,mBAAmB;IAAEC,sBAAsB;EAClD,uBAAkDnB,KAAK,CAACiB,QAAQ,CAAC,IAAI,CAAC;IAAA;IAA/DG,iBAAiB;IAAEC,oBAAoB;EAC9C,IAAMC,YAAY,GAAGnB,WAAW,CAAC,UAACW,KAAK;IAAA,OAAKA,KAAK,CAACS,IAAI,CAACC,MAAM;EAAA,EAAC;EAE9DxB,KAAK,CAACyB,SAAS,CAAC,YAAM;IACpB;IACAb,QAAQ,CAACP,qBAAqB,CAACW,aAAa,EAAED,QAAQ,CAAC,CAAC,CAACW,IAAI,CAAC,UAACC,IAAI,EAAK;MACtER,sBAAsB,CAACQ,IAAI,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC,CAAC;;IAEF;IACAf,QAAQ,CAACN,UAAU,CAACU,aAAa,EAAE,IAAI,EAAE,mBAAmB,CAAC,CAAC,CAACU,IAAI,CACjE,UAACC,IAAI,EAAK;MACRN,oBAAoB,CAACM,IAAI,CAAC;IAC5B,CAAC,CACF;;IAED;IACA,OAAO,YAAM;MACX;MACA,IAAIlB,MAAM,CAACmB,QAAQ,CAACC,kBAAkB,CAACC,QAAQ,CAACf,QAAQ,CAAC,EAAE;QACzD,IAAMgB,YAAY,GAAGvB,qBAAqB,CAACO,QAAQ,CAAC;QACpD,MAAM,CAAC,mBAAmB,GAAGgB,YAAY,GAAG,OAAO,CAAC,CAACL,IAAI,CAAC,UAACF,MAAM,EAAK;UACpEZ,QAAQ,CAACR,cAAc,CAACW,QAAQ,EAAES,MAAM,WAAQ,CAAC,CAAC;QACpD,CAAC,CAAC;MACJ;IACF,CAAC;IACD;IACA;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,OACEN,mBAAmB,IACnBE,iBAAiB,IACf,MAAC,QAAQ;IACP,EAAE,EAAE;MACFY,QAAQ,YAAKzB,eAAe,CAACW,mBAAmB,CAAC,SAAM;MACvDe,MAAM,kBAAWtB,KAAK,CAACE,QAAQ,CAACC,KAAK,CAACoB,IAAI,CAAE;MAC5CpB,KAAK,EAAE;QACLE,aAAa,EAAEL,KAAK,CAACE,QAAQ,CAACC,KAAK,CAACE,aAAa;QACjDD,QAAQ,EAAEJ,KAAK,CAACE,QAAQ,CAACC,KAAK,CAACC,QAAQ;QACvCK,iBAAiB,EAAEA,iBAAiB;QACpCE,YAAY,EAAZA;MACF;IACF,CAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAEL;AAEL,CAAC;AAAC,GAnDIZ,iBAAiB;EAAA,QACJR,WAAW,EAIPC,WAAW;AAAA;AAAA,KAL5BO,iBAAiB;AAqDvB,eAAeA,iBAAiB;AAAC;AAAA"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}