{"ast":null,"code":"import { matchRoutes } from 'react-router-config';\nexport function isPromise(obj) {\n  return typeof obj === 'object' && obj && obj.then instanceof Function;\n}\nexport const mapSeries = Promise.mapSeries || function promiseMapSeries(iterable, iterator) {\n  const {\n    length\n  } = iterable;\n  const results = new Array(length);\n  let i = 0;\n  function iterateOverResults() {\n    return iterator(iterable[i], i, iterable).then(result => {\n      results[i] = result;\n      i += 1;\n      if (i < length) {\n        return iterateOverResults();\n      }\n      return results;\n    });\n  }\n  return iterateOverResults();\n};\nconst identity = arg => arg;\nlet immutableStateFunc = identity;\nlet mutableStateFunc = identity;\nexport const getImmutableState = state => immutableStateFunc(state);\nexport const getMutableState = state => mutableStateFunc(state);\nexport const matchAllRoutes = (routes, pathname) => {\n  const matching = routes.reduce((acc, route) => [...acc, ...matchRoutes([route], pathname)], []);\n  return matching;\n};","map":{"version":3,"names":["matchRoutes","isPromise","obj","then","Function","mapSeries","Promise","promiseMapSeries","iterable","iterator","length","results","Array","i","iterateOverResults","result","identity","arg","immutableStateFunc","mutableStateFunc","getImmutableState","state","getMutableState","matchAllRoutes","routes","pathname","matching","reduce","acc","route"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/helpers/AsyncConnect/utils.js"],"sourcesContent":["import { matchRoutes } from 'react-router-config';\nexport function isPromise(obj) {\n  return typeof obj === 'object' && obj && obj.then instanceof Function;\n}\n\nexport const mapSeries =\n  Promise.mapSeries ||\n  function promiseMapSeries(iterable, iterator) {\n    const { length } = iterable;\n    const results = new Array(length);\n    let i = 0;\n\n    function iterateOverResults() {\n      return iterator(iterable[i], i, iterable).then((result) => {\n        results[i] = result;\n        i += 1;\n        if (i < length) {\n          return iterateOverResults();\n        }\n\n        return results;\n      });\n    }\n\n    return iterateOverResults();\n  };\n\nconst identity = (arg) => arg;\nlet immutableStateFunc = identity;\nlet mutableStateFunc = identity;\nexport const getImmutableState = (state) => immutableStateFunc(state);\nexport const getMutableState = (state) => mutableStateFunc(state);\n\nexport const matchAllRoutes = (routes, pathname) => {\n  const matching = routes.reduce(\n    (acc, route) => [...acc, ...matchRoutes([route], pathname)],\n    [],\n  );\n  return matching;\n};\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,qBAAqB;AACjD,OAAO,SAASC,SAAS,CAACC,GAAG,EAAE;EAC7B,OAAO,OAAOA,GAAG,KAAK,QAAQ,IAAIA,GAAG,IAAIA,GAAG,CAACC,IAAI,YAAYC,QAAQ;AACvE;AAEA,OAAO,MAAMC,SAAS,GACpBC,OAAO,CAACD,SAAS,IACjB,SAASE,gBAAgB,CAACC,QAAQ,EAAEC,QAAQ,EAAE;EAC5C,MAAM;IAAEC;EAAO,CAAC,GAAGF,QAAQ;EAC3B,MAAMG,OAAO,GAAG,IAAIC,KAAK,CAACF,MAAM,CAAC;EACjC,IAAIG,CAAC,GAAG,CAAC;EAET,SAASC,kBAAkB,GAAG;IAC5B,OAAOL,QAAQ,CAACD,QAAQ,CAACK,CAAC,CAAC,EAAEA,CAAC,EAAEL,QAAQ,CAAC,CAACL,IAAI,CAAEY,MAAM,IAAK;MACzDJ,OAAO,CAACE,CAAC,CAAC,GAAGE,MAAM;MACnBF,CAAC,IAAI,CAAC;MACN,IAAIA,CAAC,GAAGH,MAAM,EAAE;QACd,OAAOI,kBAAkB,EAAE;MAC7B;MAEA,OAAOH,OAAO;IAChB,CAAC,CAAC;EACJ;EAEA,OAAOG,kBAAkB,EAAE;AAC7B,CAAC;AAEH,MAAME,QAAQ,GAAIC,GAAG,IAAKA,GAAG;AAC7B,IAAIC,kBAAkB,GAAGF,QAAQ;AACjC,IAAIG,gBAAgB,GAAGH,QAAQ;AAC/B,OAAO,MAAMI,iBAAiB,GAAIC,KAAK,IAAKH,kBAAkB,CAACG,KAAK,CAAC;AACrE,OAAO,MAAMC,eAAe,GAAID,KAAK,IAAKF,gBAAgB,CAACE,KAAK,CAAC;AAEjE,OAAO,MAAME,cAAc,GAAG,CAACC,MAAM,EAAEC,QAAQ,KAAK;EAClD,MAAMC,QAAQ,GAAGF,MAAM,CAACG,MAAM,CAC5B,CAACC,GAAG,EAAEC,KAAK,KAAK,CAAC,GAAGD,GAAG,EAAE,GAAG5B,WAAW,CAAC,CAAC6B,KAAK,CAAC,EAAEJ,QAAQ,CAAC,CAAC,EAC3D,EAAE,CACH;EACD,OAAOC,QAAQ;AACjB,CAAC"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}