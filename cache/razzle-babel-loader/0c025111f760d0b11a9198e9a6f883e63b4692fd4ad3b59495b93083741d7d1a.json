{"ast":null,"code":"/**\n * Sitemap helper.\n * @module helpers/Sitemap\n */\n\nimport superagent from 'superagent';\nimport config from '@plone/volto/registry';\nimport { addHeadersFactory } from '@plone/volto/helpers/Proxy/Proxy';\n\n/**\n * Get a resource image/file with authenticated (if token exist) API headers\n * @function getAPIResourceWithAuth\n * @param {Object} req Request object\n * @return {string} The response with the image\n */\nexport const getAPIResourceWithAuth = req => new Promise((resolve, reject) => {\n  const {\n    settings\n  } = config;\n  const APISUFIX = settings.legacyTraverse ? '' : '/++api++';\n  let apiPath = '';\n  if (settings.internalApiPath && __SERVER__) {\n    apiPath = settings.internalApiPath;\n  } else if (__DEVELOPMENT__ && settings.devProxyToApiPath) {\n    apiPath = settings.devProxyToApiPath;\n  } else {\n    apiPath = settings.apiPath;\n  }\n  const request = superagent.get(`${apiPath}${APISUFIX}${req.path}`).maxResponseSize(settings.maxResponseSize).responseType('blob');\n  const authToken = req.universalCookies.get('auth_token');\n  if (authToken) {\n    request.set('Authorization', `Bearer ${authToken}`);\n  }\n  request.use(addHeadersFactory(req));\n  request.then(resolve).catch(reject);\n});","map":{"version":3,"names":["superagent","config","addHeadersFactory","getAPIResourceWithAuth","req","Promise","resolve","reject","settings","APISUFIX","legacyTraverse","apiPath","internalApiPath","__SERVER__","__DEVELOPMENT__","devProxyToApiPath","request","get","path","maxResponseSize","responseType","authToken","universalCookies","set","use","then","catch"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/helpers/Api/APIResourceWithAuth.js"],"sourcesContent":["/**\n * Sitemap helper.\n * @module helpers/Sitemap\n */\n\nimport superagent from 'superagent';\nimport config from '@plone/volto/registry';\nimport { addHeadersFactory } from '@plone/volto/helpers/Proxy/Proxy';\n\n/**\n * Get a resource image/file with authenticated (if token exist) API headers\n * @function getAPIResourceWithAuth\n * @param {Object} req Request object\n * @return {string} The response with the image\n */\nexport const getAPIResourceWithAuth = (req) =>\n  new Promise((resolve, reject) => {\n    const { settings } = config;\n    const APISUFIX = settings.legacyTraverse ? '' : '/++api++';\n\n    let apiPath = '';\n    if (settings.internalApiPath && __SERVER__) {\n      apiPath = settings.internalApiPath;\n    } else if (__DEVELOPMENT__ && settings.devProxyToApiPath) {\n      apiPath = settings.devProxyToApiPath;\n    } else {\n      apiPath = settings.apiPath;\n    }\n    const request = superagent\n      .get(`${apiPath}${APISUFIX}${req.path}`)\n      .maxResponseSize(settings.maxResponseSize)\n      .responseType('blob');\n    const authToken = req.universalCookies.get('auth_token');\n    if (authToken) {\n      request.set('Authorization', `Bearer ${authToken}`);\n    }\n    request.use(addHeadersFactory(req));\n    request.then(resolve).catch(reject);\n  });\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,OAAOA,UAAU,MAAM,YAAY;AACnC,OAAOC,MAAM,MAAM,uBAAuB;AAC1C,SAASC,iBAAiB,QAAQ,kCAAkC;;AAEpE;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,sBAAsB,GAAIC,GAAG,IACxC,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;EAC/B,MAAM;IAAEC;EAAS,CAAC,GAAGP,MAAM;EAC3B,MAAMQ,QAAQ,GAAGD,QAAQ,CAACE,cAAc,GAAG,EAAE,GAAG,UAAU;EAE1D,IAAIC,OAAO,GAAG,EAAE;EAChB,IAAIH,QAAQ,CAACI,eAAe,IAAIC,UAAU,EAAE;IAC1CF,OAAO,GAAGH,QAAQ,CAACI,eAAe;EACpC,CAAC,MAAM,IAAIE,eAAe,IAAIN,QAAQ,CAACO,iBAAiB,EAAE;IACxDJ,OAAO,GAAGH,QAAQ,CAACO,iBAAiB;EACtC,CAAC,MAAM;IACLJ,OAAO,GAAGH,QAAQ,CAACG,OAAO;EAC5B;EACA,MAAMK,OAAO,GAAGhB,UAAU,CACvBiB,GAAG,CAAE,GAAEN,OAAQ,GAAEF,QAAS,GAAEL,GAAG,CAACc,IAAK,EAAC,CAAC,CACvCC,eAAe,CAACX,QAAQ,CAACW,eAAe,CAAC,CACzCC,YAAY,CAAC,MAAM,CAAC;EACvB,MAAMC,SAAS,GAAGjB,GAAG,CAACkB,gBAAgB,CAACL,GAAG,CAAC,YAAY,CAAC;EACxD,IAAII,SAAS,EAAE;IACbL,OAAO,CAACO,GAAG,CAAC,eAAe,EAAG,UAASF,SAAU,EAAC,CAAC;EACrD;EACAL,OAAO,CAACQ,GAAG,CAACtB,iBAAiB,CAACE,GAAG,CAAC,CAAC;EACnCY,OAAO,CAACS,IAAI,CAACnB,OAAO,CAAC,CAACoB,KAAK,CAACnB,MAAM,CAAC;AACrC,CAAC,CAAC"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}