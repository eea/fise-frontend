{"ast":null,"code":"import _isEmpty from \"lodash/isEmpty\";\n/**\n * Converts the state (extracted from URL) to options for the facet control\n *\n * Shared by the SelectFacet and CheckboxFacet\n */\nexport const selectFacetStateToValue = ({\n  facetSettings,\n  index,\n  selectedValue\n}) => {\n  var _index$values2, _index$values2$select;\n  const isMulti = facetSettings.multiple;\n  return selectedValue ? isMulti ? Array.isArray(selectedValue) ? selectedValue.map(v => {\n    var _index$values, _index$values$v;\n    return {\n      value: v,\n      label: (_index$values = index.values) === null || _index$values === void 0 ? void 0 : (_index$values$v = _index$values[v]) === null || _index$values$v === void 0 ? void 0 : _index$values$v.title\n    };\n  }) : [] : {\n    value: selectedValue,\n    label: (_index$values2 = index.values) === null || _index$values2 === void 0 ? void 0 : (_index$values2$select = _index$values2[selectedValue]) === null || _index$values2$select === void 0 ? void 0 : _index$values2$select.title\n  } : [];\n};\nexport const selectFacetSchemaEnhancer = ({\n  schema,\n  formData\n}) => {\n  // adds (enables) the 'multiple' field after the 'type' dropdown\n  let {\n    fields\n  } = schema.fieldsets[0];\n  const pos = fields.indexOf('type') + 1;\n  fields = [...fields.slice(0, pos), 'multiple', ...fields.slice(pos, fields.length)];\n  schema.fieldsets[0].fields = fields;\n  return schema;\n};\nexport const selectFacetValueToQuery = ({\n  value,\n  facet\n}) => {\n  return !_isEmpty(value) ? {\n    i: facet.field.value,\n    o: Array.isArray(value) ? 'plone.app.querystring.operation.list.contains' : 'plone.app.querystring.operation.selection.is',\n    v: value\n  } : undefined;\n};","map":{"version":3,"names":["selectFacetStateToValue","facetSettings","index","selectedValue","isMulti","multiple","Array","isArray","map","v","value","label","values","title","selectFacetSchemaEnhancer","schema","formData","fields","fieldsets","pos","indexOf","slice","length","selectFacetValueToQuery","facet","i","field","o","undefined"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Blocks/Search/components/base.js"],"sourcesContent":["import { isEmpty } from 'lodash';\n\n/**\n * Converts the state (extracted from URL) to options for the facet control\n *\n * Shared by the SelectFacet and CheckboxFacet\n */\nexport const selectFacetStateToValue = ({\n  facetSettings,\n  index,\n  selectedValue,\n}) => {\n  const isMulti = facetSettings.multiple;\n  return selectedValue\n    ? isMulti\n      ? Array.isArray(selectedValue)\n        ? selectedValue.map((v) => ({\n            value: v,\n            label: index.values?.[v]?.title,\n          }))\n        : []\n      : {\n          value: selectedValue,\n          label: index.values?.[selectedValue]?.title,\n        }\n    : [];\n};\n\nexport const selectFacetSchemaEnhancer = ({ schema, formData }) => {\n  // adds (enables) the 'multiple' field after the 'type' dropdown\n  let { fields } = schema.fieldsets[0];\n  const pos = fields.indexOf('type') + 1;\n  fields = [\n    ...fields.slice(0, pos),\n    'multiple',\n    ...fields.slice(pos, fields.length),\n  ];\n  schema.fieldsets[0].fields = fields;\n  return schema;\n};\n\nexport const selectFacetValueToQuery = ({ value, facet }) => {\n  return !isEmpty(value)\n    ? {\n        i: facet.field.value,\n        o: Array.isArray(value)\n          ? 'plone.app.querystring.operation.list.contains'\n          : 'plone.app.querystring.operation.selection.is',\n        v: value,\n      }\n    : undefined;\n};\n"],"mappings":";AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,uBAAuB,GAAG,CAAC;EACtCC,aAAa;EACbC,KAAK;EACLC;AACF,CAAC,KAAK;EAAA;EACJ,MAAMC,OAAO,GAAGH,aAAa,CAACI,QAAQ;EACtC,OAAOF,aAAa,GAChBC,OAAO,GACLE,KAAK,CAACC,OAAO,CAACJ,aAAa,CAAC,GAC1BA,aAAa,CAACK,GAAG,CAAEC,CAAC;IAAA;IAAA,OAAM;MACxBC,KAAK,EAAED,CAAC;MACRE,KAAK,mBAAET,KAAK,CAACU,MAAM,qEAAZ,cAAeH,CAAC,CAAC,oDAAjB,gBAAmBI;IAC5B,CAAC;EAAA,CAAC,CAAC,GACH,EAAE,GACJ;IACEH,KAAK,EAAEP,aAAa;IACpBQ,KAAK,oBAAET,KAAK,CAACU,MAAM,4EAAZ,eAAeT,aAAa,CAAC,0DAA7B,sBAA+BU;EACxC,CAAC,GACH,EAAE;AACR,CAAC;AAED,OAAO,MAAMC,yBAAyB,GAAG,CAAC;EAAEC,MAAM;EAAEC;AAAS,CAAC,KAAK;EACjE;EACA,IAAI;IAAEC;EAAO,CAAC,GAAGF,MAAM,CAACG,SAAS,CAAC,CAAC,CAAC;EACpC,MAAMC,GAAG,GAAGF,MAAM,CAACG,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC;EACtCH,MAAM,GAAG,CACP,GAAGA,MAAM,CAACI,KAAK,CAAC,CAAC,EAAEF,GAAG,CAAC,EACvB,UAAU,EACV,GAAGF,MAAM,CAACI,KAAK,CAACF,GAAG,EAAEF,MAAM,CAACK,MAAM,CAAC,CACpC;EACDP,MAAM,CAACG,SAAS,CAAC,CAAC,CAAC,CAACD,MAAM,GAAGA,MAAM;EACnC,OAAOF,MAAM;AACf,CAAC;AAED,OAAO,MAAMQ,uBAAuB,GAAG,CAAC;EAAEb,KAAK;EAAEc;AAAM,CAAC,KAAK;EAC3D,OAAO,CAAC,SAAQd,KAAK,CAAC,GAClB;IACEe,CAAC,EAAED,KAAK,CAACE,KAAK,CAAChB,KAAK;IACpBiB,CAAC,EAAErB,KAAK,CAACC,OAAO,CAACG,KAAK,CAAC,GACnB,+CAA+C,GAC/C,8CAA8C;IAClDD,CAAC,EAAEC;EACL,CAAC,GACDkB,SAAS;AACf,CAAC"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}