{"ast":null,"code":"import _extends from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/extends.js\";\nimport _toConsumableArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _regeneratorRuntime from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Widgets/SelectAutoComplete.jsx\";\nvar __jsx = React.createElement;\n/**\n * SelectAutoComplete component.\n * @module components/manage/Widgets/SelectAutoComplete\n */\n\nimport React, { Component } from 'react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport { normalizeValue, normalizeChoices, convertValueToVocabQuery } from './SelectUtils';\nimport { getVocabFromHint, getVocabFromField, getVocabFromItems } from '@plone/volto/helpers';\nimport { getVocabulary, getVocabularyTokenTitle } from '@plone/volto/actions';\nimport { Option, ClearIndicator, DropdownIndicator, MultiValueContainer, selectTheme, customSelectStyles, MenuList } from '@plone/volto/components/manage/Widgets/SelectStyling';\nimport { FormFieldWrapper } from '@plone/volto/components';\nvar messages = defineMessages({\n  select: {\n    \"id\": \"Select\\u2026\",\n    \"defaultMessage\": \"Select\\u2026\"\n  },\n  no_options: {\n    \"id\": \"No options\",\n    \"defaultMessage\": \"No options\"\n  },\n  type_text: {\n    \"id\": \"Type text...\",\n    \"defaultMessage\": \"Type text...\"\n  }\n});\n\n/**\n * SelectAutoComplete component class.\n * @class SelectAutoComplete\n * @extends Component\n */\nvar SelectAutoComplete = /*#__PURE__*/function (_Component) {\n  _inherits(SelectAutoComplete, _Component);\n  var _super = _createSuper(SelectAutoComplete);\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Actions\n   */\n  function SelectAutoComplete(props) {\n    var _this;\n    _classCallCheck(this, SelectAutoComplete);\n    _this = _super.call(this, props);\n    _defineProperty(_assertThisInitialized(_this), \"timeoutRef\", /*#__PURE__*/React.createRef());\n    _defineProperty(_assertThisInitialized(_this), \"SEARCH_HOLDOFF\", 2);\n    _defineProperty(_assertThisInitialized(_this), \"loadOptions\", function (query) {\n      // Implement a debounce of 400ms and a min search of 3 chars\n      if (query.length > _this.SEARCH_HOLDOFF) {\n        if (_this.timeoutRef.current) clearTimeout(_this.timeoutRef.current);\n        return new Promise(function (resolve) {\n          _this.timeoutRef.current = setTimeout( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n            var res;\n            return _regeneratorRuntime().wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    _context.next = 2;\n                    return _this.fetchAvailableChoices(query);\n                  case 2:\n                    res = _context.sent;\n                    resolve(res);\n                  case 4:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee);\n          })), 400);\n        });\n      } else {\n        return Promise.resolve([]);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"fetchAvailableChoices\", /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(query) {\n        var resp;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _this.props.getVocabulary({\n                  vocabNameOrURL: _this.props.vocabBaseUrl,\n                  query: query,\n                  size: -1,\n                  subrequest: _this.props.lang\n                });\n              case 2:\n                resp = _context2.sent;\n                return _context2.abrupt(\"return\", normalizeChoices(resp.items || [], _this.props.intl));\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    _this.handleChange = _this.handleChange.bind(_assertThisInitialized(_this));\n    _this.state = {\n      searchLength: 0,\n      termsPairsCache: []\n    };\n    return _this;\n  }\n  _createClass(SelectAutoComplete, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n        id = _this$props.id,\n        lang = _this$props.lang,\n        value = _this$props.value,\n        choices = _this$props.choices;\n      if (value && (value === null || value === void 0 ? void 0 : value.length) > 0) {\n        var tokensQuery = convertValueToVocabQuery(normalizeValue(choices, value, this.props.intl));\n        this.props.getVocabularyTokenTitle(_objectSpread({\n          vocabNameOrURL: this.props.vocabBaseUrl,\n          subrequest: \"widget-\".concat(id, \"-\").concat(lang)\n        }, tokensQuery));\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this$props2 = this.props,\n        value = _this$props2.value,\n        choices = _this$props2.choices;\n      if (this.state.termsPairsCache.length === 0 && (value === null || value === void 0 ? void 0 : value.length) > 0 && (choices === null || choices === void 0 ? void 0 : choices.length) > 0) {\n        this.setState(function (state) {\n          return {\n            termsPairsCache: [].concat(_toConsumableArray(state.termsPairsCache), _toConsumableArray(choices))\n          };\n        });\n      }\n    }\n\n    /**\n     * Handle the field change, store it in the local state and back to simple\n     * array of tokens for correct serialization\n     * @method handleChange\n     * @param {array} selectedOption The selected options (already aggregated).\n     * @returns {undefined}\n     */\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(selectedOption) {\n      this.props.onChange(this.props.id, selectedOption ? selectedOption.map(function (item) {\n        return item.value;\n      }) : null);\n      this.setState(function (state) {\n        return {\n          termsPairsCache: [].concat(_toConsumableArray(state.termsPairsCache), _toConsumableArray(selectedOption))\n        };\n      });\n    }\n  }, {\n    key: \"render\",\n    value:\n    /**\n     * Render method.\n     * @method render\n     * @returns {string} Markup for the component.\n     */\n    function render() {\n      var _this2 = this,\n        _this$props$choices,\n        _this$props$placehold;\n      var selectedOption = normalizeValue(this.state.termsPairsCache, this.props.value, this.props.intl);\n      var SelectAsync = this.props.reactSelectAsync[\"default\"];\n      return __jsx(FormFieldWrapper, _extends({}, this.props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 7\n        }\n      }), __jsx(SelectAsync, {\n        id: \"field-\".concat(this.props.id),\n        key: this.props.id,\n        isDisabled: this.props.disabled || this.props.isDisabled,\n        className: \"react-select-container\",\n        classNamePrefix: \"react-select\",\n        cacheOptions: true,\n        defaultOptions: [],\n        loadOptions: this.loadOptions,\n        onInputChange: function onInputChange(search) {\n          return _this2.setState({\n            searchLength: search.length\n          });\n        },\n        noOptionsMessage: function noOptionsMessage() {\n          return _this2.props.intl.formatMessage(_this2.state.searchLength > _this2.SEARCH_HOLDOFF ? messages.no_options : messages.type_text);\n        },\n        styles: customSelectStyles,\n        theme: selectTheme,\n        components: _objectSpread(_objectSpread({}, ((_this$props$choices = this.props.choices) === null || _this$props$choices === void 0 ? void 0 : _this$props$choices.length) > 25 && {\n          MenuList: MenuList\n        }), {}, {\n          MultiValueContainer: MultiValueContainer,\n          ClearIndicator: ClearIndicator,\n          DropdownIndicator: DropdownIndicator,\n          Option: Option\n        }),\n        value: selectedOption || [],\n        placeholder: (_this$props$placehold = this.props.placeholder) !== null && _this$props$placehold !== void 0 ? _this$props$placehold : this.props.intl.formatMessage(messages.select),\n        onChange: this.handleChange,\n        isMulti: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n  return SelectAutoComplete;\n}(Component);\n_defineProperty(SelectAutoComplete, \"propTypes\", {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  required: PropTypes.bool,\n  error: PropTypes.arrayOf(PropTypes.string),\n  getVocabulary: PropTypes.func.isRequired,\n  choices: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.object, PropTypes.array])),\n  items: PropTypes.shape({\n    vocabulary: PropTypes.object\n  }),\n  widgetOptions: PropTypes.shape({\n    vocabulary: PropTypes.object\n  }),\n  value: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.object, PropTypes.string])),\n  onChange: PropTypes.func.isRequired,\n  wrapped: PropTypes.bool,\n  isDisabled: PropTypes.bool,\n  placeholder: PropTypes.string\n});\n_defineProperty(SelectAutoComplete, \"defaultProps\", {\n  description: null,\n  required: false,\n  items: {\n    vocabulary: null\n  },\n  widgetOptions: {\n    vocabulary: null\n  },\n  error: [],\n  choices: [],\n  value: null\n});\nexport var SelectAutoCompleteComponent = injectIntl(SelectAutoComplete);\n_c = SelectAutoCompleteComponent;\nexport default compose(injectIntl, injectLazyLibs(['reactSelectAsync']), connect(function (state, props) {\n  var _state$vocabularies, _state$vocabularies$v, _state$vocabularies$v2, _state$vocabularies$v3, _props$items;\n  var vocabBaseUrl = getVocabFromHint(props) || getVocabFromField(props) || getVocabFromItems(props);\n  var vocabState = (_state$vocabularies = state.vocabularies) === null || _state$vocabularies === void 0 ? void 0 : (_state$vocabularies$v = _state$vocabularies[vocabBaseUrl]) === null || _state$vocabularies$v === void 0 ? void 0 : (_state$vocabularies$v2 = _state$vocabularies$v.subrequests) === null || _state$vocabularies$v2 === void 0 ? void 0 : (_state$vocabularies$v3 = _state$vocabularies$v2[\"widget-\".concat(props.id, \"-\").concat(state.intl.locale)]) === null || _state$vocabularies$v3 === void 0 ? void 0 : _state$vocabularies$v3.items;\n\n  // If the schema already has the choices in it, then do not try to get\n  // the vocab, even if there is one\n  return (_props$items = props.items) !== null && _props$items !== void 0 && _props$items.choices ? {\n    choices: props.items.choices,\n    lang: state.intl.locale\n  } : vocabState ? {\n    choices: vocabState,\n    vocabBaseUrl: vocabBaseUrl,\n    lang: state.intl.locale\n  } : {\n    vocabBaseUrl: vocabBaseUrl,\n    lang: state.intl.locale\n  };\n}, {\n  getVocabulary: getVocabulary,\n  getVocabularyTokenTitle: getVocabularyTokenTitle\n}))(SelectAutoComplete);\nvar _c;\n$RefreshReg$(_c, \"SelectAutoCompleteComponent\");","map":{"version":3,"names":["React","Component","defineMessages","injectIntl","PropTypes","compose","connect","injectLazyLibs","normalizeValue","normalizeChoices","convertValueToVocabQuery","getVocabFromHint","getVocabFromField","getVocabFromItems","getVocabulary","getVocabularyTokenTitle","Option","ClearIndicator","DropdownIndicator","MultiValueContainer","selectTheme","customSelectStyles","MenuList","FormFieldWrapper","messages","select","no_options","type_text","SelectAutoComplete","props","createRef","query","length","SEARCH_HOLDOFF","timeoutRef","current","clearTimeout","Promise","resolve","setTimeout","fetchAvailableChoices","res","vocabNameOrURL","vocabBaseUrl","size","subrequest","lang","resp","items","intl","handleChange","bind","state","searchLength","termsPairsCache","id","value","choices","tokensQuery","prevProps","prevState","setState","selectedOption","onChange","map","item","SelectAsync","reactSelectAsync","disabled","isDisabled","loadOptions","search","formatMessage","placeholder","string","isRequired","title","description","required","bool","error","arrayOf","func","oneOfType","object","array","shape","vocabulary","widgetOptions","wrapped","SelectAutoCompleteComponent","vocabState","vocabularies","subrequests","locale"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Widgets/SelectAutoComplete.jsx"],"sourcesContent":["/**\n * SelectAutoComplete component.\n * @module components/manage/Widgets/SelectAutoComplete\n */\n\nimport React, { Component } from 'react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport {\n  normalizeValue,\n  normalizeChoices,\n  convertValueToVocabQuery,\n} from './SelectUtils';\n\nimport {\n  getVocabFromHint,\n  getVocabFromField,\n  getVocabFromItems,\n} from '@plone/volto/helpers';\nimport { getVocabulary, getVocabularyTokenTitle } from '@plone/volto/actions';\n\nimport {\n  Option,\n  ClearIndicator,\n  DropdownIndicator,\n  MultiValueContainer,\n  selectTheme,\n  customSelectStyles,\n  MenuList,\n} from '@plone/volto/components/manage/Widgets/SelectStyling';\n\nimport { FormFieldWrapper } from '@plone/volto/components';\n\nconst messages = defineMessages({\n  select: {\n    id: 'Select…',\n    defaultMessage: 'Select…',\n  },\n  no_options: {\n    id: 'No options',\n    defaultMessage: 'No options',\n  },\n  type_text: {\n    id: 'Type text...',\n    defaultMessage: 'Type text...',\n  },\n});\n\n/**\n * SelectAutoComplete component class.\n * @class SelectAutoComplete\n * @extends Component\n */\nclass SelectAutoComplete extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string,\n    required: PropTypes.bool,\n    error: PropTypes.arrayOf(PropTypes.string),\n    getVocabulary: PropTypes.func.isRequired,\n    choices: PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    ),\n    items: PropTypes.shape({\n      vocabulary: PropTypes.object,\n    }),\n    widgetOptions: PropTypes.shape({\n      vocabulary: PropTypes.object,\n    }),\n    value: PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n    ),\n    onChange: PropTypes.func.isRequired,\n    wrapped: PropTypes.bool,\n    isDisabled: PropTypes.bool,\n    placeholder: PropTypes.string,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    description: null,\n    required: false,\n    items: {\n      vocabulary: null,\n    },\n    widgetOptions: {\n      vocabulary: null,\n    },\n    error: [],\n    choices: [],\n    value: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Actions\n   */\n  constructor(props) {\n    super(props);\n\n    this.handleChange = this.handleChange.bind(this);\n\n    this.state = {\n      searchLength: 0,\n      termsPairsCache: [],\n    };\n  }\n\n  componentDidMount() {\n    const { id, lang, value, choices } = this.props;\n    if (value && value?.length > 0) {\n      const tokensQuery = convertValueToVocabQuery(\n        normalizeValue(choices, value, this.props.intl),\n      );\n\n      this.props.getVocabularyTokenTitle({\n        vocabNameOrURL: this.props.vocabBaseUrl,\n        subrequest: `widget-${id}-${lang}`,\n        ...tokensQuery,\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { value, choices } = this.props;\n    if (\n      this.state.termsPairsCache.length === 0 &&\n      value?.length > 0 &&\n      choices?.length > 0\n    ) {\n      this.setState((state) => ({\n        termsPairsCache: [...state.termsPairsCache, ...choices],\n      }));\n    }\n  }\n\n  /**\n   * Handle the field change, store it in the local state and back to simple\n   * array of tokens for correct serialization\n   * @method handleChange\n   * @param {array} selectedOption The selected options (already aggregated).\n   * @returns {undefined}\n   */\n  handleChange(selectedOption) {\n    this.props.onChange(\n      this.props.id,\n      selectedOption ? selectedOption.map((item) => item.value) : null,\n    );\n    this.setState((state) => ({\n      termsPairsCache: [...state.termsPairsCache, ...selectedOption],\n    }));\n  }\n\n  timeoutRef = React.createRef();\n\n  // How many characters to hold off searching from. Search tarts at this plus one.\n  SEARCH_HOLDOFF = 2;\n\n  loadOptions = (query) => {\n    // Implement a debounce of 400ms and a min search of 3 chars\n    if (query.length > this.SEARCH_HOLDOFF) {\n      if (this.timeoutRef.current) clearTimeout(this.timeoutRef.current);\n      return new Promise((resolve) => {\n        this.timeoutRef.current = setTimeout(async () => {\n          const res = await this.fetchAvailableChoices(query);\n          resolve(res);\n        }, 400);\n      });\n    } else {\n      return Promise.resolve([]);\n    }\n  };\n\n  fetchAvailableChoices = async (query) => {\n    const resp = await this.props.getVocabulary({\n      vocabNameOrURL: this.props.vocabBaseUrl,\n      query,\n      size: -1,\n      subrequest: this.props.lang,\n    });\n\n    return normalizeChoices(resp.items || [], this.props.intl);\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const selectedOption = normalizeValue(\n      this.state.termsPairsCache,\n      this.props.value,\n      this.props.intl,\n    );\n    const SelectAsync = this.props.reactSelectAsync.default;\n\n    return (\n      <FormFieldWrapper {...this.props}>\n        <SelectAsync\n          id={`field-${this.props.id}`}\n          key={this.props.id}\n          isDisabled={this.props.disabled || this.props.isDisabled}\n          className=\"react-select-container\"\n          classNamePrefix=\"react-select\"\n          cacheOptions\n          defaultOptions={[]}\n          loadOptions={this.loadOptions}\n          onInputChange={(search) =>\n            this.setState({ searchLength: search.length })\n          }\n          noOptionsMessage={() =>\n            this.props.intl.formatMessage(\n              this.state.searchLength > this.SEARCH_HOLDOFF\n                ? messages.no_options\n                : messages.type_text,\n            )\n          }\n          styles={customSelectStyles}\n          theme={selectTheme}\n          components={{\n            ...(this.props.choices?.length > 25 && {\n              MenuList,\n            }),\n            MultiValueContainer,\n            ClearIndicator,\n            DropdownIndicator,\n            Option,\n          }}\n          value={selectedOption || []}\n          placeholder={\n            this.props.placeholder ??\n            this.props.intl.formatMessage(messages.select)\n          }\n          onChange={this.handleChange}\n          isMulti\n        />\n      </FormFieldWrapper>\n    );\n  }\n}\n\nexport const SelectAutoCompleteComponent = injectIntl(SelectAutoComplete);\n\nexport default compose(\n  injectIntl,\n  injectLazyLibs(['reactSelectAsync']),\n  connect(\n    (state, props) => {\n      const vocabBaseUrl =\n        getVocabFromHint(props) ||\n        getVocabFromField(props) ||\n        getVocabFromItems(props);\n\n      const vocabState =\n        state.vocabularies?.[vocabBaseUrl]?.subrequests?.[\n          `widget-${props.id}-${state.intl.locale}`\n        ]?.items;\n\n      // If the schema already has the choices in it, then do not try to get\n      // the vocab, even if there is one\n      return props.items?.choices\n        ? { choices: props.items.choices, lang: state.intl.locale }\n        : vocabState\n        ? {\n            choices: vocabState,\n            vocabBaseUrl,\n            lang: state.intl.locale,\n          }\n        : { vocabBaseUrl, lang: state.intl.locale };\n    },\n    { getVocabulary, getVocabularyTokenTitle },\n  ),\n)(SelectAutoComplete);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Select…","defaultMessage":"Select…"},{"id":"No options","defaultMessage":"No options"},{"id":"Type text...","defaultMessage":"Type text..."}]}},"sourceType":"module","externalDependencies":[]}