{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport codeSVG from '@plone/volto/icons/row.svg';\nimport { GroupBlockEdit, GroupBlockView, GroupBlockLayout } from './components';\nconst applyConfig = config => {\n  const choices = Object.keys(config.blocks.blocksConfig).map(key => {\n    var _config$blocks$blocks;\n    if ((_config$blocks$blocks = config.blocks.blocksConfig[key]) !== null && _config$blocks$blocks !== void 0 && _config$blocks$blocks.restricted) {\n      return false;\n    } else {\n      var _config$blocks$blocks2;\n      const title = ((_config$blocks$blocks2 = config.blocks.blocksConfig[key]) === null || _config$blocks$blocks2 === void 0 ? void 0 : _config$blocks$blocks2.title) || key;\n      return [key, title];\n    }\n  }).filter(val => !!val);\n  choices.push(['group', 'Group']);\n  const schema = _objectSpread(_objectSpread({}, GroupBlockLayout), {}, {\n    properties: _objectSpread(_objectSpread({}, GroupBlockLayout.properties), {}, {\n      allowedBlocks: _objectSpread(_objectSpread({}, GroupBlockLayout.properties.allowedBlocks), {}, {\n        items: {\n          choices: choices\n        }\n      })\n    })\n  });\n  config.blocks.blocksConfig.group = {\n    id: 'group',\n    title: 'Section (Group)',\n    icon: codeSVG,\n    group: 'common',\n    view: GroupBlockView,\n    edit: GroupBlockEdit,\n    schema: schema,\n    restricted: false,\n    mostUsed: false,\n    blockHasOwnFocusManagement: true,\n    sidebarTab: 0,\n    security: {\n      addPermission: [],\n      view: []\n    }\n  };\n  return config;\n};\nexport default applyConfig;","map":{"version":3,"names":["codeSVG","GroupBlockEdit","GroupBlockView","GroupBlockLayout","applyConfig","config","choices","Object","keys","blocks","blocksConfig","map","key","restricted","title","filter","val","push","schema","properties","allowedBlocks","items","group","id","icon","view","edit","mostUsed","blockHasOwnFocusManagement","sidebarTab","security","addPermission"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-group-block/src/index.js"],"sourcesContent":["import codeSVG from '@plone/volto/icons/row.svg';\nimport { GroupBlockEdit, GroupBlockView, GroupBlockLayout } from './components';\n\nconst applyConfig = (config) => {\n  const choices = Object.keys(config.blocks.blocksConfig)\n    .map((key) => {\n      if (config.blocks.blocksConfig[key]?.restricted) {\n        return false;\n      } else {\n        const title = config.blocks.blocksConfig[key]?.title || key;\n        return [key, title];\n      }\n    })\n    .filter((val) => !!val);\n\n  choices.push(['group', 'Group']);\n\n  const schema = {\n    ...GroupBlockLayout,\n    properties: {\n      ...GroupBlockLayout.properties,\n      allowedBlocks: {\n        ...GroupBlockLayout.properties.allowedBlocks,\n        items: {\n          choices: choices,\n        },\n      },\n    },\n  };\n  config.blocks.blocksConfig.group = {\n    id: 'group',\n    title: 'Section (Group)',\n    icon: codeSVG,\n    group: 'common',\n    view: GroupBlockView,\n    edit: GroupBlockEdit,\n    schema: schema,\n    restricted: false,\n    mostUsed: false,\n    blockHasOwnFocusManagement: true,\n    sidebarTab: 0,\n    security: {\n      addPermission: [],\n      view: [],\n    },\n  };\n\n  return config;\n};\n\nexport default applyConfig;\n"],"mappings":";;;AAAA,OAAOA,OAAO,MAAM,4BAA4B;AAChD,SAASC,cAAc,EAAEC,cAAc,EAAEC,gBAAgB,QAAQ,cAAc;AAE/E,MAAMC,WAAW,GAAIC,MAAM,IAAK;EAC9B,MAAMC,OAAO,GAAGC,MAAM,CAACC,IAAI,CAACH,MAAM,CAACI,MAAM,CAACC,YAAY,CAAC,CACpDC,GAAG,CAAEC,GAAG,IAAK;IAAA;IACZ,6BAAIP,MAAM,CAACI,MAAM,CAACC,YAAY,CAACE,GAAG,CAAC,kDAA/B,sBAAiCC,UAAU,EAAE;MAC/C,OAAO,KAAK;IACd,CAAC,MAAM;MAAA;MACL,MAAMC,KAAK,GAAG,2BAAAT,MAAM,CAACI,MAAM,CAACC,YAAY,CAACE,GAAG,CAAC,2DAA/B,uBAAiCE,KAAK,KAAIF,GAAG;MAC3D,OAAO,CAACA,GAAG,EAAEE,KAAK,CAAC;IACrB;EACF,CAAC,CAAC,CACDC,MAAM,CAAEC,GAAG,IAAK,CAAC,CAACA,GAAG,CAAC;EAEzBV,OAAO,CAACW,IAAI,CAAC,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;EAEhC,MAAMC,MAAM,mCACPf,gBAAgB;IACnBgB,UAAU,kCACLhB,gBAAgB,CAACgB,UAAU;MAC9BC,aAAa,kCACRjB,gBAAgB,CAACgB,UAAU,CAACC,aAAa;QAC5CC,KAAK,EAAE;UACLf,OAAO,EAAEA;QACX;MAAC;IACF;EACF,EACF;EACDD,MAAM,CAACI,MAAM,CAACC,YAAY,CAACY,KAAK,GAAG;IACjCC,EAAE,EAAE,OAAO;IACXT,KAAK,EAAE,iBAAiB;IACxBU,IAAI,EAAExB,OAAO;IACbsB,KAAK,EAAE,QAAQ;IACfG,IAAI,EAAEvB,cAAc;IACpBwB,IAAI,EAAEzB,cAAc;IACpBiB,MAAM,EAAEA,MAAM;IACdL,UAAU,EAAE,KAAK;IACjBc,QAAQ,EAAE,KAAK;IACfC,0BAA0B,EAAE,IAAI;IAChCC,UAAU,EAAE,CAAC;IACbC,QAAQ,EAAE;MACRC,aAAa,EAAE,EAAE;MACjBN,IAAI,EAAE;IACR;EACF,CAAC;EAED,OAAOpB,MAAM;AACf,CAAC;AAED,eAAeD,WAAW"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}