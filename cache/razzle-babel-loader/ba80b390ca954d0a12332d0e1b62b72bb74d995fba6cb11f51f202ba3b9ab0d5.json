{"ast":null,"code":"import _extends from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/extends.js\";\nimport _classCallCheck from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _without from \"lodash/without\";\nimport _slice from \"lodash/slice\";\nimport _omit from \"lodash/omit\";\nimport _map from \"lodash/map\";\nimport _isString from \"lodash/isString\";\nimport _findIndex from \"lodash/findIndex\";\nimport _concat from \"lodash/concat\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Widgets/SchemaWidget.jsx\";\nvar __jsx = React.createElement;\n/**\n * SchemaWidget component.\n * @module components/manage/Widgets/SchemaWidget\n */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport PropTypes from 'prop-types';\nimport move from 'lodash-move';\nimport { Confirm, Form, Grid, Icon, Message, Segment } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport { slugify } from '@plone/volto/helpers/Utils/Utils';\nimport { Field, ModalForm, SchemaWidgetFieldset } from '@plone/volto/components';\nvar messages = defineMessages({\n  add: {\n    \"id\": \"Add\",\n    \"defaultMessage\": \"Add\"\n  },\n  addField: {\n    \"id\": \"Add field\",\n    \"defaultMessage\": \"Add field\"\n  },\n  addFieldset: {\n    \"id\": \"Add fieldset\",\n    \"defaultMessage\": \"Add fieldset\"\n  },\n  parentFieldSet: {\n    \"id\": \"Parent fieldset\",\n    \"defaultMessage\": \"Parent fieldset\"\n  },\n  editField: {\n    \"id\": \"Edit field\",\n    \"defaultMessage\": \"Edit field\"\n  },\n  editFieldset: {\n    \"id\": \"Edit fieldset\",\n    \"defaultMessage\": \"Edit fieldset\"\n  },\n  \"default\": {\n    \"id\": \"Default\",\n    \"defaultMessage\": \"Default\"\n  },\n  idTitle: {\n    \"id\": \"Short Name\",\n    \"defaultMessage\": \"Short Name\"\n  },\n  idDescription: {\n    \"id\": \"Used for programmatic access to the fieldset.\",\n    \"defaultMessage\": \"Used for programmatic access to the fieldset.\"\n  },\n  choices: {\n    \"id\": \"Possible values\",\n    \"defaultMessage\": \"Possible values (Enter allowed choices one per line).\"\n  },\n  string: {\n    \"id\": \"String\",\n    \"defaultMessage\": \"String\"\n  },\n  text: {\n    \"id\": \"Text\",\n    \"defaultMessage\": \"Text\"\n  },\n  richtext: {\n    \"id\": \"Richtext\",\n    \"defaultMessage\": \"Richtext\"\n  },\n  checkbox: {\n    \"id\": \"Checkbox\",\n    \"defaultMessage\": \"Checkbox\"\n  },\n  selection: {\n    \"id\": \"Selection\",\n    \"defaultMessage\": \"Selection\"\n  },\n  type: {\n    \"id\": \"Type\",\n    \"defaultMessage\": \"Type\"\n  },\n  title: {\n    \"id\": \"Title\",\n    \"defaultMessage\": \"Title\"\n  },\n  description: {\n    \"id\": \"Description\",\n    \"defaultMessage\": \"Description\"\n  },\n  required: {\n    \"id\": \"Required\",\n    \"defaultMessage\": \"Required\"\n  },\n  minLength: {\n    \"id\": \"minLength\",\n    \"defaultMessage\": \"Minimum Length\"\n  },\n  maxLength: {\n    \"id\": \"maxLength\",\n    \"defaultMessage\": \"Maximum Length\"\n  },\n  minimum: {\n    \"id\": \"minimum\",\n    \"defaultMessage\": \"Start of the range\"\n  },\n  maximum: {\n    \"id\": \"maximum\",\n    \"defaultMessage\": \"End of the range (including the value itself)\"\n  },\n  deleteFieldset: {\n    \"id\": \"Are you sure you want to delete this fieldset including all fields?\",\n    \"defaultMessage\": \"Are you sure you want to delete this fieldset including all fields?\"\n  },\n  deleteField: {\n    \"id\": \"Are you sure you want to delete this field?\",\n    \"defaultMessage\": \"Are you sure you want to delete this field?\"\n  },\n  error: {\n    \"id\": \"Error\",\n    \"defaultMessage\": \"Error\"\n  }\n});\n\n/**\n * Makes a list of fieldset types formatted for select widget\n * @param {Object[]} listOfTypes array of strings\n * @param {*} intl\n * @returns {Object[]} example [['default', 'default']]\n */\nvar makeFieldsetList = function makeFieldsetList(listOfFieldsets, intl) {\n  var result = listOfFieldsets.map(function (type) {\n    return [type.id, type.title];\n  });\n  return result;\n};\n\n/**\n * schemaField used for modal form, when editing a field\n * - based on the factory a set of fields is presented\n * - fields can be moved to another fieldset\n * @param {string} factory - the kind of field\n * @param {Object} intl\n * @param {*} fieldsets\n * @return {Object} - schema\n */\nvar schemaField = function schemaField(factory, intl, fieldsets) {\n  return {\n    fieldsets: [{\n      id: 'default',\n      title: 'default',\n      fields: ['title', 'description', 'parentFieldSet'].concat(_toConsumableArray(function (factory) {\n        switch (factory) {\n          case 'Rich Text':\n            return ['maxLength'];\n          case 'URL':\n          case 'Password':\n          case 'label_password_field':\n          case 'Email':\n          case 'label_email':\n            return ['minLength', 'maxLength'];\n          case 'Integer':\n          case 'label_integer_field':\n            return ['minimum', 'maximum'];\n          case 'Floating-point number':\n          case 'label_float_field':\n          case 'Date/Time':\n          case 'label_datetime_field':\n          case 'Date':\n          case 'label_date_field':\n          case 'File':\n          case 'File Upload':\n          case 'Image':\n          case 'Yes/No':\n          case 'label_boolean_field':\n          case 'JSONField':\n          case 'Relation Choice':\n          case 'Relation List':\n            return [];\n          case 'Multiple Choice':\n          case 'label_multi_choice_field':\n          case 'Choice':\n          case 'label_choice_field':\n            return ['values'];\n          default:\n            return ['minLength', 'maxLength'];\n        }\n      }(factory)), ['required'])\n    }],\n    properties: _objectSpread({\n      title: {\n        type: 'string',\n        title: intl.formatMessage(messages.title)\n      },\n      description: {\n        type: 'string',\n        widget: 'textarea',\n        title: intl.formatMessage(messages.description)\n      },\n      parentFieldSet: {\n        type: 'string',\n        title: intl.formatMessage(messages.parentFieldSet),\n        choices: makeFieldsetList(fieldsets)\n      },\n      required: {\n        type: 'boolean',\n        title: intl.formatMessage(messages.required)\n      }\n    }, function (factory) {\n      switch (factory) {\n        case 'Rich Text':\n          return {\n            maxLength: {\n              type: 'integer',\n              title: intl.formatMessage(messages.maxLength)\n            }\n          };\n        case 'URL':\n        case 'Password':\n        case 'label_password_field':\n        case 'Email':\n        case 'label_email':\n          return {\n            minLength: {\n              type: 'integer',\n              title: intl.formatMessage(messages.minLength)\n            },\n            maxLength: {\n              type: 'integer',\n              title: intl.formatMessage(messages.maxLength)\n            }\n          };\n        case 'Integer':\n        case 'label_integer_field':\n          return {\n            minimum: {\n              type: 'integer',\n              title: intl.formatMessage(messages.minimum)\n            },\n            maximum: {\n              type: 'integer',\n              title: intl.formatMessage(messages.maximum)\n            }\n          };\n        case 'Floating-point number':\n        case 'label_float_field':\n        case 'Date/Time':\n        case 'label_datetime_field':\n        case 'Date':\n        case 'label_date_field':\n        case 'File':\n        case 'File Upload':\n        case 'Image':\n        case 'Yes/No':\n        case 'label_boolean_field':\n        case 'JSONField':\n        case 'Relation Choice':\n        case 'Relation List':\n          return {};\n        case 'Multiple Choice':\n        case 'label_multi_choice_field':\n        case 'Choice':\n        case 'label_choice_field':\n          return {\n            values: {\n              type: 'string',\n              title: intl.formatMessage(messages.choices),\n              widget: 'textarea'\n            }\n          };\n        default:\n          return {\n            minLength: {\n              type: 'integer',\n              title: intl.formatMessage(messages.minLength)\n            },\n            maxLength: {\n              type: 'integer',\n              title: intl.formatMessage(messages.maxLength)\n            }\n          };\n      }\n    }(factory)),\n    required: ['type', 'title']\n  };\n};\n\n/**\n * schema for adding a new field\n * @param {Object} intl\n */\nvar fieldsetSchema = function fieldsetSchema(intl) {\n  return {\n    fieldsets: [{\n      id: 'default',\n      title: intl.formatMessage(messages[\"default\"]),\n      fields: ['title', 'id']\n    }],\n    properties: {\n      id: {\n        type: 'string',\n        title: intl.formatMessage(messages.idTitle),\n        description: intl.formatMessage(messages.idDescription)\n      },\n      title: {\n        type: 'string',\n        title: intl.formatMessage(messages.title)\n      }\n    },\n    required: ['id', 'title']\n  };\n};\n\n/**\n * 'plone.dexterity.schema.generated' is considered user created\n * @param {Object} field\n */\nvar isEditable = function isEditable(field) {\n  return !field.behavior || field.behavior.includes('generated');\n};\nvar getItemStyle = function getItemStyle(isDragging, draggableStyle) {\n  return _objectSpread({\n    // some basic styles to make the items look a bit nicer\n    userSelect: 'none',\n    // change background colour if dragging\n    background: isDragging ? 'white' : 'transparent'\n  }, draggableStyle);\n};\nvar getTabStyle = function getTabStyle(isDraggingOver) {\n  return {\n    background: isDraggingOver ? '#f4f4f4' : 'transparent',\n    display: 'flex',\n    flexDirection: 'row',\n    flexWrap: 'wrap'\n  };\n};\nvar getFieldStyle = function getFieldStyle(isDraggingOver) {\n  return {\n    background: isDraggingOver ? '#f4f4f4' : 'transparent'\n  };\n};\n\n/**\n * will transform a string with new lines in an array for each item on a line\n * @param {string} textarea - has '\\r\\n' characters\n */\nvar formatTextareaToArray = function formatTextareaToArray(textarea) {\n  var values = textarea && textarea ? textarea.split(/(\\r\\n|\\n|\\r)/gm).map(function (elem) {\n    return elem.trim();\n  }).filter(function (elem) {\n    return elem !== '';\n  }) : null;\n  return values ? {\n    values: values\n  } : {};\n};\nvar formatArrayToTextarea = function formatArrayToTextarea(props) {\n  var _props$items;\n  if (props !== null && props !== void 0 && props.values) {\n    return props.values.join('\\n');\n  }\n  if (props !== null && props !== void 0 && props.choices) {\n    return props.choices.map(function (elem) {\n      return elem[0];\n    }).join('\\n');\n  }\n  if (props !== null && props !== void 0 && (_props$items = props.items) !== null && _props$items !== void 0 && _props$items.choices) {\n    return props.items.choices.map(function (elem) {\n      return elem[0];\n    }).join('\\n');\n  }\n  return '';\n};\nvar formatTextareaToChoices = function formatTextareaToChoices(textarea, multiple) {\n  var choices = textarea && textarea ? textarea.split(/(\\r\\n|\\n|\\r)/gm).map(function (elem) {\n    return elem.trim();\n  }).filter(function (elem) {\n    return elem !== '';\n  }).map(function (elem) {\n    return [elem, elem];\n  }) : null;\n  if (!multiple) {\n    return choices ? {\n      choices: choices\n    } : {};\n  }\n  var items = choices ? {\n    choices: choices\n  } : {};\n  return items ? {\n    items: items\n  } : {};\n};\n\n/**\n * SchemaWidget component class.\n * @class SchemaWidget\n * @extends Component\n */\nvar SchemaWidget = /*#__PURE__*/function (_Component) {\n  _inherits(SchemaWidget, _Component);\n  var _super = _createSuper(SchemaWidget);\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  function SchemaWidget(props) {\n    var _this;\n    _classCallCheck(this, SchemaWidget);\n    _this = _super.call(this, props);\n    _this.onChange = _this.onChange.bind(_assertThisInitialized(_this));\n    _this.onChangeDefaultValue = _this.onChangeDefaultValue.bind(_assertThisInitialized(_this));\n    _this.onAddField = _this.onAddField.bind(_assertThisInitialized(_this));\n    _this.onAddFieldset = _this.onAddFieldset.bind(_assertThisInitialized(_this));\n    _this.onEditField = _this.onEditField.bind(_assertThisInitialized(_this));\n    _this.onEditFieldset = _this.onEditFieldset.bind(_assertThisInitialized(_this));\n    _this.onDeleteFieldset = _this.onDeleteFieldset.bind(_assertThisInitialized(_this));\n    _this.onDeleteField = _this.onDeleteField.bind(_assertThisInitialized(_this));\n    _this.onShowAddField = _this.onShowAddField.bind(_assertThisInitialized(_this));\n    _this.onShowAddFieldset = _this.onShowAddFieldset.bind(_assertThisInitialized(_this));\n    _this.onShowEditFieldset = _this.onShowEditFieldset.bind(_assertThisInitialized(_this));\n    _this.onShowEditField = _this.onShowEditField.bind(_assertThisInitialized(_this));\n    _this.onShowDeleteFieldset = _this.onShowDeleteFieldset.bind(_assertThisInitialized(_this));\n    _this.onShowDeleteField = _this.onShowDeleteField.bind(_assertThisInitialized(_this));\n    _this.onSetCurrentFieldset = _this.onSetCurrentFieldset.bind(_assertThisInitialized(_this));\n    _this.onOrderField = _this.onOrderField.bind(_assertThisInitialized(_this));\n    _this.onOrderFieldset = _this.onOrderFieldset.bind(_assertThisInitialized(_this));\n    _this.onCancel = _this.onCancel.bind(_assertThisInitialized(_this));\n    _this.onDragEnd = _this.onDragEnd.bind(_assertThisInitialized(_this));\n    _this.state = {\n      addField: null,\n      addFieldset: null,\n      editFieldset: null,\n      editField: null,\n      deleteFieldset: null,\n      deleteField: null,\n      currentFieldset: 0\n    };\n    return _this;\n  }\n\n  /**\n   * Add field handler\n   * @method onAddField\n   * @param {Object} values Form values\n   * @returns {undefined}\n   */\n  _createClass(SchemaWidget, [{\n    key: \"onAddField\",\n    value: function onAddField(values) {\n      var fieldId = slugify(values.title);\n      var currentFieldsetFields = this.props.value.fieldsets[this.state.currentFieldset].fields;\n      var hasChangeNote = currentFieldsetFields.indexOf('changeNote') > -1;\n      var newFieldsetFields = hasChangeNote ? [].concat(_toConsumableArray(currentFieldsetFields.slice(0, currentFieldsetFields.length - 1)), [fieldId, currentFieldsetFields[currentFieldsetFields.length - 1]]) : [].concat(_toConsumableArray(currentFieldsetFields), [fieldId]);\n      this.onChange(_objectSpread(_objectSpread({}, this.props.value), {}, {\n        fieldsets: [].concat(_toConsumableArray(_slice(this.props.value.fieldsets, 0, this.state.currentFieldset)), [_objectSpread(_objectSpread({}, this.props.value.fieldsets[this.state.currentFieldset]), {}, {\n          fields: newFieldsetFields\n        })], _toConsumableArray(_slice(this.props.value.fieldsets, this.state.currentFieldset + 1))),\n        properties: _objectSpread(_objectSpread({}, this.props.value.properties), {}, _defineProperty({}, fieldId, _objectSpread({\n          title: values.title,\n          description: values.description,\n          id: fieldId\n        }, function (factory) {\n          switch (factory) {\n            case 'Date/Time':\n            case 'label_datetime_field':\n              return {\n                type: 'string',\n                widget: 'datetime',\n                factory: factory\n              };\n            case 'Date':\n            case 'label_date_field':\n              return {\n                type: 'string',\n                widget: 'date',\n                factory: factory\n              };\n            case 'Email':\n            case 'label_email':\n              return {\n                type: 'string',\n                widget: 'email',\n                factory: factory\n              };\n            case 'File':\n            case 'File Upload':\n              return {\n                type: 'object',\n                factory: factory\n              };\n            case 'Floating-point number':\n            case 'label_float_field':\n              return {\n                type: 'number',\n                factory: factory\n              };\n            case 'Integer':\n            case 'label_integer_field':\n              return {\n                type: 'integer',\n                factory: factory\n              };\n            case 'Image':\n              return {\n                type: 'object',\n                factory: factory\n              };\n            case 'JSONField':\n              return {\n                type: 'dict',\n                widget: 'json',\n                factory: factory\n              };\n            case 'Multiple Choice':\n            case 'label_multi_choice_field':\n              return {\n                type: 'array',\n                factory: factory\n              };\n            case 'Relation List':\n              return {\n                type: 'array',\n                factory: factory\n              };\n            case 'Choice':\n            case 'label_choice_field':\n              return {\n                type: 'string',\n                choices: [],\n                factory: factory\n              };\n            case 'Relation Choice':\n              return {\n                type: 'string',\n                factory: factory\n              };\n            case 'Password':\n            case 'label_password_field':\n              return {\n                type: 'string',\n                widget: 'password',\n                factory: factory\n              };\n            case 'Rich Text':\n              return {\n                type: 'string',\n                widget: 'richtext',\n                factory: factory\n              };\n            case 'URL':\n              return {\n                type: 'string',\n                widget: 'url',\n                factory: factory\n              };\n            case 'Yes/No':\n            case 'label_boolean_field':\n              return {\n                type: 'boolean',\n                factory: factory\n              };\n            default:\n              return {\n                type: 'string',\n                factory: factory\n              };\n          }\n        }(values.factory)))),\n        required: values.required ? [].concat(_toConsumableArray(this.props.value.required), [fieldId]) : this.props.value.required\n      }));\n      this.onCancel();\n    }\n\n    /**\n     * Add fieldset handler\n     * @method onAddFieldset\n     * @param {Object} values Form values\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onAddFieldset\",\n    value: function onAddFieldset(values) {\n      this.onChange(_objectSpread(_objectSpread({}, this.props.value), {}, {\n        fieldsets: [].concat(_toConsumableArray(this.props.value.fieldsets), [_objectSpread(_objectSpread({}, values), {}, {\n          fields: []\n        })])\n      }));\n      this.onCancel();\n    }\n\n    /**\n     * Edit fieldset handler\n     * @method onEditFieldset\n     * @param {Object} values Form values\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onEditFieldset\",\n    value: function onEditFieldset(values) {\n      var _this$props$value$fie;\n      values.fields = values.fields || ((_this$props$value$fie = this.props.value.fieldsets[this.state.editFieldset]) === null || _this$props$value$fie === void 0 ? void 0 : _this$props$value$fie.fields) || [];\n      this.onChange(_objectSpread(_objectSpread({}, this.props.value), {}, {\n        fieldsets: [].concat(_toConsumableArray(_slice(this.props.value.fieldsets, 0, this.state.editFieldset)), [values], _toConsumableArray(_slice(this.props.value.fieldsets, this.state.editFieldset + 1)))\n      }));\n      this.onCancel();\n    }\n\n    /**\n     * Recreates the fieldset structure\n     * will move change name of the field if needed and\n     * change fieldset if changed\n     * @param {Object[]} fieldsets\n     * @param {string} parentFieldSet - id\n     * @param {number} currentFieldset - index\n     * @param {Object} oldfieldId\n     * @param {Object} newfieldId\n     * @returns {Object[]} fieldsets\n     */\n  }, {\n    key: \"editFieldset\",\n    value: function editFieldset(fieldsets, parentFieldSet, currentFieldset, oldfieldId, newfieldId) {\n      var moveToFieldsetWithNewName = function moveToFieldsetWithNewName() {\n        var newParentFieldsetIndex = fieldsets.findIndex(function (field) {\n          return field.id === parentFieldSet;\n        });\n        var indexOfChangeNote = fieldsets[newParentFieldsetIndex].fields.indexOf('changeNote');\n        // remove from current fieldset\n        var fieldsetsWithoutField = [].concat(_toConsumableArray(_slice(fieldsets, 0, currentFieldset)), [_objectSpread(_objectSpread({}, fieldsets[currentFieldset]), {}, {\n          fields: fieldsets[currentFieldset].fields.filter(function (fieldId) {\n            return fieldId !== oldfieldId;\n          })\n        })], _toConsumableArray(_slice(fieldsets, currentFieldset + 1)));\n        var fieldsOfNewFieldset = indexOfChangeNote > -1 ? [].concat(_toConsumableArray(fieldsetsWithoutField[newParentFieldsetIndex].fields.slice(0, indexOfChangeNote + 1)), [oldfieldId, fieldsetsWithoutField[newParentFieldsetIndex].fields[indexOfChangeNote]]) : [].concat(_toConsumableArray(fieldsetsWithoutField[newParentFieldsetIndex].fields), [oldfieldId]);\n\n        // add to new fieldset\n        var fieldsetsWithField = [].concat(_toConsumableArray(_slice(fieldsetsWithoutField, 0, newParentFieldsetIndex)), [_objectSpread(_objectSpread({}, fieldsetsWithoutField[newParentFieldsetIndex]), {}, {\n          fields: fieldsOfNewFieldset\n        })], _toConsumableArray(_slice(fieldsetsWithoutField, newParentFieldsetIndex + 1)));\n        return fieldsetsWithField;\n      };\n      var changeNameInFieldset = function changeNameInFieldset() {\n        return [].concat(_toConsumableArray(_slice(fieldsets, 0, currentFieldset)), [_objectSpread(_objectSpread({}, fieldsets[currentFieldset]), {}, {\n          fields: _map(fieldsets[currentFieldset].fields, function (field) {\n            return field === oldfieldId ? newfieldId : field;\n          })\n        })], _toConsumableArray(_slice(fieldsets, currentFieldset + 1)));\n      };\n      var result = parentFieldSet !== fieldsets[currentFieldset].id ? moveToFieldsetWithNewName() : changeNameInFieldset();\n      return result;\n    }\n\n    /**\n     * Edit field handler\n     * recreates the schema based on field changes (properties, name, fieldset)\n     * @method onEditField\n     * @param {Object} values Field values\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onEditField\",\n    value: function onEditField(values) {\n      var _this$props$value$pro, _this$props$value$pro2;\n      var formattedValues = _objectSpread({}, values);\n      var listOfProp = ['minLength', 'maxLength', 'minimum', 'maximum'];\n      listOfProp.forEach(function (prop) {\n        formattedValues = _objectSpread(_objectSpread({}, formattedValues), _defineProperty({}, prop, values[prop] ? parseFloat(values[prop]) : null));\n      });\n      var multiple = ((_this$props$value$pro = this.props.value.properties[this.state.editField.id]) === null || _this$props$value$pro === void 0 ? void 0 : _this$props$value$pro.factory) === 'Multiple Choice' || ((_this$props$value$pro2 = this.props.value.properties[this.state.editField.id]) === null || _this$props$value$pro2 === void 0 ? void 0 : _this$props$value$pro2.factory) === 'label_multi_choice_field';\n      var result = _objectSpread(_objectSpread({}, this.props.value), {}, {\n        fieldsets: formattedValues.parentFieldSet ? this.editFieldset(this.props.value.fieldsets, formattedValues.parentFieldSet, this.state.currentFieldset, this.state.editField.id, formattedValues.id) : this.props.value.fieldsets,\n        properties: _objectSpread(_objectSpread({}, _omit(this.props.value.properties, [this.state.editField.id])), {}, _defineProperty({}, formattedValues.id, _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, this.props.value.properties[this.state.editField.id]), _omit(formattedValues, ['id', 'parentFieldSet'])), formatTextareaToArray(formattedValues.values)), formatTextareaToChoices(formattedValues.values, multiple)))),\n        required: formattedValues.required ? _concat(_without(this.props.value.required, this.state.editField.id), [formattedValues.id]) : _without(this.props.value.required, this.state.editField.id)\n      });\n      this.onChange(result);\n      this.onCancel();\n    }\n\n    /**\n     * Delete fieldset handler\n     * @method onDeleteFieldset\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onDeleteFieldset\",\n    value: function onDeleteFieldset() {\n      if (this.state.currentFieldset > this.props.value.fieldsets.length - 2) {\n        this.setState({\n          currentFieldset: this.state.currentFieldset - 1\n        });\n      }\n      this.onChange(_objectSpread(_objectSpread({}, this.props.value), {}, {\n        fieldsets: [].concat(_toConsumableArray(_slice(this.props.value.fieldsets, 0, this.state.deleteFieldset)), _toConsumableArray(_slice(this.props.value.fieldsets, this.state.deleteFieldset + 1))),\n        properties: _omit(this.props.value.properties, this.props.value.fieldsets[this.state.deleteFieldset].fields)\n      }));\n      this.onCancel();\n    }\n\n    /**\n     * Delete field handler\n     * @method onDeleteField\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onDeleteField\",\n    value: function onDeleteField() {\n      this.onChange(_objectSpread(_objectSpread({}, this.props.value), {}, {\n        fieldsets: [].concat(_toConsumableArray(_slice(this.props.value.fieldsets, 0, this.state.currentFieldset)), [_objectSpread(_objectSpread({}, this.props.value.fieldsets[this.state.currentFieldset]), {}, {\n          fields: _without(this.props.value.fieldsets[this.state.currentFieldset].fields, this.state.deleteField)\n        })], _toConsumableArray(_slice(this.props.value.fieldsets, this.state.currentFieldset + 1))),\n        properties: _omit(this.props.value.properties, [this.state.deleteField])\n      }));\n      this.onCancel();\n    }\n\n    /**\n     * Change handler\n     * @method onChange\n     * @param {Object} value New schema\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onChange\",\n    value: function onChange(value) {\n      this.props.onChange(this.props.id, value);\n    }\n\n    /**\n     * Change default value handler\n     * @method onChangeDefaultValue\n     * @param {string} fieldId\n     * @param {string} fieldValue\n     */\n  }, {\n    key: \"onChangeDefaultValue\",\n    value: function onChangeDefaultValue(fieldId, fieldValue) {\n      // Default values can have irreversible consequence, thus skip it for now.\n      // const value = { default: fieldValue }\n      var value = {};\n      var fieldMerge = _objectSpread(_objectSpread({}, this.props.value.properties[fieldId]), value);\n      var propsMerge = _objectSpread(_objectSpread({}, this.props.value.properties), _defineProperty({}, fieldId, fieldMerge));\n      this.onChange(_objectSpread(_objectSpread({}, this.props.value), {}, {\n        properties: propsMerge\n      }));\n    }\n\n    /**\n     * Cancel handler\n     * @method onCancel\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onCancel\",\n    value: function onCancel() {\n      this.setState({\n        addField: null,\n        addFieldset: null,\n        editFieldset: null,\n        editField: null,\n        deleteFieldset: null,\n        deleteField: null\n      });\n    }\n\n    /**\n     * Show add field handler\n     * @method onShowAddField\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onShowAddField\",\n    value: function onShowAddField(event) {\n      this.setState({\n        addField: true\n      });\n      event.preventDefault();\n    }\n\n    /**\n     * Show add fieldset handler\n     * @method onShowAddFieldset\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onShowAddFieldset\",\n    value: function onShowAddFieldset(event) {\n      this.setState({\n        addFieldset: true\n      });\n      event.preventDefault();\n    }\n\n    /**\n     * Show edit fieldset handler\n     * @method onShowEditFieldset\n     * @param {Number} index Index of fieldset\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onShowEditFieldset\",\n    value: function onShowEditFieldset(index) {\n      this.setState({\n        editFieldset: index\n      });\n    }\n\n    /**\n     * Show edit field handler\n     * @method onShowEditField\n     * @param {string} id Id of field\n     * @param {Object} schema Schema of the field\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onShowEditField\",\n    value: function onShowEditField(id, schema) {\n      return this.setState({\n        editField: {\n          id: id\n        }\n      });\n    }\n\n    /**\n     * Show delete fieldset handler\n     * @method onShowDeleteFieldset\n     * @param {Number} index Index of fieldset\n     * @param {Object} event Event object\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onShowDeleteFieldset\",\n    value: function onShowDeleteFieldset(index) {\n      this.setState({\n        deleteFieldset: index\n      });\n    }\n\n    /**\n     * Show delete field handler\n     * @method onShowDeleteField\n     * @param {String} field Field to delete\n     * @param {Object} event Event object\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onShowDeleteField\",\n    value: function onShowDeleteField(field) {\n      this.setState({\n        deleteField: field\n      });\n    }\n\n    /**\n     * Set current fieldset handler\n     * @method onSetCurrentFieldset\n     * @param {Number} index Index of fieldset\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onSetCurrentFieldset\",\n    value: function onSetCurrentFieldset(index) {\n      this.setState({\n        currentFieldset: index\n      });\n    }\n\n    /**\n     * On order fieldset\n     * @method onOrderField\n     * @param {number} index Index\n     * @param {number} delta Delta\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onOrderField\",\n    value: function onOrderField(index, delta) {\n      this.onChange(_objectSpread(_objectSpread({}, this.props.value), {}, {\n        fieldsets: [].concat(_toConsumableArray(_slice(this.props.value.fieldsets, 0, this.state.currentFieldset)), [_objectSpread(_objectSpread({}, this.props.value.fieldsets[this.state.currentFieldset]), {}, {\n          fields: move(this.props.value.fieldsets[this.state.currentFieldset].fields, index, delta)\n        })], _toConsumableArray(_slice(this.props.value.fieldsets, this.state.currentFieldset + 1)))\n      }));\n    }\n\n    /**\n     * On order fieldset\n     * @method onOrderFieldset\n     * @param {number} index Index\n     * @param {number} delta Delta\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onOrderFieldset\",\n    value: function onOrderFieldset(index, delta) {\n      var schema = _objectSpread(_objectSpread({}, this.props.value), {}, {\n        fieldsets: move(this.props.value.fieldsets, index, delta)\n      });\n      this.setState({\n        currentFieldset: _findIndex(schema.fieldsets, {\n          id: schema.fieldsets[this.state.currentFieldset].id\n        })\n      });\n      this.onChange(schema);\n    }\n\n    /**\n     * Set current fieldset handler\n     * @method onDragEnd\n     * @param {Number} index Index of fieldset\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onDragEnd\",\n    value: function onDragEnd(result) {\n      if (result.destination && result.destination.droppableId === 'fields-schema-edit') {\n        this.onOrderField(result.source.index, result.destination.index);\n      }\n      if (result.destination && result.destination.droppableId === 'tabs-schema-edit') {\n        this.onOrderFieldset(result.source.index, result.destination.index);\n      }\n    }\n\n    /**\n     * Render method.\n     * @method render\n     * @returns {string} Markup for the component.\n     */\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$props = this.props,\n        error = _this$props.error,\n        reactBeautifulDnd = _this$props.reactBeautifulDnd;\n      var Draggable = reactBeautifulDnd.Draggable,\n        DragDropContext = reactBeautifulDnd.DragDropContext,\n        Droppable = reactBeautifulDnd.Droppable;\n      if (!this.props.value) {\n        return '';\n      }\n      var nonUserCreatedFields = this.props.value.fieldsets[this.state.currentFieldset].fields.filter(function (fieldId) {\n        return !isEditable(_this2.props.value.properties[fieldId]) && fieldId !== 'changeNote';\n      });\n      var hasChangeNote = this.props.value.fieldsets[this.state.currentFieldset].fields.indexOf('changeNote') > -1;\n      var userCreatedFieldsStartingIndex = nonUserCreatedFields.length;\n      var lastUserCreatedFieldsIndex = hasChangeNote ? this.props.value.fieldsets[this.state.currentFieldset].fields.length - 1 : this.props.value.fieldsets[this.state.currentFieldset].fields.length;\n      // fields that were not created by the user, but are part of a behavior\n      var makeNonUserFields = function makeNonUserFields() {\n        return _map(_this2.props.value.fieldsets[_this2.state.currentFieldset].fields.slice(0, userCreatedFieldsStartingIndex), function (field, index) {\n          return __jsx(\"div\", {\n            style: {\n              background: '#c7d5d859'\n            },\n            key: \"\".concat(field, \"-\").concat(_this2.state.currentFieldset, \"-\").concat(index),\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1110,\n              columnNumber: 11\n            }\n          }, __jsx(Field, _extends({}, _this2.props.value.properties[field], {\n            id: field,\n            required: _this2.props.value.required.indexOf(field) !== -1,\n            onEdit: _this2.onShowEditField,\n            draggable: false,\n            isDisabled: true,\n            order: index,\n            onDelete: _this2.onShowDeleteField,\n            onChange: _this2.onChangeDefaultValue,\n            value: _this2.props.value.properties[field][\"default\"],\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1114,\n              columnNumber: 13\n            }\n          })));\n        });\n      };\n      // fields created by the user\n      var makeUserFields = function makeUserFields() {\n        return _map(_this2.props.value.fieldsets[_this2.state.currentFieldset].fields.slice(userCreatedFieldsStartingIndex, lastUserCreatedFieldsIndex), function (field, index) {\n          return __jsx(Draggable, {\n            draggableId: field,\n            index: userCreatedFieldsStartingIndex + index,\n            key: \"\".concat(field, \"-\").concat(_this2.state.currentFieldset, \"-\").concat(index),\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1137,\n              columnNumber: 11\n            }\n          }, function (provided, snapshot) {\n            return __jsx(\"div\", _extends({\n              ref: provided.innerRef\n            }, provided.draggableProps, provided.dragHandleProps, {\n              style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1143,\n                columnNumber: 15\n              }\n            }), __jsx(Field, _extends({}, _this2.props.value.properties[field], {\n              id: field,\n              required: _this2.props.value.required.indexOf(field) !== -1,\n              onEdit: _this2.onShowEditField,\n              draggable: true,\n              isDisabled: false,\n              order: index,\n              onDelete: _this2.onShowDeleteField,\n              onChange: _this2.onChangeDefaultValue,\n              key: \"\".concat(field, \"-\").concat(_this2.state.currentFieldset, \"-\").concat(index),\n              value: _this2.props.value.properties[field][\"default\"],\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 1152,\n                columnNumber: 17\n              }\n            })));\n          });\n        });\n      };\n      var canAddFields = this.state.currentFieldset === 0 || !this.props.value.fieldsets[this.state.currentFieldset].behavior || this.props.value.fieldsets[this.state.currentFieldset].behavior.includes('generated');\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1179,\n          columnNumber: 7\n        }\n      }, __jsx(Segment.Group, {\n        style: {\n          margin: '-1rem'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1180,\n          columnNumber: 9\n        }\n      }, error.length > 0 && _map(error, function (err, index) {\n        return __jsx(Message, {\n          icon: \"warning\",\n          key: \"\".concat(err, \"-\").concat(index),\n          negative: true,\n          attached: true,\n          header: _this2.props.intl.formatMessage(messages.error),\n          content: err,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1187,\n            columnNumber: 15\n          }\n        });\n      }), __jsx(DragDropContext, {\n        onDragEnd: this.onDragEnd,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1196,\n          columnNumber: 11\n        }\n      }, __jsx(Droppable, {\n        droppableId: \"tabs-schema-edit\",\n        direction: \"horizontal\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1197,\n          columnNumber: 13\n        }\n      }, function (provided, snapshot) {\n        return __jsx(\"div\", _extends({\n          role: \"tablist\",\n          className: \"ui pointing secondary attached tabular menu\",\n          ref: provided.innerRef\n        }, provided.draggableProps, {\n          style: getTabStyle(snapshot.isDraggingOver),\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1199,\n            columnNumber: 17\n          }\n        }), _map(_this2.props.value.fieldsets, function (fieldset, index) {\n          return __jsx(SchemaWidgetFieldset, {\n            key: \"\".concat(fieldset.id, \"-\").concat(_this2.state.currentFieldset, \"-\").concat(index),\n            title: fieldset.title,\n            order: index,\n            active: index === _this2.state.currentFieldset,\n            onClick: _this2.onSetCurrentFieldset,\n            onShowEditFieldset: _this2.onShowEditFieldset,\n            onShowDeleteFieldset: _this2.onShowDeleteFieldset,\n            onOrderFieldset: _this2.onOrderFieldset,\n            getItemStyle: getItemStyle,\n            isDraggable: true,\n            isDisabled: fieldset.behavior ? !fieldset.behavior.includes('generated') : false,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 1207,\n              columnNumber: 21\n            }\n          });\n        }), __jsx(\"div\", {\n          className: \"item item-add\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1225,\n            columnNumber: 19\n          }\n        }, __jsx(\"button\", {\n          \"aria-label\": _this2.props.intl.formatMessage(messages.add),\n          className: \"item ui noborder button\",\n          onClick: _this2.onShowAddFieldset,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1226,\n            columnNumber: 21\n          }\n        }, __jsx(Icon, {\n          name: \"plus\",\n          size: \"large\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1231,\n            columnNumber: 23\n          }\n        }))), provided.placeholder);\n      }), makeNonUserFields(), __jsx(Droppable, {\n        droppableId: \"fields-schema-edit\",\n        direction: \"vertical\",\n        type: \"fixed\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1242,\n          columnNumber: 13\n        }\n      }, function (provided, snapshot) {\n        return __jsx(\"div\", _extends({\n          ref: provided.innerRef\n        }, provided.draggableProps, {\n          style: getFieldStyle(snapshot.isDraggingOver),\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 1248,\n            columnNumber: 17\n          }\n        }), makeUserFields(), provided.placeholder);\n      })), hasChangeNote ? __jsx(\"div\", {\n        style: {\n          background: '#c7d5d859'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1262,\n          columnNumber: 13\n        }\n      }, __jsx(Field, _extends({}, this.props.value.properties.changeNote, {\n        id: 'changeNote',\n        required: this.props.value.required.indexOf('changeNote') !== -1,\n        onEdit: this.onShowEditField,\n        draggable: false,\n        isDisabled: true,\n        order: this.props.value.fieldsets[this.state.currentFieldset].length - 1,\n        onDelete: this.onShowDeleteField,\n        onChange: this.onChangeDefaultValue,\n        key: 'changeNote',\n        value: this.props.value.properties.changeNote[\"default\"],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1263,\n          columnNumber: 15\n        }\n      }))) : null, canAddFields && __jsx(Form.Field, {\n        inline: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1285,\n          columnNumber: 13\n        }\n      }, __jsx(Grid, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1286,\n          columnNumber: 15\n        }\n      }, __jsx(Grid.Row, {\n        stretched: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1287,\n          columnNumber: 17\n        }\n      }, __jsx(Grid.Column, {\n        width: \"12\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1288,\n          columnNumber: 19\n        }\n      }, __jsx(\"div\", {\n        className: \"wrapper\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1289,\n          columnNumber: 21\n        }\n      }, __jsx(\"label\", {\n        htmlFor: \"addfield\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1290,\n          columnNumber: 23\n        }\n      }, this.props.intl.formatMessage(messages.addField))), __jsx(\"div\", {\n        className: \"toolbar\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1294,\n          columnNumber: 21\n        }\n      }, __jsx(\"button\", {\n        \"aria-label\": this.props.intl.formatMessage(messages.add),\n        id: \"addfield\",\n        className: \"item ui noborder button\",\n        onClick: this.onShowAddField,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1295,\n          columnNumber: 23\n        }\n      }, __jsx(Icon, {\n        name: \"plus\",\n        color: \"blue\",\n        size: \"large\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1301,\n          columnNumber: 25\n        }\n      })))))))), this.state.addField !== null && __jsx(ModalForm, {\n        onSubmit: this.onAddField,\n        onCancel: this.onCancel,\n        title: this.props.intl.formatMessage(messages.addField),\n        formData: {\n          type: '',\n          id: '',\n          title: ''\n        },\n        schema: {\n          fieldsets: [{\n            id: 'default',\n            title: this.props.intl.formatMessage(messages[\"default\"]),\n            fields: ['factory', 'title', 'description', 'required']\n          }],\n          properties: {\n            factory: {\n              type: 'string',\n              factory: 'Choice',\n              title: this.props.intl.formatMessage(messages.type),\n              vocabulary: {\n                '@id': \"Fields\"\n              }\n            },\n            title: {\n              type: 'string',\n              title: this.props.intl.formatMessage(messages.title)\n            },\n            description: {\n              type: 'string',\n              widget: 'textarea',\n              title: this.props.intl.formatMessage(messages.description)\n            },\n            required: {\n              type: 'boolean',\n              title: this.props.intl.formatMessage(messages.required)\n            }\n          },\n          required: ['type', 'title']\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1311,\n          columnNumber: 11\n        }\n      }), this.state.editField !== null && __jsx(ModalForm, {\n        onSubmit: this.onEditField,\n        onCancel: this.onCancel,\n        title: this.props.intl.formatMessage(messages.editField),\n        formData: _objectSpread(_objectSpread({}, this.props.value.properties[this.state.editField.id]), {}, {\n          id: this.state.editField.id,\n          required: this.props.value.required.indexOf(this.state.editField.id) !== -1,\n          parentFieldSet: this.props.value.fieldsets[this.state.currentFieldset].id,\n          values: formatArrayToTextarea(this.props.value.properties[this.state.editField.id])\n        }),\n        schema: schemaField(this.props.value.properties[this.state.editField.id].factory, this.props.intl, this.props.value.fieldsets.filter(function (fieldset) {\n          return !fieldset.behavior || fieldset.id === 'default' || fieldset.behavior.includes('generated');\n        })),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1356,\n          columnNumber: 11\n        }\n      }), this.state.addFieldset !== null && __jsx(ModalForm, {\n        onSubmit: this.onAddFieldset,\n        onCancel: this.onCancel,\n        title: this.props.intl.formatMessage(messages.addFieldset),\n        formData: {\n          id: '',\n          title: ''\n        },\n        schema: fieldsetSchema(this.props.intl),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1386,\n          columnNumber: 11\n        }\n      }), this.state.editFieldset !== null && __jsx(ModalForm, {\n        onSubmit: this.onEditFieldset,\n        onCancel: this.onCancel,\n        title: this.props.intl.formatMessage(messages.editFieldset),\n        formData: {\n          id: this.props.value.fieldsets[this.state.editFieldset].id,\n          title: this.props.value.fieldsets[this.state.editFieldset].title\n        },\n        schema: fieldsetSchema(this.props.intl),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1398,\n          columnNumber: 11\n        }\n      }), this.state.deleteFieldset !== null && __jsx(Confirm, {\n        open: true,\n        content: this.props.intl.formatMessage(messages.deleteFieldset),\n        onCancel: this.onCancel,\n        onConfirm: this.onDeleteFieldset,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1410,\n          columnNumber: 11\n        }\n      }), this.state.deleteField !== null && __jsx(Confirm, {\n        open: true,\n        content: this.props.intl.formatMessage(messages.deleteField),\n        onCancel: this.onCancel,\n        onConfirm: this.onDeleteField,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 1418,\n          columnNumber: 11\n        }\n      }));\n    }\n  }]);\n  return SchemaWidget;\n}(Component);\n_defineProperty(SchemaWidget, \"propTypes\", {\n  /**\n   * Id of the field\n   */\n  id: PropTypes.string.isRequired,\n  /**\n   * Title of the field\n   */\n  required: PropTypes.bool,\n  /**\n   * Value of the field\n   */\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  /**\n   * List of error messages\n   */\n  error: PropTypes.arrayOf(PropTypes.string),\n  /**\n   * On change handler\n   */\n  onChange: PropTypes.func.isRequired\n  /**\n   * Intl object\n   */\n});\n_defineProperty(SchemaWidget, \"defaultProps\", {\n  required: false,\n  value: {},\n  error: []\n});\nexport default compose(injectIntl, injectLazyLibs(['reactBeautifulDnd']), connect(function (state, props) {\n  return {\n    value: _isString(props.value) ? JSON.parse(props.value) : props.value\n  };\n}, {}))(SchemaWidget);","map":{"version":3,"names":["React","Component","connect","compose","PropTypes","move","Confirm","Form","Grid","Icon","Message","Segment","defineMessages","injectIntl","injectLazyLibs","slugify","Field","ModalForm","SchemaWidgetFieldset","messages","add","addField","addFieldset","parentFieldSet","editField","editFieldset","idTitle","idDescription","choices","string","text","richtext","checkbox","selection","type","title","description","required","minLength","maxLength","minimum","maximum","deleteFieldset","deleteField","error","makeFieldsetList","listOfFieldsets","intl","result","map","id","schemaField","factory","fieldsets","fields","properties","formatMessage","widget","values","fieldsetSchema","isEditable","field","behavior","includes","getItemStyle","isDragging","draggableStyle","userSelect","background","getTabStyle","isDraggingOver","display","flexDirection","flexWrap","getFieldStyle","formatTextareaToArray","textarea","split","elem","trim","filter","formatArrayToTextarea","props","join","items","formatTextareaToChoices","multiple","SchemaWidget","onChange","bind","onChangeDefaultValue","onAddField","onAddFieldset","onEditField","onEditFieldset","onDeleteFieldset","onDeleteField","onShowAddField","onShowAddFieldset","onShowEditFieldset","onShowEditField","onShowDeleteFieldset","onShowDeleteField","onSetCurrentFieldset","onOrderField","onOrderFieldset","onCancel","onDragEnd","state","currentFieldset","fieldId","currentFieldsetFields","value","hasChangeNote","indexOf","newFieldsetFields","slice","length","oldfieldId","newfieldId","moveToFieldsetWithNewName","newParentFieldsetIndex","findIndex","indexOfChangeNote","fieldsetsWithoutField","fieldsOfNewFieldset","fieldsetsWithField","changeNameInFieldset","formattedValues","listOfProp","forEach","prop","parseFloat","setState","fieldValue","fieldMerge","propsMerge","event","preventDefault","index","schema","delta","destination","droppableId","source","reactBeautifulDnd","Draggable","DragDropContext","Droppable","nonUserCreatedFields","userCreatedFieldsStartingIndex","lastUserCreatedFieldsIndex","makeNonUserFields","makeUserFields","provided","snapshot","innerRef","draggableProps","dragHandleProps","style","canAddFields","margin","err","fieldset","placeholder","changeNote","vocabulary","isRequired","bool","oneOfType","object","arrayOf","func","JSON","parse"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Widgets/SchemaWidget.jsx"],"sourcesContent":["/**\n * SchemaWidget component.\n * @module components/manage/Widgets/SchemaWidget\n */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport PropTypes from 'prop-types';\nimport { concat, findIndex, isString, map, omit, slice, without } from 'lodash';\nimport move from 'lodash-move';\nimport { Confirm, Form, Grid, Icon, Message, Segment } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport { slugify } from '@plone/volto/helpers/Utils/Utils';\n\nimport {\n  Field,\n  ModalForm,\n  SchemaWidgetFieldset,\n} from '@plone/volto/components';\n\nconst messages = defineMessages({\n  add: {\n    id: 'Add',\n    defaultMessage: 'Add',\n  },\n  addField: {\n    id: 'Add field',\n    defaultMessage: 'Add field',\n  },\n  addFieldset: {\n    id: 'Add fieldset',\n    defaultMessage: 'Add fieldset',\n  },\n  parentFieldSet: {\n    id: 'Parent fieldset',\n    defaultMessage: 'Parent fieldset',\n  },\n  editField: {\n    id: 'Edit field',\n    defaultMessage: 'Edit field',\n  },\n  editFieldset: {\n    id: 'Edit fieldset',\n    defaultMessage: 'Edit fieldset',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  idTitle: {\n    id: 'Short Name',\n    defaultMessage: 'Short Name',\n  },\n  idDescription: {\n    id: 'Used for programmatic access to the fieldset.',\n    defaultMessage: 'Used for programmatic access to the fieldset.',\n  },\n  choices: {\n    id: 'Possible values',\n    defaultMessage: 'Possible values (Enter allowed choices one per line).',\n  },\n  string: {\n    id: 'String',\n    defaultMessage: 'String',\n  },\n  text: {\n    id: 'Text',\n    defaultMessage: 'Text',\n  },\n  richtext: {\n    id: 'Richtext',\n    defaultMessage: 'Richtext',\n  },\n  checkbox: {\n    id: 'Checkbox',\n    defaultMessage: 'Checkbox',\n  },\n  selection: {\n    id: 'Selection',\n    defaultMessage: 'Selection',\n  },\n  type: {\n    id: 'Type',\n    defaultMessage: 'Type',\n  },\n  title: {\n    id: 'Title',\n    defaultMessage: 'Title',\n  },\n  description: {\n    id: 'Description',\n    defaultMessage: 'Description',\n  },\n  required: {\n    id: 'Required',\n    defaultMessage: 'Required',\n  },\n  minLength: {\n    id: 'minLength',\n    defaultMessage: 'Minimum Length',\n  },\n  maxLength: {\n    id: 'maxLength',\n    defaultMessage: 'Maximum Length',\n  },\n  minimum: {\n    id: 'minimum',\n    defaultMessage: 'Start of the range',\n  },\n  maximum: {\n    id: 'maximum',\n    defaultMessage: 'End of the range (including the value itself)',\n  },\n  deleteFieldset: {\n    id: 'Are you sure you want to delete this fieldset including all fields?',\n    defaultMessage:\n      'Are you sure you want to delete this fieldset including all fields?',\n  },\n  deleteField: {\n    id: 'Are you sure you want to delete this field?',\n    defaultMessage: 'Are you sure you want to delete this field?',\n  },\n  error: {\n    id: 'Error',\n    defaultMessage: 'Error',\n  },\n});\n\n/**\n * Makes a list of fieldset types formatted for select widget\n * @param {Object[]} listOfTypes array of strings\n * @param {*} intl\n * @returns {Object[]} example [['default', 'default']]\n */\nconst makeFieldsetList = (listOfFieldsets, intl) => {\n  const result = listOfFieldsets.map((type) => [type.id, type.title]);\n  return result;\n};\n\n/**\n * schemaField used for modal form, when editing a field\n * - based on the factory a set of fields is presented\n * - fields can be moved to another fieldset\n * @param {string} factory - the kind of field\n * @param {Object} intl\n * @param {*} fieldsets\n * @return {Object} - schema\n */\nconst schemaField = (factory, intl, fieldsets) => ({\n  fieldsets: [\n    {\n      id: 'default',\n      title: 'default',\n      fields: [\n        ...['title', 'description', 'parentFieldSet'],\n        ...((factory) => {\n          switch (factory) {\n            case 'Rich Text':\n              return ['maxLength'];\n            case 'URL':\n            case 'Password':\n            case 'label_password_field':\n            case 'Email':\n            case 'label_email':\n              return ['minLength', 'maxLength'];\n            case 'Integer':\n            case 'label_integer_field':\n              return ['minimum', 'maximum'];\n            case 'Floating-point number':\n            case 'label_float_field':\n            case 'Date/Time':\n            case 'label_datetime_field':\n            case 'Date':\n            case 'label_date_field':\n            case 'File':\n            case 'File Upload':\n            case 'Image':\n            case 'Yes/No':\n            case 'label_boolean_field':\n            case 'JSONField':\n            case 'Relation Choice':\n            case 'Relation List':\n              return [];\n            case 'Multiple Choice':\n            case 'label_multi_choice_field':\n            case 'Choice':\n            case 'label_choice_field':\n              return ['values'];\n            default:\n              return ['minLength', 'maxLength'];\n          }\n        })(factory),\n        ...['required'],\n      ],\n    },\n  ],\n  properties: {\n    title: {\n      type: 'string',\n      title: intl.formatMessage(messages.title),\n    },\n    description: {\n      type: 'string',\n      widget: 'textarea',\n      title: intl.formatMessage(messages.description),\n    },\n    parentFieldSet: {\n      type: 'string',\n      title: intl.formatMessage(messages.parentFieldSet),\n      choices: makeFieldsetList(fieldsets),\n    },\n    required: {\n      type: 'boolean',\n      title: intl.formatMessage(messages.required),\n    },\n    ...((factory) => {\n      switch (factory) {\n        case 'Rich Text':\n          return {\n            maxLength: {\n              type: 'integer',\n              title: intl.formatMessage(messages.maxLength),\n            },\n          };\n        case 'URL':\n        case 'Password':\n        case 'label_password_field':\n        case 'Email':\n        case 'label_email':\n          return {\n            minLength: {\n              type: 'integer',\n              title: intl.formatMessage(messages.minLength),\n            },\n            maxLength: {\n              type: 'integer',\n              title: intl.formatMessage(messages.maxLength),\n            },\n          };\n        case 'Integer':\n        case 'label_integer_field':\n          return {\n            minimum: {\n              type: 'integer',\n              title: intl.formatMessage(messages.minimum),\n            },\n            maximum: {\n              type: 'integer',\n              title: intl.formatMessage(messages.maximum),\n            },\n          };\n        case 'Floating-point number':\n        case 'label_float_field':\n        case 'Date/Time':\n        case 'label_datetime_field':\n        case 'Date':\n        case 'label_date_field':\n        case 'File':\n        case 'File Upload':\n        case 'Image':\n        case 'Yes/No':\n        case 'label_boolean_field':\n        case 'JSONField':\n        case 'Relation Choice':\n        case 'Relation List':\n          return {};\n        case 'Multiple Choice':\n        case 'label_multi_choice_field':\n        case 'Choice':\n        case 'label_choice_field':\n          return {\n            values: {\n              type: 'string',\n              title: intl.formatMessage(messages.choices),\n              widget: 'textarea',\n            },\n          };\n        default:\n          return {\n            minLength: {\n              type: 'integer',\n              title: intl.formatMessage(messages.minLength),\n            },\n            maxLength: {\n              type: 'integer',\n              title: intl.formatMessage(messages.maxLength),\n            },\n          };\n      }\n    })(factory),\n  },\n  required: ['type', 'title'],\n});\n\n/**\n * schema for adding a new field\n * @param {Object} intl\n */\nconst fieldsetSchema = (intl) => ({\n  fieldsets: [\n    {\n      id: 'default',\n      title: intl.formatMessage(messages.default),\n      fields: ['title', 'id'],\n    },\n  ],\n  properties: {\n    id: {\n      type: 'string',\n      title: intl.formatMessage(messages.idTitle),\n      description: intl.formatMessage(messages.idDescription),\n    },\n    title: {\n      type: 'string',\n      title: intl.formatMessage(messages.title),\n    },\n  },\n  required: ['id', 'title'],\n});\n\n/**\n * 'plone.dexterity.schema.generated' is considered user created\n * @param {Object} field\n */\nconst isEditable = (field) =>\n  !field.behavior || field.behavior.includes('generated');\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: 'none',\n\n  // change background colour if dragging\n  background: isDragging ? 'white' : 'transparent',\n\n  // styles we need to apply on draggable\n  ...draggableStyle,\n});\n\nconst getTabStyle = (isDraggingOver) => ({\n  background: isDraggingOver ? '#f4f4f4' : 'transparent',\n  display: 'flex',\n  flexDirection: 'row',\n  flexWrap: 'wrap',\n});\n\nconst getFieldStyle = (isDraggingOver) => ({\n  background: isDraggingOver ? '#f4f4f4' : 'transparent',\n});\n\n/**\n * will transform a string with new lines in an array for each item on a line\n * @param {string} textarea - has '\\r\\n' characters\n */\nconst formatTextareaToArray = (textarea) => {\n  const values =\n    textarea && textarea\n      ? textarea\n          .split(/(\\r\\n|\\n|\\r)/gm)\n          .map((elem) => elem.trim())\n          .filter((elem) => elem !== '')\n      : null;\n\n  return values ? { values } : {};\n};\n\nconst formatArrayToTextarea = (props) => {\n  if (props?.values) {\n    return props.values.join('\\n');\n  }\n  if (props?.choices) {\n    return props.choices.map((elem) => elem[0]).join('\\n');\n  }\n  if (props?.items?.choices) {\n    return props.items.choices.map((elem) => elem[0]).join('\\n');\n  }\n  return '';\n};\n\nconst formatTextareaToChoices = (textarea, multiple) => {\n  const choices =\n    textarea && textarea\n      ? textarea\n          .split(/(\\r\\n|\\n|\\r)/gm)\n          .map((elem) => elem.trim())\n          .filter((elem) => elem !== '')\n          .map((elem) => [elem, elem])\n      : null;\n\n  if (!multiple) {\n    return choices ? { choices } : {};\n  }\n\n  const items = choices ? { choices: choices } : {};\n  return items ? { items } : {};\n};\n\n/**\n * SchemaWidget component class.\n * @class SchemaWidget\n * @extends Component\n */\nclass SchemaWidget extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    /**\n     * Id of the field\n     */\n    id: PropTypes.string.isRequired,\n    /**\n     * Title of the field\n     */\n    required: PropTypes.bool,\n    /**\n     * Value of the field\n     */\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    /**\n     * List of error messages\n     */\n    error: PropTypes.arrayOf(PropTypes.string),\n    /**\n     * On change handler\n     */\n    onChange: PropTypes.func.isRequired,\n    /**\n     * Intl object\n     */\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    required: false,\n    value: {},\n    error: [],\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.onChange = this.onChange.bind(this);\n    this.onChangeDefaultValue = this.onChangeDefaultValue.bind(this);\n    this.onAddField = this.onAddField.bind(this);\n    this.onAddFieldset = this.onAddFieldset.bind(this);\n    this.onEditField = this.onEditField.bind(this);\n    this.onEditFieldset = this.onEditFieldset.bind(this);\n    this.onDeleteFieldset = this.onDeleteFieldset.bind(this);\n    this.onDeleteField = this.onDeleteField.bind(this);\n    this.onShowAddField = this.onShowAddField.bind(this);\n    this.onShowAddFieldset = this.onShowAddFieldset.bind(this);\n    this.onShowEditFieldset = this.onShowEditFieldset.bind(this);\n    this.onShowEditField = this.onShowEditField.bind(this);\n    this.onShowDeleteFieldset = this.onShowDeleteFieldset.bind(this);\n    this.onShowDeleteField = this.onShowDeleteField.bind(this);\n    this.onSetCurrentFieldset = this.onSetCurrentFieldset.bind(this);\n    this.onOrderField = this.onOrderField.bind(this);\n    this.onOrderFieldset = this.onOrderFieldset.bind(this);\n    this.onCancel = this.onCancel.bind(this);\n    this.onDragEnd = this.onDragEnd.bind(this);\n    this.state = {\n      addField: null,\n      addFieldset: null,\n      editFieldset: null,\n      editField: null,\n      deleteFieldset: null,\n      deleteField: null,\n      currentFieldset: 0,\n    };\n  }\n\n  /**\n   * Add field handler\n   * @method onAddField\n   * @param {Object} values Form values\n   * @returns {undefined}\n   */\n  onAddField(values) {\n    const fieldId = slugify(values.title);\n    const currentFieldsetFields = this.props.value.fieldsets[\n      this.state.currentFieldset\n    ].fields;\n    const hasChangeNote = currentFieldsetFields.indexOf('changeNote') > -1;\n    const newFieldsetFields = hasChangeNote\n      ? [\n          ...currentFieldsetFields.slice(0, currentFieldsetFields.length - 1),\n          fieldId,\n          currentFieldsetFields[currentFieldsetFields.length - 1],\n        ]\n      : [...currentFieldsetFields, fieldId];\n\n    this.onChange({\n      ...this.props.value,\n      fieldsets: [\n        ...slice(this.props.value.fieldsets, 0, this.state.currentFieldset),\n        {\n          ...this.props.value.fieldsets[this.state.currentFieldset],\n          fields: newFieldsetFields,\n        },\n        ...slice(this.props.value.fieldsets, this.state.currentFieldset + 1),\n      ],\n      properties: {\n        ...this.props.value.properties,\n        [fieldId]: {\n          title: values.title,\n          description: values.description,\n          id: fieldId,\n          ...((factory) => {\n            switch (factory) {\n              case 'Date/Time':\n              case 'label_datetime_field':\n                return {\n                  type: 'string',\n                  widget: 'datetime',\n                  factory,\n                };\n              case 'Date':\n              case 'label_date_field':\n                return {\n                  type: 'string',\n                  widget: 'date',\n                  factory,\n                };\n              case 'Email':\n              case 'label_email':\n                return {\n                  type: 'string',\n                  widget: 'email',\n                  factory,\n                };\n              case 'File':\n              case 'File Upload':\n                return {\n                  type: 'object',\n                  factory,\n                };\n              case 'Floating-point number':\n              case 'label_float_field':\n                return {\n                  type: 'number',\n                  factory,\n                };\n              case 'Integer':\n              case 'label_integer_field':\n                return {\n                  type: 'integer',\n                  factory,\n                };\n              case 'Image':\n                return {\n                  type: 'object',\n                  factory,\n                };\n              case 'JSONField':\n                return {\n                  type: 'dict',\n                  widget: 'json',\n                  factory,\n                };\n              case 'Multiple Choice':\n              case 'label_multi_choice_field':\n                return {\n                  type: 'array',\n                  factory,\n                };\n              case 'Relation List':\n                return {\n                  type: 'array',\n                  factory,\n                };\n              case 'Choice':\n              case 'label_choice_field':\n                return {\n                  type: 'string',\n                  choices: [],\n                  factory,\n                };\n              case 'Relation Choice':\n                return {\n                  type: 'string',\n                  factory,\n                };\n              case 'Password':\n              case 'label_password_field':\n                return {\n                  type: 'string',\n                  widget: 'password',\n                  factory,\n                };\n              case 'Rich Text':\n                return {\n                  type: 'string',\n                  widget: 'richtext',\n                  factory,\n                };\n              case 'URL':\n                return {\n                  type: 'string',\n                  widget: 'url',\n                  factory,\n                };\n              case 'Yes/No':\n              case 'label_boolean_field':\n                return {\n                  type: 'boolean',\n                  factory,\n                };\n              default:\n                return {\n                  type: 'string',\n                  factory,\n                };\n            }\n          })(values.factory),\n        },\n      },\n      required: values.required\n        ? [...this.props.value.required, fieldId]\n        : this.props.value.required,\n    });\n    this.onCancel();\n  }\n\n  /**\n   * Add fieldset handler\n   * @method onAddFieldset\n   * @param {Object} values Form values\n   * @returns {undefined}\n   */\n  onAddFieldset(values) {\n    this.onChange({\n      ...this.props.value,\n      fieldsets: [\n        ...this.props.value.fieldsets,\n        {\n          ...values,\n          fields: [],\n        },\n      ],\n    });\n    this.onCancel();\n  }\n\n  /**\n   * Edit fieldset handler\n   * @method onEditFieldset\n   * @param {Object} values Form values\n   * @returns {undefined}\n   */\n  onEditFieldset(values) {\n    values.fields =\n      values.fields ||\n      this.props.value.fieldsets[this.state.editFieldset]?.fields ||\n      [];\n    this.onChange({\n      ...this.props.value,\n      fieldsets: [\n        ...slice(this.props.value.fieldsets, 0, this.state.editFieldset),\n        values,\n        ...slice(this.props.value.fieldsets, this.state.editFieldset + 1),\n      ],\n    });\n    this.onCancel();\n  }\n\n  /**\n   * Recreates the fieldset structure\n   * will move change name of the field if needed and\n   * change fieldset if changed\n   * @param {Object[]} fieldsets\n   * @param {string} parentFieldSet - id\n   * @param {number} currentFieldset - index\n   * @param {Object} oldfieldId\n   * @param {Object} newfieldId\n   * @returns {Object[]} fieldsets\n   */\n  editFieldset(\n    fieldsets,\n    parentFieldSet,\n    currentFieldset,\n    oldfieldId,\n    newfieldId,\n  ) {\n    const moveToFieldsetWithNewName = () => {\n      const newParentFieldsetIndex = fieldsets.findIndex(\n        (field) => field.id === parentFieldSet,\n      );\n      const indexOfChangeNote = fieldsets[\n        newParentFieldsetIndex\n      ].fields.indexOf('changeNote');\n      // remove from current fieldset\n      const fieldsetsWithoutField = [\n        ...slice(fieldsets, 0, currentFieldset),\n        {\n          ...fieldsets[currentFieldset],\n          fields: fieldsets[currentFieldset].fields.filter(\n            (fieldId) => fieldId !== oldfieldId,\n          ),\n        },\n        ...slice(fieldsets, currentFieldset + 1),\n      ];\n\n      const fieldsOfNewFieldset =\n        indexOfChangeNote > -1\n          ? [\n              ...fieldsetsWithoutField[newParentFieldsetIndex].fields.slice(\n                0,\n                indexOfChangeNote + 1,\n              ),\n              oldfieldId,\n              fieldsetsWithoutField[newParentFieldsetIndex].fields[\n                indexOfChangeNote\n              ],\n            ]\n          : [\n              ...fieldsetsWithoutField[newParentFieldsetIndex].fields,\n              oldfieldId,\n            ];\n\n      // add to new fieldset\n      const fieldsetsWithField = [\n        ...slice(fieldsetsWithoutField, 0, newParentFieldsetIndex),\n        {\n          ...fieldsetsWithoutField[newParentFieldsetIndex],\n          fields: fieldsOfNewFieldset,\n        },\n        ...slice(fieldsetsWithoutField, newParentFieldsetIndex + 1),\n      ];\n      return fieldsetsWithField;\n    };\n\n    const changeNameInFieldset = () => {\n      return [\n        ...slice(fieldsets, 0, currentFieldset),\n        {\n          ...fieldsets[currentFieldset],\n          fields: map(fieldsets[currentFieldset].fields, (field) =>\n            field === oldfieldId ? newfieldId : field,\n          ),\n        },\n        ...slice(fieldsets, currentFieldset + 1),\n      ];\n    };\n\n    const result =\n      parentFieldSet !== fieldsets[currentFieldset].id\n        ? moveToFieldsetWithNewName()\n        : changeNameInFieldset();\n    return result;\n  }\n\n  /**\n   * Edit field handler\n   * recreates the schema based on field changes (properties, name, fieldset)\n   * @method onEditField\n   * @param {Object} values Field values\n   * @returns {undefined}\n   */\n  onEditField(values) {\n    let formattedValues = { ...values };\n\n    const listOfProp = ['minLength', 'maxLength', 'minimum', 'maximum'];\n    listOfProp.forEach((prop) => {\n      formattedValues = {\n        ...formattedValues,\n        ...{ [prop]: values[prop] ? parseFloat(values[prop]) : null },\n      };\n    });\n\n    const multiple =\n      this.props.value.properties[this.state.editField.id]?.factory ===\n        'Multiple Choice' ||\n      this.props.value.properties[this.state.editField.id]?.factory ===\n        'label_multi_choice_field';\n    const result = {\n      ...this.props.value,\n      fieldsets: formattedValues.parentFieldSet\n        ? this.editFieldset(\n            this.props.value.fieldsets,\n            formattedValues.parentFieldSet,\n            this.state.currentFieldset,\n            this.state.editField.id,\n            formattedValues.id,\n          )\n        : this.props.value.fieldsets,\n      properties: {\n        ...omit(this.props.value.properties, [this.state.editField.id]),\n        [formattedValues.id]: {\n          ...this.props.value.properties[this.state.editField.id],\n          ...omit(formattedValues, ['id', 'parentFieldSet']),\n          ...formatTextareaToArray(formattedValues.values),\n          ...formatTextareaToChoices(formattedValues.values, multiple),\n        },\n      },\n      required: formattedValues.required\n        ? concat(without(this.props.value.required, this.state.editField.id), [\n            formattedValues.id,\n          ])\n        : without(this.props.value.required, this.state.editField.id),\n    };\n\n    this.onChange(result);\n\n    this.onCancel();\n  }\n\n  /**\n   * Delete fieldset handler\n   * @method onDeleteFieldset\n   * @returns {undefined}\n   */\n  onDeleteFieldset() {\n    if (this.state.currentFieldset > this.props.value.fieldsets.length - 2) {\n      this.setState({\n        currentFieldset: this.state.currentFieldset - 1,\n      });\n    }\n    this.onChange({\n      ...this.props.value,\n      fieldsets: [\n        ...slice(this.props.value.fieldsets, 0, this.state.deleteFieldset),\n        ...slice(this.props.value.fieldsets, this.state.deleteFieldset + 1),\n      ],\n      properties: omit(\n        this.props.value.properties,\n        this.props.value.fieldsets[this.state.deleteFieldset].fields,\n      ),\n    });\n    this.onCancel();\n  }\n\n  /**\n   * Delete field handler\n   * @method onDeleteField\n   * @returns {undefined}\n   */\n  onDeleteField() {\n    this.onChange({\n      ...this.props.value,\n      fieldsets: [\n        ...slice(this.props.value.fieldsets, 0, this.state.currentFieldset),\n        {\n          ...this.props.value.fieldsets[this.state.currentFieldset],\n          fields: without(\n            this.props.value.fieldsets[this.state.currentFieldset].fields,\n            this.state.deleteField,\n          ),\n        },\n        ...slice(this.props.value.fieldsets, this.state.currentFieldset + 1),\n      ],\n      properties: omit(this.props.value.properties, [this.state.deleteField]),\n    });\n    this.onCancel();\n  }\n\n  /**\n   * Change handler\n   * @method onChange\n   * @param {Object} value New schema\n   * @returns {undefined}\n   */\n  onChange(value) {\n    this.props.onChange(this.props.id, value);\n  }\n\n  /**\n   * Change default value handler\n   * @method onChangeDefaultValue\n   * @param {string} fieldId\n   * @param {string} fieldValue\n   */\n  onChangeDefaultValue(fieldId, fieldValue) {\n    // Default values can have irreversible consequence, thus skip it for now.\n    // const value = { default: fieldValue }\n    const value = {};\n\n    const fieldMerge = {\n      ...this.props.value.properties[fieldId],\n      ...value,\n    };\n    const propsMerge = {\n      ...this.props.value.properties,\n      ...{ [fieldId]: fieldMerge },\n    };\n\n    this.onChange({\n      ...this.props.value,\n      properties: propsMerge,\n    });\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.setState({\n      addField: null,\n      addFieldset: null,\n      editFieldset: null,\n      editField: null,\n      deleteFieldset: null,\n      deleteField: null,\n    });\n  }\n\n  /**\n   * Show add field handler\n   * @method onShowAddField\n   * @returns {undefined}\n   */\n  onShowAddField(event) {\n    this.setState({\n      addField: true,\n    });\n    event.preventDefault();\n  }\n\n  /**\n   * Show add fieldset handler\n   * @method onShowAddFieldset\n   * @returns {undefined}\n   */\n  onShowAddFieldset(event) {\n    this.setState({\n      addFieldset: true,\n    });\n    event.preventDefault();\n  }\n\n  /**\n   * Show edit fieldset handler\n   * @method onShowEditFieldset\n   * @param {Number} index Index of fieldset\n   * @returns {undefined}\n   */\n  onShowEditFieldset(index) {\n    this.setState({\n      editFieldset: index,\n    });\n  }\n\n  /**\n   * Show edit field handler\n   * @method onShowEditField\n   * @param {string} id Id of field\n   * @param {Object} schema Schema of the field\n   * @returns {undefined}\n   */\n  onShowEditField(id, schema) {\n    return this.setState({\n      editField: {\n        id,\n      },\n    });\n  }\n\n  /**\n   * Show delete fieldset handler\n   * @method onShowDeleteFieldset\n   * @param {Number} index Index of fieldset\n   * @param {Object} event Event object\n   * @returns {undefined}\n   */\n  onShowDeleteFieldset(index) {\n    this.setState({\n      deleteFieldset: index,\n    });\n  }\n\n  /**\n   * Show delete field handler\n   * @method onShowDeleteField\n   * @param {String} field Field to delete\n   * @param {Object} event Event object\n   * @returns {undefined}\n   */\n  onShowDeleteField(field) {\n    this.setState({\n      deleteField: field,\n    });\n  }\n\n  /**\n   * Set current fieldset handler\n   * @method onSetCurrentFieldset\n   * @param {Number} index Index of fieldset\n   * @returns {undefined}\n   */\n  onSetCurrentFieldset(index) {\n    this.setState({\n      currentFieldset: index,\n    });\n  }\n\n  /**\n   * On order fieldset\n   * @method onOrderField\n   * @param {number} index Index\n   * @param {number} delta Delta\n   * @returns {undefined}\n   */\n  onOrderField(index, delta) {\n    this.onChange({\n      ...this.props.value,\n      fieldsets: [\n        ...slice(this.props.value.fieldsets, 0, this.state.currentFieldset),\n        {\n          ...this.props.value.fieldsets[this.state.currentFieldset],\n          fields: move(\n            this.props.value.fieldsets[this.state.currentFieldset].fields,\n            index,\n            delta,\n          ),\n        },\n        ...slice(this.props.value.fieldsets, this.state.currentFieldset + 1),\n      ],\n    });\n  }\n\n  /**\n   * On order fieldset\n   * @method onOrderFieldset\n   * @param {number} index Index\n   * @param {number} delta Delta\n   * @returns {undefined}\n   */\n  onOrderFieldset(index, delta) {\n    const schema = {\n      ...this.props.value,\n      fieldsets: move(this.props.value.fieldsets, index, delta),\n    };\n    this.setState({\n      currentFieldset: findIndex(schema.fieldsets, {\n        id: schema.fieldsets[this.state.currentFieldset].id,\n      }),\n    });\n    this.onChange(schema);\n  }\n\n  /**\n   * Set current fieldset handler\n   * @method onDragEnd\n   * @param {Number} index Index of fieldset\n   * @returns {undefined}\n   */\n  onDragEnd(result) {\n    if (\n      result.destination &&\n      result.destination.droppableId === 'fields-schema-edit'\n    ) {\n      this.onOrderField(result.source.index, result.destination.index);\n    }\n    if (\n      result.destination &&\n      result.destination.droppableId === 'tabs-schema-edit'\n    ) {\n      this.onOrderFieldset(result.source.index, result.destination.index);\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { error, reactBeautifulDnd } = this.props;\n    const { Draggable, DragDropContext, Droppable } = reactBeautifulDnd;\n    if (!this.props.value) {\n      return '';\n    }\n    const nonUserCreatedFields = this.props.value.fieldsets[\n      this.state.currentFieldset\n    ].fields.filter(\n      (fieldId) =>\n        !isEditable(this.props.value.properties[fieldId]) &&\n        fieldId !== 'changeNote',\n    );\n    const hasChangeNote =\n      this.props.value.fieldsets[this.state.currentFieldset].fields.indexOf(\n        'changeNote',\n      ) > -1;\n    const userCreatedFieldsStartingIndex = nonUserCreatedFields.length;\n    const lastUserCreatedFieldsIndex = hasChangeNote\n      ? this.props.value.fieldsets[this.state.currentFieldset].fields.length - 1\n      : this.props.value.fieldsets[this.state.currentFieldset].fields.length;\n    // fields that were not created by the user, but are part of a behavior\n    const makeNonUserFields = () =>\n      map(\n        this.props.value.fieldsets[this.state.currentFieldset].fields.slice(\n          0,\n          userCreatedFieldsStartingIndex,\n        ),\n        (field, index) => (\n          <div\n            style={{ background: '#c7d5d859' }}\n            key={`${field}-${this.state.currentFieldset}-${index}`}\n          >\n            <Field\n              {...this.props.value.properties[field]}\n              id={field}\n              required={this.props.value.required.indexOf(field) !== -1}\n              onEdit={this.onShowEditField}\n              draggable={false}\n              isDisabled={true}\n              order={index}\n              onDelete={this.onShowDeleteField}\n              onChange={this.onChangeDefaultValue}\n              value={this.props.value.properties[field].default}\n            />\n          </div>\n        ),\n      );\n    // fields created by the user\n    const makeUserFields = () =>\n      map(\n        this.props.value.fieldsets[this.state.currentFieldset].fields.slice(\n          userCreatedFieldsStartingIndex,\n          lastUserCreatedFieldsIndex,\n        ),\n        (field, index) => (\n          <Draggable\n            draggableId={field}\n            index={userCreatedFieldsStartingIndex + index}\n            key={`${field}-${this.state.currentFieldset}-${index}`}\n          >\n            {(provided, snapshot) => (\n              <div\n                ref={provided.innerRef}\n                {...provided.draggableProps}\n                {...provided.dragHandleProps}\n                style={getItemStyle(\n                  snapshot.isDragging,\n                  provided.draggableProps.style,\n                )}\n              >\n                <Field\n                  {...this.props.value.properties[field]}\n                  id={field}\n                  required={this.props.value.required.indexOf(field) !== -1}\n                  onEdit={this.onShowEditField}\n                  draggable={true}\n                  isDisabled={false}\n                  order={index}\n                  onDelete={this.onShowDeleteField}\n                  onChange={this.onChangeDefaultValue}\n                  key={`${field}-${this.state.currentFieldset}-${index}`}\n                  value={this.props.value.properties[field].default}\n                />\n              </div>\n            )}\n          </Draggable>\n        ),\n      );\n\n    const canAddFields =\n      this.state.currentFieldset === 0 ||\n      !this.props.value.fieldsets[this.state.currentFieldset].behavior ||\n      this.props.value.fieldsets[this.state.currentFieldset].behavior.includes(\n        'generated',\n      );\n\n    return (\n      <div>\n        <Segment.Group\n          style={{\n            margin: '-1rem',\n          }}\n        >\n          {error.length > 0 &&\n            map(error, (err, index) => (\n              <Message\n                icon=\"warning\"\n                key={`${err}-${index}`}\n                negative\n                attached\n                header={this.props.intl.formatMessage(messages.error)}\n                content={err}\n              />\n            ))}\n          <DragDropContext onDragEnd={this.onDragEnd}>\n            <Droppable droppableId=\"tabs-schema-edit\" direction=\"horizontal\">\n              {(provided, snapshot) => (\n                <div\n                  role=\"tablist\"\n                  className=\"ui pointing secondary attached tabular menu\"\n                  ref={provided.innerRef}\n                  {...provided.draggableProps}\n                  style={getTabStyle(snapshot.isDraggingOver)}\n                >\n                  {map(this.props.value.fieldsets, (fieldset, index) => (\n                    <SchemaWidgetFieldset\n                      key={`${fieldset.id}-${this.state.currentFieldset}-${index}`}\n                      title={fieldset.title}\n                      order={index}\n                      active={index === this.state.currentFieldset}\n                      onClick={this.onSetCurrentFieldset}\n                      onShowEditFieldset={this.onShowEditFieldset}\n                      onShowDeleteFieldset={this.onShowDeleteFieldset}\n                      onOrderFieldset={this.onOrderFieldset}\n                      getItemStyle={getItemStyle}\n                      isDraggable={true}\n                      isDisabled={\n                        fieldset.behavior\n                          ? !fieldset.behavior.includes('generated')\n                          : false\n                      }\n                    />\n                  ))}\n                  <div className=\"item item-add\">\n                    <button\n                      aria-label={this.props.intl.formatMessage(messages.add)}\n                      className=\"item ui noborder button\"\n                      onClick={this.onShowAddFieldset}\n                    >\n                      <Icon name=\"plus\" size=\"large\" />\n                    </button>\n                  </div>\n\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n\n            {makeNonUserFields()}\n\n            <Droppable\n              droppableId=\"fields-schema-edit\"\n              direction=\"vertical\"\n              type=\"fixed\"\n            >\n              {(provided, snapshot) => (\n                <div\n                  ref={provided.innerRef}\n                  {...provided.draggableProps}\n                  style={getFieldStyle(snapshot.isDraggingOver)}\n                >\n                  {makeUserFields()}\n\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          </DragDropContext>\n\n          {hasChangeNote ? (\n            <div style={{ background: '#c7d5d859' }}>\n              <Field\n                {...this.props.value.properties.changeNote}\n                id={'changeNote'}\n                required={\n                  this.props.value.required.indexOf('changeNote') !== -1\n                }\n                onEdit={this.onShowEditField}\n                draggable={false}\n                isDisabled={true}\n                order={\n                  this.props.value.fieldsets[this.state.currentFieldset]\n                    .length - 1\n                }\n                onDelete={this.onShowDeleteField}\n                onChange={this.onChangeDefaultValue}\n                key={'changeNote'}\n                value={this.props.value.properties.changeNote.default}\n              />\n            </div>\n          ) : null}\n\n          {canAddFields && (\n            <Form.Field inline>\n              <Grid>\n                <Grid.Row stretched>\n                  <Grid.Column width=\"12\">\n                    <div className=\"wrapper\">\n                      <label htmlFor=\"addfield\">\n                        {this.props.intl.formatMessage(messages.addField)}\n                      </label>\n                    </div>\n                    <div className=\"toolbar\">\n                      <button\n                        aria-label={this.props.intl.formatMessage(messages.add)}\n                        id=\"addfield\"\n                        className=\"item ui noborder button\"\n                        onClick={this.onShowAddField}\n                      >\n                        <Icon name=\"plus\" color=\"blue\" size=\"large\" />\n                      </button>\n                    </div>\n                  </Grid.Column>\n                </Grid.Row>\n              </Grid>\n            </Form.Field>\n          )}\n        </Segment.Group>\n        {this.state.addField !== null && (\n          <ModalForm\n            onSubmit={this.onAddField}\n            onCancel={this.onCancel}\n            title={this.props.intl.formatMessage(messages.addField)}\n            formData={{\n              type: '',\n              id: '',\n              title: '',\n            }}\n            schema={{\n              fieldsets: [\n                {\n                  id: 'default',\n                  title: this.props.intl.formatMessage(messages.default),\n                  fields: ['factory', 'title', 'description', 'required'],\n                },\n              ],\n              properties: {\n                factory: {\n                  type: 'string',\n                  factory: 'Choice',\n                  title: this.props.intl.formatMessage(messages.type),\n                  vocabulary: {\n                    '@id': `Fields`,\n                  },\n                },\n                title: {\n                  type: 'string',\n                  title: this.props.intl.formatMessage(messages.title),\n                },\n                description: {\n                  type: 'string',\n                  widget: 'textarea',\n                  title: this.props.intl.formatMessage(messages.description),\n                },\n                required: {\n                  type: 'boolean',\n                  title: this.props.intl.formatMessage(messages.required),\n                },\n              },\n              required: ['type', 'title'],\n            }}\n          />\n        )}\n        {this.state.editField !== null && (\n          <ModalForm\n            onSubmit={this.onEditField}\n            onCancel={this.onCancel}\n            title={this.props.intl.formatMessage(messages.editField)}\n            formData={{\n              ...this.props.value.properties[this.state.editField.id],\n              id: this.state.editField.id,\n              required:\n                this.props.value.required.indexOf(this.state.editField.id) !==\n                -1,\n              parentFieldSet: this.props.value.fieldsets[\n                this.state.currentFieldset\n              ].id,\n              values: formatArrayToTextarea(\n                this.props.value.properties[this.state.editField.id],\n              ),\n            }}\n            schema={schemaField(\n              this.props.value.properties[this.state.editField.id].factory,\n              this.props.intl,\n              this.props.value.fieldsets.filter(\n                (fieldset) =>\n                  !fieldset.behavior ||\n                  fieldset.id === 'default' ||\n                  fieldset.behavior.includes('generated'),\n              ),\n            )}\n          />\n        )}\n        {this.state.addFieldset !== null && (\n          <ModalForm\n            onSubmit={this.onAddFieldset}\n            onCancel={this.onCancel}\n            title={this.props.intl.formatMessage(messages.addFieldset)}\n            formData={{\n              id: '',\n              title: '',\n            }}\n            schema={fieldsetSchema(this.props.intl)}\n          />\n        )}\n        {this.state.editFieldset !== null && (\n          <ModalForm\n            onSubmit={this.onEditFieldset}\n            onCancel={this.onCancel}\n            title={this.props.intl.formatMessage(messages.editFieldset)}\n            formData={{\n              id: this.props.value.fieldsets[this.state.editFieldset].id,\n              title: this.props.value.fieldsets[this.state.editFieldset].title,\n            }}\n            schema={fieldsetSchema(this.props.intl)}\n          />\n        )}\n        {this.state.deleteFieldset !== null && (\n          <Confirm\n            open\n            content={this.props.intl.formatMessage(messages.deleteFieldset)}\n            onCancel={this.onCancel}\n            onConfirm={this.onDeleteFieldset}\n          />\n        )}\n        {this.state.deleteField !== null && (\n          <Confirm\n            open\n            content={this.props.intl.formatMessage(messages.deleteField)}\n            onCancel={this.onCancel}\n            onConfirm={this.onDeleteField}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  injectLazyLibs(['reactBeautifulDnd']),\n  connect(\n    (state, props) => ({\n      value: isString(props.value) ? JSON.parse(props.value) : props.value,\n    }),\n    {},\n  ),\n)(SchemaWidget);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Add","defaultMessage":"Add"},{"id":"Add field","defaultMessage":"Add field"},{"id":"Add fieldset","defaultMessage":"Add fieldset"},{"id":"Parent fieldset","defaultMessage":"Parent fieldset"},{"id":"Edit field","defaultMessage":"Edit field"},{"id":"Edit fieldset","defaultMessage":"Edit fieldset"},{"id":"Default","defaultMessage":"Default"},{"id":"Short Name","defaultMessage":"Short Name"},{"id":"Used for programmatic access to the fieldset.","defaultMessage":"Used for programmatic access to the fieldset."},{"id":"Possible values","defaultMessage":"Possible values (Enter allowed choices one per line)."},{"id":"String","defaultMessage":"String"},{"id":"Text","defaultMessage":"Text"},{"id":"Richtext","defaultMessage":"Richtext"},{"id":"Checkbox","defaultMessage":"Checkbox"},{"id":"Selection","defaultMessage":"Selection"},{"id":"Type","defaultMessage":"Type"},{"id":"Title","defaultMessage":"Title"},{"id":"Description","defaultMessage":"Description"},{"id":"Required","defaultMessage":"Required"},{"id":"minLength","defaultMessage":"Minimum Length"},{"id":"maxLength","defaultMessage":"Maximum Length"},{"id":"minimum","defaultMessage":"Start of the range"},{"id":"maximum","defaultMessage":"End of the range (including the value itself)"},{"id":"Are you sure you want to delete this fieldset including all fields?","defaultMessage":"Are you sure you want to delete this fieldset including all fields?"},{"id":"Are you sure you want to delete this field?","defaultMessage":"Are you sure you want to delete this field?"},{"id":"Error","defaultMessage":"Error"}]}},"sourceType":"module","externalDependencies":[]}