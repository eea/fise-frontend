{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport React from 'react';\nimport { compose } from 'redux';\nimport { connectToProviderData } from '@eeacms/volto-datablocks/hocs';\nclass SchemaProvider extends React.Component {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"getSchema\", (schema = {}) => {\n      if (!this.props.provider_data) return schema;\n      const provider_data = this.props.provider_data || {};\n      const column = this.props.data.column;\n      const columns = Array.from(new Set(Object.keys(provider_data || {}))).map(n => [n, n]);\n      const rows = column && provider_data[column] ? provider_data[column].map((value, index) => [`row-${index + 1}`, value]) : [];\n      return _objectSpread(_objectSpread({}, schema), {}, {\n        properties: _objectSpread(_objectSpread({}, schema.properties), {}, {\n          column: _objectSpread(_objectSpread({}, schema.properties.column), {}, {\n            choices: columns\n          }),\n          row: _objectSpread(_objectSpread({}, schema.properties.row), {}, {\n            default: rows !== null && rows !== void 0 && rows.length ? 'row-1' : null,\n            choices: rows\n          })\n        })\n      });\n    });\n  }\n  render() {\n    const {\n      editSchema,\n      children\n    } = this.props;\n    return children(this.getSchema(editSchema));\n  }\n}\nexport default compose(connectToProviderData(props => {\n  return {\n    provider_url: props.data.provider_url\n  };\n}))(SchemaProvider);","map":{"version":3,"names":["React","compose","connectToProviderData","SchemaProvider","Component","schema","props","provider_data","column","data","columns","Array","from","Set","Object","keys","map","n","rows","value","index","properties","choices","row","default","length","render","editSchema","children","getSchema","provider_url"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-slate-dataentity/src/DataEntity/SchemaProvider.jsx"],"sourcesContent":["import React from 'react';\nimport { compose } from 'redux';\nimport { connectToProviderData } from '@eeacms/volto-datablocks/hocs';\n\nclass SchemaProvider extends React.Component {\n  getSchema = (schema = {}) => {\n    if (!this.props.provider_data) return schema;\n    const provider_data = this.props.provider_data || {};\n    const column = this.props.data.column;\n\n    const columns = Array.from(\n      new Set(Object.keys(provider_data || {})),\n    ).map((n) => [n, n]);\n\n    const rows =\n      column && provider_data[column]\n        ? provider_data[column].map((value, index) => [\n            `row-${index + 1}`,\n            value,\n          ])\n        : [];\n\n    return {\n      ...schema,\n      properties: {\n        ...schema.properties,\n        column: {\n          ...schema.properties.column,\n          choices: columns,\n        },\n        row: {\n          ...schema.properties.row,\n          default: rows?.length ? 'row-1' : null,\n          choices: rows,\n        },\n      },\n    };\n  };\n\n  render() {\n    const { editSchema, children } = this.props;\n    return children(this.getSchema(editSchema));\n  }\n}\n\nexport default compose(\n  connectToProviderData((props) => {\n    return {\n      provider_url: props.data.provider_url,\n    };\n  }),\n)(SchemaProvider);\n"],"mappings":";;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,OAAO;AAC/B,SAASC,qBAAqB,QAAQ,+BAA+B;AAErE,MAAMC,cAAc,SAASH,KAAK,CAACI,SAAS,CAAC;EAAA;IAAA;IAAA,mCAC/B,CAACC,MAAM,GAAG,CAAC,CAAC,KAAK;MAC3B,IAAI,CAAC,IAAI,CAACC,KAAK,CAACC,aAAa,EAAE,OAAOF,MAAM;MAC5C,MAAME,aAAa,GAAG,IAAI,CAACD,KAAK,CAACC,aAAa,IAAI,CAAC,CAAC;MACpD,MAAMC,MAAM,GAAG,IAAI,CAACF,KAAK,CAACG,IAAI,CAACD,MAAM;MAErC,MAAME,OAAO,GAAGC,KAAK,CAACC,IAAI,CACxB,IAAIC,GAAG,CAACC,MAAM,CAACC,IAAI,CAACR,aAAa,IAAI,CAAC,CAAC,CAAC,CAAC,CAC1C,CAACS,GAAG,CAAEC,CAAC,IAAK,CAACA,CAAC,EAAEA,CAAC,CAAC,CAAC;MAEpB,MAAMC,IAAI,GACRV,MAAM,IAAID,aAAa,CAACC,MAAM,CAAC,GAC3BD,aAAa,CAACC,MAAM,CAAC,CAACQ,GAAG,CAAC,CAACG,KAAK,EAAEC,KAAK,KAAK,CACzC,OAAMA,KAAK,GAAG,CAAE,EAAC,EAClBD,KAAK,CACN,CAAC,GACF,EAAE;MAER,uCACKd,MAAM;QACTgB,UAAU,kCACLhB,MAAM,CAACgB,UAAU;UACpBb,MAAM,kCACDH,MAAM,CAACgB,UAAU,CAACb,MAAM;YAC3Bc,OAAO,EAAEZ;UAAO,EACjB;UACDa,GAAG,kCACElB,MAAM,CAACgB,UAAU,CAACE,GAAG;YACxBC,OAAO,EAAEN,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEO,MAAM,GAAG,OAAO,GAAG,IAAI;YACtCH,OAAO,EAAEJ;UAAI;QACd;MACF;IAEL,CAAC;EAAA;EAEDQ,MAAM,GAAG;IACP,MAAM;MAAEC,UAAU;MAAEC;IAAS,CAAC,GAAG,IAAI,CAACtB,KAAK;IAC3C,OAAOsB,QAAQ,CAAC,IAAI,CAACC,SAAS,CAACF,UAAU,CAAC,CAAC;EAC7C;AACF;AAEA,eAAe1B,OAAO,CACpBC,qBAAqB,CAAEI,KAAK,IAAK;EAC/B,OAAO;IACLwB,YAAY,EAAExB,KAAK,CAACG,IAAI,CAACqB;EAC3B,CAAC;AACH,CAAC,CAAC,CACH,CAAC3B,cAAc,CAAC"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}