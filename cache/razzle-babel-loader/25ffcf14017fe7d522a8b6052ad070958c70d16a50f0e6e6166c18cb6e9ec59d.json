{"ast":null,"code":"/**\n * Api helper.\n * @module helpers/Api\n */\n\nimport superagent from 'superagent';\nimport Cookies from 'universal-cookie';\nimport config from '@plone/volto/registry';\nimport { addHeadersFactory } from '@plone/volto/helpers/Proxy/Proxy';\nimport { stripQuerystring } from '@plone/volto/helpers';\nconst methods = ['get', 'post', 'put', 'patch', 'del'];\n\n/**\n * Format the url.\n * @function formatUrl\n * @param {string} path Path (or URL) to be formatted.\n * @returns {string} Formatted path.\n */\nfunction formatUrl(path) {\n  const {\n    settings\n  } = config;\n  const APISUFIX = settings.legacyTraverse ? '' : '/++api++';\n  if (path.startsWith('http://') || path.startsWith('https://')) return path;\n  const adjustedPath = path[0] !== '/' ? `/${path}` : path;\n  let apiPath = '';\n  if (settings.internalApiPath && __SERVER__) {\n    apiPath = settings.internalApiPath;\n  } else if (settings.apiPath) {\n    apiPath = settings.apiPath;\n  }\n  return `${apiPath}${APISUFIX}${adjustedPath}`;\n}\n\n/**\n * Api class.\n * @class Api\n */\nclass Api {\n  /**\n   * Constructor\n   * @method constructor\n   * @constructs Api\n   */\n  constructor(req) {\n    const cookies = new Cookies();\n    methods.forEach(method => {\n      this[method] = (path, {\n        params,\n        data,\n        type,\n        headers = {},\n        checkUrl = false\n      } = {}) => {\n        let request;\n        let promise = new Promise((resolve, reject) => {\n          request = superagent[method](formatUrl(path));\n          if (params) {\n            request.query(params);\n          }\n          let authToken;\n          if (req) {\n            // We are in SSR\n            authToken = req.universalCookies.get('auth_token');\n            request.use(addHeadersFactory(req));\n          } else {\n            authToken = cookies.get('auth_token');\n          }\n          if (authToken) {\n            request.set('Authorization', `Bearer ${authToken}`);\n          }\n          request.set('Accept', 'application/json');\n          if (type) {\n            request.type(type);\n          }\n          Object.keys(headers).forEach(key => request.set(key, headers[key]));\n          if (data) {\n            request.send(data);\n          }\n          request.end((err, response) => {\n            if (checkUrl && request.url && request.xhr && stripQuerystring(request.url) !== stripQuerystring(request.xhr.responseURL)) {\n              var _request$xhr$response;\n              if (((_request$xhr$response = request.xhr.responseURL) === null || _request$xhr$response === void 0 ? void 0 : _request$xhr$response.length) === 0) {\n                return reject({\n                  code: 408,\n                  status: 408,\n                  url: request.xhr.responseURL\n                });\n              }\n              return reject({\n                code: 301,\n                url: request.xhr.responseURL\n              });\n            }\n            return err ? reject(err) : resolve(response.body || response.text);\n          });\n        });\n        promise.request = request;\n        return promise;\n      };\n    });\n  }\n}\nexport default Api;","map":{"version":3,"names":["superagent","Cookies","config","addHeadersFactory","stripQuerystring","methods","formatUrl","path","settings","APISUFIX","legacyTraverse","startsWith","adjustedPath","apiPath","internalApiPath","__SERVER__","Api","constructor","req","cookies","forEach","method","params","data","type","headers","checkUrl","request","promise","Promise","resolve","reject","query","authToken","universalCookies","get","use","set","Object","keys","key","send","end","err","response","url","xhr","responseURL","length","code","status","body","text"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/helpers/Api/Api.js"],"sourcesContent":["/**\n * Api helper.\n * @module helpers/Api\n */\n\nimport superagent from 'superagent';\nimport Cookies from 'universal-cookie';\nimport config from '@plone/volto/registry';\nimport { addHeadersFactory } from '@plone/volto/helpers/Proxy/Proxy';\nimport { stripQuerystring } from '@plone/volto/helpers';\n\nconst methods = ['get', 'post', 'put', 'patch', 'del'];\n\n/**\n * Format the url.\n * @function formatUrl\n * @param {string} path Path (or URL) to be formatted.\n * @returns {string} Formatted path.\n */\nfunction formatUrl(path) {\n  const { settings } = config;\n  const APISUFIX = settings.legacyTraverse ? '' : '/++api++';\n\n  if (path.startsWith('http://') || path.startsWith('https://')) return path;\n\n  const adjustedPath = path[0] !== '/' ? `/${path}` : path;\n  let apiPath = '';\n  if (settings.internalApiPath && __SERVER__) {\n    apiPath = settings.internalApiPath;\n  } else if (settings.apiPath) {\n    apiPath = settings.apiPath;\n  }\n\n  return `${apiPath}${APISUFIX}${adjustedPath}`;\n}\n\n/**\n * Api class.\n * @class Api\n */\nclass Api {\n  /**\n   * Constructor\n   * @method constructor\n   * @constructs Api\n   */\n  constructor(req) {\n    const cookies = new Cookies();\n\n    methods.forEach((method) => {\n      this[method] = (\n        path,\n        { params, data, type, headers = {}, checkUrl = false } = {},\n      ) => {\n        let request;\n        let promise = new Promise((resolve, reject) => {\n          request = superagent[method](formatUrl(path));\n\n          if (params) {\n            request.query(params);\n          }\n\n          let authToken;\n          if (req) {\n            // We are in SSR\n            authToken = req.universalCookies.get('auth_token');\n            request.use(addHeadersFactory(req));\n          } else {\n            authToken = cookies.get('auth_token');\n          }\n          if (authToken) {\n            request.set('Authorization', `Bearer ${authToken}`);\n          }\n\n          request.set('Accept', 'application/json');\n\n          if (type) {\n            request.type(type);\n          }\n\n          Object.keys(headers).forEach((key) => request.set(key, headers[key]));\n\n          if (data) {\n            request.send(data);\n          }\n\n          request.end((err, response) => {\n            if (\n              checkUrl &&\n              request.url &&\n              request.xhr &&\n              stripQuerystring(request.url) !==\n                stripQuerystring(request.xhr.responseURL)\n            ) {\n              if (request.xhr.responseURL?.length === 0) {\n                return reject({\n                  code: 408,\n                  status: 408,\n                  url: request.xhr.responseURL,\n                });\n              }\n              return reject({\n                code: 301,\n                url: request.xhr.responseURL,\n              });\n            }\n            return err ? reject(err) : resolve(response.body || response.text);\n          });\n        });\n        promise.request = request;\n        return promise;\n      };\n    });\n  }\n}\n\nexport default Api;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}