{"ast":null,"code":"import _toConsumableArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-datablocks/src/components/manage/Blocks/DottedTableChart/View.jsx\",\n  _this = this,\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { compose } from 'redux';\nimport { Popup, Table } from 'semantic-ui-react';\nimport { connectToProviderData } from '@eeacms/volto-datablocks/hocs';\nimport { DEFAULT_MAX_DOT_COUNT } from './constants';\nimport { serializeNodes } from '@eeacms/volto-datablocks/serialize';\nimport { FormattedValue } from '@eeacms/volto-datablocks/Utils';\nimport './styles.less';\nvar DottedTableChartView = function DottedTableChartView(props) {\n  _s();\n  var data = props.data,\n    _props$provider_data = props.provider_data,\n    provider_data = _props$provider_data === void 0 ? {} : _props$provider_data;\n  var description = data.description,\n    column_data = data.column_data,\n    row_data = data.row_data,\n    size_data = data.size_data,\n    _data$row_colors = data.row_colors,\n    row_colors = _data$row_colors === void 0 ? {} : _data$row_colors,\n    _data$max_dot_count = data.max_dot_count,\n    max_dot_count = _data$max_dot_count === void 0 ? DEFAULT_MAX_DOT_COUNT : _data$max_dot_count,\n    text_template = data.text_template,\n    specifier = data.specifier;\n  var possible_columns = Array.from(new Set(provider_data === null || provider_data === void 0 ? void 0 : provider_data[column_data])).sort();\n  var possible_rows = Array.from(new Set(provider_data === null || provider_data === void 0 ? void 0 : provider_data[row_data])).sort();\n  var data_tree = React.useMemo(function () {\n    var res = {};\n    ((provider_data === null || provider_data === void 0 ? void 0 : provider_data[column_data]) || []).forEach(function (cv, i) {\n      var _provider_data$row_da, _provider_data$size_d;\n      res[cv] = _objectSpread(_objectSpread({}, res[cv]), {}, _defineProperty({}, provider_data === null || provider_data === void 0 ? void 0 : (_provider_data$row_da = provider_data[row_data]) === null || _provider_data$row_da === void 0 ? void 0 : _provider_data$row_da[i], provider_data === null || provider_data === void 0 ? void 0 : (_provider_data$size_d = provider_data[size_data]) === null || _provider_data$size_d === void 0 ? void 0 : _provider_data$size_d[i]));\n    });\n    return res;\n  }, [column_data, provider_data, row_data, size_data]);\n  var size_column_data = (provider_data === null || provider_data === void 0 ? void 0 : provider_data[size_data]) || [];\n  // TODO: use sums to find the biggest value for a column?\n  var maxValue = React.useMemo(function () {\n    var numbers = size_column_data.map(function (s) {\n      return typeof s === 'string' ? parseFloat(s) : s;\n    });\n    return Math.max.apply(Math, _toConsumableArray(numbers));\n  }, [size_column_data]);\n  var dotSize = Math.ceil(maxValue / max_dot_count);\n  var renderDots = function renderDots(value, color) {\n    var arraySize = Math.floor(value / dotSize);\n    return __jsx(\"div\", {\n      className: \"dot-cells\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }\n    }, arraySize && dotSize ? new Array(arraySize).fill(1).map(function (_, i) {\n      return __jsx(\"div\", {\n        key: i,\n        style: {\n          backgroundColor: color\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }\n      });\n    }) : '');\n  };\n  return __jsx(\"div\", {\n    className: \"dotted-table-chart\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"\".concat(data.underline ? 'with-border' : ''),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, description ? serializeNodes(description) : ''), __jsx(\"div\", {\n    className: \"inner\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, !!provider_data && column_data && row_data && size_data ? __jsx(Table, {\n    textAlign: \"left\",\n    striped: data.striped,\n    className: \"unstackable \".concat(data.bordered ? 'no-borders' : '', \"\\n    \").concat(data.compact_table ? 'compact-table' : ''),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, __jsx(Table.Header, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, __jsx(Table.Row, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 15\n    }\n  }, __jsx(Table.Cell, {\n    key: \"first-cell\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }\n  }), possible_columns.map(function (v, y) {\n    return __jsx(Table.HeaderCell, {\n      key: \"\".concat(v, \"-\").concat(y),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 19\n      }\n    }, v);\n  }))), __jsx(Table.Body, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, possible_rows.map(function (row, i) {\n    return __jsx(Table.Row, {\n      key: \"\".concat(row, \"-\").concat(i),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }\n    }, __jsx(Table.HeaderCell, {\n      key: \"first-cell\",\n      style: {\n        color: row_colors === null || row_colors === void 0 ? void 0 : row_colors[row]\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 19\n      }\n    }, row), possible_columns.map(function (col, y) {\n      return __jsx(Table.Cell, {\n        verticalAlign: \"top\",\n        key: \"\".concat(col, \"-\").concat(y),\n        style: {\n          // hack from https://stackoverflow.com/a/3542470/258462\n          height: '1px',\n          padding: '0'\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 21\n        }\n      }, __jsx(Popup, {\n        content:\n        // it might happen that the FormattedValue component returns empty string because of the input data\n        __jsx(React.Fragment, null, \"Value:\", ' ', __jsx(FormattedValue, {\n          textTemplate: text_template,\n          value: data_tree[col][row],\n          specifier: specifier,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 29\n          }\n        })),\n        trigger: __jsx(\"div\", {\n          style: {\n            // hack from https://stackoverflow.com/a/3542470/258462\n            height: '100%',\n            padding: '0.78571429em' // value taken from SUIR's collections/table.less (possibly needs to be changed if compact table style is implemented in DottedTableChartView)\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 27\n          }\n        }, renderDots(data_tree[col][row], row_colors === null || row_colors === void 0 ? void 0 : row_colors[row])),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 23\n        }\n      }));\n    }));\n  }))) : ''));\n};\n_s(DottedTableChartView, \"33qqQE5UbNK1ss/6h6aHJu8XJ+8=\");\n_c = DottedTableChartView;\nexport default compose(connectToProviderData(function (props) {\n  return {\n    provider_url: props.data.url || props.data.provider_url\n  };\n}))(DottedTableChartView);\nvar _c;\n$RefreshReg$(_c, \"DottedTableChartView\");","map":{"version":3,"names":["React","compose","Popup","Table","connectToProviderData","DEFAULT_MAX_DOT_COUNT","serializeNodes","FormattedValue","DottedTableChartView","props","data","provider_data","description","column_data","row_data","size_data","row_colors","max_dot_count","text_template","specifier","possible_columns","Array","from","Set","sort","possible_rows","data_tree","useMemo","res","forEach","cv","i","size_column_data","maxValue","numbers","map","s","parseFloat","Math","max","dotSize","ceil","renderDots","value","color","arraySize","floor","fill","_","backgroundColor","underline","striped","bordered","compact_table","v","y","row","col","height","padding","provider_url","url"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-datablocks/src/components/manage/Blocks/DottedTableChart/View.jsx"],"sourcesContent":["import React from 'react';\nimport { compose } from 'redux';\nimport { Popup, Table } from 'semantic-ui-react';\nimport { connectToProviderData } from '@eeacms/volto-datablocks/hocs';\nimport { DEFAULT_MAX_DOT_COUNT } from './constants';\nimport { serializeNodes } from '@eeacms/volto-datablocks/serialize';\nimport { FormattedValue } from '@eeacms/volto-datablocks/Utils';\n\nimport './styles.less';\n\nconst DottedTableChartView = (props) => {\n  const { data, provider_data = {} } = props;\n\n  const {\n    description,\n    column_data,\n    row_data,\n    size_data,\n    row_colors = {},\n    max_dot_count = DEFAULT_MAX_DOT_COUNT,\n    text_template,\n    specifier,\n  } = data;\n\n  const possible_columns = Array.from(\n    new Set(provider_data?.[column_data]),\n  ).sort();\n  const possible_rows = Array.from(new Set(provider_data?.[row_data])).sort();\n\n  const data_tree = React.useMemo(() => {\n    const res = {};\n    (provider_data?.[column_data] || []).forEach((cv, i) => {\n      res[cv] = {\n        ...res[cv],\n        [provider_data?.[row_data]?.[i]]: provider_data?.[size_data]?.[i],\n      };\n    });\n    return res;\n  }, [column_data, provider_data, row_data, size_data]);\n\n  const size_column_data = provider_data?.[size_data] || [];\n  // TODO: use sums to find the biggest value for a column?\n  const maxValue = React.useMemo(() => {\n    const numbers = size_column_data.map((s) =>\n      typeof s === 'string' ? parseFloat(s) : s,\n    );\n    return Math.max(...numbers);\n  }, [size_column_data]);\n\n  const dotSize = Math.ceil(maxValue / max_dot_count);\n\n  const renderDots = (value, color) => {\n    const arraySize = Math.floor(value / dotSize);\n    return (\n      <div className=\"dot-cells\">\n        {arraySize && dotSize\n          ? new Array(arraySize)\n              .fill(1)\n              .map((_, i) => (\n                <div key={i} style={{ backgroundColor: color }}></div>\n              ))\n          : ''}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"dotted-table-chart\">\n      <div className={`${data.underline ? 'with-border' : ''}`}>\n        {description ? serializeNodes(description) : ''}\n      </div>\n      <div className=\"inner\">\n        {!!provider_data && column_data && row_data && size_data ? (\n          <Table\n            textAlign=\"left\"\n            striped={data.striped}\n            className={`unstackable ${data.bordered ? 'no-borders' : ''}\n    ${data.compact_table ? 'compact-table' : ''}`}\n          >\n            <Table.Header>\n              <Table.Row>\n                <Table.Cell key=\"first-cell\"></Table.Cell>\n                {possible_columns.map((v, y) => (\n                  <Table.HeaderCell key={`${v}-${y}`}>{v}</Table.HeaderCell>\n                ))}\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {possible_rows.map((row, i) => (\n                <Table.Row key={`${row}-${i}`}>\n                  <Table.HeaderCell\n                    key=\"first-cell\"\n                    style={{ color: row_colors?.[row] }}\n                  >\n                    {row}\n                  </Table.HeaderCell>\n                  {possible_columns.map((col, y) => (\n                    <Table.Cell\n                      verticalAlign=\"top\"\n                      key={`${col}-${y}`}\n                      style={{\n                        // hack from https://stackoverflow.com/a/3542470/258462\n                        height: '1px',\n\n                        padding: '0',\n                      }}\n                    >\n                      <Popup\n                        content={\n                          // it might happen that the FormattedValue component returns empty string because of the input data\n                          <>\n                            Value:{' '}\n                            <FormattedValue\n                              textTemplate={text_template}\n                              value={data_tree[col][row]}\n                              specifier={specifier}\n                            />\n                          </>\n                        }\n                        trigger={\n                          <div\n                            style={{\n                              // hack from https://stackoverflow.com/a/3542470/258462\n                              height: '100%',\n\n                              padding: '0.78571429em', // value taken from SUIR's collections/table.less (possibly needs to be changed if compact table style is implemented in DottedTableChartView)\n                            }}\n                          >\n                            {renderDots(data_tree[col][row], row_colors?.[row])}\n                          </div>\n                        }\n                      />\n                    </Table.Cell>\n                  ))}\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n        ) : (\n          ''\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default compose(\n  connectToProviderData((props) => ({\n    provider_url: props.data.url || props.data.provider_url,\n  })),\n)(DottedTableChartView);\n"],"mappings":";;;;;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,OAAO;AAC/B,SAASC,KAAK,EAAEC,KAAK,QAAQ,mBAAmB;AAChD,SAASC,qBAAqB,QAAQ,+BAA+B;AACrE,SAASC,qBAAqB,QAAQ,aAAa;AACnD,SAASC,cAAc,QAAQ,oCAAoC;AACnE,SAASC,cAAc,QAAQ,gCAAgC;AAE/D,OAAO,eAAe;AAEtB,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAoB,CAAIC,KAAK,EAAK;EAAA;EACtC,IAAQC,IAAI,GAAyBD,KAAK,CAAlCC,IAAI;IAAA,uBAAyBD,KAAK,CAA5BE,aAAa;IAAbA,aAAa,qCAAG,CAAC,CAAC;EAEhC,IACEC,WAAW,GAQTF,IAAI,CARNE,WAAW;IACXC,WAAW,GAOTH,IAAI,CAPNG,WAAW;IACXC,QAAQ,GAMNJ,IAAI,CANNI,QAAQ;IACRC,SAAS,GAKPL,IAAI,CALNK,SAAS;IAAA,mBAKPL,IAAI,CAJNM,UAAU;IAAVA,UAAU,iCAAG,CAAC,CAAC;IAAA,sBAIbN,IAAI,CAHNO,aAAa;IAAbA,aAAa,oCAAGZ,qBAAqB;IACrCa,aAAa,GAEXR,IAAI,CAFNQ,aAAa;IACbC,SAAS,GACPT,IAAI,CADNS,SAAS;EAGX,IAAMC,gBAAgB,GAAGC,KAAK,CAACC,IAAI,CACjC,IAAIC,GAAG,CAACZ,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAGE,WAAW,CAAC,CAAC,CACtC,CAACW,IAAI,EAAE;EACR,IAAMC,aAAa,GAAGJ,KAAK,CAACC,IAAI,CAAC,IAAIC,GAAG,CAACZ,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAGG,QAAQ,CAAC,CAAC,CAAC,CAACU,IAAI,EAAE;EAE3E,IAAME,SAAS,GAAG1B,KAAK,CAAC2B,OAAO,CAAC,YAAM;IACpC,IAAMC,GAAG,GAAG,CAAC,CAAC;IACd,CAAC,CAAAjB,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAGE,WAAW,CAAC,KAAI,EAAE,EAAEgB,OAAO,CAAC,UAACC,EAAE,EAAEC,CAAC,EAAK;MAAA;MACtDH,GAAG,CAACE,EAAE,CAAC,mCACFF,GAAG,CAACE,EAAE,CAAC,2BACTnB,aAAa,aAAbA,aAAa,gDAAbA,aAAa,CAAGG,QAAQ,CAAC,0DAAzB,sBAA4BiB,CAAC,CAAC,EAAGpB,aAAa,aAAbA,aAAa,gDAAbA,aAAa,CAAGI,SAAS,CAAC,0DAA1B,sBAA6BgB,CAAC,CAAC,EAClE;IACH,CAAC,CAAC;IACF,OAAOH,GAAG;EACZ,CAAC,EAAE,CAACf,WAAW,EAAEF,aAAa,EAAEG,QAAQ,EAAEC,SAAS,CAAC,CAAC;EAErD,IAAMiB,gBAAgB,GAAG,CAAArB,aAAa,aAAbA,aAAa,uBAAbA,aAAa,CAAGI,SAAS,CAAC,KAAI,EAAE;EACzD;EACA,IAAMkB,QAAQ,GAAGjC,KAAK,CAAC2B,OAAO,CAAC,YAAM;IACnC,IAAMO,OAAO,GAAGF,gBAAgB,CAACG,GAAG,CAAC,UAACC,CAAC;MAAA,OACrC,OAAOA,CAAC,KAAK,QAAQ,GAAGC,UAAU,CAACD,CAAC,CAAC,GAAGA,CAAC;IAAA,EAC1C;IACD,OAAOE,IAAI,CAACC,GAAG,OAARD,IAAI,qBAAQJ,OAAO,EAAC;EAC7B,CAAC,EAAE,CAACF,gBAAgB,CAAC,CAAC;EAEtB,IAAMQ,OAAO,GAAGF,IAAI,CAACG,IAAI,CAACR,QAAQ,GAAGhB,aAAa,CAAC;EAEnD,IAAMyB,UAAU,GAAG,SAAbA,UAAU,CAAIC,KAAK,EAAEC,KAAK,EAAK;IACnC,IAAMC,SAAS,GAAGP,IAAI,CAACQ,KAAK,CAACH,KAAK,GAAGH,OAAO,CAAC;IAC7C,OACE;MAAK,SAAS,EAAC,WAAW;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACvBK,SAAS,IAAIL,OAAO,GACjB,IAAInB,KAAK,CAACwB,SAAS,CAAC,CACjBE,IAAI,CAAC,CAAC,CAAC,CACPZ,GAAG,CAAC,UAACa,CAAC,EAAEjB,CAAC;MAAA,OACR;QAAK,GAAG,EAAEA,CAAE;QAAC,KAAK,EAAE;UAAEkB,eAAe,EAAEL;QAAM,CAAE;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAAO;IAAA,CACvD,CAAC,GACJ,EAAE,CACF;EAEV,CAAC;EAED,OACE;IAAK,SAAS,EAAC,oBAAoB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACjC;IAAK,SAAS,YAAKlC,IAAI,CAACwC,SAAS,GAAG,aAAa,GAAG,EAAE,CAAG;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACtDtC,WAAW,GAAGN,cAAc,CAACM,WAAW,CAAC,GAAG,EAAE,CAC3C,EACN;IAAK,SAAS,EAAC,OAAO;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACnB,CAAC,CAACD,aAAa,IAAIE,WAAW,IAAIC,QAAQ,IAAIC,SAAS,GACtD,MAAC,KAAK;IACJ,SAAS,EAAC,MAAM;IAChB,OAAO,EAAEL,IAAI,CAACyC,OAAQ;IACtB,SAAS,wBAAiBzC,IAAI,CAAC0C,QAAQ,GAAG,YAAY,GAAG,EAAE,mBACjE1C,IAAI,CAAC2C,aAAa,GAAG,eAAe,GAAG,EAAE,CAAG;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAEtC,MAAC,KAAK,CAAC,MAAM;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACX,MAAC,KAAK,CAAC,GAAG;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACR,MAAC,KAAK,CAAC,IAAI;IAAC,GAAG,EAAC,YAAY;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAc,EACzCjC,gBAAgB,CAACe,GAAG,CAAC,UAACmB,CAAC,EAAEC,CAAC;IAAA,OACzB,MAAC,KAAK,CAAC,UAAU;MAAC,GAAG,YAAKD,CAAC,cAAIC,CAAC,CAAG;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAED,CAAC,CAAoB;EAAA,CAC3D,CAAC,CACQ,CACC,EACf,MAAC,KAAK,CAAC,IAAI;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACR7B,aAAa,CAACU,GAAG,CAAC,UAACqB,GAAG,EAAEzB,CAAC;IAAA,OACxB,MAAC,KAAK,CAAC,GAAG;MAAC,GAAG,YAAKyB,GAAG,cAAIzB,CAAC,CAAG;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAC5B,MAAC,KAAK,CAAC,UAAU;MACf,GAAG,EAAC,YAAY;MAChB,KAAK,EAAE;QAAEa,KAAK,EAAE5B,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAGwC,GAAG;MAAE,CAAE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAEnCA,GAAG,CACa,EAClBpC,gBAAgB,CAACe,GAAG,CAAC,UAACsB,GAAG,EAAEF,CAAC;MAAA,OAC3B,MAAC,KAAK,CAAC,IAAI;QACT,aAAa,EAAC,KAAK;QACnB,GAAG,YAAKE,GAAG,cAAIF,CAAC,CAAG;QACnB,KAAK,EAAE;UACL;UACAG,MAAM,EAAE,KAAK;UAEbC,OAAO,EAAE;QACX,CAAE;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAEF,MAAC,KAAK;QACJ,OAAO;QACL;QACA,sCACS,GAAG,EACV,MAAC,cAAc;UACb,YAAY,EAAEzC,aAAc;UAC5B,KAAK,EAAEQ,SAAS,CAAC+B,GAAG,CAAC,CAACD,GAAG,CAAE;UAC3B,SAAS,EAAErC,SAAU;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,EACrB,CAEL;QACD,OAAO,EACL;UACE,KAAK,EAAE;YACL;YACAuC,MAAM,EAAE,MAAM;YAEdC,OAAO,EAAE,cAAc,CAAE;UAC3B,CAAE;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,GAEDjB,UAAU,CAAChB,SAAS,CAAC+B,GAAG,CAAC,CAACD,GAAG,CAAC,EAAExC,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAGwC,GAAG,CAAC,CAAC,CAEtD;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EACD,CACS;IAAA,CACd,CAAC,CACQ;EAAA,CACb,CAAC,CACS,CACP,GAER,EACD,CACG,CACF;AAEV,CAAC;AAAC,GAtIIhD,oBAAoB;AAAA,KAApBA,oBAAoB;AAwI1B,eAAeP,OAAO,CACpBG,qBAAqB,CAAC,UAACK,KAAK;EAAA,OAAM;IAChCmD,YAAY,EAAEnD,KAAK,CAACC,IAAI,CAACmD,GAAG,IAAIpD,KAAK,CAACC,IAAI,CAACkD;EAC7C,CAAC;AAAA,CAAC,CAAC,CACJ,CAACpD,oBAAoB,CAAC;AAAC;AAAA"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}