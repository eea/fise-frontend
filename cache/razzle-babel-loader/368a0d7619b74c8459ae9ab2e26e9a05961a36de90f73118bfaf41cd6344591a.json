{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-object-widget/src/Widget/ObjectListWidget.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport { Input, Button, Grid, Modal, Segment } from 'semantic-ui-react';\nimport React, { useState } from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { Icon as VoltoIcon, FormFieldWrapper } from '@plone/volto/components';\nimport penSVG from '@plone/volto/icons/pen.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport deleteSVG from '@plone/volto/icons/delete.svg';\nimport addSVG from '@plone/volto/icons/add.svg';\nimport { ObjectWidget } from '@plone/volto/components';\nimport cx from 'classnames';\nimport { v4 as uuid } from 'uuid';\nimport './style.css';\n\n// TODO: make the ObjectWidget and ObjectListWidget (at least keyboard)\n// accessible (e.g. Esc should close the Modal)\n// - see: https://github.com/Semantic-Org/Semantic-UI/issues/5053\n\n/**\n * The localizable string messages.\n */\nconst messages = defineMessages({\n  add: {\n    \"id\": \"Add {schemaTitle}\",\n    \"defaultMessage\": \"Add {schemaTitle}\"\n  },\n  save: {\n    \"id\": \"Save\",\n    \"defaultMessage\": \"Save\"\n  },\n  delete: {\n    \"id\": \"Delete\",\n    \"defaultMessage\": \"Delete\"\n  },\n  cancel: {\n    \"id\": \"Cancel\",\n    \"defaultMessage\": \"Cancel\"\n  },\n  edit: {\n    \"id\": \"Edit\",\n    \"defaultMessage\": \"Edit\"\n  },\n  count: {\n    \"id\": \"{count} x {type}\",\n    \"defaultMessage\": \"{count} x {type}\"\n  },\n  emptyListHint: {\n    \"id\": \"Click the Add button below to add an item to this empty list.\",\n    \"defaultMessage\": \"Click the Add button below to add an item to this empty list.\"\n  }\n});\n\n/**\n * Displays an internationalized list of objects of the same schema, each of\n * them having a Delete button on its right. In future this might also allow\n * filtering, reordering etc.\n * @param {string} id\n * @param {array} value\n * @param {object} schema\n * @param {function} onChange\n * @param {string[]} uuids An array of IDs that are associated to each object in\n * `value` with the same index.\n * @param {function} removeUuid A function that removes the ID passed to it from\n * the lifted-up state data about IDs.\n */\nexport const FlatObjectList = ({\n  id,\n  value = [],\n  schema,\n  onChange,\n  uuids,\n  removeUuid\n}) => {\n  const intl = useIntl();\n  return __jsx(\"div\", {\n    className: \"objectlist-widget-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }, value.map((obj, index) => {\n    // here we are using an ID instead of index for React key prop\n    // because, in future, the items might be filterable or reorderable\n    const k = uuids ? uuids[index] : index;\n    return __jsx(Grid, {\n      key: k,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }\n    }, __jsx(Grid.Column, {\n      width: 11,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }\n    }, __jsx(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 15\n      }\n    }, __jsx(ObjectWidget, {\n      id: `${id}-${k}`,\n      key: k,\n      schema: schema,\n      value: obj,\n      onChange: (fi, fv) => {\n        const newvalue = value.map((v, i) => i !== index ? v : fv);\n        onChange(id, newvalue);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }\n    }))), __jsx(Grid.Column, {\n      width: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 13\n      }\n    }, __jsx(Button.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 15\n      }\n    }, __jsx(Button, {\n      basic: true,\n      circular: true,\n      size: \"mini\",\n      title: intl.formatMessage(messages.delete),\n      \"aria-label\": intl.formatMessage(messages.delete),\n      onClick: () => {\n        onChange(id, value.filter((v, i) => i !== index), () => {\n          if (removeUuid) {\n            removeUuid(index);\n          }\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }\n    }, __jsx(VoltoIcon, {\n      name: deleteSVG,\n      size: \"18px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 19\n      }\n    })))));\n  }));\n};\n\n/**\n * Custom React hook.\n * @param {React.RefObject} modalContentRef Ref of the element in which to\n * scroll to bottom automatically.\n * @param {object[]} stateValue Scroll automatically also when this parameter's\n * reference changes.\n */\nexport const useScrollToBottomAutomatically = (modalContentRef, stateValue) => {\n  React.useEffect(() => {\n    if (modalContentRef.current && modalContentRef.current.scrollIntoView) {\n      modalContentRef.current.scrollIntoView({\n        block: 'end'\n      });\n    }\n  }, [modalContentRef, stateValue]);\n};\n\n/**\n * Internationalized component which renders a modal form with an object list.\n * It retains internal state about the current value of the fields, and a\n * separate array of UUIDs, one for each object. Scrolls to bottom automatically\n * when adding a new object to the list or opening the form.\n * @param {boolean} open\n * @param {string} title\n * @param {string} className\n * @param {function} onSave\n * @param {function} onCancel\n * @param {object} schema\n * @param {object[]} value\n * @param {string} id\n */\nexport const ModalObjectListForm = props => {\n  const {\n    open,\n    title,\n    className,\n    onSave,\n    onCancel,\n    schema,\n    value = [],\n    id\n  } = props;\n  const intl = useIntl();\n  const {\n    0: stateValue,\n    1: setStateValue\n  } = useState(value);\n  const [uuids, setUuids] = React.useState(value.map(() => uuid()));\n  const modalContentRef = React.useRef(null);\n  useScrollToBottomAutomatically(modalContentRef, stateValue);\n  const createEmpty = React.useCallback(() => {\n    return {};\n  }, []);\n  const removeUuid = React.useCallback(index => {\n    const newUuids = [...uuids].splice(index, 1);\n    setUuids(newUuids);\n  }, [uuids]);\n  const addUuid = React.useCallback(() => {\n    setUuids([...uuids, uuid()]);\n  }, [uuids]);\n\n  // Update again the form state with passed-down value, in case it has been\n  // changed outside this component\n  React.useEffect(() => {\n    setStateValue(value);\n  }, [value]);\n  let jsx = __jsx(Modal, {\n    open: open,\n    className: className,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 5\n    }\n  }, __jsx(Modal.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }\n  }, title), __jsx(Modal.Content, {\n    scrolling: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    ref: modalContentRef,\n    \"data-testid\": \"modal-content\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 9\n    }\n  }, stateValue.length > 0 ? __jsx(FlatObjectList, {\n    id: id,\n    value: stateValue,\n    schema: schema,\n    onChange: (id, v) => {\n      setStateValue(v);\n    },\n    uuids: uuids,\n    removeUuid: removeUuid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 13\n    }\n  }) : intl.formatMessage(messages.emptyListHint))), __jsx(Modal.Actions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    primary: true,\n    basic: true,\n    circular: true,\n    floated: \"left\",\n    size: \"big\",\n    className: \"icon with-middle-aligned-icon\",\n    title: intl.formatMessage(messages.add, {\n      schemaTitle: schema.title\n    }),\n    \"aria-label\": intl.formatMessage(messages.add, {\n      schemaTitle: schema.title\n    }),\n    onClick: () => {\n      addUuid();\n      setStateValue([...stateValue, createEmpty()]);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 9\n    }\n  }, __jsx(VoltoIcon, {\n    size: \"1.5rem\",\n    name: addSVG,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 11\n    }\n  }), \"Add \", schema.title), __jsx(Button, {\n    basic: true,\n    circular: true,\n    primary: true,\n    floated: \"right\",\n    icon: \"arrow right\",\n    title: intl.formatMessage(messages.save),\n    \"aria-label\": intl.formatMessage(messages.save),\n    size: \"big\",\n    onClick: () => {\n      onSave(id, stateValue);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 9\n    }\n  }), __jsx(Button, {\n    basic: true,\n    circular: true,\n    secondary: true,\n    icon: \"remove\",\n    title: intl.formatMessage(messages.cancel),\n    \"aria-label\": intl.formatMessage(messages.cancel),\n    floated: \"right\",\n    size: \"big\",\n    onClick: () => {\n      setStateValue([...value]);\n      onCancel();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 9\n    }\n  })));\n  return jsx;\n};\n\n/**\n * Shows a field that is backed by a modal form which shows a list of objects of\n * a specified schema. Shows a visual cue after saving the data in the form to\n * highlight the field whose value was possibly changed.\n * @param {string} id\n * @param {object[]} value\n * @param {object} schema\n * @param {function} onChange\n * @param {boolean} required\n * @param {string[]} error\n * @param {string} title\n * @param {string} description\n */\nexport const ObjectListWidget = props => {\n  const {\n    id,\n    value = [],\n    schema,\n    onChange,\n    onBlur,\n    title,\n    description,\n    placeholder\n  } = props;\n  const intl = useIntl();\n  const {\n    0: open,\n    1: setOpen\n  } = useState(false);\n  const {\n    0: isJustChanged,\n    1: setIsJustChanged\n  } = useState(false);\n  return __jsx(React.Fragment, null, __jsx(ModalObjectListForm, {\n    id: id,\n    schema: schema,\n    title: title,\n    value: value,\n    open: open,\n    onSave: (id, val) => {\n      onChange(id, val);\n      setOpen(false);\n      setIsJustChanged(true);\n    },\n    onCancel: () => {\n      setOpen(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 7\n    }\n  }), __jsx(FormFieldWrapper, _extends({}, props, {\n    className: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 7\n    }\n  }), __jsx(Input, {\n    id: `field-${id}`,\n    name: id,\n    disabled: false,\n    value: intl.formatMessage(messages.count, {\n      count: value.length,\n      type: schema.title\n    }),\n    placeholder: placeholder,\n    onChange: ({\n      target\n    }) => onChange(id, target.value === '' ? undefined : target.value),\n    onBlur: onBlur,\n    onClick: () => {\n      setIsJustChanged(false);\n      setOpen(true);\n    },\n    className: cx('text', {\n      help: description,\n      'field-just-changed': isJustChanged\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 9\n    }\n  }, __jsx(\"input\", {\n    type: \"text\",\n    disabled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 11\n    }\n  }), __jsx(Button, {\n    \"aria-label\": intl.formatMessage(messages.edit),\n    title: intl.formatMessage(messages.edit),\n    className: \"item ui noborder button\",\n    \"data-testid\": \"big-pen-button\",\n    onClick: () => {\n      setIsJustChanged(false);\n      setOpen(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 11\n    }\n  }, __jsx(VoltoIcon, {\n    name: penSVG,\n    size: \"18px\",\n    color: \"blue\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 13\n    }\n  })), __jsx(Button, {\n    \"aria-label\": intl.formatMessage(messages.delete),\n    title: intl.formatMessage(messages.delete),\n    className: \"item ui noborder button\",\n    onClick: () => {\n      onChange(id, []);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 11\n    }\n  }, __jsx(VoltoIcon, {\n    name: clearSVG,\n    size: \"18px\",\n    color: \"red\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 13\n    }\n  })))));\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nObjectListWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  schema: PropTypes.object.isRequired,\n  errors: PropTypes.arrayOf(PropTypes.any),\n  value: PropTypes.array,\n  onChange: PropTypes.func.isRequired,\n  required: PropTypes.bool.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nObjectListWidget.defaultProps = {\n  value: []\n};\nexport default ObjectListWidget;","map":{"version":3,"names":["Input","Button","Grid","Modal","Segment","React","useState","defineMessages","useIntl","PropTypes","Icon","VoltoIcon","FormFieldWrapper","penSVG","clearSVG","deleteSVG","addSVG","ObjectWidget","cx","v4","uuid","messages","add","save","delete","cancel","edit","count","emptyListHint","FlatObjectList","id","value","schema","onChange","uuids","removeUuid","intl","map","obj","index","k","fi","fv","newvalue","v","i","formatMessage","filter","useScrollToBottomAutomatically","modalContentRef","stateValue","useEffect","current","scrollIntoView","block","ModalObjectListForm","props","open","title","className","onSave","onCancel","setStateValue","setUuids","useRef","createEmpty","useCallback","newUuids","splice","addUuid","jsx","length","schemaTitle","ObjectListWidget","onBlur","description","placeholder","setOpen","isJustChanged","setIsJustChanged","val","type","target","undefined","help","propTypes","string","isRequired","object","errors","arrayOf","any","array","func","required","bool","defaultProps"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-object-widget/src/Widget/ObjectListWidget.jsx"],"sourcesContent":["import { Input, Button, Grid, Modal, Segment } from 'semantic-ui-react';\nimport React, { useState } from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { Icon as VoltoIcon, FormFieldWrapper } from '@plone/volto/components';\n\nimport penSVG from '@plone/volto/icons/pen.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport deleteSVG from '@plone/volto/icons/delete.svg';\nimport addSVG from '@plone/volto/icons/add.svg';\n\nimport { ObjectWidget } from '@plone/volto/components';\n\nimport cx from 'classnames';\n\nimport { v4 as uuid } from 'uuid';\n\nimport './style.css';\n\n// TODO: make the ObjectWidget and ObjectListWidget (at least keyboard)\n// accessible (e.g. Esc should close the Modal)\n// - see: https://github.com/Semantic-Org/Semantic-UI/issues/5053\n\n/**\n * The localizable string messages.\n */\nconst messages = defineMessages({\n  add: {\n    id: 'Add {schemaTitle}',\n    defaultMessage: 'Add {schemaTitle}',\n  },\n  save: {\n    id: 'Save',\n    defaultMessage: 'Save',\n  },\n  delete: {\n    id: 'Delete',\n    defaultMessage: 'Delete',\n  },\n  cancel: {\n    id: 'Cancel',\n    defaultMessage: 'Cancel',\n  },\n  edit: {\n    id: 'Edit',\n    defaultMessage: 'Edit',\n  },\n  count: {\n    id: '{count} x {type}',\n    defaultMessage: '{count} x {type}',\n  },\n  emptyListHint: {\n    id: 'Click the Add button below to add an item to this empty list.',\n    defaultMessage:\n      'Click the Add button below to add an item to this empty list.',\n  },\n});\n\n/**\n * Displays an internationalized list of objects of the same schema, each of\n * them having a Delete button on its right. In future this might also allow\n * filtering, reordering etc.\n * @param {string} id\n * @param {array} value\n * @param {object} schema\n * @param {function} onChange\n * @param {string[]} uuids An array of IDs that are associated to each object in\n * `value` with the same index.\n * @param {function} removeUuid A function that removes the ID passed to it from\n * the lifted-up state data about IDs.\n */\nexport const FlatObjectList = ({\n  id,\n  value = [],\n  schema,\n  onChange,\n  uuids,\n  removeUuid,\n}) => {\n  const intl = useIntl();\n\n  return (\n    <div className=\"objectlist-widget-content\">\n      {value.map((obj, index) => {\n        // here we are using an ID instead of index for React key prop\n        // because, in future, the items might be filterable or reorderable\n        const k = uuids ? uuids[index] : index;\n        return (\n          <Grid key={k}>\n            <Grid.Column width={11}>\n              <Segment>\n                <ObjectWidget\n                  id={`${id}-${k}`}\n                  key={k}\n                  schema={schema}\n                  value={obj}\n                  onChange={(fi, fv) => {\n                    const newvalue = value.map((v, i) =>\n                      i !== index ? v : fv,\n                    );\n                    onChange(id, newvalue);\n                  }}\n                />\n              </Segment>\n            </Grid.Column>\n            <Grid.Column width={1}>\n              <Button.Group>\n                <Button\n                  basic\n                  circular\n                  size=\"mini\"\n                  title={intl.formatMessage(messages.delete)}\n                  aria-label={intl.formatMessage(messages.delete)}\n                  onClick={() => {\n                    onChange(\n                      id,\n                      value.filter((v, i) => i !== index),\n                      () => {\n                        if (removeUuid) {\n                          removeUuid(index);\n                        }\n                      },\n                    );\n                  }}\n                >\n                  <VoltoIcon name={deleteSVG} size=\"18px\" />\n                </Button>\n              </Button.Group>\n            </Grid.Column>\n          </Grid>\n        );\n      })}\n    </div>\n  );\n};\n\n/**\n * Custom React hook.\n * @param {React.RefObject} modalContentRef Ref of the element in which to\n * scroll to bottom automatically.\n * @param {object[]} stateValue Scroll automatically also when this parameter's\n * reference changes.\n */\nexport const useScrollToBottomAutomatically = (modalContentRef, stateValue) => {\n  React.useEffect(() => {\n    if (modalContentRef.current && modalContentRef.current.scrollIntoView) {\n      modalContentRef.current.scrollIntoView({\n        block: 'end',\n      });\n    }\n  }, [modalContentRef, stateValue]);\n};\n\n/**\n * Internationalized component which renders a modal form with an object list.\n * It retains internal state about the current value of the fields, and a\n * separate array of UUIDs, one for each object. Scrolls to bottom automatically\n * when adding a new object to the list or opening the form.\n * @param {boolean} open\n * @param {string} title\n * @param {string} className\n * @param {function} onSave\n * @param {function} onCancel\n * @param {object} schema\n * @param {object[]} value\n * @param {string} id\n */\nexport const ModalObjectListForm = (props) => {\n  const {\n    open,\n    title,\n    className,\n    onSave,\n    onCancel,\n    schema,\n    value = [],\n    id,\n  } = props;\n\n  const intl = useIntl();\n\n  const [stateValue, setStateValue] = useState(value);\n  const [uuids, setUuids] = React.useState(value.map(() => uuid()));\n  const modalContentRef = React.useRef(null);\n\n  useScrollToBottomAutomatically(modalContentRef, stateValue);\n\n  const createEmpty = React.useCallback(() => {\n    return {};\n  }, []);\n\n  const removeUuid = React.useCallback(\n    (index) => {\n      const newUuids = [...uuids].splice(index, 1);\n      setUuids(newUuids);\n    },\n    [uuids],\n  );\n\n  const addUuid = React.useCallback(() => {\n    setUuids([...uuids, uuid()]);\n  }, [uuids]);\n\n  // Update again the form state with passed-down value, in case it has been\n  // changed outside this component\n  React.useEffect(() => {\n    setStateValue(value);\n  }, [value]);\n\n  let jsx = (\n    <Modal open={open} className={className}>\n      <Modal.Header>{title}</Modal.Header>\n      <Modal.Content scrolling>\n        <div ref={modalContentRef} data-testid=\"modal-content\">\n          {stateValue.length > 0 ? (\n            <FlatObjectList\n              id={id}\n              value={stateValue}\n              schema={schema}\n              onChange={(id, v) => {\n                setStateValue(v);\n              }}\n              uuids={uuids}\n              removeUuid={removeUuid}\n            />\n          ) : (\n            intl.formatMessage(messages.emptyListHint)\n          )}\n        </div>\n      </Modal.Content>\n      <Modal.Actions>\n        <Button\n          primary\n          basic\n          circular\n          floated=\"left\"\n          size=\"big\"\n          className=\"icon with-middle-aligned-icon\"\n          title={intl.formatMessage(messages.add, {\n            schemaTitle: schema.title,\n          })}\n          aria-label={intl.formatMessage(messages.add, {\n            schemaTitle: schema.title,\n          })}\n          onClick={() => {\n            addUuid();\n            setStateValue([...stateValue, createEmpty()]);\n          }}\n        >\n          <VoltoIcon size=\"1.5rem\" name={addSVG} />\n          Add {schema.title}\n        </Button>\n\n        <Button\n          basic\n          circular\n          primary\n          floated=\"right\"\n          icon=\"arrow right\"\n          title={intl.formatMessage(messages.save)}\n          aria-label={intl.formatMessage(messages.save)}\n          size=\"big\"\n          onClick={() => {\n            onSave(id, stateValue);\n          }}\n        />\n        <Button\n          basic\n          circular\n          secondary\n          icon=\"remove\"\n          title={intl.formatMessage(messages.cancel)}\n          aria-label={intl.formatMessage(messages.cancel)}\n          floated=\"right\"\n          size=\"big\"\n          onClick={() => {\n            setStateValue([...value]);\n            onCancel();\n          }}\n        />\n      </Modal.Actions>\n    </Modal>\n  );\n\n  return jsx;\n};\n\n/**\n * Shows a field that is backed by a modal form which shows a list of objects of\n * a specified schema. Shows a visual cue after saving the data in the form to\n * highlight the field whose value was possibly changed.\n * @param {string} id\n * @param {object[]} value\n * @param {object} schema\n * @param {function} onChange\n * @param {boolean} required\n * @param {string[]} error\n * @param {string} title\n * @param {string} description\n */\nexport const ObjectListWidget = (props) => {\n  const {\n    id,\n    value = [],\n    schema,\n    onChange,\n    onBlur,\n    title,\n    description,\n    placeholder,\n  } = props;\n\n  const intl = useIntl();\n\n  const [open, setOpen] = useState(false);\n  const [isJustChanged, setIsJustChanged] = useState(false);\n\n  return (\n    <>\n      <ModalObjectListForm\n        id={id}\n        schema={schema}\n        title={title}\n        value={value}\n        open={open}\n        onSave={(id, val) => {\n          onChange(id, val);\n          setOpen(false);\n          setIsJustChanged(true);\n        }}\n        onCancel={() => {\n          setOpen(false);\n        }}\n      />\n      <FormFieldWrapper {...props} className=\"text\">\n        <Input\n          id={`field-${id}`}\n          name={id}\n          disabled={false}\n          value={intl.formatMessage(messages.count, {\n            count: value.length,\n            type: schema.title,\n          })}\n          placeholder={placeholder}\n          onChange={({ target }) =>\n            onChange(id, target.value === '' ? undefined : target.value)\n          }\n          onBlur={onBlur}\n          onClick={() => {\n            setIsJustChanged(false);\n            setOpen(true);\n          }}\n          className={cx('text', {\n            help: description,\n            'field-just-changed': isJustChanged,\n          })}\n        >\n          <input type=\"text\" disabled />\n          <Button\n            aria-label={intl.formatMessage(messages.edit)}\n            title={intl.formatMessage(messages.edit)}\n            className=\"item ui noborder button\"\n            data-testid=\"big-pen-button\"\n            onClick={() => {\n              setIsJustChanged(false);\n              setOpen(true);\n            }}\n          >\n            <VoltoIcon name={penSVG} size=\"18px\" color=\"blue\" />\n          </Button>\n          <Button\n            aria-label={intl.formatMessage(messages.delete)}\n            title={intl.formatMessage(messages.delete)}\n            className=\"item ui noborder button\"\n            onClick={() => {\n              onChange(id, []);\n            }}\n          >\n            <VoltoIcon name={clearSVG} size=\"18px\" color=\"red\" />\n          </Button>\n        </Input>\n      </FormFieldWrapper>\n    </>\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nObjectListWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  schema: PropTypes.object.isRequired,\n  errors: PropTypes.arrayOf(PropTypes.any),\n  value: PropTypes.array,\n  onChange: PropTypes.func.isRequired,\n  required: PropTypes.bool.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nObjectListWidget.defaultProps = {\n  value: [],\n};\n\nexport default ObjectListWidget;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Add {schemaTitle}","defaultMessage":"Add {schemaTitle}"},{"id":"Save","defaultMessage":"Save"},{"id":"Delete","defaultMessage":"Delete"},{"id":"Cancel","defaultMessage":"Cancel"},{"id":"Edit","defaultMessage":"Edit"},{"id":"{count} x {type}","defaultMessage":"{count} x {type}"},{"id":"Click the Add button below to add an item to this empty list.","defaultMessage":"Click the Add button below to add an item to this empty list."}]}},"sourceType":"module","externalDependencies":[]}