{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-block-style/src/Widgets/Align.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n/**\n * AlignWidget component.\n * To benefit from styling integration, use with a field named 'align'\n * @module components/manage/Widgets/AlignWidget\n */\n\nimport React from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { FormFieldWrapper } from '@plone/volto/components';\nimport { Icon } from '@plone/volto/components';\nimport { Button } from 'semantic-ui-react';\nimport imageLeftSVG from '@plone/volto/icons/image-left.svg';\nimport imageRightSVG from '@plone/volto/icons/image-right.svg';\nimport imageFitSVG from '@plone/volto/icons/image-fit.svg';\nimport imageNarrowSVG from '@eeacms/volto-block-style/icons/image-narrow.svg';\nimport imageWideSVG from '@plone/volto/icons/image-wide.svg';\nimport imageFullSVG from '@plone/volto/icons/image-full.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nexport const messages = defineMessages({\n  left: {\n    \"id\": \"Left\",\n    \"defaultMessage\": \"Left\"\n  },\n  right: {\n    \"id\": \"Right\",\n    \"defaultMessage\": \"Right\"\n  },\n  center: {\n    \"id\": \"Center\",\n    \"defaultMessage\": \"Center\"\n  },\n  narrow: {\n    \"id\": \"Narrow\",\n    \"defaultMessage\": \"Narrow\"\n  },\n  wide: {\n    \"id\": \"Wide\",\n    \"defaultMessage\": \"Wide\"\n  },\n  full: {\n    \"id\": \"Full\",\n    \"defaultMessage\": \"Full\"\n  },\n  '': {\n    \"id\": \"Clear selection\",\n    \"defaultMessage\": \"Clear selection\"\n  }\n});\nexport const defaultActionsInfo = ({\n  intl\n}) => ({\n  left: [imageLeftSVG, intl.formatMessage(messages.left)],\n  right: [imageRightSVG, intl.formatMessage(messages.right)],\n  center: [imageFitSVG, intl.formatMessage(messages.center)],\n  narrow: [imageNarrowSVG, intl.formatMessage(messages.narrow)],\n  wide: [imageWideSVG, intl.formatMessage(messages.wide)],\n  full: [imageFullSVG, intl.formatMessage(messages.full)],\n  '': [clearSVG, intl.formatMessage(messages[''])]\n});\nconst AlignWidget = props => {\n  const intl = useIntl();\n  const {\n    id,\n    onChange,\n    actions = ['left', 'right', 'center', 'full'],\n    actionsInfoMap = {},\n    value\n  } = props;\n  React.useEffect(() => {\n    if (!props.value && props.default) {\n      props.onChange(props.id, props.default);\n    }\n  });\n\n  // add clear selection button to the actions mapping if it's not already present\n  if (actions[actions.length - 1] !== '') {\n    actions.push('');\n  }\n  const actionsInfo = _objectSpread(_objectSpread({}, defaultActionsInfo({\n    intl\n  })), actionsInfoMap);\n  return __jsx(FormFieldWrapper, _extends({}, props, {\n    className: \"align-widget\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }), __jsx(\"div\", {\n    className: \"align-buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }, actions.map(action => __jsx(Button.Group, {\n    key: action,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }\n  }, __jsx(Button, {\n    icon: true,\n    basic: true,\n    \"aria-label\": actionsInfo[action][1],\n    onClick: () => onChange(id, action),\n    active: action === 'center' && !value || value === action,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }, __jsx(Icon, {\n    name: actionsInfo[action][0],\n    title: actionsInfo[action][1] || action,\n    size: \"24px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 15\n    }\n  }))))));\n};\nexport default AlignWidget;","map":{"version":3,"names":["React","defineMessages","useIntl","FormFieldWrapper","Icon","Button","imageLeftSVG","imageRightSVG","imageFitSVG","imageNarrowSVG","imageWideSVG","imageFullSVG","clearSVG","messages","left","right","center","narrow","wide","full","defaultActionsInfo","intl","formatMessage","AlignWidget","props","id","onChange","actions","actionsInfoMap","value","useEffect","default","length","push","actionsInfo","map","action"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-block-style/src/Widgets/Align.jsx"],"sourcesContent":["/**\n * AlignWidget component.\n * To benefit from styling integration, use with a field named 'align'\n * @module components/manage/Widgets/AlignWidget\n */\n\nimport React from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { FormFieldWrapper } from '@plone/volto/components';\nimport { Icon } from '@plone/volto/components';\nimport { Button } from 'semantic-ui-react';\nimport imageLeftSVG from '@plone/volto/icons/image-left.svg';\nimport imageRightSVG from '@plone/volto/icons/image-right.svg';\nimport imageFitSVG from '@plone/volto/icons/image-fit.svg';\nimport imageNarrowSVG from '@eeacms/volto-block-style/icons/image-narrow.svg';\nimport imageWideSVG from '@plone/volto/icons/image-wide.svg';\nimport imageFullSVG from '@plone/volto/icons/image-full.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\n\nexport const messages = defineMessages({\n  left: {\n    id: 'Left',\n    defaultMessage: 'Left',\n  },\n  right: {\n    id: 'Right',\n    defaultMessage: 'Right',\n  },\n  center: {\n    id: 'Center',\n    defaultMessage: 'Center',\n  },\n  narrow: {\n    id: 'Narrow',\n    defaultMessage: 'Narrow',\n  },\n  wide: {\n    id: 'Wide',\n    defaultMessage: 'Wide',\n  },\n  full: {\n    id: 'Full',\n    defaultMessage: 'Full',\n  },\n  '': {\n    id: 'Clear selection',\n    defaultMessage: 'Clear selection',\n  },\n});\n\nexport const defaultActionsInfo = ({ intl }) => ({\n  left: [imageLeftSVG, intl.formatMessage(messages.left)],\n  right: [imageRightSVG, intl.formatMessage(messages.right)],\n  center: [imageFitSVG, intl.formatMessage(messages.center)],\n  narrow: [imageNarrowSVG, intl.formatMessage(messages.narrow)],\n  wide: [imageWideSVG, intl.formatMessage(messages.wide)],\n  full: [imageFullSVG, intl.formatMessage(messages.full)],\n  '': [clearSVG, intl.formatMessage(messages[''])],\n});\n\nconst AlignWidget = (props) => {\n  const intl = useIntl();\n\n  const {\n    id,\n    onChange,\n    actions = ['left', 'right', 'center', 'full'],\n    actionsInfoMap = {},\n    value,\n  } = props;\n\n  React.useEffect(() => {\n    if (!props.value && props.default) {\n      props.onChange(props.id, props.default);\n    }\n  });\n\n  // add clear selection button to the actions mapping if it's not already present\n  if (actions[actions.length - 1] !== '') {\n    actions.push('');\n  }\n\n  const actionsInfo = {\n    ...defaultActionsInfo({ intl }),\n    ...actionsInfoMap,\n  };\n\n  return (\n    <FormFieldWrapper {...props} className=\"align-widget\">\n      <div className=\"align-buttons\">\n        {actions.map((action) => (\n          <Button.Group key={action}>\n            <Button\n              icon\n              basic\n              aria-label={actionsInfo[action][1]}\n              onClick={() => onChange(id, action)}\n              active={(action === 'center' && !value) || value === action}\n            >\n              <Icon\n                name={actionsInfo[action][0]}\n                title={actionsInfo[action][1] || action}\n                size=\"24px\"\n              />\n            </Button>\n          </Button.Group>\n        ))}\n      </div>\n    </FormFieldWrapper>\n  );\n};\n\nexport default AlignWidget;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Left","defaultMessage":"Left"},{"id":"Right","defaultMessage":"Right"},{"id":"Center","defaultMessage":"Center"},{"id":"Narrow","defaultMessage":"Narrow"},{"id":"Wide","defaultMessage":"Wide"},{"id":"Full","defaultMessage":"Full"},{"id":"Clear selection","defaultMessage":"Clear selection"}]}},"sourceType":"module","externalDependencies":[]}