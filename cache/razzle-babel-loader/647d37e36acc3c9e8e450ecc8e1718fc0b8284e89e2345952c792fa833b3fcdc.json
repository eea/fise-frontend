{"ast":null,"code":"import _classCallCheck from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/theme/Logout/Logout.jsx\";\nvar __jsx = React.createElement;\n/**\n * Login container.\n * @module components/theme/Logout/Logout\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport qs from 'query-string';\nimport { Login } from '@plone/volto/components';\nimport { logout, purgeMessages } from '@plone/volto/actions';\nimport { toast } from 'react-toastify';\nimport { Toast } from '@plone/volto/components';\nvar messages = defineMessages({\n  loggedOut: {\n    \"id\": \"Logged out\",\n    \"defaultMessage\": \"Logged out\"\n  },\n  loggedOutContent: {\n    \"id\": \"You have been logged out from the site.\",\n    \"defaultMessage\": \"You have been logged out from the site.\"\n  }\n});\n\n/**\n * Logout class.\n * @class Logout\n * @extends Component\n */\nvar Logout = /*#__PURE__*/function (_Component) {\n  _inherits(Logout, _Component);\n  var _super = _createSuper(Logout);\n  function Logout() {\n    _classCallCheck(this, Logout);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Logout, [{\n    key: \"componentDidMount\",\n    value:\n    /**\n     * Property types.\n     * @property {Object} propTypes Property types.\n     * @static\n     */\n\n    /**\n     * Default properties.\n     * @property {Object} defaultProps Default properties.\n     * @static\n     */\n\n    function componentDidMount() {\n      this.props.logout();\n      this.props.purgeMessages();\n    }\n\n    /**\n     * Component will receive props\n     * @method componentWillReceiveProps\n     * @param {Object} nextProps Next properties\n     * @returns {undefined}\n     */\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      if (!nextProps.token) {\n        this.props.history.replace(this.props.returnUrl || '/');\n        if (!toast.isActive('loggedOut')) {\n          toast.info(__jsx(Toast, {\n            info: true,\n            title: this.props.intl.formatMessage(messages.loggedOut),\n            content: this.props.intl.formatMessage(messages.loggedOutContent),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 11\n            }\n          }), {\n            autoClose: false,\n            toastId: 'loggedOut'\n          });\n        }\n      }\n    }\n\n    /**\n     * Render method.\n     * @method render\n     * @returns {string} Markup for the component.\n     */\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(Login, {\n        location: {\n          query: this.props.location.query\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 12\n        }\n      });\n    }\n  }]);\n  return Logout;\n}(Component);\n_defineProperty(Logout, \"propTypes\", {\n  logout: PropTypes.func.isRequired,\n  purgeMessages: PropTypes.func.isRequired,\n  query: PropTypes.shape({\n    return_url: PropTypes.string\n  })\n});\n_defineProperty(Logout, \"defaultProps\", {\n  query: null\n});\nexport default compose(injectIntl, connect(function (state, props) {\n  return {\n    query: qs.parse(props.location.search),\n    token: state.userSession.token,\n    returnUrl: qs.parse(props.location.search).return_url || props.location.pathname.replace(/\\/login\\/?$/, '').replace(/\\/logout\\/?$/, '') || '/'\n  };\n}, {\n  logout: logout,\n  purgeMessages: purgeMessages\n}))(Logout);","map":{"version":3,"names":["React","Component","PropTypes","connect","compose","defineMessages","injectIntl","qs","Login","logout","purgeMessages","toast","Toast","messages","loggedOut","loggedOutContent","Logout","props","nextProps","token","history","replace","returnUrl","isActive","info","intl","formatMessage","autoClose","toastId","query","location","func","isRequired","shape","return_url","string","state","parse","search","userSession","pathname"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/theme/Logout/Logout.jsx"],"sourcesContent":["/**\n * Login container.\n * @module components/theme/Logout/Logout\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport qs from 'query-string';\n\nimport { Login } from '@plone/volto/components';\nimport { logout, purgeMessages } from '@plone/volto/actions';\nimport { toast } from 'react-toastify';\nimport { Toast } from '@plone/volto/components';\n\nconst messages = defineMessages({\n  loggedOut: {\n    id: 'Logged out',\n    defaultMessage: 'Logged out',\n  },\n  loggedOutContent: {\n    id: 'You have been logged out from the site.',\n    defaultMessage: 'You have been logged out from the site.',\n  },\n});\n\n/**\n * Logout class.\n * @class Logout\n * @extends Component\n */\nclass Logout extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    logout: PropTypes.func.isRequired,\n    purgeMessages: PropTypes.func.isRequired,\n    query: PropTypes.shape({\n      return_url: PropTypes.string,\n    }),\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    query: null,\n  };\n\n  componentDidMount() {\n    this.props.logout();\n    this.props.purgeMessages();\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (!nextProps.token) {\n      this.props.history.replace(this.props.returnUrl || '/');\n      if (!toast.isActive('loggedOut')) {\n        toast.info(\n          <Toast\n            info\n            title={this.props.intl.formatMessage(messages.loggedOut)}\n            content={this.props.intl.formatMessage(messages.loggedOutContent)}\n          />,\n          { autoClose: false, toastId: 'loggedOut' },\n        );\n      }\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return <Login location={{ query: this.props.location.query }} />;\n  }\n}\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      query: qs.parse(props.location.search),\n      token: state.userSession.token,\n      returnUrl:\n        qs.parse(props.location.search).return_url ||\n        props.location.pathname\n          .replace(/\\/login\\/?$/, '')\n          .replace(/\\/logout\\/?$/, '') ||\n        '/',\n    }),\n    { logout, purgeMessages },\n  ),\n)(Logout);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Logged out","defaultMessage":"Logged out"},{"id":"You have been logged out from the site.","defaultMessage":"You have been logged out from the site."}]}},"sourceType":"module","externalDependencies":[]}