{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n/**\n * Trancsaction reducer.\n * @module reducers/transactions/transactions\n */\nimport { GET_TRANSACTIONS, REVERT_TRANSACTIONS } from '../../constants/ActionTypes';\nconst initialState = {\n  transactions_recieved: [],\n  get: {\n    error: null,\n    loaded: false,\n    loading: false\n  },\n  revert: {\n    error: undefined,\n    loaded: false,\n    loading: false\n  }\n};\n\n/**\n * Get request key\n * @function getRequestKey\n * @param {string} actionType Action type.\n * @returns {string} Request key.\n */\nfunction getRequestKey(actionType) {\n  return actionType.split('_')[0].toLowerCase();\n}\n\n/**\n * Transaction reducer.\n * @function transactions\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function transactions(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${REVERT_TRANSACTIONS}_PENDING`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [getRequestKey(action.type)]: {\n          loading: true,\n          loaded: false,\n          error: undefined\n        }\n      });\n    case `${GET_TRANSACTIONS}_PENDING`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [getRequestKey(action.type)]: {\n          loading: true,\n          loaded: false,\n          error: null\n        }\n      });\n    case `${GET_TRANSACTIONS}_SUCCESS`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        transactions_recieved: action.result,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null\n        }\n      });\n    case `${REVERT_TRANSACTIONS}_SUCCESS`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null\n        }\n      });\n    case `${GET_TRANSACTIONS}_FAIL`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        transactions_recieved: [],\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error\n        }\n      });\n    case `${REVERT_TRANSACTIONS}_FAIL`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error\n        }\n      });\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["GET_TRANSACTIONS","REVERT_TRANSACTIONS","initialState","transactions_recieved","get","error","loaded","loading","revert","undefined","getRequestKey","actionType","split","toLowerCase","transactions","state","action","type","result"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/reducers/transactions/transactions.js"],"sourcesContent":["/**\n * Trancsaction reducer.\n * @module reducers/transactions/transactions\n */\nimport {\n  GET_TRANSACTIONS,\n  REVERT_TRANSACTIONS,\n} from '../../constants/ActionTypes';\n\nconst initialState = {\n  transactions_recieved: [],\n  get: {\n    error: null,\n    loaded: false,\n    loading: false,\n  },\n  revert: {\n    error: undefined,\n    loaded: false,\n    loading: false,\n  },\n};\n\n/**\n * Get request key\n * @function getRequestKey\n * @param {string} actionType Action type.\n * @returns {string} Request key.\n */\nfunction getRequestKey(actionType) {\n  return actionType.split('_')[0].toLowerCase();\n}\n\n/**\n * Transaction reducer.\n * @function transactions\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function transactions(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${REVERT_TRANSACTIONS}_PENDING`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: true,\n          loaded: false,\n          error: undefined,\n        },\n      };\n\n    case `${GET_TRANSACTIONS}_PENDING`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: true,\n          loaded: false,\n          error: null,\n        },\n      };\n\n    case `${GET_TRANSACTIONS}_SUCCESS`:\n      return {\n        ...state,\n        transactions_recieved: action.result,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n\n    case `${REVERT_TRANSACTIONS}_SUCCESS`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n\n    case `${GET_TRANSACTIONS}_FAIL`:\n      return {\n        ...state,\n        transactions_recieved: [],\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n\n    case `${REVERT_TRANSACTIONS}_FAIL`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n\n    default:\n      return state;\n  }\n}\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA,SACEA,gBAAgB,EAChBC,mBAAmB,QACd,6BAA6B;AAEpC,MAAMC,YAAY,GAAG;EACnBC,qBAAqB,EAAE,EAAE;EACzBC,GAAG,EAAE;IACHC,KAAK,EAAE,IAAI;IACXC,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;EACX,CAAC;EACDC,MAAM,EAAE;IACNH,KAAK,EAAEI,SAAS;IAChBH,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;EACX;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,aAAa,CAACC,UAAU,EAAE;EACjC,OAAOA,UAAU,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACC,WAAW,EAAE;AAC/C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,YAAY,CAACC,KAAK,GAAGb,YAAY,EAAEc,MAAM,GAAG,CAAC,CAAC,EAAE;EACtE,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAM,GAAEhB,mBAAoB,UAAS;MACnC,uCACKc,KAAK;QACR,CAACL,aAAa,CAACM,MAAM,CAACC,IAAI,CAAC,GAAG;UAC5BV,OAAO,EAAE,IAAI;UACbD,MAAM,EAAE,KAAK;UACbD,KAAK,EAAEI;QACT;MAAC;IAGL,KAAM,GAAET,gBAAiB,UAAS;MAChC,uCACKe,KAAK;QACR,CAACL,aAAa,CAACM,MAAM,CAACC,IAAI,CAAC,GAAG;UAC5BV,OAAO,EAAE,IAAI;UACbD,MAAM,EAAE,KAAK;UACbD,KAAK,EAAE;QACT;MAAC;IAGL,KAAM,GAAEL,gBAAiB,UAAS;MAChC,uCACKe,KAAK;QACRZ,qBAAqB,EAAEa,MAAM,CAACE,MAAM;QACpC,CAACR,aAAa,CAACM,MAAM,CAACC,IAAI,CAAC,GAAG;UAC5BV,OAAO,EAAE,KAAK;UACdD,MAAM,EAAE,IAAI;UACZD,KAAK,EAAE;QACT;MAAC;IAGL,KAAM,GAAEJ,mBAAoB,UAAS;MACnC,uCACKc,KAAK;QACR,CAACL,aAAa,CAACM,MAAM,CAACC,IAAI,CAAC,GAAG;UAC5BV,OAAO,EAAE,KAAK;UACdD,MAAM,EAAE,IAAI;UACZD,KAAK,EAAE;QACT;MAAC;IAGL,KAAM,GAAEL,gBAAiB,OAAM;MAC7B,uCACKe,KAAK;QACRZ,qBAAqB,EAAE,EAAE;QACzB,CAACO,aAAa,CAACM,MAAM,CAACC,IAAI,CAAC,GAAG;UAC5BV,OAAO,EAAE,KAAK;UACdD,MAAM,EAAE,KAAK;UACbD,KAAK,EAAEW,MAAM,CAACX;QAChB;MAAC;IAGL,KAAM,GAAEJ,mBAAoB,OAAM;MAChC,uCACKc,KAAK;QACR,CAACL,aAAa,CAACM,MAAM,CAACC,IAAI,CAAC,GAAG;UAC5BV,OAAO,EAAE,KAAK;UACdD,MAAM,EAAE,KAAK;UACbD,KAAK,EAAEW,MAAM,CAACX;QAChB;MAAC;IAGL;MACE,OAAOU,KAAK;EAAC;AAEnB"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}