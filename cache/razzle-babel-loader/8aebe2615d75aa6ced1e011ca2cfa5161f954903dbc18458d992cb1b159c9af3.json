{"ast":null,"code":"import _map from \"lodash/map\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-forests-theme/src/components/theme/DefaultViewWide/DefaultViewWide.jsx\";\nvar __jsx = React.createElement;\n/**\n * Document view component.\n * @module components/theme/View/DefaultViewWide\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from '@plone/volto/helpers';\nimport { injectIntl } from 'react-intl'; // defineMessages,\nimport { Grid } from 'semantic-ui-react';\nimport { BodyClass } from '@plone/volto/helpers';\nimport { Container, Image } from 'semantic-ui-react';\nimport config from '@plone/volto/registry';\nimport { getBlocksFieldname, getBlocksLayoutFieldname, hasBlocksData, getBaseUrl } from '@plone/volto/helpers';\n// import { samePath } from 'volto-mosaic/helpers';\nimport { connect } from 'react-redux';\n// import Spinner from 'volto-mosaic/components/theme/Spinner';\n\n// const messages = defineMessages({\n//   unknownBlock: {\n//     id: 'Unknown Block',\n//     defaultMessage: 'Unknown Block {block}',\n//   },\n// });\n\n/**\n * Component to display the default view.\n * @function DefaultViewWide\n * @param {Object} content Content object.\n * @returns {string} Markup of the component.\n */\nconst DefaultViewWide = props => {\n  const {\n    content\n  } = props;\n  const {\n    location\n  } = props;\n  const blocksFieldname = getBlocksFieldname(content);\n  const blocksLayoutFieldname = getBlocksLayoutFieldname(content);\n\n  // const currentUrl = content?.['@id'];\n  // const shouldRenderRoutes =\n  //   typeof currentUrl !== 'undefined' && samePath(currentUrl, props.pathname)\n  //     ? true\n  //     : false;\n  //\n  // if (!shouldRenderRoutes) return <Spinner />;\n  return __jsx(React.Fragment, null, __jsx(BodyClass, {\n    className: `document_wide_view`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }), __jsx(Grid, {\n    columns: \"equal\",\n    className: \"zero-margin\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, hasBlocksData(content) ? __jsx(\"div\", {\n    id: \"page-document\",\n    className: \"ui container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }, __jsx(Helmet, {\n    title: content.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }), _map(content[blocksLayoutFieldname].items, block => {\n    var _config$blocks$blocks, _content$blocksFieldn, _content$blocksFieldn2;\n    const Block = ((_config$blocks$blocks = config.blocks.blocksConfig[(_content$blocksFieldn = content[blocksFieldname]) === null || _content$blocksFieldn === void 0 ? void 0 : (_content$blocksFieldn2 = _content$blocksFieldn[block]) === null || _content$blocksFieldn2 === void 0 ? void 0 : _content$blocksFieldn2['@type']]) === null || _config$blocks$blocks === void 0 ? void 0 : _config$blocks$blocks['view']) || null;\n    return Block !== null && content[blocksFieldname][block]['@type'] !== 'title' ? __jsx(Block, {\n      key: block,\n      id: block,\n      properties: content,\n      data: content[blocksFieldname][block],\n      path: getBaseUrl((location === null || location === void 0 ? void 0 : location.pathname) || ''),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }\n    }) : '';\n  }), __jsx(\"div\", {\n    id: \"forest-metadata-slot\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, '')) : __jsx(Container, {\n    id: \"page-document\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }\n  }, content.image && __jsx(Image, {\n    className: \"document-image\",\n    src: content.image.scales.thumb.download,\n    floated: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 15\n    }\n  }), content.remoteUrl && __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 15\n    }\n  }, \"The link address is:\", __jsx(\"a\", {\n    href: content.remoteUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }, content.remoteUrl)), content.text && __jsx(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: content.text.data.replace(/a href=\"([^\"]*\\.[^\"]*)\"/g, `a href=\"${config.settings.apiPath}$1/download/file\"`)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 15\n    }\n  }), __jsx(\"div\", {\n    id: \"forest-metadata-slot\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }\n  }, ''))));\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nDefaultViewWide.propTypes = {\n  /**\n   * Content of the object\n   */\n  content: PropTypes.shape({\n    /**\n     * Title of the object\n     */\n    title: PropTypes.string,\n    /**\n     * Description of the object\n     */\n    description: PropTypes.string,\n    /**\n     * Text of the object\n     */\n    text: PropTypes.shape({\n      /**\n       * Data of the text of the object\n       */\n      data: PropTypes.string\n    })\n  }).isRequired\n};\n\n// export default injectIntl(DefaultViewWide);\n\nexport default connect((state, props) => ({\n  pathname: state.router.location.pathname //props.location.pathname,\n}))(injectIntl(DefaultViewWide));","map":{"version":3,"names":["React","PropTypes","Helmet","injectIntl","Grid","BodyClass","Container","Image","config","getBlocksFieldname","getBlocksLayoutFieldname","hasBlocksData","getBaseUrl","connect","DefaultViewWide","props","content","location","blocksFieldname","blocksLayoutFieldname","title","items","block","Block","blocks","blocksConfig","pathname","image","scales","thumb","download","remoteUrl","text","__html","data","replace","settings","apiPath","propTypes","shape","string","description","isRequired","state","router"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-forests-theme/src/components/theme/DefaultViewWide/DefaultViewWide.jsx"],"sourcesContent":["/**\n * Document view component.\n * @module components/theme/View/DefaultViewWide\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from '@plone/volto/helpers';\nimport { injectIntl } from 'react-intl'; // defineMessages,\nimport { Grid } from 'semantic-ui-react';\nimport { BodyClass } from '@plone/volto/helpers';\n\nimport { Container, Image } from 'semantic-ui-react';\nimport { map } from 'lodash';\n\nimport config from '@plone/volto/registry';\n\nimport {\n  getBlocksFieldname,\n  getBlocksLayoutFieldname,\n  hasBlocksData,\n  getBaseUrl,\n} from '@plone/volto/helpers';\n// import { samePath } from 'volto-mosaic/helpers';\nimport { connect } from 'react-redux';\n// import Spinner from 'volto-mosaic/components/theme/Spinner';\n\n// const messages = defineMessages({\n//   unknownBlock: {\n//     id: 'Unknown Block',\n//     defaultMessage: 'Unknown Block {block}',\n//   },\n// });\n\n/**\n * Component to display the default view.\n * @function DefaultViewWide\n * @param {Object} content Content object.\n * @returns {string} Markup of the component.\n */\nconst DefaultViewWide = (props) => {\n  const { content } = props;\n  const { location } = props;\n  const blocksFieldname = getBlocksFieldname(content);\n  const blocksLayoutFieldname = getBlocksLayoutFieldname(content);\n\n  // const currentUrl = content?.['@id'];\n  // const shouldRenderRoutes =\n  //   typeof currentUrl !== 'undefined' && samePath(currentUrl, props.pathname)\n  //     ? true\n  //     : false;\n  //\n  // if (!shouldRenderRoutes) return <Spinner />;\n  return (\n    <>\n      <BodyClass className={`document_wide_view`} />\n\n      <Grid columns=\"equal\" className=\"zero-margin\">\n        {hasBlocksData(content) ? (\n          <div id=\"page-document\" className=\"ui container\">\n            <Helmet title={content.title} />\n            {map(content[blocksLayoutFieldname].items, (block) => {\n              const Block =\n                config.blocks.blocksConfig[\n                  content[blocksFieldname]?.[block]?.['@type']\n                ]?.['view'] || null;\n              return Block !== null &&\n                content[blocksFieldname][block]['@type'] !== 'title' ? (\n                <Block\n                  key={block}\n                  id={block}\n                  properties={content}\n                  data={content[blocksFieldname][block]}\n                  path={getBaseUrl(location?.pathname || '')}\n                />\n              ) : (\n                ''\n              );\n            })}\n            <div id=\"forest-metadata-slot\">{''}</div>\n          </div>\n        ) : (\n          <Container id=\"page-document\">\n            {content.image && (\n              <Image\n                className=\"document-image\"\n                src={content.image.scales.thumb.download}\n                floated=\"right\"\n              />\n            )}\n            {content.remoteUrl && (\n              <span>\n                The link address is:\n                <a href={content.remoteUrl}>{content.remoteUrl}</a>\n              </span>\n            )}\n            {content.text && (\n              <div\n                dangerouslySetInnerHTML={{\n                  __html: content.text.data.replace(\n                    /a href=\"([^\"]*\\.[^\"]*)\"/g,\n                    `a href=\"${config.settings.apiPath}$1/download/file\"`,\n                  ),\n                }}\n              />\n            )}\n            <div id=\"forest-metadata-slot\">{''}</div>\n          </Container>\n        )}\n        {/* </Grid.Column> */}\n\n        {/* {renderPortletManager('plone.rightcolumn', 3, { ...props })} */}\n      </Grid>\n    </>\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nDefaultViewWide.propTypes = {\n  /**\n   * Content of the object\n   */\n  content: PropTypes.shape({\n    /**\n     * Title of the object\n     */\n    title: PropTypes.string,\n    /**\n     * Description of the object\n     */\n    description: PropTypes.string,\n    /**\n     * Text of the object\n     */\n    text: PropTypes.shape({\n      /**\n       * Data of the text of the object\n       */\n      data: PropTypes.string,\n    }),\n  }).isRequired,\n};\n\n// export default injectIntl(DefaultViewWide);\n\nexport default connect((state, props) => ({\n  pathname: state.router.location.pathname, //props.location.pathname,\n}))(injectIntl(DefaultViewWide));\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}