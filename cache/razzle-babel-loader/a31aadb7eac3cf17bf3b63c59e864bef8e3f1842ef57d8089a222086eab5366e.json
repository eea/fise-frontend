{"ast":null,"code":"import _toConsumableArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n/**\n * Comments reducer.\n * @module reducers/comments/comments\n */\n\nimport { ADD_COMMENT, DELETE_COMMENT, LIST_COMMENTS, LIST_MORE_COMMENTS, UPDATE_COMMENT } from '@plone/volto/constants/ActionTypes';\nvar initialState = {\n  add: {\n    loaded: false,\n    loading: false,\n    error: null\n  },\n  \"delete\": {\n    loaded: false,\n    loading: false,\n    error: null\n  },\n  update: {\n    loaded: false,\n    loading: false,\n    error: null\n  },\n  list: {\n    loaded: false,\n    loading: false,\n    error: null\n  },\n  items: [],\n  items_total: null,\n  permissions: {},\n  next: null\n};\n\n/**\n * Get request key\n * @function getRequestKey\n * @param {string} actionType Action type.\n * @returns {string} Request key.\n */\nfunction getRequestKey(actionType) {\n  return actionType.split('_')[0].toLowerCase();\n}\n\n/**\n * Comments reducer.\n * @function comments\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function comments() {\n  var _action$result$batchi, _action$result$batchi2;\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  switch (action.type) {\n    case \"\".concat(ADD_COMMENT, \"_PENDING\"):\n    case \"\".concat(DELETE_COMMENT, \"_PENDING\"):\n    case \"\".concat(UPDATE_COMMENT, \"_PENDING\"):\n    case \"\".concat(LIST_COMMENTS, \"_PENDING\"):\n    case \"\".concat(LIST_MORE_COMMENTS, \"_PENDING\"):\n      return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, getRequestKey(action.type), {\n        loading: true,\n        loaded: false,\n        error: null\n      }));\n    case \"\".concat(LIST_COMMENTS, \"_SUCCESS\"):\n      return _objectSpread(_objectSpread({}, state), {}, _defineProperty({\n        items: action.result.items,\n        next: (_action$result$batchi = action.result.batching) === null || _action$result$batchi === void 0 ? void 0 : _action$result$batchi.next,\n        items_total: action.result.items_total,\n        permissions: action.result.permissions\n      }, getRequestKey(action.type), {\n        loading: false,\n        loaded: true,\n        error: null\n      }));\n    case \"\".concat(LIST_MORE_COMMENTS, \"_SUCCESS\"):\n      return _objectSpread(_objectSpread({}, state), {}, _defineProperty({\n        items: [].concat(_toConsumableArray(state.items), _toConsumableArray(action.result.items)),\n        next: (_action$result$batchi2 = action.result.batching) === null || _action$result$batchi2 === void 0 ? void 0 : _action$result$batchi2.next\n      }, getRequestKey(action.type), {\n        loading: false,\n        loaded: true,\n        error: null\n      }));\n    case \"\".concat(ADD_COMMENT, \"_SUCCESS\"):\n    case \"\".concat(DELETE_COMMENT, \"_SUCCESS\"):\n    case \"\".concat(UPDATE_COMMENT, \"_SUCCESS\"):\n      return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, getRequestKey(action.type), {\n        loading: false,\n        loaded: true,\n        error: null\n      }));\n    case \"\".concat(LIST_COMMENTS, \"_FAIL\"):\n      return _objectSpread(_objectSpread({}, state), {}, _defineProperty({\n        items: [],\n        items_total: null,\n        permissions: {},\n        next: null\n      }, getRequestKey(action.type), {\n        loading: false,\n        loaded: false,\n        error: action.error\n      }));\n    case \"\".concat(LIST_MORE_COMMENTS, \"_FAIL\"):\n    case \"\".concat(ADD_COMMENT, \"_FAIL\"):\n      return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, getRequestKey(action.type), {\n        loading: false,\n        loaded: false,\n        error: action.error\n      }));\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["ADD_COMMENT","DELETE_COMMENT","LIST_COMMENTS","LIST_MORE_COMMENTS","UPDATE_COMMENT","initialState","add","loaded","loading","error","update","list","items","items_total","permissions","next","getRequestKey","actionType","split","toLowerCase","comments","state","action","type","result","batching"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/reducers/comments/comments.js"],"sourcesContent":["/**\n * Comments reducer.\n * @module reducers/comments/comments\n */\n\nimport {\n  ADD_COMMENT,\n  DELETE_COMMENT,\n  LIST_COMMENTS,\n  LIST_MORE_COMMENTS,\n  UPDATE_COMMENT,\n} from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {\n  add: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  delete: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  update: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  list: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  items: [],\n  items_total: null,\n  permissions: {},\n  next: null,\n};\n\n/**\n * Get request key\n * @function getRequestKey\n * @param {string} actionType Action type.\n * @returns {string} Request key.\n */\nfunction getRequestKey(actionType) {\n  return actionType.split('_')[0].toLowerCase();\n}\n\n/**\n * Comments reducer.\n * @function comments\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function comments(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${ADD_COMMENT}_PENDING`:\n    case `${DELETE_COMMENT}_PENDING`:\n    case `${UPDATE_COMMENT}_PENDING`:\n    case `${LIST_COMMENTS}_PENDING`:\n    case `${LIST_MORE_COMMENTS}_PENDING`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: true,\n          loaded: false,\n          error: null,\n        },\n      };\n    case `${LIST_COMMENTS}_SUCCESS`:\n      return {\n        ...state,\n        items: action.result.items,\n        next: action.result.batching?.next,\n        items_total: action.result.items_total,\n        permissions: action.result.permissions,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${LIST_MORE_COMMENTS}_SUCCESS`:\n      return {\n        ...state,\n        items: [...state.items, ...action.result.items],\n        next: action.result.batching?.next,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${ADD_COMMENT}_SUCCESS`:\n    case `${DELETE_COMMENT}_SUCCESS`:\n    case `${UPDATE_COMMENT}_SUCCESS`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${LIST_COMMENTS}_FAIL`:\n      return {\n        ...state,\n        items: [],\n        items_total: null,\n        permissions: {},\n        next: null,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    case `${LIST_MORE_COMMENTS}_FAIL`:\n    case `${ADD_COMMENT}_FAIL`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    default:\n      return state;\n  }\n}\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}