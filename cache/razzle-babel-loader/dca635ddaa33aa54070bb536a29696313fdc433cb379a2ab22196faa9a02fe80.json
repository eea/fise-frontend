{"ast":null,"code":"import _toConsumableArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _uniqBy from \"lodash/uniqBy\";\nimport _map from \"lodash/map\";\nimport _last from \"lodash/last\";\nimport _filter from \"lodash/filter\";\nimport _concat from \"lodash/concat\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Contents/ContentsWorkflowModal.jsx\";\nvar __jsx = React.createElement;\n/**\n * Contents workflow modal.\n * @module components/manage/Contents/ContentsWorkflowModal\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { getWorkflow, transitionWorkflow } from '@plone/volto/actions';\nimport { ModalForm } from '@plone/volto/components';\nvar messages = defineMessages({\n  \"default\": {\n    \"id\": \"Default\",\n    \"defaultMessage\": \"Default\"\n  },\n  stateTitle: {\n    \"id\": \"Change State\",\n    \"defaultMessage\": \"Change State\"\n  },\n  includeChildrenTitle: {\n    \"id\": \"Change workflow state recursively\",\n    \"defaultMessage\": \"Change workflow state recursively\"\n  },\n  stateDescription: {\n    \"id\": \"Select the transition to be used for modifying the items state.\",\n    \"defaultMessage\": \"Select the transition to be used for modifying the items state.\"\n  },\n  loadingMessage: {\n    \"id\": \"Workflow Change Loading Message\",\n    \"defaultMessage\": \"Updating workflow states...\"\n  }\n});\n\n/**\n * ContentsWorkflowModal class.\n * @class ContentsWorkflowModal\n * @extends Component\n */\nvar ContentsWorkflowModal = /*#__PURE__*/function (_Component) {\n  _inherits(ContentsWorkflowModal, _Component);\n  var _super = _createSuper(ContentsWorkflowModal);\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ContentsUploadModal\n   */\n  function ContentsWorkflowModal(props) {\n    var _this;\n    _classCallCheck(this, ContentsWorkflowModal);\n    _this = _super.call(this, props);\n    _this.onSubmit = _this.onSubmit.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n  _createClass(ContentsWorkflowModal, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.getWorkflow(this.props.items);\n    }\n\n    /**\n     * Component will receive props\n     * @method componentWillReceiveProps\n     * @param {Object} nextProps Next properties\n     * @returns {undefined}\n     */\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      if (this.props.request.loading && nextProps.request.loaded) {\n        this.props.onOk();\n      }\n    }\n\n    /**\n     * Submit handler\n     * @method onSubmit\n     * @param {string} state New state\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(_ref) {\n      var state = _ref.state,\n        include_children = _ref.include_children;\n      if (!state) {\n        return;\n      }\n      this.props.transitionWorkflow(_filter(_map(_concat.apply(void 0, _toConsumableArray(_map(this.props.workflows, function (workflow) {\n        return workflow.transitions;\n      }))), function (item) {\n        return item['@id'];\n      }), function (x) {\n        return _last(x.split('/')) === state;\n      }), include_children);\n    }\n\n    /**\n     * Render method.\n     * @method render\n     * @returns {string} Markup for the component.\n     */\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.props.open && this.props.workflows.length > 0 && __jsx(ModalForm, {\n        open: this.props.open,\n        loading: this.props.request.loading,\n        loadingMessage: this.props.intl.formatMessage(messages.loadingMessage),\n        onSubmit: this.onSubmit,\n        onCancel: this.props.onCancel,\n        title: this.props.intl.formatMessage(messages.stateTitle),\n        schema: {\n          fieldsets: [{\n            id: 'default',\n            title: this.props.intl.formatMessage(messages[\"default\"]),\n            fields: ['state', 'include_children']\n          }],\n          properties: {\n            state: {\n              description: this.props.intl.formatMessage(messages.stateDescription),\n              title: this.props.intl.formatMessage(messages.stateTitle),\n              type: 'string',\n              choices: _map(_uniqBy(_concat.apply(void 0, _toConsumableArray(_map(this.props.workflows, function (workflow) {\n                return workflow.transitions;\n              }))), function (x) {\n                return x.title;\n              }), function (y) {\n                return [_last(y['@id'].split('/')), y.title];\n              })\n            },\n            include_children: {\n              title: this.props.intl.formatMessage(messages.includeChildrenTitle),\n              type: 'boolean'\n            }\n          },\n          required: []\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 9\n        }\n      });\n    }\n  }]);\n  return ContentsWorkflowModal;\n}(Component);\n_defineProperty(ContentsWorkflowModal, \"propTypes\", {\n  getWorkflow: PropTypes.func.isRequired,\n  transitionWorkflow: PropTypes.func.isRequired,\n  items: PropTypes.arrayOf(PropTypes.string).isRequired,\n  request: PropTypes.shape({\n    loading: PropTypes.bool,\n    loaded: PropTypes.bool\n  }).isRequired,\n  workflows: PropTypes.arrayOf(PropTypes.shape({\n    transition: PropTypes.shape({\n      '@id': PropTypes.string,\n      title: PropTypes.string\n    })\n  })).isRequired,\n  open: PropTypes.bool.isRequired,\n  onOk: PropTypes.func.isRequired,\n  onCancel: PropTypes.func.isRequired\n});\nexport default compose(injectIntl, connect(function (state) {\n  return {\n    request: state.workflow.transition,\n    workflows: state.workflow.multiple\n  };\n}, {\n  getWorkflow: getWorkflow,\n  transitionWorkflow: transitionWorkflow\n}))(ContentsWorkflowModal);","map":{"version":3,"names":["React","Component","PropTypes","connect","compose","defineMessages","injectIntl","getWorkflow","transitionWorkflow","ModalForm","messages","stateTitle","includeChildrenTitle","stateDescription","loadingMessage","ContentsWorkflowModal","props","onSubmit","bind","items","nextProps","request","loading","loaded","onOk","state","include_children","workflows","workflow","transitions","item","x","split","open","length","intl","formatMessage","onCancel","fieldsets","id","title","fields","properties","description","type","choices","y","required","func","isRequired","arrayOf","string","shape","bool","transition","multiple"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Contents/ContentsWorkflowModal.jsx"],"sourcesContent":["/**\n * Contents workflow modal.\n * @module components/manage/Contents/ContentsWorkflowModal\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { concat, filter, last, map, uniqBy } from 'lodash';\nimport { defineMessages, injectIntl } from 'react-intl';\n\nimport { getWorkflow, transitionWorkflow } from '@plone/volto/actions';\nimport { ModalForm } from '@plone/volto/components';\n\nconst messages = defineMessages({\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  stateTitle: {\n    id: 'Change State',\n    defaultMessage: 'Change State',\n  },\n  includeChildrenTitle: {\n    id: 'Change workflow state recursively',\n    defaultMessage: 'Change workflow state recursively',\n  },\n  stateDescription: {\n    id: 'Select the transition to be used for modifying the items state.',\n    defaultMessage:\n      'Select the transition to be used for modifying the items state.',\n  },\n  loadingMessage: {\n    id: 'Workflow Change Loading Message',\n    defaultMessage: 'Updating workflow states...',\n  },\n});\n\n/**\n * ContentsWorkflowModal class.\n * @class ContentsWorkflowModal\n * @extends Component\n */\nclass ContentsWorkflowModal extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    getWorkflow: PropTypes.func.isRequired,\n    transitionWorkflow: PropTypes.func.isRequired,\n    items: PropTypes.arrayOf(PropTypes.string).isRequired,\n    request: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    workflows: PropTypes.arrayOf(\n      PropTypes.shape({\n        transition: PropTypes.shape({\n          '@id': PropTypes.string,\n          title: PropTypes.string,\n        }),\n      }),\n    ).isRequired,\n    open: PropTypes.bool.isRequired,\n    onOk: PropTypes.func.isRequired,\n    onCancel: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ContentsUploadModal\n   */\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.getWorkflow(this.props.items);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.request.loading && nextProps.request.loaded) {\n      this.props.onOk();\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {string} state New state\n   * @returns {undefined}\n   */\n  onSubmit({ state, include_children }) {\n    if (!state) {\n      return;\n    }\n\n    this.props.transitionWorkflow(\n      filter(\n        map(\n          concat(\n            ...map(this.props.workflows, (workflow) => workflow.transitions),\n          ),\n          (item) => item['@id'],\n        ),\n        (x) => last(x.split('/')) === state,\n      ),\n      include_children,\n    );\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      this.props.open &&\n      this.props.workflows.length > 0 && (\n        <ModalForm\n          open={this.props.open}\n          loading={this.props.request.loading}\n          loadingMessage={this.props.intl.formatMessage(\n            messages.loadingMessage,\n          )}\n          onSubmit={this.onSubmit}\n          onCancel={this.props.onCancel}\n          title={this.props.intl.formatMessage(messages.stateTitle)}\n          schema={{\n            fieldsets: [\n              {\n                id: 'default',\n                title: this.props.intl.formatMessage(messages.default),\n                fields: ['state', 'include_children'],\n              },\n            ],\n            properties: {\n              state: {\n                description: this.props.intl.formatMessage(\n                  messages.stateDescription,\n                ),\n                title: this.props.intl.formatMessage(messages.stateTitle),\n                type: 'string',\n                choices: map(\n                  uniqBy(\n                    concat(\n                      ...map(\n                        this.props.workflows,\n                        (workflow) => workflow.transitions,\n                      ),\n                    ),\n                    (x) => x.title,\n                  ),\n                  (y) => [last(y['@id'].split('/')), y.title],\n                ),\n              },\n              include_children: {\n                title: this.props.intl.formatMessage(\n                  messages.includeChildrenTitle,\n                ),\n                type: 'boolean',\n              },\n            },\n            required: [],\n          }}\n        />\n      )\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state) => ({\n      request: state.workflow.transition,\n      workflows: state.workflow.multiple,\n    }),\n    { getWorkflow, transitionWorkflow },\n  ),\n)(ContentsWorkflowModal);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Default","defaultMessage":"Default"},{"id":"Change State","defaultMessage":"Change State"},{"id":"Change workflow state recursively","defaultMessage":"Change workflow state recursively"},{"id":"Select the transition to be used for modifying the items state.","defaultMessage":"Select the transition to be used for modifying the items state."},{"id":"Workflow Change Loading Message","defaultMessage":"Updating workflow states..."}]}},"sourceType":"module","externalDependencies":[]}