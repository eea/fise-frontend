{"ast":null,"code":"import config from '@plone/volto/registry';\nimport { matchPath } from 'react-router';\nvar blacklistRoutes = function blacklistRoutes(_ref) {\n  var dispatch = _ref.dispatch,\n    getState = _ref.getState;\n  return function (next) {\n    return function (action) {\n      if (typeof action === 'function') {\n        return next(action);\n      }\n      switch (action.type) {\n        case '@@router/LOCATION_CHANGE':\n          var pathname = action.payload.location.pathname;\n          var _config$settings$exte = config.settings.externalRoutes,\n            externalRoutes = _config$settings$exte === void 0 ? [] : _config$settings$exte;\n          var route = externalRoutes.find(function (route) {\n            return matchPath(pathname, route.match);\n          });\n          if (!route) {\n            return next(action);\n          } else {\n            window.location.replace(route.url ? route.url(action.payload) : pathname);\n          }\n          break;\n        default:\n          return next(action);\n      }\n    };\n  };\n};\nexport default blacklistRoutes;","map":{"version":3,"names":["config","matchPath","blacklistRoutes","dispatch","getState","next","action","type","pathname","payload","location","settings","externalRoutes","route","find","match","window","replace","url"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/middleware/blacklistRoutes.js"],"sourcesContent":["import config from '@plone/volto/registry';\nimport { matchPath } from 'react-router';\n\nconst blacklistRoutes = ({ dispatch, getState }) => (next) => (action) => {\n  if (typeof action === 'function') {\n    return next(action);\n  }\n\n  switch (action.type) {\n    case '@@router/LOCATION_CHANGE':\n      const { pathname } = action.payload.location;\n      const { externalRoutes = [] } = config.settings;\n\n      const route = externalRoutes.find((route) =>\n        matchPath(pathname, route.match),\n      );\n\n      if (!route) {\n        return next(action);\n      } else {\n        window.location.replace(\n          route.url ? route.url(action.payload) : pathname,\n        );\n      }\n      break;\n    default:\n      return next(action);\n  }\n};\n\nexport default blacklistRoutes;\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,uBAAuB;AAC1C,SAASC,SAAS,QAAQ,cAAc;AAExC,IAAMC,eAAe,GAAG,SAAlBA,eAAe;EAAA,IAAMC,QAAQ,QAARA,QAAQ;IAAEC,QAAQ,QAARA,QAAQ;EAAA,OAAO,UAACC,IAAI;IAAA,OAAK,UAACC,MAAM,EAAK;MACxE,IAAI,OAAOA,MAAM,KAAK,UAAU,EAAE;QAChC,OAAOD,IAAI,CAACC,MAAM,CAAC;MACrB;MAEA,QAAQA,MAAM,CAACC,IAAI;QACjB,KAAK,0BAA0B;UAC7B,IAAQC,QAAQ,GAAKF,MAAM,CAACG,OAAO,CAACC,QAAQ,CAApCF,QAAQ;UAChB,4BAAgCR,MAAM,CAACW,QAAQ,CAAvCC,cAAc;YAAdA,cAAc,sCAAG,EAAE;UAE3B,IAAMC,KAAK,GAAGD,cAAc,CAACE,IAAI,CAAC,UAACD,KAAK;YAAA,OACtCZ,SAAS,CAACO,QAAQ,EAAEK,KAAK,CAACE,KAAK,CAAC;UAAA,EACjC;UAED,IAAI,CAACF,KAAK,EAAE;YACV,OAAOR,IAAI,CAACC,MAAM,CAAC;UACrB,CAAC,MAAM;YACLU,MAAM,CAACN,QAAQ,CAACO,OAAO,CACrBJ,KAAK,CAACK,GAAG,GAAGL,KAAK,CAACK,GAAG,CAACZ,MAAM,CAACG,OAAO,CAAC,GAAGD,QAAQ,CACjD;UACH;UACA;QACF;UACE,OAAOH,IAAI,CAACC,MAAM,CAAC;MAAC;IAE1B,CAAC;EAAA;AAAA;AAED,eAAeJ,eAAe"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}