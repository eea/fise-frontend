{"ast":null,"code":"import _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { Editor, Text, Transforms } from 'slate';\nimport { deserialize } from '@plone/volto-slate/editor/deserialize';\nimport { createBlock, createDefaultBlock, MIMETypeName, normalizeExternalData } from '@plone/volto-slate/utils';\nimport { isBlockActive } from '../../utils/blocks';\nexport var insertData = function insertData(editor) {\n  editor.dataTransferHandlers = _objectSpread(_objectSpread({}, editor.dataTransferHandlers), {}, {\n    'application/x-slate-fragment': function applicationXSlateFragment(dt, fullMime) {\n      var decoded = decodeURIComponent(window.atob(dt));\n      var parsed = JSON.parse(decoded);\n      editor.beforeInsertFragment && editor.beforeInsertFragment(parsed);\n      editor.insertFragment(parsed);\n      return true;\n    },\n    'text/html': function textHtml(dt, fullMime) {\n      var parsed = new DOMParser().parseFromString(dt, 'text/html');\n      var body = parsed.getElementsByTagName('google-sheets-html-origin').length > 0 ? parsed.querySelector('google-sheets-html-origin > table') : parsed.body;\n      var fragment;\n      var val = deserialize(editor, body);\n      fragment = Array.isArray(val) ? val : [val];\n\n      // external normalization\n      fragment = normalizeExternalData(editor, fragment);\n      editor.insertFragment(fragment);\n      return true;\n    },\n    'text/plain': function textPlain(dt, fullMime) {\n      var text = dt;\n      if (!text) return;\n      var paras = text.split('\\n');\n\n      // If just 1 line insert text\n      if (paras.length === 1) {\n        Transforms.insertText(editor, paras[0]);\n        return true;\n      }\n\n      // Check if inside a list\n      var fragment = isBlockActive(editor, 'ul') || isBlockActive(editor, 'ol') ? paras.map(function (p) {\n        return createBlock('li', [{\n          text: p\n        }]);\n      }) : paras.map(function (p) {\n        return createDefaultBlock([{\n          text: p\n        }]);\n      });\n\n      // check if fragment is p with text and insert as fragment if so\n      var fragmentContainsText = function fragmentContainsText(f) {\n        var trigger = false;\n        if (f && f[0]) {\n          f.forEach(function (frag) {\n            if (frag.type === 'p') {\n              if (frag.children) {\n                frag.children.forEach(function (child) {\n                  if (child.text) {\n                    trigger = true;\n                  }\n                });\n              }\n            }\n          });\n        }\n        return trigger;\n      };\n\n      // When there's already text in the editor, insert a fragment, not nodes\n      var containsText = fragmentContainsText(fragment);\n      if (fragment && containsText) {\n        Transforms.insertFragment(editor, fragment);\n      }\n      if (Editor.string(editor, [])) {\n        if (Array.isArray(fragment) && fragment.findIndex(function (b) {\n          return Editor.isInline(b) || Text.isText(b);\n        }) > -1) {\n          // console.log('insert fragment', fragment);\n          // TODO: we want normalization also when dealing with fragments\n          Transforms.insertFragment(editor, fragment);\n          return true;\n        }\n      }\n      var nodes = normalizeExternalData(editor, fragment);\n      if (!containsText) {\n        Transforms.insertNodes(editor, nodes);\n      }\n      return true;\n    }\n  });\n\n  // TODO: use the rtf data to get the embedded images.\n  // const text = data.getData('text/rtf');\n\n  var insertData = editor.insertData;\n\n  // TODO: move this to extensions/insertData\n  // TODO: update and improve comments & docs related to\n  // `dataTransferFormatsOrder` and `dataTransferHandlers` features\n  editor.insertData = function (data) {\n    if (editor.beforeInsertData) {\n      editor.beforeInsertData(data);\n    }\n\n    // debugger;\n    var _loop = function _loop(i) {\n      var dt = editor.dataTransferFormatsOrder[i];\n      if (dt === 'files') {\n        var files = data.files;\n        if (files && files.length > 0) {\n          // or handled here\n          return {\n            v: editor.dataTransferHandlers['files'](files)\n          };\n        }\n        return \"continue\";\n      }\n      var satisfyingFormats = data.types.filter(function (y) {\n        return new MIMETypeName(dt).matches(new MIMETypeName(y));\n      });\n      for (var j = 0; j < satisfyingFormats.length; ++j) {\n        var y = satisfyingFormats[j];\n        if (editor.dataTransferHandlers[dt](data.getData(y), y)) {\n          // handled here\n          return {\n            v: true\n          };\n        }\n      }\n    };\n    for (var i = 0; i < editor.dataTransferFormatsOrder.length; ++i) {\n      var _ret = _loop(i);\n      if (_ret === \"continue\") continue;\n      if (typeof _ret === \"object\") return _ret.v;\n    }\n    // not handled until this point\n    return insertData(data);\n  };\n  return editor;\n};","map":{"version":3,"names":["Editor","Text","Transforms","deserialize","createBlock","createDefaultBlock","MIMETypeName","normalizeExternalData","isBlockActive","insertData","editor","dataTransferHandlers","dt","fullMime","decoded","decodeURIComponent","window","atob","parsed","JSON","parse","beforeInsertFragment","insertFragment","DOMParser","parseFromString","body","getElementsByTagName","length","querySelector","fragment","val","Array","isArray","text","paras","split","insertText","map","p","fragmentContainsText","f","trigger","forEach","frag","type","children","child","containsText","string","findIndex","b","isInline","isText","nodes","insertNodes","data","beforeInsertData","i","dataTransferFormatsOrder","files","satisfyingFormats","types","filter","y","matches","j","getData"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/packages/volto-slate/src/editor/extensions/insertData.js"],"sourcesContent":["import { Editor, Text, Transforms } from 'slate';\nimport { deserialize } from '@plone/volto-slate/editor/deserialize';\nimport {\n  createBlock,\n  createDefaultBlock,\n  MIMETypeName,\n  normalizeExternalData,\n} from '@plone/volto-slate/utils';\nimport { isBlockActive } from '../../utils/blocks';\n\nexport const insertData = (editor) => {\n  editor.dataTransferHandlers = {\n    ...editor.dataTransferHandlers,\n    'application/x-slate-fragment': (dt, fullMime) => {\n      const decoded = decodeURIComponent(window.atob(dt));\n      const parsed = JSON.parse(decoded);\n      editor.beforeInsertFragment && editor.beforeInsertFragment(parsed);\n      editor.insertFragment(parsed);\n\n      return true;\n    },\n    'text/html': (dt, fullMime) => {\n      const parsed = new DOMParser().parseFromString(dt, 'text/html');\n\n      const body =\n        parsed.getElementsByTagName('google-sheets-html-origin').length > 0\n          ? parsed.querySelector('google-sheets-html-origin > table')\n          : parsed.body;\n\n      let fragment;\n\n      const val = deserialize(editor, body);\n      fragment = Array.isArray(val) ? val : [val];\n\n      // external normalization\n      fragment = normalizeExternalData(editor, fragment);\n\n      editor.insertFragment(fragment);\n\n      return true;\n    },\n    'text/plain': (dt, fullMime) => {\n      const text = dt;\n      if (!text) return;\n\n      const paras = text.split('\\n');\n\n      // If just 1 line insert text\n      if (paras.length === 1) {\n        Transforms.insertText(editor, paras[0]);\n        return true;\n      }\n\n      // Check if inside a list\n      const fragment =\n        isBlockActive(editor, 'ul') || isBlockActive(editor, 'ol')\n          ? paras.map((p) => createBlock('li', [{ text: p }]))\n          : paras.map((p) => createDefaultBlock([{ text: p }]));\n\n      // check if fragment is p with text and insert as fragment if so\n      const fragmentContainsText = (f) => {\n        var trigger = false;\n        if (f && f[0]) {\n          f.forEach((frag) => {\n            if (frag.type === 'p') {\n              if (frag.children) {\n                frag.children.forEach((child) => {\n                  if (child.text) {\n                    trigger = true;\n                  }\n                });\n              }\n            }\n          });\n        }\n        return trigger;\n      };\n\n      // When there's already text in the editor, insert a fragment, not nodes\n      const containsText = fragmentContainsText(fragment);\n      if (fragment && containsText) {\n        Transforms.insertFragment(editor, fragment);\n      }\n\n      if (Editor.string(editor, [])) {\n        if (\n          Array.isArray(fragment) &&\n          fragment.findIndex((b) => Editor.isInline(b) || Text.isText(b)) > -1\n        ) {\n          // console.log('insert fragment', fragment);\n          // TODO: we want normalization also when dealing with fragments\n          Transforms.insertFragment(editor, fragment);\n          return true;\n        }\n      }\n\n      const nodes = normalizeExternalData(editor, fragment);\n      if (!containsText) {\n        Transforms.insertNodes(editor, nodes);\n      }\n\n      return true;\n    },\n  };\n\n  // TODO: use the rtf data to get the embedded images.\n  // const text = data.getData('text/rtf');\n\n  const { insertData } = editor;\n\n  // TODO: move this to extensions/insertData\n  // TODO: update and improve comments & docs related to\n  // `dataTransferFormatsOrder` and `dataTransferHandlers` features\n  editor.insertData = (data) => {\n    if (editor.beforeInsertData) {\n      editor.beforeInsertData(data);\n    }\n\n    // debugger;\n    for (let i = 0; i < editor.dataTransferFormatsOrder.length; ++i) {\n      const dt = editor.dataTransferFormatsOrder[i];\n      if (dt === 'files') {\n        const { files } = data;\n        if (files && files.length > 0) {\n          // or handled here\n          return editor.dataTransferHandlers['files'](files);\n        }\n        continue;\n      }\n      const satisfyingFormats = data.types.filter((y) =>\n        new MIMETypeName(dt).matches(new MIMETypeName(y)),\n      );\n      for (let j = 0; j < satisfyingFormats.length; ++j) {\n        const y = satisfyingFormats[j];\n        if (editor.dataTransferHandlers[dt](data.getData(y), y)) {\n          // handled here\n          return true;\n        }\n      }\n    }\n    // not handled until this point\n    return insertData(data);\n  };\n\n  return editor;\n};\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}