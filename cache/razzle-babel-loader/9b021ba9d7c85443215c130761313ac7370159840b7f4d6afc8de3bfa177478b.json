{"ast":null,"code":"import _keys from \"lodash/keys\";\nimport _map from \"lodash/map\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Preferences/PersonalPreferences.jsx\";\nvar __jsx = React.createElement;\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n/**\n * Personal preferences component.\n * @module components/manage/Preferences/PersonalPreferences\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { withCookies } from 'react-cookie';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { toast } from 'react-toastify';\nimport { Form, Toast } from '@plone/volto/components';\nimport languages from '@plone/volto/constants/Languages';\nimport { changeLanguage } from '@plone/volto/actions';\nimport { normalizeLanguageName } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\nconst messages = defineMessages({\n  personalPreferences: {\n    \"id\": \"Personal Preferences\",\n    \"defaultMessage\": \"Personal Preferences\"\n  },\n  default: {\n    \"id\": \"Default\",\n    \"defaultMessage\": \"Default\"\n  },\n  language: {\n    \"id\": \"Language\",\n    \"defaultMessage\": \"Language\"\n  },\n  languageDescription: {\n    \"id\": \"Your preferred language\",\n    \"defaultMessage\": \"Your preferred language\"\n  },\n  saved: {\n    \"id\": \"Changes saved\",\n    \"defaultMessage\": \"Changes saved\"\n  },\n  back: {\n    \"id\": \"Back\",\n    \"defaultMessage\": \"Back\"\n  },\n  success: {\n    \"id\": \"Success\",\n    \"defaultMessage\": \"Success\"\n  }\n});\n\n/**\n * PersonalPreferences class.\n * @class PersonalPreferences\n * @extends Component\n */\nclass PersonalPreferences extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs PersonalPreferences\n   */\n  constructor(props) {\n    super(props);\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    let language = data.language || 'en';\n    if (config.settings.supportedLanguages.includes(language)) {\n      const langFileName = normalizeLanguageName(language);\n      import('@root/../locales/' + langFileName + '.json').then(locale => {\n        this.props.changeLanguage(language, locale.default);\n      });\n    }\n    toast.success(__jsx(Toast, {\n      success: true,\n      title: this.props.intl.formatMessage(messages.saved),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 7\n      }\n    }));\n    this.props.closeMenu();\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.props.closeMenu();\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const {\n      cookies\n    } = this.props;\n    return __jsx(Form, {\n      formData: {\n        language: cookies.get('I18N_LANGUAGE') || ''\n      },\n      schema: {\n        fieldsets: [{\n          id: 'default',\n          title: this.props.intl.formatMessage(messages.default),\n          fields: ['language']\n        }],\n        properties: {\n          language: {\n            description: this.props.intl.formatMessage(messages.languageDescription),\n            title: this.props.intl.formatMessage(messages.language),\n            type: 'string',\n            choices: _map(_keys(languages), lang => [lang, languages[lang]])\n          }\n        },\n        required: []\n      },\n      onSubmit: this.onSubmit,\n      onCancel: this.onCancel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 7\n      }\n    });\n  }\n}\n_defineProperty(PersonalPreferences, \"propTypes\", {\n  changeLanguage: PropTypes.func.isRequired,\n  closeMenu: PropTypes.func.isRequired\n});\nexport default compose(injectIntl, withCookies, connect(null, {\n  changeLanguage\n}))(PersonalPreferences);","map":{"version":3,"names":["React","Component","PropTypes","connect","compose","withCookies","defineMessages","injectIntl","toast","Form","Toast","languages","changeLanguage","normalizeLanguageName","config","messages","personalPreferences","default","language","languageDescription","saved","back","success","PersonalPreferences","constructor","props","onCancel","bind","onSubmit","data","settings","supportedLanguages","includes","langFileName","then","locale","intl","formatMessage","closeMenu","render","cookies","get","fieldsets","id","title","fields","properties","description","type","choices","lang","required","func","isRequired"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Preferences/PersonalPreferences.jsx"],"sourcesContent":["/**\n * Personal preferences component.\n * @module components/manage/Preferences/PersonalPreferences\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { map, keys } from 'lodash';\nimport { withCookies } from 'react-cookie';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { toast } from 'react-toastify';\n\nimport { Form, Toast } from '@plone/volto/components';\nimport languages from '@plone/volto/constants/Languages';\nimport { changeLanguage } from '@plone/volto/actions';\nimport { normalizeLanguageName } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\n\nconst messages = defineMessages({\n  personalPreferences: {\n    id: 'Personal Preferences',\n    defaultMessage: 'Personal Preferences',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  language: {\n    id: 'Language',\n    defaultMessage: 'Language',\n  },\n  languageDescription: {\n    id: 'Your preferred language',\n    defaultMessage: 'Your preferred language',\n  },\n  saved: {\n    id: 'Changes saved',\n    defaultMessage: 'Changes saved',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  success: {\n    id: 'Success',\n    defaultMessage: 'Success',\n  },\n});\n\n/**\n * PersonalPreferences class.\n * @class PersonalPreferences\n * @extends Component\n */\nclass PersonalPreferences extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    changeLanguage: PropTypes.func.isRequired,\n    closeMenu: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs PersonalPreferences\n   */\n  constructor(props) {\n    super(props);\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    let language = data.language || 'en';\n    if (config.settings.supportedLanguages.includes(language)) {\n      const langFileName = normalizeLanguageName(language);\n      import('@root/../locales/' + langFileName + '.json').then((locale) => {\n        this.props.changeLanguage(language, locale.default);\n      });\n    }\n    toast.success(\n      <Toast success title={this.props.intl.formatMessage(messages.saved)} />,\n    );\n    this.props.closeMenu();\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.props.closeMenu();\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { cookies } = this.props;\n    return (\n      <Form\n        formData={{ language: cookies.get('I18N_LANGUAGE') || '' }}\n        schema={{\n          fieldsets: [\n            {\n              id: 'default',\n              title: this.props.intl.formatMessage(messages.default),\n              fields: ['language'],\n            },\n          ],\n          properties: {\n            language: {\n              description: this.props.intl.formatMessage(\n                messages.languageDescription,\n              ),\n              title: this.props.intl.formatMessage(messages.language),\n              type: 'string',\n              choices: map(keys(languages), (lang) => [lang, languages[lang]]),\n            },\n          },\n          required: [],\n        }}\n        onSubmit={this.onSubmit}\n        onCancel={this.onCancel}\n      />\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  withCookies,\n  connect(null, { changeLanguage }),\n)(PersonalPreferences);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Personal Preferences","defaultMessage":"Personal Preferences"},{"id":"Default","defaultMessage":"Default"},{"id":"Language","defaultMessage":"Language"},{"id":"Your preferred language","defaultMessage":"Your preferred language"},{"id":"Changes saved","defaultMessage":"Changes saved"},{"id":"Back","defaultMessage":"Back"},{"id":"Success","defaultMessage":"Success"}]}},"sourceType":"module","externalDependencies":[]}