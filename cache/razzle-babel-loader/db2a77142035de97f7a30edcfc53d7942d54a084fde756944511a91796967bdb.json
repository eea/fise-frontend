{"ast":null,"code":"import _cloneDeep from \"lodash/cloneDeep\";\nimport _isEmpty from \"lodash/isEmpty\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-accordion-block/src/components/manage/Blocks/Accordion/Edit.jsx\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport { BlocksForm, Icon, SidebarPortal } from '@plone/volto/components';\nimport { emptyBlocksForm } from '@plone/volto/helpers';\nimport helpSVG from '@plone/volto/icons/help.svg';\nimport React, { useState } from 'react';\nimport { Button, Segment } from 'semantic-ui-react';\nimport { withBlockExtensions } from '@plone/volto/helpers';\nimport { BlockDataForm } from '@plone/volto/components';\nimport { useIntl } from 'react-intl';\nimport AccordionEdit from './AccordionEdit';\nimport EditBlockWrapper from './EditBlockWrapper';\nimport './editor.less';\nimport { AccordionBlockSchema } from './Schema';\nimport { emptyAccordion, getPanels } from './util';\nimport config from '@plone/volto/registry';\nconst Edit = props => {\n  var _data$data, _data$instructions;\n  const {\n    0: selectedBlock,\n    1: setSelectedBlock\n  } = useState({});\n  const {\n    block,\n    data,\n    onChangeBlock,\n    onChangeField,\n    pathname,\n    selected,\n    manage,\n    formDescription\n  } = props;\n  const intl = useIntl();\n  const properties = _isEmpty(data === null || data === void 0 ? void 0 : (_data$data = data.data) === null || _data$data === void 0 ? void 0 : _data$data.blocks) ? emptyAccordion(3) : data.data;\n  const metadata = props.metadata || props.properties;\n  const applySchemaEnhancer = originalSchema => {\n    var _blocks$blocksConfig$, _activeItem;\n    let schema, schemaEnhancer;\n    const formData = data;\n    const {\n      blocks\n    } = config;\n    const blockType = formData['@type'];\n    const variations = (blocks === null || blocks === void 0 ? void 0 : (_blocks$blocksConfig$ = blocks.blocksConfig[blockType]) === null || _blocks$blocksConfig$ === void 0 ? void 0 : _blocks$blocksConfig$.variations) || [];\n    if (variations.length === 0) {\n      var _blocks$blocksConfig, _blocks$blocksConfig$2;\n      // No variations present but anyways\n      // finalize the schema with a schemaEnhancer in the block config is present\n      schemaEnhancer = (_blocks$blocksConfig = blocks.blocksConfig) === null || _blocks$blocksConfig === void 0 ? void 0 : (_blocks$blocksConfig$2 = _blocks$blocksConfig[blockType]) === null || _blocks$blocksConfig$2 === void 0 ? void 0 : _blocks$blocksConfig$2.schemaEnhancer;\n      if (schemaEnhancer) schema = schemaEnhancer({\n        schema: originalSchema,\n        formData,\n        intl\n      });\n    }\n    const activeItemName = formData === null || formData === void 0 ? void 0 : formData.variation;\n    let activeItem = variations.find(item => item.id === activeItemName);\n    if (!activeItem) activeItem = variations.find(item => item.isDefault);\n    schemaEnhancer = (_activeItem = activeItem) === null || _activeItem === void 0 ? void 0 : _activeItem['schemaEnhancer'];\n    schema = schemaEnhancer ? schemaEnhancer({\n      schema: _cloneDeep(originalSchema),\n      formData,\n      intl\n    }) : _cloneDeep(originalSchema);\n    return schema;\n  };\n\n  /**\n   * Will set field values from schema, by matching the default values\n   * @returns {Object} defaultValues\n   */\n  const setInitialData = () => {\n    const accordionSchema = applySchemaEnhancer(AccordionBlockSchema({\n      intl\n    }));\n    const defaultValues = Object.keys(accordionSchema.properties).reduce((accumulator, currentVal) => {\n      return accordionSchema.properties[currentVal].default ? _objectSpread(_objectSpread({}, accumulator), {}, {\n        [currentVal]: accordionSchema.properties[currentVal].default\n      }) : accumulator;\n    }, {});\n    return _objectSpread(_objectSpread(_objectSpread({}, defaultValues), data), {}, {\n      data: _objectSpread({}, properties)\n    });\n  };\n  React.useEffect(() => {\n    if (_isEmpty(data === null || data === void 0 ? void 0 : data.data)) {\n      onChangeBlock(block, setInitialData());\n    }\n    /* eslint-disable-next-line */\n  }, []);\n  React.useEffect(() => {\n    properties.blocks_layout.items.map(item => {\n      if (_isEmpty(properties.blocks[item].blocks)) {\n        return onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n          data: _objectSpread(_objectSpread({}, properties), {}, {\n            blocks: _objectSpread(_objectSpread({}, properties.blocks), {}, {\n              [item]: emptyBlocksForm()\n            })\n          })\n        }));\n      }\n      return undefined;\n    });\n  }, [onChangeBlock, properties, selectedBlock, block, data, properties.blocks]);\n  const blockState = {};\n  const panelData = properties;\n  const panels = getPanels(panelData);\n  const handleTitleChange = (e, value) => {\n    const [uid, panel] = value;\n    const modifiedBlock = _objectSpread(_objectSpread({}, panel), {}, {\n      title: e.target.value,\n      '@type': 'accordionPanel'\n    });\n    onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n      data: _objectSpread(_objectSpread({}, panelData), {}, {\n        blocks: _objectSpread(_objectSpread({}, panelData.blocks), {}, {\n          [uid]: modifiedBlock\n        })\n      })\n    }));\n  };\n\n  // Get editing instructions from block settings or props\n  let instructions = (data === null || data === void 0 ? void 0 : (_data$instructions = data.instructions) === null || _data$instructions === void 0 ? void 0 : _data$instructions.data) || (data === null || data === void 0 ? void 0 : data.instructions);\n  if (!instructions || instructions === '<p><br/></p>') {\n    instructions = formDescription;\n  }\n  return __jsx(\"fieldset\", {\n    className: \"accordion-block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 5\n    }\n  }, __jsx(\"legend\", {\n    onClick: () => {\n      setSelectedBlock({});\n      props.setSidebarTab(1);\n    },\n    \"aria-hidden\": \"true\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }\n  }, data.title || 'Accordion'), panels.map(([uid, panel], index) => __jsx(AccordionEdit, {\n    uid: uid,\n    panel: panel,\n    panelData: panelData,\n    handleTitleChange: handleTitleChange,\n    handleTitleClick: () => setSelectedBlock({}),\n    data: data,\n    index: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }\n  }, __jsx(BlocksForm, {\n    key: uid,\n    title: data.placeholder,\n    description: instructions,\n    manage: manage,\n    allowedBlocks: data.allowedBlocks,\n    metadata: metadata,\n    properties: _isEmpty(panel) ? emptyBlocksForm() : panel,\n    selectedBlock: selected ? selectedBlock[uid] : null,\n    onSelectBlock: id => setSelectedBlock({\n      [uid]: id\n    }),\n    onChangeFormData: newFormData => {\n      onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n        data: _objectSpread(_objectSpread({}, panelData), {}, {\n          blocks: _objectSpread(_objectSpread({}, panelData.blocks), {}, {\n            [uid]: newFormData\n          })\n        })\n      }));\n    },\n    onChangeField: (id, value) => {\n      if (['blocks', 'blocks_layout'].indexOf(id) > -1) {\n        var _panelData$blocks;\n        blockState[id] = value;\n        onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n          data: _objectSpread(_objectSpread({}, panelData), {}, {\n            blocks: _objectSpread(_objectSpread({}, panelData.blocks), {}, {\n              [uid]: _objectSpread(_objectSpread({}, (_panelData$blocks = panelData.blocks) === null || _panelData$blocks === void 0 ? void 0 : _panelData$blocks[uid]), blockState)\n            })\n          })\n        }));\n      } else {\n        onChangeField(id, value);\n      }\n    },\n    pathname: pathname,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 11\n    }\n  }, ({\n    draginfo\n  }, editBlock, blockProps) => __jsx(EditBlockWrapper, {\n    draginfo: draginfo,\n    blockProps: blockProps,\n    disabled: data.disableInnerButtons,\n    extraControls: __jsx(React.Fragment, null, instructions && __jsx(React.Fragment, null, __jsx(Button, {\n      icon: true,\n      basic: true,\n      title: \"Section help\",\n      onClick: () => {\n        setSelectedBlock({});\n        const tab = manage ? 0 : 1;\n        props.setSidebarTab(tab);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 25\n      }\n    }, __jsx(Icon, {\n      name: helpSVG,\n      className: \"\",\n      size: \"19px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 27\n      }\n    })))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 15\n    }\n  }, editBlock)))), __jsx(SidebarPortal, {\n    selected: selected && !Object.keys(selectedBlock).length,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }\n  }, instructions && __jsx(Segment, {\n    attached: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: instructions\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }\n  })), !(data !== null && data !== void 0 && data.readOnlySettings) && __jsx(BlockDataForm, {\n    schema: AccordionBlockSchema({\n      intl\n    }),\n    title: \"Accordion block\",\n    onChangeField: (id, value) => {\n      onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n        [id]: value\n      }));\n    },\n    formData: data,\n    block: block,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 11\n    }\n  })));\n};\nexport default withBlockExtensions(Edit);","map":{"version":3,"names":["BlocksForm","Icon","SidebarPortal","emptyBlocksForm","helpSVG","React","useState","Button","Segment","withBlockExtensions","BlockDataForm","useIntl","AccordionEdit","EditBlockWrapper","AccordionBlockSchema","emptyAccordion","getPanels","config","Edit","props","selectedBlock","setSelectedBlock","block","data","onChangeBlock","onChangeField","pathname","selected","manage","formDescription","intl","properties","blocks","metadata","applySchemaEnhancer","originalSchema","schema","schemaEnhancer","formData","blockType","variations","blocksConfig","length","activeItemName","variation","activeItem","find","item","id","isDefault","setInitialData","accordionSchema","defaultValues","Object","keys","reduce","accumulator","currentVal","default","useEffect","blocks_layout","items","map","undefined","blockState","panelData","panels","handleTitleChange","e","value","uid","panel","modifiedBlock","title","target","instructions","setSidebarTab","index","placeholder","allowedBlocks","newFormData","indexOf","draginfo","editBlock","blockProps","disableInnerButtons","tab","__html","readOnlySettings"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-accordion-block/src/components/manage/Blocks/Accordion/Edit.jsx"],"sourcesContent":["import { BlocksForm, Icon, SidebarPortal } from '@plone/volto/components';\nimport { emptyBlocksForm } from '@plone/volto/helpers';\nimport helpSVG from '@plone/volto/icons/help.svg';\nimport { isEmpty } from 'lodash';\nimport React, { useState } from 'react';\nimport { Button, Segment } from 'semantic-ui-react';\nimport { withBlockExtensions } from '@plone/volto/helpers';\nimport { BlockDataForm } from '@plone/volto/components';\nimport { useIntl } from 'react-intl';\nimport AccordionEdit from './AccordionEdit';\nimport EditBlockWrapper from './EditBlockWrapper';\nimport './editor.less';\nimport { AccordionBlockSchema } from './Schema';\nimport { emptyAccordion, getPanels } from './util';\nimport { cloneDeep } from 'lodash';\nimport config from '@plone/volto/registry';\n\nconst Edit = (props) => {\n  const [selectedBlock, setSelectedBlock] = useState({});\n  const {\n    block,\n    data,\n    onChangeBlock,\n    onChangeField,\n    pathname,\n    selected,\n    manage,\n    formDescription,\n  } = props;\n  const intl = useIntl();\n  const properties = isEmpty(data?.data?.blocks)\n    ? emptyAccordion(3)\n    : data.data;\n  const metadata = props.metadata || props.properties;\n\n  const applySchemaEnhancer = (originalSchema) => {\n    let schema, schemaEnhancer;\n    const formData = data;\n    const { blocks } = config;\n\n    const blockType = formData['@type'];\n    const variations = blocks?.blocksConfig[blockType]?.variations || [];\n\n    if (variations.length === 0) {\n      // No variations present but anyways\n      // finalize the schema with a schemaEnhancer in the block config is present\n      schemaEnhancer = blocks.blocksConfig?.[blockType]?.schemaEnhancer;\n      if (schemaEnhancer)\n        schema = schemaEnhancer({ schema: originalSchema, formData, intl });\n    }\n\n    const activeItemName = formData?.variation;\n    let activeItem = variations.find((item) => item.id === activeItemName);\n    if (!activeItem) activeItem = variations.find((item) => item.isDefault);\n\n    schemaEnhancer = activeItem?.['schemaEnhancer'];\n\n    schema = schemaEnhancer\n      ? schemaEnhancer({ schema: cloneDeep(originalSchema), formData, intl })\n      : cloneDeep(originalSchema);\n\n    return schema;\n  };\n\n  /**\n   * Will set field values from schema, by matching the default values\n   * @returns {Object} defaultValues\n   */\n  const setInitialData = () => {\n    const accordionSchema = applySchemaEnhancer(AccordionBlockSchema({ intl }));\n    const defaultValues = Object.keys(accordionSchema.properties).reduce(\n      (accumulator, currentVal) => {\n        return accordionSchema.properties[currentVal].default\n          ? {\n              ...accumulator,\n              [currentVal]: accordionSchema.properties[currentVal].default,\n            }\n          : accumulator;\n      },\n      {},\n    );\n\n    return {\n      ...defaultValues,\n      ...data,\n      data: {\n        ...properties,\n      },\n    };\n  };\n\n  React.useEffect(() => {\n    if (isEmpty(data?.data)) {\n      onChangeBlock(block, setInitialData());\n    }\n    /* eslint-disable-next-line */\n  }, []);\n\n  React.useEffect(() => {\n    properties.blocks_layout.items.map((item) => {\n      if (isEmpty(properties.blocks[item].blocks)) {\n        return onChangeBlock(block, {\n          ...data,\n          data: {\n            ...properties,\n            blocks: {\n              ...properties.blocks,\n              [item]: emptyBlocksForm(),\n            },\n          },\n        });\n      }\n      return undefined;\n    });\n  }, [\n    onChangeBlock,\n    properties,\n    selectedBlock,\n    block,\n    data,\n    properties.blocks,\n  ]);\n\n  const blockState = {};\n  const panelData = properties;\n  const panels = getPanels(panelData);\n\n  const handleTitleChange = (e, value) => {\n    const [uid, panel] = value;\n    const modifiedBlock = {\n      ...panel,\n      title: e.target.value,\n      '@type': 'accordionPanel',\n    };\n    onChangeBlock(block, {\n      ...data,\n      data: {\n        ...panelData,\n        blocks: {\n          ...panelData.blocks,\n          [uid]: modifiedBlock,\n        },\n      },\n    });\n  };\n\n  // Get editing instructions from block settings or props\n  let instructions = data?.instructions?.data || data?.instructions;\n  if (!instructions || instructions === '<p><br/></p>') {\n    instructions = formDescription;\n  }\n\n  return (\n    <fieldset className=\"accordion-block\">\n      <legend\n        onClick={() => {\n          setSelectedBlock({});\n          props.setSidebarTab(1);\n        }}\n        aria-hidden=\"true\"\n      >\n        {data.title || 'Accordion'}\n      </legend>\n      {panels.map(([uid, panel], index) => (\n        <AccordionEdit\n          uid={uid}\n          panel={panel}\n          panelData={panelData}\n          handleTitleChange={handleTitleChange}\n          handleTitleClick={() => setSelectedBlock({})}\n          data={data}\n          index={index}\n        >\n          <BlocksForm\n            key={uid}\n            title={data.placeholder}\n            description={instructions}\n            manage={manage}\n            allowedBlocks={data.allowedBlocks}\n            metadata={metadata}\n            properties={isEmpty(panel) ? emptyBlocksForm() : panel}\n            selectedBlock={selected ? selectedBlock[uid] : null}\n            onSelectBlock={(id) =>\n              setSelectedBlock({\n                [uid]: id,\n              })\n            }\n            onChangeFormData={(newFormData) => {\n              onChangeBlock(block, {\n                ...data,\n                data: {\n                  ...panelData,\n                  blocks: {\n                    ...panelData.blocks,\n                    [uid]: newFormData,\n                  },\n                },\n              });\n            }}\n            onChangeField={(id, value) => {\n              if (['blocks', 'blocks_layout'].indexOf(id) > -1) {\n                blockState[id] = value;\n                onChangeBlock(block, {\n                  ...data,\n                  data: {\n                    ...panelData,\n                    blocks: {\n                      ...panelData.blocks,\n                      [uid]: {\n                        ...panelData.blocks?.[uid],\n                        ...blockState,\n                      },\n                    },\n                  },\n                });\n              } else {\n                onChangeField(id, value);\n              }\n            }}\n            pathname={pathname}\n          >\n            {({ draginfo }, editBlock, blockProps) => (\n              <EditBlockWrapper\n                draginfo={draginfo}\n                blockProps={blockProps}\n                disabled={data.disableInnerButtons}\n                extraControls={\n                  <>\n                    {instructions && (\n                      <>\n                        <Button\n                          icon\n                          basic\n                          title=\"Section help\"\n                          onClick={() => {\n                            setSelectedBlock({});\n                            const tab = manage ? 0 : 1;\n                            props.setSidebarTab(tab);\n                          }}\n                        >\n                          <Icon name={helpSVG} className=\"\" size=\"19px\" />\n                        </Button>\n                      </>\n                    )}\n                  </>\n                }\n              >\n                {editBlock}\n              </EditBlockWrapper>\n            )}\n          </BlocksForm>\n        </AccordionEdit>\n      ))}\n      <SidebarPortal selected={selected && !Object.keys(selectedBlock).length}>\n        {instructions && (\n          <Segment attached>\n            <div dangerouslySetInnerHTML={{ __html: instructions }} />\n          </Segment>\n        )}\n        {!data?.readOnlySettings && (\n          <BlockDataForm\n            schema={AccordionBlockSchema({ intl })}\n            title=\"Accordion block\"\n            onChangeField={(id, value) => {\n              onChangeBlock(block, {\n                ...data,\n                [id]: value,\n              });\n            }}\n            formData={data}\n            block={block}\n          />\n        )}\n      </SidebarPortal>\n    </fieldset>\n  );\n};\n\nexport default withBlockExtensions(Edit);\n"],"mappings":";;;;;;;AAAA,SAASA,UAAU,EAAEC,IAAI,EAAEC,aAAa,QAAQ,yBAAyB;AACzE,SAASC,eAAe,QAAQ,sBAAsB;AACtD,OAAOC,OAAO,MAAM,6BAA6B;AAEjD,OAAOC,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,MAAM,EAAEC,OAAO,QAAQ,mBAAmB;AACnD,SAASC,mBAAmB,QAAQ,sBAAsB;AAC1D,SAASC,aAAa,QAAQ,yBAAyB;AACvD,SAASC,OAAO,QAAQ,YAAY;AACpC,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,OAAO,eAAe;AACtB,SAASC,oBAAoB,QAAQ,UAAU;AAC/C,SAASC,cAAc,EAAEC,SAAS,QAAQ,QAAQ;AAElD,OAAOC,MAAM,MAAM,uBAAuB;AAE1C,MAAMC,IAAI,GAAIC,KAAK,IAAK;EAAA;EACtB,MAAM;IAAA,GAACC,aAAa;IAAA,GAAEC;EAAgB,IAAIf,QAAQ,CAAC,CAAC,CAAC,CAAC;EACtD,MAAM;IACJgB,KAAK;IACLC,IAAI;IACJC,aAAa;IACbC,aAAa;IACbC,QAAQ;IACRC,QAAQ;IACRC,MAAM;IACNC;EACF,CAAC,GAAGV,KAAK;EACT,MAAMW,IAAI,GAAGnB,OAAO,EAAE;EACtB,MAAMoB,UAAU,GAAG,SAAQR,IAAI,aAAJA,IAAI,qCAAJA,IAAI,CAAEA,IAAI,+CAAV,WAAYS,MAAM,CAAC,GAC1CjB,cAAc,CAAC,CAAC,CAAC,GACjBQ,IAAI,CAACA,IAAI;EACb,MAAMU,QAAQ,GAAGd,KAAK,CAACc,QAAQ,IAAId,KAAK,CAACY,UAAU;EAEnD,MAAMG,mBAAmB,GAAIC,cAAc,IAAK;IAAA;IAC9C,IAAIC,MAAM,EAAEC,cAAc;IAC1B,MAAMC,QAAQ,GAAGf,IAAI;IACrB,MAAM;MAAES;IAAO,CAAC,GAAGf,MAAM;IAEzB,MAAMsB,SAAS,GAAGD,QAAQ,CAAC,OAAO,CAAC;IACnC,MAAME,UAAU,GAAG,CAAAR,MAAM,aAANA,MAAM,gDAANA,MAAM,CAAES,YAAY,CAACF,SAAS,CAAC,0DAA/B,sBAAiCC,UAAU,KAAI,EAAE;IAEpE,IAAIA,UAAU,CAACE,MAAM,KAAK,CAAC,EAAE;MAAA;MAC3B;MACA;MACAL,cAAc,2BAAGL,MAAM,CAACS,YAAY,mFAAnB,qBAAsBF,SAAS,CAAC,2DAAhC,uBAAkCF,cAAc;MACjE,IAAIA,cAAc,EAChBD,MAAM,GAAGC,cAAc,CAAC;QAAED,MAAM,EAAED,cAAc;QAAEG,QAAQ;QAAER;MAAK,CAAC,CAAC;IACvE;IAEA,MAAMa,cAAc,GAAGL,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEM,SAAS;IAC1C,IAAIC,UAAU,GAAGL,UAAU,CAACM,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKL,cAAc,CAAC;IACtE,IAAI,CAACE,UAAU,EAAEA,UAAU,GAAGL,UAAU,CAACM,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACE,SAAS,CAAC;IAEvEZ,cAAc,kBAAGQ,UAAU,gDAAV,YAAa,gBAAgB,CAAC;IAE/CT,MAAM,GAAGC,cAAc,GACnBA,cAAc,CAAC;MAAED,MAAM,EAAE,WAAUD,cAAc,CAAC;MAAEG,QAAQ;MAAER;IAAK,CAAC,CAAC,GACrE,WAAUK,cAAc,CAAC;IAE7B,OAAOC,MAAM;EACf,CAAC;;EAED;AACF;AACA;AACA;EACE,MAAMc,cAAc,GAAG,MAAM;IAC3B,MAAMC,eAAe,GAAGjB,mBAAmB,CAACpB,oBAAoB,CAAC;MAAEgB;IAAK,CAAC,CAAC,CAAC;IAC3E,MAAMsB,aAAa,GAAGC,MAAM,CAACC,IAAI,CAACH,eAAe,CAACpB,UAAU,CAAC,CAACwB,MAAM,CAClE,CAACC,WAAW,EAAEC,UAAU,KAAK;MAC3B,OAAON,eAAe,CAACpB,UAAU,CAAC0B,UAAU,CAAC,CAACC,OAAO,mCAE5CF,WAAW;QACd,CAACC,UAAU,GAAGN,eAAe,CAACpB,UAAU,CAAC0B,UAAU,CAAC,CAACC;MAAO,KAE9DF,WAAW;IACjB,CAAC,EACD,CAAC,CAAC,CACH;IAED,qDACKJ,aAAa,GACb7B,IAAI;MACPA,IAAI,oBACCQ,UAAU;IACd;EAEL,CAAC;EAED1B,KAAK,CAACsD,SAAS,CAAC,MAAM;IACpB,IAAI,SAAQpC,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEA,IAAI,CAAC,EAAE;MACvBC,aAAa,CAACF,KAAK,EAAE4B,cAAc,EAAE,CAAC;IACxC;IACA;EACF,CAAC,EAAE,EAAE,CAAC;EAEN7C,KAAK,CAACsD,SAAS,CAAC,MAAM;IACpB5B,UAAU,CAAC6B,aAAa,CAACC,KAAK,CAACC,GAAG,CAAEf,IAAI,IAAK;MAC3C,IAAI,SAAQhB,UAAU,CAACC,MAAM,CAACe,IAAI,CAAC,CAACf,MAAM,CAAC,EAAE;QAC3C,OAAOR,aAAa,CAACF,KAAK,kCACrBC,IAAI;UACPA,IAAI,kCACCQ,UAAU;YACbC,MAAM,kCACDD,UAAU,CAACC,MAAM;cACpB,CAACe,IAAI,GAAG5C,eAAe;YAAE;UAC1B;QACF,GACD;MACJ;MACA,OAAO4D,SAAS;IAClB,CAAC,CAAC;EACJ,CAAC,EAAE,CACDvC,aAAa,EACbO,UAAU,EACVX,aAAa,EACbE,KAAK,EACLC,IAAI,EACJQ,UAAU,CAACC,MAAM,CAClB,CAAC;EAEF,MAAMgC,UAAU,GAAG,CAAC,CAAC;EACrB,MAAMC,SAAS,GAAGlC,UAAU;EAC5B,MAAMmC,MAAM,GAAGlD,SAAS,CAACiD,SAAS,CAAC;EAEnC,MAAME,iBAAiB,GAAG,CAACC,CAAC,EAAEC,KAAK,KAAK;IACtC,MAAM,CAACC,GAAG,EAAEC,KAAK,CAAC,GAAGF,KAAK;IAC1B,MAAMG,aAAa,mCACdD,KAAK;MACRE,KAAK,EAAEL,CAAC,CAACM,MAAM,CAACL,KAAK;MACrB,OAAO,EAAE;IAAgB,EAC1B;IACD7C,aAAa,CAACF,KAAK,kCACdC,IAAI;MACPA,IAAI,kCACC0C,SAAS;QACZjC,MAAM,kCACDiC,SAAS,CAACjC,MAAM;UACnB,CAACsC,GAAG,GAAGE;QAAa;MACrB;IACF,GACD;EACJ,CAAC;;EAED;EACA,IAAIG,YAAY,GAAG,CAAApD,IAAI,aAAJA,IAAI,6CAAJA,IAAI,CAAEoD,YAAY,uDAAlB,mBAAoBpD,IAAI,MAAIA,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEoD,YAAY;EACjE,IAAI,CAACA,YAAY,IAAIA,YAAY,KAAK,cAAc,EAAE;IACpDA,YAAY,GAAG9C,eAAe;EAChC;EAEA,OACE;IAAU,SAAS,EAAC,iBAAiB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACnC;IACE,OAAO,EAAE,MAAM;MACbR,gBAAgB,CAAC,CAAC,CAAC,CAAC;MACpBF,KAAK,CAACyD,aAAa,CAAC,CAAC,CAAC;IACxB,CAAE;IACF,eAAY,MAAM;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAEjBrD,IAAI,CAACkD,KAAK,IAAI,WAAW,CACnB,EACRP,MAAM,CAACJ,GAAG,CAAC,CAAC,CAACQ,GAAG,EAAEC,KAAK,CAAC,EAAEM,KAAK,KAC9B,MAAC,aAAa;IACZ,GAAG,EAAEP,GAAI;IACT,KAAK,EAAEC,KAAM;IACb,SAAS,EAAEN,SAAU;IACrB,iBAAiB,EAAEE,iBAAkB;IACrC,gBAAgB,EAAE,MAAM9C,gBAAgB,CAAC,CAAC,CAAC,CAAE;IAC7C,IAAI,EAAEE,IAAK;IACX,KAAK,EAAEsD,KAAM;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAEb,MAAC,UAAU;IACT,GAAG,EAAEP,GAAI;IACT,KAAK,EAAE/C,IAAI,CAACuD,WAAY;IACxB,WAAW,EAAEH,YAAa;IAC1B,MAAM,EAAE/C,MAAO;IACf,aAAa,EAAEL,IAAI,CAACwD,aAAc;IAClC,QAAQ,EAAE9C,QAAS;IACnB,UAAU,EAAE,SAAQsC,KAAK,CAAC,GAAGpE,eAAe,EAAE,GAAGoE,KAAM;IACvD,aAAa,EAAE5C,QAAQ,GAAGP,aAAa,CAACkD,GAAG,CAAC,GAAG,IAAK;IACpD,aAAa,EAAGtB,EAAE,IAChB3B,gBAAgB,CAAC;MACf,CAACiD,GAAG,GAAGtB;IACT,CAAC,CACF;IACD,gBAAgB,EAAGgC,WAAW,IAAK;MACjCxD,aAAa,CAACF,KAAK,kCACdC,IAAI;QACPA,IAAI,kCACC0C,SAAS;UACZjC,MAAM,kCACDiC,SAAS,CAACjC,MAAM;YACnB,CAACsC,GAAG,GAAGU;UAAW;QACnB;MACF,GACD;IACJ,CAAE;IACF,aAAa,EAAE,CAAChC,EAAE,EAAEqB,KAAK,KAAK;MAC5B,IAAI,CAAC,QAAQ,EAAE,eAAe,CAAC,CAACY,OAAO,CAACjC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE;QAAA;QAChDgB,UAAU,CAAChB,EAAE,CAAC,GAAGqB,KAAK;QACtB7C,aAAa,CAACF,KAAK,kCACdC,IAAI;UACPA,IAAI,kCACC0C,SAAS;YACZjC,MAAM,kCACDiC,SAAS,CAACjC,MAAM;cACnB,CAACsC,GAAG,wDACCL,SAAS,CAACjC,MAAM,sDAAhB,kBAAmBsC,GAAG,CAAC,GACvBN,UAAU;YACd;UACF;QACF,GACD;MACJ,CAAC,MAAM;QACLvC,aAAa,CAACuB,EAAE,EAAEqB,KAAK,CAAC;MAC1B;IACF,CAAE;IACF,QAAQ,EAAE3C,QAAS;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAElB,CAAC;IAAEwD;EAAS,CAAC,EAAEC,SAAS,EAAEC,UAAU,KACnC,MAAC,gBAAgB;IACf,QAAQ,EAAEF,QAAS;IACnB,UAAU,EAAEE,UAAW;IACvB,QAAQ,EAAE7D,IAAI,CAAC8D,mBAAoB;IACnC,aAAa,EACX,4BACGV,YAAY,IACX,4BACE,MAAC,MAAM;MACL,IAAI;MACJ,KAAK;MACL,KAAK,EAAC,cAAc;MACpB,OAAO,EAAE,MAAM;QACbtD,gBAAgB,CAAC,CAAC,CAAC,CAAC;QACpB,MAAMiE,GAAG,GAAG1D,MAAM,GAAG,CAAC,GAAG,CAAC;QAC1BT,KAAK,CAACyD,aAAa,CAACU,GAAG,CAAC;MAC1B,CAAE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAEF,MAAC,IAAI;MAAC,IAAI,EAAElF,OAAQ;MAAC,SAAS,EAAC,EAAE;MAAC,IAAI,EAAC,MAAM;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAG,CACzC,CAEZ,CAEJ;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAEA+E,SAAS,CAEb,CACU,CAEhB,CAAC,EACF,MAAC,aAAa;IAAC,QAAQ,EAAExD,QAAQ,IAAI,CAAC0B,MAAM,CAACC,IAAI,CAAClC,aAAa,CAAC,CAACsB,MAAO;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACrEiC,YAAY,IACX,MAAC,OAAO;IAAC,QAAQ;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACf;IAAK,uBAAuB,EAAE;MAAEY,MAAM,EAAEZ;IAAa,CAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAG,CAE7D,EACA,EAACpD,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEiE,gBAAgB,KACtB,MAAC,aAAa;IACZ,MAAM,EAAE1E,oBAAoB,CAAC;MAAEgB;IAAK,CAAC,CAAE;IACvC,KAAK,EAAC,iBAAiB;IACvB,aAAa,EAAE,CAACkB,EAAE,EAAEqB,KAAK,KAAK;MAC5B7C,aAAa,CAACF,KAAK,kCACdC,IAAI;QACP,CAACyB,EAAE,GAAGqB;MAAK,GACX;IACJ,CAAE;IACF,QAAQ,EAAE9C,IAAK;IACf,KAAK,EAAED,KAAM;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAEhB,CACa,CACP;AAEf,CAAC;AAED,eAAeb,mBAAmB,CAACS,IAAI,CAAC"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}