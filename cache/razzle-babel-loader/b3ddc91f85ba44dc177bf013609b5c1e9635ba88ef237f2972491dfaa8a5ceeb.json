{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-block-style/src/Blocks/StretchBlock.jsx\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport React from 'react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { Icon } from '@plone/volto/components';\nimport { Button } from 'semantic-ui-react';\nimport imageFitSVG from '@plone/volto/icons/image-fit.svg';\nimport imageFullSVG from '@plone/volto/icons/image-full.svg';\nconst messages = defineMessages({\n  fit: {\n    \"id\": \"Fit\",\n    \"defaultMessage\": \"Fit\"\n  },\n  stretch: {\n    \"id\": \"Stretch\",\n    \"defaultMessage\": \"Stretch\"\n  }\n});\nconst StretchBlock = ({\n  stretch,\n  onChangeBlock,\n  data,\n  intl,\n  block\n}) => {\n  /**\n   * Stretch block handler\n   * @method onStretchBlock\n   * @param {string} stretch Stretchment option\n   * @returns {undefined}\n   */\n  function onStretchBlock(stretch) {\n    onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n      stretch\n    }));\n  }\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, __jsx(Button.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    icon: true,\n    basic: true,\n    title: 'Default',\n    \"aria-label\": intl.formatMessage(messages.fit),\n    onClick: () => onStretchBlock('fit'),\n    active: data.stretch === 'fit' || !data.stretch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }, __jsx(Icon, {\n    name: imageFitSVG,\n    size: \"24px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  }))), __jsx(Button.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    icon: true,\n    basic: true,\n    title: 'Stretch block to the edges',\n    \"aria-label\": intl.formatMessage(messages.stretch),\n    onClick: () => onStretchBlock('stretch'),\n    active: data.stretch === 'stretch',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, __jsx(Icon, {\n    name: imageFullSVG,\n    size: \"24px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }))));\n};\nexport default injectIntl(StretchBlock);","map":{"version":3,"names":["React","defineMessages","injectIntl","Icon","Button","imageFitSVG","imageFullSVG","messages","fit","stretch","StretchBlock","onChangeBlock","data","intl","block","onStretchBlock","formatMessage"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-block-style/src/Blocks/StretchBlock.jsx"],"sourcesContent":["import React from 'react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { Icon } from '@plone/volto/components';\nimport { Button } from 'semantic-ui-react';\nimport imageFitSVG from '@plone/volto/icons/image-fit.svg';\nimport imageFullSVG from '@plone/volto/icons/image-full.svg';\n\nconst messages = defineMessages({\n  fit: {\n    id: 'Fit',\n    defaultMessage: 'Fit',\n  },\n  stretch: {\n    id: 'Stretch',\n    defaultMessage: 'Stretch',\n  },\n});\n\nconst StretchBlock = ({ stretch, onChangeBlock, data, intl, block }) => {\n  /**\n   * Stretch block handler\n   * @method onStretchBlock\n   * @param {string} stretch Stretchment option\n   * @returns {undefined}\n   */\n  function onStretchBlock(stretch) {\n    onChangeBlock(block, {\n      ...data,\n      stretch,\n    });\n  }\n\n  return (\n    <div>\n      <Button.Group>\n        <Button\n          icon\n          basic\n          title={'Default'}\n          aria-label={intl.formatMessage(messages.fit)}\n          onClick={() => onStretchBlock('fit')}\n          active={data.stretch === 'fit' || !data.stretch}\n        >\n          <Icon name={imageFitSVG} size=\"24px\" />\n        </Button>\n      </Button.Group>\n      <Button.Group>\n        <Button\n          icon\n          basic\n          title={'Stretch block to the edges'}\n          aria-label={intl.formatMessage(messages.stretch)}\n          onClick={() => onStretchBlock('stretch')}\n          active={data.stretch === 'stretch'}\n        >\n          <Icon name={imageFullSVG} size=\"24px\" />\n        </Button>\n      </Button.Group>\n    </div>\n  );\n};\n\nexport default injectIntl(StretchBlock);\n"],"mappings":";;;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,cAAc,EAAEC,UAAU,QAAQ,YAAY;AACvD,SAASC,IAAI,QAAQ,yBAAyB;AAC9C,SAASC,MAAM,QAAQ,mBAAmB;AAC1C,OAAOC,WAAW,MAAM,kCAAkC;AAC1D,OAAOC,YAAY,MAAM,mCAAmC;AAE5D,MAAMC,QAAQ,GAAGN,cAAc,CAAC;EAC9BO,GAAG;IAAA;IAAA;EAAA,CAGF;EACDC,OAAO;IAAA;IAAA;EAAA;AAIT,CAAC,CAAC;AAEF,MAAMC,YAAY,GAAG,CAAC;EAAED,OAAO;EAAEE,aAAa;EAAEC,IAAI;EAAEC,IAAI;EAAEC;AAAM,CAAC,KAAK;EACtE;AACF;AACA;AACA;AACA;AACA;EACE,SAASC,cAAc,CAACN,OAAO,EAAE;IAC/BE,aAAa,CAACG,KAAK,kCACdF,IAAI;MACPH;IAAO,GACP;EACJ;EAEA,OACE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACE,MAAC,MAAM,CAAC,KAAK;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACX,MAAC,MAAM;IACL,IAAI;IACJ,KAAK;IACL,KAAK,EAAE,SAAU;IACjB,cAAYI,IAAI,CAACG,aAAa,CAACT,QAAQ,CAACC,GAAG,CAAE;IAC7C,OAAO,EAAE,MAAMO,cAAc,CAAC,KAAK,CAAE;IACrC,MAAM,EAAEH,IAAI,CAACH,OAAO,KAAK,KAAK,IAAI,CAACG,IAAI,CAACH,OAAQ;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAEhD,MAAC,IAAI;IAAC,IAAI,EAAEJ,WAAY;IAAC,IAAI,EAAC,MAAM;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAG,CAChC,CACI,EACf,MAAC,MAAM,CAAC,KAAK;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACX,MAAC,MAAM;IACL,IAAI;IACJ,KAAK;IACL,KAAK,EAAE,4BAA6B;IACpC,cAAYQ,IAAI,CAACG,aAAa,CAACT,QAAQ,CAACE,OAAO,CAAE;IACjD,OAAO,EAAE,MAAMM,cAAc,CAAC,SAAS,CAAE;IACzC,MAAM,EAAEH,IAAI,CAACH,OAAO,KAAK,SAAU;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAEnC,MAAC,IAAI;IAAC,IAAI,EAAEH,YAAa;IAAC,IAAI,EAAC,MAAM;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAG,CACjC,CACI,CACX;AAEV,CAAC;AAED,eAAeJ,UAAU,CAACQ,YAAY,CAAC"},"metadata":{"react-intl":{"messages":[{"id":"Fit","defaultMessage":"Fit"},{"id":"Stretch","defaultMessage":"Stretch"}]}},"sourceType":"module","externalDependencies":[]}