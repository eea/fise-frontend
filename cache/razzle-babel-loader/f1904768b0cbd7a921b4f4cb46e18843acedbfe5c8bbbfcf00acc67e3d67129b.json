{"ast":null,"code":"import _without from \"lodash/without\";\nimport _omit from \"lodash/omit\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-columns-block/src/Widgets/ColumnsWidget.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { v4 as uuid } from 'uuid';\nimport move from 'lodash-move';\nimport { Icon, FormFieldWrapper } from '@plone/volto/components';\nimport { DragDropList } from '@plone/volto/components';\nimport { emptyBlocksForm } from '@plone/volto/helpers';\nimport dragSVG from '@plone/volto/icons/drag.svg';\nimport trashSVG from '@plone/volto/icons/delete.svg';\nimport plusSVG from '@plone/volto/icons/circle-plus.svg';\nexport function moveColumn(formData, source, destination) {\n  var _formData$blocks_layo;\n  return _objectSpread(_objectSpread({}, formData), {}, {\n    blocks_layout: {\n      items: move((_formData$blocks_layo = formData.blocks_layout) === null || _formData$blocks_layo === void 0 ? void 0 : _formData$blocks_layo.items, source, destination)\n    }\n  });\n}\nconst empty = () => {\n  return [uuid(), emptyBlocksForm()];\n};\nconst ColumnsWidget = props => {\n  var _value$blocks_layout, _value$blocks_layout2, _value$blocks_layout3;\n  const {\n    value = {},\n    id,\n    onChange,\n    maxSize = 4\n  } = props;\n  const {\n    blocks = {}\n  } = value;\n  const columnsList = (((_value$blocks_layout = value.blocks_layout) === null || _value$blocks_layout === void 0 ? void 0 : _value$blocks_layout.items) || []).map(id => [id, blocks[id]]);\n  const showAdd = ((_value$blocks_layout2 = value.blocks_layout) === null || _value$blocks_layout2 === void 0 ? void 0 : (_value$blocks_layout3 = _value$blocks_layout2.items) === null || _value$blocks_layout3 === void 0 ? void 0 : _value$blocks_layout3.length) < maxSize;\n  return __jsx(FormFieldWrapper, _extends({}, props, {\n    draggable: false,\n    className: \"drag-drop-list-widget\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }), __jsx(\"div\", {\n    className: \"columns-area\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, __jsx(DragDropList, {\n    childList: columnsList,\n    onMoveItem: result => {\n      const {\n        source,\n        destination\n      } = result;\n      if (!destination) {\n        return;\n      }\n      const newFormData = moveColumn(value, source.index, destination.index);\n      onChange(id, newFormData);\n      return true;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, dragProps => {\n    var _value$blocks_layout4, _value$blocks_layout5;\n    const {\n      childId,\n      index,\n      draginfo\n    } = dragProps;\n    return __jsx(\"div\", _extends({\n      ref: draginfo.innerRef\n    }, draginfo.draggableProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 15\n      }\n    }), __jsx(\"div\", {\n      style: {\n        position: 'relative'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }\n    }, __jsx(\"div\", _extends({\n      style: {\n        visibility: 'visible',\n        display: 'inline-block'\n      }\n    }, draginfo.dragHandleProps, {\n      className: \"drag handle wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 19\n      }\n    }), __jsx(Icon, {\n      name: dragSVG,\n      size: \"18px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }\n    })), __jsx(\"div\", {\n      className: \"column-area\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 19\n      }\n    }, __jsx(\"div\", {\n      className: \"label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Column\",\n      defaultMessage: \"Column\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 23\n      }\n    }), ' ', index + 1), ((_value$blocks_layout4 = value.blocks_layout) === null || _value$blocks_layout4 === void 0 ? void 0 : (_value$blocks_layout5 = _value$blocks_layout4.items) === null || _value$blocks_layout5 === void 0 ? void 0 : _value$blocks_layout5.length) > 1 ? __jsx(\"button\", {\n      onClick: () => {\n        var _value$blocks_layout6;\n        const newFormData = _objectSpread(_objectSpread({}, value), {}, {\n          blocks: _omit(_objectSpread({}, value.blocks), [childId]),\n          blocks_layout: _objectSpread(_objectSpread({}, value.blocks_layout), {}, {\n            items: _without([...((_value$blocks_layout6 = value.blocks_layout) === null || _value$blocks_layout6 === void 0 ? void 0 : _value$blocks_layout6.items)], childId)\n          })\n        });\n        onChange(id, newFormData);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 23\n      }\n    }, __jsx(Icon, {\n      name: trashSVG,\n      size: \"18px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 25\n      }\n    })) : '')));\n  }), showAdd ? __jsx(\"button\", {\n    onClick: () => {\n      var _value$blocks_layout7;\n      const [newId, newData] = empty();\n      onChange(id, _objectSpread(_objectSpread({}, value), {}, {\n        blocks: _objectSpread(_objectSpread({}, value.blocks), {}, {\n          [newId]: newData\n        }),\n        blocks_layout: _objectSpread(_objectSpread({}, value.blocks_layout), {}, {\n          items: [...((_value$blocks_layout7 = value.blocks_layout) === null || _value$blocks_layout7 === void 0 ? void 0 : _value$blocks_layout7.items), newId]\n        })\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }, __jsx(Icon, {\n    name: plusSVG,\n    size: \"18px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  })) : ''));\n};\nexport default ColumnsWidget;","map":{"version":3,"names":["React","FormattedMessage","v4","uuid","move","Icon","FormFieldWrapper","DragDropList","emptyBlocksForm","dragSVG","trashSVG","plusSVG","moveColumn","formData","source","destination","blocks_layout","items","empty","ColumnsWidget","props","value","id","onChange","maxSize","blocks","columnsList","map","showAdd","length","result","newFormData","index","dragProps","childId","draginfo","innerRef","draggableProps","position","visibility","display","dragHandleProps","newId","newData"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-columns-block/src/Widgets/ColumnsWidget.jsx"],"sourcesContent":["import React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { v4 as uuid } from 'uuid';\nimport { omit, without } from 'lodash';\nimport move from 'lodash-move';\nimport { Icon, FormFieldWrapper } from '@plone/volto/components';\nimport { DragDropList } from '@plone/volto/components';\nimport { emptyBlocksForm } from '@plone/volto/helpers';\n\nimport dragSVG from '@plone/volto/icons/drag.svg';\nimport trashSVG from '@plone/volto/icons/delete.svg';\nimport plusSVG from '@plone/volto/icons/circle-plus.svg';\n\nexport function moveColumn(formData, source, destination) {\n  return {\n    ...formData,\n    blocks_layout: {\n      items: move(formData.blocks_layout?.items, source, destination),\n    },\n  };\n}\n\nconst empty = () => {\n  return [uuid(), emptyBlocksForm()];\n};\n\nconst ColumnsWidget = (props) => {\n  const { value = {}, id, onChange, maxSize = 4 } = props;\n  const { blocks = {} } = value;\n  const columnsList = (value.blocks_layout?.items || []).map((id) => [\n    id,\n    blocks[id],\n  ]);\n\n  const showAdd = value.blocks_layout?.items?.length < maxSize;\n  return (\n    <FormFieldWrapper\n      {...props}\n      draggable={false}\n      className=\"drag-drop-list-widget\"\n    >\n      <div className=\"columns-area\">\n        <DragDropList\n          childList={columnsList}\n          onMoveItem={(result) => {\n            const { source, destination } = result;\n            if (!destination) {\n              return;\n            }\n            const newFormData = moveColumn(\n              value,\n              source.index,\n              destination.index,\n            );\n            onChange(id, newFormData);\n            return true;\n          }}\n        >\n          {(dragProps) => {\n            const { childId, index, draginfo } = dragProps;\n            return (\n              <div ref={draginfo.innerRef} {...draginfo.draggableProps}>\n                <div style={{ position: 'relative' }}>\n                  <div\n                    style={{\n                      visibility: 'visible',\n                      display: 'inline-block',\n                    }}\n                    {...draginfo.dragHandleProps}\n                    className=\"drag handle wrapper\"\n                  >\n                    <Icon name={dragSVG} size=\"18px\" />\n                  </div>\n                  <div className=\"column-area\">\n                    <div className=\"label\">\n                      <FormattedMessage id=\"Column\" defaultMessage=\"Column\" />{' '}\n                      {index + 1}\n                    </div>\n                    {value.blocks_layout?.items?.length > 1 ? (\n                      <button\n                        onClick={() => {\n                          const newFormData = {\n                            ...value,\n                            blocks: omit({ ...value.blocks }, [childId]),\n                            blocks_layout: {\n                              ...value.blocks_layout,\n                              items: without(\n                                [...value.blocks_layout?.items],\n                                childId,\n                              ),\n                            },\n                          };\n                          onChange(id, newFormData);\n                        }}\n                      >\n                        <Icon name={trashSVG} size=\"18px\" />\n                      </button>\n                    ) : (\n                      ''\n                    )}\n                  </div>\n                </div>\n              </div>\n            );\n          }}\n        </DragDropList>\n        {showAdd ? (\n          <button\n            onClick={() => {\n              const [newId, newData] = empty();\n              onChange(id, {\n                ...value,\n                blocks: {\n                  ...value.blocks,\n                  [newId]: newData,\n                },\n                blocks_layout: {\n                  ...value.blocks_layout,\n                  items: [...value.blocks_layout?.items, newId],\n                },\n              });\n            }}\n          >\n            <Icon name={plusSVG} size=\"18px\" />\n          </button>\n        ) : (\n          ''\n        )}\n      </div>\n    </FormFieldWrapper>\n  );\n};\n\nexport default ColumnsWidget;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Column","defaultMessage":"Column"}]}},"sourceType":"module","externalDependencies":[]}