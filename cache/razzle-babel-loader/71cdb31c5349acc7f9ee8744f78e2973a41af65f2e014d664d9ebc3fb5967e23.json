{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-columns-block/src/ColumnsBlock/ColumnsBlockView.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport React from 'react';\nimport config from '@plone/volto/registry';\nimport { Grid } from 'semantic-ui-react';\nimport { RenderBlocks } from '@plone/volto/components';\nimport { COLUMNSBLOCK } from '@eeacms/volto-columns-block/constants';\nimport cx from 'classnames';\nimport { getColumns } from './utils';\nimport { getStyle } from '@eeacms/volto-columns-block/Styles';\nconst getSide = (side, v) => {\n  return `${v !== null && v !== void 0 && v[side] ? `${v[side]}${v.unit ? v.unit : 'px'}` : '0'}`;\n};\nconst getSides = v => {\n  return `${getSide('top', v)} ${getSide('right', v)} ${getSide('bottom', v)} ${getSide('left', v)}`;\n};\nconst ColumnsBlockView = props => {\n  var _props$data, _props$data$title, _props$data$title$toL, _props$data$title$toL2, _props$data$title$toL3;\n  const {\n    gridSizes\n  } = config.blocks.blocksConfig[COLUMNSBLOCK];\n  const {\n    data = {},\n    gridSize = 12,\n    gridCols = []\n  } = props.data;\n  const metadata = props.metadata || props.properties;\n  const columnList = getColumns(data);\n  const customId = (_props$data = props.data) === null || _props$data === void 0 ? void 0 : (_props$data$title = _props$data.title) === null || _props$data$title === void 0 ? void 0 : (_props$data$title$toL = _props$data$title.toLowerCase()) === null || _props$data$title$toL === void 0 ? void 0 : (_props$data$title$toL2 = _props$data$title$toL.replace(/[^a-zA-Z-\\s]/gi, '')) === null || _props$data$title$toL2 === void 0 ? void 0 : (_props$data$title$toL3 = _props$data$title$toL2.trim()) === null || _props$data$title$toL3 === void 0 ? void 0 : _props$data$title$toL3.replace(/\\s+/gi, '-');\n  return __jsx(\"div\", {\n    className: \"columns-view\",\n    id: customId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, __jsx(Grid, {\n    columns: gridSize,\n    className: \"column-grid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, columnList.map(([id, column], index) => {\n    var _column$settings, _column$settings2, _column$settings3;\n    return __jsx(Grid.Column, _extends({\n      key: id\n    }, gridSizes[gridCols[index]] || gridCols[index], {\n      className: cx('column-blocks-wrapper', (_column$settings = column.settings) === null || _column$settings === void 0 ? void 0 : _column$settings.column_class)\n    }, getStyle(column.settings || {}), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }\n    }), __jsx(\"div\", {\n      style: (_column$settings2 = column.settings) !== null && _column$settings2 !== void 0 && _column$settings2.padding ? {\n        padding: getSides((_column$settings3 = column.settings) === null || _column$settings3 === void 0 ? void 0 : _column$settings3.padding)\n      } : {},\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 15\n      }\n    }, __jsx(RenderBlocks, _extends({}, props, {\n      metadata: metadata,\n      content: column,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }\n    }))));\n  })));\n};\nexport default ColumnsBlockView;","map":{"version":3,"names":["React","config","Grid","RenderBlocks","COLUMNSBLOCK","cx","getColumns","getStyle","getSide","side","v","unit","getSides","ColumnsBlockView","props","gridSizes","blocks","blocksConfig","data","gridSize","gridCols","metadata","properties","columnList","customId","title","toLowerCase","replace","trim","map","id","column","index","settings","column_class","padding"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-columns-block/src/ColumnsBlock/ColumnsBlockView.jsx"],"sourcesContent":["import React from 'react';\nimport config from '@plone/volto/registry';\nimport { Grid } from 'semantic-ui-react';\nimport { RenderBlocks } from '@plone/volto/components';\nimport { COLUMNSBLOCK } from '@eeacms/volto-columns-block/constants';\nimport cx from 'classnames';\n\nimport { getColumns } from './utils';\nimport { getStyle } from '@eeacms/volto-columns-block/Styles';\n\nconst getSide = (side, v) => {\n  return `${v?.[side] ? `${v[side]}${v.unit ? v.unit : 'px'}` : '0'}`;\n};\n\nconst getSides = (v) => {\n  return `${getSide('top', v)} ${getSide('right', v)} ${getSide(\n    'bottom',\n    v,\n  )} ${getSide('left', v)}`;\n};\n\nconst ColumnsBlockView = (props) => {\n  const { gridSizes } = config.blocks.blocksConfig[COLUMNSBLOCK];\n  const { data = {}, gridSize = 12, gridCols = [] } = props.data;\n  const metadata = props.metadata || props.properties;\n  const columnList = getColumns(data);\n  const customId = props.data?.title\n    ?.toLowerCase()\n    ?.replace(/[^a-zA-Z-\\s]/gi, '')\n    ?.trim()\n    ?.replace(/\\s+/gi, '-');\n\n  return (\n    <div className=\"columns-view\" id={customId}>\n      <Grid columns={gridSize} className=\"column-grid\">\n        {columnList.map(([id, column], index) => {\n          return (\n            <Grid.Column\n              key={id}\n              {...(gridSizes[gridCols[index]] || gridCols[index])}\n              className={cx(\n                'column-blocks-wrapper',\n                column.settings?.column_class,\n              )}\n              {...getStyle(column.settings || {})}\n            >\n              <div\n                style={\n                  column.settings?.padding\n                    ? {\n                        padding: getSides(column.settings?.padding),\n                      }\n                    : {}\n                }\n              >\n                <RenderBlocks {...props} metadata={metadata} content={column} />\n              </div>\n            </Grid.Column>\n          );\n        })}\n      </Grid>\n    </div>\n  );\n};\n\nexport default ColumnsBlockView;\n"],"mappings":";;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,uBAAuB;AAC1C,SAASC,IAAI,QAAQ,mBAAmB;AACxC,SAASC,YAAY,QAAQ,yBAAyB;AACtD,SAASC,YAAY,QAAQ,uCAAuC;AACpE,OAAOC,EAAE,MAAM,YAAY;AAE3B,SAASC,UAAU,QAAQ,SAAS;AACpC,SAASC,QAAQ,QAAQ,oCAAoC;AAE7D,MAAMC,OAAO,GAAG,CAACC,IAAI,EAAEC,CAAC,KAAK;EAC3B,OAAQ,GAAEA,CAAC,aAADA,CAAC,eAADA,CAAC,CAAGD,IAAI,CAAC,GAAI,GAAEC,CAAC,CAACD,IAAI,CAAE,GAAEC,CAAC,CAACC,IAAI,GAAGD,CAAC,CAACC,IAAI,GAAG,IAAK,EAAC,GAAG,GAAI,EAAC;AACrE,CAAC;AAED,MAAMC,QAAQ,GAAIF,CAAC,IAAK;EACtB,OAAQ,GAAEF,OAAO,CAAC,KAAK,EAAEE,CAAC,CAAE,IAAGF,OAAO,CAAC,OAAO,EAAEE,CAAC,CAAE,IAAGF,OAAO,CAC3D,QAAQ,EACRE,CAAC,CACD,IAAGF,OAAO,CAAC,MAAM,EAAEE,CAAC,CAAE,EAAC;AAC3B,CAAC;AAED,MAAMG,gBAAgB,GAAIC,KAAK,IAAK;EAAA;EAClC,MAAM;IAAEC;EAAU,CAAC,GAAGd,MAAM,CAACe,MAAM,CAACC,YAAY,CAACb,YAAY,CAAC;EAC9D,MAAM;IAAEc,IAAI,GAAG,CAAC,CAAC;IAAEC,QAAQ,GAAG,EAAE;IAAEC,QAAQ,GAAG;EAAG,CAAC,GAAGN,KAAK,CAACI,IAAI;EAC9D,MAAMG,QAAQ,GAAGP,KAAK,CAACO,QAAQ,IAAIP,KAAK,CAACQ,UAAU;EACnD,MAAMC,UAAU,GAAGjB,UAAU,CAACY,IAAI,CAAC;EACnC,MAAMM,QAAQ,kBAAGV,KAAK,CAACI,IAAI,qEAAV,YAAYO,KAAK,+EAAjB,kBACbC,WAAW,EAAE,oFADA,sBAEbC,OAAO,CAAC,gBAAgB,EAAE,EAAE,CAAC,qFAFhB,uBAGbC,IAAI,EAAE,2DAHO,uBAIbD,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC;EAEzB,OACE;IAAK,SAAS,EAAC,cAAc;IAAC,EAAE,EAAEH,QAAS;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACzC,MAAC,IAAI;IAAC,OAAO,EAAEL,QAAS;IAAC,SAAS,EAAC,aAAa;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAC7CI,UAAU,CAACM,GAAG,CAAC,CAAC,CAACC,EAAE,EAAEC,MAAM,CAAC,EAAEC,KAAK,KAAK;IAAA;IACvC,OACE,MAAC,IAAI,CAAC,MAAM;MACV,GAAG,EAAEF;IAAG,GACHf,SAAS,CAACK,QAAQ,CAACY,KAAK,CAAC,CAAC,IAAIZ,QAAQ,CAACY,KAAK,CAAC;MAClD,SAAS,EAAE3B,EAAE,CACX,uBAAuB,sBACvB0B,MAAM,CAACE,QAAQ,qDAAf,iBAAiBC,YAAY;IAC7B,GACE3B,QAAQ,CAACwB,MAAM,CAACE,QAAQ,IAAI,CAAC,CAAC,CAAC;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,IAEnC;MACE,KAAK,EACH,qBAAAF,MAAM,CAACE,QAAQ,8CAAf,kBAAiBE,OAAO,GACpB;QACEA,OAAO,EAAEvB,QAAQ,sBAACmB,MAAM,CAACE,QAAQ,sDAAf,kBAAiBE,OAAO;MAC5C,CAAC,GACD,CAAC,CACN;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAED,MAAC,YAAY,eAAKrB,KAAK;MAAE,QAAQ,EAAEO,QAAS;MAAC,OAAO,EAAEU,MAAO;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAG,CAC5D,CACM;EAElB,CAAC,CAAC,CACG,CACH;AAEV,CAAC;AAED,eAAelB,gBAAgB"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}