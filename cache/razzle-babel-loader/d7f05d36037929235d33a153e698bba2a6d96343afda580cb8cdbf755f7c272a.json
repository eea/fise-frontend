{"ast":null,"code":"import _isEqual from \"lodash/isEqual\";\nimport _map from \"lodash/map\";\nimport _keys from \"lodash/keys\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Form/InlineForm.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Accordion, Segment, Message } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport AnimateHeight from 'react-animate-height';\nimport { Field, Icon } from '@plone/volto/components';\nimport upSVG from '@plone/volto/icons/up-key.svg';\nimport downSVG from '@plone/volto/icons/down-key.svg';\nconst messages = defineMessages({\n  editValues: {\n    \"id\": \"Edit values\",\n    \"defaultMessage\": \"Edit values\"\n  },\n  error: {\n    \"id\": \"Error\",\n    \"defaultMessage\": \"Error\"\n  },\n  thereWereSomeErrors: {\n    \"id\": \"There were some errors\",\n    \"defaultMessage\": \"There were some errors\"\n  }\n});\nconst InlineForm = props => {\n  const {\n    block,\n    description,\n    error,\n    // Such as {message: \"It's not good\"}\n    errors = {},\n    formData,\n    onChangeField,\n    schema,\n    title,\n    icon,\n    headerActions,\n    footer,\n    focusIndex,\n    intl\n  } = props;\n  const _ = intl.formatMessage;\n  const defaultFieldset = schema.fieldsets.find(o => o.id === 'default');\n  const other = schema.fieldsets.filter(o => o.id !== 'default');\n  React.useEffect(() => {\n    // Will set field values from schema, by matching the default values\n\n    const objectSchema = typeof schema === 'function' ? schema(props) : schema;\n    const initialData = _objectSpread(_objectSpread({}, Object.keys(objectSchema.properties).reduce((accumulator, currentField) => {\n      return objectSchema.properties[currentField].default ? _objectSpread(_objectSpread({}, accumulator), {}, {\n        [currentField]: objectSchema.properties[currentField].default\n      }) : accumulator;\n    }, {})), formData);\n    Object.keys(initialData).forEach(k => {\n      if (!_isEqual(initialData[k], formData === null || formData === void 0 ? void 0 : formData[k])) {\n        onChangeField(k, initialData[k]);\n      }\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const [currentActiveFieldset, setCurrentActiveFieldset] = React.useState(0);\n  function handleCurrentActiveFieldset(e, blockProps) {\n    const {\n      index\n    } = blockProps;\n    const newIndex = currentActiveFieldset === index ? -1 : index;\n    setCurrentActiveFieldset(newIndex);\n  }\n  return __jsx(\"div\", {\n    className: \"ui form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }\n  }, title && __jsx(\"header\", {\n    className: \"header pulled\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, icon, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, title || _(messages.editValues)), headerActions), description && __jsx(Segment, {\n    secondary: true,\n    className: \"attached\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }, description), _keys(errors).length > 0 && __jsx(Message, {\n    icon: \"warning\",\n    negative: true,\n    attached: true,\n    header: _(messages.error),\n    content: _(messages.thereWereSomeErrors),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }), error && __jsx(Message, {\n    icon: \"warning\",\n    negative: true,\n    attached: true,\n    header: _(messages.error),\n    content: error.message,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }), __jsx(\"div\", {\n    id: `blockform-fieldset-${defaultFieldset.id}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }\n  }, __jsx(Segment, {\n    className: \"form attached\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }\n  }, _map(defaultFieldset.fields, (field, index) => __jsx(Field, _extends({}, schema.properties[field], {\n    id: field,\n    fieldSet: defaultFieldset.title.toLowerCase(),\n    focus: index === focusIndex,\n    value: formData[field],\n    required: schema.required.indexOf(field) !== -1,\n    onChange: (id, value) => {\n      onChangeField(id, value);\n    },\n    key: field,\n    error: errors[field],\n    block: block,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }))))), other.map((fieldset, index) => __jsx(Accordion, {\n    fluid: true,\n    styled: true,\n    className: \"form\",\n    key: fieldset.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    key: fieldset.id,\n    id: `blockform-fieldset-${fieldset.id}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 11\n    }\n  }, __jsx(Accordion.Title, {\n    active: currentActiveFieldset === index,\n    index: index,\n    onClick: handleCurrentActiveFieldset,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }, fieldset.title && __jsx(React.Fragment, null, fieldset.title), currentActiveFieldset === index ? __jsx(Icon, {\n    name: upSVG,\n    size: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 17\n    }\n  }) : __jsx(Icon, {\n    name: downSVG,\n    size: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 17\n    }\n  })), __jsx(Accordion.Content, {\n    active: currentActiveFieldset === index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }\n  }, __jsx(AnimateHeight, {\n    animateOpacity: true,\n    duration: 500,\n    height: currentActiveFieldset === index ? 'auto' : 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 15\n    }\n  }, __jsx(Segment, {\n    className: \"attached\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 17\n    }\n  }, _map(fieldset.fields, field => __jsx(Field, _extends({}, schema.properties[field], {\n    id: field,\n    value: formData[field],\n    required: schema.required.indexOf(field) !== -1,\n    onChange: (id, value) => {\n      onChangeField(id, value);\n    },\n    key: field,\n    error: errors[field],\n    block: block,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 21\n    }\n  }))))))))), footer);\n};\nInlineForm.defaultProps = {\n  block: null,\n  description: null,\n  formData: null,\n  onChangeField: null,\n  error: null,\n  errors: {},\n  schema: {},\n  focusIndex: null\n};\nInlineForm.propTypes = {\n  block: PropTypes.string,\n  description: PropTypes.string,\n  schema: PropTypes.shape({\n    fieldsets: PropTypes.arrayOf(PropTypes.shape({\n      fields: PropTypes.arrayOf(PropTypes.string),\n      id: PropTypes.string,\n      title: PropTypes.string\n    })),\n    properties: PropTypes.objectOf(PropTypes.any),\n    definitions: PropTypes.objectOf(PropTypes.any),\n    required: PropTypes.arrayOf(PropTypes.string)\n  }),\n  formData: PropTypes.objectOf(PropTypes.any),\n  pathname: PropTypes.string,\n  onChangeField: PropTypes.func,\n  error: PropTypes.shape({\n    message: PropTypes.string\n  }),\n  focusIndex: PropTypes.number\n};\nexport default injectIntl(InlineForm, {\n  forwardRef: true\n});","map":{"version":3,"names":["React","PropTypes","Accordion","Segment","Message","defineMessages","injectIntl","AnimateHeight","Field","Icon","upSVG","downSVG","messages","editValues","error","thereWereSomeErrors","InlineForm","props","block","description","errors","formData","onChangeField","schema","title","icon","headerActions","footer","focusIndex","intl","_","formatMessage","defaultFieldset","fieldsets","find","o","id","other","filter","useEffect","objectSchema","initialData","Object","keys","properties","reduce","accumulator","currentField","default","forEach","k","currentActiveFieldset","setCurrentActiveFieldset","useState","handleCurrentActiveFieldset","e","blockProps","index","newIndex","length","message","fields","field","toLowerCase","required","indexOf","value","map","fieldset","defaultProps","propTypes","string","shape","arrayOf","objectOf","any","definitions","pathname","func","number","forwardRef"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Form/InlineForm.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Accordion, Segment, Message } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport AnimateHeight from 'react-animate-height';\nimport { keys, map, isEqual } from 'lodash';\n\nimport { Field, Icon } from '@plone/volto/components';\n\nimport upSVG from '@plone/volto/icons/up-key.svg';\nimport downSVG from '@plone/volto/icons/down-key.svg';\n\nconst messages = defineMessages({\n  editValues: {\n    id: 'Edit values',\n    defaultMessage: 'Edit values',\n  },\n  error: {\n    id: 'Error',\n    defaultMessage: 'Error',\n  },\n  thereWereSomeErrors: {\n    id: 'There were some errors',\n    defaultMessage: 'There were some errors',\n  },\n});\n\nconst InlineForm = (props) => {\n  const {\n    block,\n    description,\n    error, // Such as {message: \"It's not good\"}\n    errors = {},\n    formData,\n    onChangeField,\n    schema,\n    title,\n    icon,\n    headerActions,\n    footer,\n    focusIndex,\n    intl,\n  } = props;\n  const _ = intl.formatMessage;\n  const defaultFieldset = schema.fieldsets.find((o) => o.id === 'default');\n  const other = schema.fieldsets.filter((o) => o.id !== 'default');\n\n  React.useEffect(() => {\n    // Will set field values from schema, by matching the default values\n\n    const objectSchema = typeof schema === 'function' ? schema(props) : schema;\n    const initialData = {\n      ...Object.keys(objectSchema.properties).reduce(\n        (accumulator, currentField) => {\n          return objectSchema.properties[currentField].default\n            ? {\n                ...accumulator,\n                [currentField]: objectSchema.properties[currentField].default,\n              }\n            : accumulator;\n        },\n        {},\n      ),\n      ...formData,\n    };\n\n    Object.keys(initialData).forEach((k) => {\n      if (!isEqual(initialData[k], formData?.[k])) {\n        onChangeField(k, initialData[k]);\n      }\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const [currentActiveFieldset, setCurrentActiveFieldset] = React.useState(0);\n  function handleCurrentActiveFieldset(e, blockProps) {\n    const { index } = blockProps;\n    const newIndex = currentActiveFieldset === index ? -1 : index;\n\n    setCurrentActiveFieldset(newIndex);\n  }\n\n  return (\n    <div className=\"ui form\">\n      {title && (\n        <header className=\"header pulled\">\n          {icon}\n          <h2>{title || _(messages.editValues)}</h2>\n          {headerActions}\n        </header>\n      )}\n      {description && (\n        <Segment secondary className=\"attached\">\n          {description}\n        </Segment>\n      )}\n      {keys(errors).length > 0 && (\n        <Message\n          icon=\"warning\"\n          negative\n          attached\n          header={_(messages.error)}\n          content={_(messages.thereWereSomeErrors)}\n        />\n      )}\n      {error && (\n        <Message\n          icon=\"warning\"\n          negative\n          attached\n          header={_(messages.error)}\n          content={error.message}\n        />\n      )}\n\n      <div id={`blockform-fieldset-${defaultFieldset.id}`}>\n        <Segment className=\"form attached\">\n          {map(defaultFieldset.fields, (field, index) => (\n            <Field\n              {...schema.properties[field]}\n              id={field}\n              fieldSet={defaultFieldset.title.toLowerCase()}\n              focus={index === focusIndex}\n              value={formData[field]}\n              required={schema.required.indexOf(field) !== -1}\n              onChange={(id, value) => {\n                onChangeField(id, value);\n              }}\n              key={field}\n              error={errors[field]}\n              block={block}\n            />\n          ))}\n        </Segment>\n      </div>\n\n      {other.map((fieldset, index) => (\n        <Accordion fluid styled className=\"form\" key={fieldset.id}>\n          <div key={fieldset.id} id={`blockform-fieldset-${fieldset.id}`}>\n            <Accordion.Title\n              active={currentActiveFieldset === index}\n              index={index}\n              onClick={handleCurrentActiveFieldset}\n            >\n              {fieldset.title && <>{fieldset.title}</>}\n              {currentActiveFieldset === index ? (\n                <Icon name={upSVG} size=\"20px\" />\n              ) : (\n                <Icon name={downSVG} size=\"20px\" />\n              )}\n            </Accordion.Title>\n            <Accordion.Content active={currentActiveFieldset === index}>\n              <AnimateHeight\n                animateOpacity\n                duration={500}\n                height={currentActiveFieldset === index ? 'auto' : 0}\n              >\n                <Segment className=\"attached\">\n                  {map(fieldset.fields, (field) => (\n                    <Field\n                      {...schema.properties[field]}\n                      id={field}\n                      value={formData[field]}\n                      required={schema.required.indexOf(field) !== -1}\n                      onChange={(id, value) => {\n                        onChangeField(id, value);\n                      }}\n                      key={field}\n                      error={errors[field]}\n                      block={block}\n                    />\n                  ))}\n                </Segment>\n              </AnimateHeight>\n            </Accordion.Content>\n          </div>\n        </Accordion>\n      ))}\n      {footer}\n    </div>\n  );\n};\n\nInlineForm.defaultProps = {\n  block: null,\n  description: null,\n  formData: null,\n  onChangeField: null,\n  error: null,\n  errors: {},\n  schema: {},\n  focusIndex: null,\n};\n\nInlineForm.propTypes = {\n  block: PropTypes.string,\n  description: PropTypes.string,\n  schema: PropTypes.shape({\n    fieldsets: PropTypes.arrayOf(\n      PropTypes.shape({\n        fields: PropTypes.arrayOf(PropTypes.string),\n        id: PropTypes.string,\n        title: PropTypes.string,\n      }),\n    ),\n    properties: PropTypes.objectOf(PropTypes.any),\n    definitions: PropTypes.objectOf(PropTypes.any),\n    required: PropTypes.arrayOf(PropTypes.string),\n  }),\n  formData: PropTypes.objectOf(PropTypes.any),\n  pathname: PropTypes.string,\n  onChangeField: PropTypes.func,\n  error: PropTypes.shape({\n    message: PropTypes.string,\n  }),\n  focusIndex: PropTypes.number,\n};\n\nexport default injectIntl(InlineForm, { forwardRef: true });\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Edit values","defaultMessage":"Edit values"},{"id":"Error","defaultMessage":"Error"},{"id":"There were some errors","defaultMessage":"There were some errors"}]}},"sourceType":"module","externalDependencies":[]}