{"ast":null,"code":"import _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n/**\n * Upload reducer.\n * @module reducers/content\n *\n * Customized copy of Volto's content reducer\n */\n\nimport config from '@plone/volto/registry';\nimport { UPLOAD_CONTENT } from 'volto-slate/constants';\nvar initialState = {};\n\n/**\n * Content reducer.\n * @function content\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function upload_content() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var result = action.result,\n    origin = action.origin;\n  switch (action.type) {\n    case \"\".concat(UPLOAD_CONTENT, \"_PENDING\"):\n      return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, origin, _objectSpread(_objectSpread({}, state[origin]), {}, {\n        upload: {\n          loading: true,\n          loaded: false,\n          error: null\n        }\n      })));\n    case \"\".concat(UPLOAD_CONTENT, \"_SUCCESS\"):\n      return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, origin, _objectSpread(_objectSpread({}, state[origin]), {}, {\n        data: _objectSpread(_objectSpread({}, result), {}, {\n          items: action.result && action.result.items && action.result.items.map(function (item) {\n            return _objectSpread(_objectSpread({}, item), {}, {\n              url: item['@id'].replace(config.settings.apiPath, '')\n            });\n          })\n        }),\n        upload: {\n          loading: false,\n          loaded: true,\n          error: null\n        }\n      })));\n    case \"\".concat(UPLOAD_CONTENT, \"_FAIL\"):\n      return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, origin, _objectSpread(_objectSpread({}, state[origin]), {}, {\n        data: null,\n        upload: {\n          loading: false,\n          loaded: false,\n          error: action.error\n        }\n      })));\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["config","UPLOAD_CONTENT","initialState","upload_content","state","action","result","origin","type","upload","loading","loaded","error","data","items","map","item","url","replace","settings","apiPath"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-slate/src/reducers/content.js"],"sourcesContent":["/**\n * Upload reducer.\n * @module reducers/content\n *\n * Customized copy of Volto's content reducer\n */\n\nimport config from '@plone/volto/registry';\n\nimport { UPLOAD_CONTENT } from 'volto-slate/constants';\n\nconst initialState = {};\n\n/**\n * Content reducer.\n * @function content\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function upload_content(state = initialState, action = {}) {\n  let { result, origin } = action;\n  switch (action.type) {\n    case `${UPLOAD_CONTENT}_PENDING`:\n      return {\n        ...state,\n        [origin]: {\n          ...state[origin],\n          upload: {\n            loading: true,\n            loaded: false,\n            error: null,\n          },\n        },\n      };\n    case `${UPLOAD_CONTENT}_SUCCESS`:\n      return {\n        ...state,\n        [origin]: {\n          ...state[origin],\n          data: {\n            ...result,\n            items:\n              action.result &&\n              action.result.items &&\n              action.result.items.map((item) => ({\n                ...item,\n                url: item['@id'].replace(config.settings.apiPath, ''),\n              })),\n          },\n          upload: {\n            loading: false,\n            loaded: true,\n            error: null,\n          },\n        },\n      };\n    case `${UPLOAD_CONTENT}_FAIL`:\n      return {\n        ...state,\n        [origin]: {\n          ...state[origin],\n          data: null,\n          upload: {\n            loading: false,\n            loaded: false,\n            error: action.error,\n          },\n        },\n      };\n    default:\n      return state;\n  }\n}\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,MAAM,MAAM,uBAAuB;AAE1C,SAASC,cAAc,QAAQ,uBAAuB;AAEtD,IAAMC,YAAY,GAAG,CAAC,CAAC;;AAEvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,cAAc,GAAoC;EAAA,IAAnCC,KAAK,uEAAGF,YAAY;EAAA,IAAEG,MAAM,uEAAG,CAAC,CAAC;EACtE,IAAMC,MAAM,GAAaD,MAAM,CAAzBC,MAAM;IAAEC,MAAM,GAAKF,MAAM,CAAjBE,MAAM;EACpB,QAAQF,MAAM,CAACG,IAAI;IACjB,eAAQP,cAAc;MACpB,uCACKG,KAAK,2BACPG,MAAM,kCACFH,KAAK,CAACG,MAAM,CAAC;QAChBE,MAAM,EAAE;UACNC,OAAO,EAAE,IAAI;UACbC,MAAM,EAAE,KAAK;UACbC,KAAK,EAAE;QACT;MAAC;IAGP,eAAQX,cAAc;MACpB,uCACKG,KAAK,2BACPG,MAAM,kCACFH,KAAK,CAACG,MAAM,CAAC;QAChBM,IAAI,kCACCP,MAAM;UACTQ,KAAK,EACHT,MAAM,CAACC,MAAM,IACbD,MAAM,CAACC,MAAM,CAACQ,KAAK,IACnBT,MAAM,CAACC,MAAM,CAACQ,KAAK,CAACC,GAAG,CAAC,UAACC,IAAI;YAAA,uCACxBA,IAAI;cACPC,GAAG,EAAED,IAAI,CAAC,KAAK,CAAC,CAACE,OAAO,CAAClB,MAAM,CAACmB,QAAQ,CAACC,OAAO,EAAE,EAAE;YAAC;UAAA,CACrD;QAAC,EACN;QACDX,MAAM,EAAE;UACNC,OAAO,EAAE,KAAK;UACdC,MAAM,EAAE,IAAI;UACZC,KAAK,EAAE;QACT;MAAC;IAGP,eAAQX,cAAc;MACpB,uCACKG,KAAK,2BACPG,MAAM,kCACFH,KAAK,CAACG,MAAM,CAAC;QAChBM,IAAI,EAAE,IAAI;QACVJ,MAAM,EAAE;UACNC,OAAO,EAAE,KAAK;UACdC,MAAM,EAAE,KAAK;UACbC,KAAK,EAAEP,MAAM,CAACO;QAChB;MAAC;IAGP;MACE,OAAOR,KAAK;EAAC;AAEnB"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}