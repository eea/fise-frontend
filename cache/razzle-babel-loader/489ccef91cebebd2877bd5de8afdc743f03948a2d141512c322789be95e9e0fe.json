{"ast":null,"code":"import { getBaseUrl, flattenToAppURL } from '@plone/volto/helpers';\nexport function getBasePath(url) {\n  return flattenToAppURL(getBaseUrl(url));\n}\nexport function getLocation(href) {\n  var match = href.match(/^(https?:)\\/\\/(([^:/?#]*)(?::([0-9]+))?)([/]{0,1}[^?#]*)(\\?[^#]*|)(#.*|)$/);\n  return match && {\n    href: href,\n    protocol: match[1],\n    host: match[2],\n    hostname: match[3],\n    port: match[4],\n    pathname: match[5],\n    search: match[6],\n    hash: match[7]\n  };\n}\nexport function samePath(url, path) {\n  // returns true if the router path is equal to the given url path\n  var parsed = getLocation(url);\n  var clean = getBasePath(url).replace(parsed.hash, '').replace(parsed.search, '').replace(/\\/$/, '');\n  var cleanPath = path.replace(/\\/$/, '');\n  return clean === cleanPath;\n}","map":{"version":3,"names":["getBaseUrl","flattenToAppURL","getBasePath","url","getLocation","href","match","protocol","host","hostname","port","pathname","search","hash","samePath","path","parsed","clean","replace","cleanPath"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-forests-theme/src/helpers/index.js"],"sourcesContent":["import { getBaseUrl, flattenToAppURL } from '@plone/volto/helpers';\n\nexport function getBasePath(url) {\n  return flattenToAppURL(getBaseUrl(url));\n}\n\nexport function getLocation(href) {\n  var match = href.match(\n    /^(https?:)\\/\\/(([^:/?#]*)(?::([0-9]+))?)([/]{0,1}[^?#]*)(\\?[^#]*|)(#.*|)$/,\n  );\n  return (\n    match && {\n      href: href,\n      protocol: match[1],\n      host: match[2],\n      hostname: match[3],\n      port: match[4],\n      pathname: match[5],\n      search: match[6],\n      hash: match[7],\n    }\n  );\n}\n\nexport function samePath(url, path) {\n  // returns true if the router path is equal to the given url path\n  const parsed = getLocation(url);\n  const clean = getBasePath(url)\n    .replace(parsed.hash, '')\n    .replace(parsed.search, '')\n    .replace(/\\/$/, '');\n\n  const cleanPath = path.replace(/\\/$/, '');\n  return clean === cleanPath;\n}\n"],"mappings":"AAAA,SAASA,UAAU,EAAEC,eAAe,QAAQ,sBAAsB;AAElE,OAAO,SAASC,WAAW,CAACC,GAAG,EAAE;EAC/B,OAAOF,eAAe,CAACD,UAAU,CAACG,GAAG,CAAC,CAAC;AACzC;AAEA,OAAO,SAASC,WAAW,CAACC,IAAI,EAAE;EAChC,IAAIC,KAAK,GAAGD,IAAI,CAACC,KAAK,CACpB,2EAA2E,CAC5E;EACD,OACEA,KAAK,IAAI;IACPD,IAAI,EAAEA,IAAI;IACVE,QAAQ,EAAED,KAAK,CAAC,CAAC,CAAC;IAClBE,IAAI,EAAEF,KAAK,CAAC,CAAC,CAAC;IACdG,QAAQ,EAAEH,KAAK,CAAC,CAAC,CAAC;IAClBI,IAAI,EAAEJ,KAAK,CAAC,CAAC,CAAC;IACdK,QAAQ,EAAEL,KAAK,CAAC,CAAC,CAAC;IAClBM,MAAM,EAAEN,KAAK,CAAC,CAAC,CAAC;IAChBO,IAAI,EAAEP,KAAK,CAAC,CAAC;EACf,CAAC;AAEL;AAEA,OAAO,SAASQ,QAAQ,CAACX,GAAG,EAAEY,IAAI,EAAE;EAClC;EACA,IAAMC,MAAM,GAAGZ,WAAW,CAACD,GAAG,CAAC;EAC/B,IAAMc,KAAK,GAAGf,WAAW,CAACC,GAAG,CAAC,CAC3Be,OAAO,CAACF,MAAM,CAACH,IAAI,EAAE,EAAE,CAAC,CACxBK,OAAO,CAACF,MAAM,CAACJ,MAAM,EAAE,EAAE,CAAC,CAC1BM,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;EAErB,IAAMC,SAAS,GAAGJ,IAAI,CAACG,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;EACzC,OAAOD,KAAK,KAAKE,SAAS;AAC5B"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}