{"ast":null,"code":"import config from '@plone/volto/registry';\nexport * from './backspaceInList';\nexport * from './breakBlocks';\nexport * from './indentListItems';\nexport * from './joinBlocks';\nexport * from './moveListItems';\nexport * from './softBreak';\nexport * from './traverseBlocks';\nexport * from './unwrapEmptyString';\nexport * from './slashMenu';\nexport * from './cancelEsc';\n\n/**\n * Takes all the handlers from `slate.textblockKeyboardHandlers` that are\n * associated with the key that was pressed to generate the `event` and runs\n * them all until one of them returns `true`, moment when the rest of the\n * handlers are skipped.\n * @param {Editor} editor\n * @param {KeyboardEvent} event\n */\nexport function handleKey(_ref) {\n  var editor = _ref.editor,\n    event = _ref.event;\n  var slate = config.settings.slate;\n  var handlers = slate.textblockKeyboardHandlers[event.key];\n  if (handlers) {\n    // a handler can return `true` to signify it has handled the event in this\n    // case, the execution flow is stopped\n    return handlers.find(function (handler) {\n      return handler({\n        editor: editor,\n        event: event\n      });\n    });\n  }\n}\n\n/**\n * Takes all the handlers from `slate.textblockDetachedKeyboardHandlers` that are\n * associated with the key that was pressed to generate the `event` and runs\n * them all until one of them returns `true`, moment when the rest of the\n * handlers are skipped.\n * @param {Editor} editor\n * @param {KeyboardEvent} event\n */\nexport function handleKeyDetached(_ref2) {\n  var editor = _ref2.editor,\n    event = _ref2.event;\n  var slate = config.settings.slate;\n  var handlers = slate.textblockDetachedKeyboardHandlers[event.key];\n  if (handlers) {\n    // a handler can return `true` to signify it has handled the event in this\n    // case, the execution flow is stopped\n    return handlers.find(function (handler) {\n      return handler({\n        editor: editor,\n        event: event\n      });\n    });\n  }\n}","map":{"version":3,"names":["config","handleKey","editor","event","slate","settings","handlers","textblockKeyboardHandlers","key","find","handler","handleKeyDetached","textblockDetachedKeyboardHandlers"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/packages/volto-slate/src/blocks/Text/keyboard/index.js"],"sourcesContent":["import config from '@plone/volto/registry';\n\nexport * from './backspaceInList';\nexport * from './breakBlocks';\nexport * from './indentListItems';\nexport * from './joinBlocks';\nexport * from './moveListItems';\nexport * from './softBreak';\nexport * from './traverseBlocks';\nexport * from './unwrapEmptyString';\nexport * from './slashMenu';\nexport * from './cancelEsc';\n\n/**\n * Takes all the handlers from `slate.textblockKeyboardHandlers` that are\n * associated with the key that was pressed to generate the `event` and runs\n * them all until one of them returns `true`, moment when the rest of the\n * handlers are skipped.\n * @param {Editor} editor\n * @param {KeyboardEvent} event\n */\nexport function handleKey({ editor, event }) {\n  const { slate } = config.settings;\n\n  const handlers = slate.textblockKeyboardHandlers[event.key];\n\n  if (handlers) {\n    // a handler can return `true` to signify it has handled the event in this\n    // case, the execution flow is stopped\n    return handlers.find((handler) => handler({ editor, event }));\n  }\n}\n\n/**\n * Takes all the handlers from `slate.textblockDetachedKeyboardHandlers` that are\n * associated with the key that was pressed to generate the `event` and runs\n * them all until one of them returns `true`, moment when the rest of the\n * handlers are skipped.\n * @param {Editor} editor\n * @param {KeyboardEvent} event\n */\nexport function handleKeyDetached({ editor, event }) {\n  const { slate } = config.settings;\n\n  const handlers = slate.textblockDetachedKeyboardHandlers[event.key];\n\n  if (handlers) {\n    // a handler can return `true` to signify it has handled the event in this\n    // case, the execution flow is stopped\n    return handlers.find((handler) => handler({ editor, event }));\n  }\n}\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,uBAAuB;AAE1C,cAAc,mBAAmB;AACjC,cAAc,eAAe;AAC7B,cAAc,mBAAmB;AACjC,cAAc,cAAc;AAC5B,cAAc,iBAAiB;AAC/B,cAAc,aAAa;AAC3B,cAAc,kBAAkB;AAChC,cAAc,qBAAqB;AACnC,cAAc,aAAa;AAC3B,cAAc,aAAa;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,SAAS,OAAoB;EAAA,IAAjBC,MAAM,QAANA,MAAM;IAAEC,KAAK,QAALA,KAAK;EACvC,IAAQC,KAAK,GAAKJ,MAAM,CAACK,QAAQ,CAAzBD,KAAK;EAEb,IAAME,QAAQ,GAAGF,KAAK,CAACG,yBAAyB,CAACJ,KAAK,CAACK,GAAG,CAAC;EAE3D,IAAIF,QAAQ,EAAE;IACZ;IACA;IACA,OAAOA,QAAQ,CAACG,IAAI,CAAC,UAACC,OAAO;MAAA,OAAKA,OAAO,CAAC;QAAER,MAAM,EAANA,MAAM;QAAEC,KAAK,EAALA;MAAM,CAAC,CAAC;IAAA,EAAC;EAC/D;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASQ,iBAAiB,QAAoB;EAAA,IAAjBT,MAAM,SAANA,MAAM;IAAEC,KAAK,SAALA,KAAK;EAC/C,IAAQC,KAAK,GAAKJ,MAAM,CAACK,QAAQ,CAAzBD,KAAK;EAEb,IAAME,QAAQ,GAAGF,KAAK,CAACQ,iCAAiC,CAACT,KAAK,CAACK,GAAG,CAAC;EAEnE,IAAIF,QAAQ,EAAE;IACZ;IACA;IACA,OAAOA,QAAQ,CAACG,IAAI,CAAC,UAACC,OAAO;MAAA,OAAKA,OAAO,CAAC;QAAER,MAAM,EAANA,MAAM;QAAEC,KAAK,EAALA;MAAM,CAAC,CAAC;IAAA,EAAC;EAC/D;AACF"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}