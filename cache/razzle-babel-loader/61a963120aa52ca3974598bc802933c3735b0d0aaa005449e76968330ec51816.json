{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-forests-theme/src/customizations/volto/components/manage/Blocks/Video/VideoSidebar.jsx\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form } from 'semantic-ui-react';\nimport { Accordion, Grid, Segment } from 'semantic-ui-react';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport { CheckboxWidget, Icon, TextWidget } from '@plone/volto/components';\nimport AlignBlock from '@plone/volto/components/manage/Sidebar/AlignBlock';\nimport videoSVG from '@plone/volto/icons/videocamera.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport upSVG from '@plone/volto/icons/up-key.svg';\nimport downSVG from '@plone/volto/icons/down-key.svg';\nimport navTreeSVG from '@plone/volto/icons/nav.svg';\nconst messages = defineMessages({\n  LinkTo: {\n    \"id\": \"Link to\",\n    \"defaultMessage\": \"Link to\"\n  },\n  openLinkInNewTab: {\n    \"id\": \"Open in a new tab\",\n    \"defaultMessage\": \"Open in a new tab\"\n  },\n  videoURL: {\n    \"id\": \"Video URL\",\n    \"defaultMessage\": \"Video URL\"\n  },\n  Preview_image: {\n    \"id\": \"Preview Image URL\",\n    \"defaultMessage\": \"Preview Image URL\"\n  }\n});\nconst VideoSidebar = ({\n  data,\n  block,\n  onChangeBlock,\n  openObjectBrowser,\n  required = false,\n  resetSubmitUrl,\n  intl\n}) => {\n  var _data$preview_image;\n  const {\n    0: activeAccIndex,\n    1: setActiveAccIndex\n  } = useState(0);\n  function handleAccClick(e, titleProps) {\n    const {\n      index\n    } = titleProps;\n    const newIndex = activeAccIndex === index ? -1 : index;\n    setActiveAccIndex(newIndex);\n  }\n  return __jsx(Segment.Group, {\n    raised: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, __jsx(\"header\", {\n    className: \"header pulled\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"Video\",\n    defaultMessage: \"Video\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }))), !data.url && __jsx(React.Fragment, null, __jsx(Segment, {\n    className: \"sidebar-metadata-container\",\n    secondary: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 11\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"No video selected\",\n    defaultMessage: \"No video selected\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  }), __jsx(Icon, {\n    name: videoSVG,\n    size: \"100px\",\n    color: \"#b8c6c8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }))), data.url && __jsx(React.Fragment, null, __jsx(Segment, {\n    className: \"form sidebar-image-data\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 11\n    }\n  }, data.url && __jsx(React.Fragment, null, __jsx(TextWidget, {\n    id: \"external\",\n    title: intl.formatMessage(messages.videoURL),\n    required: false,\n    value: data.url,\n    icon: clearSVG,\n    iconAction: () => {\n      resetSubmitUrl();\n      onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n        url: ''\n      }));\n    },\n    onChange: () => {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 17\n    }\n  }), __jsx(TextWidget, {\n    id: \"video-preview-image\",\n    title: intl.formatMessage(messages.Preview_image),\n    required: false,\n    value: (_data$preview_image = data.preview_image) === null || _data$preview_image === void 0 ? void 0 : _data$preview_image.split('/').slice(-1)[0],\n    icon: data.preview_image ? clearSVG : navTreeSVG,\n    iconAction: data.preview_image ? () => {\n      onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n        preview_image: ''\n      }));\n    } : () => openObjectBrowser({\n      mode: 'image',\n      dataName: 'preview_image'\n    }),\n    onChange: (id, value) => {\n      onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n        preview_image: value\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  })), __jsx(Form.Field, {\n    inline: true,\n    required: required,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }, __jsx(Grid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 15\n    }\n  }, __jsx(Grid.Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 17\n    }\n  }, __jsx(Grid.Column, {\n    width: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 19\n    }\n  }, __jsx(\"div\", {\n    className: \"wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 21\n    }\n  }, __jsx(\"label\", {\n    htmlFor: \"field-align\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 23\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"Alignment\",\n    defaultMessage: \"Alignment\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 25\n    }\n  })))), __jsx(Grid.Column, {\n    width: \"8\",\n    className: \"align-tools\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 19\n    }\n  }, __jsx(AlignBlock, {\n    align: data.align,\n    onChangeBlock: onChangeBlock,\n    data: data,\n    block: block,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 21\n    }\n  })))))), data.url.match('.mp4') && __jsx(Accordion, {\n    fluid: true,\n    styled: true,\n    className: \"form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  }, __jsx(Accordion.Title, {\n    active: activeAccIndex === 0,\n    index: 0,\n    onClick: handleAccClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 15\n    }\n  }, \"Link Settings\", activeAccIndex === 0 ? __jsx(Icon, {\n    name: upSVG,\n    size: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 19\n    }\n  }) : __jsx(Icon, {\n    name: downSVG,\n    size: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 19\n    }\n  })), __jsx(Accordion.Content, {\n    active: activeAccIndex === 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 15\n    }\n  }, __jsx(TextWidget, {\n    id: \"link\",\n    title: intl.formatMessage(messages.LinkTo),\n    required: false,\n    value: data.href,\n    icon: data.href ? clearSVG : navTreeSVG,\n    iconAction: data.href ? () => {\n      onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n        href: ''\n      }));\n    } : () => openObjectBrowser({\n      mode: 'link'\n    }),\n    onChange: (name, value) => {\n      onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n        href: value\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 17\n    }\n  }), __jsx(CheckboxWidget, {\n    id: \"openLinkInNewTab\",\n    title: intl.formatMessage(messages.openLinkInNewTab),\n    value: data.openLinkInNewTab ? data.openLinkInNewTab : false,\n    onChange: (name, value) => {\n      onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n        openLinkInNewTab: value\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 17\n    }\n  })))));\n};\nVideoSidebar.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  block: PropTypes.string.isRequired,\n  onChangeBlock: PropTypes.func.isRequired,\n  openObjectBrowser: PropTypes.func.isRequired,\n  resetSubmitUrl: PropTypes.func.isRequired\n};\nexport default injectIntl(VideoSidebar);","map":{"version":3,"names":["React","useState","PropTypes","Form","Accordion","Grid","Segment","defineMessages","FormattedMessage","injectIntl","CheckboxWidget","Icon","TextWidget","AlignBlock","videoSVG","clearSVG","upSVG","downSVG","navTreeSVG","messages","LinkTo","openLinkInNewTab","videoURL","Preview_image","VideoSidebar","data","block","onChangeBlock","openObjectBrowser","required","resetSubmitUrl","intl","activeAccIndex","setActiveAccIndex","handleAccClick","e","titleProps","index","newIndex","url","formatMessage","preview_image","split","slice","mode","dataName","id","value","align","match","href","name","propTypes","objectOf","any","isRequired","string","func"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-forests-theme/src/customizations/volto/components/manage/Blocks/Video/VideoSidebar.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form } from 'semantic-ui-react';\nimport { Accordion, Grid, Segment } from 'semantic-ui-react';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport { CheckboxWidget, Icon, TextWidget } from '@plone/volto/components';\nimport AlignBlock from '@plone/volto/components/manage/Sidebar/AlignBlock';\n\nimport videoSVG from '@plone/volto/icons/videocamera.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport upSVG from '@plone/volto/icons/up-key.svg';\nimport downSVG from '@plone/volto/icons/down-key.svg';\nimport navTreeSVG from '@plone/volto/icons/nav.svg';\n\nconst messages = defineMessages({\n  LinkTo: {\n    id: 'Link to',\n    defaultMessage: 'Link to',\n  },\n  openLinkInNewTab: {\n    id: 'Open in a new tab',\n    defaultMessage: 'Open in a new tab',\n  },\n  videoURL: {\n    id: 'Video URL',\n    defaultMessage: 'Video URL',\n  },\n  Preview_image: {\n    id: 'Preview Image URL',\n    defaultMessage: 'Preview Image URL',\n  },\n});\n\nconst VideoSidebar = ({\n  data,\n  block,\n  onChangeBlock,\n  openObjectBrowser,\n  required = false,\n  resetSubmitUrl,\n  intl,\n}) => {\n  const [activeAccIndex, setActiveAccIndex] = useState(0);\n\n  function handleAccClick(e, titleProps) {\n    const { index } = titleProps;\n    const newIndex = activeAccIndex === index ? -1 : index;\n\n    setActiveAccIndex(newIndex);\n  }\n\n  return (\n    <Segment.Group raised>\n      <header className=\"header pulled\">\n        <h2>\n          <FormattedMessage id=\"Video\" defaultMessage=\"Video\" />\n        </h2>\n      </header>\n\n      {!data.url && (\n        <>\n          <Segment className=\"sidebar-metadata-container\" secondary>\n            <FormattedMessage\n              id=\"No video selected\"\n              defaultMessage=\"No video selected\"\n            />\n            <Icon name={videoSVG} size=\"100px\" color=\"#b8c6c8\" />\n          </Segment>\n        </>\n      )}\n      {data.url && (\n        <>\n          <Segment className=\"form sidebar-image-data\">\n            {data.url && (\n              <>\n                <TextWidget\n                  id=\"external\"\n                  title={intl.formatMessage(messages.videoURL)}\n                  required={false}\n                  value={data.url}\n                  icon={clearSVG}\n                  iconAction={() => {\n                    resetSubmitUrl();\n                    onChangeBlock(block, {\n                      ...data,\n                      url: '',\n                    });\n                  }}\n                  onChange={() => {}}\n                />\n                <TextWidget\n                  id=\"video-preview-image\"\n                  title={intl.formatMessage(messages.Preview_image)}\n                  required={false}\n                  value={data.preview_image?.split('/').slice(-1)[0]}\n                  icon={data.preview_image ? clearSVG : navTreeSVG}\n                  iconAction={\n                    data.preview_image\n                      ? () => {\n                          onChangeBlock(block, {\n                            ...data,\n                            preview_image: '',\n                          });\n                        }\n                      : () =>\n                          openObjectBrowser({\n                            mode: 'image',\n                            dataName: 'preview_image',\n                          })\n                  }\n                  onChange={(id, value) => {\n                    onChangeBlock(block, {\n                      ...data,\n                      preview_image: value,\n                    });\n                  }}\n                />\n              </>\n            )}\n            <Form.Field inline required={required}>\n              <Grid>\n                <Grid.Row>\n                  <Grid.Column width=\"4\">\n                    <div className=\"wrapper\">\n                      <label htmlFor=\"field-align\">\n                        <FormattedMessage\n                          id=\"Alignment\"\n                          defaultMessage=\"Alignment\"\n                        />\n                      </label>\n                    </div>\n                  </Grid.Column>\n                  <Grid.Column width=\"8\" className=\"align-tools\">\n                    <AlignBlock\n                      align={data.align}\n                      onChangeBlock={onChangeBlock}\n                      data={data}\n                      block={block}\n                    />\n                  </Grid.Column>\n                </Grid.Row>\n              </Grid>\n            </Form.Field>\n          </Segment>\n          {data.url.match('.mp4') && (\n            <Accordion fluid styled className=\"form\">\n              <Accordion.Title\n                active={activeAccIndex === 0}\n                index={0}\n                onClick={handleAccClick}\n              >\n                Link Settings\n                {activeAccIndex === 0 ? (\n                  <Icon name={upSVG} size=\"20px\" />\n                ) : (\n                  <Icon name={downSVG} size=\"20px\" />\n                )}\n              </Accordion.Title>\n              <Accordion.Content active={activeAccIndex === 0}>\n                <TextWidget\n                  id=\"link\"\n                  title={intl.formatMessage(messages.LinkTo)}\n                  required={false}\n                  value={data.href}\n                  icon={data.href ? clearSVG : navTreeSVG}\n                  iconAction={\n                    data.href\n                      ? () => {\n                          onChangeBlock(block, {\n                            ...data,\n                            href: '',\n                          });\n                        }\n                      : () => openObjectBrowser({ mode: 'link' })\n                  }\n                  onChange={(name, value) => {\n                    onChangeBlock(block, {\n                      ...data,\n                      href: value,\n                    });\n                  }}\n                />\n                <CheckboxWidget\n                  id=\"openLinkInNewTab\"\n                  title={intl.formatMessage(messages.openLinkInNewTab)}\n                  value={data.openLinkInNewTab ? data.openLinkInNewTab : false}\n                  onChange={(name, value) => {\n                    onChangeBlock(block, {\n                      ...data,\n                      openLinkInNewTab: value,\n                    });\n                  }}\n                />\n              </Accordion.Content>\n            </Accordion>\n          )}\n        </>\n      )}\n    </Segment.Group>\n  );\n};\n\nVideoSidebar.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  block: PropTypes.string.isRequired,\n  onChangeBlock: PropTypes.func.isRequired,\n  openObjectBrowser: PropTypes.func.isRequired,\n  resetSubmitUrl: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(VideoSidebar);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Link to","defaultMessage":"Link to"},{"id":"Open in a new tab","defaultMessage":"Open in a new tab"},{"id":"Video URL","defaultMessage":"Video URL"},{"id":"Preview Image URL","defaultMessage":"Preview Image URL"},{"id":"Video","defaultMessage":"Video"},{"id":"No video selected","defaultMessage":"No video selected"},{"id":"Alignment","defaultMessage":"Alignment"}]}},"sourceType":"module","externalDependencies":[]}