{"ast":null,"code":"export var createOption = function createOption(label) {\n  var str_label = label.toString();\n  return {\n    label: str_label,\n    value: str_label\n  };\n};\nexport function createTemporalRangeOptions(temporal_values) {\n  var temporal_intervals = [];\n  if (!temporal_values || !temporal_values.length) {\n    return temporal_intervals;\n  }\n  var current_temporal_interval = [temporal_values[0].value, temporal_values[0].value];\n  for (var i = 1; i < temporal_values.length; i++) {\n    var value = temporal_values[i].value;\n    var year = parseInt(value);\n    if (year === parseInt(current_temporal_interval[1]) + 1) {\n      current_temporal_interval[1] = year;\n    } else {\n      temporal_intervals.push(current_temporal_interval);\n      current_temporal_interval = [year, year];\n    }\n  }\n\n  /* append last temporal_interval in case last value doesn't match\n  the current interval value or we have no intervals */\n  if (temporal_intervals.length && temporal_intervals[temporal_intervals.length - 1][1] !== current_temporal_interval[1] || !temporal_intervals.length) {\n    temporal_intervals.push(current_temporal_interval);\n  }\n  var temporal_range_options = [];\n  for (var _i = 0; _i < temporal_intervals.length; _i++) {\n    var pair_years = temporal_intervals[_i];\n    var str_year_values = [pair_years[0].toString(), pair_years[1].toString()];\n    var start_year = str_year_values[0];\n    var end_year = str_year_values[1];\n    if (start_year === end_year) {\n      temporal_range_options.push({\n        label: start_year,\n        value: start_year\n      });\n    } else {\n      var range_year_values = start_year + '-' + end_year;\n      temporal_range_options.push({\n        label: range_year_values,\n        value: range_year_values\n      });\n    }\n  }\n  return temporal_range_options;\n}\nexport function getIndividualValues(values) {\n  var year_values = [];\n  if (!values) {\n    return year_values;\n  }\n  for (var i = 0; i < values.length; i++) {\n    var _val$includes;\n    var val = values[i].value;\n    if (val && (_val$includes = val.includes) !== null && _val$includes !== void 0 && _val$includes.call(val, '-')) {\n      var split_values = val.split('-');\n      var year = parseInt(split_values[0]);\n      var end_year = parseInt(split_values[1]);\n      while (year <= end_year) {\n        if (year_values.indexOf(year) === -1) {\n          year_values.push(year);\n        }\n        year++;\n      }\n    } else {\n      var nr = parseInt(val);\n      // check if val was a number as you can click on no selection\n      // in which case you will get { 'label': 'no selection', value: ''}\n      if (nr && year_values.indexOf(nr) === -1) {\n        year_values.push(nr);\n      }\n    }\n  }\n  year_values.sort();\n  return year_values.map(function (year) {\n    return createOption(year);\n  });\n}","map":{"version":3,"names":["createOption","label","str_label","toString","value","createTemporalRangeOptions","temporal_values","temporal_intervals","length","current_temporal_interval","i","year","parseInt","push","temporal_range_options","pair_years","str_year_values","start_year","end_year","range_year_values","getIndividualValues","values","year_values","val","includes","split_values","split","indexOf","nr","sort","map"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-widget-temporal-coverage/src/helpers.js"],"sourcesContent":["export const createOption = (label) => {\n  const str_label = label.toString();\n  return {\n    label: str_label,\n    value: str_label,\n  };\n};\nexport function createTemporalRangeOptions(temporal_values) {\n  let temporal_intervals = [];\n  if (!temporal_values || !temporal_values.length) {\n    return temporal_intervals;\n  }\n\n  let current_temporal_interval = [\n    temporal_values[0].value,\n    temporal_values[0].value,\n  ];\n\n  for (let i = 1; i < temporal_values.length; i++) {\n    let value = temporal_values[i].value;\n    let year = parseInt(value);\n    if (year === parseInt(current_temporal_interval[1]) + 1) {\n      current_temporal_interval[1] = year;\n    } else {\n      temporal_intervals.push(current_temporal_interval);\n      current_temporal_interval = [year, year];\n    }\n  }\n\n  /* append last temporal_interval in case last value doesn't match\n  the current interval value or we have no intervals */\n  if (\n    (temporal_intervals.length &&\n      temporal_intervals[temporal_intervals.length - 1][1] !==\n        current_temporal_interval[1]) ||\n    !temporal_intervals.length\n  ) {\n    temporal_intervals.push(current_temporal_interval);\n  }\n\n  let temporal_range_options = [];\n  for (let i = 0; i < temporal_intervals.length; i++) {\n    let pair_years = temporal_intervals[i];\n    let str_year_values = [pair_years[0].toString(), pair_years[1].toString()];\n    let start_year = str_year_values[0];\n    let end_year = str_year_values[1];\n    if (start_year === end_year) {\n      temporal_range_options.push({ label: start_year, value: start_year });\n    } else {\n      let range_year_values = start_year + '-' + end_year;\n      temporal_range_options.push({\n        label: range_year_values,\n        value: range_year_values,\n      });\n    }\n  }\n  return temporal_range_options;\n}\n\nexport function getIndividualValues(values) {\n  let year_values = [];\n  if (!values) {\n    return year_values;\n  }\n  for (let i = 0; i < values.length; i++) {\n    const val = values[i].value;\n    if (val && val.includes?.('-')) {\n      let split_values = val.split('-');\n      let year = parseInt(split_values[0]);\n      let end_year = parseInt(split_values[1]);\n      while (year <= end_year) {\n        if (year_values.indexOf(year) === -1) {\n          year_values.push(year);\n        }\n        year++;\n      }\n    } else {\n      let nr = parseInt(val);\n      // check if val was a number as you can click on no selection\n      // in which case you will get { 'label': 'no selection', value: ''}\n      if (nr && year_values.indexOf(nr) === -1) {\n        year_values.push(nr);\n      }\n    }\n  }\n  year_values.sort();\n  return year_values.map((year) => createOption(year));\n}\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}