{"ast":null,"code":"import _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { defineMessages } from 'react-intl';\nimport { schemaEnhancerFactory, enhanceStylingSchema } from '@eeacms/volto-listing-block/schema-utils';\nvar messages = defineMessages({\n  title: {\n    \"id\": \"Card type\",\n    \"defaultMessage\": \"Card type\"\n  }\n});\nvar CallToActionSchema = function CallToActionSchema(_ref) {\n  var _formData$itemModel, _formData$itemModel$c;\n  var formData = _ref.formData;\n  return {\n    fieldsets: [{\n      id: 'default',\n      fields: ['enable'].concat(_toConsumableArray((_formData$itemModel = formData.itemModel) !== null && _formData$itemModel !== void 0 && (_formData$itemModel$c = _formData$itemModel.callToAction) !== null && _formData$itemModel$c !== void 0 && _formData$itemModel$c.enable ? ['label', formData['@type'] === 'listing' ? 'urlTemplate' : 'href'] : [])),\n      //\n      title: 'Default'\n    }],\n    properties: {\n      enable: {\n        type: 'boolean',\n        title: 'Show action'\n      },\n      label: {\n        title: 'Action label',\n        \"default\": 'Read more',\n        defaultValue: 'Read more'\n      },\n      href: {\n        title: 'Action URL',\n        widget: 'object_browser',\n        mode: 'link',\n        selectedItemAttrs: ['Title', 'Description'],\n        allowExternals: true\n      },\n      urlTemplate: {\n        title: 'Action URL Template',\n        description: 'Enter a path. Available placeholders: $URL, $PORTAL_URL. If empty, the result URL will be used.'\n      }\n    },\n    required: []\n  };\n};\n_c = CallToActionSchema;\nvar CardSchema = function CardSchema(_ref2) {\n  var _formData$itemModel2;\n  var formData = _ref2.formData;\n  return {\n    fieldsets: [{\n      id: 'cardDesigner',\n      title: 'Card',\n      fields: ['hasDate', 'hasDescription'].concat(_toConsumableArray(formData !== null && formData !== void 0 && (_formData$itemModel2 = formData.itemModel) !== null && _formData$itemModel2 !== void 0 && _formData$itemModel2.hasDescription ? ['maxDescription'] : []), ['hasMetaType', 'hasLabel', 'hasTags', 'callToAction'])\n    }],\n    properties: {\n      hasDate: {\n        title: 'Publication date',\n        type: 'boolean'\n      },\n      hasDescription: {\n        title: 'Description',\n        type: 'boolean'\n      },\n      maxDescription: {\n        title: 'Description max lines',\n        description: \"Limit description to a maximum number of lines by adding trailing '...'\",\n        type: 'number',\n        \"default\": 2,\n        minimum: 0,\n        maximum: 5\n      },\n      hasMetaType: {\n        title: 'Show portal type',\n        type: 'boolean'\n      },\n      hasLabel: {\n        title: 'Show new/archived label',\n        type: 'boolean'\n      },\n      hasTags: {\n        title: 'Show tags',\n        type: 'boolean'\n      },\n      callToAction: {\n        widget: 'object',\n        schema: CallToActionSchema({\n          formData: formData\n        })\n      }\n    },\n    required: []\n  };\n};\n_c2 = CardSchema;\nexport default function universalCardSchemaEnhancer(props) {\n  var schema = props.schema;\n  props.formData = props.formData || props.data;\n  var enhancer = schemaEnhancerFactory({\n    extensionName: 'cardTemplates',\n    messages: messages,\n    blockType: 'listing',\n    extensionField: '@type'\n  });\n  var baseSchema = _objectSpread(_objectSpread({}, schema), {}, {\n    fieldsets: [].concat(_toConsumableArray(schema.fieldsets), [{\n      id: 'cardDesigner',\n      title: 'Card',\n      fields: ['itemModel']\n    }]),\n    properties: _objectSpread(_objectSpread({}, schema.properties), {}, {\n      itemModel: {\n        title: 'Card model',\n        widget: 'object',\n        schema: enhancer(_objectSpread(_objectSpread({}, props), {}, {\n          schema: CardSchema(props)\n        }))\n      }\n    })\n  });\n  var styledSchema = enhanceStylingSchema(_objectSpread(_objectSpread({}, props), {}, {\n    schema: baseSchema,\n    // schema: baseSchema.properties.styles.schema,\n    formData: props.formData\n  }));\n  return styledSchema;\n}\nvar _c, _c2;\n$RefreshReg$(_c, \"CallToActionSchema\");\n$RefreshReg$(_c2, \"CardSchema\");","map":{"version":3,"names":["defineMessages","schemaEnhancerFactory","enhanceStylingSchema","messages","title","CallToActionSchema","formData","fieldsets","id","fields","itemModel","callToAction","enable","properties","type","label","defaultValue","href","widget","mode","selectedItemAttrs","allowExternals","urlTemplate","description","required","CardSchema","hasDescription","hasDate","maxDescription","minimum","maximum","hasMetaType","hasLabel","hasTags","schema","universalCardSchemaEnhancer","props","data","enhancer","extensionName","blockType","extensionField","baseSchema","styledSchema"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-listing-block/src/components/UniversalCard/schema.js"],"sourcesContent":["import { defineMessages } from 'react-intl';\nimport {\n  schemaEnhancerFactory,\n  enhanceStylingSchema,\n} from '@eeacms/volto-listing-block/schema-utils';\n\nconst messages = defineMessages({\n  title: {\n    id: 'Card type',\n    defaultMessage: 'Card type',\n  },\n});\n\nconst CallToActionSchema = ({ formData }) => {\n  return {\n    fieldsets: [\n      {\n        id: 'default',\n        fields: [\n          'enable',\n          ...(formData.itemModel?.callToAction?.enable\n            ? [\n                'label',\n                formData['@type'] === 'listing' ? 'urlTemplate' : 'href',\n              ]\n            : []),\n        ], //\n        title: 'Default',\n      },\n    ],\n    properties: {\n      enable: {\n        type: 'boolean',\n        title: 'Show action',\n      },\n      label: {\n        title: 'Action label',\n        default: 'Read more',\n        defaultValue: 'Read more',\n      },\n      href: {\n        title: 'Action URL',\n        widget: 'object_browser',\n        mode: 'link',\n        selectedItemAttrs: ['Title', 'Description'],\n        allowExternals: true,\n      },\n      urlTemplate: {\n        title: 'Action URL Template',\n        description:\n          'Enter a path. Available placeholders: $URL, $PORTAL_URL. If empty, the result URL will be used.',\n      },\n    },\n    required: [],\n  };\n};\n\nconst CardSchema = ({ formData }) => {\n  return {\n    fieldsets: [\n      {\n        id: 'cardDesigner',\n        title: 'Card',\n        fields: [\n          'hasDate',\n          'hasDescription',\n          ...(formData?.itemModel?.hasDescription ? ['maxDescription'] : []),\n          'hasMetaType',\n          'hasLabel',\n          'hasTags',\n          'callToAction',\n        ],\n      },\n    ],\n    properties: {\n      hasDate: {\n        title: 'Publication date',\n        type: 'boolean',\n      },\n      hasDescription: {\n        title: 'Description',\n        type: 'boolean',\n      },\n      maxDescription: {\n        title: 'Description max lines',\n        description:\n          \"Limit description to a maximum number of lines by adding trailing '...'\",\n        type: 'number',\n        default: 2,\n        minimum: 0,\n        maximum: 5,\n      },\n      hasMetaType: {\n        title: 'Show portal type',\n        type: 'boolean',\n      },\n      hasLabel: {\n        title: 'Show new/archived label',\n        type: 'boolean',\n      },\n      hasTags: {\n        title: 'Show tags',\n        type: 'boolean',\n      },\n      callToAction: {\n        widget: 'object',\n        schema: CallToActionSchema({ formData }),\n      },\n    },\n    required: [],\n  };\n};\n\nexport default function universalCardSchemaEnhancer(props) {\n  const { schema } = props;\n  props.formData = props.formData || props.data;\n  const enhancer = schemaEnhancerFactory({\n    extensionName: 'cardTemplates',\n    messages,\n    blockType: 'listing',\n    extensionField: '@type',\n  });\n  const baseSchema = {\n    ...schema,\n    fieldsets: [\n      ...schema.fieldsets,\n      {\n        id: 'cardDesigner',\n        title: 'Card',\n        fields: ['itemModel'],\n      },\n    ],\n    properties: {\n      ...schema.properties,\n      itemModel: {\n        title: 'Card model',\n        widget: 'object',\n        schema: enhancer({\n          ...props,\n          schema: CardSchema(props),\n        }),\n      },\n    },\n  };\n\n  const styledSchema = enhanceStylingSchema({\n    ...props,\n    schema: baseSchema,\n    // schema: baseSchema.properties.styles.schema,\n    formData: props.formData,\n  });\n\n  return styledSchema;\n}\n"],"mappings":";;AAAA,SAASA,cAAc,QAAQ,YAAY;AAC3C,SACEC,qBAAqB,EACrBC,oBAAoB,QACf,0CAA0C;AAEjD,IAAMC,QAAQ,GAAGH,cAAc,CAAC;EAC9BI,KAAK;IAAA;IAAA;EAAA;AAIP,CAAC,CAAC;AAEF,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkB,OAAqB;EAAA;EAAA,IAAfC,QAAQ,QAARA,QAAQ;EACpC,OAAO;IACLC,SAAS,EAAE,CACT;MACEC,EAAE,EAAE,SAAS;MACbC,MAAM,GACJ,QAAQ,4BACJ,uBAAAH,QAAQ,CAACI,SAAS,yEAAlB,oBAAoBC,YAAY,kDAAhC,sBAAkCC,MAAM,GACxC,CACE,OAAO,EACPN,QAAQ,CAAC,OAAO,CAAC,KAAK,SAAS,GAAG,aAAa,GAAG,MAAM,CACzD,GACD,EAAE,EACP;MAAE;MACHF,KAAK,EAAE;IACT,CAAC,CACF;IACDS,UAAU,EAAE;MACVD,MAAM,EAAE;QACNE,IAAI,EAAE,SAAS;QACfV,KAAK,EAAE;MACT,CAAC;MACDW,KAAK,EAAE;QACLX,KAAK,EAAE,cAAc;QACrB,WAAS,WAAW;QACpBY,YAAY,EAAE;MAChB,CAAC;MACDC,IAAI,EAAE;QACJb,KAAK,EAAE,YAAY;QACnBc,MAAM,EAAE,gBAAgB;QACxBC,IAAI,EAAE,MAAM;QACZC,iBAAiB,EAAE,CAAC,OAAO,EAAE,aAAa,CAAC;QAC3CC,cAAc,EAAE;MAClB,CAAC;MACDC,WAAW,EAAE;QACXlB,KAAK,EAAE,qBAAqB;QAC5BmB,WAAW,EACT;MACJ;IACF,CAAC;IACDC,QAAQ,EAAE;EACZ,CAAC;AACH,CAAC;AAAC,KA1CInB,kBAAkB;AA4CxB,IAAMoB,UAAU,GAAG,SAAbA,UAAU,QAAqB;EAAA;EAAA,IAAfnB,QAAQ,SAARA,QAAQ;EAC5B,OAAO;IACLC,SAAS,EAAE,CACT;MACEC,EAAE,EAAE,cAAc;MAClBJ,KAAK,EAAE,MAAM;MACbK,MAAM,GACJ,SAAS,EACT,gBAAgB,4BACZH,QAAQ,aAARA,QAAQ,uCAARA,QAAQ,CAAEI,SAAS,iDAAnB,qBAAqBgB,cAAc,GAAG,CAAC,gBAAgB,CAAC,GAAG,EAAE,IACjE,aAAa,EACb,UAAU,EACV,SAAS,EACT,cAAc;IAElB,CAAC,CACF;IACDb,UAAU,EAAE;MACVc,OAAO,EAAE;QACPvB,KAAK,EAAE,kBAAkB;QACzBU,IAAI,EAAE;MACR,CAAC;MACDY,cAAc,EAAE;QACdtB,KAAK,EAAE,aAAa;QACpBU,IAAI,EAAE;MACR,CAAC;MACDc,cAAc,EAAE;QACdxB,KAAK,EAAE,uBAAuB;QAC9BmB,WAAW,EACT,yEAAyE;QAC3ET,IAAI,EAAE,QAAQ;QACd,WAAS,CAAC;QACVe,OAAO,EAAE,CAAC;QACVC,OAAO,EAAE;MACX,CAAC;MACDC,WAAW,EAAE;QACX3B,KAAK,EAAE,kBAAkB;QACzBU,IAAI,EAAE;MACR,CAAC;MACDkB,QAAQ,EAAE;QACR5B,KAAK,EAAE,yBAAyB;QAChCU,IAAI,EAAE;MACR,CAAC;MACDmB,OAAO,EAAE;QACP7B,KAAK,EAAE,WAAW;QAClBU,IAAI,EAAE;MACR,CAAC;MACDH,YAAY,EAAE;QACZO,MAAM,EAAE,QAAQ;QAChBgB,MAAM,EAAE7B,kBAAkB,CAAC;UAAEC,QAAQ,EAARA;QAAS,CAAC;MACzC;IACF,CAAC;IACDkB,QAAQ,EAAE;EACZ,CAAC;AACH,CAAC;AAAC,MAtDIC,UAAU;AAwDhB,eAAe,SAASU,2BAA2B,CAACC,KAAK,EAAE;EACzD,IAAQF,MAAM,GAAKE,KAAK,CAAhBF,MAAM;EACdE,KAAK,CAAC9B,QAAQ,GAAG8B,KAAK,CAAC9B,QAAQ,IAAI8B,KAAK,CAACC,IAAI;EAC7C,IAAMC,QAAQ,GAAGrC,qBAAqB,CAAC;IACrCsC,aAAa,EAAE,eAAe;IAC9BpC,QAAQ,EAARA,QAAQ;IACRqC,SAAS,EAAE,SAAS;IACpBC,cAAc,EAAE;EAClB,CAAC,CAAC;EACF,IAAMC,UAAU,mCACXR,MAAM;IACT3B,SAAS,+BACJ2B,MAAM,CAAC3B,SAAS,IACnB;MACEC,EAAE,EAAE,cAAc;MAClBJ,KAAK,EAAE,MAAM;MACbK,MAAM,EAAE,CAAC,WAAW;IACtB,CAAC,EACF;IACDI,UAAU,kCACLqB,MAAM,CAACrB,UAAU;MACpBH,SAAS,EAAE;QACTN,KAAK,EAAE,YAAY;QACnBc,MAAM,EAAE,QAAQ;QAChBgB,MAAM,EAAEI,QAAQ,iCACXF,KAAK;UACRF,MAAM,EAAET,UAAU,CAACW,KAAK;QAAC;MAE7B;IAAC;EACF,EACF;EAED,IAAMO,YAAY,GAAGzC,oBAAoB,iCACpCkC,KAAK;IACRF,MAAM,EAAEQ,UAAU;IAClB;IACApC,QAAQ,EAAE8B,KAAK,CAAC9B;EAAQ,GACxB;EAEF,OAAOqC,YAAY;AACrB;AAAC;AAAA;AAAA"},"metadata":{"react-intl":{"messages":[{"id":"Card type","defaultMessage":"Card type"}]}},"sourceType":"module","externalDependencies":[]}