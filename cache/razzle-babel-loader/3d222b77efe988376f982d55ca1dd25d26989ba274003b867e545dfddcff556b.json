{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Sidebar/ObjectBrowserNav.jsx\",\n  _this = this,\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Button, Segment, Popup } from 'semantic-ui-react';\nimport { useIntl, defineMessages } from 'react-intl';\nimport cx from 'classnames';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport { flattenToAppURL, getContentIcon } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\nimport rightArrowSVG from '@plone/volto/icons/right-key.svg';\nimport homeSVG from '@plone/volto/icons/home.svg';\nvar messages = defineMessages({\n  browse: {\n    \"id\": \"Browse\",\n    \"defaultMessage\": \"Browse\"\n  },\n  select: {\n    \"id\": \"Select\",\n    \"defaultMessage\": \"Select\"\n  }\n});\nvar ObjectBrowserNav = function ObjectBrowserNav(_ref) {\n  _s();\n  var currentSearchResults = _ref.currentSearchResults,\n    selected = _ref.selected,\n    handleClickOnItem = _ref.handleClickOnItem,\n    handleDoubleClickOnItem = _ref.handleDoubleClickOnItem,\n    mode = _ref.mode,\n    navigateTo = _ref.navigateTo,\n    isSelectable = _ref.isSelectable;\n  var intl = useIntl();\n  var isSelected = function isSelected(item) {\n    var ret = false;\n    if (selected) {\n      selected.filter(function (item) {\n        return item != null;\n      }).forEach(function (_item) {\n        if (flattenToAppURL(_item['@id']) === flattenToAppURL(item['@id'])) {\n          ret = true;\n        }\n      });\n    }\n    return ret;\n  };\n  return __jsx(Segment, {\n    as: \"ul\",\n    className: \"object-listing\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, currentSearchResults && currentSearchResults.items.map(function (item) {\n    return __jsx(\"li\", {\n      role: \"presentation\",\n      \"aria-label\": item.is_folderish && mode === 'image' ? \"\".concat(intl.formatMessage(messages.browse), \" \").concat(item.title) : \"\".concat(intl.formatMessage(messages.select), \" \").concat(item.title),\n      key: item['@id'],\n      className: cx('', {\n        'selected-item': isSelected(item),\n        disabled: mode === 'image' ? !config.settings.imageObjects.includes(item['@type']) && !item.is_folderish : !isSelectable(item)\n      }),\n      onClick: function onClick() {\n        return handleClickOnItem(item);\n      },\n      onDoubleClick: function onDoubleClick() {\n        return handleDoubleClickOnItem(item);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }\n    }, __jsx(\"span\", {\n      title: \"\".concat(item['@id'], \" (\").concat(item['@type'], \")\"),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    }, __jsx(Popup, {\n      key: item['@id'],\n      content: __jsx(React.Fragment, null, __jsx(Icon, {\n        name: homeSVG,\n        size: \"18px\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 21\n        }\n      }), ' ', flattenToAppURL(item['@id']), \" ( \", item['@type'], \")\"),\n      trigger: __jsx(\"span\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 19\n        }\n      }, __jsx(Icon, {\n        name: getContentIcon(item['@type'], item.is_folderish),\n        size: \"24px\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }\n      })),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 15\n      }\n    }), item.title), item.is_folderish && mode === 'image' && __jsx(Icon, {\n      className: \"right-arrow-icon\",\n      name: rightArrowSVG,\n      size: \"24px\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 15\n      }\n    }), item.is_folderish && (mode === 'link' || mode === 'multiple') && __jsx(\"div\", {\n      role: \"presentation\",\n      className: \"right-arrow-link-mode\",\n      onClick: function onClick(e) {\n        e.stopPropagation();\n        navigateTo(item['@id']);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 15\n      }\n    }, __jsx(Button.Group, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }\n    }, __jsx(Button, {\n      basic: true,\n      icon: true,\n      \"aria-label\": \"\".concat(intl.formatMessage(messages.browse), \" \").concat(item.title),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 19\n      }\n    }, __jsx(Icon, {\n      className: \"right-arrow-icon\",\n      name: rightArrowSVG,\n      size: \"24px\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 21\n      }\n    })))));\n  }));\n};\n_s(ObjectBrowserNav, \"rlSgSjbewJ1PrR/Ile8g/kr050o=\", false, function () {\n  return [useIntl];\n});\n_c = ObjectBrowserNav;\nexport default ObjectBrowserNav;\nvar _c;\n$RefreshReg$(_c, \"ObjectBrowserNav\");","map":{"version":3,"names":["React","Button","Segment","Popup","useIntl","defineMessages","cx","Icon","flattenToAppURL","getContentIcon","config","rightArrowSVG","homeSVG","messages","browse","select","ObjectBrowserNav","currentSearchResults","selected","handleClickOnItem","handleDoubleClickOnItem","mode","navigateTo","isSelectable","intl","isSelected","item","ret","filter","forEach","_item","items","map","is_folderish","formatMessage","title","disabled","settings","imageObjects","includes","e","stopPropagation"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Sidebar/ObjectBrowserNav.jsx"],"sourcesContent":["import React from 'react';\nimport { Button, Segment, Popup } from 'semantic-ui-react';\nimport { useIntl, defineMessages } from 'react-intl';\nimport cx from 'classnames';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport { flattenToAppURL, getContentIcon } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\n\nimport rightArrowSVG from '@plone/volto/icons/right-key.svg';\nimport homeSVG from '@plone/volto/icons/home.svg';\n\nconst messages = defineMessages({\n  browse: {\n    id: 'Browse',\n    defaultMessage: 'Browse',\n  },\n  select: {\n    id: 'Select',\n    defaultMessage: 'Select',\n  },\n});\n\nconst ObjectBrowserNav = ({\n  currentSearchResults,\n  selected,\n  handleClickOnItem,\n  handleDoubleClickOnItem,\n  mode,\n  navigateTo,\n  isSelectable,\n}) => {\n  const intl = useIntl();\n  const isSelected = (item) => {\n    let ret = false;\n    if (selected) {\n      selected\n        .filter((item) => item != null)\n        .forEach((_item) => {\n          if (flattenToAppURL(_item['@id']) === flattenToAppURL(item['@id'])) {\n            ret = true;\n          }\n        });\n    }\n    return ret;\n  };\n\n  return (\n    <Segment as=\"ul\" className=\"object-listing\">\n      {currentSearchResults &&\n        currentSearchResults.items.map((item) => (\n          <li\n            role=\"presentation\"\n            aria-label={\n              item.is_folderish && mode === 'image'\n                ? `${intl.formatMessage(messages.browse)} ${item.title}`\n                : `${intl.formatMessage(messages.select)} ${item.title}`\n            }\n            key={item['@id']}\n            className={cx('', {\n              'selected-item': isSelected(item),\n\n              disabled:\n                mode === 'image'\n                  ? !config.settings.imageObjects.includes(item['@type']) &&\n                    !item.is_folderish\n                  : !isSelectable(item),\n            })}\n            onClick={() => handleClickOnItem(item)}\n            onDoubleClick={() => handleDoubleClickOnItem(item)}\n          >\n            <span title={`${item['@id']} (${item['@type']})`}>\n              <Popup\n                key={item['@id']}\n                content={\n                  <>\n                    <Icon name={homeSVG} size=\"18px\" />{' '}\n                    {flattenToAppURL(item['@id'])} ( {item['@type']})\n                  </>\n                }\n                trigger={\n                  <span>\n                    <Icon\n                      name={getContentIcon(item['@type'], item.is_folderish)}\n                      size=\"24px\"\n                    />\n                  </span>\n                }\n              />\n\n              {item.title}\n            </span>\n            {item.is_folderish && mode === 'image' && (\n              <Icon\n                className=\"right-arrow-icon\"\n                name={rightArrowSVG}\n                size=\"24px\"\n              />\n            )}\n            {item.is_folderish && (mode === 'link' || mode === 'multiple') && (\n              <div\n                role=\"presentation\"\n                className=\"right-arrow-link-mode\"\n                onClick={(e) => {\n                  e.stopPropagation();\n                  navigateTo(item['@id']);\n                }}\n              >\n                <Button.Group>\n                  <Button\n                    basic\n                    icon\n                    aria-label={`${intl.formatMessage(messages.browse)} ${\n                      item.title\n                    }`}\n                  >\n                    <Icon\n                      className=\"right-arrow-icon\"\n                      name={rightArrowSVG}\n                      size=\"24px\"\n                    />\n                  </Button>\n                </Button.Group>\n              </div>\n            )}\n          </li>\n        ))}\n    </Segment>\n  );\n};\n\nexport default ObjectBrowserNav;\n"],"mappings":";;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,EAAEC,OAAO,EAAEC,KAAK,QAAQ,mBAAmB;AAC1D,SAASC,OAAO,EAAEC,cAAc,QAAQ,YAAY;AACpD,OAAOC,EAAE,MAAM,YAAY;AAC3B,OAAOC,IAAI,MAAM,yCAAyC;AAC1D,SAASC,eAAe,EAAEC,cAAc,QAAQ,sBAAsB;AACtE,OAAOC,MAAM,MAAM,uBAAuB;AAE1C,OAAOC,aAAa,MAAM,kCAAkC;AAC5D,OAAOC,OAAO,MAAM,6BAA6B;AAEjD,IAAMC,QAAQ,GAAGR,cAAc,CAAC;EAC9BS,MAAM;IAAA;IAAA;EAAA,CAGL;EACDC,MAAM;IAAA;IAAA;EAAA;AAIR,CAAC,CAAC;AAEF,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgB,OAQhB;EAAA;EAAA,IAPJC,oBAAoB,QAApBA,oBAAoB;IACpBC,QAAQ,QAARA,QAAQ;IACRC,iBAAiB,QAAjBA,iBAAiB;IACjBC,uBAAuB,QAAvBA,uBAAuB;IACvBC,IAAI,QAAJA,IAAI;IACJC,UAAU,QAAVA,UAAU;IACVC,YAAY,QAAZA,YAAY;EAEZ,IAAMC,IAAI,GAAGpB,OAAO,EAAE;EACtB,IAAMqB,UAAU,GAAG,SAAbA,UAAU,CAAIC,IAAI,EAAK;IAC3B,IAAIC,GAAG,GAAG,KAAK;IACf,IAAIT,QAAQ,EAAE;MACZA,QAAQ,CACLU,MAAM,CAAC,UAACF,IAAI;QAAA,OAAKA,IAAI,IAAI,IAAI;MAAA,EAAC,CAC9BG,OAAO,CAAC,UAACC,KAAK,EAAK;QAClB,IAAItB,eAAe,CAACsB,KAAK,CAAC,KAAK,CAAC,CAAC,KAAKtB,eAAe,CAACkB,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;UAClEC,GAAG,GAAG,IAAI;QACZ;MACF,CAAC,CAAC;IACN;IACA,OAAOA,GAAG;EACZ,CAAC;EAED,OACE,MAAC,OAAO;IAAC,EAAE,EAAC,IAAI;IAAC,SAAS,EAAC,gBAAgB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACxCV,oBAAoB,IACnBA,oBAAoB,CAACc,KAAK,CAACC,GAAG,CAAC,UAACN,IAAI;IAAA,OAClC;MACE,IAAI,EAAC,cAAc;MACnB,cACEA,IAAI,CAACO,YAAY,IAAIZ,IAAI,KAAK,OAAO,aAC9BG,IAAI,CAACU,aAAa,CAACrB,QAAQ,CAACC,MAAM,CAAC,cAAIY,IAAI,CAACS,KAAK,cACjDX,IAAI,CAACU,aAAa,CAACrB,QAAQ,CAACE,MAAM,CAAC,cAAIW,IAAI,CAACS,KAAK,CACzD;MACD,GAAG,EAAET,IAAI,CAAC,KAAK,CAAE;MACjB,SAAS,EAAEpB,EAAE,CAAC,EAAE,EAAE;QAChB,eAAe,EAAEmB,UAAU,CAACC,IAAI,CAAC;QAEjCU,QAAQ,EACNf,IAAI,KAAK,OAAO,GACZ,CAACX,MAAM,CAAC2B,QAAQ,CAACC,YAAY,CAACC,QAAQ,CAACb,IAAI,CAAC,OAAO,CAAC,CAAC,IACrD,CAACA,IAAI,CAACO,YAAY,GAClB,CAACV,YAAY,CAACG,IAAI;MAC1B,CAAC,CAAE;MACH,OAAO,EAAE;QAAA,OAAMP,iBAAiB,CAACO,IAAI,CAAC;MAAA,CAAC;MACvC,aAAa,EAAE;QAAA,OAAMN,uBAAuB,CAACM,IAAI,CAAC;MAAA,CAAC;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAEnD;MAAM,KAAK,YAAKA,IAAI,CAAC,KAAK,CAAC,eAAKA,IAAI,CAAC,OAAO,CAAC,MAAI;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAC/C,MAAC,KAAK;MACJ,GAAG,EAAEA,IAAI,CAAC,KAAK,CAAE;MACjB,OAAO,EACL,4BACE,MAAC,IAAI;QAAC,IAAI,EAAEd,OAAQ;QAAC,IAAI,EAAC,MAAM;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAAG,EAAC,GAAG,EACtCJ,eAAe,CAACkB,IAAI,CAAC,KAAK,CAAC,CAAC,SAAKA,IAAI,CAAC,OAAO,CAAC,MAElD;MACD,OAAO,EACL;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GACE,MAAC,IAAI;QACH,IAAI,EAAEjB,cAAc,CAACiB,IAAI,CAAC,OAAO,CAAC,EAAEA,IAAI,CAACO,YAAY,CAAE;QACvD,IAAI,EAAC,MAAM;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EACX,CAEL;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EACD,EAEDP,IAAI,CAACS,KAAK,CACN,EACNT,IAAI,CAACO,YAAY,IAAIZ,IAAI,KAAK,OAAO,IACpC,MAAC,IAAI;MACH,SAAS,EAAC,kBAAkB;MAC5B,IAAI,EAAEV,aAAc;MACpB,IAAI,EAAC,MAAM;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAEd,EACAe,IAAI,CAACO,YAAY,KAAKZ,IAAI,KAAK,MAAM,IAAIA,IAAI,KAAK,UAAU,CAAC,IAC5D;MACE,IAAI,EAAC,cAAc;MACnB,SAAS,EAAC,uBAAuB;MACjC,OAAO,EAAE,iBAACmB,CAAC,EAAK;QACdA,CAAC,CAACC,eAAe,EAAE;QACnBnB,UAAU,CAACI,IAAI,CAAC,KAAK,CAAC,CAAC;MACzB,CAAE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAEF,MAAC,MAAM,CAAC,KAAK;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACX,MAAC,MAAM;MACL,KAAK;MACL,IAAI;MACJ,wBAAeF,IAAI,CAACU,aAAa,CAACrB,QAAQ,CAACC,MAAM,CAAC,cAChDY,IAAI,CAACS,KAAK,CACT;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAEH,MAAC,IAAI;MACH,SAAS,EAAC,kBAAkB;MAC5B,IAAI,EAAExB,aAAc;MACpB,IAAI,EAAC,MAAM;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EACX,CACK,CACI,CAElB,CACE;EAAA,CACN,CAAC,CACI;AAEd,CAAC;AAAC,GA1GIK,gBAAgB;EAAA,QASPZ,OAAO;AAAA;AAAA,KAThBY,gBAAgB;AA4GtB,eAAeA,gBAAgB;AAAC;AAAA"},"metadata":{"react-intl":{"messages":[{"id":"Browse","defaultMessage":"Browse"},{"id":"Select","defaultMessage":"Select"}]}},"sourceType":"module","externalDependencies":[]}