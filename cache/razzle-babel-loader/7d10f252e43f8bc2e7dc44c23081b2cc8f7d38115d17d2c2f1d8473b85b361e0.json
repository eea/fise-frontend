{"ast":null,"code":"import _find from \"lodash/find\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Widgets/RecurrenceWidget/SelectInput.jsx\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n/**\n * SelectInput component.\n * @module components/manage/Widgets/RecurrenceWidget/SelectInput\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Select from 'react-select';\nimport { Option, DropdownIndicator, selectTheme, customSelectStyles } from '@plone/volto/components/manage/Widgets/SelectStyling';\n/**\n * SelectInput component class.\n * @function SelectInput\n * @returns {string} Markup of the component.\n */\nconst SelectInput = ({\n  name,\n  disabled,\n  options,\n  value,\n  onChange\n}) => {\n  const inlineSelectStyles = _objectSpread(_objectSpread({}, customSelectStyles), {}, {\n    control: (styles, state) => _objectSpread(_objectSpread({}, customSelectStyles.control(styles, state)), {}, {\n      minWidth: '130px'\n    })\n  });\n  const getDefaultValue = (choices, value) => {\n    const element = _find(choices, o => o.value === value);\n    return element ? element : {};\n  };\n  return __jsx(Select, {\n    isDisabled: disabled,\n    id: name,\n    name: name,\n    className: \"react-select-container\",\n    classNamePrefix: \"react-select\",\n    defaultValue: getDefaultValue(options, value),\n    value: getDefaultValue(options, value),\n    options: options,\n    styles: inlineSelectStyles,\n    theme: selectTheme,\n    components: {\n      DropdownIndicator,\n      Option\n    },\n    onChange: data => onChange(name, data.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  });\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nSelectInput.propTypes = {\n  name: PropTypes.string.isRequired,\n  options: PropTypes.array.isRequired,\n  disabled: PropTypes.bool,\n  value: PropTypes.any,\n  onChange: PropTypes.func\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nSelectInput.defaultProps = {\n  name: 'select',\n  options: [],\n  disabled: false,\n  value: null,\n  onChange: null\n};\nexport default SelectInput;","map":{"version":3,"names":["React","PropTypes","Select","Option","DropdownIndicator","selectTheme","customSelectStyles","SelectInput","name","disabled","options","value","onChange","inlineSelectStyles","control","styles","state","minWidth","getDefaultValue","choices","element","o","data","propTypes","string","isRequired","array","bool","any","func","defaultProps"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Widgets/RecurrenceWidget/SelectInput.jsx"],"sourcesContent":["/**\n * SelectInput component.\n * @module components/manage/Widgets/RecurrenceWidget/SelectInput\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Select from 'react-select';\nimport { find } from 'lodash';\nimport {\n  Option,\n  DropdownIndicator,\n  selectTheme,\n  customSelectStyles,\n} from '@plone/volto/components/manage/Widgets/SelectStyling';\n/**\n * SelectInput component class.\n * @function SelectInput\n * @returns {string} Markup of the component.\n */\nconst SelectInput = ({ name, disabled, options, value, onChange }) => {\n  const inlineSelectStyles = {\n    ...customSelectStyles,\n    control: (styles, state) => ({\n      ...customSelectStyles.control(styles, state),\n      minWidth: '130px',\n    }),\n  };\n  const getDefaultValue = (choices, value) => {\n    const element = find(choices, (o) => o.value === value);\n    return element ? element : {};\n  };\n\n  return (\n    <Select\n      isDisabled={disabled}\n      id={name}\n      name={name}\n      className=\"react-select-container\"\n      classNamePrefix=\"react-select\"\n      defaultValue={getDefaultValue(options, value)}\n      value={getDefaultValue(options, value)}\n      options={options}\n      styles={inlineSelectStyles}\n      theme={selectTheme}\n      components={{\n        DropdownIndicator,\n        Option,\n      }}\n      onChange={(data) => onChange(name, data.value)}\n    />\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nSelectInput.propTypes = {\n  name: PropTypes.string.isRequired,\n  options: PropTypes.array.isRequired,\n  disabled: PropTypes.bool,\n  value: PropTypes.any,\n  onChange: PropTypes.func,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nSelectInput.defaultProps = {\n  name: 'select',\n  options: [],\n  disabled: false,\n  value: null,\n  onChange: null,\n};\n\nexport default SelectInput;\n"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,MAAM,MAAM,cAAc;AAEjC,SACEC,MAAM,EACNC,iBAAiB,EACjBC,WAAW,EACXC,kBAAkB,QACb,sDAAsD;AAC7D;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,GAAG,CAAC;EAAEC,IAAI;EAAEC,QAAQ;EAAEC,OAAO;EAAEC,KAAK;EAAEC;AAAS,CAAC,KAAK;EACpE,MAAMC,kBAAkB,mCACnBP,kBAAkB;IACrBQ,OAAO,EAAE,CAACC,MAAM,EAAEC,KAAK,qCAClBV,kBAAkB,CAACQ,OAAO,CAACC,MAAM,EAAEC,KAAK,CAAC;MAC5CC,QAAQ,EAAE;IAAO;EACjB,EACH;EACD,MAAMC,eAAe,GAAG,CAACC,OAAO,EAAER,KAAK,KAAK;IAC1C,MAAMS,OAAO,GAAG,MAAKD,OAAO,EAAGE,CAAC,IAAKA,CAAC,CAACV,KAAK,KAAKA,KAAK,CAAC;IACvD,OAAOS,OAAO,GAAGA,OAAO,GAAG,CAAC,CAAC;EAC/B,CAAC;EAED,OACE,MAAC,MAAM;IACL,UAAU,EAAEX,QAAS;IACrB,EAAE,EAAED,IAAK;IACT,IAAI,EAAEA,IAAK;IACX,SAAS,EAAC,wBAAwB;IAClC,eAAe,EAAC,cAAc;IAC9B,YAAY,EAAEU,eAAe,CAACR,OAAO,EAAEC,KAAK,CAAE;IAC9C,KAAK,EAAEO,eAAe,CAACR,OAAO,EAAEC,KAAK,CAAE;IACvC,OAAO,EAAED,OAAQ;IACjB,MAAM,EAAEG,kBAAmB;IAC3B,KAAK,EAAER,WAAY;IACnB,UAAU,EAAE;MACVD,iBAAiB;MACjBD;IACF,CAAE;IACF,QAAQ,EAAGmB,IAAI,IAAKV,QAAQ,CAACJ,IAAI,EAAEc,IAAI,CAACX,KAAK,CAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAC/C;AAEN,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAJ,WAAW,CAACgB,SAAS,GAAG;EACtBf,IAAI,EAAEP,SAAS,CAACuB,MAAM,CAACC,UAAU;EACjCf,OAAO,EAAET,SAAS,CAACyB,KAAK,CAACD,UAAU;EACnChB,QAAQ,EAAER,SAAS,CAAC0B,IAAI;EACxBhB,KAAK,EAAEV,SAAS,CAAC2B,GAAG;EACpBhB,QAAQ,EAAEX,SAAS,CAAC4B;AACtB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAtB,WAAW,CAACuB,YAAY,GAAG;EACzBtB,IAAI,EAAE,QAAQ;EACdE,OAAO,EAAE,EAAE;EACXD,QAAQ,EAAE,KAAK;EACfE,KAAK,EAAE,IAAI;EACXC,QAAQ,EAAE;AACZ,CAAC;AAED,eAAeL,WAAW"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}