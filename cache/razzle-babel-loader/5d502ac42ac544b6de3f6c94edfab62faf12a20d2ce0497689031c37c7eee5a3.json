{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport { defineMessages } from 'react-intl';\nimport { DefaultCardModelSchema, schemaEnhancerFactory, addTypeSelect } from '@eeacms/volto-listing-block/schema-utils';\nconst messages = defineMessages({\n  title: {\n    \"id\": \"Card type\",\n    \"defaultMessage\": \"Card type\"\n  }\n});\nexport default function universalCardSchemaEnhancer(args) {\n  const props = _objectSpread({}, args);\n  const {\n    schema\n  } = props;\n  props.formData = props.formData || props.data;\n  const extensionName = 'cardTemplates';\n  const enhancer = schemaEnhancerFactory({\n    extensionName,\n    messages,\n    blockType: 'listing',\n    extensionField: '@type'\n  });\n  schema.fieldsets.push({\n    id: 'cardDesigner',\n    title: 'Card',\n    fields: ['itemModel']\n  });\n  const itemModelSchema = addTypeSelect(_objectSpread(_objectSpread({}, args), {}, {\n    schema: DefaultCardModelSchema,\n    extensionName,\n    messages\n  }));\n  const baseSchema = _objectSpread(_objectSpread({}, schema), {}, {\n    fieldsets: [...schema.fieldsets],\n    properties: _objectSpread(_objectSpread({}, schema.properties), {}, {\n      itemModel: {\n        title: 'Card model',\n        widget: 'object',\n        schema: itemModelSchema\n      }\n    })\n  });\n  const enhancedSchema = enhancer(_objectSpread(_objectSpread({}, props), {}, {\n    schema: baseSchema\n  }));\n  return enhancedSchema;\n}","map":{"version":3,"names":["defineMessages","DefaultCardModelSchema","schemaEnhancerFactory","addTypeSelect","messages","title","universalCardSchemaEnhancer","args","props","schema","formData","data","extensionName","enhancer","blockType","extensionField","fieldsets","push","id","fields","itemModelSchema","baseSchema","properties","itemModel","widget","enhancedSchema"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-listing-block/src/components/UniversalCard/schema.js"],"sourcesContent":["import { defineMessages } from 'react-intl';\nimport {\n  DefaultCardModelSchema,\n  schemaEnhancerFactory,\n  addTypeSelect,\n} from '@eeacms/volto-listing-block/schema-utils';\n\nconst messages = defineMessages({\n  title: {\n    id: 'Card type',\n    defaultMessage: 'Card type',\n  },\n});\n\nexport default function universalCardSchemaEnhancer(args) {\n  const props = { ...args };\n  const { schema } = props;\n\n  props.formData = props.formData || props.data;\n  const extensionName = 'cardTemplates';\n  const enhancer = schemaEnhancerFactory({\n    extensionName,\n    messages,\n    blockType: 'listing',\n    extensionField: '@type',\n  });\n\n  schema.fieldsets.push({\n    id: 'cardDesigner',\n    title: 'Card',\n    fields: ['itemModel'],\n  });\n\n  const itemModelSchema = addTypeSelect({\n    ...args,\n    schema: DefaultCardModelSchema,\n    extensionName,\n    messages,\n  });\n\n  const baseSchema = {\n    ...schema,\n    fieldsets: [...schema.fieldsets],\n    properties: {\n      ...schema.properties,\n      itemModel: {\n        title: 'Card model',\n        widget: 'object',\n        schema: itemModelSchema,\n      },\n    },\n  };\n\n  const enhancedSchema = enhancer({\n    ...props,\n    schema: baseSchema,\n  });\n\n  return enhancedSchema;\n}\n"],"mappings":";;;AAAA,SAASA,cAAc,QAAQ,YAAY;AAC3C,SACEC,sBAAsB,EACtBC,qBAAqB,EACrBC,aAAa,QACR,0CAA0C;AAEjD,MAAMC,QAAQ,GAAGJ,cAAc,CAAC;EAC9BK,KAAK;IAAA;IAAA;EAAA;AAIP,CAAC,CAAC;AAEF,eAAe,SAASC,2BAA2B,CAACC,IAAI,EAAE;EACxD,MAAMC,KAAK,qBAAQD,IAAI,CAAE;EACzB,MAAM;IAAEE;EAAO,CAAC,GAAGD,KAAK;EAExBA,KAAK,CAACE,QAAQ,GAAGF,KAAK,CAACE,QAAQ,IAAIF,KAAK,CAACG,IAAI;EAC7C,MAAMC,aAAa,GAAG,eAAe;EACrC,MAAMC,QAAQ,GAAGX,qBAAqB,CAAC;IACrCU,aAAa;IACbR,QAAQ;IACRU,SAAS,EAAE,SAAS;IACpBC,cAAc,EAAE;EAClB,CAAC,CAAC;EAEFN,MAAM,CAACO,SAAS,CAACC,IAAI,CAAC;IACpBC,EAAE,EAAE,cAAc;IAClBb,KAAK,EAAE,MAAM;IACbc,MAAM,EAAE,CAAC,WAAW;EACtB,CAAC,CAAC;EAEF,MAAMC,eAAe,GAAGjB,aAAa,iCAChCI,IAAI;IACPE,MAAM,EAAER,sBAAsB;IAC9BW,aAAa;IACbR;EAAQ,GACR;EAEF,MAAMiB,UAAU,mCACXZ,MAAM;IACTO,SAAS,EAAE,CAAC,GAAGP,MAAM,CAACO,SAAS,CAAC;IAChCM,UAAU,kCACLb,MAAM,CAACa,UAAU;MACpBC,SAAS,EAAE;QACTlB,KAAK,EAAE,YAAY;QACnBmB,MAAM,EAAE,QAAQ;QAChBf,MAAM,EAAEW;MACV;IAAC;EACF,EACF;EAED,MAAMK,cAAc,GAAGZ,QAAQ,iCAC1BL,KAAK;IACRC,MAAM,EAAEY;EAAU,GAClB;EAEF,OAAOI,cAAc;AACvB"},"metadata":{"react-intl":{"messages":[{"id":"Card type","defaultMessage":"Card type"}]}},"sourceType":"module","externalDependencies":[]}