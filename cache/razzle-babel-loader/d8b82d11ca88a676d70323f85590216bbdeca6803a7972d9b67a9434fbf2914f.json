{"ast":null,"code":"import _extends from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/extends.js\";\nimport _isEmpty from \"lodash/isEmpty\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/config/RichTextEditor/ToHTML.jsx\",\n  _this = this;\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport UniversalLink from '@plone/volto/components/manage/UniversalLink/UniversalLink';\nvar styles = {\n  code: {\n    backgroundColor: 'rgba(0, 0, 0, 0.05)',\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n    fontSize: 16,\n    padding: 2\n  },\n  codeBlock: {\n    backgroundColor: 'rgba(0, 0, 0, 0.05)',\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n    fontSize: 16,\n    padding: 20\n  }\n};\nvar addBreaklinesInline = function addBreaklinesInline(children) {\n  if (typeof children[0] == 'string') {\n    var s = children[0];\n    if (s.split('\\n').length > 1) {\n      return s.split('\\n').map(function (child, index) {\n        return __jsx(React.Fragment, {\n          key: child + index,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 9\n          }\n        }, child, (child === null || child === void 0 ? void 0 : child.length) > 0 && __jsx(\"br\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 33\n          }\n        }));\n      });\n    }\n  }\n  return children;\n};\n\n// Inline (not block) styles\nvar inline = {\n  BOLD: function BOLD(children, _ref) {\n    var key = _ref.key;\n    return __jsx(\"strong\", {\n      key: key,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 5\n      }\n    }, addBreaklinesInline(children));\n  },\n  ITALIC: function ITALIC(children, _ref2) {\n    var key = _ref2.key;\n    return __jsx(\"em\", {\n      key: key,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 5\n      }\n    }, addBreaklinesInline(children));\n  },\n  UNDERLINE: function UNDERLINE(children, _ref3) {\n    var key = _ref3.key;\n    return __jsx(\"u\", {\n      key: key,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 5\n      }\n    }, addBreaklinesInline(children));\n  },\n  CODE: function CODE(children, _ref4) {\n    var key = _ref4.key;\n    return __jsx(\"span\", {\n      key: key,\n      style: styles.code,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 5\n      }\n    }, children);\n  }\n};\nvar addBreaklines = function addBreaklines(children) {\n  return children.map(function (child) {\n    return child[1].map(function (child) {\n      return [__jsx(React.Fragment, {\n        key: child,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 7\n        }\n      }, child, __jsx(\"br\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 9\n        }\n      }))];\n    });\n  });\n};\nvar splitBySoftLines = function splitBySoftLines(children) {\n  return children.map(function (child) {\n    return child.map(function (item) {\n      if (Array.isArray(item)) {\n        return item[0].split('\\n');\n      }\n      return item;\n    });\n  });\n};\n\n// splitSoftLines for <li> tag\nvar splitSoftLinesOfLists = function splitSoftLinesOfLists(children) {\n  return children.map(function (child, index) {\n    return __jsx(\"li\", {\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 7\n      }\n    }, child.map(function (subchild) {\n      if (Array.isArray(subchild)) {\n        return subchild.map(function (subchildren) {\n          if (typeof subchildren === 'string') {\n            var last = subchildren.split('\\n').length - 1;\n            return subchildren.split('\\n').map(function (item, index) {\n              return __jsx(React.Fragment, {\n                key: index,\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 86,\n                  columnNumber: 19\n                }\n              }, item, index !== last && __jsx(\"br\", {\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 88,\n                  columnNumber: 40\n                }\n              }));\n            });\n          } else {\n            return subchildren;\n          }\n        });\n      } else {\n        return subchild;\n      }\n    }));\n  });\n};\n\n// Returns how the default lists should be rendered\nvar getList = function getList(ordered) {\n  return function (children, _ref5) {\n    var depth = _ref5.depth,\n      keys = _ref5.keys;\n    return ordered ? __jsx(\"ol\", {\n      key: keys[0],\n      keys: keys,\n      depth: depth,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 5\n      }\n    }, splitSoftLinesOfLists(children)) : __jsx(\"ul\", {\n      key: keys[0],\n      keys: keys,\n      depth: depth,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 5\n      }\n    }, splitSoftLinesOfLists(children));\n  };\n};\n\n// Special function to deal with list clones\n/*const getSpecialList = type => (children, { depth, keys }) => (\n  <ul key={keys[0]} keys={keys} depth={depth} className={type}>\n    {children.map((child, i) => (\n      <li key={keys[i]} className={`${type}-item`}>\n        {child}\n      </li>\n    ))}\n  </ul>\n);\n*/\n\n// Original recommended way to deal with atomics, this does not work with IMAGE\n// const getAtomic = (children, { data, keys }) =>\n//   data.map((item, i) => <div key={keys[i]} {...data[i]} />);\n\nvar processChildren = function processChildren(children, keys) {\n  var processedChildren = children.map(function (chunks) {\n    return chunks.map(function (child, index) {\n      if (Array.isArray(child)) {\n        // If it's empty is a blank paragraph, we want to add a <br /> in it\n        if (_isEmpty(child)) {\n          return __jsx(\"br\", {\n            key: index,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 18\n            }\n          });\n        }\n        return child.map(function (subchild, index) {\n          if (typeof subchild === 'string') {\n            var last = subchild.split('\\n').length - 1;\n            return subchild.split('\\n').map(function (item, index) {\n              return __jsx(React.Fragment, {\n                key: index,\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 143,\n                  columnNumber: 15\n                }\n              }, item, index !== last && __jsx(\"br\", {\n                __self: _this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 145,\n                  columnNumber: 36\n                }\n              }));\n            });\n          } else {\n            return subchild;\n          }\n        });\n      } else {\n        return child;\n      }\n    });\n  });\n  return processedChildren.map(function (chunk, index) {\n    return chunk && __jsx(\"p\", {\n      key: keys[index],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 32\n      }\n    }, chunk);\n  });\n};\n/**\n * Note that children can be maped to render a list or do other cool stuff\n */\nvar blocks = {\n  unstyled: function unstyled(children, _ref6) {\n    var keys = _ref6.keys;\n    return processChildren(children, keys);\n  },\n  atomic: function atomic(children) {\n    return children[0];\n  },\n  blockquote: function blockquote(children, _ref7) {\n    var keys = _ref7.keys;\n    return __jsx(\"blockquote\", {\n      key: keys[0],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 5\n      }\n    }, addBreaklines(splitBySoftLines(children)));\n  },\n  'header-one': function headerOne(children, _ref8) {\n    var keys = _ref8.keys;\n    return children.map(function (child, i) {\n      return __jsx(\"h1\", {\n        key: keys[i],\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 32\n        }\n      }, child);\n    });\n  },\n  'header-two': function headerTwo(children, _ref9) {\n    var keys = _ref9.keys;\n    return children.map(function (child, i) {\n      return __jsx(\"h2\", {\n        id: keys[i],\n        key: keys[i],\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 7\n        }\n      }, child);\n    });\n  },\n  'header-three': function headerThree(children, _ref10) {\n    var keys = _ref10.keys;\n    return children.map(function (child, i) {\n      return __jsx(\"h3\", {\n        id: keys[i],\n        key: keys[i],\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 7\n        }\n      }, child);\n    });\n  },\n  'header-four': function headerFour(children, _ref11) {\n    var keys = _ref11.keys;\n    return children.map(function (child, i) {\n      return __jsx(\"h4\", {\n        id: keys[i],\n        key: keys[i],\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 7\n        }\n      }, child);\n    });\n  },\n  'header-five': function headerFive(children, _ref12) {\n    var keys = _ref12.keys;\n    return children.map(function (child, i) {\n      return __jsx(\"h5\", {\n        id: keys[i],\n        key: keys[i],\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 7\n        }\n      }, child);\n    });\n  },\n  'header-six': function headerSix(children, _ref13) {\n    var keys = _ref13.keys;\n    return children.map(function (child, i) {\n      return __jsx(\"h6\", {\n        id: keys[i],\n        key: keys[i],\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 7\n        }\n      }, child);\n    });\n  },\n  'code-block': function codeBlock(children, _ref14) {\n    var keys = _ref14.keys;\n    return __jsx(\"pre\", {\n      key: keys[0],\n      style: styles.codeBlock,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 5\n      }\n    }, addBreaklines(children));\n  },\n  'unordered-list-item': getList(),\n  'ordered-list-item': getList(true),\n  callout: function callout(children, _ref15) {\n    var keys = _ref15.keys;\n    return children.map(function (child, i) {\n      return __jsx(\"p\", {\n        key: keys[i],\n        className: \"callout\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 7\n        }\n      }, child);\n    });\n  }\n};\nvar LinkEntity = connect(function (state) {\n  return {\n    token: state.userSession.token\n  };\n})(function (_ref16) {\n  var token = _ref16.token,\n    key = _ref16.key,\n    url = _ref16.url,\n    target = _ref16.target,\n    targetUrl = _ref16.targetUrl,\n    download = _ref16.download,\n    children = _ref16.children;\n  var to = token ? url : targetUrl || url;\n  return __jsx(UniversalLink, {\n    href: to,\n    openLinkInNewTab: target === '_blank' || undefined,\n    download: download,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 5\n    }\n  }, children);\n});\n_c = LinkEntity;\nvar entities = {\n  LINK: function LINK(children, props, _ref17) {\n    var key = _ref17.key;\n    return __jsx(LinkEntity, _extends({\n      key: key\n    }, props, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 5\n      }\n    }), children);\n  },\n  IMAGE: function IMAGE(children, entity, _ref18) {\n    var key = _ref18.key;\n    return __jsx(\"img\", {\n      key: key,\n      src: entity.src,\n      alt: entity.alt,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 5\n      }\n    });\n  }\n};\nexport var options = {\n  cleanup: false\n  // joinOutput: true,\n};\n\nvar renderers = {\n  inline: inline,\n  blocks: blocks,\n  entities: entities\n};\nexport default renderers;\nvar _c;\n$RefreshReg$(_c, \"LinkEntity\");","map":{"version":3,"names":["React","connect","UniversalLink","styles","code","backgroundColor","fontFamily","fontSize","padding","codeBlock","addBreaklinesInline","children","s","split","length","map","child","index","inline","BOLD","key","ITALIC","UNDERLINE","CODE","addBreaklines","splitBySoftLines","item","Array","isArray","splitSoftLinesOfLists","subchild","subchildren","last","getList","ordered","depth","keys","processChildren","processedChildren","chunks","chunk","blocks","unstyled","atomic","blockquote","i","callout","LinkEntity","state","token","userSession","url","target","targetUrl","download","to","undefined","entities","LINK","props","IMAGE","entity","src","alt","options","cleanup","renderers"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/config/RichTextEditor/ToHTML.jsx"],"sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { isEmpty } from 'lodash';\nimport UniversalLink from '@plone/volto/components/manage/UniversalLink/UniversalLink';\n\nconst styles = {\n  code: {\n    backgroundColor: 'rgba(0, 0, 0, 0.05)',\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n    fontSize: 16,\n    padding: 2,\n  },\n  codeBlock: {\n    backgroundColor: 'rgba(0, 0, 0, 0.05)',\n    fontFamily: '\"Inconsolata\", \"Menlo\", \"Consolas\", monospace',\n    fontSize: 16,\n    padding: 20,\n  },\n};\n\nconst addBreaklinesInline = (children) => {\n  if (typeof children[0] == 'string') {\n    const s = children[0];\n\n    if (s.split('\\n').length > 1) {\n      return s.split('\\n').map((child, index) => (\n        <React.Fragment key={child + index}>\n          {child}\n          {child?.length > 0 && <br />}\n        </React.Fragment>\n      ));\n    }\n  }\n  return children;\n};\n\n// Inline (not block) styles\nconst inline = {\n  BOLD: (children, { key }) => (\n    <strong key={key}>{addBreaklinesInline(children)}</strong>\n  ),\n  ITALIC: (children, { key }) => (\n    <em key={key}>{addBreaklinesInline(children)}</em>\n  ),\n  UNDERLINE: (children, { key }) => (\n    <u key={key}>{addBreaklinesInline(children)}</u>\n  ),\n  CODE: (children, { key }) => (\n    <span key={key} style={styles.code}>\n      {children}\n    </span>\n  ),\n};\n\nconst addBreaklines = (children) =>\n  children.map((child) => {\n    return child[1].map((child) => [\n      <React.Fragment key={child}>\n        {child}\n        <br />\n      </React.Fragment>,\n    ]);\n  });\n\nconst splitBySoftLines = (children) =>\n  children.map((child) => {\n    return child.map((item) => {\n      if (Array.isArray(item)) {\n        return item[0].split('\\n');\n      }\n      return item;\n    });\n  });\n\n// splitSoftLines for <li> tag\nconst splitSoftLinesOfLists = (children) =>\n  children.map((child, index) => {\n    return (\n      <li key={index}>\n        {child.map((subchild) => {\n          if (Array.isArray(subchild)) {\n            return subchild.map((subchildren) => {\n              if (typeof subchildren === 'string') {\n                const last = subchildren.split('\\n').length - 1;\n                return subchildren.split('\\n').map((item, index) => (\n                  <React.Fragment key={index}>\n                    {item}\n                    {index !== last && <br />}\n                  </React.Fragment>\n                ));\n              } else {\n                return subchildren;\n              }\n            });\n          } else {\n            return subchild;\n          }\n        })}\n      </li>\n    );\n  });\n\n// Returns how the default lists should be rendered\nconst getList = (ordered) => (children, { depth, keys }) =>\n  ordered ? (\n    <ol key={keys[0]} keys={keys} depth={depth}>\n      {splitSoftLinesOfLists(children)}\n    </ol>\n  ) : (\n    <ul key={keys[0]} keys={keys} depth={depth}>\n      {splitSoftLinesOfLists(children)}\n    </ul>\n  );\n\n// Special function to deal with list clones\n/*const getSpecialList = type => (children, { depth, keys }) => (\n  <ul key={keys[0]} keys={keys} depth={depth} className={type}>\n    {children.map((child, i) => (\n      <li key={keys[i]} className={`${type}-item`}>\n        {child}\n      </li>\n    ))}\n  </ul>\n);\n*/\n\n// Original recommended way to deal with atomics, this does not work with IMAGE\n// const getAtomic = (children, { data, keys }) =>\n//   data.map((item, i) => <div key={keys[i]} {...data[i]} />);\n\nconst processChildren = (children, keys) => {\n  const processedChildren = children.map((chunks) =>\n    chunks.map((child, index) => {\n      if (Array.isArray(child)) {\n        // If it's empty is a blank paragraph, we want to add a <br /> in it\n        if (isEmpty(child)) {\n          return <br key={index} />;\n        }\n        return child.map((subchild, index) => {\n          if (typeof subchild === 'string') {\n            const last = subchild.split('\\n').length - 1;\n            return subchild.split('\\n').map((item, index) => (\n              <React.Fragment key={index}>\n                {item}\n                {index !== last && <br />}\n              </React.Fragment>\n            ));\n          } else {\n            return subchild;\n          }\n        });\n      } else {\n        return child;\n      }\n    }),\n  );\n  return processedChildren.map(\n    (chunk, index) => chunk && <p key={keys[index]}>{chunk}</p>,\n  );\n};\n/**\n * Note that children can be maped to render a list or do other cool stuff\n */\nconst blocks = {\n  unstyled: (children, { keys }) => {\n    return processChildren(children, keys);\n  },\n  atomic: (children) => children[0],\n  blockquote: (children, { keys }) => (\n    <blockquote key={keys[0]}>\n      {addBreaklines(splitBySoftLines(children))}\n    </blockquote>\n  ),\n  'header-one': (children, { keys }) =>\n    children.map((child, i) => <h1 key={keys[i]}>{child}</h1>),\n  'header-two': (children, { keys }) =>\n    children.map((child, i) => (\n      <h2 id={keys[i]} key={keys[i]}>\n        {child}\n      </h2>\n    )),\n  'header-three': (children, { keys }) =>\n    children.map((child, i) => (\n      <h3 id={keys[i]} key={keys[i]}>\n        {child}\n      </h3>\n    )),\n  'header-four': (children, { keys }) =>\n    children.map((child, i) => (\n      <h4 id={keys[i]} key={keys[i]}>\n        {child}\n      </h4>\n    )),\n  'header-five': (children, { keys }) =>\n    children.map((child, i) => (\n      <h5 id={keys[i]} key={keys[i]}>\n        {child}\n      </h5>\n    )),\n  'header-six': (children, { keys }) =>\n    children.map((child, i) => (\n      <h6 id={keys[i]} key={keys[i]}>\n        {child}\n      </h6>\n    )),\n  'code-block': (children, { keys }) => (\n    <pre key={keys[0]} style={styles.codeBlock}>\n      {addBreaklines(children)}\n    </pre>\n  ),\n  'unordered-list-item': getList(),\n  'ordered-list-item': getList(true),\n  callout: (children, { keys }) =>\n    children.map((child, i) => (\n      <p key={keys[i]} className=\"callout\">\n        {child}\n      </p>\n    )),\n};\n\nconst LinkEntity = connect((state) => ({\n  token: state.userSession.token,\n}))(({ token, key, url, target, targetUrl, download, children }) => {\n  const to = token ? url : targetUrl || url;\n\n  return (\n    <UniversalLink\n      href={to}\n      openLinkInNewTab={target === '_blank' || undefined}\n      download={download}\n    >\n      {children}\n    </UniversalLink>\n  );\n});\n\nconst entities = {\n  LINK: (children, props, { key }) => (\n    <LinkEntity key={key} {...props}>\n      {children}\n    </LinkEntity>\n  ),\n\n  IMAGE: (children, entity, { key }) => (\n    <img key={key} src={entity.src} alt={entity.alt} />\n  ),\n};\n\nexport const options = {\n  cleanup: false,\n  // joinOutput: true,\n};\n\nconst renderers = {\n  inline,\n  blocks,\n  entities,\n};\n\nexport default renderers;\n"],"mappings":";;;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,aAAa;AAErC,OAAOC,aAAa,MAAM,4DAA4D;AAEtF,IAAMC,MAAM,GAAG;EACbC,IAAI,EAAE;IACJC,eAAe,EAAE,qBAAqB;IACtCC,UAAU,EAAE,+CAA+C;IAC3DC,QAAQ,EAAE,EAAE;IACZC,OAAO,EAAE;EACX,CAAC;EACDC,SAAS,EAAE;IACTJ,eAAe,EAAE,qBAAqB;IACtCC,UAAU,EAAE,+CAA+C;IAC3DC,QAAQ,EAAE,EAAE;IACZC,OAAO,EAAE;EACX;AACF,CAAC;AAED,IAAME,mBAAmB,GAAG,SAAtBA,mBAAmB,CAAIC,QAAQ,EAAK;EACxC,IAAI,OAAOA,QAAQ,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAE;IAClC,IAAMC,CAAC,GAAGD,QAAQ,CAAC,CAAC,CAAC;IAErB,IAAIC,CAAC,CAACC,KAAK,CAAC,IAAI,CAAC,CAACC,MAAM,GAAG,CAAC,EAAE;MAC5B,OAAOF,CAAC,CAACC,KAAK,CAAC,IAAI,CAAC,CAACE,GAAG,CAAC,UAACC,KAAK,EAAEC,KAAK;QAAA,OACpC,MAAC,KAAK,CAAC,QAAQ;UAAC,GAAG,EAAED,KAAK,GAAGC,KAAM;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,GAChCD,KAAK,EACL,CAAAA,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEF,MAAM,IAAG,CAAC,IAAI;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,EAAM,CACb;MAAA,CAClB,CAAC;IACJ;EACF;EACA,OAAOH,QAAQ;AACjB,CAAC;;AAED;AACA,IAAMO,MAAM,GAAG;EACbC,IAAI,EAAE,cAACR,QAAQ;IAAA,IAAIS,GAAG,QAAHA,GAAG;IAAA,OACpB;MAAQ,GAAG,EAAEA,GAAI;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAEV,mBAAmB,CAACC,QAAQ,CAAC,CAAU;EAAA,CAC3D;EACDU,MAAM,EAAE,gBAACV,QAAQ;IAAA,IAAIS,GAAG,SAAHA,GAAG;IAAA,OACtB;MAAI,GAAG,EAAEA,GAAI;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAEV,mBAAmB,CAACC,QAAQ,CAAC,CAAM;EAAA,CACnD;EACDW,SAAS,EAAE,mBAACX,QAAQ;IAAA,IAAIS,GAAG,SAAHA,GAAG;IAAA,OACzB;MAAG,GAAG,EAAEA,GAAI;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAEV,mBAAmB,CAACC,QAAQ,CAAC,CAAK;EAAA,CACjD;EACDY,IAAI,EAAE,cAACZ,QAAQ;IAAA,IAAIS,GAAG,SAAHA,GAAG;IAAA,OACpB;MAAM,GAAG,EAAEA,GAAI;MAAC,KAAK,EAAEjB,MAAM,CAACC,IAAK;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAChCO,QAAQ,CACJ;EAAA;AAEX,CAAC;AAED,IAAMa,aAAa,GAAG,SAAhBA,aAAa,CAAIb,QAAQ;EAAA,OAC7BA,QAAQ,CAACI,GAAG,CAAC,UAACC,KAAK,EAAK;IACtB,OAAOA,KAAK,CAAC,CAAC,CAAC,CAACD,GAAG,CAAC,UAACC,KAAK;MAAA,OAAK,CAC7B,MAAC,KAAK,CAAC,QAAQ;QAAC,GAAG,EAAEA,KAAM;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GACxBA,KAAK,EACN;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAAM,CACS,CAClB;IAAA,EAAC;EACJ,CAAC,CAAC;AAAA;AAEJ,IAAMS,gBAAgB,GAAG,SAAnBA,gBAAgB,CAAId,QAAQ;EAAA,OAChCA,QAAQ,CAACI,GAAG,CAAC,UAACC,KAAK,EAAK;IACtB,OAAOA,KAAK,CAACD,GAAG,CAAC,UAACW,IAAI,EAAK;MACzB,IAAIC,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC,EAAE;QACvB,OAAOA,IAAI,CAAC,CAAC,CAAC,CAACb,KAAK,CAAC,IAAI,CAAC;MAC5B;MACA,OAAOa,IAAI;IACb,CAAC,CAAC;EACJ,CAAC,CAAC;AAAA;;AAEJ;AACA,IAAMG,qBAAqB,GAAG,SAAxBA,qBAAqB,CAAIlB,QAAQ;EAAA,OACrCA,QAAQ,CAACI,GAAG,CAAC,UAACC,KAAK,EAAEC,KAAK,EAAK;IAC7B,OACE;MAAI,GAAG,EAAEA,KAAM;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACZD,KAAK,CAACD,GAAG,CAAC,UAACe,QAAQ,EAAK;MACvB,IAAIH,KAAK,CAACC,OAAO,CAACE,QAAQ,CAAC,EAAE;QAC3B,OAAOA,QAAQ,CAACf,GAAG,CAAC,UAACgB,WAAW,EAAK;UACnC,IAAI,OAAOA,WAAW,KAAK,QAAQ,EAAE;YACnC,IAAMC,IAAI,GAAGD,WAAW,CAAClB,KAAK,CAAC,IAAI,CAAC,CAACC,MAAM,GAAG,CAAC;YAC/C,OAAOiB,WAAW,CAAClB,KAAK,CAAC,IAAI,CAAC,CAACE,GAAG,CAAC,UAACW,IAAI,EAAET,KAAK;cAAA,OAC7C,MAAC,KAAK,CAAC,QAAQ;gBAAC,GAAG,EAAEA,KAAM;gBAAA;gBAAA;kBAAA;kBAAA;kBAAA;gBAAA;cAAA,GACxBS,IAAI,EACJT,KAAK,KAAKe,IAAI,IAAI;gBAAA;gBAAA;kBAAA;kBAAA;kBAAA;gBAAA;cAAA,EAAM,CACV;YAAA,CAClB,CAAC;UACJ,CAAC,MAAM;YACL,OAAOD,WAAW;UACpB;QACF,CAAC,CAAC;MACJ,CAAC,MAAM;QACL,OAAOD,QAAQ;MACjB;IACF,CAAC,CAAC,CACC;EAET,CAAC,CAAC;AAAA;;AAEJ;AACA,IAAMG,OAAO,GAAG,SAAVA,OAAO,CAAIC,OAAO;EAAA,OAAK,UAACvB,QAAQ;IAAA,IAAIwB,KAAK,SAALA,KAAK;MAAEC,IAAI,SAAJA,IAAI;IAAA,OACnDF,OAAO,GACL;MAAI,GAAG,EAAEE,IAAI,CAAC,CAAC,CAAE;MAAC,IAAI,EAAEA,IAAK;MAAC,KAAK,EAAED,KAAM;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACxCN,qBAAqB,CAAClB,QAAQ,CAAC,CAC7B,GAEL;MAAI,GAAG,EAAEyB,IAAI,CAAC,CAAC,CAAE;MAAC,IAAI,EAAEA,IAAK;MAAC,KAAK,EAAED,KAAM;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACxCN,qBAAqB,CAAClB,QAAQ,CAAC,CAEnC;EAAA;AAAA;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,IAAM0B,eAAe,GAAG,SAAlBA,eAAe,CAAI1B,QAAQ,EAAEyB,IAAI,EAAK;EAC1C,IAAME,iBAAiB,GAAG3B,QAAQ,CAACI,GAAG,CAAC,UAACwB,MAAM;IAAA,OAC5CA,MAAM,CAACxB,GAAG,CAAC,UAACC,KAAK,EAAEC,KAAK,EAAK;MAC3B,IAAIU,KAAK,CAACC,OAAO,CAACZ,KAAK,CAAC,EAAE;QACxB;QACA,IAAI,SAAQA,KAAK,CAAC,EAAE;UAClB,OAAO;YAAI,GAAG,EAAEC,KAAM;YAAA;YAAA;cAAA;cAAA;cAAA;YAAA;UAAA,EAAG;QAC3B;QACA,OAAOD,KAAK,CAACD,GAAG,CAAC,UAACe,QAAQ,EAAEb,KAAK,EAAK;UACpC,IAAI,OAAOa,QAAQ,KAAK,QAAQ,EAAE;YAChC,IAAME,IAAI,GAAGF,QAAQ,CAACjB,KAAK,CAAC,IAAI,CAAC,CAACC,MAAM,GAAG,CAAC;YAC5C,OAAOgB,QAAQ,CAACjB,KAAK,CAAC,IAAI,CAAC,CAACE,GAAG,CAAC,UAACW,IAAI,EAAET,KAAK;cAAA,OAC1C,MAAC,KAAK,CAAC,QAAQ;gBAAC,GAAG,EAAEA,KAAM;gBAAA;gBAAA;kBAAA;kBAAA;kBAAA;gBAAA;cAAA,GACxBS,IAAI,EACJT,KAAK,KAAKe,IAAI,IAAI;gBAAA;gBAAA;kBAAA;kBAAA;kBAAA;gBAAA;cAAA,EAAM,CACV;YAAA,CAClB,CAAC;UACJ,CAAC,MAAM;YACL,OAAOF,QAAQ;UACjB;QACF,CAAC,CAAC;MACJ,CAAC,MAAM;QACL,OAAOd,KAAK;MACd;IACF,CAAC,CAAC;EAAA,EACH;EACD,OAAOsB,iBAAiB,CAACvB,GAAG,CAC1B,UAACyB,KAAK,EAAEvB,KAAK;IAAA,OAAKuB,KAAK,IAAI;MAAG,GAAG,EAAEJ,IAAI,CAACnB,KAAK,CAAE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAEuB,KAAK,CAAK;EAAA,EAC5D;AACH,CAAC;AACD;AACA;AACA;AACA,IAAMC,MAAM,GAAG;EACbC,QAAQ,EAAE,kBAAC/B,QAAQ,SAAe;IAAA,IAAXyB,IAAI,SAAJA,IAAI;IACzB,OAAOC,eAAe,CAAC1B,QAAQ,EAAEyB,IAAI,CAAC;EACxC,CAAC;EACDO,MAAM,EAAE,gBAAChC,QAAQ;IAAA,OAAKA,QAAQ,CAAC,CAAC,CAAC;EAAA;EACjCiC,UAAU,EAAE,oBAACjC,QAAQ;IAAA,IAAIyB,IAAI,SAAJA,IAAI;IAAA,OAC3B;MAAY,GAAG,EAAEA,IAAI,CAAC,CAAC,CAAE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACtBZ,aAAa,CAACC,gBAAgB,CAACd,QAAQ,CAAC,CAAC,CAC/B;EAAA,CACd;EACD,YAAY,EAAE,mBAACA,QAAQ;IAAA,IAAIyB,IAAI,SAAJA,IAAI;IAAA,OAC7BzB,QAAQ,CAACI,GAAG,CAAC,UAACC,KAAK,EAAE6B,CAAC;MAAA,OAAK;QAAI,GAAG,EAAET,IAAI,CAACS,CAAC,CAAE;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAAE7B,KAAK,CAAM;IAAA,EAAC;EAAA;EAC5D,YAAY,EAAE,mBAACL,QAAQ;IAAA,IAAIyB,IAAI,SAAJA,IAAI;IAAA,OAC7BzB,QAAQ,CAACI,GAAG,CAAC,UAACC,KAAK,EAAE6B,CAAC;MAAA,OACpB;QAAI,EAAE,EAAET,IAAI,CAACS,CAAC,CAAE;QAAC,GAAG,EAAET,IAAI,CAACS,CAAC,CAAE;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAC3B7B,KAAK,CACH;IAAA,CACN,CAAC;EAAA;EACJ,cAAc,EAAE,qBAACL,QAAQ;IAAA,IAAIyB,IAAI,UAAJA,IAAI;IAAA,OAC/BzB,QAAQ,CAACI,GAAG,CAAC,UAACC,KAAK,EAAE6B,CAAC;MAAA,OACpB;QAAI,EAAE,EAAET,IAAI,CAACS,CAAC,CAAE;QAAC,GAAG,EAAET,IAAI,CAACS,CAAC,CAAE;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAC3B7B,KAAK,CACH;IAAA,CACN,CAAC;EAAA;EACJ,aAAa,EAAE,oBAACL,QAAQ;IAAA,IAAIyB,IAAI,UAAJA,IAAI;IAAA,OAC9BzB,QAAQ,CAACI,GAAG,CAAC,UAACC,KAAK,EAAE6B,CAAC;MAAA,OACpB;QAAI,EAAE,EAAET,IAAI,CAACS,CAAC,CAAE;QAAC,GAAG,EAAET,IAAI,CAACS,CAAC,CAAE;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAC3B7B,KAAK,CACH;IAAA,CACN,CAAC;EAAA;EACJ,aAAa,EAAE,oBAACL,QAAQ;IAAA,IAAIyB,IAAI,UAAJA,IAAI;IAAA,OAC9BzB,QAAQ,CAACI,GAAG,CAAC,UAACC,KAAK,EAAE6B,CAAC;MAAA,OACpB;QAAI,EAAE,EAAET,IAAI,CAACS,CAAC,CAAE;QAAC,GAAG,EAAET,IAAI,CAACS,CAAC,CAAE;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAC3B7B,KAAK,CACH;IAAA,CACN,CAAC;EAAA;EACJ,YAAY,EAAE,mBAACL,QAAQ;IAAA,IAAIyB,IAAI,UAAJA,IAAI;IAAA,OAC7BzB,QAAQ,CAACI,GAAG,CAAC,UAACC,KAAK,EAAE6B,CAAC;MAAA,OACpB;QAAI,EAAE,EAAET,IAAI,CAACS,CAAC,CAAE;QAAC,GAAG,EAAET,IAAI,CAACS,CAAC,CAAE;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAC3B7B,KAAK,CACH;IAAA,CACN,CAAC;EAAA;EACJ,YAAY,EAAE,mBAACL,QAAQ;IAAA,IAAIyB,IAAI,UAAJA,IAAI;IAAA,OAC7B;MAAK,GAAG,EAAEA,IAAI,CAAC,CAAC,CAAE;MAAC,KAAK,EAAEjC,MAAM,CAACM,SAAU;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACxCe,aAAa,CAACb,QAAQ,CAAC,CACpB;EAAA,CACP;EACD,qBAAqB,EAAEsB,OAAO,EAAE;EAChC,mBAAmB,EAAEA,OAAO,CAAC,IAAI,CAAC;EAClCa,OAAO,EAAE,iBAACnC,QAAQ;IAAA,IAAIyB,IAAI,UAAJA,IAAI;IAAA,OACxBzB,QAAQ,CAACI,GAAG,CAAC,UAACC,KAAK,EAAE6B,CAAC;MAAA,OACpB;QAAG,GAAG,EAAET,IAAI,CAACS,CAAC,CAAE;QAAC,SAAS,EAAC,SAAS;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GACjC7B,KAAK,CACJ;IAAA,CACL,CAAC;EAAA;AACN,CAAC;AAED,IAAM+B,UAAU,GAAG9C,OAAO,CAAC,UAAC+C,KAAK;EAAA,OAAM;IACrCC,KAAK,EAAED,KAAK,CAACE,WAAW,CAACD;EAC3B,CAAC;AAAA,CAAC,CAAC,CAAC,kBAAgE;EAAA,IAA7DA,KAAK,UAALA,KAAK;IAAE7B,GAAG,UAAHA,GAAG;IAAE+B,GAAG,UAAHA,GAAG;IAAEC,MAAM,UAANA,MAAM;IAAEC,SAAS,UAATA,SAAS;IAAEC,QAAQ,UAARA,QAAQ;IAAE3C,QAAQ,UAARA,QAAQ;EAC3D,IAAM4C,EAAE,GAAGN,KAAK,GAAGE,GAAG,GAAGE,SAAS,IAAIF,GAAG;EAEzC,OACE,MAAC,aAAa;IACZ,IAAI,EAAEI,EAAG;IACT,gBAAgB,EAAEH,MAAM,KAAK,QAAQ,IAAII,SAAU;IACnD,QAAQ,EAAEF,QAAS;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAElB3C,QAAQ,CACK;AAEpB,CAAC,CAAC;AAAC,KAdGoC,UAAU;AAgBhB,IAAMU,QAAQ,GAAG;EACfC,IAAI,EAAE,cAAC/C,QAAQ,EAAEgD,KAAK;IAAA,IAAIvC,GAAG,UAAHA,GAAG;IAAA,OAC3B,MAAC,UAAU;MAAC,GAAG,EAAEA;IAAI,GAAKuC,KAAK;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,IAC5BhD,QAAQ,CACE;EAAA,CACd;EAEDiD,KAAK,EAAE,eAACjD,QAAQ,EAAEkD,MAAM;IAAA,IAAIzC,GAAG,UAAHA,GAAG;IAAA,OAC7B;MAAK,GAAG,EAAEA,GAAI;MAAC,GAAG,EAAEyC,MAAM,CAACC,GAAI;MAAC,GAAG,EAAED,MAAM,CAACE,GAAI;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAG;EAAA;AAEvD,CAAC;AAED,OAAO,IAAMC,OAAO,GAAG;EACrBC,OAAO,EAAE;EACT;AACF,CAAC;;AAED,IAAMC,SAAS,GAAG;EAChBhD,MAAM,EAANA,MAAM;EACNuB,MAAM,EAANA,MAAM;EACNgB,QAAQ,EAARA;AACF,CAAC;AAED,eAAeS,SAAS;AAAC;AAAA"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}