{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-datablocks/src/components/manage/Blocks/SimpleDataTable/View.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport React from 'react';\nimport { compose } from 'redux';\nimport config from '@plone/volto/registry';\nimport { DefaultView } from './templates/default';\nimport { VisibilitySensor } from '@eeacms/volto-datablocks/components';\nimport { connectToProviderData } from '@eeacms/volto-datablocks/hocs';\nimport { serializeNodes } from '@eeacms/volto-datablocks/serialize';\nimport './styles.less';\nconst getAlignmentOfColumn = (col, idx) => {\n  return typeof col !== 'string' && col.textAlign ? col.textAlign : idx === 0 ? 'left' : 'right';\n};\nconst getNameOfColumn = col => {\n  return typeof col === 'string' ? col : col.column;\n};\nconst getTitleOfColumn = col => {\n  return typeof col === 'string' ? col : col.title || getNameOfColumn(col);\n};\nconst selectedColumnValidator = allColDefs => colDef => {\n  return typeof colDef === 'string' ? false : allColDefs.includes(colDef === null || colDef === void 0 ? void 0 : colDef.column);\n};\nconst getProviderDataLength = provider_data => {\n  var _provider_data$Object;\n  return provider_data ? ((_provider_data$Object = provider_data[Object.keys(provider_data)[0]]) === null || _provider_data$Object === void 0 ? void 0 : _provider_data$Object.length) || 0 : 0;\n};\nconst SimpleDataTableView = props => {\n  var _config$blocks$blocks, _config$blocks$blocks2, _config$blocks$blocks3;\n  const {\n    data = {},\n    pagination = {}\n  } = props;\n  const {\n    columns,\n    description,\n    has_pagination = false,\n    max_count = 5,\n    placeholder = 'No results',\n    show_header = false,\n    template = 'default'\n  } = data;\n  const provider_data = (pagination.data[pagination.activePage] ? pagination.data[pagination.activePage] : pagination.activePage !== pagination.prevPage ? pagination.data[pagination.prevPage] : null) || props.provider_data;\n  const provider_data_length = getProviderDataLength(provider_data);\n  const TableView = ((_config$blocks$blocks = config.blocks.blocksConfig.simpleDataConnectedTable) === null || _config$blocks$blocks === void 0 ? void 0 : (_config$blocks$blocks2 = _config$blocks$blocks.templates) === null || _config$blocks$blocks2 === void 0 ? void 0 : (_config$blocks$blocks3 = _config$blocks$blocks2[template]) === null || _config$blocks$blocks3 === void 0 ? void 0 : _config$blocks$blocks3.view) || DefaultView;\n\n  // TODO: sorting\n  const row_size = has_pagination ? !Object.keys(pagination.data).includes(pagination.activePage) ? provider_data_length : Math.min(pagination.itemsPerPage, provider_data_length) || 0 : max_count > 0 ? Math.min(max_count, provider_data_length) : provider_data_length;\n  const providerColumns = Object.keys(provider_data || {});\n  const showAllColumns = !Array.isArray(columns) || columns.length === 0;\n  const validator = selectedColumnValidator(providerColumns);\n  const selectedColumns = showAllColumns ? providerColumns : columns.filter(validator);\n  const tableData = provider_data;\n  return __jsx(\"div\", {\n    className: \"simple-data-table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: `table-title ${data.underline ? 'title-border' : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, description ? serializeNodes(description) : ''), __jsx(TableView, _extends({}, props, {\n    has_pagination: has_pagination,\n    placeholder: placeholder,\n    provider_data: provider_data,\n    provider_data_length: provider_data_length,\n    row_size: row_size,\n    selectedColumns: selectedColumns,\n    show_header: show_header,\n    tableData: tableData,\n    getAlignmentOfColumn: getAlignmentOfColumn,\n    getNameOfColumn: getNameOfColumn,\n    getTitleOfColumn: getTitleOfColumn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  })));\n};\nexport { SimpleDataTableView };\nconst SimpleDataTableViewWrapper = compose(connectToProviderData(props => {\n  var _props$data;\n  const {\n    max_count = 5\n  } = props.data;\n  return {\n    provider_url: (_props$data = props.data) === null || _props$data === void 0 ? void 0 : _props$data.provider_url,\n    pagination: {\n      enabled: props.data.has_pagination,\n      itemsPerPage: typeof max_count !== 'number' ? parseInt(max_count) : max_count\n    }\n  };\n}))(SimpleDataTableView);\nexport default (props => {\n  return __jsx(VisibilitySensor, {\n    offset: {\n      top: -150,\n      bottom: -150\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 5\n    }\n  }, __jsx(SimpleDataTableViewWrapper, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  })));\n});","map":{"version":3,"names":["React","compose","config","DefaultView","VisibilitySensor","connectToProviderData","serializeNodes","getAlignmentOfColumn","col","idx","textAlign","getNameOfColumn","column","getTitleOfColumn","title","selectedColumnValidator","allColDefs","colDef","includes","getProviderDataLength","provider_data","Object","keys","length","SimpleDataTableView","props","data","pagination","columns","description","has_pagination","max_count","placeholder","show_header","template","activePage","prevPage","provider_data_length","TableView","blocks","blocksConfig","simpleDataConnectedTable","templates","view","row_size","Math","min","itemsPerPage","providerColumns","showAllColumns","Array","isArray","validator","selectedColumns","filter","tableData","underline","SimpleDataTableViewWrapper","provider_url","enabled","parseInt","top","bottom"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-datablocks/src/components/manage/Blocks/SimpleDataTable/View.jsx"],"sourcesContent":["import React from 'react';\nimport { compose } from 'redux';\nimport config from '@plone/volto/registry';\nimport { DefaultView } from './templates/default';\nimport { VisibilitySensor } from '@eeacms/volto-datablocks/components';\nimport { connectToProviderData } from '@eeacms/volto-datablocks/hocs';\nimport { serializeNodes } from '@eeacms/volto-datablocks/serialize';\n\nimport './styles.less';\n\nconst getAlignmentOfColumn = (col, idx) => {\n  return typeof col !== 'string' && col.textAlign\n    ? col.textAlign\n    : idx === 0\n    ? 'left'\n    : 'right';\n};\n\nconst getNameOfColumn = (col) => {\n  return typeof col === 'string' ? col : col.column;\n};\n\nconst getTitleOfColumn = (col) => {\n  return typeof col === 'string' ? col : col.title || getNameOfColumn(col);\n};\n\nconst selectedColumnValidator = (allColDefs) => (colDef) => {\n  return typeof colDef === 'string'\n    ? false\n    : allColDefs.includes(colDef?.column);\n};\n\nconst getProviderDataLength = (provider_data) => {\n  return provider_data\n    ? provider_data[Object.keys(provider_data)[0]]?.length || 0\n    : 0;\n};\n\nconst SimpleDataTableView = (props) => {\n  const { data = {}, pagination = {} } = props;\n  const {\n    columns,\n    description,\n    has_pagination = false,\n    max_count = 5,\n    placeholder = 'No results',\n    show_header = false,\n    template = 'default',\n  } = data;\n\n  const provider_data =\n    (pagination.data[pagination.activePage]\n      ? pagination.data[pagination.activePage]\n      : pagination.activePage !== pagination.prevPage\n      ? pagination.data[pagination.prevPage]\n      : null) || props.provider_data;\n  const provider_data_length = getProviderDataLength(provider_data);\n\n  const TableView =\n    config.blocks.blocksConfig.simpleDataConnectedTable?.templates?.[template]\n      ?.view || DefaultView;\n\n  // TODO: sorting\n  const row_size = has_pagination\n    ? !Object.keys(pagination.data).includes(pagination.activePage)\n      ? provider_data_length\n      : Math.min(pagination.itemsPerPage, provider_data_length) || 0\n    : max_count > 0\n    ? Math.min(max_count, provider_data_length)\n    : provider_data_length;\n\n  const providerColumns = Object.keys(provider_data || {});\n  const showAllColumns = !Array.isArray(columns) || columns.length === 0;\n  const validator = selectedColumnValidator(providerColumns);\n  const selectedColumns = showAllColumns\n    ? providerColumns\n    : columns.filter(validator);\n\n  const tableData = provider_data;\n\n  return (\n    <div className=\"simple-data-table\">\n      <div className={`table-title ${data.underline ? 'title-border' : ''}`}>\n        {description ? serializeNodes(description) : ''}\n      </div>\n      <TableView\n        {...props}\n        has_pagination={has_pagination}\n        placeholder={placeholder}\n        provider_data={provider_data}\n        provider_data_length={provider_data_length}\n        row_size={row_size}\n        selectedColumns={selectedColumns}\n        show_header={show_header}\n        tableData={tableData}\n        getAlignmentOfColumn={getAlignmentOfColumn}\n        getNameOfColumn={getNameOfColumn}\n        getTitleOfColumn={getTitleOfColumn}\n      />\n    </div>\n  );\n};\n\nexport { SimpleDataTableView };\n\nconst SimpleDataTableViewWrapper = compose(\n  connectToProviderData((props) => {\n    const { max_count = 5 } = props.data;\n    return {\n      provider_url: props.data?.provider_url,\n      pagination: {\n        enabled: props.data.has_pagination,\n        itemsPerPage:\n          typeof max_count !== 'number' ? parseInt(max_count) : max_count,\n      },\n    };\n  }),\n)(SimpleDataTableView);\n\nexport default (props) => {\n  return (\n    <VisibilitySensor offset={{ top: -150, bottom: -150 }}>\n      <SimpleDataTableViewWrapper {...props} />\n    </VisibilitySensor>\n  );\n};\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}