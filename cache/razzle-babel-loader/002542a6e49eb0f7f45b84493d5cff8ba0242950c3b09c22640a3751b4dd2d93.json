{"ast":null,"code":"import _without from \"lodash/without\";\nimport _isEmpty from \"lodash/isEmpty\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-columns-block/src/ColumnsBlock/ColumnsBlockEdit.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport React from 'react';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport { compose } from 'redux';\nimport { Grid, Segment } from 'semantic-ui-react';\nimport { SidebarPortal, BlocksToolbar, Icon } from '@plone/volto/components'; // BlocksForm, Icon,\nimport InlineForm from '@plone/volto/components/manage/Form/InlineForm';\nimport { emptyBlocksForm, getBlocksLayoutFieldname } from '@plone/volto/helpers';\nimport { setSidebarTab } from '@plone/volto/actions';\nimport { connect } from 'react-redux';\nimport { BlocksForm } from '@plone/volto/components';\nimport { Button } from 'semantic-ui-react';\nimport config from '@plone/volto/registry';\nimport cx from 'classnames';\nimport { ColumnsBlockSchema } from './schema';\nimport { getColumns, empty, defaultNewColumn, hasColumns, forEachColumn, columnIsEmpty } from './utils';\nimport ColumnVariations from './ColumnVariations';\nimport EditBlockWrapper from './EditBlockWrapper';\nimport { COLUMNSBLOCK } from '@eeacms/volto-columns-block/constants';\nimport { makeStyleSchema, getStyle } from '../Styles';\nimport tuneSVG from '@plone/volto/icons/column.svg';\nimport upSVG from '@plone/volto/icons/up.svg';\nimport '../less/columns.less';\nconst messages = defineMessages({\n  labelColumn: {\n    \"id\": \"Column\",\n    \"defaultMessage\": \"Column\"\n  },\n  labelColumnsBlock: {\n    \"id\": \"Columns block\",\n    \"defaultMessage\": \"Columns block\"\n  },\n  labelToColSettings: {\n    \"id\": \"Go to Column settings\",\n    \"defaultMessage\": \"Go to Column settings\"\n  }\n});\n\n/*\n * not pretty, there's a lot of render props passing, to please React\n * reconciliation algos\n *\n\nColumnsBlockEdit -> passes EditBlockWrapper into\n  -> BlocksForm -> which passes (with EditBlock) into\n    -> DragDropList -> which renders them all\n*/\nclass ColumnsBlockEdit extends React.Component {\n  constructor(props) {\n    super(props);\n    _defineProperty(this, \"createFrom\", initialData => {\n      const {\n        gridCols,\n        gridSize\n      } = initialData;\n      return {\n        data: empty(gridCols.length),\n        gridSize,\n        gridCols\n      };\n    });\n    _defineProperty(this, \"handleKeyDown\", (e, index, block, node, {\n      disableEnter = false,\n      disableArrowUp = false,\n      disableArrowDown = false\n    } = {}) => {\n      const hasblockActive = Object.keys(this.state.colSelections).length > 0;\n      if (e.key === 'ArrowUp' && !disableArrowUp && !hasblockActive) {\n        this.props.onFocusPreviousBlock(block, node);\n        e.preventDefault();\n      }\n      if (e.key === 'ArrowDown' && !disableArrowDown && !hasblockActive) {\n        this.props.onFocusNextBlock(block, node);\n        e.preventDefault();\n      }\n      if (e.key === 'Enter' && !disableEnter && !hasblockActive) {\n        this.props.onAddBlock(config.settings.defaultBlockType, index + 1);\n        e.preventDefault();\n      }\n    });\n    _defineProperty(this, \"onChangeColumnSettings\", (id, value) => {\n      var _coldata$blocks, _coldata$blocks2, _coldata$blocks2$this;\n      const {\n        data,\n        onChangeBlock,\n        block\n      } = this.props;\n      const coldata = data.data;\n      const formData = _objectSpread(_objectSpread({}, data), {}, {\n        data: _objectSpread(_objectSpread({}, coldata), {}, {\n          blocks: _objectSpread(_objectSpread({}, coldata.blocks), {}, {\n            [this.state.activeColumn]: _objectSpread(_objectSpread({}, (_coldata$blocks = coldata.blocks) === null || _coldata$blocks === void 0 ? void 0 : _coldata$blocks[this.state.activeColumn]), {}, {\n              settings: _objectSpread(_objectSpread({}, (_coldata$blocks2 = coldata.blocks) === null || _coldata$blocks2 === void 0 ? void 0 : (_coldata$blocks2$this = _coldata$blocks2[this.state.activeColumn]) === null || _coldata$blocks2$this === void 0 ? void 0 : _coldata$blocks2$this.settings), {}, {\n                [id]: value\n              })\n            })\n          })\n        })\n      });\n      onChangeBlock(block, formData);\n    });\n    _defineProperty(this, \"onChangeColumnData\", (id, value, colId) => {\n      const {\n        data,\n        onChangeBlock,\n        block,\n        onChangeField\n      } = this.props;\n      const coldata = data.data;\n      // special handling of blocks and blocks_layout\n      if (['blocks', 'blocks_layout'].indexOf(id) > -1) {\n        var _coldata$blocks3;\n        this.blocksState[id] = value;\n        onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n          data: _objectSpread(_objectSpread({}, coldata), {}, {\n            blocks: _objectSpread(_objectSpread({}, coldata.blocks), {}, {\n              [colId]: _objectSpread(_objectSpread({}, (_coldata$blocks3 = coldata.blocks) === null || _coldata$blocks3 === void 0 ? void 0 : _coldata$blocks3[colId]), this.blocksState)\n            })\n          })\n        }));\n      } else {\n        onChangeField(id, value);\n      }\n    });\n    _defineProperty(this, \"onSelectBlock\", (id, colId, colData, activeBlock, isMultipleSelection, event) => {\n      let newMultiSelected = [];\n      let selected = id;\n      if (isMultipleSelection) {\n        selected = null;\n        const blocksLayoutFieldname = getBlocksLayoutFieldname(colData);\n        const blocks_layout = colData[blocksLayoutFieldname].items;\n        if (event.shiftKey) {\n          const anchor = this.state.multiSelected.length > 0 ? blocks_layout.indexOf(this.state.multiSelected[0]) : blocks_layout.indexOf(activeBlock);\n          const focus = blocks_layout.indexOf(id);\n          if (anchor === focus) {\n            newMultiSelected = [id];\n          } else if (focus > anchor) {\n            newMultiSelected = [...blocks_layout.slice(anchor, focus + 1)];\n          } else {\n            newMultiSelected = [...blocks_layout.slice(focus, anchor + 1)];\n          }\n        }\n        if ((event.ctrlKey || event.metaKey) && !event.shiftKey) {\n          if (this.state.multiSelected.includes(id)) {\n            selected = null;\n            newMultiSelected = _without(this.state.multiSelected, id);\n          } else {\n            newMultiSelected = [...(this.state.multiSelected || []), id];\n          }\n        }\n      }\n      this.setState({\n        multiSelected: newMultiSelected,\n        colSelections: {\n          // this invalidates selection in all other columns\n          [colId]: selected\n        }\n      });\n    });\n    _defineProperty(this, \"getColumnsBlockSchema\", () => {\n      var _config$blocks$blocks, _config$blocks$blocks2;\n      const variants = ((_config$blocks$blocks = config.blocks.blocksConfig) === null || _config$blocks$blocks === void 0 ? void 0 : (_config$blocks$blocks2 = _config$blocks$blocks[COLUMNSBLOCK]) === null || _config$blocks$blocks2 === void 0 ? void 0 : _config$blocks$blocks2.variants) || [];\n      const schema = ColumnsBlockSchema(this.props.intl);\n      const {\n        data\n      } = this.props;\n      const {\n        blocks_layout = {}\n      } = data.data || {};\n      const nrOfColumns = ((blocks_layout === null || blocks_layout === void 0 ? void 0 : blocks_layout.items) || []).length;\n      const available_variants = variants.filter(({\n        defaultData\n      }) => {\n        var _defaultData$gridCols;\n        return (defaultData === null || defaultData === void 0 ? void 0 : (_defaultData$gridCols = defaultData.gridCols) === null || _defaultData$gridCols === void 0 ? void 0 : _defaultData$gridCols.length) === nrOfColumns;\n      });\n      schema.properties.gridCols.choices = available_variants.map(({\n        defaultData,\n        title\n      }) => [defaultData === null || defaultData === void 0 ? void 0 : defaultData.gridCols, title]);\n      return schema;\n    });\n    this.state = {\n      multiSelected: [],\n      colSelections: {},\n      // selected block for each column\n      showSidebar: false,\n      activeColumn: null\n    };\n\n    // This special variable is needed because of the onChangeField(block...) is\n    // immediately followed by onChangeField(blocks_layout...), we want to save\n    // this incoming information as data for the block, but because it is only\n    // partial, we'll overwrite it in the second request. So we take advantage\n    // of what happens between batched updates, we know that there will be two\n    // calls, so even if we overwrite the state improperly on the first pass,\n    // it will be fixed on the second pass if we have access to the proper\n    // value from the first pass.\n    //\n    // We have volto-slate that does:\n    // ReactDOM.unstable_batchedUpdates(() => {\n    //    this.onChangeField(blocks, {})\n    //    this.onChangeField(blocks_layout, {})\n    // }\n    // volto-slate needs to be neutral, to work in the main Volto form, but\n    // also these types of subforms, so it should continue to use batched\n    // onChangeField, as that works fine. So volto-columns-block needs that\n    // blockState trick to overcome this. If there would be a onChangeBlocks or\n    // onChangeFormData in Volto core, then BlocksForm could match that API\n    // and this wouldn't be needed (together with the unstable_batchedUpdates\n    // calls).\n    this.blocksState = {};\n  }\n  componentDidUpdate(prevProps) {\n    var _config$blocks$blocks3, _config$blocks$blocks4, _this$props$data$data, _this$props$data$data2, _prevProps$data$data, _prevProps$data$data$;\n    const variants = ((_config$blocks$blocks3 = config.blocks.blocksConfig) === null || _config$blocks$blocks3 === void 0 ? void 0 : (_config$blocks$blocks4 = _config$blocks$blocks3[COLUMNSBLOCK]) === null || _config$blocks$blocks4 === void 0 ? void 0 : _config$blocks$blocks4.variants) || [];\n    const cols = ((_this$props$data$data = this.props.data.data) === null || _this$props$data$data === void 0 ? void 0 : (_this$props$data$data2 = _this$props$data$data.blocks_layout) === null || _this$props$data$data2 === void 0 ? void 0 : _this$props$data$data2.items) || [];\n    const prevCols = ((_prevProps$data$data = prevProps.data.data) === null || _prevProps$data$data === void 0 ? void 0 : (_prevProps$data$data$ = _prevProps$data$data.blocks_layout) === null || _prevProps$data$data$ === void 0 ? void 0 : _prevProps$data$data$.items) || [];\n    const colNumChanged = cols.length !== prevCols.length;\n    const initialLayoutSelection = Object.keys(prevProps.data).length === 1;\n    const shouldUpdateLayout = colNumChanged && !initialLayoutSelection;\n    if (shouldUpdateLayout) {\n      const available_variants = variants.filter(({\n        defaultData\n      }) => {\n        var _defaultData$gridCols2;\n        return (defaultData === null || defaultData === void 0 ? void 0 : (_defaultData$gridCols2 = defaultData.gridCols) === null || _defaultData$gridCols2 === void 0 ? void 0 : _defaultData$gridCols2.length) === cols.length;\n      });\n      const variant = available_variants === null || available_variants === void 0 ? void 0 : available_variants[0];\n      if (variant) {\n        return this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n          gridSize: variant.defaultData.gridSize,\n          gridCols: variant.defaultData.gridCols\n        }));\n      }\n    }\n    const {\n      block,\n      onChangeBlock,\n      data\n    } = this.props;\n\n    // fill empty columns\n    if (hasColumns(data.data)) {\n      forEachColumn(data.data, ([colId, colData]) => {\n        if (columnIsEmpty(colData)) {\n          const newData = _objectSpread(_objectSpread({}, data), {}, {\n            data: _objectSpread(_objectSpread({}, data.data), {}, {\n              blocks: _objectSpread(_objectSpread({}, data.data.blocks), {}, {\n                [colId]: defaultNewColumn()\n              })\n            })\n          });\n          onChangeBlock(block, newData);\n        }\n      });\n    }\n  }\n  render() {\n    var _coldata$blocks4, _data$data3, _data$data3$blocks, _data$data3$blocks$th;\n    const {\n      block,\n      data,\n      onChangeBlock,\n      pathname,\n      selected,\n      manage\n    } = this.props;\n    const metadata = this.props.metadata || this.props.properties;\n    const {\n      gridCols,\n      gridSize\n    } = data;\n    const coldata = data.data;\n    const columnList = getColumns(coldata);\n    const selectedCol = Object.keys(this.state.colSelections).length > 0 ? Object.keys(this.state.colSelections)[0] : null;\n    const selectedColData = (coldata === null || coldata === void 0 ? void 0 : (_coldata$blocks4 = coldata.blocks) === null || _coldata$blocks4 === void 0 ? void 0 : _coldata$blocks4[selectedCol]) || null;\n    const selectedBlock = this.state.colSelections[selectedCol];\n    const {\n      gridSizes,\n      variants,\n      available_colors\n    } = config.blocks.blocksConfig[COLUMNSBLOCK];\n    const ColumnSchema = makeStyleSchema({\n      available_colors\n    }, this.props.intl);\n    return __jsx(\"div\", {\n      role: \"presentation\",\n      className: \"columns-block\",\n      onKeyDown: e => {\n        this.handleKeyDown(e, this.props.index, this.props.block, this.props.blockNode.current);\n      }\n      // The tabIndex is required for the keyboard navigation\n      /* eslint-disable jsx-a11y/no-noninteractive-tabindex */,\n      tabIndex: -1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 7\n      }\n    }, data.coldata ? 'old style columns block, safe to remove it' : '', !(data !== null && data !== void 0 && data.data) ? __jsx(ColumnVariations, {\n      variants: variants.filter(variant => variant.common),\n      data: data,\n      onChange: initialData => {\n        onChangeBlock(block, _objectSpread(_objectSpread({}, data), this.createFrom(initialData)));\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 11\n      }\n    }) : __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: \"columns-header\",\n      onClick: () => {\n        this.setState({\n          showSidebar: true,\n          colSelections: {}\n        });\n        this.props.setSidebarTab(1);\n      },\n      \"aria-hidden\": \"true\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 13\n      }\n    }, data.title || __jsx(FormattedMessage, {\n      id: \"Columns block\",\n      defaultMessage: \"Columns block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 17\n      }\n    })), __jsx(Grid, {\n      columns: gridSize,\n      className: \"column-grid\",\n      stackable: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 13\n      }\n    }, columnList.map(([colId, column], index) => {\n      var _data$data, _data$data$blocks, _data$data$blocks$col, _data$data$blocks$col2, _data$data2, _data$data2$blocks, _data$data2$blocks$co, _data$instructions;\n      return __jsx(Grid.Column, _extends({\n        className: cx('block-column', data === null || data === void 0 ? void 0 : (_data$data = data.data) === null || _data$data === void 0 ? void 0 : (_data$data$blocks = _data$data.blocks) === null || _data$data$blocks === void 0 ? void 0 : (_data$data$blocks$col = _data$data$blocks[colId]) === null || _data$data$blocks$col === void 0 ? void 0 : (_data$data$blocks$col2 = _data$data$blocks$col.settings) === null || _data$data$blocks$col2 === void 0 ? void 0 : _data$data$blocks$col2.column_class),\n        key: colId\n      }, gridSizes[gridCols[index]] || gridCols[index], getStyle((data === null || data === void 0 ? void 0 : (_data$data2 = data.data) === null || _data$data2 === void 0 ? void 0 : (_data$data2$blocks = _data$data2.blocks) === null || _data$data2$blocks === void 0 ? void 0 : (_data$data2$blocks$co = _data$data2$blocks[colId]) === null || _data$data2$blocks$co === void 0 ? void 0 : _data$data2$blocks$co.settings) || {}), {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 17\n        }\n      }), __jsx(BlocksForm, {\n        key: colId,\n        title: data === null || data === void 0 ? void 0 : data.placeholder,\n        description: data === null || data === void 0 ? void 0 : (_data$instructions = data.instructions) === null || _data$instructions === void 0 ? void 0 : _data$instructions.data,\n        manage: manage,\n        allowedBlocks: data === null || data === void 0 ? void 0 : data.allowedBlocks,\n        metadata: metadata,\n        properties: _objectSpread(_objectSpread({}, metadata), _isEmpty(column) ? emptyBlocksForm() : column),\n        disableEvents: true,\n        selectedBlock: selected ? this.state.colSelections[colId] : null,\n        onSelectBlock: (id, selected, e) => {\n          const isMultipleSelection = e ? e.shiftKey || e.ctrlKey || e.metaKey : false;\n          this.onSelectBlock(id, colId, selectedColData, selectedBlock, selectedCol !== colId || selectedBlock === id ? false : isMultipleSelection, e);\n        },\n        onChangeFormData: newFormData => {\n          var _coldata$blocks5;\n          onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n            data: _objectSpread(_objectSpread({}, coldata), {}, {\n              blocks: _objectSpread(_objectSpread({}, coldata.blocks), {}, {\n                [colId]: _objectSpread(_objectSpread({}, (_coldata$blocks5 = coldata.blocks) === null || _coldata$blocks5 === void 0 ? void 0 : _coldata$blocks5[colId]), {}, {\n                  blocks: newFormData.blocks,\n                  blocks_layout: newFormData.blocks_layout\n                })\n              })\n            })\n          }));\n        },\n        onChangeField: (id, value) => this.onChangeColumnData(id, value, colId),\n        pathname: pathname,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 19\n        }\n      }, ({\n        draginfo\n      }, editBlock, blockProps) => __jsx(EditBlockWrapper, {\n        draginfo: draginfo,\n        blockProps: blockProps,\n        extraControls: __jsx(React.Fragment, null, !(data !== null && data !== void 0 && data.readOnlySettings) && __jsx(Button, {\n          icon: true,\n          basic: true,\n          title: this.props.intl.formatMessage(messages.labelToColSettings),\n          onClick: () => {\n            this.setState({\n              showSidebar: true,\n              activeColumn: colId,\n              colSelections: {}\n            });\n            this.props.setSidebarTab(1);\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 436,\n            columnNumber: 31\n          }\n        }, __jsx(Icon, {\n          name: tuneSVG,\n          className: \"\",\n          size: \"19px\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 451,\n            columnNumber: 33\n          }\n        }))),\n        multiSelected: this.state.multiSelected.includes(blockProps.block),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 430,\n          columnNumber: 23\n        }\n      }, editBlock)));\n    }))), selected && selectedColData ? __jsx(BlocksToolbar, {\n      formData: selectedColData,\n      selectedBlock: selectedBlock,\n      selectedBlocks: this.state.multiSelected,\n      onChangeBlocks: newBlockData => {\n        onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n          data: _objectSpread(_objectSpread({}, coldata), {}, {\n            blocks: _objectSpread(_objectSpread({}, coldata.blocks), {}, {\n              [selectedCol]: _objectSpread(_objectSpread({}, selectedColData), newBlockData)\n            })\n          })\n        }));\n      },\n      onSetSelectedBlocks: blockIds => {\n        this.setState({\n          multiSelected: blockIds\n        });\n      },\n      onSelectBlock: this.onSelectBlock,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 11\n      }\n    }) : '', Object.keys(this.state.colSelections).length === 0 && !(data !== null && data !== void 0 && data.readOnlySettings) ? __jsx(SidebarPortal, {\n      selected: selected,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 11\n      }\n    }, this.state.activeColumn ? __jsx(React.Fragment, null, __jsx(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 17\n      }\n    }, __jsx(Button, {\n      onClick: () => this.setState({\n        activeColumn: null\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 19\n      }\n    }, __jsx(Icon, {\n      name: upSVG,\n      size: \"14px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 21\n      }\n    }), __jsx(FormattedMessage, {\n      id: \"Edit parent columns block\",\n      defaultMessage: \"Edit parent columns block\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 21\n      }\n    }))), __jsx(InlineForm, {\n      schema: ColumnSchema,\n      title: `${this.props.intl.formatMessage(messages.labelColumn)} ${columnList.map(([colId]) => colId).indexOf(this.state.activeColumn) + 1}`,\n      onChangeField: this.onChangeColumnSettings,\n      formData: (data === null || data === void 0 ? void 0 : (_data$data3 = data.data) === null || _data$data3 === void 0 ? void 0 : (_data$data3$blocks = _data$data3.blocks) === null || _data$data3$blocks === void 0 ? void 0 : (_data$data3$blocks$th = _data$data3$blocks[this.state.activeColumn]) === null || _data$data3$blocks$th === void 0 ? void 0 : _data$data3$blocks$th.settings) || {},\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 17\n      }\n    })) : __jsx(InlineForm, {\n      schema: this.getColumnsBlockSchema(),\n      title: this.props.intl.formatMessage(messages.labelColumnsBlock),\n      onChangeField: (id, value) => {\n        onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n          [id]: value\n        }));\n      },\n      formData: data,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 15\n      }\n    })) : '');\n  }\n}\nexport default compose(injectIntl, connect((state, props) => {\n  return {};\n}, {\n  setSidebarTab\n}))(ColumnsBlockEdit);","map":{"version":3,"names":["React","defineMessages","FormattedMessage","injectIntl","compose","Grid","Segment","SidebarPortal","BlocksToolbar","Icon","InlineForm","emptyBlocksForm","getBlocksLayoutFieldname","setSidebarTab","connect","BlocksForm","Button","config","cx","ColumnsBlockSchema","getColumns","empty","defaultNewColumn","hasColumns","forEachColumn","columnIsEmpty","ColumnVariations","EditBlockWrapper","COLUMNSBLOCK","makeStyleSchema","getStyle","tuneSVG","upSVG","messages","labelColumn","labelColumnsBlock","labelToColSettings","ColumnsBlockEdit","Component","constructor","props","initialData","gridCols","gridSize","data","length","e","index","block","node","disableEnter","disableArrowUp","disableArrowDown","hasblockActive","Object","keys","state","colSelections","key","onFocusPreviousBlock","preventDefault","onFocusNextBlock","onAddBlock","settings","defaultBlockType","id","value","onChangeBlock","coldata","formData","blocks","activeColumn","colId","onChangeField","indexOf","blocksState","colData","activeBlock","isMultipleSelection","event","newMultiSelected","selected","blocksLayoutFieldname","blocks_layout","items","shiftKey","anchor","multiSelected","focus","slice","ctrlKey","metaKey","includes","setState","variants","blocksConfig","schema","intl","nrOfColumns","available_variants","filter","defaultData","properties","choices","map","title","showSidebar","componentDidUpdate","prevProps","cols","prevCols","colNumChanged","initialLayoutSelection","shouldUpdateLayout","variant","newData","render","pathname","manage","metadata","columnList","selectedCol","selectedColData","selectedBlock","gridSizes","available_colors","ColumnSchema","handleKeyDown","blockNode","current","common","createFrom","column","column_class","placeholder","instructions","allowedBlocks","onSelectBlock","newFormData","onChangeColumnData","draginfo","editBlock","blockProps","readOnlySettings","formatMessage","newBlockData","blockIds","onChangeColumnSettings","getColumnsBlockSchema"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-columns-block/src/ColumnsBlock/ColumnsBlockEdit.jsx"],"sourcesContent":["import React from 'react';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport { compose } from 'redux';\nimport { Grid, Segment } from 'semantic-ui-react';\nimport { isEmpty, without } from 'lodash';\nimport { SidebarPortal, BlocksToolbar, Icon } from '@plone/volto/components'; // BlocksForm, Icon,\nimport InlineForm from '@plone/volto/components/manage/Form/InlineForm';\nimport {\n  emptyBlocksForm,\n  getBlocksLayoutFieldname,\n} from '@plone/volto/helpers';\nimport { setSidebarTab } from '@plone/volto/actions';\nimport { connect } from 'react-redux';\nimport { BlocksForm } from '@plone/volto/components';\nimport { Button } from 'semantic-ui-react';\nimport config from '@plone/volto/registry';\nimport cx from 'classnames';\n\nimport { ColumnsBlockSchema } from './schema';\nimport {\n  getColumns,\n  empty,\n  defaultNewColumn,\n  hasColumns,\n  forEachColumn,\n  columnIsEmpty,\n} from './utils';\nimport ColumnVariations from './ColumnVariations';\nimport EditBlockWrapper from './EditBlockWrapper';\n\nimport { COLUMNSBLOCK } from '@eeacms/volto-columns-block/constants';\nimport { makeStyleSchema, getStyle } from '../Styles';\n\nimport tuneSVG from '@plone/volto/icons/column.svg';\nimport upSVG from '@plone/volto/icons/up.svg';\n\nimport '../less/columns.less';\n\nconst messages = defineMessages({\n  labelColumn: {\n    id: 'Column',\n    defaultMessage: 'Column',\n  },\n  labelColumnsBlock: {\n    id: 'Columns block',\n    defaultMessage: 'Columns block',\n  },\n  labelToColSettings: {\n    id: 'Go to Column settings',\n    defaultMessage: 'Go to Column settings',\n  },\n});\n\n/*\n * not pretty, there's a lot of render props passing, to please React\n * reconciliation algos\n *\n\nColumnsBlockEdit -> passes EditBlockWrapper into\n  -> BlocksForm -> which passes (with EditBlock) into\n    -> DragDropList -> which renders them all\n*/\nclass ColumnsBlockEdit extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      multiSelected: [],\n      colSelections: {}, // selected block for each column\n      showSidebar: false,\n      activeColumn: null,\n    };\n\n    // This special variable is needed because of the onChangeField(block...) is\n    // immediately followed by onChangeField(blocks_layout...), we want to save\n    // this incoming information as data for the block, but because it is only\n    // partial, we'll overwrite it in the second request. So we take advantage\n    // of what happens between batched updates, we know that there will be two\n    // calls, so even if we overwrite the state improperly on the first pass,\n    // it will be fixed on the second pass if we have access to the proper\n    // value from the first pass.\n    //\n    // We have volto-slate that does:\n    // ReactDOM.unstable_batchedUpdates(() => {\n    //    this.onChangeField(blocks, {})\n    //    this.onChangeField(blocks_layout, {})\n    // }\n    // volto-slate needs to be neutral, to work in the main Volto form, but\n    // also these types of subforms, so it should continue to use batched\n    // onChangeField, as that works fine. So volto-columns-block needs that\n    // blockState trick to overcome this. If there would be a onChangeBlocks or\n    // onChangeFormData in Volto core, then BlocksForm could match that API\n    // and this wouldn't be needed (together with the unstable_batchedUpdates\n    // calls).\n    this.blocksState = {};\n  }\n\n  createFrom = (initialData) => {\n    const { gridCols, gridSize } = initialData;\n    return {\n      data: empty(gridCols.length),\n      gridSize,\n      gridCols,\n    };\n  };\n\n  handleKeyDown = (\n    e,\n    index,\n    block,\n    node,\n    {\n      disableEnter = false,\n      disableArrowUp = false,\n      disableArrowDown = false,\n    } = {},\n  ) => {\n    const hasblockActive = Object.keys(this.state.colSelections).length > 0;\n    if (e.key === 'ArrowUp' && !disableArrowUp && !hasblockActive) {\n      this.props.onFocusPreviousBlock(block, node);\n      e.preventDefault();\n    }\n    if (e.key === 'ArrowDown' && !disableArrowDown && !hasblockActive) {\n      this.props.onFocusNextBlock(block, node);\n      e.preventDefault();\n    }\n    if (e.key === 'Enter' && !disableEnter && !hasblockActive) {\n      this.props.onAddBlock(config.settings.defaultBlockType, index + 1);\n      e.preventDefault();\n    }\n  };\n\n  onChangeColumnSettings = (id, value) => {\n    const { data, onChangeBlock, block } = this.props;\n    const coldata = data.data;\n    const formData = {\n      ...data,\n      data: {\n        ...coldata,\n        blocks: {\n          ...coldata.blocks,\n          [this.state.activeColumn]: {\n            ...coldata.blocks?.[this.state.activeColumn],\n            settings: {\n              ...coldata.blocks?.[this.state.activeColumn]?.settings,\n              [id]: value,\n            },\n          },\n        },\n      },\n    };\n    onChangeBlock(block, formData);\n  };\n\n  onChangeColumnData = (id, value, colId) => {\n    const { data, onChangeBlock, block, onChangeField } = this.props;\n    const coldata = data.data;\n    // special handling of blocks and blocks_layout\n    if (['blocks', 'blocks_layout'].indexOf(id) > -1) {\n      this.blocksState[id] = value;\n      onChangeBlock(block, {\n        ...data,\n        data: {\n          ...coldata,\n          blocks: {\n            ...coldata.blocks,\n            [colId]: {\n              ...coldata.blocks?.[colId],\n              ...this.blocksState,\n            },\n          },\n        },\n      });\n    } else {\n      onChangeField(id, value);\n    }\n  };\n\n  onSelectBlock = (\n    id,\n    colId,\n    colData,\n    activeBlock,\n    isMultipleSelection,\n    event,\n  ) => {\n    let newMultiSelected = [];\n    let selected = id;\n\n    if (isMultipleSelection) {\n      selected = null;\n      const blocksLayoutFieldname = getBlocksLayoutFieldname(colData);\n\n      const blocks_layout = colData[blocksLayoutFieldname].items;\n\n      if (event.shiftKey) {\n        const anchor =\n          this.state.multiSelected.length > 0\n            ? blocks_layout.indexOf(this.state.multiSelected[0])\n            : blocks_layout.indexOf(activeBlock);\n        const focus = blocks_layout.indexOf(id);\n\n        if (anchor === focus) {\n          newMultiSelected = [id];\n        } else if (focus > anchor) {\n          newMultiSelected = [...blocks_layout.slice(anchor, focus + 1)];\n        } else {\n          newMultiSelected = [...blocks_layout.slice(focus, anchor + 1)];\n        }\n      }\n\n      if ((event.ctrlKey || event.metaKey) && !event.shiftKey) {\n        if (this.state.multiSelected.includes(id)) {\n          selected = null;\n          newMultiSelected = without(this.state.multiSelected, id);\n        } else {\n          newMultiSelected = [...(this.state.multiSelected || []), id];\n        }\n      }\n    }\n\n    this.setState({\n      multiSelected: newMultiSelected,\n      colSelections: {\n        // this invalidates selection in all other columns\n        [colId]: selected,\n      },\n    });\n  };\n\n  getColumnsBlockSchema = () => {\n    const variants = config.blocks.blocksConfig?.[COLUMNSBLOCK]?.variants || [];\n    const schema = ColumnsBlockSchema(this.props.intl);\n    const { data } = this.props;\n    const { blocks_layout = {} } = data.data || {};\n    const nrOfColumns = (blocks_layout?.items || []).length;\n    const available_variants = variants.filter(\n      ({ defaultData }) => defaultData?.gridCols?.length === nrOfColumns,\n    );\n\n    schema.properties.gridCols.choices = available_variants.map(\n      ({ defaultData, title }) => [defaultData?.gridCols, title],\n    );\n    return schema;\n  };\n\n  componentDidUpdate(prevProps) {\n    const variants = config.blocks.blocksConfig?.[COLUMNSBLOCK]?.variants || [];\n    const cols = this.props.data.data?.blocks_layout?.items || [];\n    const prevCols = prevProps.data.data?.blocks_layout?.items || [];\n\n    const colNumChanged = cols.length !== prevCols.length;\n    const initialLayoutSelection = Object.keys(prevProps.data).length === 1;\n    const shouldUpdateLayout = colNumChanged && !initialLayoutSelection;\n\n    if (shouldUpdateLayout) {\n      const available_variants = variants.filter(\n        ({ defaultData }) => defaultData?.gridCols?.length === cols.length,\n      );\n      const variant = available_variants?.[0];\n      if (variant) {\n        return this.props.onChangeBlock(this.props.block, {\n          ...this.props.data,\n          gridSize: variant.defaultData.gridSize,\n          gridCols: variant.defaultData.gridCols,\n        });\n      }\n    }\n\n    const { block, onChangeBlock, data } = this.props;\n\n    // fill empty columns\n    if (hasColumns(data.data)) {\n      forEachColumn(data.data, ([colId, colData]) => {\n        if (columnIsEmpty(colData)) {\n          const newData = {\n            ...data,\n            data: {\n              ...data.data,\n              blocks: {\n                ...data.data.blocks,\n                [colId]: defaultNewColumn(),\n              },\n            },\n          };\n          onChangeBlock(block, newData);\n        }\n      });\n    }\n  }\n\n  render() {\n    const {\n      block,\n      data,\n      onChangeBlock,\n      pathname,\n      selected,\n      manage,\n    } = this.props;\n\n    const metadata = this.props.metadata || this.props.properties;\n    const { gridCols, gridSize } = data;\n    const coldata = data.data;\n    const columnList = getColumns(coldata);\n    const selectedCol =\n      Object.keys(this.state.colSelections).length > 0\n        ? Object.keys(this.state.colSelections)[0]\n        : null;\n    const selectedColData = coldata?.blocks?.[selectedCol] || null;\n    const selectedBlock = this.state.colSelections[selectedCol];\n\n    const {\n      gridSizes,\n      variants,\n      available_colors,\n    } = config.blocks.blocksConfig[COLUMNSBLOCK];\n    const ColumnSchema = makeStyleSchema({ available_colors }, this.props.intl);\n\n    return (\n      <div\n        role=\"presentation\"\n        className=\"columns-block\"\n        onKeyDown={(e) => {\n          this.handleKeyDown(\n            e,\n            this.props.index,\n            this.props.block,\n            this.props.blockNode.current,\n          );\n        }}\n        // The tabIndex is required for the keyboard navigation\n        /* eslint-disable jsx-a11y/no-noninteractive-tabindex */\n        tabIndex={-1}\n      >\n        {data.coldata ? 'old style columns block, safe to remove it' : ''}\n        {!data?.data ? (\n          <ColumnVariations\n            variants={variants.filter((variant) => variant.common)}\n            data={data}\n            onChange={(initialData) => {\n              onChangeBlock(block, {\n                ...data,\n                ...this.createFrom(initialData),\n              });\n            }}\n          />\n        ) : (\n          <>\n            <div\n              className=\"columns-header\"\n              onClick={() => {\n                this.setState({\n                  showSidebar: true,\n                  colSelections: {},\n                });\n                this.props.setSidebarTab(1);\n              }}\n              aria-hidden=\"true\"\n            >\n              {data.title || (\n                <FormattedMessage\n                  id=\"Columns block\"\n                  defaultMessage=\"Columns block\"\n                />\n              )}\n            </div>\n            <Grid columns={gridSize} className=\"column-grid\" stackable>\n              {columnList.map(([colId, column], index) => (\n                <Grid.Column\n                  className={cx(\n                    'block-column',\n                    data?.data?.blocks?.[colId]?.settings?.column_class,\n                  )}\n                  key={colId}\n                  {...(gridSizes[gridCols[index]] || gridCols[index])}\n                  {...getStyle(data?.data?.blocks?.[colId]?.settings || {})}\n                >\n                  <BlocksForm\n                    key={colId}\n                    title={data?.placeholder}\n                    description={data?.instructions?.data}\n                    manage={manage}\n                    allowedBlocks={data?.allowedBlocks}\n                    metadata={metadata}\n                    properties={{\n                      ...metadata,\n                      ...(isEmpty(column) ? emptyBlocksForm() : column),\n                    }}\n                    disableEvents={true}\n                    selectedBlock={\n                      selected ? this.state.colSelections[colId] : null\n                    }\n                    onSelectBlock={(id, selected, e) => {\n                      const isMultipleSelection = e\n                        ? e.shiftKey || e.ctrlKey || e.metaKey\n                        : false;\n                      this.onSelectBlock(\n                        id,\n                        colId,\n                        selectedColData,\n                        selectedBlock,\n                        selectedCol !== colId || selectedBlock === id\n                          ? false\n                          : isMultipleSelection,\n                        e,\n                      );\n                    }}\n                    onChangeFormData={(newFormData) => {\n                      onChangeBlock(block, {\n                        ...data,\n                        data: {\n                          ...coldata,\n                          blocks: {\n                            ...coldata.blocks,\n                            [colId]: {\n                              ...coldata.blocks?.[colId],\n                              blocks: newFormData.blocks,\n                              blocks_layout: newFormData.blocks_layout,\n                            },\n                          },\n                        },\n                      });\n                    }}\n                    onChangeField={(id, value) =>\n                      this.onChangeColumnData(id, value, colId)\n                    }\n                    pathname={pathname}\n                  >\n                    {({ draginfo }, editBlock, blockProps) => (\n                      <EditBlockWrapper\n                        draginfo={draginfo}\n                        blockProps={blockProps}\n                        extraControls={\n                          <>\n                            {!data?.readOnlySettings && (\n                              <Button\n                                icon\n                                basic\n                                title={this.props.intl.formatMessage(\n                                  messages.labelToColSettings,\n                                )}\n                                onClick={() => {\n                                  this.setState({\n                                    showSidebar: true,\n                                    activeColumn: colId,\n                                    colSelections: {},\n                                  });\n                                  this.props.setSidebarTab(1);\n                                }}\n                              >\n                                <Icon name={tuneSVG} className=\"\" size=\"19px\" />\n                              </Button>\n                            )}\n                          </>\n                        }\n                        multiSelected={this.state.multiSelected.includes(\n                          blockProps.block,\n                        )}\n                      >\n                        {editBlock}\n                      </EditBlockWrapper>\n                    )}\n                  </BlocksForm>\n                </Grid.Column>\n              ))}\n            </Grid>\n          </>\n        )}\n\n        {selected && selectedColData ? (\n          <BlocksToolbar\n            formData={selectedColData}\n            selectedBlock={selectedBlock}\n            selectedBlocks={this.state.multiSelected}\n            onChangeBlocks={(newBlockData) => {\n              onChangeBlock(block, {\n                ...data,\n                data: {\n                  ...coldata,\n                  blocks: {\n                    ...coldata.blocks,\n                    [selectedCol]: { ...selectedColData, ...newBlockData },\n                  },\n                },\n              });\n            }}\n            onSetSelectedBlocks={(blockIds) => {\n              this.setState({ multiSelected: blockIds });\n            }}\n            onSelectBlock={this.onSelectBlock}\n          />\n        ) : (\n          ''\n        )}\n\n        {Object.keys(this.state.colSelections).length === 0 &&\n        !data?.readOnlySettings ? (\n          <SidebarPortal selected={selected}>\n            {this.state.activeColumn ? (\n              <>\n                <Segment>\n                  <Button onClick={() => this.setState({ activeColumn: null })}>\n                    <Icon name={upSVG} size=\"14px\" />\n                    <FormattedMessage\n                      id=\"Edit parent columns block\"\n                      defaultMessage=\"Edit parent columns block\"\n                    />\n                  </Button>\n                </Segment>\n                <InlineForm\n                  schema={ColumnSchema}\n                  title={`${this.props.intl.formatMessage(\n                    messages.labelColumn,\n                  )} ${\n                    columnList\n                      .map(([colId]) => colId)\n                      .indexOf(this.state.activeColumn) + 1\n                  }`}\n                  onChangeField={this.onChangeColumnSettings}\n                  formData={\n                    data?.data?.blocks?.[this.state.activeColumn]?.settings ||\n                    {}\n                  }\n                />\n              </>\n            ) : (\n              <InlineForm\n                schema={this.getColumnsBlockSchema()}\n                title={this.props.intl.formatMessage(\n                  messages.labelColumnsBlock,\n                )}\n                onChangeField={(id, value) => {\n                  onChangeBlock(block, {\n                    ...data,\n                    [id]: value,\n                  });\n                }}\n                formData={data}\n              />\n            )}\n          </SidebarPortal>\n        ) : (\n          ''\n        )}\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => {\n      return {};\n    },\n    { setSidebarTab },\n  ),\n)(ColumnsBlockEdit);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Column","defaultMessage":"Column"},{"id":"Columns block","defaultMessage":"Columns block"},{"id":"Go to Column settings","defaultMessage":"Go to Column settings"},{"id":"Edit parent columns block","defaultMessage":"Edit parent columns block"}]}},"sourceType":"module","externalDependencies":[]}