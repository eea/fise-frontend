{"ast":null,"code":"import _extends from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/extends.js\";\nimport _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _isEqual from \"lodash/isEqual\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Blocks/Maps/Edit.jsx\";\nvar __jsx = React.createElement;\n/**\n * Edit map block.\n * @module components/manage/Blocks/Maps/Edit\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Input, Message } from 'semantic-ui-react';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport cx from 'classnames';\nimport { withBlockExtensions } from '@plone/volto/helpers';\nimport { compose } from 'redux';\nimport { Icon, SidebarPortal, MapsSidebar } from '@plone/volto/components';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport aheadSVG from '@plone/volto/icons/ahead.svg';\nimport mapsBlockSVG from '@plone/volto/components/manage/Blocks/Maps/block-maps.svg';\nvar messages = defineMessages({\n  MapsBlockInputPlaceholder: {\n    \"id\": \"Enter map Embed Code\",\n    \"defaultMessage\": \"Enter map Embed Code\"\n  },\n  left: {\n    \"id\": \"Left\",\n    \"defaultMessage\": \"Left\"\n  },\n  right: {\n    \"id\": \"Right\",\n    \"defaultMessage\": \"Right\"\n  },\n  center: {\n    \"id\": \"Center\",\n    \"defaultMessage\": \"Center\"\n  },\n  full: {\n    \"id\": \"Full\",\n    \"defaultMessage\": \"Full\"\n  },\n  GoogleMapsEmbeddedBlock: {\n    \"id\": \"Google Maps Embedded Block\",\n    \"defaultMessage\": \"Google Maps Embedded Block\"\n  }\n});\n\n/**\n * Edit image block class.\n * @class Edit\n * @extends Component\n */\nvar Edit = /*#__PURE__*/function (_Component) {\n  _inherits(Edit, _Component);\n  var _super = _createSuper(Edit);\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  function Edit(props) {\n    var _this;\n    _classCallCheck(this, Edit);\n    _this = _super.call(this, props);\n    _defineProperty(_assertThisInitialized(_this), \"onChangeUrl\", function (_ref) {\n      var target = _ref.target;\n      _this.setState({\n        url: target.value\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"resetSubmitUrl\", function () {\n      _this.setState({\n        url: ''\n      });\n    });\n    _this.getSrc = _this.getSrc.bind(_assertThisInitialized(_this));\n    _this.state = {\n      url: '',\n      error: null\n    };\n    _this.onSubmitUrl = _this.onSubmitUrl.bind(_assertThisInitialized(_this));\n    _this.onKeyDownVariantMenuForm = _this.onKeyDownVariantMenuForm.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  /**\n   * @param {*} nextProps\n   * @returns {boolean}\n   * @memberof Edit\n   */\n  _createClass(Edit, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps) {\n      return this.props.selected || nextProps.selected || !_isEqual(this.props.data, nextProps.data);\n    }\n\n    /**\n     * Change url handler\n     * @method onChangeUrl\n     * @param {Object} target Target object\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onSubmitUrl\",\n    value:\n    /**\n     * Submit url handler\n     * @method onSubmitUrl\n     * @param {string} e event\n     * @returns {undefined}\n     */\n    function onSubmitUrl() {\n      this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n        url: this.getSrc(this.state.url)\n      }));\n    }\n\n    /**\n     * Keydown handler on Variant Menu Form\n     * This is required since the ENTER key is already mapped to a onKeyDown\n     * event and needs to be overriden with a child onKeyDown.\n     * @method onKeyDownVariantMenuForm\n     * @param {Object} e Event object\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onKeyDownVariantMenuForm\",\n    value: function onKeyDownVariantMenuForm(e) {\n      if (e.key === 'Enter') {\n        e.preventDefault();\n        e.stopPropagation();\n        this.onSubmitUrl();\n      } else if (e.key === 'Escape') {\n        e.preventDefault();\n        e.stopPropagation();\n        // TODO: Do something on ESC key\n      }\n    }\n\n    /**\n     * get getSrc handler\n     * @method getSrc\n     * @param {string} embed Embed HTML code from Google Maps share option\n     * @returns {string} Source URL\n     */\n  }, {\n    key: \"getSrc\",\n    value: function getSrc(embed) {\n      var parser = new DOMParser();\n      var doc = parser.parseFromString(embed, 'text/html');\n      var iframe = doc.getElementsByTagName('iframe');\n      if (iframe.length === 0) {\n        this.setState({\n          error: true\n        });\n        return '';\n      }\n      this.setState({\n        error: false\n      });\n      return iframe[0].src;\n    }\n  }, {\n    key: \"render\",\n    value:\n    /**\n     * Render method.\n     * @method render\n     * @returns {string} Markup for the component.\n     */\n    function render() {\n      var _this2 = this;\n      var placeholder = this.props.data.placeholder || this.props.intl.formatMessage(messages.MapsBlockInputPlaceholder);\n      return __jsx(\"div\", {\n        className: cx('block maps align', {\n          center: !Boolean(this.props.data.align)\n        }, this.props.data.align),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 7\n        }\n      }, this.props.data.url ? __jsx(\"div\", {\n        className: cx('maps-inner', {\n          'full-width': this.props.data.align === 'full'\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 11\n        }\n      }, __jsx(\"iframe\", {\n        title: this.props.intl.formatMessage(messages.GoogleMapsEmbeddedBlock),\n        src: this.props.data.url,\n        className: \"google-map\",\n        frameBorder: \"0\",\n        allowFullScreen: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }\n      })) : __jsx(Message, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }\n      }, __jsx(\"center\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 13\n        }\n      }, __jsx(\"img\", {\n        src: mapsBlockSVG,\n        alt: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 15\n        }\n      }), __jsx(\"div\", {\n        className: \"toolbar-inner\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 15\n        }\n      }, __jsx(Input, {\n        onKeyDown: this.onKeyDownVariantMenuForm,\n        onChange: this.onChangeUrl,\n        placeholder: placeholder,\n        value: this.state.url\n        // Prevents propagation to the Dropzone and the opening\n        // of the upload browser dialog\n        ,\n        onClick: function onClick(e) {\n          return e.stopPropagation();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 17\n        }\n      }), this.state.url && __jsx(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 19\n        }\n      }, __jsx(Button, {\n        basic: true,\n        className: \"cancel\",\n        onClick: function onClick(e) {\n          e.stopPropagation();\n          _this2.setState({\n            url: ''\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 21\n        }\n      }, __jsx(Icon, {\n        name: clearSVG,\n        size: \"30px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 23\n        }\n      }))), __jsx(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 17\n        }\n      }, __jsx(Button, {\n        basic: true,\n        primary: true,\n        onClick: function onClick(e) {\n          e.stopPropagation();\n          _this2.onSubmitUrl();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 19\n        }\n      }, __jsx(Icon, {\n        name: aheadSVG,\n        size: \"30px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 21\n        }\n      })))), __jsx(\"div\", {\n        className: \"message-text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 15\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"Please enter the Embed Code provided by Google Maps -> Share -> Embed map. It should contain the <iframe> code on it.\",\n        defaultMessage: \"Please enter the Embed Code provided by Google Maps -> Share -> Embed map. It should contain the <iframe> code on it.\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 17\n        }\n      }), this.state.error && __jsx(\"div\", {\n        style: {\n          color: 'red'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 19\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"Embed code error, please follow the instructions and try again.\",\n        defaultMessage: \"Embed code error, please follow the instructions and try again.\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 21\n        }\n      }))))), !this.props.selected && __jsx(\"div\", {\n        className: \"map-overlay\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 34\n        }\n      }), __jsx(SidebarPortal, {\n        selected: this.props.selected,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 9\n        }\n      }, __jsx(MapsSidebar, _extends({}, this.props, {\n        resetSubmitUrl: this.resetSubmitUrl,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 11\n        }\n      }))));\n    }\n  }]);\n  return Edit;\n}(Component);\n_defineProperty(Edit, \"propTypes\", {\n  selected: PropTypes.bool.isRequired,\n  block: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  pathname: PropTypes.string.isRequired,\n  onChangeBlock: PropTypes.func.isRequired,\n  onSelectBlock: PropTypes.func.isRequired,\n  onDeleteBlock: PropTypes.func.isRequired,\n  onFocusPreviousBlock: PropTypes.func.isRequired,\n  onFocusNextBlock: PropTypes.func.isRequired,\n  handleKeyDown: PropTypes.func.isRequired\n});\nexport default compose(injectIntl, withBlockExtensions)(Edit);","map":{"version":3,"names":["React","Component","PropTypes","Button","Input","Message","defineMessages","FormattedMessage","injectIntl","cx","withBlockExtensions","compose","Icon","SidebarPortal","MapsSidebar","clearSVG","aheadSVG","mapsBlockSVG","messages","MapsBlockInputPlaceholder","left","right","center","full","GoogleMapsEmbeddedBlock","Edit","props","target","setState","url","value","getSrc","bind","state","error","onSubmitUrl","onKeyDownVariantMenuForm","nextProps","selected","data","onChangeBlock","block","e","key","preventDefault","stopPropagation","embed","parser","DOMParser","doc","parseFromString","iframe","getElementsByTagName","length","src","placeholder","intl","formatMessage","Boolean","align","onChangeUrl","color","resetSubmitUrl","bool","isRequired","string","index","number","objectOf","any","pathname","func","onSelectBlock","onDeleteBlock","onFocusPreviousBlock","onFocusNextBlock","handleKeyDown"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Blocks/Maps/Edit.jsx"],"sourcesContent":["/**\n * Edit map block.\n * @module components/manage/Blocks/Maps/Edit\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Input, Message } from 'semantic-ui-react';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport cx from 'classnames';\nimport { isEqual } from 'lodash';\nimport { withBlockExtensions } from '@plone/volto/helpers';\nimport { compose } from 'redux';\nimport { Icon, SidebarPortal, MapsSidebar } from '@plone/volto/components';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport aheadSVG from '@plone/volto/icons/ahead.svg';\nimport mapsBlockSVG from '@plone/volto/components/manage/Blocks/Maps/block-maps.svg';\n\nconst messages = defineMessages({\n  MapsBlockInputPlaceholder: {\n    id: 'Enter map Embed Code',\n    defaultMessage: 'Enter map Embed Code',\n  },\n  left: {\n    id: 'Left',\n    defaultMessage: 'Left',\n  },\n  right: {\n    id: 'Right',\n    defaultMessage: 'Right',\n  },\n  center: {\n    id: 'Center',\n    defaultMessage: 'Center',\n  },\n  full: {\n    id: 'Full',\n    defaultMessage: 'Full',\n  },\n  GoogleMapsEmbeddedBlock: {\n    id: 'Google Maps Embedded Block',\n    defaultMessage: 'Google Maps Embedded Block',\n  },\n});\n\n/**\n * Edit image block class.\n * @class Edit\n * @extends Component\n */\nclass Edit extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    selected: PropTypes.bool.isRequired,\n    block: PropTypes.string.isRequired,\n    index: PropTypes.number.isRequired,\n    data: PropTypes.objectOf(PropTypes.any).isRequired,\n    pathname: PropTypes.string.isRequired,\n    onChangeBlock: PropTypes.func.isRequired,\n    onSelectBlock: PropTypes.func.isRequired,\n    onDeleteBlock: PropTypes.func.isRequired,\n    onFocusPreviousBlock: PropTypes.func.isRequired,\n    onFocusNextBlock: PropTypes.func.isRequired,\n    handleKeyDown: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.getSrc = this.getSrc.bind(this);\n    this.state = {\n      url: '',\n      error: null,\n    };\n    this.onSubmitUrl = this.onSubmitUrl.bind(this);\n    this.onKeyDownVariantMenuForm = this.onKeyDownVariantMenuForm.bind(this);\n  }\n\n  /**\n   * @param {*} nextProps\n   * @returns {boolean}\n   * @memberof Edit\n   */\n  shouldComponentUpdate(nextProps) {\n    return (\n      this.props.selected ||\n      nextProps.selected ||\n      !isEqual(this.props.data, nextProps.data)\n    );\n  }\n\n  /**\n   * Change url handler\n   * @method onChangeUrl\n   * @param {Object} target Target object\n   * @returns {undefined}\n   */\n  onChangeUrl = ({ target }) => {\n    this.setState({\n      url: target.value,\n    });\n  };\n\n  /**\n   * Submit url handler\n   * @method onSubmitUrl\n   * @param {string} e event\n   * @returns {undefined}\n   */\n  onSubmitUrl() {\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      url: this.getSrc(this.state.url),\n    });\n  }\n\n  /**\n   * Keydown handler on Variant Menu Form\n   * This is required since the ENTER key is already mapped to a onKeyDown\n   * event and needs to be overriden with a child onKeyDown.\n   * @method onKeyDownVariantMenuForm\n   * @param {Object} e Event object\n   * @returns {undefined}\n   */\n  onKeyDownVariantMenuForm(e) {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      e.stopPropagation();\n      this.onSubmitUrl();\n    } else if (e.key === 'Escape') {\n      e.preventDefault();\n      e.stopPropagation();\n      // TODO: Do something on ESC key\n    }\n  }\n\n  /**\n   * get getSrc handler\n   * @method getSrc\n   * @param {string} embed Embed HTML code from Google Maps share option\n   * @returns {string} Source URL\n   */\n  getSrc(embed) {\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(embed, 'text/html');\n    const iframe = doc.getElementsByTagName('iframe');\n    if (iframe.length === 0) {\n      this.setState({ error: true });\n      return '';\n    }\n    this.setState({ error: false });\n    return iframe[0].src;\n  }\n\n  resetSubmitUrl = () => {\n    this.setState({\n      url: '',\n    });\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const placeholder =\n      this.props.data.placeholder ||\n      this.props.intl.formatMessage(messages.MapsBlockInputPlaceholder);\n    return (\n      <div\n        className={cx(\n          'block maps align',\n          {\n            center: !Boolean(this.props.data.align),\n          },\n          this.props.data.align,\n        )}\n      >\n        {this.props.data.url ? (\n          <div\n            className={cx('maps-inner', {\n              'full-width': this.props.data.align === 'full',\n            })}\n          >\n            <iframe\n              title={this.props.intl.formatMessage(\n                messages.GoogleMapsEmbeddedBlock,\n              )}\n              src={this.props.data.url}\n              className=\"google-map\"\n              frameBorder=\"0\"\n              allowFullScreen\n            />\n          </div>\n        ) : (\n          <Message>\n            <center>\n              <img src={mapsBlockSVG} alt=\"\" />\n              <div className=\"toolbar-inner\">\n                <Input\n                  onKeyDown={this.onKeyDownVariantMenuForm}\n                  onChange={this.onChangeUrl}\n                  placeholder={placeholder}\n                  value={this.state.url}\n                  // Prevents propagation to the Dropzone and the opening\n                  // of the upload browser dialog\n                  onClick={(e) => e.stopPropagation()}\n                />\n                {this.state.url && (\n                  <Button.Group>\n                    <Button\n                      basic\n                      className=\"cancel\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        this.setState({ url: '' });\n                      }}\n                    >\n                      <Icon name={clearSVG} size=\"30px\" />\n                    </Button>\n                  </Button.Group>\n                )}\n                <Button.Group>\n                  <Button\n                    basic\n                    primary\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      this.onSubmitUrl();\n                    }}\n                  >\n                    <Icon name={aheadSVG} size=\"30px\" />\n                  </Button>\n                </Button.Group>\n              </div>\n              <div className=\"message-text\">\n                <FormattedMessage\n                  id=\"Please enter the Embed Code provided by Google Maps -> Share -> Embed map. It should contain the <iframe> code on it.\"\n                  defaultMessage=\"Please enter the Embed Code provided by Google Maps -> Share -> Embed map. It should contain the <iframe> code on it.\"\n                />\n                {this.state.error && (\n                  <div style={{ color: 'red' }}>\n                    <FormattedMessage\n                      id=\"Embed code error, please follow the instructions and try again.\"\n                      defaultMessage=\"Embed code error, please follow the instructions and try again.\"\n                    />\n                  </div>\n                )}\n              </div>\n            </center>\n          </Message>\n        )}\n        {!this.props.selected && <div className=\"map-overlay\" />}\n        <SidebarPortal selected={this.props.selected}>\n          <MapsSidebar {...this.props} resetSubmitUrl={this.resetSubmitUrl} />\n        </SidebarPortal>\n      </div>\n    );\n  }\n}\n\nexport default compose(injectIntl, withBlockExtensions)(Edit);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Enter map Embed Code","defaultMessage":"Enter map Embed Code"},{"id":"Left","defaultMessage":"Left"},{"id":"Right","defaultMessage":"Right"},{"id":"Center","defaultMessage":"Center"},{"id":"Full","defaultMessage":"Full"},{"id":"Google Maps Embedded Block","defaultMessage":"Google Maps Embedded Block"},{"id":"Please enter the Embed Code provided by Google Maps -> Share -> Embed map. It should contain the <iframe> code on it.","defaultMessage":"Please enter the Embed Code provided by Google Maps -> Share -> Embed map. It should contain the <iframe> code on it."},{"id":"Embed code error, please follow the instructions and try again.","defaultMessage":"Embed code error, please follow the instructions and try again."}]}},"sourceType":"module","externalDependencies":[]}