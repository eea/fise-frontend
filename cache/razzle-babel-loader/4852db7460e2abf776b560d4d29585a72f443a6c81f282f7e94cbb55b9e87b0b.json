{"ast":null,"code":"import _without from \"lodash/without\";\nimport _omit from \"lodash/omit\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-accordion-block/src/components/manage/Widgets/PanelsWidget.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport React from 'react';\nimport { v4 as uuid } from 'uuid';\nimport move from 'lodash-move';\nimport { useIntl, defineMessages } from 'react-intl';\nimport { Button } from 'semantic-ui-react';\nimport { Icon, FormFieldWrapper } from '@plone/volto/components';\nimport { DragDropList } from '@plone/volto/components';\nimport { emptyBlocksForm } from '@plone/volto/helpers';\nimport addSVG from '@plone/volto/icons/add.svg';\nimport dragSVG from '@plone/volto/icons/drag.svg';\nimport trashSVG from '@plone/volto/icons/delete.svg';\nimport './editor.less';\nconst messages = defineMessages({\n  add: {\n    \"id\": \"Add\",\n    \"defaultMessage\": \"Add\"\n  }\n});\nexport function moveItem(formData, source, destination) {\n  var _formData$blocks_layo;\n  return _objectSpread(_objectSpread({}, formData), {}, {\n    blocks_layout: {\n      items: move((_formData$blocks_layo = formData.blocks_layout) === null || _formData$blocks_layo === void 0 ? void 0 : _formData$blocks_layo.items, source, destination)\n    }\n  });\n}\nconst empty = () => {\n  return [uuid(), emptyBlocksForm()];\n};\nconst PanelsWidget = props => {\n  var _value$blocks_layout;\n  const intl = useIntl();\n  const {\n    fieldSet,\n    value = {},\n    id,\n    onChange,\n    schema\n  } = props;\n  const {\n    blocks = {}\n  } = value;\n  const itemsList = (((_value$blocks_layout = value.blocks_layout) === null || _value$blocks_layout === void 0 ? void 0 : _value$blocks_layout.items) || []).map(id => [id, blocks[id]]);\n  const objectSchema = typeof schema === 'function' ? schema(props) : schema;\n  return __jsx(\"div\", {\n    className: \"panels-widget\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, __jsx(FormFieldWrapper, _extends({}, props, {\n    noForInFieldLabel: true,\n    draggable: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    className: \"add-item-button-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    compact: true,\n    icon: true,\n    \"aria-label\": objectSchema.addMessage || `${intl.formatMessage(messages.add)} ${objectSchema.title}`,\n    onClick: () => {\n      var _value$blocks_layout2;\n      const [newId, newData] = empty();\n      onChange(id, _objectSpread(_objectSpread({}, value), {}, {\n        blocks: _objectSpread(_objectSpread({}, value.blocks), {}, {\n          [newId]: newData\n        }),\n        blocks_layout: _objectSpread(_objectSpread({}, value.blocks_layout), {}, {\n          items: [...((_value$blocks_layout2 = value.blocks_layout) === null || _value$blocks_layout2 === void 0 ? void 0 : _value$blocks_layout2.items), newId]\n        })\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  }, __jsx(Icon, {\n    name: addSVG,\n    size: \"18px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }), \"\\xA0\", objectSchema.addMessage || `Add ${objectSchema.title}`))), __jsx(\"div\", {\n    className: \"items-area\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, __jsx(DragDropList, {\n    forwardedAriaLabelledBy: `fieldset-${fieldSet || 'default'}-field-label-${id}`,\n    childList: itemsList,\n    onMoveItem: result => {\n      const {\n        source,\n        destination\n      } = result;\n      if (!destination) {\n        return;\n      }\n      const newFormData = moveItem(value, source.index, destination.index);\n      onChange(id, newFormData);\n      return true;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }, dragProps => {\n    var _value$blocks_layout3, _value$blocks_layout4;\n    const {\n      child,\n      childId,\n      index,\n      draginfo\n    } = dragProps;\n    return __jsx(\"div\", _extends({\n      ref: draginfo.innerRef\n    }, draginfo.draggableProps, {\n      key: childId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 15\n      }\n    }), __jsx(\"div\", {\n      className: \"panel-item\",\n      style: {\n        position: 'relative'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }\n    }, __jsx(\"button\", _extends({\n      style: {\n        visibility: 'visible',\n        display: 'inline-block'\n      }\n    }, draginfo.dragHandleProps, {\n      className: \"drag handle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 19\n      }\n    }), __jsx(Icon, {\n      name: dragSVG,\n      size: \"18px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 21\n      }\n    })), __jsx(\"div\", {\n      className: \"label\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 19\n      }\n    }, child.title || `Panel ${index + 1}`), ((_value$blocks_layout3 = value.blocks_layout) === null || _value$blocks_layout3 === void 0 ? void 0 : (_value$blocks_layout4 = _value$blocks_layout3.items) === null || _value$blocks_layout4 === void 0 ? void 0 : _value$blocks_layout4.length) > 1 ? __jsx(\"button\", {\n      onClick: () => {\n        var _value$blocks_layout5;\n        const newFormData = _objectSpread(_objectSpread({}, value), {}, {\n          blocks: _omit(_objectSpread({}, value.blocks), [childId]),\n          blocks_layout: _objectSpread(_objectSpread({}, value.blocks_layout), {}, {\n            items: _without([...((_value$blocks_layout5 = value.blocks_layout) === null || _value$blocks_layout5 === void 0 ? void 0 : _value$blocks_layout5.items)], childId)\n          })\n        });\n        onChange(id, newFormData);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 21\n      }\n    }, __jsx(Icon, {\n      name: trashSVG,\n      size: \"18px\",\n      color: \"#e40166\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 23\n      }\n    })) : ''));\n  })));\n};\nexport default PanelsWidget;","map":{"version":3,"names":["React","v4","uuid","move","useIntl","defineMessages","Button","Icon","FormFieldWrapper","DragDropList","emptyBlocksForm","addSVG","dragSVG","trashSVG","messages","add","moveItem","formData","source","destination","blocks_layout","items","empty","PanelsWidget","props","intl","fieldSet","value","id","onChange","schema","blocks","itemsList","map","objectSchema","addMessage","formatMessage","title","newId","newData","result","newFormData","index","dragProps","child","childId","draginfo","innerRef","draggableProps","position","visibility","display","dragHandleProps","length"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-accordion-block/src/components/manage/Widgets/PanelsWidget.jsx"],"sourcesContent":["import React from 'react';\nimport { v4 as uuid } from 'uuid';\nimport { omit, without } from 'lodash';\nimport move from 'lodash-move';\nimport { useIntl, defineMessages } from 'react-intl';\nimport { Button } from 'semantic-ui-react';\nimport { Icon, FormFieldWrapper } from '@plone/volto/components';\nimport { DragDropList } from '@plone/volto/components';\nimport { emptyBlocksForm } from '@plone/volto/helpers';\n\nimport addSVG from '@plone/volto/icons/add.svg';\nimport dragSVG from '@plone/volto/icons/drag.svg';\nimport trashSVG from '@plone/volto/icons/delete.svg';\n\nimport './editor.less';\n\nconst messages = defineMessages({\n  add: { id: 'Add', defaultMessage: 'Add' },\n});\n\nexport function moveItem(formData, source, destination) {\n  return {\n    ...formData,\n    blocks_layout: {\n      items: move(formData.blocks_layout?.items, source, destination),\n    },\n  };\n}\n\nconst empty = () => {\n  return [uuid(), emptyBlocksForm()];\n};\n\nconst PanelsWidget = (props) => {\n  const intl = useIntl();\n  const { fieldSet, value = {}, id, onChange, schema } = props;\n  const { blocks = {} } = value;\n  const itemsList = (value.blocks_layout?.items || []).map((id) => [\n    id,\n    blocks[id],\n  ]);\n\n  const objectSchema = typeof schema === 'function' ? schema(props) : schema;\n\n  return (\n    <div className=\"panels-widget\">\n      <FormFieldWrapper {...props} noForInFieldLabel draggable={false}>\n        <div className=\"add-item-button-wrapper\">\n          <Button\n            compact\n            icon\n            aria-label={\n              objectSchema.addMessage ||\n              `${intl.formatMessage(messages.add)} ${objectSchema.title}`\n            }\n            onClick={() => {\n              const [newId, newData] = empty();\n              onChange(id, {\n                ...value,\n                blocks: {\n                  ...value.blocks,\n                  [newId]: newData,\n                },\n                blocks_layout: {\n                  ...value.blocks_layout,\n                  items: [...value.blocks_layout?.items, newId],\n                },\n              });\n            }}\n          >\n            <Icon name={addSVG} size=\"18px\" />\n            &nbsp;\n            {/* Custom addMessage in schema, else default to english */}\n            {objectSchema.addMessage || `Add ${objectSchema.title}`}\n          </Button>\n        </div>\n      </FormFieldWrapper>\n      <div className=\"items-area\">\n        <DragDropList\n          forwardedAriaLabelledBy={`fieldset-${\n            fieldSet || 'default'\n          }-field-label-${id}`}\n          childList={itemsList}\n          onMoveItem={(result) => {\n            const { source, destination } = result;\n            if (!destination) {\n              return;\n            }\n            const newFormData = moveItem(\n              value,\n              source.index,\n              destination.index,\n            );\n            onChange(id, newFormData);\n            return true;\n          }}\n        >\n          {(dragProps) => {\n            const { child, childId, index, draginfo } = dragProps;\n            return (\n              <div\n                ref={draginfo.innerRef}\n                {...draginfo.draggableProps}\n                key={childId}\n              >\n                <div className=\"panel-item\" style={{ position: 'relative' }}>\n                  <button\n                    style={{\n                      visibility: 'visible',\n                      display: 'inline-block',\n                    }}\n                    {...draginfo.dragHandleProps}\n                    className=\"drag handle\"\n                  >\n                    <Icon name={dragSVG} size=\"18px\" />\n                  </button>\n                  <div className=\"label\">\n                    {child.title || `Panel ${index + 1}`}\n                  </div>\n                  {value.blocks_layout?.items?.length > 1 ? (\n                    <button\n                      onClick={() => {\n                        const newFormData = {\n                          ...value,\n                          blocks: omit({ ...value.blocks }, [childId]),\n                          blocks_layout: {\n                            ...value.blocks_layout,\n                            items: without(\n                              [...value.blocks_layout?.items],\n                              childId,\n                            ),\n                          },\n                        };\n                        onChange(id, newFormData);\n                      }}\n                    >\n                      <Icon name={trashSVG} size=\"18px\" color=\"#e40166\" />\n                    </button>\n                  ) : (\n                    ''\n                  )}\n                </div>\n              </div>\n            );\n          }}\n        </DragDropList>\n      </div>\n    </div>\n  );\n};\n\nexport default PanelsWidget;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Add","defaultMessage":"Add"}]}},"sourceType":"module","externalDependencies":[]}