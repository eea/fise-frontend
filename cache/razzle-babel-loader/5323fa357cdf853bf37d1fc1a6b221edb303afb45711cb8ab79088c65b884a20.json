{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-columns-block/src/Widgets/SimpleColorPickerWidget.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport React from 'react';\nimport { FormFieldWrapper, Icon } from '@plone/volto/components';\nimport { Button } from 'semantic-ui-react';\nimport loadable from '@loadable/component';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nconst ReactColor = loadable.lib({\n  resolved: {},\n  chunkName() {\n    return \"react-color\";\n  },\n  isReady(props) {\n    var key = this.resolve(props);\n    if (this.resolved[key] !== true) {\n      return false;\n    }\n    if (typeof __webpack_modules__ !== 'undefined') {\n      return !!__webpack_modules__[key];\n    }\n    return false;\n  },\n  importAsync: () => import( /* webpackChunkName: \"react-color\" */'react-color'),\n  requireAsync(props) {\n    var _this = this;\n    var key = this.resolve(props);\n    this.resolved[key] = false;\n    return this.importAsync(props).then(function (resolved) {\n      _this.resolved[key] = true;\n      return resolved;\n    });\n  },\n  requireSync(props) {\n    var id = this.resolve(props);\n    if (typeof __webpack_require__ !== 'undefined') {\n      return __webpack_require__(id);\n    }\n    return eval('module.require')(id);\n  },\n  resolve() {\n    if (require.resolveWeak) {\n      return require.resolveWeak(\"react-color\");\n    }\n    return eval('require.resolve')(\"react-color\");\n  }\n});\nexport default (props => {\n  const {\n    id,\n    value,\n    onChange,\n    available_colors\n  } = props;\n  const [showPicker, setShowPicker] = React.useState(false);\n  return __jsx(FormFieldWrapper, _extends({}, props, {\n    draggable: false,\n    className: \"simple-color-picker-widget\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 5\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }, __jsx(Button.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    color: value,\n    style: {\n      backgroundColor: value\n    },\n    onClick: () => setShowPicker(true),\n    size: \"huge\",\n    title: \"Pick color\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 11\n    }\n  }, ''), __jsx(Button, {\n    compact: true,\n    style: {\n      paddingLeft: '8px',\n      paddingRight: '0px'\n    },\n    onClick: () => onChange(id, null),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 11\n    }\n  }, __jsx(Icon, {\n    name: clearSVG,\n    size: \"18px\",\n    color: \"red\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }))), showPicker ? __jsx(ReactColor, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }\n  }, ({\n    GithubPicker\n  }) => {\n    return __jsx(GithubPicker, {\n      width: \"220px\",\n      triangle: \"top\",\n      className: \"color-picker\",\n      colors: available_colors,\n      color: value || '#000',\n      onChangeComplete: value => {\n        setShowPicker(false);\n        onChange(id, value.hex);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }\n    });\n  }) : ''));\n});","map":{"version":3,"names":["React","FormFieldWrapper","Icon","Button","loadable","clearSVG","ReactColor","lib","props","id","value","onChange","available_colors","showPicker","setShowPicker","useState","backgroundColor","paddingLeft","paddingRight","GithubPicker","hex"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-columns-block/src/Widgets/SimpleColorPickerWidget.jsx"],"sourcesContent":["import React from 'react';\nimport { FormFieldWrapper, Icon } from '@plone/volto/components';\nimport { Button } from 'semantic-ui-react';\nimport loadable from '@loadable/component';\nimport clearSVG from '@plone/volto/icons/clear.svg';\n\nconst ReactColor = loadable.lib(() => import('react-color'));\n\nexport default (props) => {\n  const { id, value, onChange, available_colors } = props;\n  const [showPicker, setShowPicker] = React.useState(false);\n\n  return (\n    <FormFieldWrapper\n      {...props}\n      draggable={false}\n      className=\"simple-color-picker-widget\"\n    >\n      <div>\n        <Button.Group>\n          <Button\n            color={value}\n            style={{ backgroundColor: value }}\n            onClick={() => setShowPicker(true)}\n            size=\"huge\"\n            title=\"Pick color\"\n          >\n            {''}\n          </Button>\n          <Button\n            compact\n            style={{ paddingLeft: '8px', paddingRight: '0px' }}\n            onClick={() => onChange(id, null)}\n          >\n            <Icon name={clearSVG} size=\"18px\" color=\"red\" />\n          </Button>\n        </Button.Group>\n\n        {showPicker ? (\n          <ReactColor>\n            {({ GithubPicker }) => {\n              return (\n                <GithubPicker\n                  width=\"220px\"\n                  triangle=\"top\"\n                  className=\"color-picker\"\n                  colors={available_colors}\n                  color={value || '#000'}\n                  onChangeComplete={(value) => {\n                    setShowPicker(false);\n                    onChange(id, value.hex);\n                  }}\n                ></GithubPicker>\n              );\n            }}\n          </ReactColor>\n        ) : (\n          ''\n        )}\n      </div>\n    </FormFieldWrapper>\n  );\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,gBAAgB,EAAEC,IAAI,QAAQ,yBAAyB;AAChE,SAASC,MAAM,QAAQ,mBAAmB;AAC1C,OAAOC,QAAQ,MAAM,qBAAqB;AAC1C,OAAOC,QAAQ,MAAM,8BAA8B;AAEnD,MAAMC,UAAU,GAAGF,QAAQ,CAACG,GAAG;EAAA;EAAA;IAAA;EAAA;EAAA;IAAA;IAAA;MAAA;IAAA;IAAA;MAAA;IAAA;IAAA;EAAA;EAAA,aAAC,MAAM,MAAM,uCAAC,aAAa,CAAC;EAAA;IAAA;IAAA;IAAA;IAAA;MAAA;MAAA;IAAA;EAAA;EAAA;IAAA;IAAA;MAAA;IAAA;IAAA;EAAA;EAAA;IAAA;MAAA;IAAA;IAAA;EAAA;AAAA,EAAC;AAE5D,gBAAgBC,KAAK,IAAK;EACxB,MAAM;IAAEC,EAAE;IAAEC,KAAK;IAAEC,QAAQ;IAAEC;EAAiB,CAAC,GAAGJ,KAAK;EACvD,MAAM,CAACK,UAAU,EAAEC,aAAa,CAAC,GAAGd,KAAK,CAACe,QAAQ,CAAC,KAAK,CAAC;EAEzD,OACE,MAAC,gBAAgB,eACXP,KAAK;IACT,SAAS,EAAE,KAAM;IACjB,SAAS,EAAC,4BAA4B;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,IAEtC;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACE,MAAC,MAAM,CAAC,KAAK;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACX,MAAC,MAAM;IACL,KAAK,EAAEE,KAAM;IACb,KAAK,EAAE;MAAEM,eAAe,EAAEN;IAAM,CAAE;IAClC,OAAO,EAAE,MAAMI,aAAa,CAAC,IAAI,CAAE;IACnC,IAAI,EAAC,MAAM;IACX,KAAK,EAAC,YAAY;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAEjB,EAAE,CACI,EACT,MAAC,MAAM;IACL,OAAO;IACP,KAAK,EAAE;MAAEG,WAAW,EAAE,KAAK;MAAEC,YAAY,EAAE;IAAM,CAAE;IACnD,OAAO,EAAE,MAAMP,QAAQ,CAACF,EAAE,EAAE,IAAI,CAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAElC,MAAC,IAAI;IAAC,IAAI,EAAEJ,QAAS;IAAC,IAAI,EAAC,MAAM;IAAC,KAAK,EAAC,KAAK;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAG,CACzC,CACI,EAEdQ,UAAU,GACT,MAAC,UAAU;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACR,CAAC;IAAEM;EAAa,CAAC,KAAK;IACrB,OACE,MAAC,YAAY;MACX,KAAK,EAAC,OAAO;MACb,QAAQ,EAAC,KAAK;MACd,SAAS,EAAC,cAAc;MACxB,MAAM,EAAEP,gBAAiB;MACzB,KAAK,EAAEF,KAAK,IAAI,MAAO;MACvB,gBAAgB,EAAGA,KAAK,IAAK;QAC3BI,aAAa,CAAC,KAAK,CAAC;QACpBH,QAAQ,CAACF,EAAE,EAAEC,KAAK,CAACU,GAAG,CAAC;MACzB,CAAE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EACY;EAEpB,CAAC,CACU,GAEb,EACD,CACG,CACW;AAEvB,CAAC"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}