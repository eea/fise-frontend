{"ast":null,"code":"import _slicedToArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _cloneDeep from \"lodash/cloneDeep\";\nimport _isEmpty from \"lodash/isEmpty\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-accordion-block/src/components/manage/Blocks/Accordion/Edit.jsx\",\n  _this = this,\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\nimport { BlocksForm, Icon, SidebarPortal } from '@plone/volto/components';\nimport { emptyBlocksForm } from '@plone/volto/helpers';\nimport helpSVG from '@plone/volto/icons/help.svg';\nimport React, { useState } from 'react';\nimport { Button, Segment } from 'semantic-ui-react';\nimport { withBlockExtensions } from '@plone/volto/helpers';\nimport { BlockDataForm } from '@plone/volto/components';\nimport { useIntl } from 'react-intl';\nimport AccordionEdit from './AccordionEdit';\nimport EditBlockWrapper from './EditBlockWrapper';\nimport './editor.less';\nimport { AccordionBlockSchema } from './Schema';\nimport { emptyAccordion, getPanels } from './util';\nimport config from '@plone/volto/registry';\nvar Edit = function Edit(props) {\n  _s();\n  var _data$data, _data$instructions;\n  var _useState = useState({}),\n    selectedBlock = _useState[0],\n    setSelectedBlock = _useState[1];\n  var block = props.block,\n    data = props.data,\n    onChangeBlock = props.onChangeBlock,\n    _onChangeField = props.onChangeField,\n    pathname = props.pathname,\n    selected = props.selected,\n    manage = props.manage,\n    formDescription = props.formDescription;\n  var intl = useIntl();\n  var properties = _isEmpty(data === null || data === void 0 ? void 0 : (_data$data = data.data) === null || _data$data === void 0 ? void 0 : _data$data.blocks) ? emptyAccordion(3) : data.data;\n  var metadata = props.metadata || props.properties;\n  var applySchemaEnhancer = function applySchemaEnhancer(originalSchema) {\n    var _blocks$blocksConfig$, _activeItem;\n    var schema, schemaEnhancer;\n    var formData = data;\n    var blocks = config.blocks;\n    var blockType = formData['@type'];\n    var variations = (blocks === null || blocks === void 0 ? void 0 : (_blocks$blocksConfig$ = blocks.blocksConfig[blockType]) === null || _blocks$blocksConfig$ === void 0 ? void 0 : _blocks$blocksConfig$.variations) || [];\n    if (variations.length === 0) {\n      var _blocks$blocksConfig, _blocks$blocksConfig$2;\n      // No variations present but anyways\n      // finalize the schema with a schemaEnhancer in the block config is present\n      schemaEnhancer = (_blocks$blocksConfig = blocks.blocksConfig) === null || _blocks$blocksConfig === void 0 ? void 0 : (_blocks$blocksConfig$2 = _blocks$blocksConfig[blockType]) === null || _blocks$blocksConfig$2 === void 0 ? void 0 : _blocks$blocksConfig$2.schemaEnhancer;\n      if (schemaEnhancer) schema = schemaEnhancer({\n        schema: originalSchema,\n        formData: formData,\n        intl: intl\n      });\n    }\n    var activeItemName = formData === null || formData === void 0 ? void 0 : formData.variation;\n    var activeItem = variations.find(function (item) {\n      return item.id === activeItemName;\n    });\n    if (!activeItem) activeItem = variations.find(function (item) {\n      return item.isDefault;\n    });\n    schemaEnhancer = (_activeItem = activeItem) === null || _activeItem === void 0 ? void 0 : _activeItem['schemaEnhancer'];\n    schema = schemaEnhancer ? schemaEnhancer({\n      schema: _cloneDeep(originalSchema),\n      formData: formData,\n      intl: intl\n    }) : _cloneDeep(originalSchema);\n    return schema;\n  };\n\n  /**\n   * Will set field values from schema, by matching the default values\n   * @returns {Object} defaultValues\n   */\n  var setInitialData = function setInitialData() {\n    var accordionSchema = applySchemaEnhancer(AccordionBlockSchema({\n      intl: intl\n    }));\n    var defaultValues = Object.keys(accordionSchema.properties).reduce(function (accumulator, currentVal) {\n      return accordionSchema.properties[currentVal][\"default\"] ? _objectSpread(_objectSpread({}, accumulator), {}, _defineProperty({}, currentVal, accordionSchema.properties[currentVal][\"default\"])) : accumulator;\n    }, {});\n    return _objectSpread(_objectSpread(_objectSpread({}, defaultValues), data), {}, {\n      data: _objectSpread({}, properties)\n    });\n  };\n  React.useEffect(function () {\n    if (_isEmpty(data === null || data === void 0 ? void 0 : data.data)) {\n      onChangeBlock(block, setInitialData());\n    }\n    /* eslint-disable-next-line */\n  }, []);\n  React.useEffect(function () {\n    properties.blocks_layout.items.map(function (item) {\n      if (_isEmpty(properties.blocks[item].blocks)) {\n        return onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n          data: _objectSpread(_objectSpread({}, properties), {}, {\n            blocks: _objectSpread(_objectSpread({}, properties.blocks), {}, _defineProperty({}, item, emptyBlocksForm()))\n          })\n        }));\n      }\n      return undefined;\n    });\n  }, [onChangeBlock, properties, selectedBlock, block, data, properties.blocks]);\n  var blockState = {};\n  var panelData = properties;\n  var panels = getPanels(panelData);\n  var handleTitleChange = function handleTitleChange(e, value) {\n    var _value = _slicedToArray(value, 2),\n      uid = _value[0],\n      panel = _value[1];\n    var modifiedBlock = _objectSpread(_objectSpread({}, panel), {}, {\n      title: e.target.value,\n      '@type': 'accordionPanel'\n    });\n    onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n      data: _objectSpread(_objectSpread({}, panelData), {}, {\n        blocks: _objectSpread(_objectSpread({}, panelData.blocks), {}, _defineProperty({}, uid, modifiedBlock))\n      })\n    }));\n  };\n\n  // Get editing instructions from block settings or props\n  var instructions = (data === null || data === void 0 ? void 0 : (_data$instructions = data.instructions) === null || _data$instructions === void 0 ? void 0 : _data$instructions.data) || (data === null || data === void 0 ? void 0 : data.instructions);\n  if (!instructions || instructions === '<p><br/></p>') {\n    instructions = formDescription;\n  }\n  return __jsx(\"fieldset\", {\n    className: \"accordion-block\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 5\n    }\n  }, __jsx(\"legend\", {\n    onClick: function onClick() {\n      setSelectedBlock({});\n      props.setSidebarTab(1);\n    },\n    \"aria-hidden\": \"true\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 7\n    }\n  }, data.title || 'Accordion'), panels.map(function (_ref, index) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      uid = _ref2[0],\n      panel = _ref2[1];\n    return __jsx(AccordionEdit, {\n      uid: uid,\n      panel: panel,\n      panelData: panelData,\n      handleTitleChange: handleTitleChange,\n      handleTitleClick: function handleTitleClick() {\n        return setSelectedBlock({});\n      },\n      data: data,\n      index: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }\n    }, __jsx(BlocksForm, {\n      key: uid,\n      title: data.placeholder,\n      description: instructions,\n      manage: manage,\n      allowedBlocks: data.allowedBlocks,\n      metadata: metadata,\n      properties: _isEmpty(panel) ? emptyBlocksForm() : panel,\n      selectedBlock: selected ? selectedBlock[uid] : null,\n      onSelectBlock: function onSelectBlock(id) {\n        return setSelectedBlock(_defineProperty({}, uid, id));\n      },\n      onChangeFormData: function onChangeFormData(newFormData) {\n        onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n          data: _objectSpread(_objectSpread({}, panelData), {}, {\n            blocks: _objectSpread(_objectSpread({}, panelData.blocks), {}, _defineProperty({}, uid, newFormData))\n          })\n        }));\n      },\n      onChangeField: function onChangeField(id, value) {\n        if (['blocks', 'blocks_layout'].indexOf(id) > -1) {\n          var _panelData$blocks;\n          blockState[id] = value;\n          onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n            data: _objectSpread(_objectSpread({}, panelData), {}, {\n              blocks: _objectSpread(_objectSpread({}, panelData.blocks), {}, _defineProperty({}, uid, _objectSpread(_objectSpread({}, (_panelData$blocks = panelData.blocks) === null || _panelData$blocks === void 0 ? void 0 : _panelData$blocks[uid]), blockState)))\n            })\n          }));\n        } else {\n          _onChangeField(id, value);\n        }\n      },\n      pathname: pathname,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }\n    }, function (_ref3, editBlock, blockProps) {\n      var draginfo = _ref3.draginfo;\n      return __jsx(EditBlockWrapper, {\n        draginfo: draginfo,\n        blockProps: blockProps,\n        disabled: data.disableInnerButtons,\n        extraControls: __jsx(React.Fragment, null, instructions && __jsx(React.Fragment, null, __jsx(Button, {\n          icon: true,\n          basic: true,\n          title: \"Section help\",\n          onClick: function onClick() {\n            setSelectedBlock({});\n            var tab = manage ? 0 : 1;\n            props.setSidebarTab(tab);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 25\n          }\n        }, __jsx(Icon, {\n          name: helpSVG,\n          className: \"\",\n          size: \"19px\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 27\n          }\n        })))),\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 15\n        }\n      }, editBlock);\n    }));\n  }), __jsx(SidebarPortal, {\n    selected: selected && !Object.keys(selectedBlock).length,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }\n  }, instructions && __jsx(Segment, {\n    attached: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: instructions\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }\n  })), !(data !== null && data !== void 0 && data.readOnlySettings) && __jsx(BlockDataForm, {\n    schema: AccordionBlockSchema({\n      intl: intl\n    }),\n    title: \"Accordion block\",\n    onChangeField: function onChangeField(id, value) {\n      onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, _defineProperty({}, id, value)));\n    },\n    formData: data,\n    block: block,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 11\n    }\n  })));\n};\n_s(Edit, \"ycebbRi9eyeC/91i8QVOv89B9vM=\", false, function () {\n  return [useIntl];\n});\n_c = Edit;\nexport default _c2 = withBlockExtensions(Edit);\nvar _c, _c2;\n$RefreshReg$(_c, \"Edit\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["BlocksForm","Icon","SidebarPortal","emptyBlocksForm","helpSVG","React","useState","Button","Segment","withBlockExtensions","BlockDataForm","useIntl","AccordionEdit","EditBlockWrapper","AccordionBlockSchema","emptyAccordion","getPanels","config","Edit","props","selectedBlock","setSelectedBlock","block","data","onChangeBlock","onChangeField","pathname","selected","manage","formDescription","intl","properties","blocks","metadata","applySchemaEnhancer","originalSchema","schema","schemaEnhancer","formData","blockType","variations","blocksConfig","length","activeItemName","variation","activeItem","find","item","id","isDefault","setInitialData","accordionSchema","defaultValues","Object","keys","reduce","accumulator","currentVal","useEffect","blocks_layout","items","map","undefined","blockState","panelData","panels","handleTitleChange","e","value","uid","panel","modifiedBlock","title","target","instructions","setSidebarTab","index","placeholder","allowedBlocks","newFormData","indexOf","editBlock","blockProps","draginfo","disableInnerButtons","tab","__html","readOnlySettings"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-accordion-block/src/components/manage/Blocks/Accordion/Edit.jsx"],"sourcesContent":["import { BlocksForm, Icon, SidebarPortal } from '@plone/volto/components';\nimport { emptyBlocksForm } from '@plone/volto/helpers';\nimport helpSVG from '@plone/volto/icons/help.svg';\nimport { isEmpty } from 'lodash';\nimport React, { useState } from 'react';\nimport { Button, Segment } from 'semantic-ui-react';\nimport { withBlockExtensions } from '@plone/volto/helpers';\nimport { BlockDataForm } from '@plone/volto/components';\nimport { useIntl } from 'react-intl';\nimport AccordionEdit from './AccordionEdit';\nimport EditBlockWrapper from './EditBlockWrapper';\nimport './editor.less';\nimport { AccordionBlockSchema } from './Schema';\nimport { emptyAccordion, getPanels } from './util';\nimport { cloneDeep } from 'lodash';\nimport config from '@plone/volto/registry';\n\nconst Edit = (props) => {\n  const [selectedBlock, setSelectedBlock] = useState({});\n  const {\n    block,\n    data,\n    onChangeBlock,\n    onChangeField,\n    pathname,\n    selected,\n    manage,\n    formDescription,\n  } = props;\n  const intl = useIntl();\n  const properties = isEmpty(data?.data?.blocks)\n    ? emptyAccordion(3)\n    : data.data;\n  const metadata = props.metadata || props.properties;\n\n  const applySchemaEnhancer = (originalSchema) => {\n    let schema, schemaEnhancer;\n    const formData = data;\n    const { blocks } = config;\n\n    const blockType = formData['@type'];\n    const variations = blocks?.blocksConfig[blockType]?.variations || [];\n\n    if (variations.length === 0) {\n      // No variations present but anyways\n      // finalize the schema with a schemaEnhancer in the block config is present\n      schemaEnhancer = blocks.blocksConfig?.[blockType]?.schemaEnhancer;\n      if (schemaEnhancer)\n        schema = schemaEnhancer({ schema: originalSchema, formData, intl });\n    }\n\n    const activeItemName = formData?.variation;\n    let activeItem = variations.find((item) => item.id === activeItemName);\n    if (!activeItem) activeItem = variations.find((item) => item.isDefault);\n\n    schemaEnhancer = activeItem?.['schemaEnhancer'];\n\n    schema = schemaEnhancer\n      ? schemaEnhancer({ schema: cloneDeep(originalSchema), formData, intl })\n      : cloneDeep(originalSchema);\n\n    return schema;\n  };\n\n  /**\n   * Will set field values from schema, by matching the default values\n   * @returns {Object} defaultValues\n   */\n  const setInitialData = () => {\n    const accordionSchema = applySchemaEnhancer(AccordionBlockSchema({ intl }));\n    const defaultValues = Object.keys(accordionSchema.properties).reduce(\n      (accumulator, currentVal) => {\n        return accordionSchema.properties[currentVal].default\n          ? {\n              ...accumulator,\n              [currentVal]: accordionSchema.properties[currentVal].default,\n            }\n          : accumulator;\n      },\n      {},\n    );\n\n    return {\n      ...defaultValues,\n      ...data,\n      data: {\n        ...properties,\n      },\n    };\n  };\n\n  React.useEffect(() => {\n    if (isEmpty(data?.data)) {\n      onChangeBlock(block, setInitialData());\n    }\n    /* eslint-disable-next-line */\n  }, []);\n\n  React.useEffect(() => {\n    properties.blocks_layout.items.map((item) => {\n      if (isEmpty(properties.blocks[item].blocks)) {\n        return onChangeBlock(block, {\n          ...data,\n          data: {\n            ...properties,\n            blocks: {\n              ...properties.blocks,\n              [item]: emptyBlocksForm(),\n            },\n          },\n        });\n      }\n      return undefined;\n    });\n  }, [\n    onChangeBlock,\n    properties,\n    selectedBlock,\n    block,\n    data,\n    properties.blocks,\n  ]);\n\n  const blockState = {};\n  const panelData = properties;\n  const panels = getPanels(panelData);\n\n  const handleTitleChange = (e, value) => {\n    const [uid, panel] = value;\n    const modifiedBlock = {\n      ...panel,\n      title: e.target.value,\n      '@type': 'accordionPanel',\n    };\n    onChangeBlock(block, {\n      ...data,\n      data: {\n        ...panelData,\n        blocks: {\n          ...panelData.blocks,\n          [uid]: modifiedBlock,\n        },\n      },\n    });\n  };\n\n  // Get editing instructions from block settings or props\n  let instructions = data?.instructions?.data || data?.instructions;\n  if (!instructions || instructions === '<p><br/></p>') {\n    instructions = formDescription;\n  }\n\n  return (\n    <fieldset className=\"accordion-block\">\n      <legend\n        onClick={() => {\n          setSelectedBlock({});\n          props.setSidebarTab(1);\n        }}\n        aria-hidden=\"true\"\n      >\n        {data.title || 'Accordion'}\n      </legend>\n      {panels.map(([uid, panel], index) => (\n        <AccordionEdit\n          uid={uid}\n          panel={panel}\n          panelData={panelData}\n          handleTitleChange={handleTitleChange}\n          handleTitleClick={() => setSelectedBlock({})}\n          data={data}\n          index={index}\n        >\n          <BlocksForm\n            key={uid}\n            title={data.placeholder}\n            description={instructions}\n            manage={manage}\n            allowedBlocks={data.allowedBlocks}\n            metadata={metadata}\n            properties={isEmpty(panel) ? emptyBlocksForm() : panel}\n            selectedBlock={selected ? selectedBlock[uid] : null}\n            onSelectBlock={(id) =>\n              setSelectedBlock({\n                [uid]: id,\n              })\n            }\n            onChangeFormData={(newFormData) => {\n              onChangeBlock(block, {\n                ...data,\n                data: {\n                  ...panelData,\n                  blocks: {\n                    ...panelData.blocks,\n                    [uid]: newFormData,\n                  },\n                },\n              });\n            }}\n            onChangeField={(id, value) => {\n              if (['blocks', 'blocks_layout'].indexOf(id) > -1) {\n                blockState[id] = value;\n                onChangeBlock(block, {\n                  ...data,\n                  data: {\n                    ...panelData,\n                    blocks: {\n                      ...panelData.blocks,\n                      [uid]: {\n                        ...panelData.blocks?.[uid],\n                        ...blockState,\n                      },\n                    },\n                  },\n                });\n              } else {\n                onChangeField(id, value);\n              }\n            }}\n            pathname={pathname}\n          >\n            {({ draginfo }, editBlock, blockProps) => (\n              <EditBlockWrapper\n                draginfo={draginfo}\n                blockProps={blockProps}\n                disabled={data.disableInnerButtons}\n                extraControls={\n                  <>\n                    {instructions && (\n                      <>\n                        <Button\n                          icon\n                          basic\n                          title=\"Section help\"\n                          onClick={() => {\n                            setSelectedBlock({});\n                            const tab = manage ? 0 : 1;\n                            props.setSidebarTab(tab);\n                          }}\n                        >\n                          <Icon name={helpSVG} className=\"\" size=\"19px\" />\n                        </Button>\n                      </>\n                    )}\n                  </>\n                }\n              >\n                {editBlock}\n              </EditBlockWrapper>\n            )}\n          </BlocksForm>\n        </AccordionEdit>\n      ))}\n      <SidebarPortal selected={selected && !Object.keys(selectedBlock).length}>\n        {instructions && (\n          <Segment attached>\n            <div dangerouslySetInnerHTML={{ __html: instructions }} />\n          </Segment>\n        )}\n        {!data?.readOnlySettings && (\n          <BlockDataForm\n            schema={AccordionBlockSchema({ intl })}\n            title=\"Accordion block\"\n            onChangeField={(id, value) => {\n              onChangeBlock(block, {\n                ...data,\n                [id]: value,\n              });\n            }}\n            formData={data}\n            block={block}\n          />\n        )}\n      </SidebarPortal>\n    </fieldset>\n  );\n};\n\nexport default withBlockExtensions(Edit);\n"],"mappings":";;;;;;;;;AAAA,SAASA,UAAU,EAAEC,IAAI,EAAEC,aAAa,QAAQ,yBAAyB;AACzE,SAASC,eAAe,QAAQ,sBAAsB;AACtD,OAAOC,OAAO,MAAM,6BAA6B;AAEjD,OAAOC,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,MAAM,EAAEC,OAAO,QAAQ,mBAAmB;AACnD,SAASC,mBAAmB,QAAQ,sBAAsB;AAC1D,SAASC,aAAa,QAAQ,yBAAyB;AACvD,SAASC,OAAO,QAAQ,YAAY;AACpC,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,OAAO,eAAe;AACtB,SAASC,oBAAoB,QAAQ,UAAU;AAC/C,SAASC,cAAc,EAAEC,SAAS,QAAQ,QAAQ;AAElD,OAAOC,MAAM,MAAM,uBAAuB;AAE1C,IAAMC,IAAI,GAAG,SAAPA,IAAI,CAAIC,KAAK,EAAK;EAAA;EAAA;EACtB,gBAA0Cb,QAAQ,CAAC,CAAC,CAAC,CAAC;IAA/Cc,aAAa;IAAEC,gBAAgB;EACtC,IACEC,KAAK,GAQHH,KAAK,CARPG,KAAK;IACLC,IAAI,GAOFJ,KAAK,CAPPI,IAAI;IACJC,aAAa,GAMXL,KAAK,CANPK,aAAa;IACbC,cAAa,GAKXN,KAAK,CALPM,aAAa;IACbC,QAAQ,GAINP,KAAK,CAJPO,QAAQ;IACRC,QAAQ,GAGNR,KAAK,CAHPQ,QAAQ;IACRC,MAAM,GAEJT,KAAK,CAFPS,MAAM;IACNC,eAAe,GACbV,KAAK,CADPU,eAAe;EAEjB,IAAMC,IAAI,GAAGnB,OAAO,EAAE;EACtB,IAAMoB,UAAU,GAAG,SAAQR,IAAI,aAAJA,IAAI,qCAAJA,IAAI,CAAEA,IAAI,+CAAV,WAAYS,MAAM,CAAC,GAC1CjB,cAAc,CAAC,CAAC,CAAC,GACjBQ,IAAI,CAACA,IAAI;EACb,IAAMU,QAAQ,GAAGd,KAAK,CAACc,QAAQ,IAAId,KAAK,CAACY,UAAU;EAEnD,IAAMG,mBAAmB,GAAG,SAAtBA,mBAAmB,CAAIC,cAAc,EAAK;IAAA;IAC9C,IAAIC,MAAM,EAAEC,cAAc;IAC1B,IAAMC,QAAQ,GAAGf,IAAI;IACrB,IAAQS,MAAM,GAAKf,MAAM,CAAjBe,MAAM;IAEd,IAAMO,SAAS,GAAGD,QAAQ,CAAC,OAAO,CAAC;IACnC,IAAME,UAAU,GAAG,CAAAR,MAAM,aAANA,MAAM,gDAANA,MAAM,CAAES,YAAY,CAACF,SAAS,CAAC,0DAA/B,sBAAiCC,UAAU,KAAI,EAAE;IAEpE,IAAIA,UAAU,CAACE,MAAM,KAAK,CAAC,EAAE;MAAA;MAC3B;MACA;MACAL,cAAc,2BAAGL,MAAM,CAACS,YAAY,mFAAnB,qBAAsBF,SAAS,CAAC,2DAAhC,uBAAkCF,cAAc;MACjE,IAAIA,cAAc,EAChBD,MAAM,GAAGC,cAAc,CAAC;QAAED,MAAM,EAAED,cAAc;QAAEG,QAAQ,EAARA,QAAQ;QAAER,IAAI,EAAJA;MAAK,CAAC,CAAC;IACvE;IAEA,IAAMa,cAAc,GAAGL,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEM,SAAS;IAC1C,IAAIC,UAAU,GAAGL,UAAU,CAACM,IAAI,CAAC,UAACC,IAAI;MAAA,OAAKA,IAAI,CAACC,EAAE,KAAKL,cAAc;IAAA,EAAC;IACtE,IAAI,CAACE,UAAU,EAAEA,UAAU,GAAGL,UAAU,CAACM,IAAI,CAAC,UAACC,IAAI;MAAA,OAAKA,IAAI,CAACE,SAAS;IAAA,EAAC;IAEvEZ,cAAc,kBAAGQ,UAAU,gDAAV,YAAa,gBAAgB,CAAC;IAE/CT,MAAM,GAAGC,cAAc,GACnBA,cAAc,CAAC;MAAED,MAAM,EAAE,WAAUD,cAAc,CAAC;MAAEG,QAAQ,EAARA,QAAQ;MAAER,IAAI,EAAJA;IAAK,CAAC,CAAC,GACrE,WAAUK,cAAc,CAAC;IAE7B,OAAOC,MAAM;EACf,CAAC;;EAED;AACF;AACA;AACA;EACE,IAAMc,cAAc,GAAG,SAAjBA,cAAc,GAAS;IAC3B,IAAMC,eAAe,GAAGjB,mBAAmB,CAACpB,oBAAoB,CAAC;MAAEgB,IAAI,EAAJA;IAAK,CAAC,CAAC,CAAC;IAC3E,IAAMsB,aAAa,GAAGC,MAAM,CAACC,IAAI,CAACH,eAAe,CAACpB,UAAU,CAAC,CAACwB,MAAM,CAClE,UAACC,WAAW,EAAEC,UAAU,EAAK;MAC3B,OAAON,eAAe,CAACpB,UAAU,CAAC0B,UAAU,CAAC,WAAQ,mCAE5CD,WAAW,2BACbC,UAAU,EAAGN,eAAe,CAACpB,UAAU,CAAC0B,UAAU,CAAC,WAAQ,KAE9DD,WAAW;IACjB,CAAC,EACD,CAAC,CAAC,CACH;IAED,qDACKJ,aAAa,GACb7B,IAAI;MACPA,IAAI,oBACCQ,UAAU;IACd;EAEL,CAAC;EAED1B,KAAK,CAACqD,SAAS,CAAC,YAAM;IACpB,IAAI,SAAQnC,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEA,IAAI,CAAC,EAAE;MACvBC,aAAa,CAACF,KAAK,EAAE4B,cAAc,EAAE,CAAC;IACxC;IACA;EACF,CAAC,EAAE,EAAE,CAAC;EAEN7C,KAAK,CAACqD,SAAS,CAAC,YAAM;IACpB3B,UAAU,CAAC4B,aAAa,CAACC,KAAK,CAACC,GAAG,CAAC,UAACd,IAAI,EAAK;MAC3C,IAAI,SAAQhB,UAAU,CAACC,MAAM,CAACe,IAAI,CAAC,CAACf,MAAM,CAAC,EAAE;QAC3C,OAAOR,aAAa,CAACF,KAAK,kCACrBC,IAAI;UACPA,IAAI,kCACCQ,UAAU;YACbC,MAAM,kCACDD,UAAU,CAACC,MAAM,2BACnBe,IAAI,EAAG5C,eAAe,EAAE;UAC1B;QACF,GACD;MACJ;MACA,OAAO2D,SAAS;IAClB,CAAC,CAAC;EACJ,CAAC,EAAE,CACDtC,aAAa,EACbO,UAAU,EACVX,aAAa,EACbE,KAAK,EACLC,IAAI,EACJQ,UAAU,CAACC,MAAM,CAClB,CAAC;EAEF,IAAM+B,UAAU,GAAG,CAAC,CAAC;EACrB,IAAMC,SAAS,GAAGjC,UAAU;EAC5B,IAAMkC,MAAM,GAAGjD,SAAS,CAACgD,SAAS,CAAC;EAEnC,IAAME,iBAAiB,GAAG,SAApBA,iBAAiB,CAAIC,CAAC,EAAEC,KAAK,EAAK;IACtC,4BAAqBA,KAAK;MAAnBC,GAAG;MAAEC,KAAK;IACjB,IAAMC,aAAa,mCACdD,KAAK;MACRE,KAAK,EAAEL,CAAC,CAACM,MAAM,CAACL,KAAK;MACrB,OAAO,EAAE;IAAgB,EAC1B;IACD5C,aAAa,CAACF,KAAK,kCACdC,IAAI;MACPA,IAAI,kCACCyC,SAAS;QACZhC,MAAM,kCACDgC,SAAS,CAAChC,MAAM,2BAClBqC,GAAG,EAAGE,aAAa;MACrB;IACF,GACD;EACJ,CAAC;;EAED;EACA,IAAIG,YAAY,GAAG,CAAAnD,IAAI,aAAJA,IAAI,6CAAJA,IAAI,CAAEmD,YAAY,uDAAlB,mBAAoBnD,IAAI,MAAIA,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEmD,YAAY;EACjE,IAAI,CAACA,YAAY,IAAIA,YAAY,KAAK,cAAc,EAAE;IACpDA,YAAY,GAAG7C,eAAe;EAChC;EAEA,OACE;IAAU,SAAS,EAAC,iBAAiB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACnC;IACE,OAAO,EAAE,mBAAM;MACbR,gBAAgB,CAAC,CAAC,CAAC,CAAC;MACpBF,KAAK,CAACwD,aAAa,CAAC,CAAC,CAAC;IACxB,CAAE;IACF,eAAY,MAAM;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAEjBpD,IAAI,CAACiD,KAAK,IAAI,WAAW,CACnB,EACRP,MAAM,CAACJ,GAAG,CAAC,gBAAee,KAAK;IAAA;MAAlBP,GAAG;MAAEC,KAAK;IAAA,OACtB,MAAC,aAAa;MACZ,GAAG,EAAED,GAAI;MACT,KAAK,EAAEC,KAAM;MACb,SAAS,EAAEN,SAAU;MACrB,iBAAiB,EAAEE,iBAAkB;MACrC,gBAAgB,EAAE;QAAA,OAAM7C,gBAAgB,CAAC,CAAC,CAAC,CAAC;MAAA,CAAC;MAC7C,IAAI,EAAEE,IAAK;MACX,KAAK,EAAEqD,KAAM;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAEb,MAAC,UAAU;MACT,GAAG,EAAEP,GAAI;MACT,KAAK,EAAE9C,IAAI,CAACsD,WAAY;MACxB,WAAW,EAAEH,YAAa;MAC1B,MAAM,EAAE9C,MAAO;MACf,aAAa,EAAEL,IAAI,CAACuD,aAAc;MAClC,QAAQ,EAAE7C,QAAS;MACnB,UAAU,EAAE,SAAQqC,KAAK,CAAC,GAAGnE,eAAe,EAAE,GAAGmE,KAAM;MACvD,aAAa,EAAE3C,QAAQ,GAAGP,aAAa,CAACiD,GAAG,CAAC,GAAG,IAAK;MACpD,aAAa,EAAE,uBAACrB,EAAE;QAAA,OAChB3B,gBAAgB,qBACbgD,GAAG,EAAGrB,EAAE,EACT;MAAA,CACH;MACD,gBAAgB,EAAE,0BAAC+B,WAAW,EAAK;QACjCvD,aAAa,CAACF,KAAK,kCACdC,IAAI;UACPA,IAAI,kCACCyC,SAAS;YACZhC,MAAM,kCACDgC,SAAS,CAAChC,MAAM,2BAClBqC,GAAG,EAAGU,WAAW;UACnB;QACF,GACD;MACJ,CAAE;MACF,aAAa,EAAE,uBAAC/B,EAAE,EAAEoB,KAAK,EAAK;QAC5B,IAAI,CAAC,QAAQ,EAAE,eAAe,CAAC,CAACY,OAAO,CAAChC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE;UAAA;UAChDe,UAAU,CAACf,EAAE,CAAC,GAAGoB,KAAK;UACtB5C,aAAa,CAACF,KAAK,kCACdC,IAAI;YACPA,IAAI,kCACCyC,SAAS;cACZhC,MAAM,kCACDgC,SAAS,CAAChC,MAAM,2BAClBqC,GAAG,uDACCL,SAAS,CAAChC,MAAM,sDAAhB,kBAAmBqC,GAAG,CAAC,GACvBN,UAAU;YAEhB;UACF,GACD;QACJ,CAAC,MAAM;UACLtC,cAAa,CAACuB,EAAE,EAAEoB,KAAK,CAAC;QAC1B;MACF,CAAE;MACF,QAAQ,EAAE1C,QAAS;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAElB,iBAAeuD,SAAS,EAAEC,UAAU;MAAA,IAAjCC,QAAQ,SAARA,QAAQ;MAAA,OACV,MAAC,gBAAgB;QACf,QAAQ,EAAEA,QAAS;QACnB,UAAU,EAAED,UAAW;QACvB,QAAQ,EAAE3D,IAAI,CAAC6D,mBAAoB;QACnC,aAAa,EACX,4BACGV,YAAY,IACX,4BACE,MAAC,MAAM;UACL,IAAI;UACJ,KAAK;UACL,KAAK,EAAC,cAAc;UACpB,OAAO,EAAE,mBAAM;YACbrD,gBAAgB,CAAC,CAAC,CAAC,CAAC;YACpB,IAAMgE,GAAG,GAAGzD,MAAM,GAAG,CAAC,GAAG,CAAC;YAC1BT,KAAK,CAACwD,aAAa,CAACU,GAAG,CAAC;UAC1B,CAAE;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,GAEF,MAAC,IAAI;UAAC,IAAI,EAAEjF,OAAQ;UAAC,SAAS,EAAC,EAAE;UAAC,IAAI,EAAC,MAAM;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,EAAG,CACzC,CAEZ,CAEJ;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAEA6E,SAAS,CACO;IAAA,CACpB,CACU,CACC;EAAA,CACjB,CAAC,EACF,MAAC,aAAa;IAAC,QAAQ,EAAEtD,QAAQ,IAAI,CAAC0B,MAAM,CAACC,IAAI,CAAClC,aAAa,CAAC,CAACsB,MAAO;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACrEgC,YAAY,IACX,MAAC,OAAO;IAAC,QAAQ;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACf;IAAK,uBAAuB,EAAE;MAAEY,MAAM,EAAEZ;IAAa,CAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAG,CAE7D,EACA,EAACnD,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEgE,gBAAgB,KACtB,MAAC,aAAa;IACZ,MAAM,EAAEzE,oBAAoB,CAAC;MAAEgB,IAAI,EAAJA;IAAK,CAAC,CAAE;IACvC,KAAK,EAAC,iBAAiB;IACvB,aAAa,EAAE,uBAACkB,EAAE,EAAEoB,KAAK,EAAK;MAC5B5C,aAAa,CAACF,KAAK,kCACdC,IAAI,2BACNyB,EAAE,EAAGoB,KAAK,GACX;IACJ,CAAE;IACF,QAAQ,EAAE7C,IAAK;IACf,KAAK,EAAED,KAAM;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAEhB,CACa,CACP;AAEf,CAAC;AAAC,GAnQIJ,IAAI;EAAA,QAYKP,OAAO;AAAA;AAAA,KAZhBO,IAAI;AAqQV,qBAAeT,mBAAmB,CAACS,IAAI,CAAC;AAAC;AAAA;AAAA"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}