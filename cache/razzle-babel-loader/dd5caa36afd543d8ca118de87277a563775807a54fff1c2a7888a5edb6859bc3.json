{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-listing-block/src/blocks/Listing/templates/NewsList.jsx\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport React from 'react';\nimport { flattenToAppURL, getBaseUrl } from '@plone/volto/helpers';\nimport { Link } from 'react-router-dom';\nimport config from '@plone/volto/registry';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nconst CustomNewsListTemplate = ({\n  items,\n  gridSize,\n  isEditMode,\n  hasDate,\n  hasDescription\n}) => {\n  moment.locale(config.settings.dateLocale);\n  const makeTextBody = item => __jsx(\"div\", {\n    className: \"news-item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 5\n    }\n  }, __jsx(Link, {\n    className: \"news-headline\",\n    title: item.title,\n    to: item['@id'] ? flattenToAppURL(getBaseUrl(item['@id'])) : '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }\n  }, item.title ? item.title : item.id), hasDate && item.effective && __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, __jsx(\"span\", {\n    className: \"info-prefix\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 11\n    }\n  }, \"Published:\", '  '), __jsx(\"span\", {\n    className: \"category\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 11\n    }\n  }, moment(item.effective).format('ll'))), hasDescription && __jsx(\"div\", {\n    className: \"description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }\n  }, __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 11\n    }\n  }, item.description)));\n  return __jsx(React.Fragment, null, items && items.length > 0 && __jsx(\"div\", {\n    className: `ui fluid`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, items.map(item => __jsx(\"div\", {\n    key: item['@id'],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }, makeTextBody(item)))));\n};\nCustomNewsListTemplate.schemaEnhancer = ({\n  schema,\n  formData,\n  intl\n}) => {\n  schema.fieldsets.splice(1, 0, {\n    id: 'newsList',\n    title: 'News item',\n    fields: ['hasDate', 'hasDescription']\n  });\n  schema.properties = _objectSpread(_objectSpread({}, schema.properties), {}, {\n    hasDate: {\n      title: 'Publication date',\n      type: 'boolean'\n    },\n    hasDescription: {\n      title: 'Description',\n      type: 'boolean'\n    }\n  });\n  return schema;\n};\nCustomNewsListTemplate.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.any).isRequired,\n  linkMore: PropTypes.any,\n  isEditMode: PropTypes.bool\n};\nexport default CustomNewsListTemplate;","map":{"version":3,"names":["React","flattenToAppURL","getBaseUrl","Link","config","moment","PropTypes","CustomNewsListTemplate","items","gridSize","isEditMode","hasDate","hasDescription","locale","settings","dateLocale","makeTextBody","item","title","id","effective","format","description","length","map","schemaEnhancer","schema","formData","intl","fieldsets","splice","fields","properties","type","propTypes","arrayOf","any","isRequired","linkMore","bool"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-listing-block/src/blocks/Listing/templates/NewsList.jsx"],"sourcesContent":["import React from 'react';\nimport { flattenToAppURL, getBaseUrl } from '@plone/volto/helpers';\nimport { Link } from 'react-router-dom';\nimport config from '@plone/volto/registry';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\n\nconst CustomNewsListTemplate = ({\n  items,\n  gridSize,\n  isEditMode,\n  hasDate,\n  hasDescription,\n}) => {\n  moment.locale(config.settings.dateLocale);\n  const makeTextBody = (item) => (\n    <div className=\"news-item\">\n      <Link\n        className=\"news-headline\"\n        title={item.title}\n        to={item['@id'] ? flattenToAppURL(getBaseUrl(item['@id'])) : ''}\n      >\n        {item.title ? item.title : item.id}\n      </Link>\n\n      {hasDate && item.effective && (\n        <div>\n          <span className=\"info-prefix\">Published:{'  '}</span>\n          <span className=\"category\">\n            {moment(item.effective).format('ll')}\n          </span>\n        </div>\n      )}\n      {hasDescription && (\n        <div className=\"description\">\n          <p>{item.description}</p>\n        </div>\n      )}\n    </div>\n  );\n\n  return (\n    <>\n      {items && items.length > 0 && (\n        <div className={`ui fluid`}>\n          {items.map((item) => (\n            <div key={item['@id']}>{makeTextBody(item)}</div>\n          ))}\n        </div>\n      )}\n    </>\n  );\n};\n\nCustomNewsListTemplate.schemaEnhancer = ({ schema, formData, intl }) => {\n  schema.fieldsets.splice(1, 0, {\n    id: 'newsList',\n    title: 'News item',\n    fields: ['hasDate', 'hasDescription'],\n  });\n\n  schema.properties = {\n    ...schema.properties,\n    hasDate: {\n      title: 'Publication date',\n      type: 'boolean',\n    },\n    hasDescription: {\n      title: 'Description',\n      type: 'boolean',\n    },\n  };\n  return schema;\n};\n\nCustomNewsListTemplate.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.any).isRequired,\n  linkMore: PropTypes.any,\n  isEditMode: PropTypes.bool,\n};\n\nexport default CustomNewsListTemplate;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}