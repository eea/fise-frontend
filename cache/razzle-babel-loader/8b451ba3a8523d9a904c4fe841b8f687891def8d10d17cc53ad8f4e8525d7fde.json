{"ast":null,"code":"/**\n * Get string as Boolean.\n * @function getBoolean\n * @param {Object} value The value.\n * @return {string} Field name of the layout\n */\nexport function getBoolean(value) {\n  switch (value) {\n    case true:\n    case 'true':\n    case 'True':\n    case 1:\n    case '1':\n    case 'on':\n    case 'yes':\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Get vocabulary from hint.\n * @function getVocabFromHint\n * @param {Object} props The props.\n * @return {string} Field name of the layout\n */\nexport function getVocabFromHint(props) {\n  return props.widgetOptions && props.widgetOptions.vocabulary ? props.widgetOptions.vocabulary['@id'] : false;\n}\n\n/**\n * Get vocabulary from field.\n * @function getVocabFromField\n * @param {Object} props The props.\n * @return {string} Field name of the layout\n */\nexport function getVocabFromField(props) {\n  return props.vocabulary ? props.vocabulary['@id'] : false;\n}\n\n/**\n * Get vocabulary from items.\n * @function getVocabFromItems\n * @param {Object} props The props.\n * @return {string} Field name of the layout\n */\nexport function getVocabFromItems(props) {\n  return props.items && props.items.vocabulary ? props.items.vocabulary['@id'] : false;\n}\n\n/**\n * Get vocabulary given a URL (coming from a Schema) or from a vocabulary name.\n * @function getVocabName\n * @param {string} vocabNameOrURL\n * @returns {string} Vocabulary name\n */\nexport function getVocabName(vocabNameOrURL) {\n  if (vocabNameOrURL) {\n    return vocabNameOrURL.indexOf('@vocabularies') > -1 ? vocabNameOrURL.split('@vocabularies/')[1] : vocabNameOrURL;\n  }\n  return vocabNameOrURL;\n}\n\n/**\n * Get Fields vocabulary\n * @function getFieldsVocabulary\n * @returns {Object} Fields vocabulary\n */\nexport function getFieldsVocabulary() {\n  return {\n    items: [{\n      title: 'Choice',\n      token: 'label_choice_field'\n    }, {\n      title: 'Date',\n      token: 'label_date_field'\n    }, {\n      title: 'Date/Time',\n      token: 'label_datetime_field'\n    }, {\n      title: 'Email',\n      token: 'Email'\n    }, {\n      title: 'File Upload',\n      token: 'File Upload'\n    }, {\n      title: 'Floating-point number',\n      token: 'label_float_field'\n    }, {\n      title: 'Image',\n      token: 'Image'\n    }, {\n      title: 'Integer',\n      token: 'label_integer_field'\n    }, {\n      title: 'JSONField',\n      token: 'JSONField'\n    }, {\n      title: 'Multiple Choice',\n      token: 'label_multi_choice_field'\n    }, {\n      title: 'Password',\n      token: 'label_password_field'\n    },\n    // {\n    //   title: 'Relation Choice',\n    //   token: 'Relation Choice',\n    // },\n    {\n      title: 'Relation List',\n      token: 'Relation List'\n    }, {\n      title: 'Rich Text',\n      token: 'Rich Text'\n    }, {\n      title: 'Text',\n      token: 'label_text_field'\n    }, {\n      title: 'Text line (String)',\n      token: 'label_textline_field'\n    }, {\n      title: 'URL',\n      token: 'URL'\n    }, {\n      title: 'Yes/No',\n      token: 'label_boolean_field'\n    }]\n  };\n}","map":{"version":3,"names":["getBoolean","value","getVocabFromHint","props","widgetOptions","vocabulary","getVocabFromField","getVocabFromItems","items","getVocabName","vocabNameOrURL","indexOf","split","getFieldsVocabulary","title","token"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/helpers/Vocabularies/Vocabularies.js"],"sourcesContent":["/**\n * Get string as Boolean.\n * @function getBoolean\n * @param {Object} value The value.\n * @return {string} Field name of the layout\n */\nexport function getBoolean(value) {\n  switch (value) {\n    case true:\n    case 'true':\n    case 'True':\n    case 1:\n    case '1':\n    case 'on':\n    case 'yes':\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Get vocabulary from hint.\n * @function getVocabFromHint\n * @param {Object} props The props.\n * @return {string} Field name of the layout\n */\nexport function getVocabFromHint(props) {\n  return props.widgetOptions && props.widgetOptions.vocabulary\n    ? props.widgetOptions.vocabulary['@id']\n    : false;\n}\n\n/**\n * Get vocabulary from field.\n * @function getVocabFromField\n * @param {Object} props The props.\n * @return {string} Field name of the layout\n */\nexport function getVocabFromField(props) {\n  return props.vocabulary ? props.vocabulary['@id'] : false;\n}\n\n/**\n * Get vocabulary from items.\n * @function getVocabFromItems\n * @param {Object} props The props.\n * @return {string} Field name of the layout\n */\nexport function getVocabFromItems(props) {\n  return props.items && props.items.vocabulary\n    ? props.items.vocabulary['@id']\n    : false;\n}\n\n/**\n * Get vocabulary given a URL (coming from a Schema) or from a vocabulary name.\n * @function getVocabName\n * @param {string} vocabNameOrURL\n * @returns {string} Vocabulary name\n */\nexport function getVocabName(vocabNameOrURL) {\n  if (vocabNameOrURL) {\n    return vocabNameOrURL.indexOf('@vocabularies') > -1\n      ? vocabNameOrURL.split('@vocabularies/')[1]\n      : vocabNameOrURL;\n  }\n  return vocabNameOrURL;\n}\n\n/**\n * Get Fields vocabulary\n * @function getFieldsVocabulary\n * @returns {Object} Fields vocabulary\n */\nexport function getFieldsVocabulary() {\n  return {\n    items: [\n      {\n        title: 'Choice',\n        token: 'label_choice_field',\n      },\n      {\n        title: 'Date',\n        token: 'label_date_field',\n      },\n      {\n        title: 'Date/Time',\n        token: 'label_datetime_field',\n      },\n      {\n        title: 'Email',\n        token: 'Email',\n      },\n      {\n        title: 'File Upload',\n        token: 'File Upload',\n      },\n      {\n        title: 'Floating-point number',\n        token: 'label_float_field',\n      },\n      {\n        title: 'Image',\n        token: 'Image',\n      },\n      {\n        title: 'Integer',\n        token: 'label_integer_field',\n      },\n      {\n        title: 'JSONField',\n        token: 'JSONField',\n      },\n      {\n        title: 'Multiple Choice',\n        token: 'label_multi_choice_field',\n      },\n      {\n        title: 'Password',\n        token: 'label_password_field',\n      },\n      // {\n      //   title: 'Relation Choice',\n      //   token: 'Relation Choice',\n      // },\n      {\n        title: 'Relation List',\n        token: 'Relation List',\n      },\n      {\n        title: 'Rich Text',\n        token: 'Rich Text',\n      },\n      {\n        title: 'Text',\n        token: 'label_text_field',\n      },\n      {\n        title: 'Text line (String)',\n        token: 'label_textline_field',\n      },\n      {\n        title: 'URL',\n        token: 'URL',\n      },\n      {\n        title: 'Yes/No',\n        token: 'label_boolean_field',\n      },\n    ],\n  };\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,UAAU,CAACC,KAAK,EAAE;EAChC,QAAQA,KAAK;IACX,KAAK,IAAI;IACT,KAAK,MAAM;IACX,KAAK,MAAM;IACX,KAAK,CAAC;IACN,KAAK,GAAG;IACR,KAAK,IAAI;IACT,KAAK,KAAK;MACR,OAAO,IAAI;IACb;MACE,OAAO,KAAK;EAAC;AAEnB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,gBAAgB,CAACC,KAAK,EAAE;EACtC,OAAOA,KAAK,CAACC,aAAa,IAAID,KAAK,CAACC,aAAa,CAACC,UAAU,GACxDF,KAAK,CAACC,aAAa,CAACC,UAAU,CAAC,KAAK,CAAC,GACrC,KAAK;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,iBAAiB,CAACH,KAAK,EAAE;EACvC,OAAOA,KAAK,CAACE,UAAU,GAAGF,KAAK,CAACE,UAAU,CAAC,KAAK,CAAC,GAAG,KAAK;AAC3D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,iBAAiB,CAACJ,KAAK,EAAE;EACvC,OAAOA,KAAK,CAACK,KAAK,IAAIL,KAAK,CAACK,KAAK,CAACH,UAAU,GACxCF,KAAK,CAACK,KAAK,CAACH,UAAU,CAAC,KAAK,CAAC,GAC7B,KAAK;AACX;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,YAAY,CAACC,cAAc,EAAE;EAC3C,IAAIA,cAAc,EAAE;IAClB,OAAOA,cAAc,CAACC,OAAO,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,GAC/CD,cAAc,CAACE,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,GACzCF,cAAc;EACpB;EACA,OAAOA,cAAc;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,mBAAmB,GAAG;EACpC,OAAO;IACLL,KAAK,EAAE,CACL;MACEM,KAAK,EAAE,QAAQ;MACfC,KAAK,EAAE;IACT,CAAC,EACD;MACED,KAAK,EAAE,MAAM;MACbC,KAAK,EAAE;IACT,CAAC,EACD;MACED,KAAK,EAAE,WAAW;MAClBC,KAAK,EAAE;IACT,CAAC,EACD;MACED,KAAK,EAAE,OAAO;MACdC,KAAK,EAAE;IACT,CAAC,EACD;MACED,KAAK,EAAE,aAAa;MACpBC,KAAK,EAAE;IACT,CAAC,EACD;MACED,KAAK,EAAE,uBAAuB;MAC9BC,KAAK,EAAE;IACT,CAAC,EACD;MACED,KAAK,EAAE,OAAO;MACdC,KAAK,EAAE;IACT,CAAC,EACD;MACED,KAAK,EAAE,SAAS;MAChBC,KAAK,EAAE;IACT,CAAC,EACD;MACED,KAAK,EAAE,WAAW;MAClBC,KAAK,EAAE;IACT,CAAC,EACD;MACED,KAAK,EAAE,iBAAiB;MACxBC,KAAK,EAAE;IACT,CAAC,EACD;MACED,KAAK,EAAE,UAAU;MACjBC,KAAK,EAAE;IACT,CAAC;IACD;IACA;IACA;IACA;IACA;MACED,KAAK,EAAE,eAAe;MACtBC,KAAK,EAAE;IACT,CAAC,EACD;MACED,KAAK,EAAE,WAAW;MAClBC,KAAK,EAAE;IACT,CAAC,EACD;MACED,KAAK,EAAE,MAAM;MACbC,KAAK,EAAE;IACT,CAAC,EACD;MACED,KAAK,EAAE,oBAAoB;MAC3BC,KAAK,EAAE;IACT,CAAC,EACD;MACED,KAAK,EAAE,KAAK;MACZC,KAAK,EAAE;IACT,CAAC,EACD;MACED,KAAK,EAAE,QAAQ;MACfC,KAAK,EAAE;IACT,CAAC;EAEL,CAAC;AACH"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}