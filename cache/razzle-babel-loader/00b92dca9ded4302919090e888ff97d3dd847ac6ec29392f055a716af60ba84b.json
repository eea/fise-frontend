{"ast":null,"code":"import _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _toConsumableArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Blocks/Search/components/Facets.jsx\",\n  _this = this;\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { resolveExtension } from '@plone/volto/helpers/Extensions/withBlockExtensions';\nimport config from '@plone/volto/registry';\nimport { hasNonValueOperation, hasDateOperation } from '../utils';\nvar showFacet = function showFacet(index) {\n  var values = index.values;\n  return index ? hasNonValueOperation(index.operations || []) || hasDateOperation(index.operations || []) ? true : values && Object.keys(values).length > 0 : values && Object.keys(values).length > 0;\n};\nvar Facets = function Facets(props) {\n  var _data$query, _data$query$query, _data$facets;\n  var querystring = props.querystring,\n    _props$data = props.data,\n    data = _props$data === void 0 ? {} : _props$data,\n    facets = props.facets,\n    setFacets = props.setFacets,\n    facetWrapper = props.facetWrapper,\n    isEditMode = props.isEditMode;\n  var search = config.blocks.blocksConfig.search;\n  var FacetWrapper = facetWrapper;\n  var query_to_values = Object.assign.apply(Object, [{}].concat(_toConsumableArray((data === null || data === void 0 ? void 0 : (_data$query = data.query) === null || _data$query === void 0 ? void 0 : (_data$query$query = _data$query.query) === null || _data$query$query === void 0 ? void 0 : _data$query$query.map(function (_ref) {\n    var i = _ref.i,\n      v = _ref.v;\n    return _defineProperty({}, i, v);\n  })) || [])));\n  return __jsx(React.Fragment, null, data === null || data === void 0 ? void 0 : (_data$facets = data.facets) === null || _data$facets === void 0 ? void 0 : _data$facets.filter(function (facetSettings) {\n    return !facetSettings.hidden;\n  }).map(function (facetSettings) {\n    var _facetSettings$field, _facetSettings$field2, _facetSettings$field3;\n    var field = facetSettings === null || facetSettings === void 0 ? void 0 : (_facetSettings$field = facetSettings.field) === null || _facetSettings$field === void 0 ? void 0 : _facetSettings$field.value;\n    var index = querystring.indexes[field] || {};\n    var _index$values = index.values,\n      values = _index$values === void 0 ? {} : _index$values;\n    var choices = Object.keys(values).map(function (name) {\n      return {\n        value: name,\n        label: values[name].title\n      };\n    })\n    // filter the available values based on the allowed values in the\n    // base query\n    .filter(function (_ref3) {\n      var value = _ref3.value;\n      return query_to_values[field] ? query_to_values[field].includes(value) : true;\n    });\n    choices = choices.sort(function (a, b) {\n      return a.label.localeCompare(b.label, 'en', {\n        sensitivity: 'base'\n      });\n    });\n    var isMulti = facetSettings.multiple;\n    var selectedValue = facets[facetSettings === null || facetSettings === void 0 ? void 0 : (_facetSettings$field2 = facetSettings.field) === null || _facetSettings$field2 === void 0 ? void 0 : _facetSettings$field2.value];\n\n    // TODO :handle changing the type of facet (multi/nonmulti)\n\n    var _resolveExtension = resolveExtension('type', search.extensions.facetWidgets.types, facetSettings),\n      FacetWidget = _resolveExtension.view,\n      stateToValue = _resolveExtension.stateToValue;\n    var value = stateToValue({\n      facetSettings: facetSettings,\n      index: index,\n      selectedValue: selectedValue\n    });\n    var _search$extensions$fa = search.extensions.facetWidgets.rewriteOptions,\n      rewriteOptions = _search$extensions$fa === void 0 ? function (name, options) {\n        return options;\n      } : _search$extensions$fa;\n    return FacetWrapper && (isEditMode || showFacet(index)) ? __jsx(FacetWrapper, {\n      key: facetSettings['@id'],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    }, __jsx(FacetWidget, {\n      facet: facetSettings,\n      choices: rewriteOptions(facetSettings === null || facetSettings === void 0 ? void 0 : (_facetSettings$field3 = facetSettings.field) === null || _facetSettings$field3 === void 0 ? void 0 : _facetSettings$field3.value, choices),\n      isMulti: isMulti,\n      value: value,\n      isEditMode: isEditMode,\n      onChange: function onChange(id, value) {\n        !isEditMode && setFacets(_objectSpread(_objectSpread({}, facets), {}, _defineProperty({}, id, value)));\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 15\n      }\n    })) : '';\n  }));\n};\n_c = Facets;\nexport default Facets;\nvar _c;\n$RefreshReg$(_c, \"Facets\");","map":{"version":3,"names":["React","resolveExtension","config","hasNonValueOperation","hasDateOperation","showFacet","index","values","operations","Object","keys","length","Facets","props","querystring","data","facets","setFacets","facetWrapper","isEditMode","search","blocks","blocksConfig","FacetWrapper","query_to_values","assign","query","map","i","v","filter","facetSettings","hidden","field","value","indexes","choices","name","label","title","includes","sort","a","b","localeCompare","sensitivity","isMulti","multiple","selectedValue","extensions","facetWidgets","types","FacetWidget","view","stateToValue","rewriteOptions","options","id"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Blocks/Search/components/Facets.jsx"],"sourcesContent":["import React from 'react';\nimport { resolveExtension } from '@plone/volto/helpers/Extensions/withBlockExtensions';\nimport config from '@plone/volto/registry';\nimport { hasNonValueOperation, hasDateOperation } from '../utils';\n\nconst showFacet = (index) => {\n  const { values } = index;\n  return index\n    ? hasNonValueOperation(index.operations || []) ||\n      hasDateOperation(index.operations || [])\n      ? true\n      : values && Object.keys(values).length > 0\n    : values && Object.keys(values).length > 0;\n};\n\nconst Facets = (props) => {\n  const {\n    querystring,\n    data = {},\n    facets,\n    setFacets,\n    facetWrapper,\n    isEditMode,\n  } = props;\n  const { search } = config.blocks.blocksConfig;\n\n  const FacetWrapper = facetWrapper;\n  const query_to_values = Object.assign(\n    {},\n    ...(data?.query?.query?.map(({ i, v }) => ({ [i]: v })) || []),\n  );\n\n  return (\n    <>\n      {data?.facets\n        ?.filter((facetSettings) => !facetSettings.hidden)\n        .map((facetSettings) => {\n          const field = facetSettings?.field?.value;\n          const index = querystring.indexes[field] || {};\n          const { values = {} } = index;\n\n          let choices = Object.keys(values)\n            .map((name) => ({\n              value: name,\n              label: values[name].title,\n            }))\n            // filter the available values based on the allowed values in the\n            // base query\n            .filter(({ value }) =>\n              query_to_values[field]\n                ? query_to_values[field].includes(value)\n                : true,\n            );\n\n          choices = choices.sort((a, b) =>\n            a.label.localeCompare(b.label, 'en', { sensitivity: 'base' }),\n          );\n\n          const isMulti = facetSettings.multiple;\n          const selectedValue = facets[facetSettings?.field?.value];\n\n          // TODO :handle changing the type of facet (multi/nonmulti)\n\n          const { view: FacetWidget, stateToValue } = resolveExtension(\n            'type',\n            search.extensions.facetWidgets.types,\n            facetSettings,\n          );\n\n          let value = stateToValue({ facetSettings, index, selectedValue });\n\n          const {\n            rewriteOptions = (name, options) => options,\n          } = search.extensions.facetWidgets;\n\n          return FacetWrapper && (isEditMode || showFacet(index)) ? (\n            <FacetWrapper key={facetSettings['@id']}>\n              <FacetWidget\n                facet={facetSettings}\n                choices={rewriteOptions(facetSettings?.field?.value, choices)}\n                isMulti={isMulti}\n                value={value}\n                isEditMode={isEditMode}\n                onChange={(id, value) => {\n                  !isEditMode && setFacets({ ...facets, [id]: value });\n                }}\n              />\n            </FacetWrapper>\n          ) : (\n            ''\n          );\n        })}\n    </>\n  );\n};\n\nexport default Facets;\n"],"mappings":";;;;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,gBAAgB,QAAQ,qDAAqD;AACtF,OAAOC,MAAM,MAAM,uBAAuB;AAC1C,SAASC,oBAAoB,EAAEC,gBAAgB,QAAQ,UAAU;AAEjE,IAAMC,SAAS,GAAG,SAAZA,SAAS,CAAIC,KAAK,EAAK;EAC3B,IAAQC,MAAM,GAAKD,KAAK,CAAhBC,MAAM;EACd,OAAOD,KAAK,GACRH,oBAAoB,CAACG,KAAK,CAACE,UAAU,IAAI,EAAE,CAAC,IAC5CJ,gBAAgB,CAACE,KAAK,CAACE,UAAU,IAAI,EAAE,CAAC,GACtC,IAAI,GACJD,MAAM,IAAIE,MAAM,CAACC,IAAI,CAACH,MAAM,CAAC,CAACI,MAAM,GAAG,CAAC,GAC1CJ,MAAM,IAAIE,MAAM,CAACC,IAAI,CAACH,MAAM,CAAC,CAACI,MAAM,GAAG,CAAC;AAC9C,CAAC;AAED,IAAMC,MAAM,GAAG,SAATA,MAAM,CAAIC,KAAK,EAAK;EAAA;EACxB,IACEC,WAAW,GAMTD,KAAK,CANPC,WAAW;IAAA,cAMTD,KAAK,CALPE,IAAI;IAAJA,IAAI,4BAAG,CAAC,CAAC;IACTC,MAAM,GAIJH,KAAK,CAJPG,MAAM;IACNC,SAAS,GAGPJ,KAAK,CAHPI,SAAS;IACTC,YAAY,GAEVL,KAAK,CAFPK,YAAY;IACZC,UAAU,GACRN,KAAK,CADPM,UAAU;EAEZ,IAAQC,MAAM,GAAKlB,MAAM,CAACmB,MAAM,CAACC,YAAY,CAArCF,MAAM;EAEd,IAAMG,YAAY,GAAGL,YAAY;EACjC,IAAMM,eAAe,GAAGf,MAAM,CAACgB,MAAM,OAAbhB,MAAM,GAC5B,CAAC,CAAC,4BACE,CAAAM,IAAI,aAAJA,IAAI,sCAAJA,IAAI,CAAEW,KAAK,qEAAX,YAAaA,KAAK,sDAAlB,kBAAoBC,GAAG,CAAC;IAAA,IAAGC,CAAC,QAADA,CAAC;MAAEC,CAAC,QAADA,CAAC;IAAA,2BAAWD,CAAC,EAAGC,CAAC;EAAA,CAAG,CAAC,KAAI,EAAE,GAC9D;EAED,OACE,4BACGd,IAAI,aAAJA,IAAI,uCAAJA,IAAI,CAAEC,MAAM,iDAAZ,aACGc,MAAM,CAAC,UAACC,aAAa;IAAA,OAAK,CAACA,aAAa,CAACC,MAAM;EAAA,EAAC,CACjDL,GAAG,CAAC,UAACI,aAAa,EAAK;IAAA;IACtB,IAAME,KAAK,GAAGF,aAAa,aAAbA,aAAa,+CAAbA,aAAa,CAAEE,KAAK,yDAApB,qBAAsBC,KAAK;IACzC,IAAM5B,KAAK,GAAGQ,WAAW,CAACqB,OAAO,CAACF,KAAK,CAAC,IAAI,CAAC,CAAC;IAC9C,oBAAwB3B,KAAK,CAArBC,MAAM;MAANA,MAAM,8BAAG,CAAC,CAAC;IAEnB,IAAI6B,OAAO,GAAG3B,MAAM,CAACC,IAAI,CAACH,MAAM,CAAC,CAC9BoB,GAAG,CAAC,UAACU,IAAI;MAAA,OAAM;QACdH,KAAK,EAAEG,IAAI;QACXC,KAAK,EAAE/B,MAAM,CAAC8B,IAAI,CAAC,CAACE;MACtB,CAAC;IAAA,CAAC;IACF;IACA;IAAA,CACCT,MAAM,CAAC;MAAA,IAAGI,KAAK,SAALA,KAAK;MAAA,OACdV,eAAe,CAACS,KAAK,CAAC,GAClBT,eAAe,CAACS,KAAK,CAAC,CAACO,QAAQ,CAACN,KAAK,CAAC,GACtC,IAAI;IAAA,EACT;IAEHE,OAAO,GAAGA,OAAO,CAACK,IAAI,CAAC,UAACC,CAAC,EAAEC,CAAC;MAAA,OAC1BD,CAAC,CAACJ,KAAK,CAACM,aAAa,CAACD,CAAC,CAACL,KAAK,EAAE,IAAI,EAAE;QAAEO,WAAW,EAAE;MAAO,CAAC,CAAC;IAAA,EAC9D;IAED,IAAMC,OAAO,GAAGf,aAAa,CAACgB,QAAQ;IACtC,IAAMC,aAAa,GAAGhC,MAAM,CAACe,aAAa,aAAbA,aAAa,gDAAbA,aAAa,CAAEE,KAAK,0DAApB,sBAAsBC,KAAK,CAAC;;IAEzD;;IAEA,wBAA4CjC,gBAAgB,CAC1D,MAAM,EACNmB,MAAM,CAAC6B,UAAU,CAACC,YAAY,CAACC,KAAK,EACpCpB,aAAa,CACd;MAJaqB,WAAW,qBAAjBC,IAAI;MAAeC,YAAY,qBAAZA,YAAY;IAMvC,IAAIpB,KAAK,GAAGoB,YAAY,CAAC;MAAEvB,aAAa,EAAbA,aAAa;MAAEzB,KAAK,EAALA,KAAK;MAAE0C,aAAa,EAAbA;IAAc,CAAC,CAAC;IAEjE,4BAEI5B,MAAM,CAAC6B,UAAU,CAACC,YAAY,CADhCK,cAAc;MAAdA,cAAc,sCAAG,UAAClB,IAAI,EAAEmB,OAAO;QAAA,OAAKA,OAAO;MAAA;IAG7C,OAAOjC,YAAY,KAAKJ,UAAU,IAAId,SAAS,CAACC,KAAK,CAAC,CAAC,GACrD,MAAC,YAAY;MAAC,GAAG,EAAEyB,aAAa,CAAC,KAAK,CAAE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACtC,MAAC,WAAW;MACV,KAAK,EAAEA,aAAc;MACrB,OAAO,EAAEwB,cAAc,CAACxB,aAAa,aAAbA,aAAa,gDAAbA,aAAa,CAAEE,KAAK,0DAApB,sBAAsBC,KAAK,EAAEE,OAAO,CAAE;MAC9D,OAAO,EAAEU,OAAQ;MACjB,KAAK,EAAEZ,KAAM;MACb,UAAU,EAAEf,UAAW;MACvB,QAAQ,EAAE,kBAACsC,EAAE,EAAEvB,KAAK,EAAK;QACvB,CAACf,UAAU,IAAIF,SAAS,iCAAMD,MAAM,2BAAGyC,EAAE,EAAGvB,KAAK,GAAG;MACtD,CAAE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EACF,CACW,GAEf,EACD;EACH,CAAC,CAAC,CACH;AAEP,CAAC;AAAC,KA/EItB,MAAM;AAiFZ,eAAeA,MAAM;AAAC;AAAA"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}