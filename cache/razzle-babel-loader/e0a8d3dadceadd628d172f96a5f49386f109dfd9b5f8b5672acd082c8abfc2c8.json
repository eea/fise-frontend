{"ast":null,"code":"const _excluded = [\"block\", \"schema\", \"value\", \"onChange\", \"errors\", \"id\"];\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Widgets/ObjectWidget.jsx\";\nvar __jsx = React.createElement;\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n/**\n * A generic widget for an object. If multiple\n *\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tab } from 'semantic-ui-react';\nimport Field from '@plone/volto/components/manage/Form/Field';\n\n/**\n * Renders a field set. Passes some of the values in the schema to the Field\n * component used inside. Shows the current value, the errors, the required\n * status of the fields inside.\n *\n * @param {object} data\n * @param {number} index\n * @param {object} schema\n * @param {object} value\n * @param {object} errors\n * @param {function} onChange\n * @param {string} id\n */\nconst FieldSet = ({\n  block,\n  data,\n  index,\n  schema,\n  value,\n  errors,\n  onChange,\n  onChangeBlock,\n  id\n}) => {\n  return data.fields.map((field, idx) => {\n    var _schema$required;\n    const v = (value === null || value === void 0 ? void 0 : value[field]) || schema.properties[field].defaultValue;\n    return __jsx(Field, _extends({}, schema.properties[field], {\n      id: `${field}-${idx}-${id}`,\n      fieldSet: data.title.toLowerCase(),\n      block: block,\n      value: v,\n      objectvalue: value,\n      required: ((_schema$required = schema.required) === null || _schema$required === void 0 ? void 0 : _schema$required.indexOf(field)) !== -1,\n      onChange: (field2, fieldvalue) => {\n        return onChange(id, _objectSpread(_objectSpread({}, value), {}, {\n          [field]: fieldvalue\n        }));\n      },\n      key: field,\n      error: errors === null || errors === void 0 ? void 0 : errors[field],\n      title: schema.properties[field].title,\n      onChangeBlock: onChangeBlock,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }\n    }));\n  });\n};\n\n/**\n *\n * A JSON data editor widget based on a schema. If you want to represent complex\n * data using a single field, this is the widget to use.\n *\n * If there are multiple field sets, it renders a Tab component with multiple\n * tab panes. Each tab has the title of the fieldset it renders.\n */\nconst ObjectWidget = _ref => {\n  let {\n      block,\n      schema,\n      value,\n      // not checked to not contain unknown fields\n      onChange,\n      errors = {},\n      id\n    } = _ref,\n    props = _objectWithoutProperties(_ref, _excluded);\n  const createTab = React.useCallback((fieldset, index) => {\n    return {\n      menuItem: fieldset.title,\n      render: () => __jsx(Tab.Pane, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }\n      }, __jsx(FieldSet, {\n        block: block,\n        data: fieldset,\n        index: index,\n        schema: schema,\n        errors: errors,\n        value: value,\n        onChange: onChange,\n        id: id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 13\n        }\n      }))\n    };\n  }, [block, errors, id, onChange, schema, value]);\n  return schema.fieldsets.length === 1 ? __jsx(React.Fragment, null, __jsx(FieldSet, {\n    block: block,\n    data: schema.fieldsets[0],\n    index: 0,\n    schema: schema,\n    errors: errors,\n    value: value,\n    onChange: onChange,\n    id: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }\n  })) : __jsx(Tab, {\n    panes: schema.fieldsets.map(createTab),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }\n  }) // lazy loading\n  ;\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nObjectWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  schema: PropTypes.object.isRequired,\n  errors: PropTypes.object,\n  value: PropTypes.object,\n  onChange: PropTypes.func.isRequired\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nObjectWidget.defaultProps = {\n  value: null\n};\nexport default ObjectWidget;","map":{"version":3,"names":["React","PropTypes","Tab","Field","FieldSet","block","data","index","schema","value","errors","onChange","onChangeBlock","id","fields","map","field","idx","v","properties","defaultValue","title","toLowerCase","required","indexOf","field2","fieldvalue","ObjectWidget","props","createTab","useCallback","fieldset","menuItem","render","fieldsets","length","propTypes","string","isRequired","object","func","defaultProps"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Widgets/ObjectWidget.jsx"],"sourcesContent":["/**\n * A generic widget for an object. If multiple\n *\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Tab } from 'semantic-ui-react';\n\nimport Field from '@plone/volto/components/manage/Form/Field';\n\n/**\n * Renders a field set. Passes some of the values in the schema to the Field\n * component used inside. Shows the current value, the errors, the required\n * status of the fields inside.\n *\n * @param {object} data\n * @param {number} index\n * @param {object} schema\n * @param {object} value\n * @param {object} errors\n * @param {function} onChange\n * @param {string} id\n */\nconst FieldSet = ({\n  block,\n  data,\n  index,\n  schema,\n  value,\n  errors,\n  onChange,\n  onChangeBlock,\n  id,\n}) => {\n  return data.fields.map((field, idx) => {\n    const v = value?.[field] || schema.properties[field].defaultValue;\n    return (\n      <Field\n        {...schema.properties[field]}\n        id={`${field}-${idx}-${id}`}\n        fieldSet={data.title.toLowerCase()}\n        block={block}\n        value={v}\n        objectvalue={value}\n        required={schema.required?.indexOf(field) !== -1}\n        onChange={(field2, fieldvalue) => {\n          return onChange(id, { ...value, [field]: fieldvalue });\n        }}\n        key={field}\n        error={errors?.[field]}\n        title={schema.properties[field].title}\n        onChangeBlock={onChangeBlock}\n      />\n    );\n  });\n};\n\n/**\n *\n * A JSON data editor widget based on a schema. If you want to represent complex\n * data using a single field, this is the widget to use.\n *\n * If there are multiple field sets, it renders a Tab component with multiple\n * tab panes. Each tab has the title of the fieldset it renders.\n */\nconst ObjectWidget = ({\n  block,\n  schema,\n  value, // not checked to not contain unknown fields\n  onChange,\n  errors = {},\n  id,\n  ...props\n}) => {\n  const createTab = React.useCallback(\n    (fieldset, index) => {\n      return {\n        menuItem: fieldset.title,\n        render: () => (\n          <Tab.Pane>\n            <FieldSet\n              block={block}\n              data={fieldset}\n              index={index}\n              schema={schema}\n              errors={errors}\n              value={value}\n              onChange={onChange}\n              id={id}\n            />\n          </Tab.Pane>\n        ),\n      };\n    },\n    [block, errors, id, onChange, schema, value],\n  );\n\n  return schema.fieldsets.length === 1 ? (\n    <>\n      <FieldSet\n        block={block}\n        data={schema.fieldsets[0]}\n        index={0}\n        schema={schema}\n        errors={errors}\n        value={value}\n        onChange={onChange}\n        id={id}\n      />\n    </>\n  ) : (\n    <Tab panes={schema.fieldsets.map(createTab)} /> // lazy loading\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nObjectWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  schema: PropTypes.object.isRequired,\n  errors: PropTypes.object,\n  value: PropTypes.object,\n  onChange: PropTypes.func.isRequired,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nObjectWidget.defaultProps = {\n  value: null,\n};\n\nexport default ObjectWidget;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}