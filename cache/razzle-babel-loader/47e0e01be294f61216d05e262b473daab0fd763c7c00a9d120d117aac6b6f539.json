{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport { flattenToAppURL } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\nimport { GET_DATA_FROM_PROVIDER } from '../constants';\nexport function getDataFromProvider(path, query = {}, data_query = [], hashValue = '_default') {\n  path = path && flattenToAppURL(path).replace(/\\/$/, '');\n  const db_version = window.env.RAZZLE_DB_VERSION || config.settings.db_version || 'latest';\n  const form = _objectSpread({\n    db_version\n  }, query);\n  return {\n    type: GET_DATA_FROM_PROVIDER,\n    path: path,\n    hashValue,\n    request: {\n      op: 'post',\n      path: `${path}/@connector-data`,\n      data: {\n        form,\n        data_query\n      }\n    }\n  };\n}","map":{"version":3,"names":["flattenToAppURL","config","GET_DATA_FROM_PROVIDER","getDataFromProvider","path","query","data_query","hashValue","replace","db_version","window","env","RAZZLE_DB_VERSION","settings","form","type","request","op","data"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-datablocks/src/actions/dataProvider.js"],"sourcesContent":["import { flattenToAppURL } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\nimport { GET_DATA_FROM_PROVIDER } from '../constants';\n\nexport function getDataFromProvider(\n  path,\n  query = {},\n  data_query = [],\n  hashValue = '_default',\n) {\n  path = path && flattenToAppURL(path).replace(/\\/$/, '');\n\n  const db_version =\n    window.env.RAZZLE_DB_VERSION || config.settings.db_version || 'latest';\n\n  const form = {\n    db_version,\n    ...query,\n  };\n\n  return {\n    type: GET_DATA_FROM_PROVIDER,\n    path: path,\n    hashValue,\n    request: {\n      op: 'post',\n      path: `${path}/@connector-data`,\n      data: {\n        form,\n        data_query,\n      },\n    },\n  };\n}\n"],"mappings":";;;AAAA,SAASA,eAAe,QAAQ,sBAAsB;AACtD,OAAOC,MAAM,MAAM,uBAAuB;AAC1C,SAASC,sBAAsB,QAAQ,cAAc;AAErD,OAAO,SAASC,mBAAmB,CACjCC,IAAI,EACJC,KAAK,GAAG,CAAC,CAAC,EACVC,UAAU,GAAG,EAAE,EACfC,SAAS,GAAG,UAAU,EACtB;EACAH,IAAI,GAAGA,IAAI,IAAIJ,eAAe,CAACI,IAAI,CAAC,CAACI,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC;EAEvD,MAAMC,UAAU,GACdC,MAAM,CAACC,GAAG,CAACC,iBAAiB,IAAIX,MAAM,CAACY,QAAQ,CAACJ,UAAU,IAAI,QAAQ;EAExE,MAAMK,IAAI;IACRL;EAAU,GACPJ,KAAK,CACT;EAED,OAAO;IACLU,IAAI,EAAEb,sBAAsB;IAC5BE,IAAI,EAAEA,IAAI;IACVG,SAAS;IACTS,OAAO,EAAE;MACPC,EAAE,EAAE,MAAM;MACVb,IAAI,EAAG,GAAEA,IAAK,kBAAiB;MAC/Bc,IAAI,EAAE;QACJJ,IAAI;QACJR;MACF;IACF;EACF,CAAC;AACH"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}