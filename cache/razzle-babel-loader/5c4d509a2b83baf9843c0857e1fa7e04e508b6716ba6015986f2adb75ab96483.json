{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-addons-forest/src/Portlets/PortletManagerRenderer.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getPortlets } from '../actions';\nimport config from '@plone/volto/registry';\nimport { normalize } from './utils';\nimport { getBaseUrl } from '@plone/volto/helpers';\nexport function renderPortlet(portlet, props) {\n  const portlets = config.settings.portlets;\n  const PortletRenderer = portlets.renderers[portlet['@type']] || portlets.renderers.default;\n  return __jsx(PortletRenderer, _extends({\n    portlet: portlet\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 10\n    }\n  }));\n}\nclass PortletManagerRenderer extends Component {\n  componentDidUpdate(prevProps, prevState) {\n    const url = getBaseUrl(this.props.pathname || '');\n    const prevUrl = getBaseUrl(prevProps.pathname || '');\n    if (this.props.pathname && prevUrl !== url) {\n      this.props.getPortlets(url, this.props.name);\n    }\n  }\n  render() {\n    const portlets = this.props.portletmanagers[this.props.name] || [];\n    return __jsx(\"div\", {\n      id: `portlets-${normalize(this.props.name)}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 7\n      }\n    }, portlets.map(portlet => __jsx(\"div\", {\n      className: \"portlet\",\n      key: portlet['@id'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }\n    }, renderPortlet(portlet))));\n  }\n}\nexport default connect((state, props) => ({\n  portletmanagers: state.portlets.managers\n}), {\n  getPortlets\n})(PortletManagerRenderer);","map":{"version":3,"names":["React","Component","connect","getPortlets","config","normalize","getBaseUrl","renderPortlet","portlet","props","portlets","settings","PortletRenderer","renderers","default","PortletManagerRenderer","componentDidUpdate","prevProps","prevState","url","pathname","prevUrl","name","render","portletmanagers","map","state","managers"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-addons-forest/src/Portlets/PortletManagerRenderer.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { getPortlets } from '../actions';\nimport config from '@plone/volto/registry';\nimport { normalize } from './utils';\nimport { getBaseUrl } from '@plone/volto/helpers';\n\nexport function renderPortlet(portlet, props) {\n  const portlets = config.settings.portlets;\n  const PortletRenderer =\n    portlets.renderers[portlet['@type']] || portlets.renderers.default;\n  return <PortletRenderer portlet={portlet} {...props} />;\n}\n\nclass PortletManagerRenderer extends Component {\n  componentDidUpdate(prevProps, prevState) {\n    const url = getBaseUrl(this.props.pathname || '');\n    const prevUrl = getBaseUrl(prevProps.pathname || '');\n    if (this.props.pathname && prevUrl !== url) {\n      this.props.getPortlets(url, this.props.name);\n    }\n  }\n\n  render() {\n    const portlets = this.props.portletmanagers[this.props.name] || [];\n    return (\n      <div id={`portlets-${normalize(this.props.name)}`}>\n        {portlets.map((portlet) => (\n          <div className=\"portlet\" key={portlet['@id']}>\n            {renderPortlet(portlet)}\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n\nexport default connect(\n  (state, props) => ({\n    portletmanagers: state.portlets.managers,\n  }),\n  {\n    getPortlets,\n  },\n)(PortletManagerRenderer);\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,WAAW,QAAQ,YAAY;AACxC,OAAOC,MAAM,MAAM,uBAAuB;AAC1C,SAASC,SAAS,QAAQ,SAAS;AACnC,SAASC,UAAU,QAAQ,sBAAsB;AAEjD,OAAO,SAASC,aAAa,CAACC,OAAO,EAAEC,KAAK,EAAE;EAC5C,MAAMC,QAAQ,GAAGN,MAAM,CAACO,QAAQ,CAACD,QAAQ;EACzC,MAAME,eAAe,GACnBF,QAAQ,CAACG,SAAS,CAACL,OAAO,CAAC,OAAO,CAAC,CAAC,IAAIE,QAAQ,CAACG,SAAS,CAACC,OAAO;EACpE,OAAO,MAAC,eAAe;IAAC,OAAO,EAAEN;EAAQ,GAAKC,KAAK;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAI;AACzD;AAEA,MAAMM,sBAAsB,SAASd,SAAS,CAAC;EAC7Ce,kBAAkB,CAACC,SAAS,EAAEC,SAAS,EAAE;IACvC,MAAMC,GAAG,GAAGb,UAAU,CAAC,IAAI,CAACG,KAAK,CAACW,QAAQ,IAAI,EAAE,CAAC;IACjD,MAAMC,OAAO,GAAGf,UAAU,CAACW,SAAS,CAACG,QAAQ,IAAI,EAAE,CAAC;IACpD,IAAI,IAAI,CAACX,KAAK,CAACW,QAAQ,IAAIC,OAAO,KAAKF,GAAG,EAAE;MAC1C,IAAI,CAACV,KAAK,CAACN,WAAW,CAACgB,GAAG,EAAE,IAAI,CAACV,KAAK,CAACa,IAAI,CAAC;IAC9C;EACF;EAEAC,MAAM,GAAG;IACP,MAAMb,QAAQ,GAAG,IAAI,CAACD,KAAK,CAACe,eAAe,CAAC,IAAI,CAACf,KAAK,CAACa,IAAI,CAAC,IAAI,EAAE;IAClE,OACE;MAAK,EAAE,EAAG,YAAWjB,SAAS,CAAC,IAAI,CAACI,KAAK,CAACa,IAAI,CAAE,EAAE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAC/CZ,QAAQ,CAACe,GAAG,CAAEjB,OAAO,IACpB;MAAK,SAAS,EAAC,SAAS;MAAC,GAAG,EAAEA,OAAO,CAAC,KAAK,CAAE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAC1CD,aAAa,CAACC,OAAO,CAAC,CAE1B,CAAC,CACE;EAEV;AACF;AAEA,eAAeN,OAAO,CACpB,CAACwB,KAAK,EAAEjB,KAAK,MAAM;EACjBe,eAAe,EAAEE,KAAK,CAAChB,QAAQ,CAACiB;AAClC,CAAC,CAAC,EACF;EACExB;AACF,CAAC,CACF,CAACY,sBAAsB,CAAC"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}