{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/theme/View/EventView.jsx\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n/**\n * EventView view component.\n * @module components/theme/View/EventView\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { hasBlocksData, flattenHTMLToAppURL } from '@plone/volto/helpers';\nimport { Image, Grid } from 'semantic-ui-react';\nimport RenderBlocks from '@plone/volto/components/theme/View/RenderBlocks';\nimport { EventDetails } from '@plone/volto/components';\nconst EventTextfieldView = ({\n  content\n}) => __jsx(React.Fragment, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 3\n  }\n}, content.title && __jsx(\"h1\", {\n  className: \"documentFirstHeading\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 23\n  }\n}, content.title), content.description && __jsx(\"p\", {\n  className: \"documentDescription\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 7\n  }\n}, content.description), content.image && __jsx(Image, {\n  className: \"document-image\",\n  src: content.image.scales.thumb.download,\n  floated: \"right\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 7\n  }\n}), content.text && __jsx(\"div\", {\n  dangerouslySetInnerHTML: {\n    __html: flattenHTMLToAppURL(content.text.data)\n  },\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 7\n  }\n}));\n\n/**\n * EventView view component class.\n * @function EventView\n * @params {object} content Content object.\n * @returns {string} Markup of the component.\n */\nconst EventView = props => {\n  const {\n    content\n  } = props;\n  return __jsx(\"div\", {\n    id: \"page-document\",\n    className: \"ui container viewwrapper event-view\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, __jsx(Grid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, __jsx(Grid.Column, {\n    width: 7,\n    className: \"mobile hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, hasBlocksData(content) ? __jsx(RenderBlocks, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  })) : __jsx(EventTextfieldView, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }))), __jsx(Grid.Column, {\n    width: 5,\n    className: \"mobile hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, __jsx(EventDetails, {\n    content: content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  })), __jsx(Grid.Column, {\n    width: 12,\n    only: \"mobile\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, hasBlocksData(content) ? __jsx(React.Fragment, null, __jsx(RenderBlocks, _extends({}, props, {\n    content: _objectSpread(_objectSpread({}, content), {}, {\n      blocks_layout: {\n        items: props.content.blocks_layout.items.slice(0, 1)\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 15\n    }\n  })), __jsx(EventDetails, {\n    content: content,\n    display_as: \"div\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 15\n    }\n  }), __jsx(RenderBlocks, _extends({}, props, {\n    content: _objectSpread(_objectSpread({}, content), {}, {\n      blocks_layout: {\n        items: props.content.blocks_layout.items.slice(1)\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 15\n    }\n  }))) : __jsx(EventTextfieldView, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  })))));\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nEventView.propTypes = {\n  content: PropTypes.shape({\n    title: PropTypes.string,\n    description: PropTypes.string,\n    text: PropTypes.shape({\n      data: PropTypes.string\n    }),\n    attendees: PropTypes.arrayOf(PropTypes.string).isRequired,\n    contact_email: PropTypes.string,\n    contact_name: PropTypes.string,\n    contact_phone: PropTypes.string,\n    end: PropTypes.string.isRequired,\n    event_url: PropTypes.string,\n    location: PropTypes.string,\n    open_end: PropTypes.bool,\n    recurrence: PropTypes.any,\n    start: PropTypes.string.isRequired,\n    subjects: PropTypes.arrayOf(PropTypes.string).isRequired,\n    whole_day: PropTypes.bool\n  }).isRequired\n};\nexport default EventView;","map":{"version":3,"names":["React","PropTypes","hasBlocksData","flattenHTMLToAppURL","Image","Grid","RenderBlocks","EventDetails","EventTextfieldView","content","title","description","image","scales","thumb","download","text","__html","data","EventView","props","blocks_layout","items","slice","propTypes","shape","string","attendees","arrayOf","isRequired","contact_email","contact_name","contact_phone","end","event_url","location","open_end","bool","recurrence","any","start","subjects","whole_day"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/theme/View/EventView.jsx"],"sourcesContent":["/**\n * EventView view component.\n * @module components/theme/View/EventView\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { hasBlocksData, flattenHTMLToAppURL } from '@plone/volto/helpers';\nimport { Image, Grid } from 'semantic-ui-react';\nimport RenderBlocks from '@plone/volto/components/theme/View/RenderBlocks';\nimport { EventDetails } from '@plone/volto/components';\n\nconst EventTextfieldView = ({ content }) => (\n  <React.Fragment>\n    {content.title && <h1 className=\"documentFirstHeading\">{content.title}</h1>}\n    {content.description && (\n      <p className=\"documentDescription\">{content.description}</p>\n    )}\n    {content.image && (\n      <Image\n        className=\"document-image\"\n        src={content.image.scales.thumb.download}\n        floated=\"right\"\n      />\n    )}\n    {content.text && (\n      <div\n        dangerouslySetInnerHTML={{\n          __html: flattenHTMLToAppURL(content.text.data),\n        }}\n      />\n    )}\n  </React.Fragment>\n);\n\n/**\n * EventView view component class.\n * @function EventView\n * @params {object} content Content object.\n * @returns {string} Markup of the component.\n */\nconst EventView = (props) => {\n  const { content } = props;\n\n  return (\n    <div id=\"page-document\" className=\"ui container viewwrapper event-view\">\n      <Grid>\n        <Grid.Column width={7} className=\"mobile hidden\">\n          {hasBlocksData(content) ? (\n            <RenderBlocks {...props} />\n          ) : (\n            <EventTextfieldView {...props} />\n          )}\n        </Grid.Column>\n        <Grid.Column width={5} className=\"mobile hidden\">\n          <EventDetails content={content} />\n        </Grid.Column>\n        <Grid.Column width={12} only=\"mobile\">\n          {hasBlocksData(content) ? (\n            <>\n              <RenderBlocks\n                {...props}\n                content={{\n                  ...content,\n                  blocks_layout: {\n                    items: props.content.blocks_layout.items.slice(0, 1),\n                  },\n                }}\n              />\n              <EventDetails content={content} display_as=\"div\" />\n              <RenderBlocks\n                {...props}\n                content={{\n                  ...content,\n                  blocks_layout: {\n                    items: props.content.blocks_layout.items.slice(1),\n                  },\n                }}\n              />\n            </>\n          ) : (\n            <EventTextfieldView {...props} />\n          )}\n        </Grid.Column>\n      </Grid>\n    </div>\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nEventView.propTypes = {\n  content: PropTypes.shape({\n    title: PropTypes.string,\n    description: PropTypes.string,\n    text: PropTypes.shape({\n      data: PropTypes.string,\n    }),\n    attendees: PropTypes.arrayOf(PropTypes.string).isRequired,\n    contact_email: PropTypes.string,\n    contact_name: PropTypes.string,\n    contact_phone: PropTypes.string,\n    end: PropTypes.string.isRequired,\n    event_url: PropTypes.string,\n    location: PropTypes.string,\n    open_end: PropTypes.bool,\n    recurrence: PropTypes.any,\n    start: PropTypes.string.isRequired,\n    subjects: PropTypes.arrayOf(PropTypes.string).isRequired,\n    whole_day: PropTypes.bool,\n  }).isRequired,\n};\n\nexport default EventView;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}