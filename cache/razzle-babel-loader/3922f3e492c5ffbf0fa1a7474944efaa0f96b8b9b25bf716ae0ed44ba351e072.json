{"ast":null,"code":"import { base_layers } from '../../constants';\nconst BaseLayerSchema = {\n  title: 'Base Layer',\n  fieldsets: [{\n    id: 'base',\n    title: 'Base Layer',\n    fields: ['base_layer']\n  }],\n  properties: {\n    base_layer: {\n      title: 'Base Layer',\n      choices: base_layers\n    }\n  },\n  required: []\n};\nconst LayerSchema = {\n  title: 'Layer',\n  fieldsets: [{\n    id: 'default',\n    title: 'Layer',\n    fields: ['map_layer']\n  }],\n  properties: {\n    map_layer: {\n      title: 'Map layer configuration',\n      widget: 'map_layers_widget'\n    }\n  },\n  required: []\n};\nconst MapLayersSchema = {\n  title: 'Map Layers',\n  fieldsets: [{\n    id: 'default',\n    title: 'Map Data',\n    fields: ['map_layers']\n  }],\n  properties: {\n    map_layers: {\n      title: 'Map Layers',\n      description: 'Add/Edit Map Layers',\n      widget: 'object_list',\n      schema: LayerSchema\n    }\n  },\n  required: []\n};\nconst GeneralSchema = ({\n  data = {}\n}) => {\n  var _data$map_data, _data$map_data$genera;\n  const centerOnExtent = data === null || data === void 0 ? void 0 : (_data$map_data = data.map_data) === null || _data$map_data === void 0 ? void 0 : (_data$map_data$genera = _data$map_data.general) === null || _data$map_data$genera === void 0 ? void 0 : _data$map_data$genera.centerOnExtent;\n  return {\n    title: 'General',\n    fieldsets: [{\n      id: 'default',\n      title: 'Zoom',\n      fields: ['print_position', 'zoom_position', 'centerOnExtent', ...(!centerOnExtent ? ['zoom_level', 'long', 'lat'] : [])]\n    }],\n    properties: {\n      centerOnExtent: {\n        title: 'Center on extent',\n        type: 'boolean',\n        description: 'This will override latitude/longitude/zoom level and will lock zoom/moving the map.'\n      },\n      zoom_position: {\n        title: 'Zoom position',\n        choices: ['bottom-right', 'bottom-left', 'top-right', 'top-left'].map(n => {\n          return [n, n];\n        })\n      },\n      zoom_level: {\n        title: 'Zoom level',\n        type: 'number'\n      },\n      long: {\n        title: 'Longitude',\n        type: 'number'\n      },\n      lat: {\n        title: 'Latitude',\n        type: 'number'\n      },\n      print_position: {\n        title: 'Print position',\n        choices: ['bottom-right', 'bottom-left', 'top-right', 'top-left'].map(n => {\n          return [n, n];\n        })\n      }\n    },\n    required: []\n  };\n};\nexport default (({\n  data = {}\n}) => {\n  const generalSchema = GeneralSchema({\n    data\n  });\n  return {\n    title: 'Map Editor',\n    fieldsets: [{\n      id: 'default',\n      title: 'Map Editor Sections',\n      fields: ['map_data']\n    }],\n    properties: {\n      map_data: {\n        title: 'Panels',\n        widget: 'object_types_widget',\n        schemas: [{\n          id: 'general',\n          schema: generalSchema\n        }, {\n          id: 'base',\n          schema: BaseLayerSchema\n        }, {\n          id: 'layers',\n          schema: MapLayersSchema\n        }]\n      }\n    },\n    required: []\n  };\n});","map":{"version":3,"names":["base_layers","BaseLayerSchema","title","fieldsets","id","fields","properties","base_layer","choices","required","LayerSchema","map_layer","widget","MapLayersSchema","map_layers","description","schema","GeneralSchema","data","centerOnExtent","map_data","general","type","zoom_position","map","n","zoom_level","long","lat","print_position","generalSchema","schemas"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-eea-map/src/components/widgets/panelsSchema.js"],"sourcesContent":["import { base_layers } from '../../constants';\n\nconst BaseLayerSchema = {\n  title: 'Base Layer',\n  fieldsets: [\n    {\n      id: 'base',\n      title: 'Base Layer',\n      fields: ['base_layer'],\n    },\n  ],\n  properties: {\n    base_layer: {\n      title: 'Base Layer',\n      choices: base_layers,\n    },\n  },\n  required: [],\n};\n\nconst LayerSchema = {\n  title: 'Layer',\n  fieldsets: [\n    {\n      id: 'default',\n      title: 'Layer',\n      fields: ['map_layer'],\n    },\n  ],\n  properties: {\n    map_layer: {\n      title: 'Map layer configuration',\n      widget: 'map_layers_widget',\n    },\n  },\n  required: [],\n};\n\nconst MapLayersSchema = {\n  title: 'Map Layers',\n  fieldsets: [\n    {\n      id: 'default',\n      title: 'Map Data',\n      fields: ['map_layers'],\n    },\n  ],\n  properties: {\n    map_layers: {\n      title: 'Map Layers',\n      description: 'Add/Edit Map Layers',\n      widget: 'object_list',\n      schema: LayerSchema,\n    },\n  },\n  required: [],\n};\n\nconst GeneralSchema = ({ data = {} }) => {\n  const centerOnExtent = data?.map_data?.general?.centerOnExtent;\n\n  return {\n    title: 'General',\n    fieldsets: [\n      {\n        id: 'default',\n        title: 'Zoom',\n        fields: [\n          'print_position',\n          'zoom_position',\n          'centerOnExtent',\n          ...(!centerOnExtent ? ['zoom_level', 'long', 'lat'] : []),\n        ],\n      },\n    ],\n    properties: {\n      centerOnExtent: {\n        title: 'Center on extent',\n        type: 'boolean',\n        description:\n          'This will override latitude/longitude/zoom level and will lock zoom/moving the map.',\n      },\n      zoom_position: {\n        title: 'Zoom position',\n        choices: ['bottom-right', 'bottom-left', 'top-right', 'top-left'].map(\n          (n) => {\n            return [n, n];\n          },\n        ),\n      },\n      zoom_level: {\n        title: 'Zoom level',\n        type: 'number',\n      },\n      long: {\n        title: 'Longitude',\n        type: 'number',\n      },\n      lat: {\n        title: 'Latitude',\n        type: 'number',\n      },\n\n      print_position: {\n        title: 'Print position',\n        choices: ['bottom-right', 'bottom-left', 'top-right', 'top-left'].map(\n          (n) => {\n            return [n, n];\n          },\n        ),\n      },\n    },\n    required: [],\n  };\n};\n\nexport default ({ data = {} }) => {\n  const generalSchema = GeneralSchema({ data });\n\n  return {\n    title: 'Map Editor',\n    fieldsets: [\n      {\n        id: 'default',\n        title: 'Map Editor Sections',\n        fields: ['map_data'],\n      },\n    ],\n    properties: {\n      map_data: {\n        title: 'Panels',\n        widget: 'object_types_widget',\n        schemas: [\n          {\n            id: 'general',\n            schema: generalSchema,\n          },\n          {\n            id: 'base',\n            schema: BaseLayerSchema,\n          },\n          {\n            id: 'layers',\n            schema: MapLayersSchema,\n          },\n        ],\n      },\n    },\n    required: [],\n  };\n};\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}