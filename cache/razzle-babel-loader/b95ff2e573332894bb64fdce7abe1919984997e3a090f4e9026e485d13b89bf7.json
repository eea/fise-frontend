{"ast":null,"code":"import { updateIntl } from 'react-intl-redux';\nimport { normalizeLanguageName, getCookieOptions } from '@plone/volto/helpers';\nimport Cookies from 'universal-cookie';\nexport function changeLanguageCookies(language, req) {\n  var _req$protocol;\n  const cookies = new Cookies();\n  const cookieOptions = getCookieOptions({\n    secure: req !== null && req !== void 0 && (_req$protocol = req.protocol) !== null && _req$protocol !== void 0 && _req$protocol.startsWith('https') ? true : false\n  });\n  if (!req) {\n    cookies.set('I18N_LANGUAGE', normalizeLanguageName(language) || '', cookieOptions);\n  } else {\n    req.universalCookies.set('I18N_LANGUAGE', normalizeLanguageName(language) || '', cookieOptions);\n  }\n}\n\n/**\n * Changes current language using react-intl-redux action and setting the cookie\n * @function changeLanguage\n * @param {string} language target language.\n * @param {number} locale set of locales corresponding the target language.\n * @returns {Object} Change the target language action.\n */\nexport function changeLanguage(language, locale, req) {\n  changeLanguageCookies(language, req);\n  return updateIntl({\n    locale: language,\n    messages: locale\n  });\n}","map":{"version":3,"names":["updateIntl","normalizeLanguageName","getCookieOptions","Cookies","changeLanguageCookies","language","req","cookies","cookieOptions","secure","protocol","startsWith","set","universalCookies","changeLanguage","locale","messages"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/actions/language/language.js"],"sourcesContent":["import { updateIntl } from 'react-intl-redux';\nimport { normalizeLanguageName, getCookieOptions } from '@plone/volto/helpers';\nimport Cookies from 'universal-cookie';\n\nexport function changeLanguageCookies(language, req) {\n  const cookies = new Cookies();\n\n  const cookieOptions = getCookieOptions({\n    secure: req?.protocol?.startsWith('https') ? true : false,\n  });\n\n  if (!req) {\n    cookies.set(\n      'I18N_LANGUAGE',\n      normalizeLanguageName(language) || '',\n      cookieOptions,\n    );\n  } else {\n    req.universalCookies.set(\n      'I18N_LANGUAGE',\n      normalizeLanguageName(language) || '',\n      cookieOptions,\n    );\n  }\n}\n\n/**\n * Changes current language using react-intl-redux action and setting the cookie\n * @function changeLanguage\n * @param {string} language target language.\n * @param {number} locale set of locales corresponding the target language.\n * @returns {Object} Change the target language action.\n */\nexport function changeLanguage(language, locale, req) {\n  changeLanguageCookies(language, req);\n\n  return updateIntl({\n    locale: language,\n    messages: locale,\n  });\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,qBAAqB,EAAEC,gBAAgB,QAAQ,sBAAsB;AAC9E,OAAOC,OAAO,MAAM,kBAAkB;AAEtC,OAAO,SAASC,qBAAqB,CAACC,QAAQ,EAAEC,GAAG,EAAE;EAAA;EACnD,MAAMC,OAAO,GAAG,IAAIJ,OAAO,EAAE;EAE7B,MAAMK,aAAa,GAAGN,gBAAgB,CAAC;IACrCO,MAAM,EAAEH,GAAG,aAAHA,GAAG,gCAAHA,GAAG,CAAEI,QAAQ,0CAAb,cAAeC,UAAU,CAAC,OAAO,CAAC,GAAG,IAAI,GAAG;EACtD,CAAC,CAAC;EAEF,IAAI,CAACL,GAAG,EAAE;IACRC,OAAO,CAACK,GAAG,CACT,eAAe,EACfX,qBAAqB,CAACI,QAAQ,CAAC,IAAI,EAAE,EACrCG,aAAa,CACd;EACH,CAAC,MAAM;IACLF,GAAG,CAACO,gBAAgB,CAACD,GAAG,CACtB,eAAe,EACfX,qBAAqB,CAACI,QAAQ,CAAC,IAAI,EAAE,EACrCG,aAAa,CACd;EACH;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASM,cAAc,CAACT,QAAQ,EAAEU,MAAM,EAAET,GAAG,EAAE;EACpDF,qBAAqB,CAACC,QAAQ,EAAEC,GAAG,CAAC;EAEpC,OAAON,UAAU,CAAC;IAChBe,MAAM,EAAEV,QAAQ;IAChBW,QAAQ,EAAED;EACZ,CAAC,CAAC;AACJ"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}