{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/volto-slate/src/blocks/Text/DetachedTextBlockEditor.jsx\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport React from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { useInView } from 'react-intersection-observer';\nimport { SlateEditor } from 'volto-slate/editor';\nimport { serializeNodesToText } from 'volto-slate/editor/render';\nimport { handleKeyDetached } from './keyboard';\nconst DEBUG = false;\nconst messages = defineMessages({\n  text: {\n    \"id\": \"Type text\\u2026\",\n    \"defaultMessage\": \"Type text\\u2026\"\n  }\n});\nexport const DetachedTextBlockEditor = props => {\n  var _data$instructions;\n  const {\n    data,\n    index,\n    properties,\n    onSelectBlock,\n    onChangeBlock,\n    block,\n    selected,\n    formTitle,\n    formDescription\n  } = props;\n  const {\n    value\n  } = data;\n  const intl = useIntl();\n  const placeholder = data.placeholder || formTitle || intl.formatMessage(messages.text);\n  let instructions = (data === null || data === void 0 ? void 0 : (_data$instructions = data.instructions) === null || _data$instructions === void 0 ? void 0 : _data$instructions.data) || (data === null || data === void 0 ? void 0 : data.instructions);\n  if (!instructions || instructions === '<p><br/></p>') {\n    instructions = formDescription;\n  }\n  const {\n    ref,\n    inView\n  } = useInView({\n    threshold: 0,\n    rootMargin: '0px 0px 200px 0px'\n  });\n  return __jsx(\"div\", {\n    className: \"text-slate-editor-inner detached-slate-editor\",\n    ref: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, __jsx(SlateEditor, {\n    index: index,\n    readOnly: !inView,\n    properties: properties,\n    renderExtensions: [],\n    value: value,\n    block: block /* is this needed? */,\n    debug: DEBUG,\n    onFocus: () => {\n      if (!selected) {\n        onSelectBlock(block);\n      }\n    },\n    onChange: (value, selection, editor) => {\n      onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n        value,\n        plaintext: serializeNodesToText(value || [])\n        // TODO: also add html serialized value\n      }));\n    },\n\n    selected: selected,\n    placeholder: placeholder,\n    onKeyDown: handleKeyDetached,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }));\n};\nexport default DetachedTextBlockEditor;","map":{"version":3,"names":["React","defineMessages","useIntl","useInView","SlateEditor","serializeNodesToText","handleKeyDetached","DEBUG","messages","text","DetachedTextBlockEditor","props","data","index","properties","onSelectBlock","onChangeBlock","block","selected","formTitle","formDescription","value","intl","placeholder","formatMessage","instructions","ref","inView","threshold","rootMargin","selection","editor","plaintext"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/volto-slate/src/blocks/Text/DetachedTextBlockEditor.jsx"],"sourcesContent":["import React from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { useInView } from 'react-intersection-observer';\nimport { SlateEditor } from 'volto-slate/editor';\nimport { serializeNodesToText } from 'volto-slate/editor/render';\nimport { handleKeyDetached } from './keyboard';\n\nconst DEBUG = false;\n\nconst messages = defineMessages({\n  text: {\n    id: 'Type text…',\n    defaultMessage: 'Type text…',\n  },\n});\n\nexport const DetachedTextBlockEditor = (props) => {\n  const {\n    data,\n    index,\n    properties,\n    onSelectBlock,\n    onChangeBlock,\n    block,\n    selected,\n    formTitle,\n    formDescription,\n  } = props;\n  const { value } = data;\n\n  const intl = useIntl();\n  const placeholder =\n    data.placeholder || formTitle || intl.formatMessage(messages.text);\n  let instructions = data?.instructions?.data || data?.instructions;\n  if (!instructions || instructions === '<p><br/></p>') {\n    instructions = formDescription;\n  }\n\n  const { ref, inView } = useInView({\n    threshold: 0,\n    rootMargin: '0px 0px 200px 0px',\n  });\n\n  return (\n    <div className=\"text-slate-editor-inner detached-slate-editor\" ref={ref}>\n      <SlateEditor\n        index={index}\n        readOnly={!inView}\n        properties={properties}\n        renderExtensions={[]}\n        value={value}\n        block={block /* is this needed? */}\n        debug={DEBUG}\n        onFocus={() => {\n          if (!selected) {\n            onSelectBlock(block);\n          }\n        }}\n        onChange={(value, selection, editor) => {\n          onChangeBlock(block, {\n            ...data,\n            value,\n            plaintext: serializeNodesToText(value || []),\n            // TODO: also add html serialized value\n          });\n        }}\n        selected={selected}\n        placeholder={placeholder}\n        onKeyDown={handleKeyDetached}\n      />\n    </div>\n  );\n};\n\nexport default DetachedTextBlockEditor;\n"],"mappings":";;;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,cAAc,EAAEC,OAAO,QAAQ,YAAY;AACpD,SAASC,SAAS,QAAQ,6BAA6B;AACvD,SAASC,WAAW,QAAQ,oBAAoB;AAChD,SAASC,oBAAoB,QAAQ,2BAA2B;AAChE,SAASC,iBAAiB,QAAQ,YAAY;AAE9C,MAAMC,KAAK,GAAG,KAAK;AAEnB,MAAMC,QAAQ,GAAGP,cAAc,CAAC;EAC9BQ,IAAI;IAAA;IAAA;EAAA;AAIN,CAAC,CAAC;AAEF,OAAO,MAAMC,uBAAuB,GAAIC,KAAK,IAAK;EAAA;EAChD,MAAM;IACJC,IAAI;IACJC,KAAK;IACLC,UAAU;IACVC,aAAa;IACbC,aAAa;IACbC,KAAK;IACLC,QAAQ;IACRC,SAAS;IACTC;EACF,CAAC,GAAGT,KAAK;EACT,MAAM;IAAEU;EAAM,CAAC,GAAGT,IAAI;EAEtB,MAAMU,IAAI,GAAGpB,OAAO,EAAE;EACtB,MAAMqB,WAAW,GACfX,IAAI,CAACW,WAAW,IAAIJ,SAAS,IAAIG,IAAI,CAACE,aAAa,CAAChB,QAAQ,CAACC,IAAI,CAAC;EACpE,IAAIgB,YAAY,GAAG,CAAAb,IAAI,aAAJA,IAAI,6CAAJA,IAAI,CAAEa,YAAY,uDAAlB,mBAAoBb,IAAI,MAAIA,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEa,YAAY;EACjE,IAAI,CAACA,YAAY,IAAIA,YAAY,KAAK,cAAc,EAAE;IACpDA,YAAY,GAAGL,eAAe;EAChC;EAEA,MAAM;IAAEM,GAAG;IAAEC;EAAO,CAAC,GAAGxB,SAAS,CAAC;IAChCyB,SAAS,EAAE,CAAC;IACZC,UAAU,EAAE;EACd,CAAC,CAAC;EAEF,OACE;IAAK,SAAS,EAAC,+CAA+C;IAAC,GAAG,EAAEH,GAAI;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACtE,MAAC,WAAW;IACV,KAAK,EAAEb,KAAM;IACb,QAAQ,EAAE,CAACc,MAAO;IAClB,UAAU,EAAEb,UAAW;IACvB,gBAAgB,EAAE,EAAG;IACrB,KAAK,EAAEO,KAAM;IACb,KAAK,EAAEJ,KAAK,CAAC,qBAAsB;IACnC,KAAK,EAAEV,KAAM;IACb,OAAO,EAAE,MAAM;MACb,IAAI,CAACW,QAAQ,EAAE;QACbH,aAAa,CAACE,KAAK,CAAC;MACtB;IACF,CAAE;IACF,QAAQ,EAAE,CAACI,KAAK,EAAES,SAAS,EAAEC,MAAM,KAAK;MACtCf,aAAa,CAACC,KAAK,kCACdL,IAAI;QACPS,KAAK;QACLW,SAAS,EAAE3B,oBAAoB,CAACgB,KAAK,IAAI,EAAE;QAC3C;MAAA,GACA;IACJ,CAAE;;IACF,QAAQ,EAAEH,QAAS;IACnB,WAAW,EAAEK,WAAY;IACzB,SAAS,EAAEjB,iBAAkB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAC7B,CACE;AAEV,CAAC;AAED,eAAeI,uBAAuB"},"metadata":{"react-intl":{"messages":[{"id":"Type text…","defaultMessage":"Type text…"}]}},"sourceType":"module","externalDependencies":[]}