{"ast":null,"code":"import _toConsumableArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Aliases/Aliases.jsx\";\nvar __jsx = React.createElement;\n/**\n * Aliases container.\n * @module components/manage/Aliases/Aliases\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from '@plone/volto/helpers';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { Portal } from 'react-portal';\nimport { Button, Checkbox, Container, Form, Header, Input, Segment } from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport { removeAliases, addAliases, getAliases } from '@plone/volto/actions';\nimport { Icon, Toolbar } from '@plone/volto/components';\nimport backSVG from '@plone/volto/icons/back.svg';\nimport { getBaseUrl } from '@plone/volto/helpers';\nimport { toast } from 'react-toastify';\nimport { Toast } from '@plone/volto/components';\nvar messages = defineMessages({\n  back: {\n    \"id\": \"Back\",\n    \"defaultMessage\": \"Back\"\n  },\n  aliases: {\n    \"id\": \"URL Management\",\n    \"defaultMessage\": \"URL Management\"\n  },\n  success: {\n    \"id\": \"Success\",\n    \"defaultMessage\": \"Success\"\n  },\n  successAdd: {\n    \"id\": \"Alias has been added\",\n    \"defaultMessage\": \"Alias has been added\"\n  }\n});\n\n/**\n * Aliases class.\n * @class Aliases\n * @extends Component\n */\nvar Aliases = /*#__PURE__*/function (_Component) {\n  _inherits(Aliases, _Component);\n  var _super = _createSuper(Aliases);\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Aliases\n   */\n  function Aliases(props) {\n    var _this;\n    _classCallCheck(this, Aliases);\n    _this = _super.call(this, props);\n    _this.state = {\n      isClient: false,\n      newAlias: '',\n      isAliasCorrect: false,\n      isAliasAlready: false,\n      aliasesToRemove: []\n    };\n    return _this;\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  _createClass(Aliases, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.getAliases(getBaseUrl(this.props.pathname), {\n        query: '',\n        manual: '',\n        datetime: '',\n        batchSize: ''\n      });\n      this.setState({\n        isClient: true\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this2 = this;\n      if (prevState.newAlias !== this.state.newAlias) {\n        var _this$props$aliases;\n        if (this.state.newAlias.charAt(0) === '/') {\n          this.setState({\n            isAliasCorrect: true\n          });\n        } else {\n          this.setState({\n            isAliasCorrect: false\n          });\n        }\n        if ((_this$props$aliases = this.props.aliases) !== null && _this$props$aliases !== void 0 && _this$props$aliases.items.find(function (item) {\n          return item.path === _this2.state.newAlias;\n        })) {\n          this.setState({\n            isAliasAlready: true\n          });\n        } else {\n          this.setState({\n            isAliasAlready: false\n          });\n        }\n      }\n    }\n\n    /**\n     * Component will receive props\n     * @method componentWillReceiveProps\n     * @param {Object} nextProps Next properties\n     * @returns {undefined}\n     */\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      if (this.props.aliases.add.loading && nextProps.aliases.add.loaded) {\n        if (nextProps.aliases.add.error) {\n          this.setState({\n            isAliasAlready: true\n          });\n        } else {\n          this.setState({\n            isAliasAlready: false\n          });\n          toast.success(__jsx(Toast, {\n            success: true,\n            title: this.props.intl.formatMessage(messages.success),\n            content: this.props.intl.formatMessage(messages.successAdd),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 11\n            }\n          }));\n        }\n        this.props.getAliases(getBaseUrl(this.props.pathname), {\n          query: '',\n          manual: '',\n          datetime: '',\n          batchSize: ''\n        });\n      }\n      if (this.props.aliases.remove.loading && nextProps.aliases.remove.loaded) {\n        this.props.getAliases(getBaseUrl(this.props.pathname), {\n          query: '',\n          manual: '',\n          datetime: '',\n          batchSize: ''\n        });\n      }\n    }\n\n    /**\n     * Url change handler\n     * @method handleAltChange\n     * @returns {undefined}\n     */\n  }, {\n    key: \"handleAltChange\",\n    value: function handleAltChange(val) {\n      this.setState({\n        newAlias: val\n      });\n    }\n\n    /**\n     * New alias submit handler\n     * @method handleSubmitAlias\n     * @returns {undefined}\n     */\n  }, {\n    key: \"handleSubmitAlias\",\n    value: function handleSubmitAlias() {\n      if (this.state.isAliasCorrect) {\n        this.props.addAliases(getBaseUrl(this.props.pathname), {\n          items: this.state.newAlias\n        });\n        this.setState({\n          newAlias: ''\n        });\n      }\n    }\n\n    /**\n     * Check to-remove aliases handler\n     * @method handleSubmitAlias\n     * @returns {undefined}\n     */\n  }, {\n    key: \"handleCheckAlias\",\n    value: function handleCheckAlias(alias) {\n      var aliases = this.state.aliasesToRemove;\n      if (aliases.includes(alias)) {\n        var index = aliases.indexOf(alias);\n        if (index > -1) {\n          var newAliasesArr = aliases;\n          newAliasesArr.splice(index, 1);\n          this.setState({\n            aliasesToRemove: newAliasesArr\n          });\n        }\n      } else {\n        this.setState({\n          aliasesToRemove: [].concat(_toConsumableArray(this.state.aliasesToRemove), [alias])\n        });\n      }\n    }\n\n    /**\n     * Remove aliases handler\n     * @method handleRemoveAliases\n     * @returns {undefined}\n     */\n  }, {\n    key: \"handleRemoveAliases\",\n    value: function handleRemoveAliases() {\n      this.props.removeAliases(getBaseUrl(this.props.pathname), {\n        items: this.state.aliasesToRemove\n      });\n      this.setState({\n        aliasesToRemove: []\n      });\n    }\n\n    /**\n     * Render method.\n     * @method render\n     * @returns {string} Markup for the component.\n     */\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this,\n        _this$props$aliases2;\n      return __jsx(Container, {\n        id: \"aliases\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 7\n        }\n      }, __jsx(Helmet, {\n        title: this.props.intl.formatMessage(messages.aliases),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 9\n        }\n      }), __jsx(Segment.Group, {\n        raised: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 9\n        }\n      }, __jsx(Segment, {\n        className: \"primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"URL Management for {title}\",\n        defaultMessage: \"URL Management for {title}\",\n        values: {\n          title: __jsx(\"q\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 228,\n              columnNumber: 32\n            }\n          }, this.props.title)\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }\n      })), __jsx(Segment, {\n        secondary: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"Using this form, you can manage alternative urls for an item. This is an easy way to make an item available under two different URLs.\",\n        defaultMessage: \"Using this form, you can manage alternative urls for an item. This is an easy way to make an item available under two different URLs.\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 13\n        }\n      })), __jsx(Form, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 11\n        }\n      }, __jsx(Segment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 13\n        }\n      }, __jsx(Header, {\n        size: \"medium\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 15\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"Add a new alternative url\",\n        defaultMessage: \"Add a new alternative url\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 17\n        }\n      })), __jsx(\"p\", {\n        className: \"help\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 15\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"Enter the absolute path where the alternative url should exist. The path must start with '/'. Only urls that result in a 404 not found page will result in a redirect occurring.\",\n        defaultMessage: \"Enter the absolute path where the alternative url should exist. The path must start with '/'. Only urls that result in a 404 not found page will result in a redirect occurring.\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 17\n        }\n      })), __jsx(Form.Field, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 15\n        }\n      }, __jsx(Input, {\n        id: \"alternative-url-input\",\n        name: \"alternative-url\",\n        placeholder: \"/example\",\n        value: this.state.newAlias,\n        onChange: function onChange(e) {\n          return _this3.handleAltChange(e.target.value);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 17\n        }\n      }), !this.state.isAliasCorrect && this.state.newAlias !== '' && __jsx(\"p\", {\n        style: {\n          color: 'red'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 19\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"Alternative url path must start with a slash.\",\n        defaultMessage: \"Alternative url path must start with a slash.\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 21\n        }\n      })), this.state.isAliasAlready && __jsx(\"p\", {\n        style: {\n          color: 'red'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 19\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"The provided alternative url already exists!\",\n        defaultMessage: \"The provided alternative url already exists!\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 21\n        }\n      }))), __jsx(Button, {\n        id: \"submit-alias\",\n        primary: true,\n        onClick: function onClick() {\n          return _this3.handleSubmitAlias();\n        },\n        disabled: !this.state.isAliasCorrect || this.state.newAlias === '' || this.state.isAliasAlready,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 15\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"Add\",\n        defaultMessage: \"Add\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 17\n        }\n      })))), __jsx(Form, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 11\n        }\n      }, __jsx(Segment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 13\n        }\n      }, __jsx(Header, {\n        size: \"medium\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 15\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"Existing alternative urls for this item\",\n        defaultMessage: \"Existing alternative urls for this item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 17\n        }\n      })), (_this$props$aliases2 = this.props.aliases) === null || _this$props$aliases2 === void 0 ? void 0 : _this$props$aliases2.items.map(function (alias, i) {\n        return __jsx(Form.Field, {\n          key: i,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 17\n          }\n        }, __jsx(Checkbox, {\n          id: \"alias-check-\".concat(i),\n          onChange: function onChange(e, _ref) {\n            var value = _ref.value;\n            return _this3.handleCheckAlias(value);\n          },\n          value: alias.path,\n          label: alias.path,\n          checked: _this3.state.aliasesToRemove.includes(alias.path),\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 19\n          }\n        }));\n      }), __jsx(Button, {\n        id: \"remove-alias\",\n        onClick: function onClick() {\n          return _this3.handleRemoveAliases();\n        },\n        primary: true,\n        disabled: this.state.aliasesToRemove.length === 0,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 15\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"Remove\",\n        defaultMessage: \"Remove\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 17\n        }\n      }))))), this.state.isClient && __jsx(Portal, {\n        node: document.getElementById('toolbar'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 11\n        }\n      }, __jsx(Toolbar, {\n        pathname: this.props.pathname,\n        hideDefaultViewButtons: true,\n        inner: __jsx(Link, {\n          to: \"\".concat(getBaseUrl(this.props.pathname)),\n          className: \"item\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 326,\n            columnNumber: 17\n          }\n        }, __jsx(Icon, {\n          name: backSVG,\n          className: \"contents circled\",\n          size: \"30px\",\n          title: this.props.intl.formatMessage(messages.back),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 19\n          }\n        })),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 13\n        }\n      })));\n    }\n  }]);\n  return Aliases;\n}(Component);\n_defineProperty(Aliases, \"propTypes\", {\n  removeAliases: PropTypes.func.isRequired,\n  addAliases: PropTypes.func.isRequired,\n  getAliases: PropTypes.func.isRequired,\n  pathname: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired\n});\nexport default compose(injectIntl, connect(function (state, props) {\n  var _state$content$data;\n  return {\n    aliases: state.aliases,\n    pathname: props.location.pathname,\n    title: ((_state$content$data = state.content.data) === null || _state$content$data === void 0 ? void 0 : _state$content$data.title) || ''\n  };\n}, {\n  addAliases: addAliases,\n  getAliases: getAliases,\n  removeAliases: removeAliases\n}))(Aliases);","map":{"version":3,"names":["React","Component","PropTypes","Helmet","connect","compose","Link","Portal","Button","Checkbox","Container","Form","Header","Input","Segment","FormattedMessage","defineMessages","injectIntl","removeAliases","addAliases","getAliases","Icon","Toolbar","backSVG","getBaseUrl","toast","Toast","messages","back","aliases","success","successAdd","Aliases","props","state","isClient","newAlias","isAliasCorrect","isAliasAlready","aliasesToRemove","pathname","query","manual","datetime","batchSize","setState","prevProps","prevState","charAt","items","find","item","path","nextProps","add","loading","loaded","error","intl","formatMessage","remove","val","alias","includes","index","indexOf","newAliasesArr","splice","title","e","handleAltChange","target","value","color","handleSubmitAlias","map","i","handleCheckAlias","handleRemoveAliases","length","document","getElementById","func","isRequired","string","location","content","data"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Aliases/Aliases.jsx"],"sourcesContent":["/**\n * Aliases container.\n * @module components/manage/Aliases/Aliases\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from '@plone/volto/helpers';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { Portal } from 'react-portal';\nimport {\n  Button,\n  Checkbox,\n  Container,\n  Form,\n  Header,\n  Input,\n  Segment,\n} from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\n\nimport { removeAliases, addAliases, getAliases } from '@plone/volto/actions';\n\nimport { Icon, Toolbar } from '@plone/volto/components';\n\nimport backSVG from '@plone/volto/icons/back.svg';\nimport { getBaseUrl } from '@plone/volto/helpers';\nimport { toast } from 'react-toastify';\nimport { Toast } from '@plone/volto/components';\n\nconst messages = defineMessages({\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  aliases: {\n    id: 'URL Management',\n    defaultMessage: 'URL Management',\n  },\n  success: {\n    id: 'Success',\n    defaultMessage: 'Success',\n  },\n  successAdd: {\n    id: 'Alias has been added',\n    defaultMessage: 'Alias has been added',\n  },\n});\n\n/**\n * Aliases class.\n * @class Aliases\n * @extends Component\n */\nclass Aliases extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    removeAliases: PropTypes.func.isRequired,\n    addAliases: PropTypes.func.isRequired,\n    getAliases: PropTypes.func.isRequired,\n    pathname: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Aliases\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      isClient: false,\n      newAlias: '',\n      isAliasCorrect: false,\n      isAliasAlready: false,\n      aliasesToRemove: [],\n    };\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.getAliases(getBaseUrl(this.props.pathname), {\n      query: '',\n      manual: '',\n      datetime: '',\n      batchSize: '',\n    });\n    this.setState({ isClient: true });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.newAlias !== this.state.newAlias) {\n      if (this.state.newAlias.charAt(0) === '/') {\n        this.setState({ isAliasCorrect: true });\n      } else {\n        this.setState({ isAliasCorrect: false });\n      }\n      if (\n        this.props.aliases?.items.find(\n          (item) => item.path === this.state.newAlias,\n        )\n      ) {\n        this.setState({ isAliasAlready: true });\n      } else {\n        this.setState({ isAliasAlready: false });\n      }\n    }\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.aliases.add.loading && nextProps.aliases.add.loaded) {\n      if (nextProps.aliases.add.error) {\n        this.setState({ isAliasAlready: true });\n      } else {\n        this.setState({ isAliasAlready: false });\n        toast.success(\n          <Toast\n            success\n            title={this.props.intl.formatMessage(messages.success)}\n            content={this.props.intl.formatMessage(messages.successAdd)}\n          />,\n        );\n      }\n      this.props.getAliases(getBaseUrl(this.props.pathname), {\n        query: '',\n        manual: '',\n        datetime: '',\n        batchSize: '',\n      });\n    }\n    if (this.props.aliases.remove.loading && nextProps.aliases.remove.loaded) {\n      this.props.getAliases(getBaseUrl(this.props.pathname), {\n        query: '',\n        manual: '',\n        datetime: '',\n        batchSize: '',\n      });\n    }\n  }\n\n  /**\n   * Url change handler\n   * @method handleAltChange\n   * @returns {undefined}\n   */\n  handleAltChange(val) {\n    this.setState({ newAlias: val });\n  }\n\n  /**\n   * New alias submit handler\n   * @method handleSubmitAlias\n   * @returns {undefined}\n   */\n  handleSubmitAlias() {\n    if (this.state.isAliasCorrect) {\n      this.props.addAliases(getBaseUrl(this.props.pathname), {\n        items: this.state.newAlias,\n      });\n      this.setState({ newAlias: '' });\n    }\n  }\n\n  /**\n   * Check to-remove aliases handler\n   * @method handleSubmitAlias\n   * @returns {undefined}\n   */\n  handleCheckAlias(alias) {\n    const aliases = this.state.aliasesToRemove;\n    if (aliases.includes(alias)) {\n      const index = aliases.indexOf(alias);\n      if (index > -1) {\n        let newAliasesArr = aliases;\n        newAliasesArr.splice(index, 1);\n        this.setState({ aliasesToRemove: newAliasesArr });\n      }\n    } else {\n      this.setState({\n        aliasesToRemove: [...this.state.aliasesToRemove, alias],\n      });\n    }\n  }\n\n  /**\n   * Remove aliases handler\n   * @method handleRemoveAliases\n   * @returns {undefined}\n   */\n  handleRemoveAliases() {\n    this.props.removeAliases(getBaseUrl(this.props.pathname), {\n      items: this.state.aliasesToRemove,\n    });\n    this.setState({ aliasesToRemove: [] });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <Container id=\"aliases\">\n        <Helmet title={this.props.intl.formatMessage(messages.aliases)} />\n        <Segment.Group raised>\n          <Segment className=\"primary\">\n            <FormattedMessage\n              id=\"URL Management for {title}\"\n              defaultMessage=\"URL Management for {title}\"\n              values={{ title: <q>{this.props.title}</q> }}\n            />\n          </Segment>\n          <Segment secondary>\n            <FormattedMessage\n              id=\"Using this form, you can manage alternative urls for an item. This is an easy way to make an item available under two different URLs.\"\n              defaultMessage=\"Using this form, you can manage alternative urls for an item. This is an easy way to make an item available under two different URLs.\"\n            />\n          </Segment>\n          <Form>\n            <Segment>\n              <Header size=\"medium\">\n                <FormattedMessage\n                  id=\"Add a new alternative url\"\n                  defaultMessage=\"Add a new alternative url\"\n                />\n              </Header>\n              <p className=\"help\">\n                <FormattedMessage\n                  id=\"Enter the absolute path where the alternative url should exist. The path must start with '/'. Only urls that result in a 404 not found page will result in a redirect occurring.\"\n                  defaultMessage=\"Enter the absolute path where the alternative url should exist. The path must start with '/'. Only urls that result in a 404 not found page will result in a redirect occurring.\"\n                />\n              </p>\n              <Form.Field>\n                <Input\n                  id=\"alternative-url-input\"\n                  name=\"alternative-url\"\n                  placeholder=\"/example\"\n                  value={this.state.newAlias}\n                  onChange={(e) => this.handleAltChange(e.target.value)}\n                />\n                {!this.state.isAliasCorrect && this.state.newAlias !== '' && (\n                  <p style={{ color: 'red' }}>\n                    <FormattedMessage\n                      id=\"Alternative url path must start with a slash.\"\n                      defaultMessage=\"Alternative url path must start with a slash.\"\n                    />\n                  </p>\n                )}\n                {this.state.isAliasAlready && (\n                  <p style={{ color: 'red' }}>\n                    <FormattedMessage\n                      id=\"The provided alternative url already exists!\"\n                      defaultMessage=\"The provided alternative url already exists!\"\n                    />\n                  </p>\n                )}\n              </Form.Field>\n              <Button\n                id=\"submit-alias\"\n                primary\n                onClick={() => this.handleSubmitAlias()}\n                disabled={\n                  !this.state.isAliasCorrect ||\n                  this.state.newAlias === '' ||\n                  this.state.isAliasAlready\n                }\n              >\n                <FormattedMessage id=\"Add\" defaultMessage=\"Add\" />\n              </Button>\n            </Segment>\n          </Form>\n          <Form>\n            <Segment>\n              <Header size=\"medium\">\n                <FormattedMessage\n                  id=\"Existing alternative urls for this item\"\n                  defaultMessage=\"Existing alternative urls for this item\"\n                />\n              </Header>\n              {this.props.aliases?.items.map((alias, i) => (\n                <Form.Field key={i}>\n                  <Checkbox\n                    id={`alias-check-${i}`}\n                    onChange={(e, { value }) => this.handleCheckAlias(value)}\n                    value={alias.path}\n                    label={alias.path}\n                    checked={this.state.aliasesToRemove.includes(alias.path)}\n                  />\n                </Form.Field>\n              ))}\n              <Button\n                id=\"remove-alias\"\n                onClick={() => this.handleRemoveAliases()}\n                primary\n                disabled={this.state.aliasesToRemove.length === 0}\n              >\n                <FormattedMessage id=\"Remove\" defaultMessage=\"Remove\" />\n              </Button>\n            </Segment>\n          </Form>\n        </Segment.Group>\n        {this.state.isClient && (\n          <Portal node={document.getElementById('toolbar')}>\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={\n                <Link\n                  to={`${getBaseUrl(this.props.pathname)}`}\n                  className=\"item\"\n                >\n                  <Icon\n                    name={backSVG}\n                    className=\"contents circled\"\n                    size=\"30px\"\n                    title={this.props.intl.formatMessage(messages.back)}\n                  />\n                </Link>\n              }\n            />\n          </Portal>\n        )}\n      </Container>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      aliases: state.aliases,\n      pathname: props.location.pathname,\n      title: state.content.data?.title || '',\n    }),\n    { addAliases, getAliases, removeAliases },\n  ),\n)(Aliases);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Back","defaultMessage":"Back"},{"id":"URL Management","defaultMessage":"URL Management"},{"id":"Success","defaultMessage":"Success"},{"id":"Alias has been added","defaultMessage":"Alias has been added"},{"id":"URL Management for {title}","defaultMessage":"URL Management for {title}"},{"id":"Using this form, you can manage alternative urls for an item. This is an easy way to make an item available under two different URLs.","defaultMessage":"Using this form, you can manage alternative urls for an item. This is an easy way to make an item available under two different URLs."},{"id":"Add a new alternative url","defaultMessage":"Add a new alternative url"},{"id":"Enter the absolute path where the alternative url should exist. The path must start with '/'. Only urls that result in a 404 not found page will result in a redirect occurring.","defaultMessage":"Enter the absolute path where the alternative url should exist. The path must start with '/'. Only urls that result in a 404 not found page will result in a redirect occurring."},{"id":"Alternative url path must start with a slash.","defaultMessage":"Alternative url path must start with a slash."},{"id":"The provided alternative url already exists!","defaultMessage":"The provided alternative url already exists!"},{"id":"Add","defaultMessage":"Add"},{"id":"Existing alternative urls for this item","defaultMessage":"Existing alternative urls for this item"},{"id":"Remove","defaultMessage":"Remove"}]}},"sourceType":"module","externalDependencies":[]}