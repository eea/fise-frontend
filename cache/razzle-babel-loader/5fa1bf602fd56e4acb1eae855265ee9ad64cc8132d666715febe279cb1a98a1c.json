{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-block-style/src/BlockStyleWrapper/BlockStyleWrapperEdit.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport React from 'react';\nimport { StyleWrapperEdit, StyleWrapperView } from '../StyleWrapper';\nimport { Portal } from 'react-portal';\nimport themeSVG from '@plone/volto/icons/theme.svg';\nimport { Icon } from '@plone/volto/components';\nimport config from '@plone/volto/registry';\n\n// For blocks, store the style data in data.styles, then\n// adapt the data.styles.[align,size,...] info to default data.align, data.size, etc.\n\nconst BlockStyleWrapperEdit = props => {\n  const {\n    selected,\n    block,\n    data = {},\n    onChangeBlock,\n    manage\n  } = props;\n  const [isVisible, setIsVisible] = React.useState(false);\n  const visible = selected && (config.settings.layoutOnlyBlockStyles ? manage : true);\n  const tabsNode = __CLIENT__ && document.querySelector('#sidebar > .sidebar-container > .tabs-wrapper > .formtabs');\n  const triggerButton = __jsx(Portal, {\n    node: tabsNode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"open-styles-button\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, __jsx(\"button\", {\n    onClick: e => {\n      e.nativeEvent.stopImmediatePropagation();\n      setIsVisible(true);\n    },\n    title: `${props.type ? 'Style palette for ' + props.type : 'Style pallete'}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, __jsx(Icon, {\n    name: themeSVG,\n    size: \"18px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }\n  }))));\n  return __jsx(React.Fragment, null, visible ? triggerButton : '', __jsx(StyleWrapperEdit, _extends({}, props, {\n    isVisible: isVisible,\n    setIsVisible: setIsVisible,\n    data: _objectSpread(_objectSpread(_objectSpread({}, data === null || data === void 0 ? void 0 : data.styles), data.align ? {\n      align: data.align\n    } : {}), data.size ? {\n      size: data.size\n    } : {}),\n    blockData: data,\n    choices: [],\n    onChangeValue: (id, value) => onChangeBlock(block, _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, data), id === 'align' ? {\n      align: value\n    } : {}), id === 'size' ? {\n      size: value\n    } : {}), id === 'customId' ? {\n      id: value\n    } : {}), {}, {\n      styles: _objectSpread(_objectSpread({}, data === null || data === void 0 ? void 0 : data.styles), {}, {\n        [id]: value\n      })\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  })), __jsx(StyleWrapperView, _extends({\n    mode: \"edit\"\n  }, props, {\n    styleData: data.styles || {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  })));\n};\nexport default BlockStyleWrapperEdit;","map":{"version":3,"names":["React","StyleWrapperEdit","StyleWrapperView","Portal","themeSVG","Icon","config","BlockStyleWrapperEdit","props","selected","block","data","onChangeBlock","manage","isVisible","setIsVisible","useState","visible","settings","layoutOnlyBlockStyles","tabsNode","__CLIENT__","document","querySelector","triggerButton","e","nativeEvent","stopImmediatePropagation","type","styles","align","size","id","value"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-block-style/src/BlockStyleWrapper/BlockStyleWrapperEdit.jsx"],"sourcesContent":["import React from 'react';\nimport { StyleWrapperEdit, StyleWrapperView } from '../StyleWrapper';\nimport { Portal } from 'react-portal';\nimport themeSVG from '@plone/volto/icons/theme.svg';\nimport { Icon } from '@plone/volto/components';\nimport config from '@plone/volto/registry';\n\n// For blocks, store the style data in data.styles, then\n// adapt the data.styles.[align,size,...] info to default data.align, data.size, etc.\n\nconst BlockStyleWrapperEdit = (props) => {\n  const { selected, block, data = {}, onChangeBlock, manage } = props;\n  const [isVisible, setIsVisible] = React.useState(false);\n  const visible =\n    selected && (config.settings.layoutOnlyBlockStyles ? manage : true);\n\n  const tabsNode =\n    __CLIENT__ &&\n    document.querySelector(\n      '#sidebar > .sidebar-container > .tabs-wrapper > .formtabs',\n    );\n\n  const triggerButton = (\n    <Portal node={tabsNode}>\n      <div className=\"open-styles-button\">\n        <button\n          onClick={(e) => {\n            e.nativeEvent.stopImmediatePropagation();\n            setIsVisible(true);\n          }}\n          title={`${\n            props.type ? 'Style palette for ' + props.type : 'Style pallete'\n          }`}\n        >\n          <Icon name={themeSVG} size=\"18px\" />\n        </button>\n      </div>\n    </Portal>\n  );\n\n  return (\n    <>\n      {visible ? triggerButton : ''}\n      <StyleWrapperEdit\n        {...props}\n        isVisible={isVisible}\n        setIsVisible={setIsVisible}\n        data={{\n          ...data?.styles,\n          ...(data.align ? { align: data.align } : {}),\n          ...(data.size ? { size: data.size } : {}),\n        }}\n        blockData={data}\n        choices={[]}\n        onChangeValue={(id, value) =>\n          onChangeBlock(block, {\n            ...data,\n            ...(id === 'align' ? { align: value } : {}),\n            ...(id === 'size' ? { size: value } : {}),\n            ...(id === 'customId' ? { id: value } : {}),\n            styles: {\n              ...data?.styles,\n              [id]: value,\n            },\n          })\n        }\n      ></StyleWrapperEdit>\n      <StyleWrapperView mode=\"edit\" {...props} styleData={data.styles || {}} />\n    </>\n  );\n};\n\nexport default BlockStyleWrapperEdit;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}