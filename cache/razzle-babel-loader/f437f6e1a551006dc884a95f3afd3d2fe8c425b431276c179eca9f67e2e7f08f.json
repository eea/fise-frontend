{"ast":null,"code":"import _slicedToArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _cloneDeep from \"lodash/cloneDeep\";\nimport config from '@plone/volto/registry';\nimport { defineMessages } from 'react-intl';\nvar addTypeSelect = function addTypeSelect(_ref) {\n  var intl = _ref.intl,\n    schema = _ref.schema,\n    extensionName = _ref.extensionName,\n    messages = _ref.messages;\n  var field = '@type';\n  var extensions = config.blocks.blocksConfig.listing.extensions;\n  var variations = extensions[extensionName];\n  schema.properties[field] = {\n    title: intl.formatMessage(messages.title),\n    choices: variations.map(function (_ref2) {\n      var id = _ref2.id,\n        title = _ref2.title;\n      return [id, title];\n    }),\n    defaultValue: variations.find(function (_ref3) {\n      var isDefault = _ref3.isDefault;\n      return isDefault;\n    }).id\n  };\n  schema.fieldsets[0].fields.unshift(field);\n  return schema;\n};\n\n// Creates a factory that can trigger schemaEnhancer for a given extension\nexport var schemaEnhancerFactory = function schemaEnhancerFactory(_ref4) {\n  var extensionName = _ref4.extensionName,\n    messages = _ref4.messages,\n    _ref4$blockType = _ref4.blockType,\n    blockType = _ref4$blockType === void 0 ? 'listing' : _ref4$blockType,\n    _ref4$extensionField = _ref4.extensionField,\n    extensionField = _ref4$extensionField === void 0 ? '@type' : _ref4$extensionField;\n  return function (_ref5) {\n    var _activeItem;\n    var originalSchema = _ref5.schema,\n      formData = _ref5.formData,\n      intl = _ref5.intl;\n    //\n    // the attribute name that's stored in the block data\n    // it identifies the type of extension that's\n    // applied. Similar in scope, for example, with the block @type\n\n    var blockConfig = config.blocks.blocksConfig[blockType];\n    var extensions = blockConfig.extensions;\n    var templates = extensions[extensionName];\n    var activeItemName = formData === null || formData === void 0 ? void 0 : formData[extensionField];\n    var activeItem = templates === null || templates === void 0 ? void 0 : templates.find(function (item) {\n      return item.id === activeItemName;\n    });\n    if (!activeItem) activeItem = templates === null || templates === void 0 ? void 0 : templates.find(function (item) {\n      return item.isDefault;\n    });\n    var schemaEnhancer = (_activeItem = activeItem) === null || _activeItem === void 0 ? void 0 : _activeItem['schemaEnhancer'];\n    var schema = schemaEnhancer ? schemaEnhancer({\n      schema: _cloneDeep(originalSchema),\n      formData: formData,\n      intl: intl\n    }) : _cloneDeep(originalSchema);\n    return addTypeSelect({\n      schema: schema,\n      intl: intl,\n      extensionName: extensionName,\n      messages: messages\n    });\n  };\n};\nvar messages = defineMessages({\n  variation: {\n    \"id\": \"Variation\",\n    \"defaultMessage\": \"Variation\"\n  },\n  styling: {\n    \"id\": \"Styling\",\n    \"defaultMessage\": \"Styling\"\n  }\n});\nvar addStylesField = function addStylesField(_ref6) {\n  var schema = _ref6.schema,\n    intl = _ref6.intl,\n    formData = _ref6.formData;\n  // Add the default style schema as the first step in the \"ladder\".\n  // The order is as follows:\n  //\n  // - default volto style schema\n  // - listing block -> default style schema enhancer\n  // - listing block variation -> style schema enhancer\n  // - listing block card/item extension -> style schema enhancer\n  //\n  // We omit the first step in ladder because of bugs in Volto < 16.0.0-alpha.36\n  // In later versions we won't have to redefine the styles field\n\n  if (schema.properties.styles) return schema;\n  var defaultStyleSchema = config.blocks.blocksConfig.listing.stylesSchema;\n  schema.fieldsets.push({\n    id: 'styling',\n    title: intl.formatMessage(messages.styling),\n    fields: ['styles']\n  });\n  schema.properties.styles = {\n    widget: 'object',\n    title: intl.formatMessage(messages.styling),\n    schema: defaultStyleSchema({\n      formData: formData,\n      intl: intl,\n      schema: schema\n    })\n  };\n  return schema;\n};\nexport var enhanceStylingSchema = function enhanceStylingSchema(_ref7) {\n  var _blockConfig$variatio, _blockConfig$variatio2, _blockConfig$extensio, _formData$itemModel;\n  var formData = _ref7.formData,\n    schema = _ref7.schema,\n    _ref7$blockType = _ref7.blockType,\n    blockType = _ref7$blockType === void 0 ? 'listing' : _ref7$blockType,\n    _ref7$extensionName = _ref7.extensionName,\n    extensionName = _ref7$extensionName === void 0 ? 'itemTemplates' : _ref7$extensionName,\n    intl = _ref7.intl;\n  // Adds (to the limited styles schema) the new styling schema enhancements\n  schema = addStylesField({\n    formData: formData,\n    schema: schema,\n    intl: intl\n  });\n\n  // first, enhance styling schema based on the variation\n  // then, enhance it based on the `${extensionName}`\n\n  var blockConfig = config.blocks.blocksConfig[blockType];\n  var activeVariationId = formData['variation'] || ((_blockConfig$variatio = blockConfig.variations) === null || _blockConfig$variatio === void 0 ? void 0 : (_blockConfig$variatio2 = _blockConfig$variatio.find(function (_ref8) {\n    var isDefault = _ref8.isDefault;\n    return isDefault;\n  })) === null || _blockConfig$variatio2 === void 0 ? void 0 : _blockConfig$variatio2.id);\n  // TODO: use resolveExtensions() from Volto\n  var activeVariation = activeVariationId ? blockConfig.variations.find(function (_ref9) {\n    var id = _ref9.id;\n    return id === activeVariationId;\n  }) : {};\n\n  // TODO: not needed when we will use latest Volto\n  var variationStyleSchema = activeVariation === null || activeVariation === void 0 ? void 0 : activeVariation.stylesSchema;\n  schema = variationStyleSchema ? variationStyleSchema({\n    schema: _cloneDeep(schema),\n    formData: formData,\n    intl: intl\n  }) : schema;\n  // end TODO\n\n  var extensionType = '@type'; // the attribute name that's stored in the block data\n  var extensionTemplates = (_blockConfig$extensio = blockConfig.extensions) === null || _blockConfig$extensio === void 0 ? void 0 : _blockConfig$extensio[extensionName];\n  var activeItemName = formData === null || formData === void 0 ? void 0 : (_formData$itemModel = formData.itemModel) === null || _formData$itemModel === void 0 ? void 0 : _formData$itemModel[extensionType];\n  var activeItem = extensionTemplates === null || extensionTemplates === void 0 ? void 0 : extensionTemplates.find(function (item) {\n    return item.id === activeItemName;\n  });\n  var stylingSchema = activeItem === null || activeItem === void 0 ? void 0 : activeItem['stylesSchema'];\n  schema = stylingSchema ? stylingSchema({\n    schema: _cloneDeep(schema),\n    formData: formData,\n    intl: intl\n  }) : schema;\n  return schema;\n};\nexport var getVoltoStyles = function getVoltoStyles(props) {\n  var styles = props ? props : {};\n  var output = {};\n  for (var _i = 0, _Object$entries = Object.entries(styles); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n      key = _Object$entries$_i[0],\n      value = _Object$entries$_i[1];\n    if (styles[key] === true) {\n      output[key] = key;\n    } else {\n      output[value] = value;\n    }\n  }\n  return output;\n};","map":{"version":3,"names":["config","defineMessages","addTypeSelect","intl","schema","extensionName","messages","field","extensions","blocks","blocksConfig","listing","variations","properties","title","formatMessage","choices","map","id","defaultValue","find","isDefault","fieldsets","fields","unshift","schemaEnhancerFactory","blockType","extensionField","originalSchema","formData","blockConfig","templates","activeItemName","activeItem","item","schemaEnhancer","variation","styling","addStylesField","styles","defaultStyleSchema","stylesSchema","push","widget","enhanceStylingSchema","activeVariationId","activeVariation","variationStyleSchema","extensionType","extensionTemplates","itemModel","stylingSchema","getVoltoStyles","props","output","Object","entries","key","value"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-listing-block/src/schema-utils.js"],"sourcesContent":["import { cloneDeep } from 'lodash';\nimport config from '@plone/volto/registry';\n\nimport { defineMessages } from 'react-intl';\n\nconst addTypeSelect = ({ intl, schema, extensionName, messages }) => {\n  const field = '@type';\n  const extensions = config.blocks.blocksConfig.listing.extensions;\n  const variations = extensions[extensionName];\n  schema.properties[field] = {\n    title: intl.formatMessage(messages.title),\n    choices: variations.map(({ id, title }) => [id, title]),\n    defaultValue: variations.find(({ isDefault }) => isDefault).id,\n  };\n  schema.fieldsets[0].fields.unshift(field);\n\n  return schema;\n};\n\n// Creates a factory that can trigger schemaEnhancer for a given extension\nexport const schemaEnhancerFactory = ({\n  extensionName,\n  messages,\n  blockType = 'listing',\n  extensionField = '@type',\n}) => ({ schema: originalSchema, formData, intl }) => {\n  //\n  // the attribute name that's stored in the block data\n  // it identifies the type of extension that's\n  // applied. Similar in scope, for example, with the block @type\n\n  const blockConfig = config.blocks.blocksConfig[blockType];\n  const extensions = blockConfig.extensions;\n  const templates = extensions[extensionName];\n\n  const activeItemName = formData?.[extensionField];\n  let activeItem = templates?.find((item) => item.id === activeItemName);\n  if (!activeItem) activeItem = templates?.find((item) => item.isDefault);\n\n  const schemaEnhancer = activeItem?.['schemaEnhancer'];\n\n  let schema = schemaEnhancer\n    ? schemaEnhancer({ schema: cloneDeep(originalSchema), formData, intl })\n    : cloneDeep(originalSchema);\n\n  return addTypeSelect({ schema, intl, extensionName, messages });\n};\n\nconst messages = defineMessages({\n  variation: {\n    id: 'Variation',\n    defaultMessage: 'Variation',\n  },\n  styling: {\n    id: 'Styling',\n    defaultMessage: 'Styling',\n  },\n});\n\nconst addStylesField = ({ schema, intl, formData }) => {\n  // Add the default style schema as the first step in the \"ladder\".\n  // The order is as follows:\n  //\n  // - default volto style schema\n  // - listing block -> default style schema enhancer\n  // - listing block variation -> style schema enhancer\n  // - listing block card/item extension -> style schema enhancer\n  //\n  // We omit the first step in ladder because of bugs in Volto < 16.0.0-alpha.36\n  // In later versions we won't have to redefine the styles field\n\n  if (schema.properties.styles) return schema;\n\n  const defaultStyleSchema = config.blocks.blocksConfig.listing.stylesSchema;\n\n  schema.fieldsets.push({\n    id: 'styling',\n    title: intl.formatMessage(messages.styling),\n    fields: ['styles'],\n  });\n\n  schema.properties.styles = {\n    widget: 'object',\n    title: intl.formatMessage(messages.styling),\n    schema: defaultStyleSchema({ formData, intl, schema }),\n  };\n\n  return schema;\n};\nexport const enhanceStylingSchema = ({\n  formData,\n  schema,\n  blockType = 'listing',\n  extensionName = 'itemTemplates',\n  intl,\n}) => {\n  // Adds (to the limited styles schema) the new styling schema enhancements\n  schema = addStylesField({ formData, schema, intl });\n\n  // first, enhance styling schema based on the variation\n  // then, enhance it based on the `${extensionName}`\n\n  const blockConfig = config.blocks.blocksConfig[blockType];\n  const activeVariationId =\n    formData['variation'] ||\n    blockConfig.variations?.find(({ isDefault }) => isDefault)?.id;\n  // TODO: use resolveExtensions() from Volto\n  const activeVariation = activeVariationId\n    ? blockConfig.variations.find(({ id }) => id === activeVariationId)\n    : {};\n\n  // TODO: not needed when we will use latest Volto\n  const variationStyleSchema = activeVariation?.stylesSchema;\n  schema = variationStyleSchema\n    ? variationStyleSchema({ schema: cloneDeep(schema), formData, intl })\n    : schema;\n  // end TODO\n\n  const extensionType = '@type'; // the attribute name that's stored in the block data\n  const extensionTemplates = blockConfig.extensions?.[extensionName];\n  const activeItemName = formData?.itemModel?.[extensionType];\n  let activeItem = extensionTemplates?.find(\n    (item) => item.id === activeItemName,\n  );\n\n  const stylingSchema = activeItem?.['stylesSchema'];\n  schema = stylingSchema\n    ? stylingSchema({ schema: cloneDeep(schema), formData, intl })\n    : schema;\n\n  return schema;\n};\n\nexport const getVoltoStyles = (props) => {\n  const styles = props ? props : {};\n  const output = {};\n  for (const [key, value] of Object.entries(styles)) {\n    if (styles[key] === true) {\n      output[key] = key;\n    } else {\n      output[value] = value;\n    }\n  }\n  return output;\n};\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Variation","defaultMessage":"Variation"},{"id":"Styling","defaultMessage":"Styling"}]}},"sourceType":"module","externalDependencies":[]}