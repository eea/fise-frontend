{"ast":null,"code":"import _toConsumableArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n/**\n * Vocabularies reducer.\n * @module reducers/vocabularies/vocabularies\n */\n\nimport { GET_VOCABULARY, GET_VOCABULARY_TOKEN_TITLE } from '@plone/volto/constants/ActionTypes';\nvar initialState = {};\n\n/**\n * Vocabularies reducer.\n * @function vocabularies\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function vocabularies() {\n  var _vocabState$subreques, _vocabState$action$su, _vocabState$action$su2;\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var vocabState = state[action.vocabulary] || {};\n  var subrequestState = action.subrequest ? ((_vocabState$subreques = vocabState.subrequests) === null || _vocabState$subreques === void 0 ? void 0 : _vocabState$subreques[action.subrequest]) || {} : {};\n  switch (action.type) {\n    case \"\".concat(GET_VOCABULARY, \"_PENDING\"):\n    case \"\".concat(GET_VOCABULARY_TOKEN_TITLE, \"_PENDING\"):\n      return action.subrequest ? _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, action.vocabulary, _objectSpread(_objectSpread({}, vocabState), {}, {\n        subrequests: _objectSpread(_objectSpread({}, vocabState.subrequests), {}, _defineProperty({}, action.subrequest, _objectSpread(_objectSpread({}, subrequestState || {\n          data: null\n        }), {}, {\n          loaded: (vocabState === null || vocabState === void 0 ? void 0 : (_vocabState$action$su = vocabState[action.subrequest]) === null || _vocabState$action$su === void 0 ? void 0 : _vocabState$action$su.loaded) || false,\n          loading: !!(((vocabState === null || vocabState === void 0 ? void 0 : (_vocabState$action$su2 = vocabState[action.subrequest]) === null || _vocabState$action$su2 === void 0 ? void 0 : _vocabState$action$su2.loading) || 0) + 1),\n          error: null\n        })))\n      }))) : _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, action.vocabulary, _objectSpread(_objectSpread({}, vocabState), {}, {\n        error: null,\n        loaded: vocabState.loaded || false,\n        loading: !!((vocabState.loading || 0) + 1)\n      })));\n    case \"\".concat(GET_VOCABULARY, \"_SUCCESS\"):\n      return action.subrequest ? _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, action.vocabulary, _objectSpread(_objectSpread({}, vocabState), {}, {\n        subrequests: _objectSpread(_objectSpread({}, vocabState.subrequests), {}, _defineProperty({}, action.subrequest, _objectSpread(_objectSpread({}, subrequestState), {}, {\n          error: null,\n          loaded: true,\n          loading: !!(subrequestState.loading - 1),\n          items: _toConsumableArray(action.result.items.map(function (item) {\n            return {\n              label: item.title,\n              value: item.token\n            };\n          })),\n          batching: action.result.batching,\n          itemsTotal: action.result.items_total\n        })))\n      }))) : _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, action.vocabulary, _objectSpread(_objectSpread({}, vocabState), {}, {\n        error: null,\n        loaded: true,\n        loading: !!(vocabState.loading - 1),\n        items: _toConsumableArray(action.result.items.map(function (item) {\n          return {\n            label: item.title,\n            value: item.token\n          };\n        })),\n        batching: action.result.batching,\n        itemsTotal: action.result.items_total\n      })));\n    case \"\".concat(GET_VOCABULARY, \"_FAIL\"):\n    case \"\".concat(GET_VOCABULARY_TOKEN_TITLE, \"_FAIL\"):\n      return action.subrequest ? _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, action.vocabulary, {\n        subrequests: _objectSpread(_objectSpread({}, vocabState.subrequests), {}, _defineProperty({}, action.subrequest, {\n          error: action.error,\n          loaded: false,\n          loading: !!(subrequestState.loading - 1)\n        }))\n      })) : _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, action.vocabulary, {\n        error: action.error,\n        loaded: false,\n        loading: !!(vocabState.loading - 1)\n      }));\n    case \"\".concat(GET_VOCABULARY_TOKEN_TITLE, \"_SUCCESS\"):\n      return action.subrequest ? _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, action.vocabulary, _objectSpread(_objectSpread({}, vocabState), {}, {\n        subrequests: _objectSpread(_objectSpread({}, vocabState.subrequests), {}, _defineProperty({}, action.subrequest, _objectSpread(_objectSpread(_objectSpread({}, subrequestState), {}, {\n          error: null,\n          loaded: true,\n          loading: !!(subrequestState.loading - 1)\n        }, action.token && _defineProperty({}, action.token, action.result.items[0].title)), action.tokens && {\n          items: _toConsumableArray(action.result.items.map(function (item) {\n            return {\n              label: item.title,\n              value: item.token\n            };\n          }))\n        })))\n      }))) : _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, action.vocabulary, _objectSpread(_objectSpread({}, vocabState), {}, _defineProperty({\n        error: null,\n        loaded: true,\n        loading: !!(vocabState.loading - 1)\n      }, action.token, action.result.items[0].title))));\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["GET_VOCABULARY","GET_VOCABULARY_TOKEN_TITLE","initialState","vocabularies","state","action","vocabState","vocabulary","subrequestState","subrequest","subrequests","type","data","loaded","loading","error","items","result","map","item","label","title","value","token","batching","itemsTotal","items_total","tokens"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/reducers/vocabularies/vocabularies.js"],"sourcesContent":["/**\n * Vocabularies reducer.\n * @module reducers/vocabularies/vocabularies\n */\n\nimport {\n  GET_VOCABULARY,\n  GET_VOCABULARY_TOKEN_TITLE,\n} from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {};\n\n/**\n * Vocabularies reducer.\n * @function vocabularies\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function vocabularies(state = initialState, action = {}) {\n  const vocabState = state[action.vocabulary] || {};\n  const subrequestState = action.subrequest\n    ? vocabState.subrequests?.[action.subrequest] || {}\n    : {};\n  switch (action.type) {\n    case `${GET_VOCABULARY}_PENDING`:\n    case `${GET_VOCABULARY_TOKEN_TITLE}_PENDING`:\n      return action.subrequest\n        ? {\n            ...state,\n            [action.vocabulary]: {\n              ...vocabState,\n              subrequests: {\n                ...vocabState.subrequests,\n                [action.subrequest]: {\n                  // We preserve here the previous items array to prevent the component\n                  // to rerender due to prop changes while the PENDING state is active,\n                  // this little trick allow us to use how react-select do things\n                  // internally. This has a very low consequences since in the SUCCESS\n                  // state the items are overwritten anyways.\n                  ...(subrequestState || {\n                    data: null,\n                  }),\n                  loaded: vocabState?.[action.subrequest]?.loaded || false,\n                  loading: !!(\n                    (vocabState?.[action.subrequest]?.loading || 0) + 1\n                  ),\n                  error: null,\n                },\n              },\n            },\n          }\n        : {\n            ...state,\n            [action.vocabulary]: {\n              // We preserve here the previous items array to prevent the component\n              // to rerender due to prop changes while the PENDING state is active,\n              // this little trick allow us to use how react-select do things\n              // internally. This has a very low consequences since in the SUCCESS\n              // state the items are overwritten anyways.\n              ...vocabState,\n              error: null,\n              loaded: vocabState.loaded || false,\n              loading: !!((vocabState.loading || 0) + 1),\n            },\n          };\n    case `${GET_VOCABULARY}_SUCCESS`:\n      return action.subrequest\n        ? {\n            ...state,\n            [action.vocabulary]: {\n              ...vocabState,\n              subrequests: {\n                ...vocabState.subrequests,\n                [action.subrequest]: {\n                  ...subrequestState,\n                  error: null,\n                  loaded: true,\n                  loading: !!(subrequestState.loading - 1),\n                  items: [\n                    ...action.result.items.map((item) => ({\n                      label: item.title,\n                      value: item.token,\n                    })),\n                  ],\n                  batching: action.result.batching,\n                  itemsTotal: action.result.items_total,\n                },\n              },\n            },\n          }\n        : {\n            ...state,\n            [action.vocabulary]: {\n              ...vocabState,\n              error: null,\n              loaded: true,\n              loading: !!(vocabState.loading - 1),\n              items: [\n                ...action.result.items.map((item) => ({\n                  label: item.title,\n                  value: item.token,\n                })),\n              ],\n              batching: action.result.batching,\n              itemsTotal: action.result.items_total,\n            },\n          };\n    case `${GET_VOCABULARY}_FAIL`:\n    case `${GET_VOCABULARY_TOKEN_TITLE}_FAIL`:\n      return action.subrequest\n        ? {\n            ...state,\n            [action.vocabulary]: {\n              subrequests: {\n                ...vocabState.subrequests,\n                [action.subrequest]: {\n                  error: action.error,\n                  loaded: false,\n                  loading: !!(subrequestState.loading - 1),\n                },\n              },\n            },\n          }\n        : {\n            ...state,\n            [action.vocabulary]: {\n              error: action.error,\n              loaded: false,\n              loading: !!(vocabState.loading - 1),\n            },\n          };\n    case `${GET_VOCABULARY_TOKEN_TITLE}_SUCCESS`:\n      return action.subrequest\n        ? {\n            ...state,\n            [action.vocabulary]: {\n              ...vocabState,\n              subrequests: {\n                ...vocabState.subrequests,\n                [action.subrequest]: {\n                  ...subrequestState,\n                  error: null,\n                  loaded: true,\n                  loading: !!(subrequestState.loading - 1),\n                  ...(action.token && {\n                    [action.token]: action.result.items[0].title,\n                  }),\n                  ...(action.tokens && {\n                    items: [\n                      ...action.result.items.map((item) => ({\n                        label: item.title,\n                        value: item.token,\n                      })),\n                    ],\n                  }),\n                },\n              },\n            },\n          }\n        : {\n            ...state,\n            [action.vocabulary]: {\n              ...vocabState,\n              error: null,\n              loaded: true,\n              loading: !!(vocabState.loading - 1),\n              [action.token]: action.result.items[0].title,\n            },\n          };\n    default:\n      return state;\n  }\n}\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}