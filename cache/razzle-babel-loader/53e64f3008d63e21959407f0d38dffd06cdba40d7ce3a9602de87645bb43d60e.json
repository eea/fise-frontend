{"ast":null,"code":"import _omit from \"lodash/omit\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/volto-slate/src/editor/extensions/withTestingFeatures.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport React, { useMemo } from 'react';\nimport { ReactEditor } from 'slate-react';\nconst withTestingFeatures = WrappedComponent => {\n  return props => {\n    var _ref$current;\n    let ref = React.useRef();\n\n    // Source: https://stackoverflow.com/a/53623568/258462\n    const onTestSelectWord = val => {\n      let slateEditor = val.detail.parentElement.parentElement.parentElement.parentElement;\n\n      // Events are special, can't use spread or Object.keys\n      let selectEvent = {};\n      for (let key in val) {\n        if (key === 'currentTarget') {\n          selectEvent['currentTarget'] = slateEditor;\n        } else if (key === 'type') {\n          selectEvent['type'] = 'select';\n        } else {\n          selectEvent[key] = val[key];\n        }\n      }\n\n      // Make selection\n      let selection = window.getSelection();\n      let range = document.createRange();\n      range.selectNodeContents(val.detail);\n      selection.removeAllRanges();\n      selection.addRange(range);\n\n      // Slate monitors DOM selection changes automatically\n    };\n\n    const onTestSelectRange = val => {\n      const newDomRange = val && ReactEditor.toDOMRange(window.focusedSlateEditor, val.detail);\n      let selection = window.getSelection();\n      selection.removeAllRanges();\n      selection.addRange(newDomRange);\n    };\n    React.useEffect(() => {\n      document.addEventListener('Test_SelectWord', onTestSelectWord);\n      document.addEventListener('Test_SelectRange', onTestSelectRange);\n      return () => {\n        document.removeEventListener('Test_SelectWord', onTestSelectWord);\n        document.removeEventListener('Test_SelectRange', onTestSelectRange);\n      };\n    });\n    const handleFocus = React.useCallback(() => {\n      window.focusedSlateEditor = ref === null || ref === void 0 ? void 0 : ref.current;\n      if (props.onFocus) {\n        props.onFocus();\n      }\n    }, [props]);\n    const managedProps = useMemo(() => {\n      return _omit(props, 'onFocus');\n    }, [props]);\n    return __jsx(WrappedComponent, _extends({\n      debug: true,\n      \"debug-values\": {\n        'data-slate-value': JSON.stringify(props.value, null, 2),\n        'data-slate-selection': JSON.stringify(ref === null || ref === void 0 ? void 0 : (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.selection, null, 2)\n      },\n      testingEditorRef: ref,\n      onFocus: handleFocus\n    }, managedProps, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }\n    }));\n  };\n};\nexport default withTestingFeatures;","map":{"version":3,"names":["React","useMemo","ReactEditor","withTestingFeatures","WrappedComponent","props","ref","useRef","onTestSelectWord","val","slateEditor","detail","parentElement","selectEvent","key","selection","window","getSelection","range","document","createRange","selectNodeContents","removeAllRanges","addRange","onTestSelectRange","newDomRange","toDOMRange","focusedSlateEditor","useEffect","addEventListener","removeEventListener","handleFocus","useCallback","current","onFocus","managedProps","JSON","stringify","value"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/volto-slate/src/editor/extensions/withTestingFeatures.jsx"],"sourcesContent":["import React, { useMemo } from 'react';\nimport { ReactEditor } from 'slate-react';\nimport { omit } from 'lodash';\n\nconst withTestingFeatures = (WrappedComponent) => {\n  return (props) => {\n    let ref = React.useRef();\n\n    // Source: https://stackoverflow.com/a/53623568/258462\n    const onTestSelectWord = (val) => {\n      let slateEditor =\n        val.detail.parentElement.parentElement.parentElement.parentElement;\n\n      // Events are special, can't use spread or Object.keys\n      let selectEvent = {};\n      for (let key in val) {\n        if (key === 'currentTarget') {\n          selectEvent['currentTarget'] = slateEditor;\n        } else if (key === 'type') {\n          selectEvent['type'] = 'select';\n        } else {\n          selectEvent[key] = val[key];\n        }\n      }\n\n      // Make selection\n      let selection = window.getSelection();\n      let range = document.createRange();\n      range.selectNodeContents(val.detail);\n      selection.removeAllRanges();\n      selection.addRange(range);\n\n      // Slate monitors DOM selection changes automatically\n    };\n\n    const onTestSelectRange = (val) => {\n      const newDomRange =\n        val && ReactEditor.toDOMRange(window.focusedSlateEditor, val.detail);\n\n      let selection = window.getSelection();\n      selection.removeAllRanges();\n      selection.addRange(newDomRange);\n    };\n\n    React.useEffect(() => {\n      document.addEventListener('Test_SelectWord', onTestSelectWord);\n      document.addEventListener('Test_SelectRange', onTestSelectRange);\n      return () => {\n        document.removeEventListener('Test_SelectWord', onTestSelectWord);\n        document.removeEventListener('Test_SelectRange', onTestSelectRange);\n      };\n    });\n\n    const handleFocus = React.useCallback(() => {\n      window.focusedSlateEditor = ref?.current;\n      if (props.onFocus) {\n        props.onFocus();\n      }\n    }, [props]);\n\n    const managedProps = useMemo(() => {\n      return omit(props, 'onFocus');\n    }, [props]);\n\n    return (\n      <WrappedComponent\n        debug\n        debug-values={{\n          'data-slate-value': JSON.stringify(props.value, null, 2),\n          'data-slate-selection': JSON.stringify(\n            ref?.current?.selection,\n            null,\n            2,\n          ),\n        }}\n        testingEditorRef={ref}\n        onFocus={handleFocus}\n        {...managedProps}\n      />\n    );\n  };\n};\n\nexport default withTestingFeatures;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}