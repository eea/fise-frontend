{"ast":null,"code":"import _groupBy from \"lodash/groupBy\";\nimport _toPairs from \"lodash/toPairs\";\nimport _filter from \"lodash/filter\";\nimport _intersection from \"lodash/intersection\";\nimport _map from \"lodash/map\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Blocks/Search/widgets/SelectMetadataField.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport { compose } from 'redux';\nimport { FormFieldWrapper } from '@plone/volto/components';\nimport withQueryString from './../hocs/withQueryString';\nimport { Option, DropdownIndicator, selectTheme, customSelectStyles } from '@plone/volto/components/manage/Widgets/SelectStyling';\nconst identity = a => a;\n\n/**\n * SelectWidget component class.\n * @function SelectWidget\n * @returns {string} Markup of the component.\n */\nclass SelectWidget extends Component {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"state\", {\n      selectedOption: this.props.value ? {\n        label: this.props.value.title,\n        value: this.props.value.value\n      } : {}\n    });\n    _defineProperty(this, \"loadOptions\", (search, previousOptions, additional) => {\n      let hasMore = this.props.itemsTotal > previousOptions.length;\n      if (hasMore) {\n        const offset = this.state.search !== search ? 0 : additional.offset;\n        this.props.getVocabulary({\n          vocabNameOrURL: this.props.vocabBaseUrl,\n          query: search,\n          start: offset\n        });\n        this.setState({\n          search\n        });\n        return {\n          options: _intersection(previousOptions, this.props.choices).length === this.props.choices.length ? [] : this.props.choices,\n          hasMore: hasMore,\n          additional: {\n            offset: offset === additional.offset ? offset + 25 : offset\n          }\n        };\n      }\n      return null;\n    });\n    _defineProperty(this, \"handleChange\", selectedOption => {\n      this.setState({\n        selectedOption\n      });\n      this.props.onChange(this.props.id, {\n        value: selectedOption.value,\n        title: selectedOption.label\n      });\n    });\n  }\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    if (!this.props.choices && this.props.vocabBaseUrl) {\n      this.props.getVocabulary({\n        vocabNameOrURL: this.props.vocabBaseUrl\n      });\n    }\n  }\n\n  /**\n   * Initiate search with new query\n   * @method loadOptions\n   * @param {string} search Search query.\n   * @param {string} previousOptions The previous options rendered.\n   * @param {string} additional Additional arguments to pass to the next loadOptions.\n   * @returns {undefined}\n   */\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const {\n      id,\n      // choices,\n      value,\n      onChange,\n      // placeholder,\n      querystring,\n      filterOptions = identity\n    } = this.props;\n    const isDisabled = false;\n    const {\n      indexes = []\n    } = querystring;\n    const Select = this.props.reactSelect.default;\n    return __jsx(FormFieldWrapper, _extends({}, this.props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 7\n      }\n    }), __jsx(Select, {\n      id: `field-${id}`,\n      name: id,\n      isDisabled: isDisabled,\n      className: \"react-select-container\",\n      classNamePrefix: \"react-select\",\n      options: _map(_toPairs(_groupBy(_toPairs(filterOptions(indexes)), item => item[1].group)), group => ({\n        label: group[0],\n        options: _map(_filter(group[1], item => item[1].enabled), field => ({\n          label: field[1].title,\n          value: field[0]\n        }))\n      })),\n      styles: customSelectStyles,\n      theme: selectTheme,\n      components: {\n        DropdownIndicator,\n        Option\n      },\n      value: value,\n      onChange: data => {\n        let dataValue = [];\n        if (Array.isArray(data)) {\n          for (let obj of data) {\n            dataValue.push(obj.value);\n          }\n          return onChange(id, dataValue);\n        }\n        return onChange(id, data);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }\n    }));\n  }\n}\n_defineProperty(SelectWidget, \"propTypes\", {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  required: PropTypes.bool,\n  error: PropTypes.arrayOf(PropTypes.string),\n  loading: PropTypes.bool,\n  value: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.bool]),\n  onChange: PropTypes.func.isRequired,\n  onBlur: PropTypes.func,\n  onClick: PropTypes.func,\n  onEdit: PropTypes.func,\n  onDelete: PropTypes.func,\n  wrapped: PropTypes.bool,\n  querystring: PropTypes.object\n});\n_defineProperty(SelectWidget, \"defaultProps\", {\n  description: null,\n  required: false,\n  items: {\n    vocabulary: null\n  },\n  widgetOptions: {\n    vocabulary: null\n  },\n  error: [],\n  choices: [],\n  loading: false,\n  value: null,\n  onChange: () => {},\n  onBlur: () => {},\n  onClick: () => {},\n  onEdit: null,\n  onDelete: null\n});\nexport default compose(withQueryString, injectLazyLibs(['reactSelect']))(SelectWidget);","map":{"version":3,"names":["React","Component","PropTypes","injectLazyLibs","compose","FormFieldWrapper","withQueryString","Option","DropdownIndicator","selectTheme","customSelectStyles","identity","a","SelectWidget","selectedOption","props","value","label","title","search","previousOptions","additional","hasMore","itemsTotal","length","offset","state","getVocabulary","vocabNameOrURL","vocabBaseUrl","query","start","setState","options","choices","onChange","id","componentDidMount","render","querystring","filterOptions","isDisabled","indexes","Select","reactSelect","default","item","group","enabled","field","data","dataValue","Array","isArray","obj","push","string","isRequired","description","required","bool","error","arrayOf","loading","oneOfType","object","func","onBlur","onClick","onEdit","onDelete","wrapped","items","vocabulary","widgetOptions"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Blocks/Search/widgets/SelectMetadataField.jsx"],"sourcesContent":["/**\n * SelectWidget component.\n * @module components/manage/Widgets/SelectWidget\n */\n\nimport { map, intersection, filter, toPairs, groupBy } from 'lodash';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport { compose } from 'redux';\n\nimport { FormFieldWrapper } from '@plone/volto/components';\nimport withQueryString from './../hocs/withQueryString';\n\nimport {\n  Option,\n  DropdownIndicator,\n  selectTheme,\n  customSelectStyles,\n} from '@plone/volto/components/manage/Widgets/SelectStyling';\n\nconst identity = (a) => a;\n\n/**\n * SelectWidget component class.\n * @function SelectWidget\n * @returns {string} Markup of the component.\n */\nclass SelectWidget extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string,\n    required: PropTypes.bool,\n    error: PropTypes.arrayOf(PropTypes.string),\n    loading: PropTypes.bool,\n    value: PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.string,\n      PropTypes.bool,\n    ]),\n    onChange: PropTypes.func.isRequired,\n    onBlur: PropTypes.func,\n    onClick: PropTypes.func,\n    onEdit: PropTypes.func,\n    onDelete: PropTypes.func,\n    wrapped: PropTypes.bool,\n    querystring: PropTypes.object,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    description: null,\n    required: false,\n    items: {\n      vocabulary: null,\n    },\n    widgetOptions: {\n      vocabulary: null,\n    },\n    error: [],\n    choices: [],\n    loading: false,\n    value: null,\n    onChange: () => {},\n    onBlur: () => {},\n    onClick: () => {},\n    onEdit: null,\n    onDelete: null,\n  };\n\n  state = {\n    selectedOption: this.props.value\n      ? { label: this.props.value.title, value: this.props.value.value }\n      : {},\n  };\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    if (!this.props.choices && this.props.vocabBaseUrl) {\n      this.props.getVocabulary({ vocabNameOrURL: this.props.vocabBaseUrl });\n    }\n  }\n\n  /**\n   * Initiate search with new query\n   * @method loadOptions\n   * @param {string} search Search query.\n   * @param {string} previousOptions The previous options rendered.\n   * @param {string} additional Additional arguments to pass to the next loadOptions.\n   * @returns {undefined}\n   */\n  loadOptions = (search, previousOptions, additional) => {\n    let hasMore = this.props.itemsTotal > previousOptions.length;\n    if (hasMore) {\n      const offset = this.state.search !== search ? 0 : additional.offset;\n      this.props.getVocabulary({\n        vocabNameOrURL: this.props.vocabBaseUrl,\n        query: search,\n        start: offset,\n      });\n      this.setState({ search });\n\n      return {\n        options:\n          intersection(previousOptions, this.props.choices).length ===\n          this.props.choices.length\n            ? []\n            : this.props.choices,\n        hasMore: hasMore,\n        additional: {\n          offset: offset === additional.offset ? offset + 25 : offset,\n        },\n      };\n    }\n    return null;\n  };\n\n  /* Customized to pass object instead of plain string value */\n  handleChange = (selectedOption) => {\n    this.setState({ selectedOption });\n    this.props.onChange(this.props.id, {\n      value: selectedOption.value,\n      title: selectedOption.label,\n    });\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const {\n      id,\n      // choices,\n      value,\n      onChange,\n      // placeholder,\n      querystring,\n      filterOptions = identity,\n    } = this.props;\n    const isDisabled = false;\n    const { indexes = [] } = querystring;\n\n    const Select = this.props.reactSelect.default;\n\n    return (\n      <FormFieldWrapper {...this.props}>\n        <Select\n          id={`field-${id}`}\n          name={id}\n          isDisabled={isDisabled}\n          className=\"react-select-container\"\n          classNamePrefix=\"react-select\"\n          options={map(\n            toPairs(\n              groupBy(toPairs(filterOptions(indexes)), (item) => item[1].group),\n            ),\n            (group) => ({\n              label: group[0],\n              options: map(\n                filter(group[1], (item) => item[1].enabled),\n                (field) => ({\n                  label: field[1].title,\n                  value: field[0],\n                }),\n              ),\n            }),\n          )}\n          styles={customSelectStyles}\n          theme={selectTheme}\n          components={{ DropdownIndicator, Option }}\n          value={value}\n          onChange={(data) => {\n            let dataValue = [];\n            if (Array.isArray(data)) {\n              for (let obj of data) {\n                dataValue.push(obj.value);\n              }\n              return onChange(id, dataValue);\n            }\n            return onChange(id, data);\n          }}\n        />\n      </FormFieldWrapper>\n    );\n  }\n}\n\nexport default compose(\n  withQueryString,\n  injectLazyLibs(['reactSelect']),\n)(SelectWidget);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}