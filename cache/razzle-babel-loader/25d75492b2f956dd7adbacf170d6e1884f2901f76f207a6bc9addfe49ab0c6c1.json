{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport { VisualizationView } from './Views';\nimport { DataQueryWidget, VisualizationWidget } from './Widgets';\nimport installEmbedVisualization from './Blocks/EmbedVisualization';\n\n//TODO: this will replace the current embed viz\nimport installEmbedEEAVisualization from './Blocks/EmbedEEAVisualization';\nimport installPlotlyChart from './Blocks/PlotlyChart';\nimport installTreemap from './Blocks/Treemap';\nimport { data_visualizations } from './middlewares';\nimport * as addonReducers from './reducers';\nimport './less/global.less';\nconst applyConfig = config => {\n  config.views.contentTypesViews.visualization = VisualizationView;\n  config.widgets.id.visualization = VisualizationWidget;\n  config.blocks.groupBlocksOrder = [...config.blocks.groupBlocksOrder, {\n    id: 'plotly',\n    title: 'Plotly blocks'\n  }];\n  config.settings.storeExtenders = [...(config.settings.storeExtenders || []), data_visualizations];\n  config.addonReducers = _objectSpread(_objectSpread({}, config.addonReducers), addonReducers);\n  config.widgets.widget.data_query_widget = DataQueryWidget;\n  return [installEmbedVisualization,\n  //first one here ^^ will get old and be removed in time TODO:\n  installEmbedEEAVisualization, installPlotlyChart, installTreemap].reduce((acc, apply) => apply(acc), config);\n};\nexport default applyConfig;","map":{"version":3,"names":["VisualizationView","DataQueryWidget","VisualizationWidget","installEmbedVisualization","installEmbedEEAVisualization","installPlotlyChart","installTreemap","data_visualizations","addonReducers","applyConfig","config","views","contentTypesViews","visualization","widgets","id","blocks","groupBlocksOrder","title","settings","storeExtenders","widget","data_query_widget","reduce","acc","apply"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-plotlycharts/src/index.js"],"sourcesContent":["import { VisualizationView } from './Views';\nimport { DataQueryWidget, VisualizationWidget } from './Widgets';\nimport installEmbedVisualization from './Blocks/EmbedVisualization';\n\n//TODO: this will replace the current embed viz\nimport installEmbedEEAVisualization from './Blocks/EmbedEEAVisualization';\n\nimport installPlotlyChart from './Blocks/PlotlyChart';\nimport installTreemap from './Blocks/Treemap';\nimport { data_visualizations } from './middlewares';\nimport * as addonReducers from './reducers';\n\nimport './less/global.less';\n\nconst applyConfig = (config) => {\n  config.views.contentTypesViews.visualization = VisualizationView;\n  config.widgets.id.visualization = VisualizationWidget;\n\n  config.blocks.groupBlocksOrder = [\n    ...config.blocks.groupBlocksOrder,\n    {\n      id: 'plotly',\n      title: 'Plotly blocks',\n    },\n  ];\n\n  config.settings.storeExtenders = [\n    ...(config.settings.storeExtenders || []),\n    data_visualizations,\n  ];\n\n  config.addonReducers = {\n    ...config.addonReducers,\n    ...addonReducers,\n  };\n\n  config.widgets.widget.data_query_widget = DataQueryWidget;\n\n  return [\n    installEmbedVisualization,\n    //first one here ^^ will get old and be removed in time TODO:\n    installEmbedEEAVisualization,\n    installPlotlyChart,\n    installTreemap,\n  ].reduce((acc, apply) => apply(acc), config);\n};\n\nexport default applyConfig;\n"],"mappings":";;;AAAA,SAASA,iBAAiB,QAAQ,SAAS;AAC3C,SAASC,eAAe,EAAEC,mBAAmB,QAAQ,WAAW;AAChE,OAAOC,yBAAyB,MAAM,6BAA6B;;AAEnE;AACA,OAAOC,4BAA4B,MAAM,gCAAgC;AAEzE,OAAOC,kBAAkB,MAAM,sBAAsB;AACrD,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,SAASC,mBAAmB,QAAQ,eAAe;AACnD,OAAO,KAAKC,aAAa,MAAM,YAAY;AAE3C,OAAO,oBAAoB;AAE3B,MAAMC,WAAW,GAAIC,MAAM,IAAK;EAC9BA,MAAM,CAACC,KAAK,CAACC,iBAAiB,CAACC,aAAa,GAAGb,iBAAiB;EAChEU,MAAM,CAACI,OAAO,CAACC,EAAE,CAACF,aAAa,GAAGX,mBAAmB;EAErDQ,MAAM,CAACM,MAAM,CAACC,gBAAgB,GAAG,CAC/B,GAAGP,MAAM,CAACM,MAAM,CAACC,gBAAgB,EACjC;IACEF,EAAE,EAAE,QAAQ;IACZG,KAAK,EAAE;EACT,CAAC,CACF;EAEDR,MAAM,CAACS,QAAQ,CAACC,cAAc,GAAG,CAC/B,IAAIV,MAAM,CAACS,QAAQ,CAACC,cAAc,IAAI,EAAE,CAAC,EACzCb,mBAAmB,CACpB;EAEDG,MAAM,CAACF,aAAa,mCACfE,MAAM,CAACF,aAAa,GACpBA,aAAa,CACjB;EAEDE,MAAM,CAACI,OAAO,CAACO,MAAM,CAACC,iBAAiB,GAAGrB,eAAe;EAEzD,OAAO,CACLE,yBAAyB;EACzB;EACAC,4BAA4B,EAC5BC,kBAAkB,EAClBC,cAAc,CACf,CAACiB,MAAM,CAAC,CAACC,GAAG,EAAEC,KAAK,KAAKA,KAAK,CAACD,GAAG,CAAC,EAAEd,MAAM,CAAC;AAC9C,CAAC;AAED,eAAeD,WAAW"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}