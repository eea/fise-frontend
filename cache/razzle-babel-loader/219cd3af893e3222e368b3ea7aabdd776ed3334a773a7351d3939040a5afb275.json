{"ast":null,"code":"import _reduce from \"lodash/reduce\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Multilingual/ManageTranslations.jsx\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport React from 'react';\nimport { Button, Container, Segment, Table } from 'semantic-ui-react';\nimport { Helmet } from '@plone/volto/helpers';\nimport { flattenToAppURL, getBaseUrl, langmap } from '@plone/volto/helpers';\nimport { Link, useLocation } from 'react-router-dom';\nimport { Icon, Toast, Toolbar } from '@plone/volto/components';\nimport config from '@plone/volto/registry';\nimport withObjectBrowser from '@plone/volto/components/manage/Sidebar/ObjectBrowser';\nimport { deleteLinkTranslation, getContent, linkTranslation } from '@plone/volto/actions';\nimport { defineMessages, FormattedMessage, useIntl } from 'react-intl';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Portal } from 'react-portal';\nimport { toast } from 'react-toastify';\nimport addSVG from '@plone/volto/icons/add.svg';\nimport backSVG from '@plone/volto/icons/back.svg';\nimport linkSVG from '@plone/volto/icons/link.svg';\nimport unlinkSVG from '@plone/volto/icons/unlink.svg';\nconst messages = defineMessages({\n  success: {\n    \"id\": \"Success\",\n    \"defaultMessage\": \"Success\"\n  },\n  linked: {\n    \"id\": \"Translation linked\",\n    \"defaultMessage\": \"Translation linked\"\n  },\n  unlinked: {\n    \"id\": \"Translation linking removed\",\n    \"defaultMessage\": \"Translation linking removed\"\n  },\n  link: {\n    \"id\": \"Link translation for\",\n    \"defaultMessage\": \"Link translation for\"\n  },\n  unlink: {\n    \"id\": \"Unlink translation for\",\n    \"defaultMessage\": \"Unlink translation for\"\n  },\n  ManageTranslations: {\n    \"id\": \"Manage Translations\",\n    \"defaultMessage\": \"Manage Translations\"\n  },\n  ManageTranslationsTitle: {\n    \"id\": \"Manage translations for {title}\",\n    \"defaultMessage\": \"Manage translations for {title}\"\n  },\n  back: {\n    \"id\": \"Back\",\n    \"defaultMessage\": \"Back\"\n  }\n});\nconst ManageTranslations = props => {\n  const intl = useIntl();\n  const pathname = useLocation().pathname;\n  const content = useSelector(state => state.content.data);\n  const dispatch = useDispatch();\n  const {\n    isObjectBrowserOpen,\n    openObjectBrowser\n  } = props;\n  const currentSelectedItem = React.useRef(null);\n  React.useEffect(() => {\n    if (!content) {\n      dispatch(getContent(getBaseUrl(pathname)));\n    }\n  }, [dispatch, content, pathname]);\n  React.useEffect(() => {\n    // Only execute the link API call on the final item selected, once the ObjectBrowser\n    // is closed\n    if (!isObjectBrowserOpen && currentSelectedItem.current) {\n      dispatch(linkTranslation(flattenToAppURL(content['@id']), currentSelectedItem.current)).then(resp => {\n        toast.success(__jsx(Toast, {\n          success: true,\n          title: intl.formatMessage(messages.success),\n          content: intl.formatMessage(messages.linked),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }\n        }));\n        dispatch(getContent(getBaseUrl(pathname)));\n      }).catch(error => {\n        // TODO: The true error sent by the API is shadowed by the superagent one\n        // Update this when this issue is fixed.\n        const shadowedError = JSON.parse(error.response.text);\n        toast.error(__jsx(Toast, {\n          error: true,\n          title: shadowedError.error.type,\n          content: shadowedError.error.message,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }\n        }), {\n          toastId: 'linkFailed'\n        });\n      });\n    }\n    /* eslint-disable react-hooks/exhaustive-deps */\n  }, [isObjectBrowserOpen]);\n  const translations = content && content['@components'].translations.items && _objectSpread({\n    [content.language.token]: {\n      url: content['@id']\n    }\n  }, _reduce(content['@components'].translations.items, (acc, value) => {\n    return _objectSpread(_objectSpread({}, acc), {}, {\n      [value.language]: {\n        url: value['@id']\n      }\n    });\n  }, {}));\n  function onSelectTarget(target) {\n    // We store the selection temporarily on the component, because we don't want it to\n    // execute it right away, since that will lead into duplicate link requests and we\n    // only want the last to get through\n    currentSelectedItem.current = target;\n  }\n  function onDeleteTranslation(lang) {\n    dispatch(deleteLinkTranslation(flattenToAppURL(content['@id']), lang)).then(resp => {\n      toast.success(__jsx(Toast, {\n        success: true,\n        title: intl.formatMessage(messages.success),\n        content: intl.formatMessage(messages.unlinked),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }\n      }));\n      dispatch(getContent(getBaseUrl(pathname)));\n    }).catch(error => {\n      // TODO: The true error sent by the API is shadowed by the superagent one\n      // Update this when this issue is fixed.\n      const shadowedError = JSON.parse(error.response.text);\n      toast.error(__jsx(Toast, {\n        error: true,\n        title: shadowedError.error.type,\n        content: shadowedError.error.message,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }\n      }), {\n        toastId: 'linkFailed'\n      });\n    });\n  }\n  return __jsx(Container, {\n    id: \"page-manage-translations\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 5\n    }\n  }, __jsx(Helmet, {\n    title: intl.formatMessage(messages.ManageTranslations),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }\n  }), __jsx(Segment.Group, {\n    raised: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }\n  }, __jsx(Segment, {\n    className: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"Manage translations for {title}\",\n    defaultMessage: \"Manage translations for {title}\",\n    values: {\n      title: __jsx(\"q\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 30\n        }\n      }, content.title)\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 11\n    }\n  })), content && __jsx(Table, {\n    selectable: true,\n    compact: true,\n    singleLine: true,\n    attached: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 11\n    }\n  }, __jsx(Table.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }\n  }, __jsx(Table.Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 15\n    }\n  }, __jsx(Table.HeaderCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 17\n    }\n  }, \"Language\"), __jsx(Table.HeaderCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 17\n    }\n  }, \"Path\"), __jsx(Table.HeaderCell, {\n    textAlign: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 17\n    }\n  }, \"Tools\"))), __jsx(Table.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }\n  }, config.settings.supportedLanguages.map(lang => {\n    var _translations$lang, _translations$lang2;\n    return __jsx(Table.Row, {\n      key: lang,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }\n    }, __jsx(Table.Cell, {\n      collapsing: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 19\n      }\n    }, lang === content.language.token ? __jsx(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 23\n      }\n    }, langmap[lang].nativeName) : langmap[lang].nativeName), __jsx(Table.Cell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 19\n      }\n    }, __jsx(Link, {\n      to: flattenToAppURL(((_translations$lang = translations[lang]) === null || _translations$lang === void 0 ? void 0 : _translations$lang.url) || ''),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 21\n      }\n    }, flattenToAppURL(((_translations$lang2 = translations[lang]) === null || _translations$lang2 === void 0 ? void 0 : _translations$lang2.url) || ''))), __jsx(Table.Cell, {\n      textAlign: \"right\",\n      className: \"manage-multilingual-tools\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 19\n      }\n    }, __jsx(Button.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 21\n      }\n    }, __jsx(Button, {\n      basic: true,\n      icon: true,\n      disabled: lang === content.language.token || (translations === null || translations === void 0 ? void 0 : translations[lang]),\n      as: Link,\n      to: {\n        pathname: `${pathname}/create-translation`,\n        state: {\n          type: content['@type'],\n          translationOf: flattenToAppURL(content['@id']),\n          language: lang\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 23\n      }\n    }, __jsx(Icon, {\n      name: addSVG,\n      size: \"24px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 25\n      }\n    }))), translations !== null && translations !== void 0 && translations[lang] ? __jsx(Button.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 23\n      }\n    }, __jsx(Button, {\n      \"aria-label\": `${intl.formatMessage(messages.unlink)} ${langmap[lang].nativeName.toLowerCase()}`,\n      basic: true,\n      icon: true,\n      disabled: lang === content.language.token,\n      onClick: () => onDeleteTranslation(lang),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 25\n      }\n    }, __jsx(Icon, {\n      name: lang === content.language.token ? linkSVG : unlinkSVG,\n      size: \"24px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 27\n      }\n    }))) : __jsx(Button.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 23\n      }\n    }, __jsx(Button, {\n      \"aria-label\": `${intl.formatMessage(messages.link)} ${langmap[lang].nativeName.toLowerCase()}`,\n      basic: true,\n      icon: true,\n      disabled: lang === content.language.token,\n      onClick: () => openObjectBrowser({\n        mode: 'link',\n        overlay: true,\n        onSelectItem: url => {\n          onSelectTarget(url, isObjectBrowserOpen);\n        }\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 25\n      }\n    }, __jsx(Icon, {\n      name: linkSVG,\n      size: \"24px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 27\n      }\n    })))));\n  }))), __CLIENT__ && __jsx(Portal, {\n    node: document.getElementById('toolbar'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 11\n    }\n  }, __jsx(Toolbar, {\n    pathname: pathname,\n    hideDefaultViewButtons: true,\n    inner: __jsx(Link, {\n      to: `${getBaseUrl(pathname)}`,\n      className: \"item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 17\n      }\n    }, __jsx(Icon, {\n      name: backSVG,\n      className: \"contents circled\",\n      size: \"30px\",\n      title: intl.formatMessage(messages.back),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 19\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 13\n    }\n  }))));\n};\nexport default withObjectBrowser(ManageTranslations);","map":{"version":3,"names":["React","Button","Container","Segment","Table","Helmet","flattenToAppURL","getBaseUrl","langmap","Link","useLocation","Icon","Toast","Toolbar","config","withObjectBrowser","deleteLinkTranslation","getContent","linkTranslation","defineMessages","FormattedMessage","useIntl","useSelector","useDispatch","Portal","toast","addSVG","backSVG","linkSVG","unlinkSVG","messages","success","linked","unlinked","link","unlink","ManageTranslations","ManageTranslationsTitle","back","props","intl","pathname","content","state","data","dispatch","isObjectBrowserOpen","openObjectBrowser","currentSelectedItem","useRef","useEffect","current","then","resp","formatMessage","catch","error","shadowedError","JSON","parse","response","text","type","message","toastId","translations","items","language","token","url","acc","value","onSelectTarget","target","onDeleteTranslation","lang","title","settings","supportedLanguages","map","nativeName","translationOf","toLowerCase","mode","overlay","onSelectItem","__CLIENT__","document","getElementById"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Multilingual/ManageTranslations.jsx"],"sourcesContent":["import React from 'react';\nimport { Button, Container, Segment, Table } from 'semantic-ui-react';\nimport { Helmet } from '@plone/volto/helpers';\nimport { flattenToAppURL, getBaseUrl, langmap } from '@plone/volto/helpers';\nimport { reduce } from 'lodash';\nimport { Link, useLocation } from 'react-router-dom';\nimport { Icon, Toast, Toolbar } from '@plone/volto/components';\nimport config from '@plone/volto/registry';\n\nimport withObjectBrowser from '@plone/volto/components/manage/Sidebar/ObjectBrowser';\nimport {\n  deleteLinkTranslation,\n  getContent,\n  linkTranslation,\n} from '@plone/volto/actions';\nimport { defineMessages, FormattedMessage, useIntl } from 'react-intl';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Portal } from 'react-portal';\nimport { toast } from 'react-toastify';\n\nimport addSVG from '@plone/volto/icons/add.svg';\nimport backSVG from '@plone/volto/icons/back.svg';\nimport linkSVG from '@plone/volto/icons/link.svg';\nimport unlinkSVG from '@plone/volto/icons/unlink.svg';\n\nconst messages = defineMessages({\n  success: {\n    id: 'Success',\n    defaultMessage: 'Success',\n  },\n  linked: {\n    id: 'Translation linked',\n    defaultMessage: 'Translation linked',\n  },\n  unlinked: {\n    id: 'Translation linking removed',\n    defaultMessage: 'Translation linking removed',\n  },\n  link: {\n    id: 'Link translation for',\n    defaultMessage: 'Link translation for',\n  },\n  unlink: {\n    id: 'Unlink translation for',\n    defaultMessage: 'Unlink translation for',\n  },\n  ManageTranslations: {\n    id: 'Manage Translations',\n    defaultMessage: 'Manage Translations',\n  },\n  ManageTranslationsTitle: {\n    id: 'Manage translations for {title}',\n    defaultMessage: 'Manage translations for {title}',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n});\n\nconst ManageTranslations = (props) => {\n  const intl = useIntl();\n  const pathname = useLocation().pathname;\n  const content = useSelector((state) => state.content.data);\n  const dispatch = useDispatch();\n\n  const { isObjectBrowserOpen, openObjectBrowser } = props;\n\n  const currentSelectedItem = React.useRef(null);\n\n  React.useEffect(() => {\n    if (!content) {\n      dispatch(getContent(getBaseUrl(pathname)));\n    }\n  }, [dispatch, content, pathname]);\n\n  React.useEffect(() => {\n    // Only execute the link API call on the final item selected, once the ObjectBrowser\n    // is closed\n    if (!isObjectBrowserOpen && currentSelectedItem.current) {\n      dispatch(\n        linkTranslation(\n          flattenToAppURL(content['@id']),\n          currentSelectedItem.current,\n        ),\n      )\n        .then((resp) => {\n          toast.success(\n            <Toast\n              success\n              title={intl.formatMessage(messages.success)}\n              content={intl.formatMessage(messages.linked)}\n            />,\n          );\n          dispatch(getContent(getBaseUrl(pathname)));\n        })\n        .catch((error) => {\n          // TODO: The true error sent by the API is shadowed by the superagent one\n          // Update this when this issue is fixed.\n          const shadowedError = JSON.parse(error.response.text);\n          toast.error(\n            <Toast\n              error\n              title={shadowedError.error.type}\n              content={shadowedError.error.message}\n            />,\n            { toastId: 'linkFailed' },\n          );\n        });\n    }\n    /* eslint-disable react-hooks/exhaustive-deps */\n  }, [isObjectBrowserOpen]);\n\n  const translations = content &&\n    content['@components'].translations.items && {\n      [content.language.token]: {\n        url: content['@id'],\n      },\n      ...reduce(\n        content['@components'].translations.items,\n        (acc, value) => {\n          return { ...acc, [value.language]: { url: value['@id'] } };\n        },\n        {},\n      ),\n    };\n\n  function onSelectTarget(target) {\n    // We store the selection temporarily on the component, because we don't want it to\n    // execute it right away, since that will lead into duplicate link requests and we\n    // only want the last to get through\n    currentSelectedItem.current = target;\n  }\n\n  function onDeleteTranslation(lang) {\n    dispatch(deleteLinkTranslation(flattenToAppURL(content['@id']), lang))\n      .then((resp) => {\n        toast.success(\n          <Toast\n            success\n            title={intl.formatMessage(messages.success)}\n            content={intl.formatMessage(messages.unlinked)}\n          />,\n        );\n        dispatch(getContent(getBaseUrl(pathname)));\n      })\n      .catch((error) => {\n        // TODO: The true error sent by the API is shadowed by the superagent one\n        // Update this when this issue is fixed.\n        const shadowedError = JSON.parse(error.response.text);\n        toast.error(\n          <Toast\n            error\n            title={shadowedError.error.type}\n            content={shadowedError.error.message}\n          />,\n          { toastId: 'linkFailed' },\n        );\n      });\n  }\n\n  return (\n    <Container id=\"page-manage-translations\">\n      <Helmet title={intl.formatMessage(messages.ManageTranslations)} />\n      <Segment.Group raised>\n        <Segment className=\"primary\">\n          <FormattedMessage\n            id=\"Manage translations for {title}\"\n            defaultMessage=\"Manage translations for {title}\"\n            values={{ title: <q>{content.title}</q> }}\n          />\n        </Segment>\n        {content && (\n          <Table selectable compact singleLine attached>\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell>Language</Table.HeaderCell>\n                <Table.HeaderCell>Path</Table.HeaderCell>\n                <Table.HeaderCell textAlign=\"right\">Tools</Table.HeaderCell>\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {config.settings.supportedLanguages.map((lang) => (\n                <Table.Row key={lang}>\n                  <Table.Cell collapsing>\n                    {lang === content.language.token ? (\n                      <strong>{langmap[lang].nativeName}</strong>\n                    ) : (\n                      langmap[lang].nativeName\n                    )}\n                  </Table.Cell>\n                  <Table.Cell>\n                    <Link to={flattenToAppURL(translations[lang]?.url || '')}>\n                      {flattenToAppURL(translations[lang]?.url || '')}\n                    </Link>\n                  </Table.Cell>\n                  <Table.Cell\n                    textAlign=\"right\"\n                    className=\"manage-multilingual-tools\"\n                  >\n                    <Button.Group>\n                      <Button\n                        basic\n                        icon\n                        disabled={\n                          lang === content.language.token ||\n                          translations?.[lang]\n                        }\n                        as={Link}\n                        to={{\n                          pathname: `${pathname}/create-translation`,\n                          state: {\n                            type: content['@type'],\n                            translationOf: flattenToAppURL(content['@id']),\n                            language: lang,\n                          },\n                        }}\n                      >\n                        <Icon name={addSVG} size=\"24px\" />\n                      </Button>\n                    </Button.Group>\n                    {translations?.[lang] ? (\n                      <Button.Group>\n                        <Button\n                          aria-label={`${intl.formatMessage(\n                            messages.unlink,\n                          )} ${langmap[lang].nativeName.toLowerCase()}`}\n                          basic\n                          icon\n                          disabled={lang === content.language.token}\n                          onClick={() => onDeleteTranslation(lang)}\n                        >\n                          <Icon\n                            name={\n                              lang === content.language.token\n                                ? linkSVG\n                                : unlinkSVG\n                            }\n                            size=\"24px\"\n                          />\n                        </Button>\n                      </Button.Group>\n                    ) : (\n                      <Button.Group>\n                        <Button\n                          aria-label={`${intl.formatMessage(\n                            messages.link,\n                          )} ${langmap[lang].nativeName.toLowerCase()}`}\n                          basic\n                          icon\n                          disabled={lang === content.language.token}\n                          onClick={() =>\n                            openObjectBrowser({\n                              mode: 'link',\n                              overlay: true,\n                              onSelectItem: (url) => {\n                                onSelectTarget(url, isObjectBrowserOpen);\n                              },\n                            })\n                          }\n                        >\n                          <Icon name={linkSVG} size=\"24px\" />\n                        </Button>\n                      </Button.Group>\n                    )}\n                  </Table.Cell>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n        )}\n        {__CLIENT__ && (\n          <Portal node={document.getElementById('toolbar')}>\n            <Toolbar\n              pathname={pathname}\n              hideDefaultViewButtons\n              inner={\n                <Link to={`${getBaseUrl(pathname)}`} className=\"item\">\n                  <Icon\n                    name={backSVG}\n                    className=\"contents circled\"\n                    size=\"30px\"\n                    title={intl.formatMessage(messages.back)}\n                  />\n                </Link>\n              }\n            />\n          </Portal>\n        )}\n      </Segment.Group>\n    </Container>\n  );\n};\n\nexport default withObjectBrowser(ManageTranslations);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Success","defaultMessage":"Success"},{"id":"Translation linked","defaultMessage":"Translation linked"},{"id":"Translation linking removed","defaultMessage":"Translation linking removed"},{"id":"Link translation for","defaultMessage":"Link translation for"},{"id":"Unlink translation for","defaultMessage":"Unlink translation for"},{"id":"Manage Translations","defaultMessage":"Manage Translations"},{"id":"Manage translations for {title}","defaultMessage":"Manage translations for {title}"},{"id":"Back","defaultMessage":"Back"}]}},"sourceType":"module","externalDependencies":[]}