{"ast":null,"code":"var SECOND = 1000;\nvar MINUTE = SECOND * 60;\nvar HOUR = MINUTE * 60;\nvar DAY = HOUR * 24;\nvar MONTH = DAY * 30;\nvar YEAR = DAY * 365; // ? is this safe or should it be more accurate\n\nexport var short_date_format = {\n  // 12/9/2021\n  year: 'numeric',\n  month: 'numeric',\n  day: 'numeric'\n};\nexport var short_date_and_time_format = {\n  // 12/9/21, 10:39 AM\n  dateStyle: 'short',\n  timeStyle: 'short'\n};\nexport var long_date_format = {\n  // Thursday, December 9, 2021 at 10:39 AM\n  dateStyle: 'full',\n  timeStyle: 'short'\n};\nexport var toDate = function toDate(d) {\n  return ['string', 'number'].includes(typeof d) ? new Date(d) : d;\n};\n\n/**\n * Friendly formatting for dates\n */\nexport function formatDate(_ref) {\n  var date = _ref.date,\n    format = _ref.format,\n    _ref$locale = _ref.locale,\n    locale = _ref$locale === void 0 ? 'en' : _ref$locale,\n    _long = _ref[\"long\"],\n    includeTime = _ref.includeTime,\n    _ref$formatToParts = _ref.formatToParts,\n    formatToParts = _ref$formatToParts === void 0 ? false : _ref$formatToParts;\n  date = toDate(date);\n  format = format ? format : _long && !includeTime ? long_date_format : includeTime ? short_date_and_time_format : short_date_format;\n  var formatter = new Intl.DateTimeFormat(locale, format);\n  return formatToParts ? formatter.formatToParts(date) : formatter.format(date);\n}\nexport function formatRelativeDate(_ref2) {\n  var date = _ref2.date,\n    _ref2$locale = _ref2.locale,\n    locale = _ref2$locale === void 0 ? 'en' : _ref2$locale,\n    relativeTo = _ref2.relativeTo,\n    _ref2$style = _ref2.style,\n    style = _ref2$style === void 0 ? 'long' : _ref2$style,\n    _ref2$formatToParts = _ref2.formatToParts,\n    formatToParts = _ref2$formatToParts === void 0 ? false : _ref2$formatToParts;\n  date = toDate(date);\n  relativeTo = toDate(relativeTo || new Date());\n  var deltaMiliTime = date.getTime() - relativeTo.getTime();\n  var absDeltaMiliTime = Math.abs(deltaMiliTime);\n  var deltaSeconds = absDeltaMiliTime / SECOND;\n  var deltaMinutes = absDeltaMiliTime / MINUTE;\n  var deltaHours = absDeltaMiliTime / HOUR;\n  var deltaDays = absDeltaMiliTime / DAY;\n  var deltaMonths = absDeltaMiliTime / MONTH;\n  var deltaYears = absDeltaMiliTime / YEAR;\n  var deltas = [deltaYears, deltaMonths, deltaDays, deltaHours, deltaMinutes, deltaSeconds];\n  var pos = deltas.map(Math.round).findIndex(function (d) {\n    return d > 0;\n  });\n  var tag = ['years', 'months', 'days', 'hours', 'minutes', 'seconds'][pos];\n  var formatter = new Intl.RelativeTimeFormat(locale, {\n    numeric: 'auto',\n    style: style\n  });\n  var v = Math.round(deltaMiliTime < 0 ? -1 * deltas[pos] : deltas[pos]);\n  // console.log({ date, relativeTo, v });\n\n  return isNaN(v) ? '' : formatToParts ? formatter.formatToParts(v, tag) : formatter.format(v, tag); // use \"now\" ?\n}","map":{"version":3,"names":["SECOND","MINUTE","HOUR","DAY","MONTH","YEAR","short_date_format","year","month","day","short_date_and_time_format","dateStyle","timeStyle","long_date_format","toDate","d","includes","Date","formatDate","date","format","locale","long","includeTime","formatToParts","formatter","Intl","DateTimeFormat","formatRelativeDate","relativeTo","style","deltaMiliTime","getTime","absDeltaMiliTime","Math","abs","deltaSeconds","deltaMinutes","deltaHours","deltaDays","deltaMonths","deltaYears","deltas","pos","map","round","findIndex","tag","RelativeTimeFormat","numeric","v","isNaN"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/helpers/Utils/Date.js"],"sourcesContent":["const SECOND = 1000;\nconst MINUTE = SECOND * 60;\nconst HOUR = MINUTE * 60;\nconst DAY = HOUR * 24;\nconst MONTH = DAY * 30;\nconst YEAR = DAY * 365; // ? is this safe or should it be more accurate\n\nexport const short_date_format = {\n  // 12/9/2021\n  year: 'numeric',\n  month: 'numeric',\n  day: 'numeric',\n};\n\nexport const short_date_and_time_format = {\n  // 12/9/21, 10:39 AM\n  dateStyle: 'short',\n  timeStyle: 'short',\n};\n\nexport const long_date_format = {\n  // Thursday, December 9, 2021 at 10:39 AM\n  dateStyle: 'full',\n  timeStyle: 'short',\n};\n\nexport const toDate = (d) =>\n  ['string', 'number'].includes(typeof d) ? new Date(d) : d;\n\n/**\n * Friendly formatting for dates\n */\nexport function formatDate({\n  date, // Date() or  '2022-01-03T19:26:08.999Z'\n  format, // format object, see https://tc39.es/ecma402/#datetimeformat-objects\n  locale = 'en',\n  long, // true if format should be in long readable form.\n  includeTime, // true if short date format should include time\n  formatToParts = false,\n}) {\n  date = toDate(date);\n  format = format\n    ? format\n    : long && !includeTime\n    ? long_date_format\n    : includeTime\n    ? short_date_and_time_format\n    : short_date_format;\n\n  const formatter = new Intl.DateTimeFormat(locale, format);\n  return formatToParts ? formatter.formatToParts(date) : formatter.format(date);\n}\n\nexport function formatRelativeDate({\n  date,\n  locale = 'en',\n  relativeTo,\n  style = 'long', // long|short|narrow\n  formatToParts = false,\n}) {\n  date = toDate(date);\n  relativeTo = toDate(relativeTo || new Date());\n\n  const deltaMiliTime = date.getTime() - relativeTo.getTime();\n  const absDeltaMiliTime = Math.abs(deltaMiliTime);\n\n  const deltaSeconds = absDeltaMiliTime / SECOND;\n  const deltaMinutes = absDeltaMiliTime / MINUTE;\n  const deltaHours = absDeltaMiliTime / HOUR;\n  const deltaDays = absDeltaMiliTime / DAY;\n  const deltaMonths = absDeltaMiliTime / MONTH;\n  const deltaYears = absDeltaMiliTime / YEAR;\n  const deltas = [\n    deltaYears,\n    deltaMonths,\n    deltaDays,\n    deltaHours,\n    deltaMinutes,\n    deltaSeconds,\n  ];\n  const pos = deltas.map(Math.round).findIndex((d) => d > 0);\n  const tag = ['years', 'months', 'days', 'hours', 'minutes', 'seconds'][pos];\n\n  const formatter = new Intl.RelativeTimeFormat(locale, {\n    numeric: 'auto',\n    style,\n  });\n\n  const v = Math.round(deltaMiliTime < 0 ? -1 * deltas[pos] : deltas[pos]);\n  // console.log({ date, relativeTo, v });\n\n  return isNaN(v)\n    ? ''\n    : formatToParts\n    ? formatter.formatToParts(v, tag)\n    : formatter.format(v, tag); // use \"now\" ?\n}\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}