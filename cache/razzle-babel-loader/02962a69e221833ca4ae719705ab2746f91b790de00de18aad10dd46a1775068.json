{"ast":null,"code":"import _first from \"lodash/first\";\nimport _some from \"lodash/some\";\nimport _includes from \"lodash/includes\";\nimport _find from \"lodash/find\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n/* eslint no-console: [\"error\", { allow: [\"error\", \"warn\"] }] */\nimport { Editor, Transforms, Text } from 'slate'; // Range, RangeRef\nimport config from '@plone/volto/registry';\nimport { getBlocksFieldname, getBlocksLayoutFieldname } from '@plone/volto/helpers';\nimport { makeEditor } from './editor';\n\n// case sensitive; first in an inner array is the default and preffered format\n// in that array of formats\nconst formatAliases = [['strong', 'b'], ['em', 'i'], ['del', 's']];\n\n/**\n * Excerpt from Slate documentation, kept here for posterity:\n * See https://docs.slatejs.org/concepts/11-normalizing#built-in-constraints\n\n## Built-in Constraints\n\nSlate editors come with a few built-in constraints out of the box. These\nconstraints are there to make working with content much more predictable than\nstandard contenteditable. All of the built-in logic in Slate depends on these\nconstraints, so unfortunately you cannot omit them. They are...\n\n- All Element nodes must contain at least one Text descendant. If an element node\ndoes not contain any children, an empty text node will be added as its only\nchild. This constraint exists to ensure that the selection's anchor and focus\npoints (which rely on referencing text nodes) can always be placed inside any\nnode. With this, empty elements (or void elements) wouldn't be selectable.\n\n- Two adjacent texts with the same custom properties will be merged. If two\nadjacent text nodes have the same formatting, they're merged into a single text\nnode with a combined text string of the two. This exists to prevent the text\nnodes from only ever expanding in count in the document, since both adding and\nremoving formatting results in splitting text nodes.\n\n- Block nodes can only contain other blocks, or inline and text nodes. For\nexample, a paragraph block cannot have another paragraph block element and\na link inline element as children at the same time. The type of children\nallowed is determined by the first child, and any other non-conforming children\nare removed. This ensures that common richtext behaviors like \"splitting\na block in two\" function consistently.\n\n- Inline nodes cannot be the first or last child of a parent block, nor can it\nbe next to another inline node in the children array. If this is the case, an\nempty text node will be added to correct this to be in compliance with the\nconstraint.\n\n- The top-level editor node can only contain block nodes. If any of the\ntop-level children are inline or text nodes they will be removed. This ensures\nthat there are always block nodes in the editor so that behaviors like\n\"splitting a block in two\" work as expected.\n\n- These default constraints are all mandated because they make working with\nSlate documents much more predictable.\n\nAlthough these constraints are the best we've come up with now, we're always\nlooking for ways to have Slate's built-in constraints be less constraining if\npossibleâ€”as long as it keeps standard behaviors easy to reason about. If you\ncome up with a way to reduce or remove a built-in constraint with a different\napproach, we're all ears!\n *\n */\n\nexport const normalizeExternalData = (editor, nodes) => {\n  let fakeEditor = makeEditor({\n    extensions: editor._installedPlugins\n  });\n  fakeEditor.children = nodes;\n  // put all the non-blocks (e.g. images which are inline Elements) inside p-s\n  Editor.withoutNormalizing(fakeEditor, () => {\n    //for htmlSlateWidget compatibility\n    if (nodes && !Editor.isBlock(fakeEditor, nodes[0])) Transforms.wrapNodes(fakeEditor, {\n      type: 'p'\n    }, {\n      at: [],\n      match: (node, path) => !Editor.isEditor(node) && !Editor.isBlock(fakeEditor, node) || fakeEditor.isInline(node),\n      mode: 'highest'\n    });\n  });\n  Editor.normalize(fakeEditor, {\n    force: true\n  });\n  return fakeEditor.children;\n};\n\n/**\n * Is it text? Is it whitespace (space, newlines, tabs) ?\n *\n */\nexport const isWhitespace = c => {\n  return typeof c === 'string' && c.replace(/\\s/g, '').replace(/\\t/g, '').replace(/\\n/g, '').length === 0;\n};\nexport function createDefaultBlock(children) {\n  return {\n    type: config.settings.slate.defaultBlockType,\n    children: children || [{\n      text: ''\n    }]\n  };\n}\nexport function createBlock(type, children) {\n  return {\n    type,\n    children: children || [{\n      text: ''\n    }]\n  };\n}\nexport function createEmptyParagraph() {\n  // TODO: rename to createEmptyBlock\n  return {\n    type: config.settings.slate.defaultBlockType,\n    children: [{\n      text: ''\n    }]\n  };\n}\nexport const isSingleBlockTypeActive = (editor, format) => {\n  const [match] = Editor.nodes(editor, {\n    match: n => n.type === format\n  });\n  return !!match;\n};\nexport const isBlockActive = (editor, format) => {\n  const aliasList = _find(formatAliases, x => _includes(x, format));\n  if (aliasList) {\n    const aliasFound = _some(aliasList, y => {\n      return isSingleBlockTypeActive(editor, y);\n    });\n    if (aliasFound) {\n      return true;\n    }\n  }\n  return isSingleBlockTypeActive(editor, format);\n};\nexport const getBlockTypeContextData = (editor, format) => {\n  let isActive, defaultFormat, matcher;\n  const aliasList = _find(formatAliases, x => _includes(x, format));\n  if (aliasList) {\n    const aliasFound = _some(aliasList, y => {\n      return isSingleBlockTypeActive(editor, y);\n    });\n    if (aliasFound) {\n      isActive = true;\n      defaultFormat = _first(aliasList);\n      matcher = n => _includes(aliasList, n.type);\n      return {\n        isActive,\n        defaultFormat,\n        matcher\n      };\n    }\n  }\n  isActive = isBlockActive(editor, format);\n  defaultFormat = format;\n  matcher = n => n.type === format;\n  return {\n    isActive,\n    defaultFormat,\n    matcher\n  };\n};\nexport const toggleInlineFormat = (editor, format) => {\n  const {\n    isActive,\n    defaultFormat,\n    matcher\n  } = getBlockTypeContextData(editor, format);\n  if (isActive) {\n    const rangeRef = Editor.rangeRef(editor, editor.selection);\n    Transforms.unwrapNodes(editor, {\n      match: matcher,\n      split: false\n    });\n    const newSel = JSON.parse(JSON.stringify(rangeRef.current));\n    Transforms.select(editor, newSel);\n    editor.setSavedSelection(newSel);\n    // editor.savedSelection = newSel;\n    return;\n  }\n\n  // `children` property is added automatically as an empty array then\n  // normalized\n  const block = {\n    type: defaultFormat\n  };\n  Transforms.wrapNodes(editor, block, {\n    split: true\n  });\n};\nexport const toggleBlock = (editor, format, allowedChildren) => {\n  // We have 6 boolean variables which need to be accounted for.\n  // See https://docs.google.com/spreadsheets/d/1mVeMuqSTMABV2BhoHPrPAFjn7zUksbNgZ9AQK_dcd3U/edit?usp=sharing\n  const {\n    slate\n  } = config.settings;\n  const {\n    listTypes\n  } = slate;\n  const isListItem = isBlockActive(editor, slate.listItemType);\n  const isActive = isBlockActive(editor, format);\n  const wantsList = listTypes.includes(format);\n  if (isListItem && !wantsList) {\n    toggleFormatAsListItem(editor, format);\n  } else if (isListItem && wantsList && !isActive) {\n    switchListType(editor, format);\n  } else if (!isListItem && wantsList) {\n    changeBlockToList(editor, format);\n  } else if (!isListItem && !wantsList) {\n    toggleFormat(editor, format, allowedChildren);\n  } else if (isListItem && wantsList && isActive) {\n    clearFormatting(editor);\n  } else {\n    console.warn('toggleBlock case not covered, please examine:', {\n      wantsList,\n      isActive,\n      isListItem\n    });\n  }\n};\n\n/*\n * Applies a block format to a list item. Will split the list\n */\nexport const toggleFormatAsListItem = (editor, format) => {\n  Transforms.setNodes(editor, {\n    type: format\n  });\n  Editor.normalize(editor);\n};\n\n/*\n * Toggles between list types by exploding the block\n */\nexport const switchListType = (editor, format) => {\n  const {\n    slate\n  } = config.settings;\n  Transforms.unwrapNodes(editor, {\n    match: n => slate.listTypes.includes(n.type),\n    split: true\n  });\n  const block = {\n    type: format,\n    children: []\n  };\n  Transforms.wrapNodes(editor, block);\n};\nexport const changeBlockToList = (editor, format) => {\n  const {\n    slate\n  } = config.settings;\n  const [match] = Editor.nodes(editor, {\n    match: n => n.type === slate.listItemType\n  });\n  if (!match) {\n    Transforms.setNodes(editor, {\n      type: slate.listItemType\n      // id: nanoid(8),\n    });\n  }\n\n  // `children` property is added automatically as an empty array then\n  // normalized\n  const block = {\n    type: format\n  };\n  Transforms.wrapNodes(editor, block);\n};\nexport const toggleFormat = (editor, format, allowedChildren) => {\n  const {\n    slate\n  } = config.settings;\n  const isActive = isBlockActive(editor, format);\n  const type = isActive ? slate.defaultBlockType : format;\n  Transforms.setNodes(editor, {\n    type\n  });\n  (allowedChildren === null || allowedChildren === void 0 ? void 0 : allowedChildren.length) && Transforms.unwrapNodes(editor, {\n    mode: 'all',\n    at: [0],\n    match: (n, path) => {\n      const isMatch = path.length > 1 &&\n      // we don't deal with the parent nodes\n      !(Text.isText(n) || allowedChildren.includes(n === null || n === void 0 ? void 0 : n.type));\n      return isMatch;\n    }\n  });\n};\n\n/**\n * @param {object} properties A prop received by the View component\n *  which is read by the `getBlocksFieldname` and\n * `getBlocksLayoutFieldname` Volto helpers to produce the return value.\n * @returns {Array} All the blocks data taken from the Volto form.\n */\nexport const getAllBlocks = (properties, blocks) => {\n  const blocksFieldName = getBlocksFieldname(properties);\n  const blocksLayoutFieldname = getBlocksLayoutFieldname(properties);\n  for (const n of (properties === null || properties === void 0 ? void 0 : (_properties$blocksLay = properties[blocksLayoutFieldname]) === null || _properties$blocksLay === void 0 ? void 0 : _properties$blocksLay.items) || []) {\n    var _properties$blocksLay, _block$data, _block$data2;\n    const block = properties[blocksFieldName][n];\n    // TODO Make this configurable via block config getBlocks\n    if (block !== null && block !== void 0 && (_block$data = block.data) !== null && _block$data !== void 0 && _block$data[blocksLayoutFieldname] && block !== null && block !== void 0 && (_block$data2 = block.data) !== null && _block$data2 !== void 0 && _block$data2[blocksFieldName]) {\n      getAllBlocks(block.data, blocks);\n    } else if (block !== null && block !== void 0 && block[blocksLayoutFieldname] && block !== null && block !== void 0 && block[blocksFieldName]) {\n      getAllBlocks(block, blocks);\n    }\n    blocks.push(_objectSpread({\n      id: n\n    }, block));\n  }\n  return blocks;\n};\nexport const clearFormatting = editor => {\n  const {\n    slate\n  } = config.settings;\n  Transforms.setNodes(editor, {\n    type: slate.defaultBlockType\n  });\n  Transforms.unwrapNodes(editor, {\n    match: n => n.type && n.type !== slate.defaultBlockType,\n    mode: 'all',\n    split: false\n  });\n};","map":{"version":3,"names":["Editor","Transforms","Text","config","getBlocksFieldname","getBlocksLayoutFieldname","makeEditor","formatAliases","normalizeExternalData","editor","nodes","fakeEditor","extensions","_installedPlugins","children","withoutNormalizing","isBlock","wrapNodes","type","at","match","node","path","isEditor","isInline","mode","normalize","force","isWhitespace","c","replace","length","createDefaultBlock","settings","slate","defaultBlockType","text","createBlock","createEmptyParagraph","isSingleBlockTypeActive","format","n","isBlockActive","aliasList","x","aliasFound","y","getBlockTypeContextData","isActive","defaultFormat","matcher","toggleInlineFormat","rangeRef","selection","unwrapNodes","split","newSel","JSON","parse","stringify","current","select","setSavedSelection","block","toggleBlock","allowedChildren","listTypes","isListItem","listItemType","wantsList","includes","toggleFormatAsListItem","switchListType","changeBlockToList","toggleFormat","clearFormatting","console","warn","setNodes","isMatch","isText","getAllBlocks","properties","blocks","blocksFieldName","blocksLayoutFieldname","items","data","push","id"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/packages/volto-slate/src/utils/blocks.js"],"sourcesContent":["/* eslint no-console: [\"error\", { allow: [\"error\", \"warn\"] }] */\nimport { Editor, Transforms, Text } from 'slate'; // Range, RangeRef\nimport config from '@plone/volto/registry';\nimport {\n  getBlocksFieldname,\n  getBlocksLayoutFieldname,\n} from '@plone/volto/helpers';\nimport _ from 'lodash';\nimport { makeEditor } from './editor';\n\n// case sensitive; first in an inner array is the default and preffered format\n// in that array of formats\nconst formatAliases = [\n  ['strong', 'b'],\n  ['em', 'i'],\n  ['del', 's'],\n];\n\n/**\n * Excerpt from Slate documentation, kept here for posterity:\n * See https://docs.slatejs.org/concepts/11-normalizing#built-in-constraints\n\n## Built-in Constraints\n\nSlate editors come with a few built-in constraints out of the box. These\nconstraints are there to make working with content much more predictable than\nstandard contenteditable. All of the built-in logic in Slate depends on these\nconstraints, so unfortunately you cannot omit them. They are...\n\n- All Element nodes must contain at least one Text descendant. If an element node\ndoes not contain any children, an empty text node will be added as its only\nchild. This constraint exists to ensure that the selection's anchor and focus\npoints (which rely on referencing text nodes) can always be placed inside any\nnode. With this, empty elements (or void elements) wouldn't be selectable.\n\n- Two adjacent texts with the same custom properties will be merged. If two\nadjacent text nodes have the same formatting, they're merged into a single text\nnode with a combined text string of the two. This exists to prevent the text\nnodes from only ever expanding in count in the document, since both adding and\nremoving formatting results in splitting text nodes.\n\n- Block nodes can only contain other blocks, or inline and text nodes. For\nexample, a paragraph block cannot have another paragraph block element and\na link inline element as children at the same time. The type of children\nallowed is determined by the first child, and any other non-conforming children\nare removed. This ensures that common richtext behaviors like \"splitting\na block in two\" function consistently.\n\n- Inline nodes cannot be the first or last child of a parent block, nor can it\nbe next to another inline node in the children array. If this is the case, an\nempty text node will be added to correct this to be in compliance with the\nconstraint.\n\n- The top-level editor node can only contain block nodes. If any of the\ntop-level children are inline or text nodes they will be removed. This ensures\nthat there are always block nodes in the editor so that behaviors like\n\"splitting a block in two\" work as expected.\n\n- These default constraints are all mandated because they make working with\nSlate documents much more predictable.\n\nAlthough these constraints are the best we've come up with now, we're always\nlooking for ways to have Slate's built-in constraints be less constraining if\npossibleâ€”as long as it keeps standard behaviors easy to reason about. If you\ncome up with a way to reduce or remove a built-in constraint with a different\napproach, we're all ears!\n *\n */\n\nexport const normalizeExternalData = (editor, nodes) => {\n  let fakeEditor = makeEditor({ extensions: editor._installedPlugins });\n  fakeEditor.children = nodes;\n  // put all the non-blocks (e.g. images which are inline Elements) inside p-s\n  Editor.withoutNormalizing(fakeEditor, () => {\n    //for htmlSlateWidget compatibility\n    if (nodes && !Editor.isBlock(fakeEditor, nodes[0]))\n      Transforms.wrapNodes(\n        fakeEditor,\n        { type: 'p' },\n        {\n          at: [],\n          match: (node, path) =>\n            (!Editor.isEditor(node) && !Editor.isBlock(fakeEditor, node)) ||\n            fakeEditor.isInline(node),\n          mode: 'highest',\n        },\n      );\n  });\n\n  Editor.normalize(fakeEditor, { force: true });\n\n  return fakeEditor.children;\n};\n\n/**\n * Is it text? Is it whitespace (space, newlines, tabs) ?\n *\n */\nexport const isWhitespace = (c) => {\n  return (\n    typeof c === 'string' &&\n    c.replace(/\\s/g, '').replace(/\\t/g, '').replace(/\\n/g, '').length === 0\n  );\n};\n\nexport function createDefaultBlock(children) {\n  return {\n    type: config.settings.slate.defaultBlockType,\n    children: children || [{ text: '' }],\n  };\n}\n\nexport function createBlock(type, children) {\n  return {\n    type,\n    children: children || [{ text: '' }],\n  };\n}\n\nexport function createEmptyParagraph() {\n  // TODO: rename to createEmptyBlock\n  return {\n    type: config.settings.slate.defaultBlockType,\n    children: [{ text: '' }],\n  };\n}\n\nexport const isSingleBlockTypeActive = (editor, format) => {\n  const [match] = Editor.nodes(editor, {\n    match: (n) => n.type === format,\n  });\n\n  return !!match;\n};\n\nexport const isBlockActive = (editor, format) => {\n  const aliasList = _.find(formatAliases, (x) => _.includes(x, format));\n\n  if (aliasList) {\n    const aliasFound = _.some(aliasList, (y) => {\n      return isSingleBlockTypeActive(editor, y);\n    });\n\n    if (aliasFound) {\n      return true;\n    }\n  }\n\n  return isSingleBlockTypeActive(editor, format);\n};\n\nexport const getBlockTypeContextData = (editor, format) => {\n  let isActive, defaultFormat, matcher;\n\n  const aliasList = _.find(formatAliases, (x) => _.includes(x, format));\n\n  if (aliasList) {\n    const aliasFound = _.some(aliasList, (y) => {\n      return isSingleBlockTypeActive(editor, y);\n    });\n\n    if (aliasFound) {\n      isActive = true;\n      defaultFormat = _.first(aliasList);\n      matcher = (n) => _.includes(aliasList, n.type);\n\n      return { isActive, defaultFormat, matcher };\n    }\n  }\n\n  isActive = isBlockActive(editor, format);\n  defaultFormat = format;\n  matcher = (n) => n.type === format;\n\n  return { isActive, defaultFormat, matcher };\n};\n\nexport const toggleInlineFormat = (editor, format) => {\n  const { isActive, defaultFormat, matcher } = getBlockTypeContextData(\n    editor,\n    format,\n  );\n\n  if (isActive) {\n    const rangeRef = Editor.rangeRef(editor, editor.selection);\n\n    Transforms.unwrapNodes(editor, {\n      match: matcher,\n      split: false,\n    });\n\n    const newSel = JSON.parse(JSON.stringify(rangeRef.current));\n\n    Transforms.select(editor, newSel);\n    editor.setSavedSelection(newSel);\n    // editor.savedSelection = newSel;\n    return;\n  }\n\n  // `children` property is added automatically as an empty array then\n  // normalized\n  const block = { type: defaultFormat };\n  Transforms.wrapNodes(editor, block, { split: true });\n};\n\nexport const toggleBlock = (editor, format, allowedChildren) => {\n  // We have 6 boolean variables which need to be accounted for.\n  // See https://docs.google.com/spreadsheets/d/1mVeMuqSTMABV2BhoHPrPAFjn7zUksbNgZ9AQK_dcd3U/edit?usp=sharing\n  const { slate } = config.settings;\n  const { listTypes } = slate;\n\n  const isListItem = isBlockActive(editor, slate.listItemType);\n  const isActive = isBlockActive(editor, format);\n  const wantsList = listTypes.includes(format);\n\n  if (isListItem && !wantsList) {\n    toggleFormatAsListItem(editor, format);\n  } else if (isListItem && wantsList && !isActive) {\n    switchListType(editor, format);\n  } else if (!isListItem && wantsList) {\n    changeBlockToList(editor, format);\n  } else if (!isListItem && !wantsList) {\n    toggleFormat(editor, format, allowedChildren);\n  } else if (isListItem && wantsList && isActive) {\n    clearFormatting(editor);\n  } else {\n    console.warn('toggleBlock case not covered, please examine:', {\n      wantsList,\n      isActive,\n      isListItem,\n    });\n  }\n};\n\n/*\n * Applies a block format to a list item. Will split the list\n */\nexport const toggleFormatAsListItem = (editor, format) => {\n  Transforms.setNodes(editor, {\n    type: format,\n  });\n\n  Editor.normalize(editor);\n};\n\n/*\n * Toggles between list types by exploding the block\n */\nexport const switchListType = (editor, format) => {\n  const { slate } = config.settings;\n  Transforms.unwrapNodes(editor, {\n    match: (n) => slate.listTypes.includes(n.type),\n    split: true,\n  });\n  const block = { type: format, children: [] };\n  Transforms.wrapNodes(editor, block);\n};\n\nexport const changeBlockToList = (editor, format) => {\n  const { slate } = config.settings;\n  const [match] = Editor.nodes(editor, {\n    match: (n) => n.type === slate.listItemType,\n  });\n\n  if (!match) {\n    Transforms.setNodes(editor, {\n      type: slate.listItemType,\n      // id: nanoid(8),\n    });\n  }\n\n  // `children` property is added automatically as an empty array then\n  // normalized\n  const block = { type: format };\n  Transforms.wrapNodes(editor, block);\n};\n\nexport const toggleFormat = (editor, format, allowedChildren) => {\n  const { slate } = config.settings;\n  const isActive = isBlockActive(editor, format);\n  const type = isActive ? slate.defaultBlockType : format;\n  Transforms.setNodes(editor, {\n    type,\n  });\n  allowedChildren?.length &&\n    Transforms.unwrapNodes(editor, {\n      mode: 'all',\n      at: [0],\n      match: (n, path) => {\n        const isMatch =\n          path.length > 1 && // we don't deal with the parent nodes\n          !(Text.isText(n) || allowedChildren.includes(n?.type));\n        return isMatch;\n      },\n    });\n};\n\n/**\n * @param {object} properties A prop received by the View component\n *  which is read by the `getBlocksFieldname` and\n * `getBlocksLayoutFieldname` Volto helpers to produce the return value.\n * @returns {Array} All the blocks data taken from the Volto form.\n */\nexport const getAllBlocks = (properties, blocks) => {\n  const blocksFieldName = getBlocksFieldname(properties);\n  const blocksLayoutFieldname = getBlocksLayoutFieldname(properties);\n\n  for (const n of properties?.[blocksLayoutFieldname]?.items || []) {\n    const block = properties[blocksFieldName][n];\n    // TODO Make this configurable via block config getBlocks\n    if (\n      block?.data?.[blocksLayoutFieldname] &&\n      block?.data?.[blocksFieldName]\n    ) {\n      getAllBlocks(block.data, blocks);\n    } else if (block?.[blocksLayoutFieldname] && block?.[blocksFieldName]) {\n      getAllBlocks(block, blocks);\n    }\n    blocks.push({\n      id: n,\n      ...block,\n    });\n  }\n  return blocks;\n};\n\nexport const clearFormatting = (editor) => {\n  const { slate } = config.settings;\n  Transforms.setNodes(editor, {\n    type: slate.defaultBlockType,\n  });\n  Transforms.unwrapNodes(editor, {\n    match: (n) => n.type && n.type !== slate.defaultBlockType,\n    mode: 'all',\n    split: false,\n  });\n};\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}