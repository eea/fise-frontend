{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport { GET_SPARQL_DATA } from '../constants';\nconst initialState = {\n  error: null,\n  attachments: [],\n  loaded: false,\n  loading: false\n};\nexport default function sparql_data(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${GET_SPARQL_DATA}_PENDING`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: null,\n        loaded: false,\n        loading: true\n      });\n    case `${GET_SPARQL_DATA}_SUCCESS`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: null,\n        sparql_data: action.result.items,\n        loaded: true,\n        loading: false\n      });\n    case `${GET_SPARQL_DATA}_FAIL`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.error,\n        sparq_data: [],\n        loaded: false,\n        loading: false\n      });\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["GET_SPARQL_DATA","initialState","error","attachments","loaded","loading","sparql_data","state","action","type","result","items","sparq_data"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-datablocks/src/reducers/sparql_data.js"],"sourcesContent":["import { GET_SPARQL_DATA } from '../constants';\n\nconst initialState = {\n  error: null,\n  attachments: [],\n  loaded: false,\n  loading: false,\n};\n\nexport default function sparql_data(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${GET_SPARQL_DATA}_PENDING`:\n      return {\n        ...state,\n        error: null,\n        loaded: false,\n        loading: true,\n      };\n\n    case `${GET_SPARQL_DATA}_SUCCESS`:\n      return {\n        ...state,\n        error: null,\n        sparql_data: action.result.items,\n        loaded: true,\n        loading: false,\n      };\n\n    case `${GET_SPARQL_DATA}_FAIL`:\n      return {\n        ...state,\n        error: action.error,\n        sparq_data: [],\n        loaded: false,\n        loading: false,\n      };\n\n    default:\n      return state;\n  }\n}\n"],"mappings":";;;AAAA,SAASA,eAAe,QAAQ,cAAc;AAE9C,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,IAAI;EACXC,WAAW,EAAE,EAAE;EACfC,MAAM,EAAE,KAAK;EACbC,OAAO,EAAE;AACX,CAAC;AAED,eAAe,SAASC,WAAW,CAACC,KAAK,GAAGN,YAAY,EAAEO,MAAM,GAAG,CAAC,CAAC,EAAE;EACrE,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAM,GAAET,eAAgB,UAAS;MAC/B,uCACKO,KAAK;QACRL,KAAK,EAAE,IAAI;QACXE,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;MAAI;IAGjB,KAAM,GAAEL,eAAgB,UAAS;MAC/B,uCACKO,KAAK;QACRL,KAAK,EAAE,IAAI;QACXI,WAAW,EAAEE,MAAM,CAACE,MAAM,CAACC,KAAK;QAChCP,MAAM,EAAE,IAAI;QACZC,OAAO,EAAE;MAAK;IAGlB,KAAM,GAAEL,eAAgB,OAAM;MAC5B,uCACKO,KAAK;QACRL,KAAK,EAAEM,MAAM,CAACN,KAAK;QACnBU,UAAU,EAAE,EAAE;QACdR,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;MAAK;IAGlB;MACE,OAAOE,KAAK;EAAC;AAEnB"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}