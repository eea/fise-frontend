{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-plotlycharts/src/Blocks/Treemap/Edit.jsx\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport React, { Component } from 'react';\nimport { compose } from 'redux';\nimport { SidebarPortal } from '@plone/volto/components';\nimport InlineForm from '@plone/volto/components/manage/Form/InlineForm';\nimport { connectToProviderData } from '@eeacms/volto-datablocks/hocs';\nimport schema from './schema';\nimport TreemapView from './View';\nclass Edit extends Component {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"getSchema\", schema => {\n      if (!this.props.provider_data) return schema;\n      const provider_data = this.props.provider_data || {};\n      const choices = Object.keys(provider_data).map(n => [n, n]);\n      const newSchema = JSON.parse(JSON.stringify(schema));\n      newSchema.properties.size_column.choices = choices;\n      newSchema.properties.label_column.choices = choices;\n      newSchema.properties.parent_column.choices = choices;\n      return newSchema;\n    });\n  }\n  render() {\n    return __jsx(React.Fragment, null, __jsx(TreemapView, _extends({}, this.props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }\n    })), __jsx(SidebarPortal, {\n      selected: this.props.selected,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }\n    }, __jsx(InlineForm, {\n      schema: this.getSchema(schema),\n      title: schema.title,\n      onChangeField: (id, value) => {\n        this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n          [id]: value\n        }));\n      },\n      formData: this.props.data,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }\n    })));\n  }\n}\nexport default compose(connectToProviderData(props => ({\n  provider_url: props.data.url || props.data.provider_url\n})))(Edit);","map":{"version":3,"names":["React","Component","compose","SidebarPortal","InlineForm","connectToProviderData","schema","TreemapView","Edit","props","provider_data","choices","Object","keys","map","n","newSchema","JSON","parse","stringify","properties","size_column","label_column","parent_column","render","selected","getSchema","title","id","value","onChangeBlock","block","data","provider_url","url"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-plotlycharts/src/Blocks/Treemap/Edit.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport { compose } from 'redux';\n\nimport { SidebarPortal } from '@plone/volto/components';\nimport InlineForm from '@plone/volto/components/manage/Form/InlineForm';\nimport { connectToProviderData } from '@eeacms/volto-datablocks/hocs';\n\nimport schema from './schema';\nimport TreemapView from './View';\n\nclass Edit extends Component {\n  getSchema = (schema) => {\n    if (!this.props.provider_data) return schema;\n    const provider_data = this.props.provider_data || {};\n\n    const choices = Object.keys(provider_data).map((n) => [n, n]);\n\n    const newSchema = JSON.parse(JSON.stringify(schema));\n    newSchema.properties.size_column.choices = choices;\n    newSchema.properties.label_column.choices = choices;\n    newSchema.properties.parent_column.choices = choices;\n    return newSchema;\n  };\n\n  render() {\n    return (\n      <>\n        <TreemapView {...this.props} />\n\n        <SidebarPortal selected={this.props.selected}>\n          <InlineForm\n            schema={this.getSchema(schema)}\n            title={schema.title}\n            onChangeField={(id, value) => {\n              this.props.onChangeBlock(this.props.block, {\n                ...this.props.data,\n                [id]: value,\n              });\n            }}\n            formData={this.props.data}\n          />\n        </SidebarPortal>\n      </>\n    );\n  }\n}\n\nexport default compose(\n  connectToProviderData((props) => ({\n    provider_url: props.data.url || props.data.provider_url,\n  })),\n)(Edit);\n"],"mappings":";;;;;;AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,OAAO,QAAQ,OAAO;AAE/B,SAASC,aAAa,QAAQ,yBAAyB;AACvD,OAAOC,UAAU,MAAM,gDAAgD;AACvE,SAASC,qBAAqB,QAAQ,+BAA+B;AAErE,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,WAAW,MAAM,QAAQ;AAEhC,MAAMC,IAAI,SAASP,SAAS,CAAC;EAAA;IAAA;IAAA,mCACdK,MAAM,IAAK;MACtB,IAAI,CAAC,IAAI,CAACG,KAAK,CAACC,aAAa,EAAE,OAAOJ,MAAM;MAC5C,MAAMI,aAAa,GAAG,IAAI,CAACD,KAAK,CAACC,aAAa,IAAI,CAAC,CAAC;MAEpD,MAAMC,OAAO,GAAGC,MAAM,CAACC,IAAI,CAACH,aAAa,CAAC,CAACI,GAAG,CAAEC,CAAC,IAAK,CAACA,CAAC,EAAEA,CAAC,CAAC,CAAC;MAE7D,MAAMC,SAAS,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACb,MAAM,CAAC,CAAC;MACpDU,SAAS,CAACI,UAAU,CAACC,WAAW,CAACV,OAAO,GAAGA,OAAO;MAClDK,SAAS,CAACI,UAAU,CAACE,YAAY,CAACX,OAAO,GAAGA,OAAO;MACnDK,SAAS,CAACI,UAAU,CAACG,aAAa,CAACZ,OAAO,GAAGA,OAAO;MACpD,OAAOK,SAAS;IAClB,CAAC;EAAA;EAEDQ,MAAM,GAAG;IACP,OACE,4BACE,MAAC,WAAW,eAAK,IAAI,CAACf,KAAK;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAI,EAE/B,MAAC,aAAa;MAAC,QAAQ,EAAE,IAAI,CAACA,KAAK,CAACgB,QAAS;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAC3C,MAAC,UAAU;MACT,MAAM,EAAE,IAAI,CAACC,SAAS,CAACpB,MAAM,CAAE;MAC/B,KAAK,EAAEA,MAAM,CAACqB,KAAM;MACpB,aAAa,EAAE,CAACC,EAAE,EAAEC,KAAK,KAAK;QAC5B,IAAI,CAACpB,KAAK,CAACqB,aAAa,CAAC,IAAI,CAACrB,KAAK,CAACsB,KAAK,kCACpC,IAAI,CAACtB,KAAK,CAACuB,IAAI;UAClB,CAACJ,EAAE,GAAGC;QAAK,GACX;MACJ,CAAE;MACF,QAAQ,EAAE,IAAI,CAACpB,KAAK,CAACuB,IAAK;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAC1B,CACY,CACf;EAEP;AACF;AAEA,eAAe9B,OAAO,CACpBG,qBAAqB,CAAEI,KAAK,KAAM;EAChCwB,YAAY,EAAExB,KAAK,CAACuB,IAAI,CAACE,GAAG,IAAIzB,KAAK,CAACuB,IAAI,CAACC;AAC7C,CAAC,CAAC,CAAC,CACJ,CAACzB,IAAI,CAAC"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}