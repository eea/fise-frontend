{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/theme/View/EventDatesInfo.jsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { List } from 'semantic-ui-react';\nimport cx from 'classnames';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport { useSelector } from 'react-redux';\nexport const datesForDisplay = (start, end, moment) => {\n  const mStart = moment(start);\n  const mEnd = moment(end);\n  if (!mStart.isValid() || !mEnd.isValid()) {\n    return null;\n  }\n  const sameDay = mStart.isSame(mEnd, 'day');\n  const sameTime = mStart.isSame(mEnd, 'minute');\n  return {\n    sameDay,\n    sameTime,\n    startDate: mStart.format('ll'),\n    startTime: mStart.format('LT'),\n    endDate: mEnd.format('ll'),\n    endTime: mEnd.format('LT')\n  };\n};\nconst When_ = ({\n  start,\n  end,\n  whole_day,\n  open_end,\n  moment: momentlib\n}) => {\n  const lang = useSelector(state => state.intl.locale);\n  const moment = momentlib.default;\n  moment.locale(lang);\n  const datesInfo = datesForDisplay(start, end, moment);\n  if (!datesInfo) {\n    return;\n  }\n  // TODO I18N INTL\n  return __jsx(\"p\", {\n    className: cx('event-when', {\n      'same-day': datesInfo.sameDay,\n      'same-time': datesInfo.sameTime,\n      'whole-day': whole_day,\n      'open-end': open_end\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, !datesInfo.sameDay ? __jsx(React.Fragment, null, __jsx(\"span\", {\n    className: \"start\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  }, __jsx(\"span\", {\n    className: \"start-date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, datesInfo.startDate), !whole_day && __jsx(React.Fragment, null, __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }\n  }, \" \"), __jsx(\"span\", {\n    className: \"start-time\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  }, datesInfo.startTime))), !open_end && __jsx(React.Fragment, null, \"\\xA0to\\xA0\", __jsx(\"span\", {\n    className: \"end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 15\n    }\n  }, __jsx(\"span\", {\n    className: \"end-date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  }, datesInfo.endDate), !whole_day && __jsx(React.Fragment, null, __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 21\n    }\n  }, \" \"), __jsx(\"span\", {\n    className: \"end-time\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 21\n    }\n  }, datesInfo.endTime))))) : __jsx(React.Fragment, null, whole_day && __jsx(\"span\", {\n    className: \"start-date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }\n  }, datesInfo.startDate), open_end && !whole_day && __jsx(React.Fragment, null, __jsx(\"span\", {\n    className: \"start-date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 15\n    }\n  }, datesInfo.startDate), \"\\xA0from\\xA0\", __jsx(\"span\", {\n    className: \"start-time\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 15\n    }\n  }, datesInfo.startTime)), !(whole_day || open_end) && __jsx(React.Fragment, null, __jsx(\"span\", {\n    className: \"start-date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 15\n    }\n  }, datesInfo.startDate), \"\\xA0from\\xA0\", __jsx(\"span\", {\n    className: \"start-time\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 15\n    }\n  }, datesInfo.startTime), \"\\xA0to\\xA0\", __jsx(\"span\", {\n    className: \"end-time\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 15\n    }\n  }, datesInfo.endTime))));\n};\nexport const When = injectLazyLibs(['moment'])(When_);\nWhen.propTypes = {\n  start: PropTypes.string.isRequired,\n  end: PropTypes.string,\n  whole_day: PropTypes.bool,\n  open_end: PropTypes.bool\n};\nexport const Recurrence_ = ({\n  recurrence,\n  start,\n  moment: momentlib,\n  rrule\n}) => {\n  const moment = momentlib.default;\n  const {\n    RRule,\n    rrulestr\n  } = rrule;\n  if (recurrence.indexOf('DTSTART') < 0) {\n    var dtstart = RRule.optionsToString({\n      dtstart: new Date(start)\n    });\n    recurrence = dtstart + '\\n' + recurrence;\n  }\n  const rule = rrulestr(recurrence, {\n    unfold: true,\n    forceset: true\n  });\n  return __jsx(List, {\n    items: rule.all().map(date => datesForDisplay(date, undefined, moment)).map(date => date.startDate),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 5\n    }\n  });\n};\nexport const Recurrence = injectLazyLibs(['moment', 'rrule'])(Recurrence_);\nRecurrence.propTypes = {\n  recurrence: PropTypes.string.isRequired,\n  start: PropTypes.string.isRequired\n};","map":{"version":3,"names":["React","PropTypes","List","cx","injectLazyLibs","useSelector","datesForDisplay","start","end","moment","mStart","mEnd","isValid","sameDay","isSame","sameTime","startDate","format","startTime","endDate","endTime","When_","whole_day","open_end","momentlib","lang","state","intl","locale","default","datesInfo","When","propTypes","string","isRequired","bool","Recurrence_","recurrence","rrule","RRule","rrulestr","indexOf","dtstart","optionsToString","Date","rule","unfold","forceset","all","map","date","undefined","Recurrence"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/theme/View/EventDatesInfo.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { List } from 'semantic-ui-react';\nimport cx from 'classnames';\n\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport { useSelector } from 'react-redux';\n\nexport const datesForDisplay = (start, end, moment) => {\n  const mStart = moment(start);\n  const mEnd = moment(end);\n  if (!mStart.isValid() || !mEnd.isValid()) {\n    return null;\n  }\n  const sameDay = mStart.isSame(mEnd, 'day');\n  const sameTime = mStart.isSame(mEnd, 'minute');\n  return {\n    sameDay,\n    sameTime,\n    startDate: mStart.format('ll'),\n    startTime: mStart.format('LT'),\n    endDate: mEnd.format('ll'),\n    endTime: mEnd.format('LT'),\n  };\n};\n\nconst When_ = ({ start, end, whole_day, open_end, moment: momentlib }) => {\n  const lang = useSelector((state) => state.intl.locale);\n\n  const moment = momentlib.default;\n  moment.locale(lang);\n\n  const datesInfo = datesForDisplay(start, end, moment);\n  if (!datesInfo) {\n    return;\n  }\n  // TODO I18N INTL\n  return (\n    <p\n      className={cx('event-when', {\n        'same-day': datesInfo.sameDay,\n        'same-time': datesInfo.sameTime,\n        'whole-day': whole_day,\n        'open-end': open_end,\n      })}\n    >\n      {!datesInfo.sameDay ? (\n        <>\n          <span className=\"start\">\n            <span className=\"start-date\">{datesInfo.startDate}</span>\n            {!whole_day && (\n              <>\n                {/* Plone has an optional word based on locale here */}\n                <span> </span>\n                <span className=\"start-time\">{datesInfo.startTime}</span>\n              </>\n            )}\n          </span>\n          {!open_end && (\n            <>\n              &nbsp;to&nbsp;\n              <span className=\"end\">\n                <span className=\"end-date\">{datesInfo.endDate}</span>\n                {!whole_day && (\n                  <>\n                    {/* Plone has an optional word based on locale here */}\n                    <span> </span>\n                    <span className=\"end-time\">{datesInfo.endTime}</span>\n                  </>\n                )}\n              </span>\n            </>\n          )}\n        </>\n      ) : (\n        <>\n          {whole_day && (\n            <span className=\"start-date\">{datesInfo.startDate}</span>\n          )}\n          {open_end && !whole_day && (\n            <>\n              <span className=\"start-date\">{datesInfo.startDate}</span>\n              &nbsp;from&nbsp;\n              <span className=\"start-time\">{datesInfo.startTime}</span>\n            </>\n          )}\n          {!(whole_day || open_end) && (\n            <>\n              <span className=\"start-date\">{datesInfo.startDate}</span>\n              &nbsp;from&nbsp;\n              <span className=\"start-time\">{datesInfo.startTime}</span>\n              &nbsp;to&nbsp;\n              <span className=\"end-time\">{datesInfo.endTime}</span>\n            </>\n          )}\n        </>\n      )}\n    </p>\n  );\n};\n\nexport const When = injectLazyLibs(['moment'])(When_);\n\nWhen.propTypes = {\n  start: PropTypes.string.isRequired,\n  end: PropTypes.string,\n  whole_day: PropTypes.bool,\n  open_end: PropTypes.bool,\n};\n\nexport const Recurrence_ = ({\n  recurrence,\n  start,\n  moment: momentlib,\n  rrule,\n}) => {\n  const moment = momentlib.default;\n  const { RRule, rrulestr } = rrule;\n  if (recurrence.indexOf('DTSTART') < 0) {\n    var dtstart = RRule.optionsToString({\n      dtstart: new Date(start),\n    });\n    recurrence = dtstart + '\\n' + recurrence;\n  }\n  const rule = rrulestr(recurrence, { unfold: true, forceset: true });\n\n  return (\n    <List\n      items={rule\n        .all()\n        .map((date) => datesForDisplay(date, undefined, moment))\n        .map((date) => date.startDate)}\n    />\n  );\n};\nexport const Recurrence = injectLazyLibs(['moment', 'rrule'])(Recurrence_);\n\nRecurrence.propTypes = {\n  recurrence: PropTypes.string.isRequired,\n  start: PropTypes.string.isRequired,\n};\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}