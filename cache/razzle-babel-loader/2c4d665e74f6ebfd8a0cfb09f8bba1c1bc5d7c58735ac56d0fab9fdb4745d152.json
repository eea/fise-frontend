{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n/**\n * emailSend reducer.\n * @module reducers/emailSend/emailSend\n */\n\nimport { EMAIL_SEND } from '@plone/volto/constants/ActionTypes';\nconst initialState = {\n  error: null,\n  loaded: false,\n  loading: false\n};\n\n/**\n * emailSend reducer.\n * @function emailSend\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function emailSend(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${EMAIL_SEND}_PENDING`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: null,\n        loaded: false,\n        loading: true\n      });\n    case `${EMAIL_SEND}_SUCCESS`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: null,\n        loaded: true,\n        loading: false\n      });\n    case `${EMAIL_SEND}_FAIL`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.error,\n        loaded: false,\n        loading: false\n      });\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["EMAIL_SEND","initialState","error","loaded","loading","emailSend","state","action","type"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/reducers/emailSend/emailSend.js"],"sourcesContent":["/**\n * emailSend reducer.\n * @module reducers/emailSend/emailSend\n */\n\nimport { EMAIL_SEND } from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {\n  error: null,\n  loaded: false,\n  loading: false,\n};\n\n/**\n * emailSend reducer.\n * @function emailSend\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function emailSend(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${EMAIL_SEND}_PENDING`:\n      return {\n        ...state,\n        error: null,\n        loaded: false,\n        loading: true,\n      };\n    case `${EMAIL_SEND}_SUCCESS`:\n      return {\n        ...state,\n        error: null,\n        loaded: true,\n        loading: false,\n      };\n    case `${EMAIL_SEND}_FAIL`:\n      return {\n        ...state,\n        error: action.error,\n        loaded: false,\n        loading: false,\n      };\n    default:\n      return state;\n  }\n}\n"],"mappings":";;;AAAA;AACA;AACA;AACA;;AAEA,SAASA,UAAU,QAAQ,oCAAoC;AAE/D,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,IAAI;EACXC,MAAM,EAAE,KAAK;EACbC,OAAO,EAAE;AACX,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,SAAS,CAACC,KAAK,GAAGL,YAAY,EAAEM,MAAM,GAAG,CAAC,CAAC,EAAE;EACnE,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAM,GAAER,UAAW,UAAS;MAC1B,uCACKM,KAAK;QACRJ,KAAK,EAAE,IAAI;QACXC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;MAAI;IAEjB,KAAM,GAAEJ,UAAW,UAAS;MAC1B,uCACKM,KAAK;QACRJ,KAAK,EAAE,IAAI;QACXC,MAAM,EAAE,IAAI;QACZC,OAAO,EAAE;MAAK;IAElB,KAAM,GAAEJ,UAAW,OAAM;MACvB,uCACKM,KAAK;QACRJ,KAAK,EAAEK,MAAM,CAACL,KAAK;QACnBC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;MAAK;IAElB;MACE,OAAOE,KAAK;EAAC;AAEnB"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}