{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/volto-slate/src/editor/config.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport React from 'react';\nimport boldIcon from '@plone/volto/icons/bold.svg';\nimport codeIcon from '@plone/volto/icons/code.svg';\nimport formatClearIcon from '@plone/volto/icons/format-clear.svg';\nimport headingIcon from '@plone/volto/icons/heading.svg';\nimport italicIcon from '@plone/volto/icons/italic.svg';\nimport listBulletIcon from '@plone/volto/icons/list-bullet.svg';\nimport listNumberedIcon from '@plone/volto/icons/list-numbered.svg';\nimport subheadingIcon from '@plone/volto/icons/subheading.svg';\nimport subTextIcon from '@plone/volto/icons/subtext.svg';\nimport underlineIcon from '@plone/volto/icons/underline.svg';\nimport strikethroughIcon from '@plone/volto/icons/strikethrough.svg';\nimport subindexIcon from '@plone/volto/icons/subindex.svg';\nimport superindexIcon from '@plone/volto/icons/superindex.svg';\nimport { createEmptyParagraph } from 'volto-slate/utils';\nimport { MarkButton, MarkElementButton, BlockButton, ClearFormattingButton, Separator, Expando } from './ui';\nimport { highlightSelection } from './decorate'; // highlightByType,\nimport { insertData, isInline, withDeleteSelectionOnEnter, withDeserializers, normalizeNode } from './extensions';\nimport {\n// inlineTagDeserializer,\nbodyTagDeserializer, blockTagDeserializer, preTagDeserializer, spanTagDeserializer, bTagDeserializer, codeTagDeserializer } from './deserialize';\n\n// Registry of available buttons\nexport const buttons = {\n  bold: props => __jsx(MarkElementButton, _extends({\n    title: \"Bold\",\n    format: \"strong\",\n    icon: boldIcon\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  })),\n  italic: props => __jsx(MarkElementButton, _extends({\n    title: \"Italic\",\n    format: \"em\",\n    icon: italicIcon\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  })),\n  underline: props => __jsx(MarkElementButton, _extends({\n    title: \"Underline\",\n    format: \"u\",\n    icon: underlineIcon\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  })),\n  strikethrough: props => __jsx(MarkElementButton, _extends({\n    title: \"Strikethrough\",\n    format: \"del\",\n    icon: strikethroughIcon\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  })),\n  sub: props => __jsx(MarkElementButton, _extends({\n    title: \"Subscript\",\n    format: \"sub\",\n    icon: subindexIcon\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  })),\n  sup: props => __jsx(MarkElementButton, _extends({\n    title: \"Superscript\",\n    format: \"sup\",\n    icon: superindexIcon\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }\n  })),\n  code: props => __jsx(MarkButton, _extends({\n    title: \"Code\",\n    format: \"code\",\n    icon: codeIcon\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }\n  })),\n  'heading-two': props => __jsx(BlockButton, _extends({\n    title: \"Title\",\n    format: \"h2\",\n    icon: headingIcon\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 5\n    }\n  })),\n  'heading-three': props => __jsx(BlockButton, _extends({\n    title: \"Subtitle\",\n    format: \"h3\",\n    icon: subheadingIcon\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  })),\n  'heading-four': props => __jsx(BlockButton, _extends({\n    title: \"Heading 4\",\n    format: \"h4\",\n    icon: subTextIcon\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 5\n    }\n  })),\n  clearformatting: props => __jsx(ClearFormattingButton, {\n    title: \"Clear formatting\",\n    icon: formatClearIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }\n  }),\n  'numbered-list': props => __jsx(BlockButton, _extends({\n    title: \"Numbered list\",\n    format: \"ol\",\n    icon: listNumberedIcon\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }\n  })),\n  'bulleted-list': props => __jsx(BlockButton, {\n    title: \"Bulleted list\",\n    format: \"ul\",\n    icon: listBulletIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 5\n    }\n  }),\n  separator: props => __jsx(Separator, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 25\n    }\n  }),\n  expando: props => __jsx(Expando, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 23\n    }\n  })\n};\nexport const defaultToolbarButtons = ['bold', 'italic', 'underline', 'strikethrough', 'separator', 'heading-two', 'heading-three', 'heading-four', 'separator', 'clearformatting', 'separator', 'sub', 'sup', 'separator', 'bulleted-list', 'numbered-list'];\nexport const toolbarButtons = [...defaultToolbarButtons];\nexport const expandedToolbarButtons = [...defaultToolbarButtons];\n\n// These components are rendered in the toolbar on demand, as configured by\n// plugins.  They are rendered as \"context\" buttons, when there is no selection\n// Each one is a function (editor) => (<Component/> or null). It is important\n// to be able to tell if a plugin would return something because we don't want\n// to render the toolbar at all if there's no children (due to CSS reasons).\nexport const contextToolbarButtons = [];\n\n// Each Element node type available in the editor can be configured to have\n// specific toolbar buttons shown above the element of that type when it\n// contains the selection. The Table plugin of SlateEditor uses this to put a\n// Delete table button above the currently selected table.\nexport const elementToolbarButtons = {};\n\n// A set of components that are always rendered, unlike the button variety.\n// They make it possible to orchestrate form-based editing of components\nexport const persistentHelpers = [];\n\n// The slate editor is \"decorated\" with the capabilities from this list.\n// While Slate calls them plugins, we use \"extension\" to avoid confusion.\n// A Volto Slate editor plugins adds more functionality: buttons, new elements,\n// etc.\n// Each extension is a simple mutator function with signature: `editor => editor`.\n// See https://docs.slatejs.org/concepts/07-plugins and\n// https://docs.slatejs.org/concepts/06-editor\n//\n// First here gets executed last, so if you want to override behavior, push new\n// extensions to the end of this list, to rely on default behavior implemented\n// here.\nexport const extensions = [withDeleteSelectionOnEnter, withDeserializers, insertData, isInline, normalizeNode];\n\n// Default hotkeys and the format they trigger\nexport const hotkeys = {\n  'mod+b': {\n    format: 'strong',\n    type: 'inline'\n  },\n  'mod+i': {\n    format: 'em',\n    type: 'inline'\n  },\n  'mod+u': {\n    format: 'u',\n    type: 'inline'\n  },\n  'mod+s': {\n    format: 'del',\n    type: 'inline'\n  }\n  // 'mod+`': { format: 'code', type: 'inline' },\n  // TODO: more hotkeys, including from plugins!\n};\n\n// Raw shortcut/keydown handlers\nexport const keyDownHandlers = {};\n\n// Paragraphs (as default type of blocks) and lists need special handling\nexport const listTypes = ['ul', 'ol'];\nexport const listItemType = 'li';\nexport const tableTypes = ['table', 'tbody', 'thead', 'tfoot', 'tr', 'td', 'th'];\nexport const defaultBlockType = 'p';\n\n// Default rendered elements\n// TODO: expose the IDs in constants.js, for uniformity\nexport const elements = {\n  default: ({\n    attributes,\n    children\n  }) => __jsx(\"p\", _extends({}, attributes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 42\n    }\n  }), children),\n  h1: ({\n    attributes,\n    children\n  }) => __jsx(\"h1\", _extends({}, attributes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 37\n    }\n  }), children),\n  h2: ({\n    attributes,\n    children\n  }) => __jsx(\"h2\", _extends({}, attributes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 37\n    }\n  }), children),\n  h3: ({\n    attributes,\n    children\n  }) => __jsx(\"h3\", _extends({}, attributes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 37\n    }\n  }), children),\n  h4: ({\n    attributes,\n    children\n  }) => __jsx(\"h4\", _extends({}, attributes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 37\n    }\n  }), children),\n  li: ({\n    attributes,\n    children\n  }) => __jsx(\"li\", _extends({}, attributes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 37\n    }\n  }), children),\n  ol: ({\n    attributes,\n    children\n  }) => __jsx(\"ol\", _extends({}, attributes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 37\n    }\n  }), children),\n  ul: ({\n    attributes,\n    children\n  }) => {\n    return __jsx(\"ul\", _extends({}, attributes, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 12\n      }\n    }), children);\n  },\n  div: ({\n    attributes,\n    children\n  }) => __jsx(\"div\", _extends({}, attributes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 38\n    }\n  }), children),\n  p: ({\n    attributes,\n    children\n  }) => {\n    return __jsx(\"p\", _extends({}, attributes, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 12\n      }\n    }), children);\n  },\n  // While usual slate editor consider these to be Leafs, we treat them as\n  // inline elements because they can sometimes contain elements (ex:\n  // <b><a/></b>\n  em: ({\n    children\n  }) => __jsx(\"em\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 25\n    }\n  }, children),\n  i: ({\n    children\n  }) => __jsx(\"i\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 24\n    }\n  }, children),\n  b: ({\n    children\n  }) => {\n    return __jsx(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 12\n      }\n    }, children);\n  },\n  strong: ({\n    children\n  }) => {\n    return __jsx(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 12\n      }\n    }, children);\n  },\n  u: ({\n    children\n  }) => __jsx(\"u\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 24\n    }\n  }, children),\n  s: ({\n    children\n  }) => __jsx(\"del\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 24\n    }\n  }, children),\n  del: ({\n    children\n  }) => __jsx(\"del\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 26\n    }\n  }, children),\n  sub: ({\n    children\n  }) => __jsx(\"sub\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 26\n    }\n  }, children),\n  sup: ({\n    children\n  }) => __jsx(\"sup\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 26\n    }\n  }, children),\n  code: ({\n    children\n  }) => __jsx(\"code\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 27\n    }\n  }, children)\n};\nexport const inlineElements = ['em', 'i', 'b', 'strong', 'u', 'del', 'sub', 'sup', 'code'];\n\n// Order of definition here is important (higher = inner element)\nexport const leafs = {\n  // code: ({ children }) => {\n  //   return <code>{children}</code>;\n  // },\n};\nexport const defaultValue = () => {\n  return [createEmptyParagraph()];\n};\n\n// HTML deserialization (html -> slate data conversion)\n// These are used in clipboard paste handling\n// Any tag that is not listed here (or added by a plugin) will be stripped\n// (its children will be rendered, though)\nexport const htmlTagsToSlate = {\n  B: bTagDeserializer,\n  BODY: bodyTagDeserializer,\n  CODE: codeTagDeserializer,\n  PRE: preTagDeserializer,\n  SPAN: spanTagDeserializer,\n  BLOCKQUOTE: blockTagDeserializer('blockquote'),\n  DEL: blockTagDeserializer('del'),\n  EM: blockTagDeserializer('em'),\n  H1: blockTagDeserializer('h1'),\n  H2: blockTagDeserializer('h2'),\n  H3: blockTagDeserializer('h3'),\n  H4: blockTagDeserializer('h4'),\n  H5: blockTagDeserializer('h5'),\n  H6: blockTagDeserializer('h6'),\n  I: blockTagDeserializer('i'),\n  P: blockTagDeserializer('p'),\n  S: blockTagDeserializer('del'),\n  STRONG: blockTagDeserializer('strong'),\n  SUB: blockTagDeserializer('sub'),\n  SUP: blockTagDeserializer('sup'),\n  U: blockTagDeserializer('u'),\n  OL: blockTagDeserializer('ol'),\n  UL: blockTagDeserializer('ul'),\n  LI: blockTagDeserializer('li')\n};\n\n// Adds \"highlight\" decoration in the editor. Used by `highlightByType`\n// See the Footnote plugin for an example.\nexport const nodeTypesToHighlight = [];\n\n// \"Runtime\" decorator functions. These are transient decorations that are\n// applied in the editor. They are not persisted in the final value, so they\n// are useful for example to highlight search results or a certain type of node\n// Signature: ([node, path], ranges) => ranges\nexport const runtimeDecorators = [highlightSelection]; // , highlightByType","map":{"version":3,"names":["React","boldIcon","codeIcon","formatClearIcon","headingIcon","italicIcon","listBulletIcon","listNumberedIcon","subheadingIcon","subTextIcon","underlineIcon","strikethroughIcon","subindexIcon","superindexIcon","createEmptyParagraph","MarkButton","MarkElementButton","BlockButton","ClearFormattingButton","Separator","Expando","highlightSelection","insertData","isInline","withDeleteSelectionOnEnter","withDeserializers","normalizeNode","bodyTagDeserializer","blockTagDeserializer","preTagDeserializer","spanTagDeserializer","bTagDeserializer","codeTagDeserializer","buttons","bold","props","italic","underline","strikethrough","sub","sup","code","clearformatting","separator","expando","defaultToolbarButtons","toolbarButtons","expandedToolbarButtons","contextToolbarButtons","elementToolbarButtons","persistentHelpers","extensions","hotkeys","format","type","keyDownHandlers","listTypes","listItemType","tableTypes","defaultBlockType","elements","default","attributes","children","h1","h2","h3","h4","li","ol","ul","div","p","em","i","b","strong","u","s","del","inlineElements","leafs","defaultValue","htmlTagsToSlate","B","BODY","CODE","PRE","SPAN","BLOCKQUOTE","DEL","EM","H1","H2","H3","H4","H5","H6","I","P","S","STRONG","SUB","SUP","U","OL","UL","LI","nodeTypesToHighlight","runtimeDecorators"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/volto-slate/src/editor/config.jsx"],"sourcesContent":["import React from 'react';\n\nimport boldIcon from '@plone/volto/icons/bold.svg';\nimport codeIcon from '@plone/volto/icons/code.svg';\nimport formatClearIcon from '@plone/volto/icons/format-clear.svg';\nimport headingIcon from '@plone/volto/icons/heading.svg';\nimport italicIcon from '@plone/volto/icons/italic.svg';\nimport listBulletIcon from '@plone/volto/icons/list-bullet.svg';\nimport listNumberedIcon from '@plone/volto/icons/list-numbered.svg';\nimport subheadingIcon from '@plone/volto/icons/subheading.svg';\nimport subTextIcon from '@plone/volto/icons/subtext.svg';\nimport underlineIcon from '@plone/volto/icons/underline.svg';\nimport strikethroughIcon from '@plone/volto/icons/strikethrough.svg';\nimport subindexIcon from '@plone/volto/icons/subindex.svg';\nimport superindexIcon from '@plone/volto/icons/superindex.svg';\n\nimport { createEmptyParagraph } from 'volto-slate/utils';\n\nimport {\n  MarkButton,\n  MarkElementButton,\n  BlockButton,\n  ClearFormattingButton,\n  Separator,\n  Expando,\n} from './ui';\nimport { highlightSelection } from './decorate'; // highlightByType,\nimport {\n  insertData,\n  isInline,\n  withDeleteSelectionOnEnter,\n  withDeserializers,\n  normalizeNode,\n} from './extensions';\nimport {\n  // inlineTagDeserializer,\n  bodyTagDeserializer,\n  blockTagDeserializer,\n  preTagDeserializer,\n  spanTagDeserializer,\n  bTagDeserializer,\n  codeTagDeserializer,\n} from './deserialize';\n\n// Registry of available buttons\nexport const buttons = {\n  bold: (props) => (\n    <MarkElementButton\n      title=\"Bold\"\n      format=\"strong\"\n      icon={boldIcon}\n      {...props}\n    />\n  ),\n  italic: (props) => (\n    <MarkElementButton\n      title=\"Italic\"\n      format=\"em\"\n      icon={italicIcon}\n      {...props}\n    />\n  ),\n  underline: (props) => (\n    <MarkElementButton\n      title=\"Underline\"\n      format=\"u\"\n      icon={underlineIcon}\n      {...props}\n    />\n  ),\n  strikethrough: (props) => (\n    <MarkElementButton\n      title=\"Strikethrough\"\n      format=\"del\"\n      icon={strikethroughIcon}\n      {...props}\n    />\n  ),\n  sub: (props) => (\n    <MarkElementButton\n      title=\"Subscript\"\n      format=\"sub\"\n      icon={subindexIcon}\n      {...props}\n    />\n  ),\n  sup: (props) => (\n    <MarkElementButton\n      title=\"Superscript\"\n      format=\"sup\"\n      icon={superindexIcon}\n      {...props}\n    />\n  ),\n  code: (props) => (\n    <MarkButton title=\"Code\" format=\"code\" icon={codeIcon} {...props} />\n  ),\n  'heading-two': (props) => (\n    <BlockButton title=\"Title\" format=\"h2\" icon={headingIcon} {...props} />\n  ),\n  'heading-three': (props) => (\n    <BlockButton\n      title=\"Subtitle\"\n      format=\"h3\"\n      icon={subheadingIcon}\n      {...props}\n    />\n  ),\n  'heading-four': (props) => (\n    <BlockButton title=\"Heading 4\" format=\"h4\" icon={subTextIcon} {...props} />\n  ),\n  clearformatting: (props) => (\n    <ClearFormattingButton title=\"Clear formatting\" icon={formatClearIcon} />\n  ),\n  'numbered-list': (props) => (\n    <BlockButton\n      title=\"Numbered list\"\n      format=\"ol\"\n      icon={listNumberedIcon}\n      {...props}\n    />\n  ),\n  'bulleted-list': (props) => (\n    <BlockButton title=\"Bulleted list\" format=\"ul\" icon={listBulletIcon} />\n  ),\n  separator: (props) => <Separator />,\n  expando: (props) => <Expando />,\n};\n\nexport const defaultToolbarButtons = [\n  'bold',\n  'italic',\n  'underline',\n  'strikethrough',\n  'separator',\n  'heading-two',\n  'heading-three',\n  'heading-four',\n  'separator',\n  'clearformatting',\n  'separator',\n  'sub',\n  'sup',\n  'separator',\n  'bulleted-list',\n  'numbered-list',\n];\n\nexport const toolbarButtons = [...defaultToolbarButtons];\n\nexport const expandedToolbarButtons = [...defaultToolbarButtons];\n\n// These components are rendered in the toolbar on demand, as configured by\n// plugins.  They are rendered as \"context\" buttons, when there is no selection\n// Each one is a function (editor) => (<Component/> or null). It is important\n// to be able to tell if a plugin would return something because we don't want\n// to render the toolbar at all if there's no children (due to CSS reasons).\nexport const contextToolbarButtons = [];\n\n// Each Element node type available in the editor can be configured to have\n// specific toolbar buttons shown above the element of that type when it\n// contains the selection. The Table plugin of SlateEditor uses this to put a\n// Delete table button above the currently selected table.\nexport const elementToolbarButtons = {};\n\n// A set of components that are always rendered, unlike the button variety.\n// They make it possible to orchestrate form-based editing of components\nexport const persistentHelpers = [];\n\n// The slate editor is \"decorated\" with the capabilities from this list.\n// While Slate calls them plugins, we use \"extension\" to avoid confusion.\n// A Volto Slate editor plugins adds more functionality: buttons, new elements,\n// etc.\n// Each extension is a simple mutator function with signature: `editor => editor`.\n// See https://docs.slatejs.org/concepts/07-plugins and\n// https://docs.slatejs.org/concepts/06-editor\n//\n// First here gets executed last, so if you want to override behavior, push new\n// extensions to the end of this list, to rely on default behavior implemented\n// here.\nexport const extensions = [\n  withDeleteSelectionOnEnter,\n  withDeserializers,\n  insertData,\n  isInline,\n  normalizeNode,\n];\n\n// Default hotkeys and the format they trigger\nexport const hotkeys = {\n  'mod+b': { format: 'strong', type: 'inline' },\n  'mod+i': { format: 'em', type: 'inline' },\n  'mod+u': { format: 'u', type: 'inline' },\n  'mod+s': { format: 'del', type: 'inline' },\n  // 'mod+`': { format: 'code', type: 'inline' },\n  // TODO: more hotkeys, including from plugins!\n};\n\n// Raw shortcut/keydown handlers\nexport const keyDownHandlers = {};\n\n// Paragraphs (as default type of blocks) and lists need special handling\nexport const listTypes = ['ul', 'ol'];\nexport const listItemType = 'li';\nexport const tableTypes = [\n  'table',\n  'tbody',\n  'thead',\n  'tfoot',\n  'tr',\n  'td',\n  'th',\n];\nexport const defaultBlockType = 'p';\n\n// Default rendered elements\n// TODO: expose the IDs in constants.js, for uniformity\nexport const elements = {\n  default: ({ attributes, children }) => <p {...attributes}>{children}</p>,\n\n  h1: ({ attributes, children }) => <h1 {...attributes}>{children}</h1>,\n  h2: ({ attributes, children }) => <h2 {...attributes}>{children}</h2>,\n  h3: ({ attributes, children }) => <h3 {...attributes}>{children}</h3>,\n  h4: ({ attributes, children }) => <h4 {...attributes}>{children}</h4>,\n\n  li: ({ attributes, children }) => <li {...attributes}>{children}</li>,\n  ol: ({ attributes, children }) => <ol {...attributes}>{children}</ol>,\n  ul: ({ attributes, children }) => {\n    return <ul {...attributes}>{children}</ul>;\n  },\n\n  div: ({ attributes, children }) => <div {...attributes}>{children}</div>,\n  p: ({ attributes, children }) => {\n    return <p {...attributes}>{children}</p>;\n  },\n\n  // While usual slate editor consider these to be Leafs, we treat them as\n  // inline elements because they can sometimes contain elements (ex:\n  // <b><a/></b>\n  em: ({ children }) => <em>{children}</em>,\n  i: ({ children }) => <i>{children}</i>,\n  b: ({ children }) => {\n    return <b>{children}</b>;\n  },\n  strong: ({ children }) => {\n    return <strong>{children}</strong>;\n  },\n  u: ({ children }) => <u>{children}</u>,\n  s: ({ children }) => <del>{children}</del>,\n  del: ({ children }) => <del>{children}</del>,\n  sub: ({ children }) => <sub>{children}</sub>,\n  sup: ({ children }) => <sup>{children}</sup>,\n  code: ({ children }) => <code>{children}</code>,\n};\n\nexport const inlineElements = [\n  'em',\n  'i',\n  'b',\n  'strong',\n  'u',\n  'del',\n  'sub',\n  'sup',\n  'code',\n];\n\n// Order of definition here is important (higher = inner element)\nexport const leafs = {\n  // code: ({ children }) => {\n  //   return <code>{children}</code>;\n  // },\n};\n\nexport const defaultValue = () => {\n  return [createEmptyParagraph()];\n};\n\n// HTML deserialization (html -> slate data conversion)\n// These are used in clipboard paste handling\n// Any tag that is not listed here (or added by a plugin) will be stripped\n// (its children will be rendered, though)\nexport const htmlTagsToSlate = {\n  B: bTagDeserializer,\n  BODY: bodyTagDeserializer,\n  CODE: codeTagDeserializer,\n  PRE: preTagDeserializer,\n  SPAN: spanTagDeserializer,\n\n  BLOCKQUOTE: blockTagDeserializer('blockquote'),\n  DEL: blockTagDeserializer('del'),\n  EM: blockTagDeserializer('em'),\n  H1: blockTagDeserializer('h1'),\n  H2: blockTagDeserializer('h2'),\n  H3: blockTagDeserializer('h3'),\n  H4: blockTagDeserializer('h4'),\n  H5: blockTagDeserializer('h5'),\n  H6: blockTagDeserializer('h6'),\n  I: blockTagDeserializer('i'),\n  P: blockTagDeserializer('p'),\n  S: blockTagDeserializer('del'),\n  STRONG: blockTagDeserializer('strong'),\n  SUB: blockTagDeserializer('sub'),\n  SUP: blockTagDeserializer('sup'),\n  U: blockTagDeserializer('u'),\n\n  OL: blockTagDeserializer('ol'),\n  UL: blockTagDeserializer('ul'),\n  LI: blockTagDeserializer('li'),\n};\n\n// Adds \"highlight\" decoration in the editor. Used by `highlightByType`\n// See the Footnote plugin for an example.\nexport const nodeTypesToHighlight = [];\n\n// \"Runtime\" decorator functions. These are transient decorations that are\n// applied in the editor. They are not persisted in the final value, so they\n// are useful for example to highlight search results or a certain type of node\n// Signature: ([node, path], ranges) => ranges\nexport const runtimeDecorators = [highlightSelection]; // , highlightByType\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}