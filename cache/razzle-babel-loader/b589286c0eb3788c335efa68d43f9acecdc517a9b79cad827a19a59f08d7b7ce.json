{"ast":null,"code":"import _isArray from \"lodash/isArray\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-datablocks/src/components/manage/Blocks/SimpleDataTable/helpers.js\",\n  _this = this;\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { FormattedValue } from '../../../../Utils';\nexport var getValue = function getValue(tableData, column, rowIndex, textTemplate) {\n  var _tableData$rowIndex, _tableData$column;\n  var value = _isArray(tableData) ? (_tableData$rowIndex = tableData[rowIndex]) === null || _tableData$rowIndex === void 0 ? void 0 : _tableData$rowIndex[column] : (_tableData$column = tableData[column]) === null || _tableData$column === void 0 ? void 0 : _tableData$column[rowIndex];\n  if (textTemplate) {\n    value = textTemplate.replace('{}', value);\n  }\n  return value;\n};\nexport var getCellValue = function getCellValue(tableData, colDef, rowIndex) {\n  var placeholder = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n  var value;\n  if (colDef === 'string') {\n    var _tableData$rowIndex2, _tableData$colDef;\n    value = _isArray(tableData) ? (_tableData$rowIndex2 = tableData[rowIndex]) === null || _tableData$rowIndex2 === void 0 ? void 0 : _tableData$rowIndex2[colDef] : (_tableData$colDef = tableData[colDef]) === null || _tableData$colDef === void 0 ? void 0 : _tableData$colDef[rowIndex];\n  } else {\n    var _tableData$rowIndex3, _tableData$colDef$col;\n    value = _isArray(tableData) ? (_tableData$rowIndex3 = tableData[rowIndex]) === null || _tableData$rowIndex3 === void 0 ? void 0 : _tableData$rowIndex3[colDef.column] : (_tableData$colDef$col = tableData[colDef.column]) === null || _tableData$colDef$col === void 0 ? void 0 : _tableData$colDef$col[rowIndex];\n  }\n  return typeof colDef === 'string' ? __jsx(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, value || placeholder) : __jsx(FormattedValue, {\n    textTemplate: colDef.textTemplate,\n    value: value || placeholder,\n    specifier: colDef.specifier,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  });\n};\nexport var isValidUrl = function isValidUrl(url) {\n  if (!url) return '';\n  var containsProtocol = url.includes('http://') || url.includes('https://');\n  var checkedUrl = containsProtocol ? url : \"https://\".concat(url);\n  return checkedUrl;\n};","map":{"version":3,"names":["React","FormattedValue","getValue","tableData","column","rowIndex","textTemplate","value","replace","getCellValue","colDef","placeholder","specifier","isValidUrl","url","containsProtocol","includes","checkedUrl"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-datablocks/src/components/manage/Blocks/SimpleDataTable/helpers.js"],"sourcesContent":["import React from 'react';\nimport _ from 'lodash';\nimport { FormattedValue } from '../../../../Utils';\n\nexport const getValue = (tableData, column, rowIndex, textTemplate) => {\n  let value = _.isArray(tableData)\n    ? tableData[rowIndex]?.[column]\n    : tableData[column]?.[rowIndex];\n  if (textTemplate) {\n    value = textTemplate.replace('{}', value);\n  }\n  return value;\n};\n\nexport const getCellValue = (tableData, colDef, rowIndex, placeholder = '') => {\n  let value;\n\n  if (colDef === 'string') {\n    value = _.isArray(tableData)\n      ? tableData[rowIndex]?.[colDef]\n      : tableData[colDef]?.[rowIndex];\n  } else {\n    value = _.isArray(tableData)\n      ? tableData[rowIndex]?.[colDef.column]\n      : tableData[colDef.column]?.[rowIndex];\n  }\n\n  return typeof colDef === 'string' ? (\n    <span>{value || placeholder}</span>\n  ) : (\n    <FormattedValue\n      textTemplate={colDef.textTemplate}\n      value={value || placeholder}\n      specifier={colDef.specifier}\n    />\n  );\n};\n\nexport const isValidUrl = (url) => {\n  if (!url) return '';\n\n  let containsProtocol = url.includes('http://') || url.includes('https://');\n  let checkedUrl = containsProtocol ? url : `https://${url}`;\n  return checkedUrl;\n};\n"],"mappings":";;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,cAAc,QAAQ,mBAAmB;AAElD,OAAO,IAAMC,QAAQ,GAAG,SAAXA,QAAQ,CAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,YAAY,EAAK;EAAA;EACrE,IAAIC,KAAK,GAAG,SAAUJ,SAAS,CAAC,0BAC5BA,SAAS,CAACE,QAAQ,CAAC,wDAAnB,oBAAsBD,MAAM,CAAC,wBAC7BD,SAAS,CAACC,MAAM,CAAC,sDAAjB,kBAAoBC,QAAQ,CAAC;EACjC,IAAIC,YAAY,EAAE;IAChBC,KAAK,GAAGD,YAAY,CAACE,OAAO,CAAC,IAAI,EAAED,KAAK,CAAC;EAC3C;EACA,OAAOA,KAAK;AACd,CAAC;AAED,OAAO,IAAME,YAAY,GAAG,SAAfA,YAAY,CAAIN,SAAS,EAAEO,MAAM,EAAEL,QAAQ,EAAuB;EAAA,IAArBM,WAAW,uEAAG,EAAE;EACxE,IAAIJ,KAAK;EAET,IAAIG,MAAM,KAAK,QAAQ,EAAE;IAAA;IACvBH,KAAK,GAAG,SAAUJ,SAAS,CAAC,2BACxBA,SAAS,CAACE,QAAQ,CAAC,yDAAnB,qBAAsBK,MAAM,CAAC,wBAC7BP,SAAS,CAACO,MAAM,CAAC,sDAAjB,kBAAoBL,QAAQ,CAAC;EACnC,CAAC,MAAM;IAAA;IACLE,KAAK,GAAG,SAAUJ,SAAS,CAAC,2BACxBA,SAAS,CAACE,QAAQ,CAAC,yDAAnB,qBAAsBK,MAAM,CAACN,MAAM,CAAC,4BACpCD,SAAS,CAACO,MAAM,CAACN,MAAM,CAAC,0DAAxB,sBAA2BC,QAAQ,CAAC;EAC1C;EAEA,OAAO,OAAOK,MAAM,KAAK,QAAQ,GAC/B;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAOH,KAAK,IAAII,WAAW,CAAQ,GAEnC,MAAC,cAAc;IACb,YAAY,EAAED,MAAM,CAACJ,YAAa;IAClC,KAAK,EAAEC,KAAK,IAAII,WAAY;IAC5B,SAAS,EAAED,MAAM,CAACE,SAAU;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAE/B;AACH,CAAC;AAED,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAU,CAAIC,GAAG,EAAK;EACjC,IAAI,CAACA,GAAG,EAAE,OAAO,EAAE;EAEnB,IAAIC,gBAAgB,GAAGD,GAAG,CAACE,QAAQ,CAAC,SAAS,CAAC,IAAIF,GAAG,CAACE,QAAQ,CAAC,UAAU,CAAC;EAC1E,IAAIC,UAAU,GAAGF,gBAAgB,GAAGD,GAAG,qBAAcA,GAAG,CAAE;EAC1D,OAAOG,UAAU;AACnB,CAAC"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}