{"ast":null,"code":"import _uniqBy from \"lodash/uniqBy\";\nimport _map from \"lodash/map\";\nimport _last from \"lodash/last\";\nimport _filter from \"lodash/filter\";\nimport _concat from \"lodash/concat\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Contents/ContentsWorkflowModal.jsx\";\nvar __jsx = React.createElement;\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n/**\n * Contents workflow modal.\n * @module components/manage/Contents/ContentsWorkflowModal\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { getWorkflow, transitionWorkflow } from '@plone/volto/actions';\nimport { ModalForm } from '@plone/volto/components';\nconst messages = defineMessages({\n  default: {\n    \"id\": \"Default\",\n    \"defaultMessage\": \"Default\"\n  },\n  stateTitle: {\n    \"id\": \"Change State\",\n    \"defaultMessage\": \"Change State\"\n  },\n  includeChildrenTitle: {\n    \"id\": \"Change workflow state recursively\",\n    \"defaultMessage\": \"Change workflow state recursively\"\n  },\n  stateDescription: {\n    \"id\": \"Select the transition to be used for modifying the items state.\",\n    \"defaultMessage\": \"Select the transition to be used for modifying the items state.\"\n  },\n  loadingMessage: {\n    \"id\": \"Workflow Change Loading Message\",\n    \"defaultMessage\": \"Updating workflow states...\"\n  }\n});\n\n/**\n * ContentsWorkflowModal class.\n * @class ContentsWorkflowModal\n * @extends Component\n */\nclass ContentsWorkflowModal extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ContentsUploadModal\n   */\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n  componentDidMount() {\n    this.props.getWorkflow(this.props.items);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.request.loading && nextProps.request.loaded) {\n      this.props.onOk();\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {string} state New state\n   * @returns {undefined}\n   */\n  onSubmit({\n    state,\n    include_children\n  }) {\n    if (!state) {\n      return;\n    }\n    this.props.transitionWorkflow(_filter(_map(_concat(..._map(this.props.workflows, workflow => workflow.transitions)), item => item['@id']), x => _last(x.split('/')) === state), include_children);\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return this.props.open && this.props.workflows.length > 0 && __jsx(ModalForm, {\n      open: this.props.open,\n      loading: this.props.request.loading,\n      loadingMessage: this.props.intl.formatMessage(messages.loadingMessage),\n      onSubmit: this.onSubmit,\n      onCancel: this.props.onCancel,\n      title: this.props.intl.formatMessage(messages.stateTitle),\n      schema: {\n        fieldsets: [{\n          id: 'default',\n          title: this.props.intl.formatMessage(messages.default),\n          fields: ['state', 'include_children']\n        }],\n        properties: {\n          state: {\n            description: this.props.intl.formatMessage(messages.stateDescription),\n            title: this.props.intl.formatMessage(messages.stateTitle),\n            type: 'string',\n            choices: _map(_uniqBy(_concat(..._map(this.props.workflows, workflow => workflow.transitions)), x => x.title), y => [_last(y['@id'].split('/')), y.title])\n          },\n          include_children: {\n            title: this.props.intl.formatMessage(messages.includeChildrenTitle),\n            type: 'boolean'\n          }\n        },\n        required: []\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }\n    });\n  }\n}\n_defineProperty(ContentsWorkflowModal, \"propTypes\", {\n  getWorkflow: PropTypes.func.isRequired,\n  transitionWorkflow: PropTypes.func.isRequired,\n  items: PropTypes.arrayOf(PropTypes.string).isRequired,\n  request: PropTypes.shape({\n    loading: PropTypes.bool,\n    loaded: PropTypes.bool\n  }).isRequired,\n  workflows: PropTypes.arrayOf(PropTypes.shape({\n    transition: PropTypes.shape({\n      '@id': PropTypes.string,\n      title: PropTypes.string\n    })\n  })).isRequired,\n  open: PropTypes.bool.isRequired,\n  onOk: PropTypes.func.isRequired,\n  onCancel: PropTypes.func.isRequired\n});\nexport default compose(injectIntl, connect(state => ({\n  request: state.workflow.transition,\n  workflows: state.workflow.multiple\n}), {\n  getWorkflow,\n  transitionWorkflow\n}))(ContentsWorkflowModal);","map":{"version":3,"names":["React","Component","PropTypes","connect","compose","defineMessages","injectIntl","getWorkflow","transitionWorkflow","ModalForm","messages","default","stateTitle","includeChildrenTitle","stateDescription","loadingMessage","ContentsWorkflowModal","constructor","props","onSubmit","bind","componentDidMount","items","UNSAFE_componentWillReceiveProps","nextProps","request","loading","loaded","onOk","state","include_children","workflows","workflow","transitions","item","x","split","render","open","length","intl","formatMessage","onCancel","fieldsets","id","title","fields","properties","description","type","choices","y","required","func","isRequired","arrayOf","string","shape","bool","transition","multiple"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Contents/ContentsWorkflowModal.jsx"],"sourcesContent":["/**\n * Contents workflow modal.\n * @module components/manage/Contents/ContentsWorkflowModal\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { concat, filter, last, map, uniqBy } from 'lodash';\nimport { defineMessages, injectIntl } from 'react-intl';\n\nimport { getWorkflow, transitionWorkflow } from '@plone/volto/actions';\nimport { ModalForm } from '@plone/volto/components';\n\nconst messages = defineMessages({\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  stateTitle: {\n    id: 'Change State',\n    defaultMessage: 'Change State',\n  },\n  includeChildrenTitle: {\n    id: 'Change workflow state recursively',\n    defaultMessage: 'Change workflow state recursively',\n  },\n  stateDescription: {\n    id: 'Select the transition to be used for modifying the items state.',\n    defaultMessage:\n      'Select the transition to be used for modifying the items state.',\n  },\n  loadingMessage: {\n    id: 'Workflow Change Loading Message',\n    defaultMessage: 'Updating workflow states...',\n  },\n});\n\n/**\n * ContentsWorkflowModal class.\n * @class ContentsWorkflowModal\n * @extends Component\n */\nclass ContentsWorkflowModal extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    getWorkflow: PropTypes.func.isRequired,\n    transitionWorkflow: PropTypes.func.isRequired,\n    items: PropTypes.arrayOf(PropTypes.string).isRequired,\n    request: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    workflows: PropTypes.arrayOf(\n      PropTypes.shape({\n        transition: PropTypes.shape({\n          '@id': PropTypes.string,\n          title: PropTypes.string,\n        }),\n      }),\n    ).isRequired,\n    open: PropTypes.bool.isRequired,\n    onOk: PropTypes.func.isRequired,\n    onCancel: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ContentsUploadModal\n   */\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.getWorkflow(this.props.items);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.request.loading && nextProps.request.loaded) {\n      this.props.onOk();\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {string} state New state\n   * @returns {undefined}\n   */\n  onSubmit({ state, include_children }) {\n    if (!state) {\n      return;\n    }\n\n    this.props.transitionWorkflow(\n      filter(\n        map(\n          concat(\n            ...map(this.props.workflows, (workflow) => workflow.transitions),\n          ),\n          (item) => item['@id'],\n        ),\n        (x) => last(x.split('/')) === state,\n      ),\n      include_children,\n    );\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      this.props.open &&\n      this.props.workflows.length > 0 && (\n        <ModalForm\n          open={this.props.open}\n          loading={this.props.request.loading}\n          loadingMessage={this.props.intl.formatMessage(\n            messages.loadingMessage,\n          )}\n          onSubmit={this.onSubmit}\n          onCancel={this.props.onCancel}\n          title={this.props.intl.formatMessage(messages.stateTitle)}\n          schema={{\n            fieldsets: [\n              {\n                id: 'default',\n                title: this.props.intl.formatMessage(messages.default),\n                fields: ['state', 'include_children'],\n              },\n            ],\n            properties: {\n              state: {\n                description: this.props.intl.formatMessage(\n                  messages.stateDescription,\n                ),\n                title: this.props.intl.formatMessage(messages.stateTitle),\n                type: 'string',\n                choices: map(\n                  uniqBy(\n                    concat(\n                      ...map(\n                        this.props.workflows,\n                        (workflow) => workflow.transitions,\n                      ),\n                    ),\n                    (x) => x.title,\n                  ),\n                  (y) => [last(y['@id'].split('/')), y.title],\n                ),\n              },\n              include_children: {\n                title: this.props.intl.formatMessage(\n                  messages.includeChildrenTitle,\n                ),\n                type: 'boolean',\n              },\n            },\n            required: [],\n          }}\n        />\n      )\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state) => ({\n      request: state.workflow.transition,\n      workflows: state.workflow.multiple,\n    }),\n    { getWorkflow, transitionWorkflow },\n  ),\n)(ContentsWorkflowModal);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Default","defaultMessage":"Default"},{"id":"Change State","defaultMessage":"Change State"},{"id":"Change workflow state recursively","defaultMessage":"Change workflow state recursively"},{"id":"Select the transition to be used for modifying the items state.","defaultMessage":"Select the transition to be used for modifying the items state."},{"id":"Workflow Change Loading Message","defaultMessage":"Updating workflow states..."}]}},"sourceType":"module","externalDependencies":[]}