{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport { getQueryStringResults } from '@plone/volto/actions';\nimport { resolveBlockExtensions } from '@plone/volto/helpers';\nexport default (({\n  dispatch,\n  data,\n  path,\n  blocksConfig\n}) => {\n  var _resolvedExtensions$v;\n  const {\n    resolvedExtensions\n  } = resolveBlockExtensions(data, blocksConfig);\n  return [dispatch(getQueryStringResults(path, _objectSpread(_objectSpread({}, data.querystring), resolvedExtensions !== null && resolvedExtensions !== void 0 && (_resolvedExtensions$v = resolvedExtensions.variation) !== null && _resolvedExtensions$v !== void 0 && _resolvedExtensions$v.fullobjects ? {\n    fullobjects: 1\n  } : {\n    metadata_fields: '_all'\n  }), data.block))];\n});","map":{"version":3,"names":["getQueryStringResults","resolveBlockExtensions","dispatch","data","path","blocksConfig","resolvedExtensions","querystring","variation","fullobjects","metadata_fields","block"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Blocks/Listing/getAsyncData.js"],"sourcesContent":["import { getQueryStringResults } from '@plone/volto/actions';\nimport { resolveBlockExtensions } from '@plone/volto/helpers';\n\nexport default ({ dispatch, data, path, blocksConfig }) => {\n  const { resolvedExtensions } = resolveBlockExtensions(data, blocksConfig);\n\n  return [\n    dispatch(\n      getQueryStringResults(\n        path,\n        {\n          ...data.querystring,\n          ...(resolvedExtensions?.variation?.fullobjects\n            ? { fullobjects: 1 }\n            : { metadata_fields: '_all' }),\n        },\n        data.block,\n      ),\n    ),\n  ];\n};\n"],"mappings":";;;AAAA,SAASA,qBAAqB,QAAQ,sBAAsB;AAC5D,SAASC,sBAAsB,QAAQ,sBAAsB;AAE7D,gBAAe,CAAC;EAAEC,QAAQ;EAAEC,IAAI;EAAEC,IAAI;EAAEC;AAAa,CAAC,KAAK;EAAA;EACzD,MAAM;IAAEC;EAAmB,CAAC,GAAGL,sBAAsB,CAACE,IAAI,EAAEE,YAAY,CAAC;EAEzE,OAAO,CACLH,QAAQ,CACNF,qBAAqB,CACnBI,IAAI,kCAECD,IAAI,CAACI,WAAW,GACfD,kBAAkB,aAAlBA,kBAAkB,wCAAlBA,kBAAkB,CAAEE,SAAS,kDAA7B,sBAA+BC,WAAW,GAC1C;IAAEA,WAAW,EAAE;EAAE,CAAC,GAClB;IAAEC,eAAe,EAAE;EAAO,CAAC,GAEjCP,IAAI,CAACQ,KAAK,CACX,CACF,CACF;AACH,CAAC"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}