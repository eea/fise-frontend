{"ast":null,"code":"import _isEqual from \"lodash/isEqual\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Blocks/HeroImageLeft/Edit.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n/**\n * Edit Hero block.\n * @module components/manage/Blocks/Image/Edit\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { readAsDataURL } from 'promise-file-reader';\nimport { Button, Dimmer, Loader, Message } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport cx from 'classnames';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport { flattenToAppURL, getBaseUrl } from '@plone/volto/helpers';\nimport { createContent } from '@plone/volto/actions';\nimport { Icon, SidebarPortal, LinkMore } from '@plone/volto/components';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport Data from './Data';\nconst messages = defineMessages({\n  title: {\n    \"id\": \"Title\",\n    \"defaultMessage\": \"Title\"\n  },\n  description: {\n    \"id\": \"Description\",\n    \"defaultMessage\": \"Description\"\n  },\n  placeholder: {\n    \"id\": \"Upload a new image\",\n    \"defaultMessage\": \"Upload a new image\"\n  },\n  image: {\n    \"id\": \"Image\",\n    \"defaultMessage\": \"Image\"\n  },\n  browse: {\n    \"id\": \"Browse\",\n    \"defaultMessage\": \"Browse\"\n  },\n  uploading: {\n    \"id\": \"Uploading image\",\n    \"defaultMessage\": \"Uploading image\"\n  }\n});\n\n/**\n * Edit image block class.\n * @class Edit\n * @extends Component\n */\nclass EditComponent extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.onUploadImage = this.onUploadImage.bind(this);\n    this.state = {\n      uploading: false\n    };\n    const {\n      Map\n    } = this.props.immutableLib;\n    if (!__SERVER__) {\n      const {\n        DefaultDraftBlockRenderMap,\n        EditorState\n      } = props.draftJs;\n      const {\n        stateFromHTML\n      } = props.draftJsImportHtml;\n      const blockTitleRenderMap = Map({\n        unstyled: {\n          element: 'h1'\n        }\n      });\n      const blockDescriptionRenderMap = Map({\n        unstyled: {\n          element: 'div'\n        }\n      });\n      this.extendedBlockRenderMap = DefaultDraftBlockRenderMap.merge(blockTitleRenderMap);\n      this.extendedDescripBlockRenderMap = DefaultDraftBlockRenderMap.merge(blockDescriptionRenderMap);\n      let titleEditorState;\n      let descriptionEditorState;\n      if (props.data && props.data.title) {\n        titleEditorState = EditorState.createWithContent(stateFromHTML(props.data.title));\n      } else {\n        titleEditorState = EditorState.createEmpty();\n      }\n      if (props.data && props.data.description) {\n        descriptionEditorState = EditorState.createWithContent(stateFromHTML(props.data.description));\n      } else {\n        descriptionEditorState = EditorState.createEmpty();\n      }\n      this.state = {\n        uploading: false,\n        titleEditorState,\n        descriptionEditorState,\n        currentFocused: 'title'\n      };\n    }\n    this.onChangeTitle = this.onChangeTitle.bind(this);\n    this.onChangeDescription = this.onChangeDescription.bind(this);\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    if (this.props.selected) {\n      this.titleEditor.focus();\n    }\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.request.loading && nextProps.request.loaded && this.state.uploading) {\n      this.setState({\n        uploading: false\n      });\n      this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n        url: nextProps.content['@id']\n      }));\n    }\n    const {\n      EditorState\n    } = this.props.draftJs;\n    const {\n      stateFromHTML\n    } = this.props.draftJsImportHtml;\n    if (nextProps.data.title && this.props.data.title !== nextProps.data.title && !this.props.selected) {\n      const contentState = stateFromHTML(nextProps.data.title);\n      this.setState({\n        titleEditorState: nextProps.data.title ? EditorState.createWithContent(contentState) : EditorState.createEmpty()\n      });\n    }\n    if (nextProps.data.description && this.props.data.description !== nextProps.data.description && !this.props.selected) {\n      const contentState = stateFromHTML(nextProps.data.description);\n      this.setState({\n        descriptionEditorState: nextProps.data.description ? EditorState.createWithContent(contentState) : EditorState.createEmpty()\n      });\n    }\n    if (nextProps.selected !== this.props.selected) {\n      if (this.state.currentFocused === 'title') {\n        this.titleEditor.focus();\n      } else {\n        this.descriptionEditor.focus();\n      }\n    }\n  }\n\n  /**\n   * @param {*} nextProps\n   * @param {*} nextState\n   * @returns {boolean}\n   * @memberof Edit\n   */\n  shouldComponentUpdate(nextProps) {\n    return this.props.selected || !_isEqual(this.props.data, nextProps.data);\n  }\n\n  /**\n   * Change Title handler\n   * @method onChangeTitle\n   * @param {object} titleEditorState Editor state.\n   * @returns {undefined}\n   */\n  onChangeTitle(titleEditorState) {\n    this.setState({\n      titleEditorState\n    }, () => {\n      this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n        title: titleEditorState.getCurrentContent().getPlainText()\n      }));\n    });\n  }\n\n  /**\n   * Change Description handler\n   * @method onChangeDescription\n   * @param {object} descriptionEditorState Editor state.\n   * @returns {undefined}\n   */\n  onChangeDescription(descriptionEditorState) {\n    this.setState({\n      descriptionEditorState\n    }, () => {\n      this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n        description: descriptionEditorState.getCurrentContent().getPlainText()\n      }));\n    });\n  }\n\n  /**\n   * Upload image handler\n   * @method onUploadImage\n   * @returns {undefined}\n   */\n  onUploadImage({\n    target\n  }) {\n    const file = target.files[0];\n    this.setState({\n      uploading: true\n    });\n    readAsDataURL(file).then(data => {\n      const fields = data.match(/^data:(.*);(.*),(.*)$/);\n      this.props.createContent(getBaseUrl(this.props.pathname), {\n        '@type': 'Image',\n        image: {\n          data: fields[3],\n          encoding: fields[2],\n          'content-type': fields[1],\n          filename: file.name\n        }\n      }, this.props.block);\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    if (__SERVER__) {\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 14\n        }\n      });\n    }\n    const {\n      Editor\n    } = this.props.draftJs;\n    const placeholder = this.props.data.placeholder || this.props.intl.formatMessage(messages.placeholder);\n    return __jsx(\"div\", {\n      className: cx('block hero', {\n        selected: this.props.selected\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 7\n      }\n    }, this.props.selected && this.props.editable && !!this.props.data.url && __jsx(\"div\", {\n      className: \"toolbar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 11\n      }\n    }, __jsx(Button.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 13\n      }\n    }, __jsx(Button, {\n      icon: true,\n      basic: true,\n      onClick: () => this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n        url: ''\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 15\n      }\n    }, __jsx(Icon, {\n      name: clearSVG,\n      size: \"24px\",\n      color: \"#e40166\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 17\n      }\n    })))), __jsx(\"div\", {\n      className: \"block-inner-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 9\n      }\n    }, this.props.data.url ? __jsx(\"img\", {\n      className: \"hero-image\",\n      src: `${flattenToAppURL(this.props.data.url)}/@@images/image`,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 13\n      }\n    }) : __jsx(\"div\", {\n      className: \"image-add\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 13\n      }\n    }, __jsx(Message, {\n      className: \"image-message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 15\n      }\n    }, this.state.uploading && __jsx(Dimmer, {\n      active: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 348,\n        columnNumber: 19\n      }\n    }, __jsx(Loader, {\n      indeterminate: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 21\n      }\n    }, this.props.intl.formatMessage(messages.uploading))), __jsx(\"center\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354,\n        columnNumber: 17\n      }\n    }, __jsx(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355,\n        columnNumber: 19\n      }\n    }, this.props.intl.formatMessage(messages.image)), this.props.editable && __jsx(React.Fragment, null, __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 23\n      }\n    }, placeholder), __jsx(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 23\n      }\n    }, __jsx(\"label\", {\n      className: \"ui button file\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 25\n      }\n    }, this.props.intl.formatMessage(messages.browse), __jsx(\"input\", {\n      type: \"file\",\n      onChange: this.onUploadImage,\n      style: {\n        display: 'none'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 27\n      }\n    }))))))), __jsx(\"div\", {\n      className: \"hero-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 11\n      }\n    }, __jsx(\"div\", {\n      className: \"hero-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 13\n      }\n    }, __jsx(Editor, {\n      ref: node => {\n        this.titleEditor = node;\n      },\n      readOnly: !this.props.editable,\n      onChange: this.onChangeTitle,\n      editorState: this.state.titleEditorState,\n      blockRenderMap: this.extendedBlockRenderMap,\n      handleReturn: () => true,\n      placeholder: this.props.intl.formatMessage(messages.title),\n      blockStyleFn: () => 'title-editor',\n      onUpArrow: () => {\n        const selectionState = this.state.titleEditorState.getSelection();\n        const {\n          titleEditorState\n        } = this.state;\n        if (titleEditorState.getCurrentContent().getBlockMap().first().getKey() === selectionState.getFocusKey()) {\n          this.props.onFocusPreviousBlock(this.props.block, this.props.blockNode.current);\n        }\n      },\n      onDownArrow: () => {\n        const selectionState = this.state.titleEditorState.getSelection();\n        const {\n          titleEditorState\n        } = this.state;\n        if (titleEditorState.getCurrentContent().getBlockMap().last().getKey() === selectionState.getFocusKey()) {\n          this.setState(() => ({\n            currentFocused: 'description'\n          }));\n          this.descriptionEditor.focus();\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 15\n      }\n    }), __jsx(Editor, {\n      ref: node => {\n        this.descriptionEditor = node;\n      },\n      readOnly: !this.props.editable,\n      onChange: this.onChangeDescription,\n      editorState: this.state.descriptionEditorState,\n      blockRenderMap: this.extendedDescripBlockRenderMap,\n      handleReturn: () => true,\n      placeholder: this.props.intl.formatMessage(messages.description),\n      blockStyleFn: () => 'description-editor',\n      onUpArrow: () => {\n        const selectionState = this.state.descriptionEditorState.getSelection();\n        const currentCursorPosition = selectionState.getStartOffset();\n        if (currentCursorPosition === 0) {\n          this.setState(() => ({\n            currentFocused: 'title'\n          }));\n          this.titleEditor.focus();\n        }\n      },\n      onDownArrow: () => {\n        const selectionState = this.state.descriptionEditorState.getSelection();\n        const {\n          descriptionEditorState\n        } = this.state;\n        const currentCursorPosition = selectionState.getStartOffset();\n        const blockLength = descriptionEditorState.getCurrentContent().getFirstBlock().getLength();\n        if (currentCursorPosition === blockLength) {\n          this.props.onFocusNextBlock(this.props.block, this.props.blockNode.current);\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 15\n      }\n    })), __jsx(LinkMore, {\n      data: this.props.data,\n      isEditMode: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 13\n      }\n    }))), __jsx(SidebarPortal, {\n      selected: this.props.selected,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 9\n      }\n    }, __jsx(Data, _extends({}, this.props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 11\n      }\n    }))));\n  }\n}\n_defineProperty(EditComponent, \"propTypes\", {\n  selected: PropTypes.bool.isRequired,\n  block: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  content: PropTypes.objectOf(PropTypes.any),\n  request: PropTypes.shape({\n    loading: PropTypes.bool,\n    loaded: PropTypes.bool\n  }).isRequired,\n  pathname: PropTypes.string.isRequired,\n  onChangeBlock: PropTypes.func.isRequired,\n  onSelectBlock: PropTypes.func.isRequired,\n  onDeleteBlock: PropTypes.func.isRequired,\n  onFocusPreviousBlock: PropTypes.func.isRequired,\n  onFocusNextBlock: PropTypes.func.isRequired,\n  handleKeyDown: PropTypes.func.isRequired,\n  createContent: PropTypes.func.isRequired,\n  editable: PropTypes.bool\n});\n_defineProperty(EditComponent, \"defaultProps\", {\n  editable: true\n});\nconst Edit = injectLazyLibs(['draftJs', 'immutableLib', 'draftJsImportHtml'])(EditComponent);\nexport default compose(injectIntl, connect((state, ownProps) => {\n  var _state$content$subreq;\n  return {\n    request: state.content.subrequests[ownProps.block] || {},\n    content: (_state$content$subreq = state.content.subrequests[ownProps.block]) === null || _state$content$subreq === void 0 ? void 0 : _state$content$subreq.data\n  };\n}, {\n  createContent\n}))(Edit);","map":{"version":3,"names":["React","Component","PropTypes","connect","compose","readAsDataURL","Button","Dimmer","Loader","Message","defineMessages","injectIntl","cx","injectLazyLibs","flattenToAppURL","getBaseUrl","createContent","Icon","SidebarPortal","LinkMore","clearSVG","Data","messages","title","description","placeholder","image","browse","uploading","EditComponent","constructor","props","onUploadImage","bind","state","Map","immutableLib","__SERVER__","DefaultDraftBlockRenderMap","EditorState","draftJs","stateFromHTML","draftJsImportHtml","blockTitleRenderMap","unstyled","element","blockDescriptionRenderMap","extendedBlockRenderMap","merge","extendedDescripBlockRenderMap","titleEditorState","descriptionEditorState","data","createWithContent","createEmpty","currentFocused","onChangeTitle","onChangeDescription","componentDidMount","selected","titleEditor","focus","UNSAFE_componentWillReceiveProps","nextProps","request","loading","loaded","setState","onChangeBlock","block","url","content","contentState","descriptionEditor","shouldComponentUpdate","getCurrentContent","getPlainText","target","file","files","then","fields","match","pathname","encoding","filename","name","render","Editor","intl","formatMessage","editable","display","node","selectionState","getSelection","getBlockMap","first","getKey","getFocusKey","onFocusPreviousBlock","blockNode","current","last","currentCursorPosition","getStartOffset","blockLength","getFirstBlock","getLength","onFocusNextBlock","bool","isRequired","string","index","number","objectOf","any","shape","func","onSelectBlock","onDeleteBlock","handleKeyDown","Edit","ownProps","subrequests"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Blocks/HeroImageLeft/Edit.jsx"],"sourcesContent":["/**\n * Edit Hero block.\n * @module components/manage/Blocks/Image/Edit\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { readAsDataURL } from 'promise-file-reader';\nimport { Button, Dimmer, Loader, Message } from 'semantic-ui-react';\nimport { isEqual } from 'lodash';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport cx from 'classnames';\n\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport { flattenToAppURL, getBaseUrl } from '@plone/volto/helpers';\nimport { createContent } from '@plone/volto/actions';\nimport { Icon, SidebarPortal, LinkMore } from '@plone/volto/components';\n\nimport clearSVG from '@plone/volto/icons/clear.svg';\n\nimport Data from './Data';\n\nconst messages = defineMessages({\n  title: {\n    id: 'Title',\n    defaultMessage: 'Title',\n  },\n  description: {\n    id: 'Description',\n    defaultMessage: 'Description',\n  },\n  placeholder: {\n    id: 'Upload a new image',\n    defaultMessage: 'Upload a new image',\n  },\n  image: {\n    id: 'Image',\n    defaultMessage: 'Image',\n  },\n  browse: {\n    id: 'Browse',\n    defaultMessage: 'Browse',\n  },\n  uploading: {\n    id: 'Uploading image',\n    defaultMessage: 'Uploading image',\n  },\n});\n\n/**\n * Edit image block class.\n * @class Edit\n * @extends Component\n */\nclass EditComponent extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    selected: PropTypes.bool.isRequired,\n    block: PropTypes.string.isRequired,\n    index: PropTypes.number.isRequired,\n    data: PropTypes.objectOf(PropTypes.any).isRequired,\n    content: PropTypes.objectOf(PropTypes.any),\n    request: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    pathname: PropTypes.string.isRequired,\n    onChangeBlock: PropTypes.func.isRequired,\n    onSelectBlock: PropTypes.func.isRequired,\n    onDeleteBlock: PropTypes.func.isRequired,\n    onFocusPreviousBlock: PropTypes.func.isRequired,\n    onFocusNextBlock: PropTypes.func.isRequired,\n    handleKeyDown: PropTypes.func.isRequired,\n    createContent: PropTypes.func.isRequired,\n    editable: PropTypes.bool,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    editable: true,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n\n    this.onUploadImage = this.onUploadImage.bind(this);\n    this.state = {\n      uploading: false,\n    };\n\n    const { Map } = this.props.immutableLib;\n\n    if (!__SERVER__) {\n      const { DefaultDraftBlockRenderMap, EditorState } = props.draftJs;\n      const { stateFromHTML } = props.draftJsImportHtml;\n\n      const blockTitleRenderMap = Map({\n        unstyled: {\n          element: 'h1',\n        },\n      });\n\n      const blockDescriptionRenderMap = Map({\n        unstyled: {\n          element: 'div',\n        },\n      });\n\n      this.extendedBlockRenderMap = DefaultDraftBlockRenderMap.merge(\n        blockTitleRenderMap,\n      );\n\n      this.extendedDescripBlockRenderMap = DefaultDraftBlockRenderMap.merge(\n        blockDescriptionRenderMap,\n      );\n\n      let titleEditorState;\n      let descriptionEditorState;\n      if (props.data && props.data.title) {\n        titleEditorState = EditorState.createWithContent(\n          stateFromHTML(props.data.title),\n        );\n      } else {\n        titleEditorState = EditorState.createEmpty();\n      }\n      if (props.data && props.data.description) {\n        descriptionEditorState = EditorState.createWithContent(\n          stateFromHTML(props.data.description),\n        );\n      } else {\n        descriptionEditorState = EditorState.createEmpty();\n      }\n      this.state = {\n        uploading: false,\n        titleEditorState,\n        descriptionEditorState,\n        currentFocused: 'title',\n      };\n    }\n\n    this.onChangeTitle = this.onChangeTitle.bind(this);\n    this.onChangeDescription = this.onChangeDescription.bind(this);\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    if (this.props.selected) {\n      this.titleEditor.focus();\n    }\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (\n      this.props.request.loading &&\n      nextProps.request.loaded &&\n      this.state.uploading\n    ) {\n      this.setState({\n        uploading: false,\n      });\n      this.props.onChangeBlock(this.props.block, {\n        ...this.props.data,\n        url: nextProps.content['@id'],\n      });\n    }\n\n    const { EditorState } = this.props.draftJs;\n    const { stateFromHTML } = this.props.draftJsImportHtml;\n\n    if (\n      nextProps.data.title &&\n      this.props.data.title !== nextProps.data.title &&\n      !this.props.selected\n    ) {\n      const contentState = stateFromHTML(nextProps.data.title);\n      this.setState({\n        titleEditorState: nextProps.data.title\n          ? EditorState.createWithContent(contentState)\n          : EditorState.createEmpty(),\n      });\n    }\n\n    if (\n      nextProps.data.description &&\n      this.props.data.description !== nextProps.data.description &&\n      !this.props.selected\n    ) {\n      const contentState = stateFromHTML(nextProps.data.description);\n      this.setState({\n        descriptionEditorState: nextProps.data.description\n          ? EditorState.createWithContent(contentState)\n          : EditorState.createEmpty(),\n      });\n    }\n\n    if (nextProps.selected !== this.props.selected) {\n      if (this.state.currentFocused === 'title') {\n        this.titleEditor.focus();\n      } else {\n        this.descriptionEditor.focus();\n      }\n    }\n  }\n\n  /**\n   * @param {*} nextProps\n   * @param {*} nextState\n   * @returns {boolean}\n   * @memberof Edit\n   */\n  shouldComponentUpdate(nextProps) {\n    return this.props.selected || !isEqual(this.props.data, nextProps.data);\n  }\n\n  /**\n   * Change Title handler\n   * @method onChangeTitle\n   * @param {object} titleEditorState Editor state.\n   * @returns {undefined}\n   */\n  onChangeTitle(titleEditorState) {\n    this.setState({ titleEditorState }, () => {\n      this.props.onChangeBlock(this.props.block, {\n        ...this.props.data,\n        title: titleEditorState.getCurrentContent().getPlainText(),\n      });\n    });\n  }\n\n  /**\n   * Change Description handler\n   * @method onChangeDescription\n   * @param {object} descriptionEditorState Editor state.\n   * @returns {undefined}\n   */\n  onChangeDescription(descriptionEditorState) {\n    this.setState({ descriptionEditorState }, () => {\n      this.props.onChangeBlock(this.props.block, {\n        ...this.props.data,\n        description: descriptionEditorState.getCurrentContent().getPlainText(),\n      });\n    });\n  }\n\n  /**\n   * Upload image handler\n   * @method onUploadImage\n   * @returns {undefined}\n   */\n  onUploadImage({ target }) {\n    const file = target.files[0];\n    this.setState({\n      uploading: true,\n    });\n    readAsDataURL(file).then((data) => {\n      const fields = data.match(/^data:(.*);(.*),(.*)$/);\n      this.props.createContent(\n        getBaseUrl(this.props.pathname),\n        {\n          '@type': 'Image',\n          image: {\n            data: fields[3],\n            encoding: fields[2],\n            'content-type': fields[1],\n            filename: file.name,\n          },\n        },\n        this.props.block,\n      );\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    if (__SERVER__) {\n      return <div />;\n    }\n    const { Editor } = this.props.draftJs;\n    const placeholder =\n      this.props.data.placeholder ||\n      this.props.intl.formatMessage(messages.placeholder);\n\n    return (\n      <div\n        className={cx('block hero', {\n          selected: this.props.selected,\n        })}\n      >\n        {this.props.selected && this.props.editable && !!this.props.data.url && (\n          <div className=\"toolbar\">\n            <Button.Group>\n              <Button\n                icon\n                basic\n                onClick={() =>\n                  this.props.onChangeBlock(this.props.block, {\n                    ...this.props.data,\n                    url: '',\n                  })\n                }\n              >\n                <Icon name={clearSVG} size=\"24px\" color=\"#e40166\" />\n              </Button>\n            </Button.Group>\n          </div>\n        )}\n        <div className=\"block-inner-wrapper\">\n          {this.props.data.url ? (\n            <img\n              className=\"hero-image\"\n              src={`${flattenToAppURL(this.props.data.url)}/@@images/image`}\n              alt=\"\"\n            />\n          ) : (\n            <div className=\"image-add\">\n              <Message className=\"image-message\">\n                {this.state.uploading && (\n                  <Dimmer active>\n                    <Loader indeterminate>\n                      {this.props.intl.formatMessage(messages.uploading)}\n                    </Loader>\n                  </Dimmer>\n                )}\n                <center>\n                  <h4>{this.props.intl.formatMessage(messages.image)}</h4>\n                  {this.props.editable && (\n                    <>\n                      <p>{placeholder}</p>\n                      <p>\n                        <label className=\"ui button file\">\n                          {this.props.intl.formatMessage(messages.browse)}\n                          <input\n                            type=\"file\"\n                            onChange={this.onUploadImage}\n                            style={{ display: 'none' }}\n                          />\n                        </label>\n                      </p>\n                    </>\n                  )}\n                </center>\n              </Message>\n            </div>\n          )}\n          <div className=\"hero-body\">\n            <div className=\"hero-text\">\n              <Editor\n                ref={(node) => {\n                  this.titleEditor = node;\n                }}\n                readOnly={!this.props.editable}\n                onChange={this.onChangeTitle}\n                editorState={this.state.titleEditorState}\n                blockRenderMap={this.extendedBlockRenderMap}\n                handleReturn={() => true}\n                placeholder={this.props.intl.formatMessage(messages.title)}\n                blockStyleFn={() => 'title-editor'}\n                onUpArrow={() => {\n                  const selectionState = this.state.titleEditorState.getSelection();\n                  const { titleEditorState } = this.state;\n                  if (\n                    titleEditorState\n                      .getCurrentContent()\n                      .getBlockMap()\n                      .first()\n                      .getKey() === selectionState.getFocusKey()\n                  ) {\n                    this.props.onFocusPreviousBlock(\n                      this.props.block,\n                      this.props.blockNode.current,\n                    );\n                  }\n                }}\n                onDownArrow={() => {\n                  const selectionState = this.state.titleEditorState.getSelection();\n                  const { titleEditorState } = this.state;\n                  if (\n                    titleEditorState\n                      .getCurrentContent()\n                      .getBlockMap()\n                      .last()\n                      .getKey() === selectionState.getFocusKey()\n                  ) {\n                    this.setState(() => ({ currentFocused: 'description' }));\n                    this.descriptionEditor.focus();\n                  }\n                }}\n              />\n              <Editor\n                ref={(node) => {\n                  this.descriptionEditor = node;\n                }}\n                readOnly={!this.props.editable}\n                onChange={this.onChangeDescription}\n                editorState={this.state.descriptionEditorState}\n                blockRenderMap={this.extendedDescripBlockRenderMap}\n                handleReturn={() => true}\n                placeholder={this.props.intl.formatMessage(\n                  messages.description,\n                )}\n                blockStyleFn={() => 'description-editor'}\n                onUpArrow={() => {\n                  const selectionState = this.state.descriptionEditorState.getSelection();\n                  const currentCursorPosition = selectionState.getStartOffset();\n\n                  if (currentCursorPosition === 0) {\n                    this.setState(() => ({ currentFocused: 'title' }));\n                    this.titleEditor.focus();\n                  }\n                }}\n                onDownArrow={() => {\n                  const selectionState = this.state.descriptionEditorState.getSelection();\n                  const { descriptionEditorState } = this.state;\n                  const currentCursorPosition = selectionState.getStartOffset();\n                  const blockLength = descriptionEditorState\n                    .getCurrentContent()\n                    .getFirstBlock()\n                    .getLength();\n\n                  if (currentCursorPosition === blockLength) {\n                    this.props.onFocusNextBlock(\n                      this.props.block,\n                      this.props.blockNode.current,\n                    );\n                  }\n                }}\n              />\n            </div>\n            <LinkMore data={this.props.data} isEditMode={true} />\n          </div>\n        </div>\n        <SidebarPortal selected={this.props.selected}>\n          <Data {...this.props} />\n        </SidebarPortal>\n      </div>\n    );\n  }\n}\n\nconst Edit = injectLazyLibs(['draftJs', 'immutableLib', 'draftJsImportHtml'])(\n  EditComponent,\n);\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, ownProps) => ({\n      request: state.content.subrequests[ownProps.block] || {},\n      content: state.content.subrequests[ownProps.block]?.data,\n    }),\n    { createContent },\n  ),\n)(Edit);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Title","defaultMessage":"Title"},{"id":"Description","defaultMessage":"Description"},{"id":"Upload a new image","defaultMessage":"Upload a new image"},{"id":"Image","defaultMessage":"Image"},{"id":"Browse","defaultMessage":"Browse"},{"id":"Uploading image","defaultMessage":"Uploading image"}]}},"sourceType":"module","externalDependencies":[]}