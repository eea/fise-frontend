{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Aliases/Aliases.jsx\";\nvar __jsx = React.createElement;\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n/**\n * Aliases container.\n * @module components/manage/Aliases/Aliases\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from '@plone/volto/helpers';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { Portal } from 'react-portal';\nimport { Button, Checkbox, Container, Form, Header, Input, Segment } from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport { removeAliases, addAliases, getAliases } from '@plone/volto/actions';\nimport { Icon, Toolbar } from '@plone/volto/components';\nimport backSVG from '@plone/volto/icons/back.svg';\nimport { getBaseUrl } from '@plone/volto/helpers';\nimport { toast } from 'react-toastify';\nimport { Toast } from '@plone/volto/components';\nconst messages = defineMessages({\n  back: {\n    \"id\": \"Back\",\n    \"defaultMessage\": \"Back\"\n  },\n  aliases: {\n    \"id\": \"URL Management\",\n    \"defaultMessage\": \"URL Management\"\n  },\n  success: {\n    \"id\": \"Success\",\n    \"defaultMessage\": \"Success\"\n  },\n  successAdd: {\n    \"id\": \"Alias has been added\",\n    \"defaultMessage\": \"Alias has been added\"\n  }\n});\n\n/**\n * Aliases class.\n * @class Aliases\n * @extends Component\n */\nclass Aliases extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Aliases\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      isClient: false,\n      newAlias: '',\n      isAliasCorrect: false,\n      isAliasAlready: false,\n      aliasesToRemove: []\n    };\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.getAliases(getBaseUrl(this.props.pathname), {\n      query: '',\n      manual: '',\n      datetime: '',\n      batchSize: ''\n    });\n    this.setState({\n      isClient: true\n    });\n  }\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.newAlias !== this.state.newAlias) {\n      var _this$props$aliases;\n      if (this.state.newAlias.charAt(0) === '/') {\n        this.setState({\n          isAliasCorrect: true\n        });\n      } else {\n        this.setState({\n          isAliasCorrect: false\n        });\n      }\n      if ((_this$props$aliases = this.props.aliases) !== null && _this$props$aliases !== void 0 && _this$props$aliases.items.find(item => item.path === this.state.newAlias)) {\n        this.setState({\n          isAliasAlready: true\n        });\n      } else {\n        this.setState({\n          isAliasAlready: false\n        });\n      }\n    }\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.aliases.add.loading && nextProps.aliases.add.loaded) {\n      if (nextProps.aliases.add.error) {\n        this.setState({\n          isAliasAlready: true\n        });\n      } else {\n        this.setState({\n          isAliasAlready: false\n        });\n        toast.success(__jsx(Toast, {\n          success: true,\n          title: this.props.intl.formatMessage(messages.success),\n          content: this.props.intl.formatMessage(messages.successAdd),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 11\n          }\n        }));\n      }\n      this.props.getAliases(getBaseUrl(this.props.pathname), {\n        query: '',\n        manual: '',\n        datetime: '',\n        batchSize: ''\n      });\n    }\n    if (this.props.aliases.remove.loading && nextProps.aliases.remove.loaded) {\n      this.props.getAliases(getBaseUrl(this.props.pathname), {\n        query: '',\n        manual: '',\n        datetime: '',\n        batchSize: ''\n      });\n    }\n  }\n\n  /**\n   * Url change handler\n   * @method handleAltChange\n   * @returns {undefined}\n   */\n  handleAltChange(val) {\n    this.setState({\n      newAlias: val\n    });\n  }\n\n  /**\n   * New alias submit handler\n   * @method handleSubmitAlias\n   * @returns {undefined}\n   */\n  handleSubmitAlias() {\n    if (this.state.isAliasCorrect) {\n      this.props.addAliases(getBaseUrl(this.props.pathname), {\n        items: this.state.newAlias\n      });\n      this.setState({\n        newAlias: ''\n      });\n    }\n  }\n\n  /**\n   * Check to-remove aliases handler\n   * @method handleSubmitAlias\n   * @returns {undefined}\n   */\n  handleCheckAlias(alias) {\n    const aliases = this.state.aliasesToRemove;\n    if (aliases.includes(alias)) {\n      const index = aliases.indexOf(alias);\n      if (index > -1) {\n        let newAliasesArr = aliases;\n        newAliasesArr.splice(index, 1);\n        this.setState({\n          aliasesToRemove: newAliasesArr\n        });\n      }\n    } else {\n      this.setState({\n        aliasesToRemove: [...this.state.aliasesToRemove, alias]\n      });\n    }\n  }\n\n  /**\n   * Remove aliases handler\n   * @method handleRemoveAliases\n   * @returns {undefined}\n   */\n  handleRemoveAliases() {\n    this.props.removeAliases(getBaseUrl(this.props.pathname), {\n      items: this.state.aliasesToRemove\n    });\n    this.setState({\n      aliasesToRemove: []\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    var _this$props$aliases2;\n    return __jsx(Container, {\n      id: \"aliases\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 7\n      }\n    }, __jsx(Helmet, {\n      title: this.props.intl.formatMessage(messages.aliases),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }\n    }), __jsx(Segment.Group, {\n      raised: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }\n    }, __jsx(Segment, {\n      className: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 11\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"URL Management for {title}\",\n      defaultMessage: \"URL Management for {title}\",\n      values: {\n        title: __jsx(\"q\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 32\n          }\n        }, this.props.title)\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 13\n      }\n    })), __jsx(Segment, {\n      secondary: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 11\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Using this form, you can manage alternative urls for an item. This is an easy way to make an item available under two different URLs.\",\n      defaultMessage: \"Using this form, you can manage alternative urls for an item. This is an easy way to make an item available under two different URLs.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 13\n      }\n    })), __jsx(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 11\n      }\n    }, __jsx(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 13\n      }\n    }, __jsx(Header, {\n      size: \"medium\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 15\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Add a new alternative url\",\n      defaultMessage: \"Add a new alternative url\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 17\n      }\n    })), __jsx(\"p\", {\n      className: \"help\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 15\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Enter the absolute path where the alternative url should exist. The path must start with '/'. Only urls that result in a 404 not found page will result in a redirect occurring.\",\n      defaultMessage: \"Enter the absolute path where the alternative url should exist. The path must start with '/'. Only urls that result in a 404 not found page will result in a redirect occurring.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 17\n      }\n    })), __jsx(Form.Field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 15\n      }\n    }, __jsx(Input, {\n      id: \"alternative-url-input\",\n      name: \"alternative-url\",\n      placeholder: \"/example\",\n      value: this.state.newAlias,\n      onChange: e => this.handleAltChange(e.target.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 17\n      }\n    }), !this.state.isAliasCorrect && this.state.newAlias !== '' && __jsx(\"p\", {\n      style: {\n        color: 'red'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 19\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Alternative url path must start with a slash.\",\n      defaultMessage: \"Alternative url path must start with a slash.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 21\n      }\n    })), this.state.isAliasAlready && __jsx(\"p\", {\n      style: {\n        color: 'red'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 19\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"The provided alternative url already exists!\",\n      defaultMessage: \"The provided alternative url already exists!\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 21\n      }\n    }))), __jsx(Button, {\n      id: \"submit-alias\",\n      primary: true,\n      onClick: () => this.handleSubmitAlias(),\n      disabled: !this.state.isAliasCorrect || this.state.newAlias === '' || this.state.isAliasAlready,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 15\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Add\",\n      defaultMessage: \"Add\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286,\n        columnNumber: 17\n      }\n    })))), __jsx(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 11\n      }\n    }, __jsx(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 13\n      }\n    }, __jsx(Header, {\n      size: \"medium\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 15\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Existing alternative urls for this item\",\n      defaultMessage: \"Existing alternative urls for this item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 17\n      }\n    })), (_this$props$aliases2 = this.props.aliases) === null || _this$props$aliases2 === void 0 ? void 0 : _this$props$aliases2.items.map((alias, i) => __jsx(Form.Field, {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 17\n      }\n    }, __jsx(Checkbox, {\n      id: `alias-check-${i}`,\n      onChange: (e, {\n        value\n      }) => this.handleCheckAlias(value),\n      value: alias.path,\n      label: alias.path,\n      checked: this.state.aliasesToRemove.includes(alias.path),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 19\n      }\n    }))), __jsx(Button, {\n      id: \"remove-alias\",\n      onClick: () => this.handleRemoveAliases(),\n      primary: true,\n      disabled: this.state.aliasesToRemove.length === 0,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 15\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Remove\",\n      defaultMessage: \"Remove\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 17\n      }\n    }))))), this.state.isClient && __jsx(Portal, {\n      node: document.getElementById('toolbar'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 11\n      }\n    }, __jsx(Toolbar, {\n      pathname: this.props.pathname,\n      hideDefaultViewButtons: true,\n      inner: __jsx(Link, {\n        to: `${getBaseUrl(this.props.pathname)}`,\n        className: \"item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 17\n        }\n      }, __jsx(Icon, {\n        name: backSVG,\n        className: \"contents circled\",\n        size: \"30px\",\n        title: this.props.intl.formatMessage(messages.back),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 19\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 13\n      }\n    })));\n  }\n}\n_defineProperty(Aliases, \"propTypes\", {\n  removeAliases: PropTypes.func.isRequired,\n  addAliases: PropTypes.func.isRequired,\n  getAliases: PropTypes.func.isRequired,\n  pathname: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired\n});\nexport default compose(injectIntl, connect((state, props) => {\n  var _state$content$data;\n  return {\n    aliases: state.aliases,\n    pathname: props.location.pathname,\n    title: ((_state$content$data = state.content.data) === null || _state$content$data === void 0 ? void 0 : _state$content$data.title) || ''\n  };\n}, {\n  addAliases,\n  getAliases,\n  removeAliases\n}))(Aliases);","map":{"version":3,"names":["React","Component","PropTypes","Helmet","connect","compose","Link","Portal","Button","Checkbox","Container","Form","Header","Input","Segment","FormattedMessage","defineMessages","injectIntl","removeAliases","addAliases","getAliases","Icon","Toolbar","backSVG","getBaseUrl","toast","Toast","messages","back","aliases","success","successAdd","Aliases","constructor","props","state","isClient","newAlias","isAliasCorrect","isAliasAlready","aliasesToRemove","componentDidMount","pathname","query","manual","datetime","batchSize","setState","componentDidUpdate","prevProps","prevState","charAt","items","find","item","path","UNSAFE_componentWillReceiveProps","nextProps","add","loading","loaded","error","intl","formatMessage","remove","handleAltChange","val","handleSubmitAlias","handleCheckAlias","alias","includes","index","indexOf","newAliasesArr","splice","handleRemoveAliases","render","title","e","target","value","color","map","i","length","document","getElementById","func","isRequired","string","location","content","data"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Aliases/Aliases.jsx"],"sourcesContent":["/**\n * Aliases container.\n * @module components/manage/Aliases/Aliases\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from '@plone/volto/helpers';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { Portal } from 'react-portal';\nimport {\n  Button,\n  Checkbox,\n  Container,\n  Form,\n  Header,\n  Input,\n  Segment,\n} from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\n\nimport { removeAliases, addAliases, getAliases } from '@plone/volto/actions';\n\nimport { Icon, Toolbar } from '@plone/volto/components';\n\nimport backSVG from '@plone/volto/icons/back.svg';\nimport { getBaseUrl } from '@plone/volto/helpers';\nimport { toast } from 'react-toastify';\nimport { Toast } from '@plone/volto/components';\n\nconst messages = defineMessages({\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  aliases: {\n    id: 'URL Management',\n    defaultMessage: 'URL Management',\n  },\n  success: {\n    id: 'Success',\n    defaultMessage: 'Success',\n  },\n  successAdd: {\n    id: 'Alias has been added',\n    defaultMessage: 'Alias has been added',\n  },\n});\n\n/**\n * Aliases class.\n * @class Aliases\n * @extends Component\n */\nclass Aliases extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    removeAliases: PropTypes.func.isRequired,\n    addAliases: PropTypes.func.isRequired,\n    getAliases: PropTypes.func.isRequired,\n    pathname: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Aliases\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      isClient: false,\n      newAlias: '',\n      isAliasCorrect: false,\n      isAliasAlready: false,\n      aliasesToRemove: [],\n    };\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.getAliases(getBaseUrl(this.props.pathname), {\n      query: '',\n      manual: '',\n      datetime: '',\n      batchSize: '',\n    });\n    this.setState({ isClient: true });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.newAlias !== this.state.newAlias) {\n      if (this.state.newAlias.charAt(0) === '/') {\n        this.setState({ isAliasCorrect: true });\n      } else {\n        this.setState({ isAliasCorrect: false });\n      }\n      if (\n        this.props.aliases?.items.find(\n          (item) => item.path === this.state.newAlias,\n        )\n      ) {\n        this.setState({ isAliasAlready: true });\n      } else {\n        this.setState({ isAliasAlready: false });\n      }\n    }\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.aliases.add.loading && nextProps.aliases.add.loaded) {\n      if (nextProps.aliases.add.error) {\n        this.setState({ isAliasAlready: true });\n      } else {\n        this.setState({ isAliasAlready: false });\n        toast.success(\n          <Toast\n            success\n            title={this.props.intl.formatMessage(messages.success)}\n            content={this.props.intl.formatMessage(messages.successAdd)}\n          />,\n        );\n      }\n      this.props.getAliases(getBaseUrl(this.props.pathname), {\n        query: '',\n        manual: '',\n        datetime: '',\n        batchSize: '',\n      });\n    }\n    if (this.props.aliases.remove.loading && nextProps.aliases.remove.loaded) {\n      this.props.getAliases(getBaseUrl(this.props.pathname), {\n        query: '',\n        manual: '',\n        datetime: '',\n        batchSize: '',\n      });\n    }\n  }\n\n  /**\n   * Url change handler\n   * @method handleAltChange\n   * @returns {undefined}\n   */\n  handleAltChange(val) {\n    this.setState({ newAlias: val });\n  }\n\n  /**\n   * New alias submit handler\n   * @method handleSubmitAlias\n   * @returns {undefined}\n   */\n  handleSubmitAlias() {\n    if (this.state.isAliasCorrect) {\n      this.props.addAliases(getBaseUrl(this.props.pathname), {\n        items: this.state.newAlias,\n      });\n      this.setState({ newAlias: '' });\n    }\n  }\n\n  /**\n   * Check to-remove aliases handler\n   * @method handleSubmitAlias\n   * @returns {undefined}\n   */\n  handleCheckAlias(alias) {\n    const aliases = this.state.aliasesToRemove;\n    if (aliases.includes(alias)) {\n      const index = aliases.indexOf(alias);\n      if (index > -1) {\n        let newAliasesArr = aliases;\n        newAliasesArr.splice(index, 1);\n        this.setState({ aliasesToRemove: newAliasesArr });\n      }\n    } else {\n      this.setState({\n        aliasesToRemove: [...this.state.aliasesToRemove, alias],\n      });\n    }\n  }\n\n  /**\n   * Remove aliases handler\n   * @method handleRemoveAliases\n   * @returns {undefined}\n   */\n  handleRemoveAliases() {\n    this.props.removeAliases(getBaseUrl(this.props.pathname), {\n      items: this.state.aliasesToRemove,\n    });\n    this.setState({ aliasesToRemove: [] });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <Container id=\"aliases\">\n        <Helmet title={this.props.intl.formatMessage(messages.aliases)} />\n        <Segment.Group raised>\n          <Segment className=\"primary\">\n            <FormattedMessage\n              id=\"URL Management for {title}\"\n              defaultMessage=\"URL Management for {title}\"\n              values={{ title: <q>{this.props.title}</q> }}\n            />\n          </Segment>\n          <Segment secondary>\n            <FormattedMessage\n              id=\"Using this form, you can manage alternative urls for an item. This is an easy way to make an item available under two different URLs.\"\n              defaultMessage=\"Using this form, you can manage alternative urls for an item. This is an easy way to make an item available under two different URLs.\"\n            />\n          </Segment>\n          <Form>\n            <Segment>\n              <Header size=\"medium\">\n                <FormattedMessage\n                  id=\"Add a new alternative url\"\n                  defaultMessage=\"Add a new alternative url\"\n                />\n              </Header>\n              <p className=\"help\">\n                <FormattedMessage\n                  id=\"Enter the absolute path where the alternative url should exist. The path must start with '/'. Only urls that result in a 404 not found page will result in a redirect occurring.\"\n                  defaultMessage=\"Enter the absolute path where the alternative url should exist. The path must start with '/'. Only urls that result in a 404 not found page will result in a redirect occurring.\"\n                />\n              </p>\n              <Form.Field>\n                <Input\n                  id=\"alternative-url-input\"\n                  name=\"alternative-url\"\n                  placeholder=\"/example\"\n                  value={this.state.newAlias}\n                  onChange={(e) => this.handleAltChange(e.target.value)}\n                />\n                {!this.state.isAliasCorrect && this.state.newAlias !== '' && (\n                  <p style={{ color: 'red' }}>\n                    <FormattedMessage\n                      id=\"Alternative url path must start with a slash.\"\n                      defaultMessage=\"Alternative url path must start with a slash.\"\n                    />\n                  </p>\n                )}\n                {this.state.isAliasAlready && (\n                  <p style={{ color: 'red' }}>\n                    <FormattedMessage\n                      id=\"The provided alternative url already exists!\"\n                      defaultMessage=\"The provided alternative url already exists!\"\n                    />\n                  </p>\n                )}\n              </Form.Field>\n              <Button\n                id=\"submit-alias\"\n                primary\n                onClick={() => this.handleSubmitAlias()}\n                disabled={\n                  !this.state.isAliasCorrect ||\n                  this.state.newAlias === '' ||\n                  this.state.isAliasAlready\n                }\n              >\n                <FormattedMessage id=\"Add\" defaultMessage=\"Add\" />\n              </Button>\n            </Segment>\n          </Form>\n          <Form>\n            <Segment>\n              <Header size=\"medium\">\n                <FormattedMessage\n                  id=\"Existing alternative urls for this item\"\n                  defaultMessage=\"Existing alternative urls for this item\"\n                />\n              </Header>\n              {this.props.aliases?.items.map((alias, i) => (\n                <Form.Field key={i}>\n                  <Checkbox\n                    id={`alias-check-${i}`}\n                    onChange={(e, { value }) => this.handleCheckAlias(value)}\n                    value={alias.path}\n                    label={alias.path}\n                    checked={this.state.aliasesToRemove.includes(alias.path)}\n                  />\n                </Form.Field>\n              ))}\n              <Button\n                id=\"remove-alias\"\n                onClick={() => this.handleRemoveAliases()}\n                primary\n                disabled={this.state.aliasesToRemove.length === 0}\n              >\n                <FormattedMessage id=\"Remove\" defaultMessage=\"Remove\" />\n              </Button>\n            </Segment>\n          </Form>\n        </Segment.Group>\n        {this.state.isClient && (\n          <Portal node={document.getElementById('toolbar')}>\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={\n                <Link\n                  to={`${getBaseUrl(this.props.pathname)}`}\n                  className=\"item\"\n                >\n                  <Icon\n                    name={backSVG}\n                    className=\"contents circled\"\n                    size=\"30px\"\n                    title={this.props.intl.formatMessage(messages.back)}\n                  />\n                </Link>\n              }\n            />\n          </Portal>\n        )}\n      </Container>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      aliases: state.aliases,\n      pathname: props.location.pathname,\n      title: state.content.data?.title || '',\n    }),\n    { addAliases, getAliases, removeAliases },\n  ),\n)(Aliases);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Back","defaultMessage":"Back"},{"id":"URL Management","defaultMessage":"URL Management"},{"id":"Success","defaultMessage":"Success"},{"id":"Alias has been added","defaultMessage":"Alias has been added"},{"id":"URL Management for {title}","defaultMessage":"URL Management for {title}"},{"id":"Using this form, you can manage alternative urls for an item. This is an easy way to make an item available under two different URLs.","defaultMessage":"Using this form, you can manage alternative urls for an item. This is an easy way to make an item available under two different URLs."},{"id":"Add a new alternative url","defaultMessage":"Add a new alternative url"},{"id":"Enter the absolute path where the alternative url should exist. The path must start with '/'. Only urls that result in a 404 not found page will result in a redirect occurring.","defaultMessage":"Enter the absolute path where the alternative url should exist. The path must start with '/'. Only urls that result in a 404 not found page will result in a redirect occurring."},{"id":"Alternative url path must start with a slash.","defaultMessage":"Alternative url path must start with a slash."},{"id":"The provided alternative url already exists!","defaultMessage":"The provided alternative url already exists!"},{"id":"Add","defaultMessage":"Add"},{"id":"Existing alternative urls for this item","defaultMessage":"Existing alternative urls for this item"},{"id":"Remove","defaultMessage":"Remove"}]}},"sourceType":"module","externalDependencies":[]}