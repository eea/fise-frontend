{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Widgets/AlignWidget.jsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport { FormFieldWrapper } from '@plone/volto/components';\nimport AlignBlock from '@plone/volto/components/manage/Sidebar/AlignBlock';\n\n/**\n * AlignWidget component.\n * To benefit from styling integration, use with a field named 'align'\n *\n * Example how this field would look in schema:\n *\n * ```jsx\n * {\n *  title: 'Align',\n *  description: 'Layout align',\n *  widget: 'align',\n * }\n * ```\n */\nconst AlignWidget = props => {\n  const {\n    id,\n    onChange,\n    value,\n    actions\n  } = props;\n  return __jsx(FormFieldWrapper, _extends({}, props, {\n    className: \"align-widget\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }), __jsx(AlignBlock, {\n    align: value,\n    onChangeBlock: (block, {\n      align\n    }) => onChange(id, align),\n    data: {\n      align: value\n    },\n    block: id,\n    actions: actions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }\n  }));\n};\nexport default AlignWidget;","map":{"version":3,"names":["FormFieldWrapper","AlignBlock","AlignWidget","props","id","onChange","value","actions","block","align"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Widgets/AlignWidget.jsx"],"sourcesContent":["import { FormFieldWrapper } from '@plone/volto/components';\nimport AlignBlock from '@plone/volto/components/manage/Sidebar/AlignBlock';\n\n/**\n * AlignWidget component.\n * To benefit from styling integration, use with a field named 'align'\n *\n * Example how this field would look in schema:\n *\n * ```jsx\n * {\n *  title: 'Align',\n *  description: 'Layout align',\n *  widget: 'align',\n * }\n * ```\n */\nconst AlignWidget = (props) => {\n  const { id, onChange, value, actions } = props;\n  return (\n    <FormFieldWrapper {...props} className=\"align-widget\">\n      <AlignBlock\n        align={value}\n        onChangeBlock={(block, { align }) => onChange(id, align)}\n        data={{ align: value }}\n        block={id}\n        actions={actions}\n      />\n    </FormFieldWrapper>\n  );\n};\n\nexport default AlignWidget;\n"],"mappings":";;;;AAAA,SAASA,gBAAgB,QAAQ,yBAAyB;AAC1D,OAAOC,UAAU,MAAM,mDAAmD;;AAE1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,GAAIC,KAAK,IAAK;EAC7B,MAAM;IAAEC,EAAE;IAAEC,QAAQ;IAAEC,KAAK;IAAEC;EAAQ,CAAC,GAAGJ,KAAK;EAC9C,OACE,MAAC,gBAAgB,eAAKA,KAAK;IAAE,SAAS,EAAC,cAAc;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,IACnD,MAAC,UAAU;IACT,KAAK,EAAEG,KAAM;IACb,aAAa,EAAE,CAACE,KAAK,EAAE;MAAEC;IAAM,CAAC,KAAKJ,QAAQ,CAACD,EAAE,EAAEK,KAAK,CAAE;IACzD,IAAI,EAAE;MAAEA,KAAK,EAAEH;IAAM,CAAE;IACvB,KAAK,EAAEF,EAAG;IACV,OAAO,EAAEG,OAAQ;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EACjB,CACe;AAEvB,CAAC;AAED,eAAeL,WAAW"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}