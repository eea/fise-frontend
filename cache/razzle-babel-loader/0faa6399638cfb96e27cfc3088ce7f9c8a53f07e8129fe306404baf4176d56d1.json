{"ast":null,"code":"/**\n * Create a function that add X-Forwarded Headers to superagent requests\n * @function addHeadersFactory\n * @param {Object} req Original request object\n * @return {function} Superagent request function\n */\n\nvar HEADERS = ['range', 'if-range'];\nexport var addHeadersFactory = function addHeadersFactory(orig) {\n  return function (request) {\n    var x_forwarded_host = orig.headers['x-forwarded-host'] || orig.hostname;\n    var x_forwarded_for = orig.headers['x-forwarded-for'];\n    var remote_host = orig.connection.remoteAddress;\n    if (x_forwarded_for && remote_host) {\n      request.set('x-forwarded-for', x_forwarded_for + ', ' + remote_host);\n    } else if (remote_host) {\n      request.set('x-forwarded-for', remote_host);\n    } else if (x_forwarded_for) {\n      request.set('x-forwarded-for', x_forwarded_for);\n    }\n    x_forwarded_host && request.set('x-forwarded-host', x_forwarded_host);\n    // forward additional headers\n    HEADERS.forEach(function (header) {\n      if (orig.headers[header]) {\n        request.set(header, orig.headers[header]);\n      }\n    });\n  };\n};","map":{"version":3,"names":["HEADERS","addHeadersFactory","orig","request","x_forwarded_host","headers","hostname","x_forwarded_for","remote_host","connection","remoteAddress","set","forEach","header"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/helpers/Proxy/Proxy.js"],"sourcesContent":["/**\n * Create a function that add X-Forwarded Headers to superagent requests\n * @function addHeadersFactory\n * @param {Object} req Original request object\n * @return {function} Superagent request function\n */\n\nconst HEADERS = ['range', 'if-range'];\n\nexport const addHeadersFactory = (orig) => {\n  return (request) => {\n    const x_forwarded_host = orig.headers['x-forwarded-host'] || orig.hostname;\n    const x_forwarded_for = orig.headers['x-forwarded-for'];\n    const remote_host = orig.connection.remoteAddress;\n    if (x_forwarded_for && remote_host) {\n      request.set('x-forwarded-for', x_forwarded_for + ', ' + remote_host);\n    } else if (remote_host) {\n      request.set('x-forwarded-for', remote_host);\n    } else if (x_forwarded_for) {\n      request.set('x-forwarded-for', x_forwarded_for);\n    }\n    x_forwarded_host && request.set('x-forwarded-host', x_forwarded_host);\n    // forward additional headers\n    HEADERS.forEach((header) => {\n      if (orig.headers[header]) {\n        request.set(header, orig.headers[header]);\n      }\n    });\n  };\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAMA,OAAO,GAAG,CAAC,OAAO,EAAE,UAAU,CAAC;AAErC,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAiB,CAAIC,IAAI,EAAK;EACzC,OAAO,UAACC,OAAO,EAAK;IAClB,IAAMC,gBAAgB,GAAGF,IAAI,CAACG,OAAO,CAAC,kBAAkB,CAAC,IAAIH,IAAI,CAACI,QAAQ;IAC1E,IAAMC,eAAe,GAAGL,IAAI,CAACG,OAAO,CAAC,iBAAiB,CAAC;IACvD,IAAMG,WAAW,GAAGN,IAAI,CAACO,UAAU,CAACC,aAAa;IACjD,IAAIH,eAAe,IAAIC,WAAW,EAAE;MAClCL,OAAO,CAACQ,GAAG,CAAC,iBAAiB,EAAEJ,eAAe,GAAG,IAAI,GAAGC,WAAW,CAAC;IACtE,CAAC,MAAM,IAAIA,WAAW,EAAE;MACtBL,OAAO,CAACQ,GAAG,CAAC,iBAAiB,EAAEH,WAAW,CAAC;IAC7C,CAAC,MAAM,IAAID,eAAe,EAAE;MAC1BJ,OAAO,CAACQ,GAAG,CAAC,iBAAiB,EAAEJ,eAAe,CAAC;IACjD;IACAH,gBAAgB,IAAID,OAAO,CAACQ,GAAG,CAAC,kBAAkB,EAAEP,gBAAgB,CAAC;IACrE;IACAJ,OAAO,CAACY,OAAO,CAAC,UAACC,MAAM,EAAK;MAC1B,IAAIX,IAAI,CAACG,OAAO,CAACQ,MAAM,CAAC,EAAE;QACxBV,OAAO,CAACQ,GAAG,CAACE,MAAM,EAAEX,IAAI,CAACG,OAAO,CAACQ,MAAM,CAAC,CAAC;MAC3C;IACF,CAAC,CAAC;EACJ,CAAC;AACH,CAAC"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}