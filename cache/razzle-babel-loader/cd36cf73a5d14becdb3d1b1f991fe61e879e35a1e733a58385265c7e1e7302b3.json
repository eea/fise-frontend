{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-plotlycharts/src/ChartEditor/CustomColorPicker.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n/* eslint-disable jsx-a11y/no-static-element-interactions */\n/* eslint-disable jsx-a11y/click-events-have-key-events */\nimport Fields from 'react-color/lib/components/sketch/SketchFields';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport tinycolor from 'tinycolor2';\nimport { Hue, Saturation } from 'react-color/lib/components/common';\nimport { CustomPicker as customPicker } from 'react-color';\n\n// Utility functions for converting ColorPicker color objects or raw strings\n// into TinyColor objects.\nconst extractRGB = c => c.rgb || c;\nconst getColorSource = c => c.source === 'hex' ? c.hex : extractRGB(c);\nconst toTinyColor = c => tinycolor(getColorSource(c));\nclass Custom extends Component {\n  render() {\n    const {\n      onChangeComplete\n    } = this.props;\n    return __jsx(\"div\", {\n      className: \"colorpicker__outer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      className: \"colorpicker__controls +flex\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      className: \"colorpicker__sliders\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 11\n      }\n    }, __jsx(\"div\", {\n      className: \"colorpicker__slider\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }\n    }, __jsx(Hue, _extends({}, this.props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 15\n      }\n    }))))), __jsx(\"div\", {\n      className: \"colorpicker__saturation\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }\n    }, __jsx(Saturation, _extends({}, this.props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }\n    }))), __jsx(\"div\", {\n      className: \"colorpicker__custom-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }\n    }, __jsx(Fields, _extends({}, this.props, {\n      onChange: onChangeComplete,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }\n    }))));\n  }\n}\nCustom.propTypes = {\n  rgb: PropTypes.object,\n  onChangeComplete: PropTypes.func\n};\nconst CustomColorPicker = customPicker(Custom);\nclass ColorPicker extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isVisible: false\n    };\n    this.onSelectedColorChange = this.onSelectedColorChange.bind(this);\n    this.toggleVisible = this.toggleVisible.bind(this);\n  }\n  onSelectedColorChange(newColor) {\n    // We use our own toTinyColor because this value is a ColorPicker\n    // color value which is an object that needs unpacking. We also handle\n    // the case where a color string is passed in (just in case).\n    const color = toTinyColor(newColor);\n\n    // relayout call only wants a RGB String\n    this.props.onColorChange(color.toRgbString());\n  }\n  toggleVisible() {\n    this.setState({\n      isVisible: !this.state.isVisible\n    });\n  }\n  render() {\n    // We use tinycolor here instead of our own toTinyColor as\n    // tinycolor handles `null` values and other weirdness we may\n    // expect from user data.\n    const selectedColor = tinycolor(this.props.selectedColor);\n    const colorText = selectedColor.toHexString();\n\n    // Convert rgba to rgb if necessary\n    const rgbString = selectedColor._a !== 0 ? selectedColor.toRgbString() : `rgb(${selectedColor._r},${selectedColor._g},${selectedColor._b})`;\n\n    // We need inline style here to assign the background color\n    // dynamically.\n    const swatchStyle = {\n      backgroundColor: rgbString\n    };\n    return __jsx(React.Fragment, null, __jsx(\"div\", {\n      className: \"colorpicker__container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      className: \"colorpicker\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }\n    }, __jsx(\"div\", {\n      className: \"colorpicker__swatch +cursor-clickable\",\n      style: swatchStyle,\n      onClick: this.toggleVisible,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 13\n      }\n    })), __jsx(\"div\", {\n      className: \"colorpicker__selected-color +hover-grey\",\n      onClick: this.toggleVisible,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }\n    }, colorText)), this.state.isVisible && __jsx(CustomColorPicker, {\n      color: rgbString,\n      onChangeComplete: this.onSelectedColorChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }\n    }));\n  }\n}\nColorPicker.propTypes = {\n  onColorChange: PropTypes.func.isRequired,\n  selectedColor: PropTypes.string\n};\nexport default ColorPicker;","map":{"version":3,"names":["Fields","React","Component","PropTypes","tinycolor","Hue","Saturation","CustomPicker","customPicker","extractRGB","c","rgb","getColorSource","source","hex","toTinyColor","Custom","render","onChangeComplete","props","propTypes","object","func","CustomColorPicker","ColorPicker","constructor","state","isVisible","onSelectedColorChange","bind","toggleVisible","newColor","color","onColorChange","toRgbString","setState","selectedColor","colorText","toHexString","rgbString","_a","_r","_g","_b","swatchStyle","backgroundColor","isRequired","string"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-plotlycharts/src/ChartEditor/CustomColorPicker.jsx"],"sourcesContent":["/* eslint-disable jsx-a11y/no-static-element-interactions */\n/* eslint-disable jsx-a11y/click-events-have-key-events */\nimport Fields from 'react-color/lib/components/sketch/SketchFields';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport tinycolor from 'tinycolor2';\nimport { Hue, Saturation } from 'react-color/lib/components/common';\nimport { CustomPicker as customPicker } from 'react-color';\n\n// Utility functions for converting ColorPicker color objects or raw strings\n// into TinyColor objects.\nconst extractRGB = (c) => c.rgb || c;\nconst getColorSource = (c) => (c.source === 'hex' ? c.hex : extractRGB(c));\nconst toTinyColor = (c) => tinycolor(getColorSource(c));\n\nclass Custom extends Component {\n  render() {\n    const { onChangeComplete } = this.props;\n\n    return (\n      <div className=\"colorpicker__outer\">\n        <div className=\"colorpicker__controls +flex\">\n          <div className=\"colorpicker__sliders\">\n            <div className=\"colorpicker__slider\">\n              <Hue {...this.props} />\n            </div>\n          </div>\n        </div>\n        <div className=\"colorpicker__saturation\">\n          <Saturation {...this.props} />\n        </div>\n        <div className=\"colorpicker__custom-input\">\n          <Fields {...this.props} onChange={onChangeComplete} />\n        </div>\n      </div>\n    );\n  }\n}\n\nCustom.propTypes = {\n  rgb: PropTypes.object,\n  onChangeComplete: PropTypes.func,\n};\n\nconst CustomColorPicker = customPicker(Custom);\n\nclass ColorPicker extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isVisible: false,\n    };\n\n    this.onSelectedColorChange = this.onSelectedColorChange.bind(this);\n    this.toggleVisible = this.toggleVisible.bind(this);\n  }\n\n  onSelectedColorChange(newColor) {\n    // We use our own toTinyColor because this value is a ColorPicker\n    // color value which is an object that needs unpacking. We also handle\n    // the case where a color string is passed in (just in case).\n    const color = toTinyColor(newColor);\n\n    // relayout call only wants a RGB String\n    this.props.onColorChange(color.toRgbString());\n  }\n\n  toggleVisible() {\n    this.setState({ isVisible: !this.state.isVisible });\n  }\n\n  render() {\n    // We use tinycolor here instead of our own toTinyColor as\n    // tinycolor handles `null` values and other weirdness we may\n    // expect from user data.\n    const selectedColor = tinycolor(this.props.selectedColor);\n    const colorText = selectedColor.toHexString();\n\n    // Convert rgba to rgb if necessary\n    const rgbString =\n      selectedColor._a !== 0\n        ? selectedColor.toRgbString()\n        : `rgb(${selectedColor._r},${selectedColor._g},${selectedColor._b})`;\n\n    // We need inline style here to assign the background color\n    // dynamically.\n    const swatchStyle = { backgroundColor: rgbString };\n\n    return (\n      <>\n        <div className=\"colorpicker__container\">\n          <div className=\"colorpicker\">\n            <div\n              className=\"colorpicker__swatch +cursor-clickable\"\n              style={swatchStyle}\n              onClick={this.toggleVisible}\n            />\n          </div>\n\n          <div\n            className=\"colorpicker__selected-color +hover-grey\"\n            onClick={this.toggleVisible}\n          >\n            {colorText}\n          </div>\n        </div>\n\n        {this.state.isVisible && (\n          <CustomColorPicker\n            color={rgbString}\n            onChangeComplete={this.onSelectedColorChange}\n          />\n        )}\n      </>\n    );\n  }\n}\n\nColorPicker.propTypes = {\n  onColorChange: PropTypes.func.isRequired,\n  selectedColor: PropTypes.string,\n};\n\nexport default ColorPicker;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}