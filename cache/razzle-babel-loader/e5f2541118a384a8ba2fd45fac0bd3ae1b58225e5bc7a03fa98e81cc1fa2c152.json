{"ast":null,"code":"import config from '@plone/volto/registry';\nimport { defineMessages } from 'react-intl';\nvar messages = defineMessages({\n  color: {\n    \"id\": \"Color\",\n    \"defaultMessage\": \"Color\"\n  },\n  align: {\n    \"id\": \"Alignment\",\n    \"defaultMessage\": \"Alignment\"\n  },\n  backgroundColor: {\n    \"id\": \"Background color\",\n    \"defaultMessage\": \"Background color\"\n  }\n});\nvar DEFAULT_COLORS = [{\n  name: 'blue',\n  label: 'Blue'\n}, {\n  name: 'grey',\n  label: 'Grey'\n}];\nexport var defaultStyleSchema = function defaultStyleSchema(_ref) {\n  var _config$blocks, _config$blocks$blocks, _config$blocks$blocks2, _config$blocks2, _config$blocks2$block, _config$blocks2$block2;\n  var formData = _ref.formData,\n    intl = _ref.intl;\n  var colors = ((_config$blocks = config.blocks) === null || _config$blocks === void 0 ? void 0 : (_config$blocks$blocks = _config$blocks.blocksConfig) === null || _config$blocks$blocks === void 0 ? void 0 : (_config$blocks$blocks2 = _config$blocks$blocks[formData['@type']]) === null || _config$blocks$blocks2 === void 0 ? void 0 : _config$blocks$blocks2.colors) || DEFAULT_COLORS;\n  var defaultBGColor = (_config$blocks2 = config.blocks) === null || _config$blocks2 === void 0 ? void 0 : (_config$blocks2$block = _config$blocks2.blocksConfig) === null || _config$blocks2$block === void 0 ? void 0 : (_config$blocks2$block2 = _config$blocks2$block[formData['@type']]) === null || _config$blocks2$block2 === void 0 ? void 0 : _config$blocks2$block2.defaultBGColor;\n  return {\n    fieldsets: [{\n      id: 'default',\n      title: 'Default',\n      // fields: ['align', 'backgroundColor'],\n      fields: ['align']\n    }],\n    properties: {\n      align: {\n        widget: 'align',\n        title: intl.formatMessage(messages.align),\n        actions: ['center', 'wide', 'full']\n      },\n      backgroundColor: {\n        widget: 'color_picker',\n        title: intl.formatMessage(messages.backgroundColor),\n        colors: colors,\n        \"default\": defaultBGColor\n      }\n    },\n    required: []\n  };\n};","map":{"version":3,"names":["config","defineMessages","messages","color","align","backgroundColor","DEFAULT_COLORS","name","label","defaultStyleSchema","formData","intl","colors","blocks","blocksConfig","defaultBGColor","fieldsets","id","title","fields","properties","widget","formatMessage","actions","required"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Blocks/Block/StylesSchema.jsx"],"sourcesContent":["import config from '@plone/volto/registry';\nimport { defineMessages } from 'react-intl';\n\nconst messages = defineMessages({\n  color: {\n    id: 'Color',\n    defaultMessage: 'Color',\n  },\n  align: {\n    id: 'Alignment',\n    defaultMessage: 'Alignment',\n  },\n  backgroundColor: {\n    id: 'Background color',\n    defaultMessage: 'Background color',\n  },\n});\n\nconst DEFAULT_COLORS = [\n  { name: 'blue', label: 'Blue' },\n  { name: 'grey', label: 'Grey' },\n];\n\nexport const defaultStyleSchema = ({ formData, intl }) => {\n  const colors =\n    config.blocks?.blocksConfig?.[formData['@type']]?.colors || DEFAULT_COLORS;\n  const defaultBGColor =\n    config.blocks?.blocksConfig?.[formData['@type']]?.defaultBGColor;\n\n  return {\n    fieldsets: [\n      {\n        id: 'default',\n        title: 'Default',\n        // fields: ['align', 'backgroundColor'],\n        fields: ['align'],\n      },\n    ],\n    properties: {\n      align: {\n        widget: 'align',\n        title: intl.formatMessage(messages.align),\n        actions: ['center', 'wide', 'full'],\n      },\n      backgroundColor: {\n        widget: 'color_picker',\n        title: intl.formatMessage(messages.backgroundColor),\n        colors,\n        default: defaultBGColor,\n      },\n    },\n    required: [],\n  };\n};\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,uBAAuB;AAC1C,SAASC,cAAc,QAAQ,YAAY;AAE3C,IAAMC,QAAQ,GAAGD,cAAc,CAAC;EAC9BE,KAAK;IAAA;IAAA;EAAA,CAGJ;EACDC,KAAK;IAAA;IAAA;EAAA,CAGJ;EACDC,eAAe;IAAA;IAAA;EAAA;AAIjB,CAAC,CAAC;AAEF,IAAMC,cAAc,GAAG,CACrB;EAAEC,IAAI,EAAE,MAAM;EAAEC,KAAK,EAAE;AAAO,CAAC,EAC/B;EAAED,IAAI,EAAE,MAAM;EAAEC,KAAK,EAAE;AAAO,CAAC,CAChC;AAED,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkB,OAA2B;EAAA;EAAA,IAArBC,QAAQ,QAARA,QAAQ;IAAEC,IAAI,QAAJA,IAAI;EACjD,IAAMC,MAAM,GACV,mBAAAZ,MAAM,CAACa,MAAM,4EAAb,eAAeC,YAAY,oFAA3B,sBAA8BJ,QAAQ,CAAC,OAAO,CAAC,CAAC,2DAAhD,uBAAkDE,MAAM,KAAIN,cAAc;EAC5E,IAAMS,cAAc,sBAClBf,MAAM,CAACa,MAAM,6EAAb,gBAAeC,YAAY,oFAA3B,sBAA8BJ,QAAQ,CAAC,OAAO,CAAC,CAAC,2DAAhD,uBAAkDK,cAAc;EAElE,OAAO;IACLC,SAAS,EAAE,CACT;MACEC,EAAE,EAAE,SAAS;MACbC,KAAK,EAAE,SAAS;MAChB;MACAC,MAAM,EAAE,CAAC,OAAO;IAClB,CAAC,CACF;IACDC,UAAU,EAAE;MACVhB,KAAK,EAAE;QACLiB,MAAM,EAAE,OAAO;QACfH,KAAK,EAAEP,IAAI,CAACW,aAAa,CAACpB,QAAQ,CAACE,KAAK,CAAC;QACzCmB,OAAO,EAAE,CAAC,QAAQ,EAAE,MAAM,EAAE,MAAM;MACpC,CAAC;MACDlB,eAAe,EAAE;QACfgB,MAAM,EAAE,cAAc;QACtBH,KAAK,EAAEP,IAAI,CAACW,aAAa,CAACpB,QAAQ,CAACG,eAAe,CAAC;QACnDO,MAAM,EAANA,MAAM;QACN,WAASG;MACX;IACF,CAAC;IACDS,QAAQ,EAAE;EACZ,CAAC;AACH,CAAC"},"metadata":{"react-intl":{"messages":[{"id":"Color","defaultMessage":"Color"},{"id":"Alignment","defaultMessage":"Alignment"},{"id":"Background color","defaultMessage":"Background color"}]}},"sourceType":"module","externalDependencies":[]}