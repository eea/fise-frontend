{"ast":null,"code":"import _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _omit from \"lodash/omit\";\nimport _map from \"lodash/map\";\nimport { flattenToAppURL } from '@plone/volto/helpers';\nvar GET_QUERYSTRING_RESULTS = 'GET_QUERYSTRING_RESULTS';\nvar RESET_QUERYSTRING_RESULTS = 'RESET_QUERYSTRING_RESULTS';\nvar initialState = {\n  error: null,\n  items: [],\n  total: 0,\n  loaded: false,\n  loading: false,\n  batching: {},\n  subrequests: {}\n};\n\n/**\n * querystringsearch reducer.\n * @function querystring\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function querystringsearch() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  switch (action.type) {\n    case \"\".concat(GET_QUERYSTRING_RESULTS, \"_PENDING\"):\n      return action.subrequest ? _objectSpread(_objectSpread({}, state), {}, {\n        subrequests: _objectSpread(_objectSpread({}, state.subrequests), {}, _defineProperty({}, action.subrequest, _objectSpread(_objectSpread({}, state.subrequests[action.subrequest] || {\n          items: [],\n          total: 0,\n          batching: {}\n        }), {}, {\n          items: [],\n          total: 0,\n          error: null,\n          loaded: false,\n          loading: true\n        })))\n      }) : _objectSpread(_objectSpread({}, state), {}, {\n        error: null,\n        loading: true,\n        loaded: false\n      });\n    case \"\".concat(GET_QUERYSTRING_RESULTS, \"_SUCCESS\"):\n      return action.subrequest ? _objectSpread(_objectSpread({}, state), {}, {\n        subrequests: _objectSpread(_objectSpread({}, state.subrequests), {}, _defineProperty({}, action.subrequest, {\n          error: null,\n          items: _map(action.result.items, function (item) {\n            return _objectSpread(_objectSpread({}, item), {}, {\n              '@id': flattenToAppURL(item['@id'])\n            });\n          }),\n          total: action.result.items_total,\n          loaded: true,\n          loading: false,\n          batching: _objectSpread({}, action.result.batching)\n        }))\n      }) : _objectSpread(_objectSpread({}, state), {}, {\n        error: null,\n        items: _map(action.result.items, function (item) {\n          return _objectSpread(_objectSpread({}, item), {}, {\n            '@id': flattenToAppURL(item['@id'])\n          });\n        }),\n        total: action.result.items_total,\n        loaded: true,\n        loading: false,\n        batching: _objectSpread({}, action.result.batching)\n      });\n    case \"\".concat(GET_QUERYSTRING_RESULTS, \"_FAIL\"):\n      return action.subrequest ? _objectSpread(_objectSpread({}, state), {}, {\n        subrequests: _objectSpread(_objectSpread({}, state.subrequests), {}, _defineProperty({}, action.subrequest, {\n          error: action.error,\n          items: [],\n          total: 0,\n          loading: false,\n          loaded: false,\n          batching: {}\n        }))\n      }) : _objectSpread(_objectSpread({}, state), {}, {\n        error: action.error,\n        items: [],\n        total: 0,\n        loading: false,\n        loaded: false,\n        batching: {}\n      });\n    case RESET_QUERYSTRING_RESULTS:\n      return action.subrequest ? _objectSpread(_objectSpread({}, state), {}, {\n        subrequests: _omit(state.subrequests, [action.subrequest])\n      }) : _objectSpread(_objectSpread({}, state), {}, {\n        error: null,\n        items: [],\n        total: 0,\n        loading: false,\n        loaded: false,\n        batching: {}\n      });\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["flattenToAppURL","GET_QUERYSTRING_RESULTS","RESET_QUERYSTRING_RESULTS","initialState","error","items","total","loaded","loading","batching","subrequests","querystringsearch","state","action","type","subrequest","result","item","items_total"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/reducers/querystringsearch/querystringsearch.js"],"sourcesContent":["import { map, omit } from 'lodash';\nimport { flattenToAppURL } from '@plone/volto/helpers';\n\nconst GET_QUERYSTRING_RESULTS = 'GET_QUERYSTRING_RESULTS';\nconst RESET_QUERYSTRING_RESULTS = 'RESET_QUERYSTRING_RESULTS';\n\nconst initialState = {\n  error: null,\n  items: [],\n  total: 0,\n  loaded: false,\n  loading: false,\n  batching: {},\n  subrequests: {},\n};\n\n/**\n * querystringsearch reducer.\n * @function querystring\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function querystringsearch(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${GET_QUERYSTRING_RESULTS}_PENDING`:\n      return action.subrequest\n        ? {\n            ...state,\n            subrequests: {\n              ...state.subrequests,\n              [action.subrequest]: {\n                ...(state.subrequests[action.subrequest] || {\n                  items: [],\n                  total: 0,\n                  batching: {},\n                }),\n                items: [],\n                total: 0,\n                error: null,\n                loaded: false,\n                loading: true,\n              },\n            },\n          }\n        : {\n            ...state,\n            error: null,\n            loading: true,\n            loaded: false,\n          };\n    case `${GET_QUERYSTRING_RESULTS}_SUCCESS`:\n      return action.subrequest\n        ? {\n            ...state,\n            subrequests: {\n              ...state.subrequests,\n              [action.subrequest]: {\n                error: null,\n                items: map(action.result.items, (item) => ({\n                  ...item,\n                  '@id': flattenToAppURL(item['@id']),\n                })),\n                total: action.result.items_total,\n                loaded: true,\n                loading: false,\n                batching: { ...action.result.batching },\n              },\n            },\n          }\n        : {\n            ...state,\n            error: null,\n            items: map(action.result.items, (item) => ({\n              ...item,\n              '@id': flattenToAppURL(item['@id']),\n            })),\n            total: action.result.items_total,\n            loaded: true,\n            loading: false,\n            batching: { ...action.result.batching },\n          };\n    case `${GET_QUERYSTRING_RESULTS}_FAIL`:\n      return action.subrequest\n        ? {\n            ...state,\n            subrequests: {\n              ...state.subrequests,\n              [action.subrequest]: {\n                error: action.error,\n                items: [],\n                total: 0,\n                loading: false,\n                loaded: false,\n                batching: {},\n              },\n            },\n          }\n        : {\n            ...state,\n            error: action.error,\n            items: [],\n            total: 0,\n            loading: false,\n            loaded: false,\n            batching: {},\n          };\n    case RESET_QUERYSTRING_RESULTS:\n      return action.subrequest\n        ? {\n            ...state,\n            subrequests: omit(state.subrequests, [action.subrequest]),\n          }\n        : {\n            ...state,\n            error: null,\n            items: [],\n            total: 0,\n            loading: false,\n            loaded: false,\n            batching: {},\n          };\n    default:\n      return state;\n  }\n}\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}