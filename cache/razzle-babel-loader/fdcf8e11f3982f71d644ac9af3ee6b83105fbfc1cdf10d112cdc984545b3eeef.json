{"ast":null,"code":"import { v4 as uuid } from 'uuid';\nimport { emptyBlocksForm } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\nexport const getColumns = data => {\n  var _data$blocks_layout;\n  return ((data === null || data === void 0 ? void 0 : (_data$blocks_layout = data.blocks_layout) === null || _data$blocks_layout === void 0 ? void 0 : _data$blocks_layout.items) || []).map(id => {\n    var _data$blocks;\n    return [id, (_data$blocks = data.blocks) === null || _data$blocks === void 0 ? void 0 : _data$blocks[id]];\n  });\n};\nexport const hasColumns = data => {\n  return typeof data !== 'undefined' ? data.blocks_layout.items.length > 0 : false;\n};\nexport const forEachColumn = (data, callback) => {\n  getColumns(data).forEach(callback);\n};\nexport const columnIsEmpty = colData => {\n  var _colData$blocks_layou, _colData$blocks_layou2;\n  return !((colData === null || colData === void 0 ? void 0 : (_colData$blocks_layou = colData.blocks_layout) === null || _colData$blocks_layou === void 0 ? void 0 : (_colData$blocks_layou2 = _colData$blocks_layou.items) === null || _colData$blocks_layou2 === void 0 ? void 0 : _colData$blocks_layou2.length) > 0);\n};\nexport const empty = count => {\n  const blocks = {};\n  const items = [];\n  for (let x = 0; x < count; x++) {\n    const id = uuid();\n    blocks[id] = emptyBlocksForm();\n    items.push(id);\n  }\n  return {\n    blocks,\n    blocks_layout: {\n      items\n    }\n  };\n};\nexport const defaultNewColumn = () => {\n  const id = uuid();\n  return {\n    blocks: {\n      [id]: {\n        '@type': config.settings.defaultBlockType\n      }\n    },\n    blocks_layout: {\n      items: [id]\n    }\n  };\n};","map":{"version":3,"names":["v4","uuid","emptyBlocksForm","config","getColumns","data","blocks_layout","items","map","id","blocks","hasColumns","length","forEachColumn","callback","forEach","columnIsEmpty","colData","empty","count","x","push","defaultNewColumn","settings","defaultBlockType"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-columns-block/src/ColumnsBlock/utils.js"],"sourcesContent":["import { v4 as uuid } from 'uuid';\nimport { emptyBlocksForm } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\n\nexport const getColumns = (data) => {\n  return (data?.blocks_layout?.items || []).map((id) => [\n    id,\n    data.blocks?.[id],\n  ]);\n};\n\nexport const hasColumns = (data) => {\n  return typeof data !== 'undefined'\n    ? data.blocks_layout.items.length > 0\n    : false;\n};\n\nexport const forEachColumn = (data, callback) => {\n  getColumns(data).forEach(callback);\n};\n\nexport const columnIsEmpty = (colData) => {\n  return !(colData?.blocks_layout?.items?.length > 0);\n};\n\nexport const empty = (count) => {\n  const blocks = {};\n  const items = [];\n  for (let x = 0; x < count; x++) {\n    const id = uuid();\n    blocks[id] = emptyBlocksForm();\n    items.push(id);\n  }\n\n  return {\n    blocks,\n    blocks_layout: {\n      items,\n    },\n  };\n};\n\nexport const defaultNewColumn = () => {\n  const id = uuid();\n  return {\n    blocks: { [id]: { '@type': config.settings.defaultBlockType } },\n    blocks_layout: {\n      items: [id],\n    },\n  };\n};\n"],"mappings":"AAAA,SAASA,EAAE,IAAIC,IAAI,QAAQ,MAAM;AACjC,SAASC,eAAe,QAAQ,sBAAsB;AACtD,OAAOC,MAAM,MAAM,uBAAuB;AAE1C,OAAO,MAAMC,UAAU,GAAIC,IAAI,IAAK;EAAA;EAClC,OAAO,CAAC,CAAAA,IAAI,aAAJA,IAAI,8CAAJA,IAAI,CAAEC,aAAa,wDAAnB,oBAAqBC,KAAK,KAAI,EAAE,EAAEC,GAAG,CAAEC,EAAE;IAAA;IAAA,OAAK,CACpDA,EAAE,kBACFJ,IAAI,CAACK,MAAM,iDAAX,aAAcD,EAAE,CAAC,CAClB;EAAA,EAAC;AACJ,CAAC;AAED,OAAO,MAAME,UAAU,GAAIN,IAAI,IAAK;EAClC,OAAO,OAAOA,IAAI,KAAK,WAAW,GAC9BA,IAAI,CAACC,aAAa,CAACC,KAAK,CAACK,MAAM,GAAG,CAAC,GACnC,KAAK;AACX,CAAC;AAED,OAAO,MAAMC,aAAa,GAAG,CAACR,IAAI,EAAES,QAAQ,KAAK;EAC/CV,UAAU,CAACC,IAAI,CAAC,CAACU,OAAO,CAACD,QAAQ,CAAC;AACpC,CAAC;AAED,OAAO,MAAME,aAAa,GAAIC,OAAO,IAAK;EAAA;EACxC,OAAO,EAAE,CAAAA,OAAO,aAAPA,OAAO,gDAAPA,OAAO,CAAEX,aAAa,oFAAtB,sBAAwBC,KAAK,2DAA7B,uBAA+BK,MAAM,IAAG,CAAC,CAAC;AACrD,CAAC;AAED,OAAO,MAAMM,KAAK,GAAIC,KAAK,IAAK;EAC9B,MAAMT,MAAM,GAAG,CAAC,CAAC;EACjB,MAAMH,KAAK,GAAG,EAAE;EAChB,KAAK,IAAIa,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,KAAK,EAAEC,CAAC,EAAE,EAAE;IAC9B,MAAMX,EAAE,GAAGR,IAAI,EAAE;IACjBS,MAAM,CAACD,EAAE,CAAC,GAAGP,eAAe,EAAE;IAC9BK,KAAK,CAACc,IAAI,CAACZ,EAAE,CAAC;EAChB;EAEA,OAAO;IACLC,MAAM;IACNJ,aAAa,EAAE;MACbC;IACF;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMe,gBAAgB,GAAG,MAAM;EACpC,MAAMb,EAAE,GAAGR,IAAI,EAAE;EACjB,OAAO;IACLS,MAAM,EAAE;MAAE,CAACD,EAAE,GAAG;QAAE,OAAO,EAAEN,MAAM,CAACoB,QAAQ,CAACC;MAAiB;IAAE,CAAC;IAC/DlB,aAAa,EAAE;MACbC,KAAK,EAAE,CAACE,EAAE;IACZ;EACF,CAAC;AACH,CAAC"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}