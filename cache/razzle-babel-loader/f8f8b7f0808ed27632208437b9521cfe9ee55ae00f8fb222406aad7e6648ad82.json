{"ast":null,"code":"import _classCallCheck from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Actions/Actions.jsx\";\nvar __jsx = React.createElement;\n/**\n * Actions component.\n * @module components/manage/Actions/Actions\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Dropdown, Icon } from 'semantic-ui-react';\nimport { toast } from 'react-toastify';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport { cut, copy, copyContent, moveContent } from '@plone/volto/actions';\nimport { getBaseUrl } from '@plone/volto/helpers';\nimport { ContentsRenameModal, Toast } from '@plone/volto/components';\nvar messages = defineMessages({\n  cut: {\n    \"id\": \"Cut\",\n    \"defaultMessage\": \"Cut\"\n  },\n  copy: {\n    \"id\": \"Copy\",\n    \"defaultMessage\": \"Copy\"\n  },\n  paste: {\n    \"id\": \"Paste\",\n    \"defaultMessage\": \"Paste\"\n  },\n  rename: {\n    \"id\": \"Rename\",\n    \"defaultMessage\": \"Rename\"\n  },\n  messageCopied: {\n    \"id\": \"{title} copied.\",\n    \"defaultMessage\": \"{title} copied.\"\n  },\n  messageCut: {\n    \"id\": \"{title} cut.\",\n    \"defaultMessage\": \"{title} cut.\"\n  },\n  messageDeleted: {\n    \"id\": \"{title} has been deleted.\",\n    \"defaultMessage\": \"{title} has been deleted.\"\n  },\n  messagePasted: {\n    \"id\": \"Item(s) pasted.\",\n    \"defaultMessage\": \"Item(s) pasted.\"\n  },\n  success: {\n    \"id\": \"Success\",\n    \"defaultMessage\": \"Success\"\n  }\n});\n\n/**\n * Actions container class.\n * @class Actions\n * @extends Component\n */\nvar Actions = /*#__PURE__*/function (_Component) {\n  _inherits(Actions, _Component);\n  var _super = _createSuper(Actions);\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Actions\n   */\n  function Actions(props) {\n    var _this;\n    _classCallCheck(this, Actions);\n    _this = _super.call(this, props);\n    _this.cut = _this.cut.bind(_assertThisInitialized(_this));\n    _this.copy = _this.copy.bind(_assertThisInitialized(_this));\n    _this.paste = _this.paste.bind(_assertThisInitialized(_this));\n    _this.rename = _this.rename.bind(_assertThisInitialized(_this));\n    _this.onRenameOk = _this.onRenameOk.bind(_assertThisInitialized(_this));\n    _this.onRenameCancel = _this.onRenameCancel.bind(_assertThisInitialized(_this));\n    _this.state = {\n      showRename: false\n    };\n    return _this;\n  }\n\n  /**\n   * On rename ok\n   * @method onRenameOk\n   * @returns {undefined}\n   */\n  _createClass(Actions, [{\n    key: \"onRenameOk\",\n    value: function onRenameOk() {\n      this.setState({\n        showRename: false\n      });\n    }\n\n    /**\n     * On rename cancel\n     * @method onRenameCancel\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onRenameCancel\",\n    value: function onRenameCancel() {\n      this.setState({\n        showRename: false\n      });\n    }\n\n    /**\n     * Cut handler\n     * @method cut\n     * @returns {undefined}\n     */\n  }, {\n    key: \"cut\",\n    value: function cut() {\n      this.props.cut([getBaseUrl(this.props.pathname)]);\n      toast.success(__jsx(Toast, {\n        success: true,\n        title: this.props.intl.formatMessage(messages.success),\n        content: this.props.intl.formatMessage(messages.messageCut, {\n          title: this.props.title\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 7\n        }\n      }));\n    }\n\n    /**\n     * Copy handler\n     * @method copy\n     * @returns {undefined}\n     */\n  }, {\n    key: \"copy\",\n    value: function copy() {\n      this.props.copy([getBaseUrl(this.props.pathname)]);\n      toast.success(__jsx(Toast, {\n        success: true,\n        title: this.props.intl.formatMessage(messages.success),\n        content: this.props.intl.formatMessage(messages.messageCopied, {\n          title: this.props.title\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 7\n        }\n      }));\n    }\n\n    /**\n     * Paste handler\n     * @method paste\n     * @returns {undefined}\n     */\n  }, {\n    key: \"paste\",\n    value: function paste() {\n      if (this.props.action === 'copy') {\n        this.props.copyContent(this.props.source, getBaseUrl(this.props.pathname));\n      }\n      if (this.props.action === 'cut') {\n        this.props.moveContent(this.props.source, getBaseUrl(this.props.pathname));\n      }\n      toast.success(__jsx(Toast, {\n        success: true,\n        title: this.props.intl.formatMessage(messages.success),\n        content: this.props.intl.formatMessage(messages.messagePasted),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 7\n        }\n      }));\n    }\n\n    /**\n     * Rename handler\n     * @method rename\n     * @returns {undefined}\n     */\n  }, {\n    key: \"rename\",\n    value: function rename() {\n      this.setState({\n        showRename: true\n      });\n    }\n\n    /**\n     * Render method.\n     * @method render\n     * @returns {string} Markup for the component.\n     */\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      return __jsx(Dropdown, {\n        item: true,\n        id: \"toolbar-actions\",\n        trigger: __jsx(\"span\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 11\n          }\n        }, __jsx(Icon, {\n          name: \"lightning\",\n          size: \"big\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 13\n          }\n        }), ' ', __jsx(FormattedMessage, {\n          id: \"Actions\",\n          defaultMessage: \"Actions\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 13\n          }\n        })),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 7\n        }\n      }, __jsx(Dropdown.Menu, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229,\n          columnNumber: 9\n        }\n      }, this.props.actions.object_buttons && this.props.actions.object_buttons.map(function (item) {\n        switch (item.id) {\n          case 'cut':\n            return __jsx(Dropdown.Item, {\n              key: item.id,\n              icon: \"cut\",\n              text: item.title,\n              onClick: _this2.cut,\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 235,\n                columnNumber: 21\n              }\n            });\n          case 'copy':\n            return __jsx(Dropdown.Item, {\n              key: item.id,\n              icon: \"copy\",\n              text: item.title,\n              onClick: _this2.copy,\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 244,\n                columnNumber: 21\n              }\n            });\n          case 'paste':\n            return __jsx(Dropdown.Item, {\n              key: item.id,\n              icon: \"paste\",\n              text: item.title,\n              onClick: _this2.paste,\n              disabled: _this2.props.action === null,\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 253,\n                columnNumber: 21\n              }\n            });\n          case 'delete':\n            return __jsx(Link, {\n              key: item.id,\n              to: \"\".concat(_this2.props.pathname, \"/delete\"),\n              className: \"item\",\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 263,\n                columnNumber: 21\n              }\n            }, __jsx(Icon, {\n              name: \"trash\",\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 268,\n                columnNumber: 23\n              }\n            }), item.title);\n          case 'rename':\n            return __jsx(Dropdown.Item, {\n              key: item.id,\n              icon: \"text cursor\",\n              text: item.title,\n              onClick: _this2.rename,\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 274,\n                columnNumber: 21\n              }\n            });\n          default:\n            return null;\n        }\n      }), __jsx(ContentsRenameModal, {\n        open: this.state.showRename,\n        onCancel: this.onRenameCancel,\n        onOk: this.onRenameOk,\n        items: [{\n          url: this.props.pathname,\n          title: this.props.title,\n          id: this.props.id\n        }],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 11\n        }\n      })));\n    }\n  }]);\n  return Actions;\n}(Component);\n_defineProperty(Actions, \"propTypes\", {\n  actions: PropTypes.shape({\n    object: PropTypes.arrayOf(PropTypes.object),\n    object_buttons: PropTypes.arrayOf(PropTypes.object),\n    user: PropTypes.arrayOf(PropTypes.object)\n  }),\n  pathname: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  action: PropTypes.string,\n  source: PropTypes.arrayOf(PropTypes.string),\n  cut: PropTypes.func.isRequired,\n  copy: PropTypes.func.isRequired,\n  copyContent: PropTypes.func.isRequired,\n  moveContent: PropTypes.func.isRequired\n});\n_defineProperty(Actions, \"defaultProps\", {\n  action: null,\n  actions: null,\n  source: null\n});\nexport default compose(injectIntl, connect(function (state) {\n  return {\n    actions: state.actions.actions,\n    action: state.clipboard.action,\n    source: state.clipboard.source,\n    id: state.content.data ? state.content.data.id : '',\n    title: state.content.data ? state.content.data.title : ''\n  };\n}, {\n  cut: cut,\n  copy: copy,\n  copyContent: copyContent,\n  moveContent: moveContent\n}))(Actions);","map":{"version":3,"names":["React","Component","PropTypes","compose","connect","Link","Dropdown","Icon","toast","FormattedMessage","defineMessages","injectIntl","cut","copy","copyContent","moveContent","getBaseUrl","ContentsRenameModal","Toast","messages","paste","rename","messageCopied","messageCut","messageDeleted","messagePasted","success","Actions","props","bind","onRenameOk","onRenameCancel","state","showRename","setState","pathname","intl","formatMessage","title","action","source","actions","object_buttons","map","item","id","url","shape","object","arrayOf","user","string","isRequired","func","clipboard","content","data"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Actions/Actions.jsx"],"sourcesContent":["/**\n * Actions component.\n * @module components/manage/Actions/Actions\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Dropdown, Icon } from 'semantic-ui-react';\nimport { toast } from 'react-toastify';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\n\nimport { cut, copy, copyContent, moveContent } from '@plone/volto/actions';\nimport { getBaseUrl } from '@plone/volto/helpers';\nimport { ContentsRenameModal, Toast } from '@plone/volto/components';\n\nconst messages = defineMessages({\n  cut: {\n    id: 'Cut',\n    defaultMessage: 'Cut',\n  },\n  copy: {\n    id: 'Copy',\n    defaultMessage: 'Copy',\n  },\n  paste: {\n    id: 'Paste',\n    defaultMessage: 'Paste',\n  },\n  rename: {\n    id: 'Rename',\n    defaultMessage: 'Rename',\n  },\n  messageCopied: {\n    id: '{title} copied.',\n    defaultMessage: '{title} copied.',\n  },\n  messageCut: {\n    id: '{title} cut.',\n    defaultMessage: '{title} cut.',\n  },\n  messageDeleted: {\n    id: '{title} has been deleted.',\n    defaultMessage: '{title} has been deleted.',\n  },\n  messagePasted: {\n    id: 'Item(s) pasted.',\n    defaultMessage: 'Item(s) pasted.',\n  },\n  success: {\n    id: 'Success',\n    defaultMessage: 'Success',\n  },\n});\n\n/**\n * Actions container class.\n * @class Actions\n * @extends Component\n */\nclass Actions extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    actions: PropTypes.shape({\n      object: PropTypes.arrayOf(PropTypes.object),\n      object_buttons: PropTypes.arrayOf(PropTypes.object),\n      user: PropTypes.arrayOf(PropTypes.object),\n    }),\n    pathname: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    action: PropTypes.string,\n    source: PropTypes.arrayOf(PropTypes.string),\n    cut: PropTypes.func.isRequired,\n    copy: PropTypes.func.isRequired,\n    copyContent: PropTypes.func.isRequired,\n    moveContent: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    action: null,\n    actions: null,\n    source: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Actions\n   */\n  constructor(props) {\n    super(props);\n    this.cut = this.cut.bind(this);\n    this.copy = this.copy.bind(this);\n    this.paste = this.paste.bind(this);\n    this.rename = this.rename.bind(this);\n    this.onRenameOk = this.onRenameOk.bind(this);\n    this.onRenameCancel = this.onRenameCancel.bind(this);\n    this.state = {\n      showRename: false,\n    };\n  }\n\n  /**\n   * On rename ok\n   * @method onRenameOk\n   * @returns {undefined}\n   */\n  onRenameOk() {\n    this.setState({\n      showRename: false,\n    });\n  }\n\n  /**\n   * On rename cancel\n   * @method onRenameCancel\n   * @returns {undefined}\n   */\n  onRenameCancel() {\n    this.setState({\n      showRename: false,\n    });\n  }\n\n  /**\n   * Cut handler\n   * @method cut\n   * @returns {undefined}\n   */\n  cut() {\n    this.props.cut([getBaseUrl(this.props.pathname)]);\n    toast.success(\n      <Toast\n        success\n        title={this.props.intl.formatMessage(messages.success)}\n        content={this.props.intl.formatMessage(messages.messageCut, {\n          title: this.props.title,\n        })}\n      />,\n    );\n  }\n\n  /**\n   * Copy handler\n   * @method copy\n   * @returns {undefined}\n   */\n  copy() {\n    this.props.copy([getBaseUrl(this.props.pathname)]);\n    toast.success(\n      <Toast\n        success\n        title={this.props.intl.formatMessage(messages.success)}\n        content={this.props.intl.formatMessage(messages.messageCopied, {\n          title: this.props.title,\n        })}\n      />,\n    );\n  }\n\n  /**\n   * Paste handler\n   * @method paste\n   * @returns {undefined}\n   */\n  paste() {\n    if (this.props.action === 'copy') {\n      this.props.copyContent(\n        this.props.source,\n        getBaseUrl(this.props.pathname),\n      );\n    }\n    if (this.props.action === 'cut') {\n      this.props.moveContent(\n        this.props.source,\n        getBaseUrl(this.props.pathname),\n      );\n    }\n    toast.success(\n      <Toast\n        success\n        title={this.props.intl.formatMessage(messages.success)}\n        content={this.props.intl.formatMessage(messages.messagePasted)}\n      />,\n    );\n  }\n\n  /**\n   * Rename handler\n   * @method rename\n   * @returns {undefined}\n   */\n  rename() {\n    this.setState({\n      showRename: true,\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <Dropdown\n        item\n        id=\"toolbar-actions\"\n        trigger={\n          <span>\n            <Icon name=\"lightning\" size=\"big\" />{' '}\n            <FormattedMessage id=\"Actions\" defaultMessage=\"Actions\" />\n          </span>\n        }\n      >\n        <Dropdown.Menu>\n          {this.props.actions.object_buttons &&\n            this.props.actions.object_buttons.map((item) => {\n              switch (item.id) {\n                case 'cut':\n                  return (\n                    <Dropdown.Item\n                      key={item.id}\n                      icon=\"cut\"\n                      text={item.title}\n                      onClick={this.cut}\n                    />\n                  );\n                case 'copy':\n                  return (\n                    <Dropdown.Item\n                      key={item.id}\n                      icon=\"copy\"\n                      text={item.title}\n                      onClick={this.copy}\n                    />\n                  );\n                case 'paste':\n                  return (\n                    <Dropdown.Item\n                      key={item.id}\n                      icon=\"paste\"\n                      text={item.title}\n                      onClick={this.paste}\n                      disabled={this.props.action === null}\n                    />\n                  );\n                case 'delete':\n                  return (\n                    <Link\n                      key={item.id}\n                      to={`${this.props.pathname}/delete`}\n                      className=\"item\"\n                    >\n                      <Icon name=\"trash\" />\n                      {item.title}\n                    </Link>\n                  );\n                case 'rename':\n                  return (\n                    <Dropdown.Item\n                      key={item.id}\n                      icon=\"text cursor\"\n                      text={item.title}\n                      onClick={this.rename}\n                    />\n                  );\n                default:\n                  return null;\n              }\n            })}\n\n          <ContentsRenameModal\n            open={this.state.showRename}\n            onCancel={this.onRenameCancel}\n            onOk={this.onRenameOk}\n            items={[\n              {\n                url: this.props.pathname,\n                title: this.props.title,\n                id: this.props.id,\n              },\n            ]}\n          />\n        </Dropdown.Menu>\n      </Dropdown>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state) => ({\n      actions: state.actions.actions,\n      action: state.clipboard.action,\n      source: state.clipboard.source,\n      id: state.content.data ? state.content.data.id : '',\n      title: state.content.data ? state.content.data.title : '',\n    }),\n    {\n      cut,\n      copy,\n      copyContent,\n      moveContent,\n    },\n  ),\n)(Actions);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Cut","defaultMessage":"Cut"},{"id":"Copy","defaultMessage":"Copy"},{"id":"Paste","defaultMessage":"Paste"},{"id":"Rename","defaultMessage":"Rename"},{"id":"{title} copied.","defaultMessage":"{title} copied."},{"id":"{title} cut.","defaultMessage":"{title} cut."},{"id":"{title} has been deleted.","defaultMessage":"{title} has been deleted."},{"id":"Item(s) pasted.","defaultMessage":"Item(s) pasted."},{"id":"Success","defaultMessage":"Success"},{"id":"Actions","defaultMessage":"Actions"}]}},"sourceType":"module","externalDependencies":[]}