{"ast":null,"code":"import config from '@plone/volto/registry';\nexport * from './backspaceInList';\nexport * from './breakBlocks';\nexport * from './indentListItems';\nexport * from './joinBlocks';\nexport * from './moveListItems';\nexport * from './softBreak';\nexport * from './traverseBlocks';\nexport * from './unwrapEmptyString';\nexport * from './slashMenu';\nexport * from './cancelEsc';\n\n/**\n * Takes all the handlers from `slate.textblockKeyboardHandlers` that are\n * associated with the key that was pressed to generate the `event` and runs\n * them all until one of them returns `true`, moment when the rest of the\n * handlers are skipped.\n * @param {Editor} editor\n * @param {KeyboardEvent} event\n */\nexport function handleKey({\n  editor,\n  event\n}) {\n  const {\n    slate\n  } = config.settings;\n  const handlers = slate.textblockKeyboardHandlers[event.key];\n  if (handlers) {\n    // a handler can return `true` to signify it has handled the event in this\n    // case, the execution flow is stopped\n    return handlers.find(handler => handler({\n      editor,\n      event\n    }));\n  }\n}\n\n/**\n * Takes all the handlers from `slate.textblockDetachedKeyboardHandlers` that are\n * associated with the key that was pressed to generate the `event` and runs\n * them all until one of them returns `true`, moment when the rest of the\n * handlers are skipped.\n * @param {Editor} editor\n * @param {KeyboardEvent} event\n */\nexport function handleKeyDetached({\n  editor,\n  event\n}) {\n  const {\n    slate\n  } = config.settings;\n  const handlers = slate.textblockDetachedKeyboardHandlers[event.key];\n  if (handlers) {\n    // a handler can return `true` to signify it has handled the event in this\n    // case, the execution flow is stopped\n    return handlers.find(handler => handler({\n      editor,\n      event\n    }));\n  }\n}","map":{"version":3,"names":["config","handleKey","editor","event","slate","settings","handlers","textblockKeyboardHandlers","key","find","handler","handleKeyDetached","textblockDetachedKeyboardHandlers"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/volto-slate/src/blocks/Text/keyboard/index.js"],"sourcesContent":["import config from '@plone/volto/registry';\n\nexport * from './backspaceInList';\nexport * from './breakBlocks';\nexport * from './indentListItems';\nexport * from './joinBlocks';\nexport * from './moveListItems';\nexport * from './softBreak';\nexport * from './traverseBlocks';\nexport * from './unwrapEmptyString';\nexport * from './slashMenu';\nexport * from './cancelEsc';\n\n/**\n * Takes all the handlers from `slate.textblockKeyboardHandlers` that are\n * associated with the key that was pressed to generate the `event` and runs\n * them all until one of them returns `true`, moment when the rest of the\n * handlers are skipped.\n * @param {Editor} editor\n * @param {KeyboardEvent} event\n */\nexport function handleKey({ editor, event }) {\n  const { slate } = config.settings;\n\n  const handlers = slate.textblockKeyboardHandlers[event.key];\n\n  if (handlers) {\n    // a handler can return `true` to signify it has handled the event in this\n    // case, the execution flow is stopped\n    return handlers.find((handler) => handler({ editor, event }));\n  }\n}\n\n/**\n * Takes all the handlers from `slate.textblockDetachedKeyboardHandlers` that are\n * associated with the key that was pressed to generate the `event` and runs\n * them all until one of them returns `true`, moment when the rest of the\n * handlers are skipped.\n * @param {Editor} editor\n * @param {KeyboardEvent} event\n */\nexport function handleKeyDetached({ editor, event }) {\n  const { slate } = config.settings;\n\n  const handlers = slate.textblockDetachedKeyboardHandlers[event.key];\n\n  if (handlers) {\n    // a handler can return `true` to signify it has handled the event in this\n    // case, the execution flow is stopped\n    return handlers.find((handler) => handler({ editor, event }));\n  }\n}\n"],"mappings":"AAAA,OAAOA,MAAM,MAAM,uBAAuB;AAE1C,cAAc,mBAAmB;AACjC,cAAc,eAAe;AAC7B,cAAc,mBAAmB;AACjC,cAAc,cAAc;AAC5B,cAAc,iBAAiB;AAC/B,cAAc,aAAa;AAC3B,cAAc,kBAAkB;AAChC,cAAc,qBAAqB;AACnC,cAAc,aAAa;AAC3B,cAAc,aAAa;;AAE3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,SAAS,CAAC;EAAEC,MAAM;EAAEC;AAAM,CAAC,EAAE;EAC3C,MAAM;IAAEC;EAAM,CAAC,GAAGJ,MAAM,CAACK,QAAQ;EAEjC,MAAMC,QAAQ,GAAGF,KAAK,CAACG,yBAAyB,CAACJ,KAAK,CAACK,GAAG,CAAC;EAE3D,IAAIF,QAAQ,EAAE;IACZ;IACA;IACA,OAAOA,QAAQ,CAACG,IAAI,CAAEC,OAAO,IAAKA,OAAO,CAAC;MAAER,MAAM;MAAEC;IAAM,CAAC,CAAC,CAAC;EAC/D;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASQ,iBAAiB,CAAC;EAAET,MAAM;EAAEC;AAAM,CAAC,EAAE;EACnD,MAAM;IAAEC;EAAM,CAAC,GAAGJ,MAAM,CAACK,QAAQ;EAEjC,MAAMC,QAAQ,GAAGF,KAAK,CAACQ,iCAAiC,CAACT,KAAK,CAACK,GAAG,CAAC;EAEnE,IAAIF,QAAQ,EAAE;IACZ;IACA;IACA,OAAOA,QAAQ,CAACG,IAAI,CAAEC,OAAO,IAAKA,OAAO,CAAC;MAAER,MAAM;MAAEC;IAAM,CAAC,CAAC,CAAC;EAC/D;AACF"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}