{"ast":null,"code":"/**\n * Sitemap helper.\n * @module helpers/Sitemap\n */\n\nimport superagent from 'superagent';\nimport config from '@plone/volto/registry';\nimport { addHeadersFactory } from '@plone/volto/helpers/Proxy/Proxy';\n\n/**\n * Generate robots. Get robots from plone\n * @function generateRobots\n * @param {Object} req Request object\n * @return {string} Generated robots\n */\nexport var generateRobots = function generateRobots(req) {\n  return new Promise(function (resolve) {\n    var _config$settings$inte;\n    //const url = `${req.protocol}://${req.get('Host')}`;\n    var request = superagent.get(\"\".concat((_config$settings$inte = config.settings.internalApiPath) !== null && _config$settings$inte !== void 0 ? _config$settings$inte : config.settings.apiPath, \"/robots.txt\"));\n    request.set('Accept', 'text/plain');\n    var authToken = req.universalCookies.get('auth_token');\n    if (authToken) {\n      request.set('Authorization', \"Bearer \".concat(authToken));\n    }\n    request.use(addHeadersFactory(req));\n    request.end(function (error, _ref) {\n      var text = _ref.text;\n      if (error) {\n        resolve(text || error);\n      } else {\n        resolve(text);\n      }\n    });\n  });\n};","map":{"version":3,"names":["superagent","config","addHeadersFactory","generateRobots","req","Promise","resolve","request","get","settings","internalApiPath","apiPath","set","authToken","universalCookies","use","end","error","text"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/helpers/Robots/Robots.js"],"sourcesContent":["/**\n * Sitemap helper.\n * @module helpers/Sitemap\n */\n\nimport superagent from 'superagent';\nimport config from '@plone/volto/registry';\nimport { addHeadersFactory } from '@plone/volto/helpers/Proxy/Proxy';\n\n/**\n * Generate robots. Get robots from plone\n * @function generateRobots\n * @param {Object} req Request object\n * @return {string} Generated robots\n */\nexport const generateRobots = (req) =>\n  new Promise((resolve) => {\n    //const url = `${req.protocol}://${req.get('Host')}`;\n    const request = superagent.get(\n      `${\n        config.settings.internalApiPath ?? config.settings.apiPath\n      }/robots.txt`,\n    );\n    request.set('Accept', 'text/plain');\n    const authToken = req.universalCookies.get('auth_token');\n    if (authToken) {\n      request.set('Authorization', `Bearer ${authToken}`);\n    }\n    request.use(addHeadersFactory(req));\n    request.end((error, { text }) => {\n      if (error) {\n        resolve(text || error);\n      } else {\n        resolve(text);\n      }\n    });\n  });\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,OAAOA,UAAU,MAAM,YAAY;AACnC,OAAOC,MAAM,MAAM,uBAAuB;AAC1C,SAASC,iBAAiB,QAAQ,kCAAkC;;AAEpE;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAc,CAAIC,GAAG;EAAA,OAChC,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAK;IAAA;IACvB;IACA,IAAMC,OAAO,GAAGP,UAAU,CAACQ,GAAG,oCAE1BP,MAAM,CAACQ,QAAQ,CAACC,eAAe,yEAAIT,MAAM,CAACQ,QAAQ,CAACE,OAAO,iBAE7D;IACDJ,OAAO,CAACK,GAAG,CAAC,QAAQ,EAAE,YAAY,CAAC;IACnC,IAAMC,SAAS,GAAGT,GAAG,CAACU,gBAAgB,CAACN,GAAG,CAAC,YAAY,CAAC;IACxD,IAAIK,SAAS,EAAE;MACbN,OAAO,CAACK,GAAG,CAAC,eAAe,mBAAYC,SAAS,EAAG;IACrD;IACAN,OAAO,CAACQ,GAAG,CAACb,iBAAiB,CAACE,GAAG,CAAC,CAAC;IACnCG,OAAO,CAACS,GAAG,CAAC,UAACC,KAAK,QAAe;MAAA,IAAXC,IAAI,QAAJA,IAAI;MACxB,IAAID,KAAK,EAAE;QACTX,OAAO,CAACY,IAAI,IAAID,KAAK,CAAC;MACxB,CAAC,MAAM;QACLX,OAAO,CAACY,IAAI,CAAC;MACf;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;AAAA"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}