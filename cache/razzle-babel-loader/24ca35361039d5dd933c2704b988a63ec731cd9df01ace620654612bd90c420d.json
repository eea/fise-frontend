{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-plotlycharts/src/Widgets/DataQueryWidget.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport React from 'react';\nimport { FormFieldWrapper, Field } from '@plone/volto/components';\nimport { Accordion, Segment } from 'semantic-ui-react';\nconst DataQueryWidget = props => {\n  const {\n    value,\n    onChange,\n    id\n  } = props;\n  const onChangeAlias = (fieldId, fieldValue) => {\n    let altValue = value;\n    value[fieldId] = _objectSpread(_objectSpread({}, value[fieldId]), {}, {\n      alias: fieldValue\n    });\n    onChange(id, altValue);\n  };\n  return __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 5\n    }\n  }, __jsx(FormFieldWrapper, _extends({}, props, {\n    noForInFieldLabel: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }\n  })), __jsx(\"div\", {\n    className: \"data-query-widget-field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }\n  }, value && value.length > 0 ? value.map((param, i) => __jsx(Accordion, {\n    key: i,\n    fluid: true,\n    styled: true,\n    style: {\n      border: '1px solid lightgray',\n      marginBottom: '15px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }\n  }, __jsx(Accordion.Content, {\n    active: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 15\n    }\n  }, __jsx(Segment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 17\n    }\n  }, __jsx(\"p\", {\n    className: \"data-param-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 19\n    }\n  }, __jsx(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 21\n    }\n  }, param.i, \":\"), \" \", param.v.join(', ')), __jsx(Field, {\n    id: i,\n    title: \"Map to\",\n    type: \"string\",\n    onChange: onChangeAlias,\n    value: param === null || param === void 0 ? void 0 : param.alias,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 19\n    }\n  }))))) : __jsx(\"p\", {\n    style: {\n      textAlign: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }\n  }, \"No parameters set\")));\n};\nexport default DataQueryWidget;","map":{"version":3,"names":["React","FormFieldWrapper","Field","Accordion","Segment","DataQueryWidget","props","value","onChange","id","onChangeAlias","fieldId","fieldValue","altValue","alias","length","map","param","i","border","marginBottom","v","join","textAlign"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-plotlycharts/src/Widgets/DataQueryWidget.jsx"],"sourcesContent":["import React from 'react';\nimport { FormFieldWrapper, Field } from '@plone/volto/components';\nimport { Accordion, Segment } from 'semantic-ui-react';\n\nconst DataQueryWidget = (props) => {\n  const { value, onChange, id } = props;\n\n  const onChangeAlias = (fieldId, fieldValue) => {\n    let altValue = value;\n    value[fieldId] = { ...value[fieldId], alias: fieldValue };\n    onChange(id, altValue);\n  };\n\n  return (\n    <div>\n      <FormFieldWrapper {...props} noForInFieldLabel></FormFieldWrapper>\n      <div className=\"data-query-widget-field\">\n        {value && value.length > 0 ? (\n          value.map((param, i) => (\n            <Accordion\n              key={i}\n              fluid\n              styled\n              style={{ border: '1px solid lightgray', marginBottom: '15px' }}\n            >\n              <Accordion.Content active={true}>\n                <Segment>\n                  <p className=\"data-param-title\">\n                    <strong>{param.i}:</strong> {param.v.join(', ')}\n                  </p>\n                  <Field\n                    id={i}\n                    title=\"Map to\"\n                    type=\"string\"\n                    onChange={onChangeAlias}\n                    value={param?.alias}\n                  />\n                </Segment>\n              </Accordion.Content>\n            </Accordion>\n          ))\n        ) : (\n          <p style={{ textAlign: 'center' }}>No parameters set</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default DataQueryWidget;\n"],"mappings":";;;;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,gBAAgB,EAAEC,KAAK,QAAQ,yBAAyB;AACjE,SAASC,SAAS,EAAEC,OAAO,QAAQ,mBAAmB;AAEtD,MAAMC,eAAe,GAAIC,KAAK,IAAK;EACjC,MAAM;IAAEC,KAAK;IAAEC,QAAQ;IAAEC;EAAG,CAAC,GAAGH,KAAK;EAErC,MAAMI,aAAa,GAAG,CAACC,OAAO,EAAEC,UAAU,KAAK;IAC7C,IAAIC,QAAQ,GAAGN,KAAK;IACpBA,KAAK,CAACI,OAAO,CAAC,mCAAQJ,KAAK,CAACI,OAAO,CAAC;MAAEG,KAAK,EAAEF;IAAU,EAAE;IACzDJ,QAAQ,CAACC,EAAE,EAAEI,QAAQ,CAAC;EACxB,CAAC;EAED,OACE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACE,MAAC,gBAAgB,eAAKP,KAAK;IAAE,iBAAiB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAoB,EAClE;IAAK,SAAS,EAAC,yBAAyB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACrCC,KAAK,IAAIA,KAAK,CAACQ,MAAM,GAAG,CAAC,GACxBR,KAAK,CAACS,GAAG,CAAC,CAACC,KAAK,EAAEC,CAAC,KACjB,MAAC,SAAS;IACR,GAAG,EAAEA,CAAE;IACP,KAAK;IACL,MAAM;IACN,KAAK,EAAE;MAAEC,MAAM,EAAE,qBAAqB;MAAEC,YAAY,EAAE;IAAO,CAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAE/D,MAAC,SAAS,CAAC,OAAO;IAAC,MAAM,EAAE,IAAK;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAC9B,MAAC,OAAO;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACN;IAAG,SAAS,EAAC,kBAAkB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAC7B;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAASH,KAAK,CAACC,CAAC,MAAW,OAAED,KAAK,CAACI,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,CAC7C,EACJ,MAAC,KAAK;IACJ,EAAE,EAAEJ,CAAE;IACN,KAAK,EAAC,QAAQ;IACd,IAAI,EAAC,QAAQ;IACb,QAAQ,EAAER,aAAc;IACxB,KAAK,EAAEO,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEH,KAAM;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EACpB,CACM,CACQ,CAEvB,CAAC,GAEF;IAAG,KAAK,EAAE;MAAES,SAAS,EAAE;IAAS,CAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,uBACnC,CACG,CACF;AAEV,CAAC;AAED,eAAelB,eAAe"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}