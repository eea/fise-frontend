{"ast":null,"code":"/**\n * Sitemap helper.\n * @module helpers/Sitemap\n */\n\nimport superagent from 'superagent';\nimport config from '@plone/volto/registry';\nimport { addHeadersFactory } from '@plone/volto/helpers/Proxy/Proxy';\n\n/**\n * Generate robots. Get robots from plone\n * @function generateRobots\n * @param {Object} req Request object\n * @return {string} Generated robots\n */\nexport const generateRobots = req => new Promise(resolve => {\n  var _config$settings$inte;\n  //const url = `${req.protocol}://${req.get('Host')}`;\n  const request = superagent.get(`${(_config$settings$inte = config.settings.internalApiPath) !== null && _config$settings$inte !== void 0 ? _config$settings$inte : config.settings.apiPath}/robots.txt`);\n  request.set('Accept', 'text/plain');\n  const authToken = req.universalCookies.get('auth_token');\n  if (authToken) {\n    request.set('Authorization', `Bearer ${authToken}`);\n  }\n  request.use(addHeadersFactory(req));\n  request.end((error, {\n    text\n  }) => {\n    if (error) {\n      resolve(text || error);\n    } else {\n      resolve(text);\n    }\n  });\n});","map":{"version":3,"names":["superagent","config","addHeadersFactory","generateRobots","req","Promise","resolve","request","get","settings","internalApiPath","apiPath","set","authToken","universalCookies","use","end","error","text"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/helpers/Robots/Robots.js"],"sourcesContent":["/**\n * Sitemap helper.\n * @module helpers/Sitemap\n */\n\nimport superagent from 'superagent';\nimport config from '@plone/volto/registry';\nimport { addHeadersFactory } from '@plone/volto/helpers/Proxy/Proxy';\n\n/**\n * Generate robots. Get robots from plone\n * @function generateRobots\n * @param {Object} req Request object\n * @return {string} Generated robots\n */\nexport const generateRobots = (req) =>\n  new Promise((resolve) => {\n    //const url = `${req.protocol}://${req.get('Host')}`;\n    const request = superagent.get(\n      `${\n        config.settings.internalApiPath ?? config.settings.apiPath\n      }/robots.txt`,\n    );\n    request.set('Accept', 'text/plain');\n    const authToken = req.universalCookies.get('auth_token');\n    if (authToken) {\n      request.set('Authorization', `Bearer ${authToken}`);\n    }\n    request.use(addHeadersFactory(req));\n    request.end((error, { text }) => {\n      if (error) {\n        resolve(text || error);\n      } else {\n        resolve(text);\n      }\n    });\n  });\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,OAAOA,UAAU,MAAM,YAAY;AACnC,OAAOC,MAAM,MAAM,uBAAuB;AAC1C,SAASC,iBAAiB,QAAQ,kCAAkC;;AAEpE;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAIC,GAAG,IAChC,IAAIC,OAAO,CAAEC,OAAO,IAAK;EAAA;EACvB;EACA,MAAMC,OAAO,GAAGP,UAAU,CAACQ,GAAG,CAC3B,4BACCP,MAAM,CAACQ,QAAQ,CAACC,eAAe,yEAAIT,MAAM,CAACQ,QAAQ,CAACE,OACpD,aAAY,CACd;EACDJ,OAAO,CAACK,GAAG,CAAC,QAAQ,EAAE,YAAY,CAAC;EACnC,MAAMC,SAAS,GAAGT,GAAG,CAACU,gBAAgB,CAACN,GAAG,CAAC,YAAY,CAAC;EACxD,IAAIK,SAAS,EAAE;IACbN,OAAO,CAACK,GAAG,CAAC,eAAe,EAAG,UAASC,SAAU,EAAC,CAAC;EACrD;EACAN,OAAO,CAACQ,GAAG,CAACb,iBAAiB,CAACE,GAAG,CAAC,CAAC;EACnCG,OAAO,CAACS,GAAG,CAAC,CAACC,KAAK,EAAE;IAAEC;EAAK,CAAC,KAAK;IAC/B,IAAID,KAAK,EAAE;MACTX,OAAO,CAACY,IAAI,IAAID,KAAK,CAAC;IACxB,CAAC,MAAM;MACLX,OAAO,CAACY,IAAI,CAAC;IACf;EACF,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}