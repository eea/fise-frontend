{"ast":null,"code":"import _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/packages/volto-slate/src/blocks/Text/DetachedTextBlockEditor.jsx\",\n  _this = this,\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { useInView } from 'react-intersection-observer';\nimport { SlateEditor } from '@plone/volto-slate/editor';\nimport { serializeNodesToText } from '@plone/volto-slate/editor/render';\nimport { handleKeyDetached } from './keyboard';\nvar DEBUG = false;\nvar messages = defineMessages({\n  text: {\n    \"id\": \"Type text\\u2026\",\n    \"defaultMessage\": \"Type text\\u2026\"\n  }\n});\nexport var DetachedTextBlockEditor = function DetachedTextBlockEditor(props) {\n  _s();\n  var _data$instructions;\n  var data = props.data,\n    index = props.index,\n    properties = props.properties,\n    onSelectBlock = props.onSelectBlock,\n    onChangeBlock = props.onChangeBlock,\n    block = props.block,\n    selected = props.selected,\n    formTitle = props.formTitle,\n    formDescription = props.formDescription;\n  var value = data.value;\n  var intl = useIntl();\n  var placeholder = data.placeholder || formTitle || intl.formatMessage(messages.text);\n  var instructions = (data === null || data === void 0 ? void 0 : (_data$instructions = data.instructions) === null || _data$instructions === void 0 ? void 0 : _data$instructions.data) || (data === null || data === void 0 ? void 0 : data.instructions);\n  if (!instructions || instructions === '<p><br/></p>') {\n    instructions = formDescription;\n  }\n  var _useInView = useInView({\n      threshold: 0,\n      rootMargin: '0px 0px 200px 0px'\n    }),\n    ref = _useInView.ref,\n    inView = _useInView.inView;\n  return __jsx(\"div\", {\n    className: \"text-slate-editor-inner detached-slate-editor\",\n    ref: ref,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, __jsx(SlateEditor, {\n    index: index,\n    readOnly: !inView,\n    properties: properties,\n    renderExtensions: [],\n    value: value,\n    block: block /* is this needed? */,\n    debug: DEBUG,\n    onFocus: function onFocus() {\n      if (!selected) {\n        onSelectBlock(block);\n      }\n    },\n    onChange: function onChange(value, selection, editor) {\n      onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n        value: value,\n        plaintext: serializeNodesToText(value || [])\n        // TODO: also add html serialized value\n      }));\n    },\n\n    selected: selected,\n    placeholder: placeholder,\n    onKeyDown: handleKeyDetached,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }));\n};\n_s(DetachedTextBlockEditor, \"I/lTS5URGZRPQCtV3EFnu3zLYPM=\", false, function () {\n  return [useIntl, useInView];\n});\n_c = DetachedTextBlockEditor;\nexport default DetachedTextBlockEditor;\nvar _c;\n$RefreshReg$(_c, \"DetachedTextBlockEditor\");","map":{"version":3,"names":["React","defineMessages","useIntl","useInView","SlateEditor","serializeNodesToText","handleKeyDetached","DEBUG","messages","text","DetachedTextBlockEditor","props","data","index","properties","onSelectBlock","onChangeBlock","block","selected","formTitle","formDescription","value","intl","placeholder","formatMessage","instructions","threshold","rootMargin","ref","inView","selection","editor","plaintext"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/packages/volto-slate/src/blocks/Text/DetachedTextBlockEditor.jsx"],"sourcesContent":["import React from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { useInView } from 'react-intersection-observer';\nimport { SlateEditor } from '@plone/volto-slate/editor';\nimport { serializeNodesToText } from '@plone/volto-slate/editor/render';\nimport { handleKeyDetached } from './keyboard';\n\nconst DEBUG = false;\n\nconst messages = defineMessages({\n  text: {\n    id: 'Type text…',\n    defaultMessage: 'Type text…',\n  },\n});\n\nexport const DetachedTextBlockEditor = (props) => {\n  const {\n    data,\n    index,\n    properties,\n    onSelectBlock,\n    onChangeBlock,\n    block,\n    selected,\n    formTitle,\n    formDescription,\n  } = props;\n  const { value } = data;\n\n  const intl = useIntl();\n  const placeholder =\n    data.placeholder || formTitle || intl.formatMessage(messages.text);\n  let instructions = data?.instructions?.data || data?.instructions;\n  if (!instructions || instructions === '<p><br/></p>') {\n    instructions = formDescription;\n  }\n\n  const { ref, inView } = useInView({\n    threshold: 0,\n    rootMargin: '0px 0px 200px 0px',\n  });\n\n  return (\n    <div className=\"text-slate-editor-inner detached-slate-editor\" ref={ref}>\n      <SlateEditor\n        index={index}\n        readOnly={!inView}\n        properties={properties}\n        renderExtensions={[]}\n        value={value}\n        block={block /* is this needed? */}\n        debug={DEBUG}\n        onFocus={() => {\n          if (!selected) {\n            onSelectBlock(block);\n          }\n        }}\n        onChange={(value, selection, editor) => {\n          onChangeBlock(block, {\n            ...data,\n            value,\n            plaintext: serializeNodesToText(value || []),\n            // TODO: also add html serialized value\n          });\n        }}\n        selected={selected}\n        placeholder={placeholder}\n        onKeyDown={handleKeyDetached}\n      />\n    </div>\n  );\n};\n\nexport default DetachedTextBlockEditor;\n"],"mappings":";;;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,cAAc,EAAEC,OAAO,QAAQ,YAAY;AACpD,SAASC,SAAS,QAAQ,6BAA6B;AACvD,SAASC,WAAW,QAAQ,2BAA2B;AACvD,SAASC,oBAAoB,QAAQ,kCAAkC;AACvE,SAASC,iBAAiB,QAAQ,YAAY;AAE9C,IAAMC,KAAK,GAAG,KAAK;AAEnB,IAAMC,QAAQ,GAAGP,cAAc,CAAC;EAC9BQ,IAAI;IAAA;IAAA;EAAA;AAIN,CAAC,CAAC;AAEF,OAAO,IAAMC,uBAAuB,GAAG,SAA1BA,uBAAuB,CAAIC,KAAK,EAAK;EAAA;EAAA;EAChD,IACEC,IAAI,GASFD,KAAK,CATPC,IAAI;IACJC,KAAK,GAQHF,KAAK,CARPE,KAAK;IACLC,UAAU,GAORH,KAAK,CAPPG,UAAU;IACVC,aAAa,GAMXJ,KAAK,CANPI,aAAa;IACbC,aAAa,GAKXL,KAAK,CALPK,aAAa;IACbC,KAAK,GAIHN,KAAK,CAJPM,KAAK;IACLC,QAAQ,GAGNP,KAAK,CAHPO,QAAQ;IACRC,SAAS,GAEPR,KAAK,CAFPQ,SAAS;IACTC,eAAe,GACbT,KAAK,CADPS,eAAe;EAEjB,IAAQC,KAAK,GAAKT,IAAI,CAAdS,KAAK;EAEb,IAAMC,IAAI,GAAGpB,OAAO,EAAE;EACtB,IAAMqB,WAAW,GACfX,IAAI,CAACW,WAAW,IAAIJ,SAAS,IAAIG,IAAI,CAACE,aAAa,CAAChB,QAAQ,CAACC,IAAI,CAAC;EACpE,IAAIgB,YAAY,GAAG,CAAAb,IAAI,aAAJA,IAAI,6CAAJA,IAAI,CAAEa,YAAY,uDAAlB,mBAAoBb,IAAI,MAAIA,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEa,YAAY;EACjE,IAAI,CAACA,YAAY,IAAIA,YAAY,KAAK,cAAc,EAAE;IACpDA,YAAY,GAAGL,eAAe;EAChC;EAEA,iBAAwBjB,SAAS,CAAC;MAChCuB,SAAS,EAAE,CAAC;MACZC,UAAU,EAAE;IACd,CAAC,CAAC;IAHMC,GAAG,cAAHA,GAAG;IAAEC,MAAM,cAANA,MAAM;EAKnB,OACE;IAAK,SAAS,EAAC,+CAA+C;IAAC,GAAG,EAAED,GAAI;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACtE,MAAC,WAAW;IACV,KAAK,EAAEf,KAAM;IACb,QAAQ,EAAE,CAACgB,MAAO;IAClB,UAAU,EAAEf,UAAW;IACvB,gBAAgB,EAAE,EAAG;IACrB,KAAK,EAAEO,KAAM;IACb,KAAK,EAAEJ,KAAK,CAAC,qBAAsB;IACnC,KAAK,EAAEV,KAAM;IACb,OAAO,EAAE,mBAAM;MACb,IAAI,CAACW,QAAQ,EAAE;QACbH,aAAa,CAACE,KAAK,CAAC;MACtB;IACF,CAAE;IACF,QAAQ,EAAE,kBAACI,KAAK,EAAES,SAAS,EAAEC,MAAM,EAAK;MACtCf,aAAa,CAACC,KAAK,kCACdL,IAAI;QACPS,KAAK,EAALA,KAAK;QACLW,SAAS,EAAE3B,oBAAoB,CAACgB,KAAK,IAAI,EAAE;QAC3C;MAAA,GACA;IACJ,CAAE;;IACF,QAAQ,EAAEH,QAAS;IACnB,WAAW,EAAEK,WAAY;IACzB,SAAS,EAAEjB,iBAAkB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAC7B,CACE;AAEV,CAAC;AAAC,GAxDWI,uBAAuB;EAAA,QAcrBR,OAAO,EAQIC,SAAS;AAAA;AAAA,KAtBtBO,uBAAuB;AA0DpC,eAAeA,uBAAuB;AAAC;AAAA"},"metadata":{"react-intl":{"messages":[{"id":"Type text…","defaultMessage":"Type text…"}]}},"sourceType":"module","externalDependencies":[]}