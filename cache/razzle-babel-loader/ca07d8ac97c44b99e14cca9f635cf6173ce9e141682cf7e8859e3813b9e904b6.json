{"ast":null,"code":"import _slicedToArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _toConsumableArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _without from \"lodash/without\";\nimport _omit from \"lodash/omit\";\nimport _isEqual from \"lodash/isEqual\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Form/BlocksToolbar.jsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport { messages, getBlocksFieldname, getBlocksLayoutFieldname } from '@plone/volto/helpers';\nimport { Icon } from '@plone/volto/components';\nimport { Plug } from '@plone/volto/components/manage/Pluggable';\nimport { v4 as uuid } from 'uuid';\nimport { load } from 'redux-localstorage-simple';\nimport { setBlocksClipboard, resetBlocksClipboard } from '@plone/volto/actions';\nimport config from '@plone/volto/registry';\nimport copySVG from '@plone/volto/icons/copy.svg';\nimport cutSVG from '@plone/volto/icons/cut.svg';\nimport pasteSVG from '@plone/volto/icons/paste.svg';\nimport trashSVG from '@plone/volto/icons/delete.svg';\nexport var BlocksToolbarComponent = /*#__PURE__*/function (_React$Component) {\n  _inherits(BlocksToolbarComponent, _React$Component);\n  var _super = _createSuper(BlocksToolbarComponent);\n  function BlocksToolbarComponent(props) {\n    var _this;\n    _classCallCheck(this, BlocksToolbarComponent);\n    _this = _super.call(this, props);\n    _this.copyBlocksToClipboard = _this.copyBlocksToClipboard.bind(_assertThisInitialized(_this));\n    _this.cutBlocksToClipboard = _this.cutBlocksToClipboard.bind(_assertThisInitialized(_this));\n    _this.deleteBlocks = _this.deleteBlocks.bind(_assertThisInitialized(_this));\n    _this.loadFromStorage = _this.loadFromStorage.bind(_assertThisInitialized(_this));\n    _this.pasteBlocks = _this.pasteBlocks.bind(_assertThisInitialized(_this));\n    _this.setBlocksClipboard = _this.setBlocksClipboard.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n  _createClass(BlocksToolbarComponent, [{\n    key: \"loadFromStorage\",\n    value: function loadFromStorage() {\n      var _load;\n      var clipboard = (_load = load({\n        states: ['blocksClipboard']\n      })) === null || _load === void 0 ? void 0 : _load.blocksClipboard;\n      if (!_isEqual(clipboard, this.props.blocksClipboard)) this.props.setBlocksClipboard(clipboard || {});\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      window.addEventListener('storage', this.loadFromStorage, true);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      window.removeEventListener('storage', this.loadFromStorage);\n    }\n  }, {\n    key: \"deleteBlocks\",\n    value: function deleteBlocks() {\n      var _newBlockData;\n      var blockIds = this.props.selectedBlocks;\n      var formData = this.props.formData;\n      var blocksFieldname = getBlocksFieldname(formData);\n      var blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n\n      // Might need ReactDOM.unstable_batchedUpdates()\n      this.props.onSelectBlock(null);\n      var newBlockData = (_newBlockData = {}, _defineProperty(_newBlockData, blocksFieldname, _omit(formData[blocksFieldname], blockIds)), _defineProperty(_newBlockData, blocksLayoutFieldname, _objectSpread(_objectSpread({}, formData[blocksLayoutFieldname]), {}, {\n        items: _without.apply(void 0, [formData[blocksLayoutFieldname].items].concat(_toConsumableArray(blockIds)))\n      })), _newBlockData);\n      this.props.onChangeBlocks(newBlockData);\n    }\n  }, {\n    key: \"copyBlocksToClipboard\",\n    value: function copyBlocksToClipboard() {\n      this.setBlocksClipboard('copy');\n    }\n  }, {\n    key: \"cutBlocksToClipboard\",\n    value: function cutBlocksToClipboard() {\n      this.setBlocksClipboard('cut');\n      this.deleteBlocks();\n    }\n  }, {\n    key: \"setBlocksClipboard\",\n    value: function setBlocksClipboard(actionType) {\n      var formData = this.props.formData;\n      var blocksFieldname = getBlocksFieldname(formData);\n      var blocks = formData[blocksFieldname];\n      var blocksData = this.props.selectedBlocks.map(function (blockId) {\n        return blocks[blockId];\n      });\n      this.props.setBlocksClipboard(_defineProperty({}, actionType, blocksData));\n      this.props.onSetSelectedBlocks([]);\n    }\n  }, {\n    key: \"pasteBlocks\",\n    value: function pasteBlocks(e) {\n      var _newBlockData2;\n      var _this$props = this.props,\n        formData = _this$props.formData,\n        _this$props$blocksCli = _this$props.blocksClipboard,\n        blocksClipboard = _this$props$blocksCli === void 0 ? {} : _this$props$blocksCli,\n        selectedBlock = _this$props.selectedBlock;\n      var mode = Object.keys(blocksClipboard).includes('cut') ? 'cut' : 'copy';\n      var blocksData = blocksClipboard[mode] || [];\n      var cloneWithIds = blocksData.filter(function (blockData) {\n        return !!blockData['@type'];\n      }).map(function (blockData) {\n        var blockConfig = config.blocks.blocksConfig[blockData['@type']];\n        return mode === 'copy' ? blockConfig.cloneData ? blockConfig.cloneData(blockData) : [uuid(), blockData] : [uuid(), blockData]; // if cut/pasting blocks, we don't clone\n      }).filter(function (info) {\n        return !!info;\n      }); // some blocks may refuse to be copied\n      var blocksFieldname = getBlocksFieldname(formData);\n      var blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n      var selectedIndex = formData[blocksLayoutFieldname].items.indexOf(selectedBlock) + 1;\n      var newBlockData = (_newBlockData2 = {}, _defineProperty(_newBlockData2, blocksFieldname, _objectSpread(_objectSpread({}, formData[blocksFieldname]), Object.assign.apply(Object, [{}].concat(_toConsumableArray(cloneWithIds.map(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          id = _ref2[0],\n          data = _ref2[1];\n        return _defineProperty({}, id, data);\n      })))))), _defineProperty(_newBlockData2, blocksLayoutFieldname, _objectSpread(_objectSpread({}, formData[blocksLayoutFieldname]), {}, {\n        items: [].concat(_toConsumableArray(formData[blocksLayoutFieldname].items.slice(0, selectedIndex)), _toConsumableArray(cloneWithIds.map(function (_ref4) {\n          var _ref5 = _slicedToArray(_ref4, 1),\n            id = _ref5[0];\n          return id;\n        })), _toConsumableArray(formData[blocksLayoutFieldname].items.slice(selectedIndex)))\n      })), _newBlockData2);\n      if (!(e.ctrlKey || e.metaKey)) this.props.resetBlocksClipboard();\n      this.props.onChangeBlocks(newBlockData);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n        _this$props2$blocksCl = _this$props2.blocksClipboard,\n        blocksClipboard = _this$props2$blocksCl === void 0 ? {} : _this$props2$blocksCl,\n        selectedBlock = _this$props2.selectedBlock,\n        selectedBlocks = _this$props2.selectedBlocks,\n        intl = _this$props2.intl;\n      return __jsx(React.Fragment, null, selectedBlocks.length > 0 ? __jsx(React.Fragment, null, __jsx(Plug, {\n        pluggable: \"main.toolbar.bottom\",\n        id: \"blocks-delete-btn\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }\n      }, __jsx(\"button\", {\n        \"aria-label\": intl.formatMessage(messages.deleteBlocks),\n        onClick: this.deleteBlocks,\n        tabIndex: 0,\n        className: \"deleteBlocks\",\n        id: \"toolbar-delete-blocks\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 15\n        }\n      }, __jsx(Icon, {\n        name: trashSVG,\n        size: \"30px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 17\n        }\n      }))), __jsx(Plug, {\n        pluggable: \"main.toolbar.bottom\",\n        id: \"blocks-cut-btn\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 13\n        }\n      }, __jsx(\"button\", {\n        \"aria-label\": intl.formatMessage(messages.cutBlocks),\n        onClick: this.cutBlocksToClipboard,\n        tabIndex: 0,\n        className: \"cutBlocks\",\n        id: \"toolbar-cut-blocks\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 15\n        }\n      }, __jsx(Icon, {\n        name: cutSVG,\n        size: \"30px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 17\n        }\n      }))), __jsx(Plug, {\n        pluggable: \"main.toolbar.bottom\",\n        id: \"blocks-copy-btn\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 13\n        }\n      }, __jsx(\"button\", {\n        \"aria-label\": intl.formatMessage(messages.copyBlocks),\n        onClick: this.copyBlocksToClipboard,\n        tabIndex: 0,\n        className: \"copyBlocks\",\n        id: \"toolbar-copy-blocks\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 15\n        }\n      }, __jsx(Icon, {\n        name: copySVG,\n        size: \"30px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 17\n        }\n      })))) : '', selectedBlock && ((blocksClipboard === null || blocksClipboard === void 0 ? void 0 : blocksClipboard.cut) || (blocksClipboard === null || blocksClipboard === void 0 ? void 0 : blocksClipboard.copy)) && __jsx(Plug, {\n        pluggable: \"main.toolbar.bottom\",\n        id: \"block-paste-btn\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 11\n        }\n      }, __jsx(\"button\", {\n        \"aria-label\": intl.formatMessage(messages.pasteBlocks),\n        onClick: this.pasteBlocks,\n        tabIndex: 0,\n        className: \"pasteBlocks\",\n        id: \"toolbar-paste-blocks\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }\n      }, __jsx(\"span\", {\n        className: \"blockCount\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 15\n        }\n      }, (blocksClipboard.cut || blocksClipboard.copy).length), __jsx(Icon, {\n        name: pasteSVG,\n        size: \"30px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 15\n        }\n      }))));\n    }\n  }]);\n  return BlocksToolbarComponent;\n}(React.Component);\nexport default compose(injectIntl, connect(function (state) {\n  return {\n    blocksClipboard: (state === null || state === void 0 ? void 0 : state.blocksClipboard) || {}\n  };\n}, {\n  setBlocksClipboard: setBlocksClipboard,\n  resetBlocksClipboard: resetBlocksClipboard\n}))(BlocksToolbarComponent);","map":{"version":3,"names":["React","compose","connect","injectIntl","messages","getBlocksFieldname","getBlocksLayoutFieldname","Icon","Plug","v4","uuid","load","setBlocksClipboard","resetBlocksClipboard","config","copySVG","cutSVG","pasteSVG","trashSVG","BlocksToolbarComponent","props","copyBlocksToClipboard","bind","cutBlocksToClipboard","deleteBlocks","loadFromStorage","pasteBlocks","clipboard","states","blocksClipboard","window","addEventListener","removeEventListener","blockIds","selectedBlocks","formData","blocksFieldname","blocksLayoutFieldname","onSelectBlock","newBlockData","items","onChangeBlocks","actionType","blocks","blocksData","map","blockId","onSetSelectedBlocks","e","selectedBlock","mode","Object","keys","includes","cloneWithIds","filter","blockData","blockConfig","blocksConfig","cloneData","info","selectedIndex","indexOf","assign","id","data","slice","ctrlKey","metaKey","intl","length","formatMessage","cutBlocks","copyBlocks","cut","copy","Component","state"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Form/BlocksToolbar.jsx"],"sourcesContent":["import React from 'react';\nimport { compose } from 'redux';\nimport { connect } from 'react-redux';\nimport { injectIntl } from 'react-intl';\nimport {\n  messages,\n  getBlocksFieldname,\n  getBlocksLayoutFieldname,\n} from '@plone/volto/helpers';\nimport { Icon } from '@plone/volto/components';\nimport { Plug } from '@plone/volto/components/manage/Pluggable';\nimport { v4 as uuid } from 'uuid';\nimport { load } from 'redux-localstorage-simple';\nimport { isEqual, omit, without } from 'lodash';\n\nimport { setBlocksClipboard, resetBlocksClipboard } from '@plone/volto/actions';\nimport config from '@plone/volto/registry';\n\nimport copySVG from '@plone/volto/icons/copy.svg';\nimport cutSVG from '@plone/volto/icons/cut.svg';\nimport pasteSVG from '@plone/volto/icons/paste.svg';\nimport trashSVG from '@plone/volto/icons/delete.svg';\n\nexport class BlocksToolbarComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.copyBlocksToClipboard = this.copyBlocksToClipboard.bind(this);\n    this.cutBlocksToClipboard = this.cutBlocksToClipboard.bind(this);\n    this.deleteBlocks = this.deleteBlocks.bind(this);\n    this.loadFromStorage = this.loadFromStorage.bind(this);\n    this.pasteBlocks = this.pasteBlocks.bind(this);\n    this.setBlocksClipboard = this.setBlocksClipboard.bind(this);\n  }\n\n  loadFromStorage() {\n    const clipboard = load({ states: ['blocksClipboard'] })?.blocksClipboard;\n    if (!isEqual(clipboard, this.props.blocksClipboard))\n      this.props.setBlocksClipboard(clipboard || {});\n  }\n\n  componentDidMount() {\n    window.addEventListener('storage', this.loadFromStorage, true);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('storage', this.loadFromStorage);\n  }\n\n  deleteBlocks() {\n    const blockIds = this.props.selectedBlocks;\n\n    const { formData } = this.props;\n    const blocksFieldname = getBlocksFieldname(formData);\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n\n    // Might need ReactDOM.unstable_batchedUpdates()\n    this.props.onSelectBlock(null);\n    const newBlockData = {\n      [blocksFieldname]: omit(formData[blocksFieldname], blockIds),\n      [blocksLayoutFieldname]: {\n        ...formData[blocksLayoutFieldname],\n        items: without(formData[blocksLayoutFieldname].items, ...blockIds),\n      },\n    };\n    this.props.onChangeBlocks(newBlockData);\n  }\n\n  copyBlocksToClipboard() {\n    this.setBlocksClipboard('copy');\n  }\n\n  cutBlocksToClipboard() {\n    this.setBlocksClipboard('cut');\n    this.deleteBlocks();\n  }\n\n  setBlocksClipboard(actionType) {\n    const { formData } = this.props;\n    const blocksFieldname = getBlocksFieldname(formData);\n    const blocks = formData[blocksFieldname];\n    const blocksData = this.props.selectedBlocks.map(\n      (blockId) => blocks[blockId],\n    );\n    this.props.setBlocksClipboard({ [actionType]: blocksData });\n    this.props.onSetSelectedBlocks([]);\n  }\n\n  pasteBlocks(e) {\n    const { formData, blocksClipboard = {}, selectedBlock } = this.props;\n    const mode = Object.keys(blocksClipboard).includes('cut') ? 'cut' : 'copy';\n    const blocksData = blocksClipboard[mode] || [];\n    const cloneWithIds = blocksData\n      .filter((blockData) => !!blockData['@type'])\n      .map((blockData) => {\n        const blockConfig = config.blocks.blocksConfig[blockData['@type']];\n        return mode === 'copy'\n          ? blockConfig.cloneData\n            ? blockConfig.cloneData(blockData)\n            : [uuid(), blockData]\n          : [uuid(), blockData]; // if cut/pasting blocks, we don't clone\n      })\n      .filter((info) => !!info); // some blocks may refuse to be copied\n    const blocksFieldname = getBlocksFieldname(formData);\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n    const selectedIndex =\n      formData[blocksLayoutFieldname].items.indexOf(selectedBlock) + 1;\n\n    const newBlockData = {\n      [blocksFieldname]: {\n        ...formData[blocksFieldname],\n        ...Object.assign(\n          {},\n          ...cloneWithIds.map(([id, data]) => ({ [id]: data })),\n        ),\n      },\n      [blocksLayoutFieldname]: {\n        ...formData[blocksLayoutFieldname],\n        items: [\n          ...formData[blocksLayoutFieldname].items.slice(0, selectedIndex),\n          ...cloneWithIds.map(([id]) => id),\n          ...formData[blocksLayoutFieldname].items.slice(selectedIndex),\n        ],\n      },\n    };\n\n    if (!(e.ctrlKey || e.metaKey)) this.props.resetBlocksClipboard();\n    this.props.onChangeBlocks(newBlockData);\n  }\n\n  render() {\n    const {\n      blocksClipboard = {},\n      selectedBlock,\n      selectedBlocks,\n      intl,\n    } = this.props;\n    return (\n      <>\n        {selectedBlocks.length > 0 ? (\n          <>\n            <Plug pluggable=\"main.toolbar.bottom\" id=\"blocks-delete-btn\">\n              <button\n                aria-label={intl.formatMessage(messages.deleteBlocks)}\n                onClick={this.deleteBlocks}\n                tabIndex={0}\n                className=\"deleteBlocks\"\n                id=\"toolbar-delete-blocks\"\n              >\n                <Icon name={trashSVG} size=\"30px\" />\n              </button>\n            </Plug>\n            <Plug pluggable=\"main.toolbar.bottom\" id=\"blocks-cut-btn\">\n              <button\n                aria-label={intl.formatMessage(messages.cutBlocks)}\n                onClick={this.cutBlocksToClipboard}\n                tabIndex={0}\n                className=\"cutBlocks\"\n                id=\"toolbar-cut-blocks\"\n              >\n                <Icon name={cutSVG} size=\"30px\" />\n              </button>\n            </Plug>\n            <Plug pluggable=\"main.toolbar.bottom\" id=\"blocks-copy-btn\">\n              <button\n                aria-label={intl.formatMessage(messages.copyBlocks)}\n                onClick={this.copyBlocksToClipboard}\n                tabIndex={0}\n                className=\"copyBlocks\"\n                id=\"toolbar-copy-blocks\"\n              >\n                <Icon name={copySVG} size=\"30px\" />\n              </button>\n            </Plug>\n          </>\n        ) : (\n          ''\n        )}\n        {selectedBlock && (blocksClipboard?.cut || blocksClipboard?.copy) && (\n          <Plug pluggable=\"main.toolbar.bottom\" id=\"block-paste-btn\">\n            <button\n              aria-label={intl.formatMessage(messages.pasteBlocks)}\n              onClick={this.pasteBlocks}\n              tabIndex={0}\n              className=\"pasteBlocks\"\n              id=\"toolbar-paste-blocks\"\n            >\n              <span className=\"blockCount\">\n                {(blocksClipboard.cut || blocksClipboard.copy).length}\n              </span>\n              <Icon name={pasteSVG} size=\"30px\" />\n            </button>\n          </Plug>\n        )}\n      </>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state) => {\n      return {\n        blocksClipboard: state?.blocksClipboard || {},\n      };\n    },\n    { setBlocksClipboard, resetBlocksClipboard },\n  ),\n)(BlocksToolbarComponent);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}