{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Blocks/Search/components/Facets.jsx\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport React from 'react';\nimport { resolveExtension } from '@plone/volto/helpers/Extensions/withBlockExtensions';\nimport config from '@plone/volto/registry';\nimport { hasNonValueOperation, hasDateOperation } from '../utils';\nconst showFacet = index => {\n  const {\n    values\n  } = index;\n  return index ? hasNonValueOperation(index.operations || []) || hasDateOperation(index.operations || []) ? true : values && Object.keys(values).length > 0 : values && Object.keys(values).length > 0;\n};\nconst Facets = props => {\n  var _data$query, _data$query$query, _data$facets;\n  const {\n    querystring,\n    data = {},\n    facets,\n    setFacets,\n    facetWrapper,\n    isEditMode\n  } = props;\n  const {\n    search\n  } = config.blocks.blocksConfig;\n  const FacetWrapper = facetWrapper;\n  const query_to_values = Object.assign({}, ...((data === null || data === void 0 ? void 0 : (_data$query = data.query) === null || _data$query === void 0 ? void 0 : (_data$query$query = _data$query.query) === null || _data$query$query === void 0 ? void 0 : _data$query$query.map(({\n    i,\n    v\n  }) => ({\n    [i]: v\n  }))) || []));\n  return __jsx(React.Fragment, null, data === null || data === void 0 ? void 0 : (_data$facets = data.facets) === null || _data$facets === void 0 ? void 0 : _data$facets.filter(facetSettings => !facetSettings.hidden).map(facetSettings => {\n    var _facetSettings$field, _facetSettings$field2, _facetSettings$field3;\n    const field = facetSettings === null || facetSettings === void 0 ? void 0 : (_facetSettings$field = facetSettings.field) === null || _facetSettings$field === void 0 ? void 0 : _facetSettings$field.value;\n    const index = querystring.indexes[field] || {};\n    const {\n      values = {}\n    } = index;\n    let choices = Object.keys(values).map(name => ({\n      value: name,\n      label: values[name].title\n    }))\n    // filter the available values based on the allowed values in the\n    // base query\n    .filter(({\n      value\n    }) => query_to_values[field] ? query_to_values[field].includes(value) : true);\n    choices = choices.sort((a, b) => a.label.localeCompare(b.label, 'en', {\n      sensitivity: 'base'\n    }));\n    const isMulti = facetSettings.multiple;\n    const selectedValue = facets[facetSettings === null || facetSettings === void 0 ? void 0 : (_facetSettings$field2 = facetSettings.field) === null || _facetSettings$field2 === void 0 ? void 0 : _facetSettings$field2.value];\n\n    // TODO :handle changing the type of facet (multi/nonmulti)\n\n    const {\n      view: FacetWidget,\n      stateToValue\n    } = resolveExtension('type', search.extensions.facetWidgets.types, facetSettings);\n    let value = stateToValue({\n      facetSettings,\n      index,\n      selectedValue\n    });\n    const {\n      rewriteOptions = (name, options) => options\n    } = search.extensions.facetWidgets;\n    return FacetWrapper && (isEditMode || showFacet(index)) ? __jsx(FacetWrapper, {\n      key: facetSettings['@id'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }\n    }, __jsx(FacetWidget, {\n      facet: facetSettings,\n      choices: rewriteOptions(facetSettings === null || facetSettings === void 0 ? void 0 : (_facetSettings$field3 = facetSettings.field) === null || _facetSettings$field3 === void 0 ? void 0 : _facetSettings$field3.value, choices),\n      isMulti: isMulti,\n      value: value,\n      isEditMode: isEditMode,\n      onChange: (id, value) => {\n        !isEditMode && setFacets(_objectSpread(_objectSpread({}, facets), {}, {\n          [id]: value\n        }));\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 15\n      }\n    })) : '';\n  }));\n};\nexport default Facets;","map":{"version":3,"names":["React","resolveExtension","config","hasNonValueOperation","hasDateOperation","showFacet","index","values","operations","Object","keys","length","Facets","props","querystring","data","facets","setFacets","facetWrapper","isEditMode","search","blocks","blocksConfig","FacetWrapper","query_to_values","assign","query","map","i","v","filter","facetSettings","hidden","field","value","indexes","choices","name","label","title","includes","sort","a","b","localeCompare","sensitivity","isMulti","multiple","selectedValue","view","FacetWidget","stateToValue","extensions","facetWidgets","types","rewriteOptions","options","id"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Blocks/Search/components/Facets.jsx"],"sourcesContent":["import React from 'react';\nimport { resolveExtension } from '@plone/volto/helpers/Extensions/withBlockExtensions';\nimport config from '@plone/volto/registry';\nimport { hasNonValueOperation, hasDateOperation } from '../utils';\n\nconst showFacet = (index) => {\n  const { values } = index;\n  return index\n    ? hasNonValueOperation(index.operations || []) ||\n      hasDateOperation(index.operations || [])\n      ? true\n      : values && Object.keys(values).length > 0\n    : values && Object.keys(values).length > 0;\n};\n\nconst Facets = (props) => {\n  const {\n    querystring,\n    data = {},\n    facets,\n    setFacets,\n    facetWrapper,\n    isEditMode,\n  } = props;\n  const { search } = config.blocks.blocksConfig;\n\n  const FacetWrapper = facetWrapper;\n  const query_to_values = Object.assign(\n    {},\n    ...(data?.query?.query?.map(({ i, v }) => ({ [i]: v })) || []),\n  );\n\n  return (\n    <>\n      {data?.facets\n        ?.filter((facetSettings) => !facetSettings.hidden)\n        .map((facetSettings) => {\n          const field = facetSettings?.field?.value;\n          const index = querystring.indexes[field] || {};\n          const { values = {} } = index;\n\n          let choices = Object.keys(values)\n            .map((name) => ({\n              value: name,\n              label: values[name].title,\n            }))\n            // filter the available values based on the allowed values in the\n            // base query\n            .filter(({ value }) =>\n              query_to_values[field]\n                ? query_to_values[field].includes(value)\n                : true,\n            );\n\n          choices = choices.sort((a, b) =>\n            a.label.localeCompare(b.label, 'en', { sensitivity: 'base' }),\n          );\n\n          const isMulti = facetSettings.multiple;\n          const selectedValue = facets[facetSettings?.field?.value];\n\n          // TODO :handle changing the type of facet (multi/nonmulti)\n\n          const { view: FacetWidget, stateToValue } = resolveExtension(\n            'type',\n            search.extensions.facetWidgets.types,\n            facetSettings,\n          );\n\n          let value = stateToValue({ facetSettings, index, selectedValue });\n\n          const {\n            rewriteOptions = (name, options) => options,\n          } = search.extensions.facetWidgets;\n\n          return FacetWrapper && (isEditMode || showFacet(index)) ? (\n            <FacetWrapper key={facetSettings['@id']}>\n              <FacetWidget\n                facet={facetSettings}\n                choices={rewriteOptions(facetSettings?.field?.value, choices)}\n                isMulti={isMulti}\n                value={value}\n                isEditMode={isEditMode}\n                onChange={(id, value) => {\n                  !isEditMode && setFacets({ ...facets, [id]: value });\n                }}\n              />\n            </FacetWrapper>\n          ) : (\n            ''\n          );\n        })}\n    </>\n  );\n};\n\nexport default Facets;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}