{"ast":null,"code":"import _toConsumableArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _regeneratorRuntime from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _pull from \"lodash/pull\";\nimport _map from \"lodash/map\";\nimport _find from \"lodash/find\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Controlpanels/Groups/GroupsControlpanel.jsx\";\nvar __jsx = React.createElement;\n/**\n * Users controlpanel container.\n * @module components/manage/Controlpanels/UsersControlpanel\n */\nimport { createGroup, deleteGroup, listGroups, getControlpanel, listRoles, updateGroup, authenticatedRole } from '@plone/volto/actions';\nimport { Icon, ModalForm, Toast, Toolbar, RenderGroups, Pagination, Error } from '@plone/volto/components';\nimport { Link } from 'react-router-dom';\nimport { Helmet, messages } from '@plone/volto/helpers';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport addUserSvg from '@plone/volto/icons/add-user.svg';\nimport saveSVG from '@plone/volto/icons/save.svg';\nimport ploneSVG from '@plone/volto/icons/plone.svg';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Portal } from 'react-portal';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { bindActionCreators, compose } from 'redux';\nimport { Confirm, Container, Button, Form, Input, Segment, Table } from 'semantic-ui-react';\n\n/**\n * GroupsControlpanel class.\n * @class GroupsControlpanel\n * @extends Component\n */\nvar GroupsControlpanel = /*#__PURE__*/function (_Component) {\n  _inherits(GroupsControlpanel, _Component);\n  var _super = _createSuper(GroupsControlpanel);\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Sharing\n   */\n  function GroupsControlpanel(props) {\n    var _this;\n    _classCallCheck(this, GroupsControlpanel);\n    _this = _super.call(this, props);\n    _defineProperty(_assertThisInitialized(_this), \"fetchData\", /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this.props.getControlpanel('usergroup');\n            case 2:\n              _context.next = 4;\n              return _this.props.listRoles();\n            case 4:\n              if (_this.props.many_groups) {\n                _context.next = 8;\n                break;\n              }\n              _context.next = 7;\n              return _this.props.listGroups();\n            case 7:\n              _this.setState({\n                groupEntries: _this.props.groups\n              });\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n    _defineProperty(_assertThisInitialized(_this), \"updateGroupRoleSubmit\", function (e) {\n      e.stopPropagation();\n      _this.state.groupEntries.forEach(function (item) {\n        _this.props.updateGroup(item.id, item);\n      });\n      _this.props.authenticatedRole(_this.state.authenticatedRole);\n      toast.success(__jsx(Toast, {\n        success: true,\n        title: _this.props.intl.formatMessage(messages.success),\n        content: _this.props.intl.formatMessage(messages.updateGroups),\n        __self: _assertThisInitialized(_this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 7\n        }\n      }));\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onChangePage\", function (event, _ref2) {\n      var value = _ref2.value;\n      _this.setState({\n        currentPage: value\n      });\n    });\n    _this.onChangeSearch = _this.onChangeSearch.bind(_assertThisInitialized(_this));\n    _this.onSearchGroups = _this.onSearchGroups.bind(_assertThisInitialized(_this));\n    _this.deleteGroup = _this.deleteGroup.bind(_assertThisInitialized(_this));\n    _this.onDeleteOk = _this.onDeleteOk.bind(_assertThisInitialized(_this));\n    _this.onDeleteCancel = _this.onDeleteCancel.bind(_assertThisInitialized(_this));\n    _this.onAddGroupSubmit = _this.onAddGroupSubmit.bind(_assertThisInitialized(_this));\n    _this.onAddGroupError = _this.onAddGroupError.bind(_assertThisInitialized(_this));\n    _this.onAddGroupSuccess = _this.onAddGroupSuccess.bind(_assertThisInitialized(_this));\n    _this.updateGroupRole = _this.updateGroupRole.bind(_assertThisInitialized(_this));\n    _this.state = {\n      search: '',\n      addGroupError: '',\n      showDelete: false,\n      groupToDelete: undefined,\n      showAddGroup: false,\n      groupEntries: [],\n      isClient: false,\n      authenticatedRole: props.inheritedRole || [],\n      currentPage: 0,\n      pageSize: 10\n    };\n    return _this;\n  }\n  _createClass(GroupsControlpanel, [{\n    key: \"componentDidMount\",\n    value:\n    /**\n     * Component did mount\n     * @method componentDidMount\n     * @returns {undefined}\n     */\n    function componentDidMount() {\n      this.setState({\n        isClient: true\n      });\n      this.fetchData();\n    }\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      if (this.props.deleteGroupRequest.loading && nextProps.deleteGroupRequest.loaded || this.props.createGroupRequest.loading && nextProps.createGroupRequest.loaded) {\n        this.props.listGroups(this.state.search);\n      }\n      if (this.props.createGroupRequest.loading && nextProps.createGroupRequest.loaded) {\n        this.onAddGroupSuccess();\n      }\n      if (this.props.createGroupRequest.loading && nextProps.createGroupRequest.error) {\n        this.onAddGroupError(nextProps.createGroupRequest.error);\n      }\n      if (this.props.loadRolesRequest.loading && nextProps.loadRolesRequest.error) {\n        this.setState({\n          error: nextProps.loadRolesRequest.error\n        });\n      }\n    }\n  }, {\n    key: \"getGroupFromProps\",\n    value: function getGroupFromProps(value) {\n      return _find(this.props.groups, ['@id', value]);\n    }\n\n    /**\n     *\n     *\n     * @param {*} event Event object\n     * @memberof GroupsControlpanel\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onSearchGroups\",\n    value: function onSearchGroups(event) {\n      event.preventDefault();\n      this.props.listGroups(this.state.search);\n    }\n\n    /**\n     * On change search handler\n     * @method onChangeSearch\n     * @param {object} event Event object.\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onChangeSearch\",\n    value: function onChangeSearch(event) {\n      this.setState({\n        search: event.target.value\n      });\n    }\n\n    /**\n     *\n     *\n     * @param {*} event Event object.\n     * @param {*} { value } id (groupname)\n     * @memberof GroupsControlpanel\n     * @returns {undefined}\n     */\n  }, {\n    key: \"deleteGroup\",\n    value: function deleteGroup(event, _ref3) {\n      var value = _ref3.value;\n      if (value) {\n        this.setState({\n          showDelete: true,\n          groupToDelete: this.getGroupFromProps(value)\n        });\n      }\n    }\n\n    /**\n     * On delete ok\n     * @method onDeleteOk\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onDeleteOk\",\n    value: function onDeleteOk() {\n      if (this.state.groupToDelete) {\n        this.props.deleteGroup(this.state.groupToDelete.id);\n        this.setState({\n          showDelete: false,\n          groupToDelete: undefined\n        });\n      }\n    }\n\n    /**\n     * On delete cancel\n     * @method onDeleteCancel\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onDeleteCancel\",\n    value: function onDeleteCancel() {\n      this.setState({\n        showDelete: false,\n        itemsToDelete: []\n      });\n    }\n\n    /**\n     *\n     * @param {*} name\n     * @param {*} value\n     * @memberof GroupsControlpanel\n     */\n  }, {\n    key: \"updateGroupRole\",\n    value: function updateGroupRole(name, value) {\n      var _this2 = this;\n      this.setState(function (prevState) {\n        return {\n          groupEntries: _map(_this2.state.groupEntries, function (entry) {\n            return _objectSpread(_objectSpread({}, entry), {}, {\n              roles: entry.id === name && !entry.roles.includes(value) ? [].concat(_toConsumableArray(entry.roles), [value]) : entry.id !== name ? entry.roles : _pull(entry.roles, value)\n            });\n          }),\n          authenticatedRole: name === 'AuthenticatedUsers' && !prevState.authenticatedRole.includes(value) ? [].concat(_toConsumableArray(prevState.authenticatedRole), [value]) : name !== 'AuthenticatedUsers' ? prevState.authenticatedRole : _pull(prevState.authenticatedRole, value)\n        };\n      });\n    }\n    /**\n     * @param {*} event\n     * @memberof GroupsControlpanel\n     */\n  }, {\n    key: \"onAddGroupSubmit\",\n    value:\n    /**\n     *\n     *\n     * @param {object} data Form data from the ModalForm.\n     * @param {func} callback to set new form data in the ModalForm\n     * @memberof GroupsControlpanel\n     * @returns {undefined}\n     */\n    function onAddGroupSubmit(data, callback) {\n      this.props.createGroup(data);\n      this.setState({\n        addGroupSetFormDataCallback: callback\n      });\n    }\n\n    /**\n     * Handle Errors after createGroup()\n     *\n     * @param {*} error object. Requires the property .message\n     * @memberof GroupsControlpanel\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onAddGroupError\",\n    value: function onAddGroupError(error) {\n      this.setState({\n        addGroupError: error.response.body.message\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      if (this.props.groups !== prevProps.groups) {\n        this.setState({\n          groupEntries: this.props.groups\n        });\n      }\n    }\n\n    /**\n     * Handle Success after createGroup()\n     *\n     * @memberof GroupsControlpanel\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onAddGroupSuccess\",\n    value: function onAddGroupSuccess() {\n      this.state.addGroupSetFormDataCallback({});\n      this.setState({\n        showAddGroup: false,\n        addGroupError: undefined,\n        addGroupSetFormDataCallback: undefined\n      });\n      toast.success(__jsx(Toast, {\n        success: true,\n        title: this.props.intl.formatMessage(messages.success),\n        content: this.props.intl.formatMessage(messages.groupCreated),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 7\n        }\n      }));\n    }\n\n    /**\n     * On change page\n     * @method onChangePage\n     * @param {object} event Event object.\n     * @param {string} value Page value.\n     * @returns {undefined}\n     */\n  }, {\n    key: \"render\",\n    value:\n    /**\n     * Render method.\n     * @method render\n     * @returns {string} Markup for the component.\n     */\n    function render() {\n      var _this3 = this,\n        _this$state$groupEntr;\n      if (this.state.error) {\n        return __jsx(Error, {\n          error: this.state.error,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 14\n          }\n        });\n      }\n      /*let fullnameToDelete = this.state.groupToDelete\n          ? this.state.groupToDelete.fullname\n          : '';*/\n      var groupNameToDelete = this.state.groupToDelete ? this.state.groupToDelete.id : '';\n      return __jsx(Container, {\n        className: \"users-control-panel\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 7\n        }\n      }, __jsx(Helmet, {\n        title: this.props.intl.formatMessage(messages.groups),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 9\n        }\n      }), __jsx(\"div\", {\n        className: \"container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 9\n        }\n      }, __jsx(Confirm, {\n        open: this.state.showDelete,\n        header: this.props.intl.formatMessage(messages.deleteGroupConfirmTitle),\n        content: __jsx(\"div\", {\n          className: \"content\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 377,\n            columnNumber: 15\n          }\n        }, __jsx(\"ul\", {\n          className: \"content\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 17\n          }\n        }, __jsx(FormattedMessage, {\n          id: \"Do you really want to delete the group {groupname}?\",\n          defaultMessage: \"Do you really want to delete the group {groupname}?\",\n          values: {\n            groupname: __jsx(\"b\", {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 383,\n                columnNumber: 34\n              }\n            }, groupNameToDelete)\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 379,\n            columnNumber: 19\n          }\n        }))),\n        onCancel: this.onDeleteCancel,\n        onConfirm: this.onDeleteOk,\n        size: null,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 11\n        }\n      }), this.state.showAddGroup ? __jsx(ModalForm, {\n        open: this.state.showAddGroup,\n        className: \"modal\",\n        onSubmit: this.onAddGroupSubmit,\n        submitError: this.state.addGroupError,\n        onCancel: function onCancel() {\n          return _this3.setState({\n            showAddGroup: false\n          });\n        },\n        title: this.props.intl.formatMessage(messages.addGroupsFormTitle),\n        loading: this.props.createGroupRequest.loading,\n        schema: {\n          fieldsets: [{\n            id: 'default',\n            title: 'FIXME: Group Data',\n            fields: ['title', 'description', 'groupname', 'email', 'roles']\n          }],\n          properties: {\n            title: {\n              title: this.props.intl.formatMessage(messages.addGroupsFormTitleTitle),\n              type: 'string',\n              description: ''\n            },\n            description: {\n              title: this.props.intl.formatMessage(messages.addGroupsFormDescriptionTitle),\n              type: 'string',\n              description: ''\n            },\n            groupname: {\n              title: this.props.intl.formatMessage(messages.addGroupsFormGroupNameTitle),\n              type: 'string',\n              description: 'A unique identifier for the group. Can not be changed after creation.'\n            },\n            email: {\n              title: this.props.intl.formatMessage(messages.addGroupsFormEmailTitle),\n              type: 'string',\n              description: '',\n              widget: 'email'\n            },\n            roles: {\n              title: this.props.intl.formatMessage(messages.addGroupsFormRolesTitle),\n              type: 'array',\n              choices: this.props.roles.map(function (role) {\n                return [role.id, role.id];\n              }),\n              noValueOption: false,\n              description: ''\n            }\n          },\n          required: ['groupname']\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 394,\n          columnNumber: 13\n        }\n      }) : null), __jsx(Segment.Group, {\n        raised: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 462,\n          columnNumber: 9\n        }\n      }, __jsx(Segment, {\n        className: \"primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 463,\n          columnNumber: 11\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"Groups\",\n        defaultMessage: \"Groups\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 13\n        }\n      })), __jsx(Segment, {\n        secondary: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 11\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"Groups are logical collections of users, such as departments and business units. Groups are not directly related to permissions on a global level, you normally use Roles for that - and let certain Groups have a particular role. The symbol{plone_svg}indicates a role inherited from membership in another group.\",\n        defaultMessage: \"Groups are logical collections of users, such as departments and business units. Groups are not directly related to permissions on a global level, you normally use Roles for that - and let certain Groups have a particular role. The symbol{plone_svg}indicates a role inherited from membership in another group.\",\n        values: {\n          plone_svg: __jsx(Icon, {\n            name: ploneSVG,\n            size: \"20px\",\n            color: \"#007EB1\",\n            title: 'plone-svg',\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 472,\n              columnNumber: 19\n            }\n          })\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 13\n        }\n      })), __jsx(Segment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 11\n        }\n      }, __jsx(Form, {\n        onSubmit: this.onSearchGroups,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 483,\n          columnNumber: 13\n        }\n      }, __jsx(Form.Field, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 15\n        }\n      }, __jsx(Input, {\n        name: \"SearchableText\",\n        action: {\n          icon: 'search'\n        },\n        placeholder: this.props.intl.formatMessage(messages.searchGroups),\n        onChange: this.onChangeSearch,\n        id: \"group-search-input\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 17\n        }\n      })))), __jsx(Form, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 11\n        }\n      }, __jsx(\"div\", {\n        className: \"table\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 13\n        }\n      }, __jsx(Table, {\n        padded: true,\n        striped: true,\n        attached: true,\n        unstackable: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 15\n        }\n      }, __jsx(Table.Header, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 17\n        }\n      }, __jsx(Table.Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 19\n        }\n      }, __jsx(Table.HeaderCell, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 21\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"Groupname\",\n        defaultMessage: \"Groupname\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 503,\n          columnNumber: 23\n        }\n      })), this.props.roles.map(function (role) {\n        return __jsx(Table.HeaderCell, {\n          key: role.id,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 509,\n            columnNumber: 23\n          }\n        }, role.id);\n      }), __jsx(Table.HeaderCell, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 21\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"Actions\",\n        defaultMessage: \"Actions\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 23\n        }\n      })))), __jsx(Table.Body, {\n        \"data-group\": \"groups\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 518,\n          columnNumber: 17\n        }\n      }, this.state.groupEntries.slice(this.state.currentPage * 10, this.state.pageSize * (this.state.currentPage + 1)).map(function (group) {\n        return __jsx(RenderGroups, {\n          key: group.id,\n          onDelete: _this3.deleteGroup,\n          roles: _this3.props.roles,\n          group: group,\n          updateGroups: _this3.updateGroupRole,\n          inheritedRole: _this3.state.authenticatedRole,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 525,\n            columnNumber: 23\n          }\n        });\n      })))), __jsx(\"div\", {\n        className: \"contents-pagination\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 537,\n          columnNumber: 13\n        }\n      }, __jsx(Pagination, {\n        current: this.state.currentPage,\n        total: Math.ceil(((_this$state$groupEntr = this.state.groupEntries) === null || _this$state$groupEntr === void 0 ? void 0 : _this$state$groupEntr.length) / this.state.pageSize),\n        onChangePage: this.onChangePage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 15\n        }\n      })))), this.state.isClient && __jsx(Portal, {\n        node: document.getElementById('toolbar'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 549,\n          columnNumber: 11\n        }\n      }, __jsx(Toolbar, {\n        pathname: this.props.pathname,\n        hideDefaultViewButtons: true,\n        inner: __jsx(React.Fragment, null, __jsx(Button, {\n          id: \"toolbar-save\",\n          className: \"save\",\n          \"aria-label\": this.props.intl.formatMessage(messages.save),\n          onClick: this.updateGroupRoleSubmit,\n          loading: this.props.createGroupRequest.loading,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 555,\n            columnNumber: 19\n          }\n        }, __jsx(Icon, {\n          name: saveSVG,\n          className: \"circled\",\n          size: \"30px\",\n          title: this.props.intl.formatMessage(messages.save),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 562,\n            columnNumber: 21\n          }\n        })), __jsx(Link, {\n          to: \"/controlpanel\",\n          className: \"cancel\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 569,\n            columnNumber: 19\n          }\n        }, __jsx(Icon, {\n          name: clearSVG,\n          className: \"circled\",\n          \"aria-label\": this.props.intl.formatMessage(messages.cancel),\n          size: \"30px\",\n          title: this.props.intl.formatMessage(messages.cancel),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 570,\n            columnNumber: 21\n          }\n        })), __jsx(Button, {\n          id: \"toolbar-add\",\n          \"aria-label\": this.props.intl.formatMessage(messages.addGroupsButtonTitle),\n          onClick: function onClick() {\n            _this3.setState({\n              showAddGroup: true\n            });\n          },\n          loading: this.props.createGroupRequest.loading,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 580,\n            columnNumber: 19\n          }\n        }, __jsx(Icon, {\n          name: addUserSvg,\n          size: \"45px\",\n          color: \"#826A6A\",\n          title: this.props.intl.formatMessage(messages.addGroupsButtonTitle),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 590,\n            columnNumber: 21\n          }\n        }))),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 550,\n          columnNumber: 13\n        }\n      })));\n    }\n  }]);\n  return GroupsControlpanel;\n}(Component);\n_defineProperty(GroupsControlpanel, \"propTypes\", {\n  listRoles: PropTypes.func.isRequired,\n  listGroups: PropTypes.func.isRequired,\n  pathname: PropTypes.string.isRequired,\n  roles: PropTypes.arrayOf(PropTypes.shape({\n    '@id': PropTypes.string,\n    '@type': PropTypes.string,\n    id: PropTypes.string\n  })).isRequired,\n  groups: PropTypes.arrayOf(PropTypes.shape({\n    Title: PropTypes.string,\n    Description: PropTypes.string,\n    roles: PropTypes.arrayOf(PropTypes.string),\n    groupname: PropTypes.string\n  })).isRequired\n});\nexport default compose(injectIntl, connect(function (state, props) {\n  var _state$controlpanels, _state$controlpanels$, _state$controlpanels$2, _state$controlpanels2, _state$controlpanels3, _state$controlpanels4;\n  return {\n    roles: state.roles.roles,\n    groups: state.groups.groups,\n    description: state.description,\n    many_users: (_state$controlpanels = state.controlpanels) === null || _state$controlpanels === void 0 ? void 0 : (_state$controlpanels$ = _state$controlpanels.controlpanel) === null || _state$controlpanels$ === void 0 ? void 0 : (_state$controlpanels$2 = _state$controlpanels$.data) === null || _state$controlpanels$2 === void 0 ? void 0 : _state$controlpanels$2.many_users,\n    many_groups: (_state$controlpanels2 = state.controlpanels) === null || _state$controlpanels2 === void 0 ? void 0 : (_state$controlpanels3 = _state$controlpanels2.controlpanel) === null || _state$controlpanels3 === void 0 ? void 0 : (_state$controlpanels4 = _state$controlpanels3.data) === null || _state$controlpanels4 === void 0 ? void 0 : _state$controlpanels4.many_groups,\n    pathname: props.location.pathname,\n    deleteGroupRequest: state.groups[\"delete\"],\n    createGroupRequest: state.groups.create,\n    loadRolesRequest: state.roles,\n    inheritedRole: state.authRole.authenticatedRole\n  };\n}, function (dispatch) {\n  return bindActionCreators({\n    listRoles: listRoles,\n    listGroups: listGroups,\n    deleteGroup: deleteGroup,\n    getControlpanel: getControlpanel,\n    createGroup: createGroup,\n    updateGroup: updateGroup,\n    authenticatedRole: authenticatedRole\n  }, dispatch);\n}))(GroupsControlpanel);","map":{"version":3,"names":["createGroup","deleteGroup","listGroups","getControlpanel","listRoles","updateGroup","authenticatedRole","Icon","ModalForm","Toast","Toolbar","RenderGroups","Pagination","Error","Link","Helmet","messages","clearSVG","addUserSvg","saveSVG","ploneSVG","PropTypes","React","Component","FormattedMessage","injectIntl","Portal","connect","toast","bindActionCreators","compose","Confirm","Container","Button","Form","Input","Segment","Table","GroupsControlpanel","props","many_groups","setState","groupEntries","groups","e","stopPropagation","state","forEach","item","id","success","intl","formatMessage","updateGroups","event","value","currentPage","onChangeSearch","bind","onSearchGroups","onDeleteOk","onDeleteCancel","onAddGroupSubmit","onAddGroupError","onAddGroupSuccess","updateGroupRole","search","addGroupError","showDelete","groupToDelete","undefined","showAddGroup","isClient","inheritedRole","pageSize","fetchData","nextProps","deleteGroupRequest","loading","loaded","createGroupRequest","error","loadRolesRequest","preventDefault","target","getGroupFromProps","itemsToDelete","name","prevState","entry","roles","includes","data","callback","addGroupSetFormDataCallback","response","body","message","prevProps","groupCreated","groupNameToDelete","deleteGroupConfirmTitle","groupname","addGroupsFormTitle","fieldsets","title","fields","properties","addGroupsFormTitleTitle","type","description","addGroupsFormDescriptionTitle","addGroupsFormGroupNameTitle","email","addGroupsFormEmailTitle","widget","addGroupsFormRolesTitle","choices","map","role","noValueOption","required","plone_svg","icon","searchGroups","slice","group","Math","ceil","length","onChangePage","document","getElementById","pathname","save","updateGroupRoleSubmit","cancel","addGroupsButtonTitle","func","isRequired","string","arrayOf","shape","Title","Description","many_users","controlpanels","controlpanel","location","create","authRole","dispatch"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Controlpanels/Groups/GroupsControlpanel.jsx"],"sourcesContent":["/**\n * Users controlpanel container.\n * @module components/manage/Controlpanels/UsersControlpanel\n */\nimport {\n  createGroup,\n  deleteGroup,\n  listGroups,\n  getControlpanel,\n  listRoles,\n  updateGroup,\n  authenticatedRole,\n} from '@plone/volto/actions';\nimport {\n  Icon,\n  ModalForm,\n  Toast,\n  Toolbar,\n  RenderGroups,\n  Pagination,\n  Error,\n} from '@plone/volto/components';\nimport { Link } from 'react-router-dom';\nimport { Helmet, messages } from '@plone/volto/helpers';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport addUserSvg from '@plone/volto/icons/add-user.svg';\nimport saveSVG from '@plone/volto/icons/save.svg';\nimport ploneSVG from '@plone/volto/icons/plone.svg';\nimport { find, map, pull } from 'lodash';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Portal } from 'react-portal';\nimport { connect } from 'react-redux';\n\nimport { toast } from 'react-toastify';\nimport { bindActionCreators, compose } from 'redux';\nimport {\n  Confirm,\n  Container,\n  Button,\n  Form,\n  Input,\n  Segment,\n  Table,\n} from 'semantic-ui-react';\n\n/**\n * GroupsControlpanel class.\n * @class GroupsControlpanel\n * @extends Component\n */\nclass GroupsControlpanel extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    listRoles: PropTypes.func.isRequired,\n    listGroups: PropTypes.func.isRequired,\n    pathname: PropTypes.string.isRequired,\n    roles: PropTypes.arrayOf(\n      PropTypes.shape({\n        '@id': PropTypes.string,\n        '@type': PropTypes.string,\n        id: PropTypes.string,\n      }),\n    ).isRequired,\n    groups: PropTypes.arrayOf(\n      PropTypes.shape({\n        Title: PropTypes.string,\n        Description: PropTypes.string,\n        roles: PropTypes.arrayOf(PropTypes.string),\n        groupname: PropTypes.string,\n      }),\n    ).isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Sharing\n   */\n  constructor(props) {\n    super(props);\n    this.onChangeSearch = this.onChangeSearch.bind(this);\n    this.onSearchGroups = this.onSearchGroups.bind(this);\n    this.deleteGroup = this.deleteGroup.bind(this);\n    this.onDeleteOk = this.onDeleteOk.bind(this);\n    this.onDeleteCancel = this.onDeleteCancel.bind(this);\n    this.onAddGroupSubmit = this.onAddGroupSubmit.bind(this);\n    this.onAddGroupError = this.onAddGroupError.bind(this);\n    this.onAddGroupSuccess = this.onAddGroupSuccess.bind(this);\n    this.updateGroupRole = this.updateGroupRole.bind(this);\n    this.state = {\n      search: '',\n      addGroupError: '',\n      showDelete: false,\n      groupToDelete: undefined,\n      showAddGroup: false,\n      groupEntries: [],\n      isClient: false,\n      authenticatedRole: props.inheritedRole || [],\n      currentPage: 0,\n      pageSize: 10,\n    };\n  }\n\n  fetchData = async () => {\n    await this.props.getControlpanel('usergroup');\n    await this.props.listRoles();\n    if (!this.props.many_groups) {\n      await this.props.listGroups();\n      this.setState({\n        groupEntries: this.props.groups,\n      });\n    }\n  };\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.setState({\n      isClient: true,\n    });\n    this.fetchData();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (\n      (this.props.deleteGroupRequest.loading &&\n        nextProps.deleteGroupRequest.loaded) ||\n      (this.props.createGroupRequest.loading &&\n        nextProps.createGroupRequest.loaded)\n    ) {\n      this.props.listGroups(this.state.search);\n    }\n    if (\n      this.props.createGroupRequest.loading &&\n      nextProps.createGroupRequest.loaded\n    ) {\n      this.onAddGroupSuccess();\n    }\n    if (\n      this.props.createGroupRequest.loading &&\n      nextProps.createGroupRequest.error\n    ) {\n      this.onAddGroupError(nextProps.createGroupRequest.error);\n    }\n    if (\n      this.props.loadRolesRequest.loading &&\n      nextProps.loadRolesRequest.error\n    ) {\n      this.setState({\n        error: nextProps.loadRolesRequest.error,\n      });\n    }\n  }\n\n  getGroupFromProps(value) {\n    return find(this.props.groups, ['@id', value]);\n  }\n\n  /**\n   *\n   *\n   * @param {*} event Event object\n   * @memberof GroupsControlpanel\n   * @returns {undefined}\n   */\n  onSearchGroups(event) {\n    event.preventDefault();\n    this.props.listGroups(this.state.search);\n  }\n\n  /**\n   * On change search handler\n   * @method onChangeSearch\n   * @param {object} event Event object.\n   * @returns {undefined}\n   */\n  onChangeSearch(event) {\n    this.setState({\n      search: event.target.value,\n    });\n  }\n\n  /**\n   *\n   *\n   * @param {*} event Event object.\n   * @param {*} { value } id (groupname)\n   * @memberof GroupsControlpanel\n   * @returns {undefined}\n   */\n  deleteGroup(event, { value }) {\n    if (value) {\n      this.setState({\n        showDelete: true,\n        groupToDelete: this.getGroupFromProps(value),\n      });\n    }\n  }\n\n  /**\n   * On delete ok\n   * @method onDeleteOk\n   * @returns {undefined}\n   */\n  onDeleteOk() {\n    if (this.state.groupToDelete) {\n      this.props.deleteGroup(this.state.groupToDelete.id);\n      this.setState({\n        showDelete: false,\n        groupToDelete: undefined,\n      });\n    }\n  }\n\n  /**\n   * On delete cancel\n   * @method onDeleteCancel\n   * @returns {undefined}\n   */\n  onDeleteCancel() {\n    this.setState({\n      showDelete: false,\n      itemsToDelete: [],\n    });\n  }\n\n  /**\n   *\n   * @param {*} name\n   * @param {*} value\n   * @memberof GroupsControlpanel\n   */\n  updateGroupRole(name, value) {\n    this.setState((prevState) => ({\n      groupEntries: map(this.state.groupEntries, (entry) => ({\n        ...entry,\n        roles:\n          entry.id === name && !entry.roles.includes(value)\n            ? [...entry.roles, value]\n            : entry.id !== name\n            ? entry.roles\n            : pull(entry.roles, value),\n      })),\n      authenticatedRole:\n        name === 'AuthenticatedUsers' &&\n        !prevState.authenticatedRole.includes(value)\n          ? [...prevState.authenticatedRole, value]\n          : name !== 'AuthenticatedUsers'\n          ? prevState.authenticatedRole\n          : pull(prevState.authenticatedRole, value),\n    }));\n  }\n  /**\n   * @param {*} event\n   * @memberof GroupsControlpanel\n   */\n  updateGroupRoleSubmit = (e) => {\n    e.stopPropagation();\n    this.state.groupEntries.forEach((item) => {\n      this.props.updateGroup(item.id, item);\n    });\n    this.props.authenticatedRole(this.state.authenticatedRole);\n    toast.success(\n      <Toast\n        success\n        title={this.props.intl.formatMessage(messages.success)}\n        content={this.props.intl.formatMessage(messages.updateGroups)}\n      />,\n    );\n  };\n  /**\n   *\n   *\n   * @param {object} data Form data from the ModalForm.\n   * @param {func} callback to set new form data in the ModalForm\n   * @memberof GroupsControlpanel\n   * @returns {undefined}\n   */\n  onAddGroupSubmit(data, callback) {\n    this.props.createGroup(data);\n    this.setState({\n      addGroupSetFormDataCallback: callback,\n    });\n  }\n\n  /**\n   * Handle Errors after createGroup()\n   *\n   * @param {*} error object. Requires the property .message\n   * @memberof GroupsControlpanel\n   * @returns {undefined}\n   */\n  onAddGroupError(error) {\n    this.setState({\n      addGroupError: error.response.body.message,\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.groups !== prevProps.groups) {\n      this.setState({\n        groupEntries: this.props.groups,\n      });\n    }\n  }\n\n  /**\n   * Handle Success after createGroup()\n   *\n   * @memberof GroupsControlpanel\n   * @returns {undefined}\n   */\n  onAddGroupSuccess() {\n    this.state.addGroupSetFormDataCallback({});\n    this.setState({\n      showAddGroup: false,\n      addGroupError: undefined,\n      addGroupSetFormDataCallback: undefined,\n    });\n    toast.success(\n      <Toast\n        success\n        title={this.props.intl.formatMessage(messages.success)}\n        content={this.props.intl.formatMessage(messages.groupCreated)}\n      />,\n    );\n  }\n\n  /**\n   * On change page\n   * @method onChangePage\n   * @param {object} event Event object.\n   * @param {string} value Page value.\n   * @returns {undefined}\n   */\n  onChangePage = (event, { value }) => {\n    this.setState({\n      currentPage: value,\n    });\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    if (this.state.error) {\n      return <Error error={this.state.error} />;\n    }\n    /*let fullnameToDelete = this.state.groupToDelete\n        ? this.state.groupToDelete.fullname\n        : '';*/\n    let groupNameToDelete = this.state.groupToDelete\n      ? this.state.groupToDelete.id\n      : '';\n\n    return (\n      <Container className=\"users-control-panel\">\n        <Helmet title={this.props.intl.formatMessage(messages.groups)} />\n        <div className=\"container\">\n          <Confirm\n            open={this.state.showDelete}\n            header={this.props.intl.formatMessage(\n              messages.deleteGroupConfirmTitle,\n            )}\n            content={\n              <div className=\"content\">\n                <ul className=\"content\">\n                  <FormattedMessage\n                    id=\"Do you really want to delete the group {groupname}?\"\n                    defaultMessage=\"Do you really want to delete the group {groupname}?\"\n                    values={{\n                      groupname: <b>{groupNameToDelete}</b>,\n                    }}\n                  />\n                </ul>\n              </div>\n            }\n            onCancel={this.onDeleteCancel}\n            onConfirm={this.onDeleteOk}\n            size={null}\n          />\n          {this.state.showAddGroup ? (\n            <ModalForm\n              open={this.state.showAddGroup}\n              className=\"modal\"\n              onSubmit={this.onAddGroupSubmit}\n              submitError={this.state.addGroupError}\n              onCancel={() => this.setState({ showAddGroup: false })}\n              title={this.props.intl.formatMessage(messages.addGroupsFormTitle)}\n              loading={this.props.createGroupRequest.loading}\n              schema={{\n                fieldsets: [\n                  {\n                    id: 'default',\n                    title: 'FIXME: Group Data',\n                    fields: [\n                      'title',\n                      'description',\n                      'groupname',\n                      'email',\n                      'roles',\n                    ],\n                  },\n                ],\n                properties: {\n                  title: {\n                    title: this.props.intl.formatMessage(\n                      messages.addGroupsFormTitleTitle,\n                    ),\n                    type: 'string',\n                    description: '',\n                  },\n                  description: {\n                    title: this.props.intl.formatMessage(\n                      messages.addGroupsFormDescriptionTitle,\n                    ),\n                    type: 'string',\n                    description: '',\n                  },\n                  groupname: {\n                    title: this.props.intl.formatMessage(\n                      messages.addGroupsFormGroupNameTitle,\n                    ),\n                    type: 'string',\n                    description:\n                      'A unique identifier for the group. Can not be changed after creation.',\n                  },\n                  email: {\n                    title: this.props.intl.formatMessage(\n                      messages.addGroupsFormEmailTitle,\n                    ),\n                    type: 'string',\n                    description: '',\n                    widget: 'email',\n                  },\n                  roles: {\n                    title: this.props.intl.formatMessage(\n                      messages.addGroupsFormRolesTitle,\n                    ),\n                    type: 'array',\n                    choices: this.props.roles.map((role) => [role.id, role.id]),\n                    noValueOption: false,\n                    description: '',\n                  },\n                },\n                required: ['groupname'],\n              }}\n            />\n          ) : null}\n        </div>\n        <Segment.Group raised>\n          <Segment className=\"primary\">\n            <FormattedMessage id=\"Groups\" defaultMessage=\"Groups\" />\n          </Segment>\n          <Segment secondary>\n            <FormattedMessage\n              id=\"Groups are logical collections of users, such as departments and business units. Groups are not directly related to permissions on a global level, you normally use Roles for that - and let certain Groups have a particular role. The symbol{plone_svg}indicates a role inherited from membership in another group.\"\n              defaultMessage=\"Groups are logical collections of users, such as departments and business units. Groups are not directly related to permissions on a global level, you normally use Roles for that - and let certain Groups have a particular role. The symbol{plone_svg}indicates a role inherited from membership in another group.\"\n              values={{\n                plone_svg: (\n                  <Icon\n                    name={ploneSVG}\n                    size=\"20px\"\n                    color=\"#007EB1\"\n                    title={'plone-svg'}\n                  />\n                ),\n              }}\n            />\n          </Segment>\n          <Segment>\n            <Form onSubmit={this.onSearchGroups}>\n              <Form.Field>\n                <Input\n                  name=\"SearchableText\"\n                  action={{ icon: 'search' }}\n                  placeholder={this.props.intl.formatMessage(\n                    messages.searchGroups,\n                  )}\n                  onChange={this.onChangeSearch}\n                  id=\"group-search-input\"\n                />\n              </Form.Field>\n            </Form>\n          </Segment>\n          <Form>\n            <div className=\"table\">\n              <Table padded striped attached unstackable>\n                <Table.Header>\n                  <Table.Row>\n                    <Table.HeaderCell>\n                      <FormattedMessage\n                        id=\"Groupname\"\n                        defaultMessage=\"Groupname\"\n                      />\n                    </Table.HeaderCell>\n                    {this.props.roles.map((role) => (\n                      <Table.HeaderCell key={role.id}>\n                        {role.id}\n                      </Table.HeaderCell>\n                    ))}\n                    <Table.HeaderCell>\n                      <FormattedMessage id=\"Actions\" defaultMessage=\"Actions\" />\n                    </Table.HeaderCell>\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body data-group=\"groups\">\n                  {this.state.groupEntries\n                    .slice(\n                      this.state.currentPage * 10,\n                      this.state.pageSize * (this.state.currentPage + 1),\n                    )\n                    .map((group) => (\n                      <RenderGroups\n                        key={group.id}\n                        onDelete={this.deleteGroup}\n                        roles={this.props.roles}\n                        group={group}\n                        updateGroups={this.updateGroupRole}\n                        inheritedRole={this.state.authenticatedRole}\n                      />\n                    ))}\n                </Table.Body>\n              </Table>\n            </div>\n            <div className=\"contents-pagination\">\n              <Pagination\n                current={this.state.currentPage}\n                total={Math.ceil(\n                  this.state.groupEntries?.length / this.state.pageSize,\n                )}\n                onChangePage={this.onChangePage}\n              />\n            </div>\n          </Form>\n        </Segment.Group>\n        {this.state.isClient && (\n          <Portal node={document.getElementById('toolbar')}>\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={\n                <>\n                  <Button\n                    id=\"toolbar-save\"\n                    className=\"save\"\n                    aria-label={this.props.intl.formatMessage(messages.save)}\n                    onClick={this.updateGroupRoleSubmit}\n                    loading={this.props.createGroupRequest.loading}\n                  >\n                    <Icon\n                      name={saveSVG}\n                      className=\"circled\"\n                      size=\"30px\"\n                      title={this.props.intl.formatMessage(messages.save)}\n                    />\n                  </Button>\n                  <Link to=\"/controlpanel\" className=\"cancel\">\n                    <Icon\n                      name={clearSVG}\n                      className=\"circled\"\n                      aria-label={this.props.intl.formatMessage(\n                        messages.cancel,\n                      )}\n                      size=\"30px\"\n                      title={this.props.intl.formatMessage(messages.cancel)}\n                    />\n                  </Link>\n                  <Button\n                    id=\"toolbar-add\"\n                    aria-label={this.props.intl.formatMessage(\n                      messages.addGroupsButtonTitle,\n                    )}\n                    onClick={() => {\n                      this.setState({ showAddGroup: true });\n                    }}\n                    loading={this.props.createGroupRequest.loading}\n                  >\n                    <Icon\n                      name={addUserSvg}\n                      size=\"45px\"\n                      color=\"#826A6A\"\n                      title={this.props.intl.formatMessage(\n                        messages.addGroupsButtonTitle,\n                      )}\n                    />\n                  </Button>\n                </>\n              }\n            />\n          </Portal>\n        )}\n      </Container>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      roles: state.roles.roles,\n      groups: state.groups.groups,\n      description: state.description,\n      many_users: state.controlpanels?.controlpanel?.data?.many_users,\n      many_groups: state.controlpanels?.controlpanel?.data?.many_groups,\n      pathname: props.location.pathname,\n      deleteGroupRequest: state.groups.delete,\n      createGroupRequest: state.groups.create,\n      loadRolesRequest: state.roles,\n      inheritedRole: state.authRole.authenticatedRole,\n    }),\n    (dispatch) =>\n      bindActionCreators(\n        {\n          listRoles,\n          listGroups,\n          deleteGroup,\n          getControlpanel,\n          createGroup,\n          updateGroup,\n          authenticatedRole,\n        },\n        dispatch,\n      ),\n  ),\n)(GroupsControlpanel);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Do you really want to delete the group {groupname}?","defaultMessage":"Do you really want to delete the group {groupname}?"},{"id":"Groups","defaultMessage":"Groups"},{"id":"Groups are logical collections of users, such as departments and business units. Groups are not directly related to permissions on a global level, you normally use Roles for that - and let certain Groups have a particular role. The symbol{plone_svg}indicates a role inherited from membership in another group.","defaultMessage":"Groups are logical collections of users, such as departments and business units. Groups are not directly related to permissions on a global level, you normally use Roles for that - and let certain Groups have a particular role. The symbol{plone_svg}indicates a role inherited from membership in another group."},{"id":"Groupname","defaultMessage":"Groupname"},{"id":"Actions","defaultMessage":"Actions"}]}},"sourceType":"module","externalDependencies":[]}