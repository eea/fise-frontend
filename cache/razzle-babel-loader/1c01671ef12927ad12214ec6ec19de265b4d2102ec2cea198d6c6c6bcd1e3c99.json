{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/WorkingCopyToastsFactory/WorkingCopyToastsFactory.jsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { useSelector } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { Toast } from '@plone/volto/components';\nimport { flattenToAppURL } from '@plone/volto/helpers';\nimport { FormattedDate } from '@plone/volto/components';\nimport config from '@plone/volto/registry';\nimport useDeepCompareEffect from 'use-deep-compare-effect';\nconst messages = defineMessages({\n  thisIsAWorkingCopyOf: {\n    \"id\": \"This is a working copy of {title}\",\n    \"defaultMessage\": \"This is a working copy of {title}\"\n  },\n  workingCopyIs: {\n    \"id\": \"This has an ongoing working copy in {title}\",\n    \"defaultMessage\": \"This has an ongoing working copy in {title}\"\n  },\n  workingCopyCreatedBy: {\n    \"id\": \"Created by {creator} on {date}\",\n    \"defaultMessage\": \"Created by {creator} on {date}\"\n  }\n});\nconst WorkingCopyToastsFactory = props => {\n  const intl = useIntl();\n  const pathname = useLocation().pathname;\n  const lang = useSelector(state => state.intl.locale);\n  const {\n    content\n  } = props;\n  const title = content === null || content === void 0 ? void 0 : content.title;\n  const working_copy = content === null || content === void 0 ? void 0 : content.working_copy;\n  const dateOptions = {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  };\n  useDeepCompareEffect(() => {\n    if (content && config.settings.hasWorkingCopySupport) {\n      if (working_copy) {\n        let toastMessage, toastTitle;\n        if (content.working_copy_of) {\n          var _content$working_copy;\n          // I'm a working copy\n          toastMessage = messages.thisIsAWorkingCopyOf;\n          toastTitle = __jsx(Link, {\n            to: flattenToAppURL(content.working_copy_of['@id']),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 13\n            }\n          }, (_content$working_copy = content.working_copy_of) === null || _content$working_copy === void 0 ? void 0 : _content$working_copy.title);\n        } else {\n          // I'm a baseline\n          toastMessage = messages.workingCopyIs;\n          toastTitle = __jsx(Link, {\n            to: flattenToAppURL(working_copy['@id']),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 13\n            }\n          }, working_copy === null || working_copy === void 0 ? void 0 : working_copy.title);\n        }\n        if (toast.isActive('workingcopyinfo')) {\n          toast.update('workingcopyinfo', {\n            render: __jsx(Toast, {\n              info: true,\n              title: intl.formatMessage(toastMessage, {\n                title: toastTitle\n              }),\n              content: intl.formatMessage(messages.workingCopyCreatedBy, {\n                creator: working_copy === null || working_copy === void 0 ? void 0 : working_copy.creator_name,\n                date: __jsx(FormattedDate, {\n                  date: working_copy === null || working_copy === void 0 ? void 0 : working_copy.created,\n                  format: dateOptions,\n                  __self: this,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 73,\n                    columnNumber: 21\n                  }\n                })\n              }),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 65,\n                columnNumber: 15\n              }\n            })\n          });\n        } else {\n          toast.info(__jsx(Toast, {\n            info: true,\n            title: intl.formatMessage(toastMessage, {\n              title: toastTitle\n            }),\n            content: intl.formatMessage(messages.workingCopyCreatedBy, {\n              creator: working_copy === null || working_copy === void 0 ? void 0 : working_copy.creator_name,\n              date: __jsx(FormattedDate, {\n                date: working_copy === null || working_copy === void 0 ? void 0 : working_copy.created,\n                format: dateOptions,\n                __self: this,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 92,\n                  columnNumber: 19\n                }\n              })\n            }),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 13\n            }\n          }), {\n            toastId: 'workingcopyinfo',\n            autoClose: false,\n            closeButton: false,\n            transition: null\n          });\n        }\n      }\n      if (!working_copy) {\n        if (toast.isActive('workingcopyinfo')) {\n          toast.dismiss('workingcopyinfo');\n        }\n      }\n    }\n  }, [pathname, content, title, working_copy, intl, lang, dateOptions]);\n  return null;\n};\nexport default WorkingCopyToastsFactory;","map":{"version":3,"names":["React","Link","toast","useSelector","useLocation","defineMessages","useIntl","Toast","flattenToAppURL","FormattedDate","config","useDeepCompareEffect","messages","thisIsAWorkingCopyOf","workingCopyIs","workingCopyCreatedBy","WorkingCopyToastsFactory","props","intl","pathname","lang","state","locale","content","title","working_copy","dateOptions","year","month","day","settings","hasWorkingCopySupport","toastMessage","toastTitle","working_copy_of","isActive","update","render","formatMessage","creator","creator_name","date","created","info","toastId","autoClose","closeButton","transition","dismiss"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/WorkingCopyToastsFactory/WorkingCopyToastsFactory.jsx"],"sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { useSelector } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { Toast } from '@plone/volto/components';\nimport { flattenToAppURL } from '@plone/volto/helpers';\nimport { FormattedDate } from '@plone/volto/components';\nimport config from '@plone/volto/registry';\nimport useDeepCompareEffect from 'use-deep-compare-effect';\n\nconst messages = defineMessages({\n  thisIsAWorkingCopyOf: {\n    id: 'This is a working copy of {title}',\n    defaultMessage: 'This is a working copy of {title}',\n  },\n  workingCopyIs: {\n    id: 'This has an ongoing working copy in {title}',\n    defaultMessage: 'This has an ongoing working copy in {title}',\n  },\n  workingCopyCreatedBy: {\n    id: 'Created by {creator} on {date}',\n    defaultMessage: 'Created by {creator} on {date}',\n  },\n});\n\nconst WorkingCopyToastsFactory = (props) => {\n  const intl = useIntl();\n  const pathname = useLocation().pathname;\n  const lang = useSelector((state) => state.intl.locale);\n  const { content } = props;\n  const title = content?.title;\n  const working_copy = content?.working_copy;\n  const dateOptions = {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n  };\n\n  useDeepCompareEffect(() => {\n    if (content && config.settings.hasWorkingCopySupport) {\n      if (working_copy) {\n        let toastMessage, toastTitle;\n        if (content.working_copy_of) {\n          // I'm a working copy\n          toastMessage = messages.thisIsAWorkingCopyOf;\n          toastTitle = (\n            <Link to={flattenToAppURL(content.working_copy_of['@id'])}>\n              {content.working_copy_of?.title}\n            </Link>\n          );\n        } else {\n          // I'm a baseline\n          toastMessage = messages.workingCopyIs;\n          toastTitle = (\n            <Link to={flattenToAppURL(working_copy['@id'])}>\n              {working_copy?.title}\n            </Link>\n          );\n        }\n        if (toast.isActive('workingcopyinfo')) {\n          toast.update('workingcopyinfo', {\n            render: (\n              <Toast\n                info\n                title={intl.formatMessage(toastMessage, {\n                  title: toastTitle,\n                })}\n                content={intl.formatMessage(messages.workingCopyCreatedBy, {\n                  creator: working_copy?.creator_name,\n                  date: (\n                    <FormattedDate\n                      date={working_copy?.created}\n                      format={dateOptions}\n                    />\n                  ),\n                })}\n              />\n            ),\n          });\n        } else {\n          toast.info(\n            <Toast\n              info\n              title={intl.formatMessage(toastMessage, {\n                title: toastTitle,\n              })}\n              content={intl.formatMessage(messages.workingCopyCreatedBy, {\n                creator: working_copy?.creator_name,\n                date: (\n                  <FormattedDate\n                    date={working_copy?.created}\n                    format={dateOptions}\n                  />\n                ),\n              })}\n            />,\n            {\n              toastId: 'workingcopyinfo',\n              autoClose: false,\n              closeButton: false,\n              transition: null,\n            },\n          );\n        }\n      }\n      if (!working_copy) {\n        if (toast.isActive('workingcopyinfo')) {\n          toast.dismiss('workingcopyinfo');\n        }\n      }\n    }\n  }, [pathname, content, title, working_copy, intl, lang, dateOptions]);\n\n  return null;\n};\n\nexport default WorkingCopyToastsFactory;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"This is a working copy of {title}","defaultMessage":"This is a working copy of {title}"},{"id":"This has an ongoing working copy in {title}","defaultMessage":"This has an ongoing working copy in {title}"},{"id":"Created by {creator} on {date}","defaultMessage":"Created by {creator} on {date}"}]}},"sourceType":"module","externalDependencies":[]}