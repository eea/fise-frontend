{"ast":null,"code":"import _nth from \"lodash/nth\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Controlpanels/ContentTypeSchema.jsx\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n/**\n * Content type schema.\n * @module components/manage/Controlpanels/ContentTypeSchema\n */\n\nimport { getSchema, putSchema } from '@plone/volto/actions';\nimport { getParentUrl } from '@plone/volto/helpers';\nimport { Error, Form, Icon, Toast, Toolbar } from '@plone/volto/components';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport saveSVG from '@plone/volto/icons/save.svg';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { Portal } from 'react-portal';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { compose } from 'redux';\nimport { Button, Header } from 'semantic-ui-react';\nconst messages = defineMessages({\n  title: {\n    \"id\": \"{id} Schema\",\n    \"defaultMessage\": \"{id} Schema\"\n  },\n  success: {\n    \"id\": \"Success\",\n    \"defaultMessage\": \"Success\"\n  },\n  save: {\n    \"id\": \"Save\",\n    \"defaultMessage\": \"Save\"\n  },\n  cancel: {\n    \"id\": \"Cancel\",\n    \"defaultMessage\": \"Cancel\"\n  },\n  error: {\n    \"id\": \"Error\",\n    \"defaultMessage\": \"Error\"\n  },\n  typeCreated: {\n    \"id\": \"Schema updates\",\n    \"defaultMessage\": \"Schema updates\"\n  },\n  info: {\n    \"id\": \"Info\",\n    \"defaultMessage\": \"Info\"\n  },\n  changesSaved: {\n    \"id\": \"Changes saved.\",\n    \"defaultMessage\": \"Changes saved.\"\n  }\n});\n\n/**\n * ContentTypeSchema class.\n * @class ContentTypeSchema\n * @extends Component\n */\nclass ContentTypeSchema extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    _defineProperty(this, \"form\", /*#__PURE__*/React.createRef());\n    _defineProperty(this, \"makeSchemaList\", schema => {\n      const result = {\n        title: 'Schema',\n        type: 'object',\n        fieldsets: [{\n          fields: ['schema'],\n          id: 'default',\n          title: 'Default'\n        }],\n        properties: {\n          schema: {\n            description: 'Form schema',\n            title: 'Form schema',\n            type: 'schema',\n            id: 'schema'\n          }\n        },\n        required: [],\n        layouts: null\n      };\n      result.layouts = schema.layouts.slice();\n      return result;\n    });\n    _defineProperty(this, \"isEditable\", field => !field.behavior || field.behavior.includes('generated'));\n    _defineProperty(this, \"makeSchemaData\", (schema, contentType) => {\n      const fieldsets = schema.fieldsets.map(fieldset => {\n        const readOnlyFields = fieldset.fields.filter(fieldId => !this.isEditable(schema.properties[fieldId]) && fieldId !== 'changeNote');\n        const userCreatedFields = fieldset.fields.filter(fieldId => this.isEditable(schema.properties[fieldId]));\n        const changeNote = fieldset.fields.filter(fieldId => fieldId === 'changeNote');\n        return _objectSpread(_objectSpread({}, fieldset), {}, {\n          fields: [...readOnlyFields, ...userCreatedFields, ...changeNote]\n        });\n      });\n      const result = _objectSpread(_objectSpread({}, schema), {}, {\n        fieldsets,\n        contentType\n      });\n      return {\n        schema: JSON.stringify(result)\n      };\n    });\n    this.state = {\n      error: null,\n      schema: null,\n      content: null,\n      isClient: false\n    };\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.form = /*#__PURE__*/React.createRef();\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.getSchema(this.props.id);\n    this.setState({\n      isClient: true\n    });\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    // Schema error\n    if (this.props.schemaRequest.loading && nextProps.schemaRequest.error) {\n      this.setState({\n        error: nextProps.schemaRequest.error\n      });\n    }\n\n    // Schema GET\n    if (this.props.schemaRequest.loading && nextProps.schemaRequest.loaded) {\n      var _nextProps$schema;\n      let properties = ((_nextProps$schema = nextProps.schema) === null || _nextProps$schema === void 0 ? void 0 : _nextProps$schema.properties) || {};\n      let content = {};\n      let value, key;\n      for (key in properties) {\n        value = properties[key].default;\n        if (value) {\n          content[key] = value;\n        }\n      }\n      this.setState({\n        schema: nextProps.schema,\n        content: content\n      });\n    }\n\n    // Schema updated\n    if (this.props.schemaRequest.put.loading && nextProps.schemaRequest.put.loaded) {\n      // this.props.getSchema(this.props.id);\n      toast.info(__jsx(Toast, {\n        info: true,\n        title: this.props.intl.formatMessage(messages.info),\n        content: this.props.intl.formatMessage(messages.changesSaved),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 9\n        }\n      }));\n    }\n\n    // Schema update error\n    if (this.props.schemaRequest.put.loading && nextProps.schemaRequest.put.error) {\n      toast.error(__jsx(Toast, {\n        error: true,\n        title: this.props.intl.formatMessage(messages.error),\n        content: JSON.stringify(nextProps.schemaRequest.put.error.response.body || nextProps.schemaRequest.put.error.response.text),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 9\n        }\n      }));\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    this.props.putSchema(this.props.id, data.schema);\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    let url = getParentUrl(this.props.pathname);\n    this.props.history.push(getParentUrl(url));\n  }\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    // Error\n    if (this.state.error) {\n      return __jsx(Error, {\n        error: this.state.error,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263,\n          columnNumber: 14\n        }\n      });\n    }\n    if (this.state.schema) {\n      var _this$props, _this$props$schema;\n      const contentTypeSchema = this.makeSchemaList(this.state.schema);\n      const schemaData = this.makeSchemaData(this.state.schema, this.props.id);\n      return __jsx(\"div\", {\n        id: \"page-controlpanel-schema\",\n        className: \"ui container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 9\n        }\n      }, __jsx(Header, {\n        disabled: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 11\n        }\n      }, this.props.intl.formatMessage(messages.title, {\n        id: ((_this$props = this.props) === null || _this$props === void 0 ? void 0 : (_this$props$schema = _this$props.schema) === null || _this$props$schema === void 0 ? void 0 : _this$props$schema.title) || this.props.id\n      })), __jsx(Form, {\n        ref: this.form,\n        schema: contentTypeSchema,\n        formData: schemaData,\n        pathname: this.props.pathname,\n        onSubmit: this.onSubmit,\n        onCancel: this.onCancel,\n        hideActions: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 11\n        }\n      }), this.state.isClient && __jsx(Portal, {\n        node: document.getElementById('toolbar'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 13\n        }\n      }, __jsx(Toolbar, {\n        pathname: this.props.pathname,\n        hideDefaultViewButtons: true,\n        inner: __jsx(React.Fragment, null, __jsx(Button, {\n          id: \"toolbar-save\",\n          className: \"save\",\n          \"aria-label\": this.props.intl.formatMessage(messages.save),\n          onClick: () => this.form.current.onSubmit(),\n          disabled: this.props.schemaRequest.put.loading,\n          loading: this.props.schemaRequest.put.loading,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 21\n          }\n        }, __jsx(Icon, {\n          name: saveSVG,\n          className: \"circled\",\n          size: \"30px\",\n          title: this.props.intl.formatMessage(messages.save),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 301,\n            columnNumber: 23\n          }\n        })), __jsx(Button, {\n          className: \"cancel\",\n          \"aria-label\": this.props.intl.formatMessage(messages.cancel),\n          onClick: () => this.onCancel(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 308,\n            columnNumber: 21\n          }\n        }, __jsx(Icon, {\n          name: clearSVG,\n          className: \"circled\",\n          size: \"30px\",\n          title: this.props.intl.formatMessage(messages.cancel),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 315,\n            columnNumber: 23\n          }\n        }))),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 15\n        }\n      })));\n    }\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 12\n      }\n    });\n  }\n}\n_defineProperty(ContentTypeSchema, \"propTypes\", {\n  getSchema: PropTypes.func.isRequired,\n  putSchema: PropTypes.func.isRequired,\n  pathname: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired\n});\n_defineProperty(ContentTypeSchema, \"defaultProps\", {});\nexport default compose(injectIntl, connect((state, props) => ({\n  schema: state.schema.schema,\n  schemaRequest: state.schema,\n  pathname: props.location.pathname,\n  id: _nth(props.location.pathname.split('/'), -2)\n}), {\n  getSchema,\n  putSchema\n}))(ContentTypeSchema);","map":{"version":3,"names":["getSchema","putSchema","getParentUrl","Error","Form","Icon","Toast","Toolbar","clearSVG","saveSVG","PropTypes","React","Component","defineMessages","injectIntl","Portal","connect","toast","compose","Button","Header","messages","title","success","save","cancel","error","typeCreated","info","changesSaved","ContentTypeSchema","constructor","props","createRef","schema","result","type","fieldsets","fields","id","properties","description","required","layouts","slice","field","behavior","includes","contentType","map","fieldset","readOnlyFields","filter","fieldId","isEditable","userCreatedFields","changeNote","JSON","stringify","state","content","isClient","onCancel","bind","onSubmit","form","componentDidMount","setState","UNSAFE_componentWillReceiveProps","nextProps","schemaRequest","loading","loaded","value","key","default","put","intl","formatMessage","response","body","text","data","url","pathname","history","push","render","contentTypeSchema","makeSchemaList","schemaData","makeSchemaData","document","getElementById","current","func","isRequired","string","location","split"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Controlpanels/ContentTypeSchema.jsx"],"sourcesContent":["/**\n * Content type schema.\n * @module components/manage/Controlpanels/ContentTypeSchema\n */\n\nimport { getSchema, putSchema } from '@plone/volto/actions';\nimport { getParentUrl } from '@plone/volto/helpers';\nimport { nth } from 'lodash';\nimport { Error, Form, Icon, Toast, Toolbar } from '@plone/volto/components';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport saveSVG from '@plone/volto/icons/save.svg';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { Portal } from 'react-portal';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { compose } from 'redux';\nimport { Button, Header } from 'semantic-ui-react';\n\nconst messages = defineMessages({\n  title: {\n    id: '{id} Schema',\n    defaultMessage: '{id} Schema',\n  },\n  success: {\n    id: 'Success',\n    defaultMessage: 'Success',\n  },\n  save: {\n    id: 'Save',\n    defaultMessage: 'Save',\n  },\n  cancel: {\n    id: 'Cancel',\n    defaultMessage: 'Cancel',\n  },\n  error: {\n    id: 'Error',\n    defaultMessage: 'Error',\n  },\n  typeCreated: {\n    id: 'Schema updates',\n    defaultMessage: 'Schema updates',\n  },\n  info: {\n    id: 'Info',\n    defaultMessage: 'Info',\n  },\n  changesSaved: {\n    id: 'Changes saved.',\n    defaultMessage: 'Changes saved.',\n  },\n});\n\n/**\n * ContentTypeSchema class.\n * @class ContentTypeSchema\n * @extends Component\n */\nclass ContentTypeSchema extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    getSchema: PropTypes.func.isRequired,\n    putSchema: PropTypes.func.isRequired,\n    pathname: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {};\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      schema: null,\n      content: null,\n      isClient: false,\n    };\n\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.form = React.createRef();\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.getSchema(this.props.id);\n    this.setState({ isClient: true });\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    // Schema error\n    if (this.props.schemaRequest.loading && nextProps.schemaRequest.error) {\n      this.setState({\n        error: nextProps.schemaRequest.error,\n      });\n    }\n\n    // Schema GET\n    if (this.props.schemaRequest.loading && nextProps.schemaRequest.loaded) {\n      let properties = nextProps.schema?.properties || {};\n      let content = {};\n      let value, key;\n      for (key in properties) {\n        value = properties[key].default;\n        if (value) {\n          content[key] = value;\n        }\n      }\n\n      this.setState({\n        schema: nextProps.schema,\n        content: content,\n      });\n    }\n\n    // Schema updated\n    if (\n      this.props.schemaRequest.put.loading &&\n      nextProps.schemaRequest.put.loaded\n    ) {\n      // this.props.getSchema(this.props.id);\n      toast.info(\n        <Toast\n          info\n          title={this.props.intl.formatMessage(messages.info)}\n          content={this.props.intl.formatMessage(messages.changesSaved)}\n        />,\n      );\n    }\n\n    // Schema update error\n    if (\n      this.props.schemaRequest.put.loading &&\n      nextProps.schemaRequest.put.error\n    ) {\n      toast.error(\n        <Toast\n          error\n          title={this.props.intl.formatMessage(messages.error)}\n          content={JSON.stringify(\n            nextProps.schemaRequest.put.error.response.body ||\n              nextProps.schemaRequest.put.error.response.text,\n          )}\n        />,\n      );\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    this.props.putSchema(this.props.id, data.schema);\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    let url = getParentUrl(this.props.pathname);\n    this.props.history.push(getParentUrl(url));\n  }\n\n  form = React.createRef();\n\n  makeSchemaList = (schema) => {\n    const result = {\n      title: 'Schema',\n      type: 'object',\n      fieldsets: [\n        {\n          fields: ['schema'],\n          id: 'default',\n          title: 'Default',\n        },\n      ],\n      properties: {\n        schema: {\n          description: 'Form schema',\n          title: 'Form schema',\n          type: 'schema',\n          id: 'schema',\n        },\n      },\n      required: [],\n      layouts: null,\n    };\n    result.layouts = schema.layouts.slice();\n\n    return result;\n  };\n\n  isEditable = (field) =>\n    !field.behavior || field.behavior.includes('generated');\n\n  makeSchemaData = (schema, contentType) => {\n    const fieldsets = schema.fieldsets.map((fieldset) => {\n      const readOnlyFields = fieldset.fields.filter(\n        (fieldId) =>\n          !this.isEditable(schema.properties[fieldId]) &&\n          fieldId !== 'changeNote',\n      );\n      const userCreatedFields = fieldset.fields.filter((fieldId) =>\n        this.isEditable(schema.properties[fieldId]),\n      );\n      const changeNote = fieldset.fields.filter(\n        (fieldId) => fieldId === 'changeNote',\n      );\n      return {\n        ...fieldset,\n        fields: [...readOnlyFields, ...userCreatedFields, ...changeNote],\n      };\n    });\n    const result = {\n      ...schema,\n      fieldsets,\n      contentType,\n    };\n\n    return { schema: JSON.stringify(result) };\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    // Error\n    if (this.state.error) {\n      return <Error error={this.state.error} />;\n    }\n\n    if (this.state.schema) {\n      const contentTypeSchema = this.makeSchemaList(this.state.schema);\n      const schemaData = this.makeSchemaData(this.state.schema, this.props.id);\n\n      return (\n        <div id=\"page-controlpanel-schema\" className=\"ui container\">\n          <Header disabled>\n            {this.props.intl.formatMessage(messages.title, {\n              id: this.props?.schema?.title || this.props.id,\n            })}\n          </Header>\n          <Form\n            ref={this.form}\n            schema={contentTypeSchema}\n            formData={schemaData}\n            pathname={this.props.pathname}\n            onSubmit={this.onSubmit}\n            onCancel={this.onCancel}\n            hideActions\n          />\n          {this.state.isClient && (\n            <Portal node={document.getElementById('toolbar')}>\n              <Toolbar\n                pathname={this.props.pathname}\n                hideDefaultViewButtons\n                inner={\n                  <>\n                    <Button\n                      id=\"toolbar-save\"\n                      className=\"save\"\n                      aria-label={this.props.intl.formatMessage(messages.save)}\n                      onClick={() => this.form.current.onSubmit()}\n                      disabled={this.props.schemaRequest.put.loading}\n                      loading={this.props.schemaRequest.put.loading}\n                    >\n                      <Icon\n                        name={saveSVG}\n                        className=\"circled\"\n                        size=\"30px\"\n                        title={this.props.intl.formatMessage(messages.save)}\n                      />\n                    </Button>\n                    <Button\n                      className=\"cancel\"\n                      aria-label={this.props.intl.formatMessage(\n                        messages.cancel,\n                      )}\n                      onClick={() => this.onCancel()}\n                    >\n                      <Icon\n                        name={clearSVG}\n                        className=\"circled\"\n                        size=\"30px\"\n                        title={this.props.intl.formatMessage(messages.cancel)}\n                      />\n                    </Button>\n                  </>\n                }\n              />\n            </Portal>\n          )}\n        </div>\n      );\n    }\n\n    return <div />;\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      schema: state.schema.schema,\n      schemaRequest: state.schema,\n      pathname: props.location.pathname,\n      id: nth(props.location.pathname.split('/'), -2),\n    }),\n    {\n      getSchema,\n      putSchema,\n    },\n  ),\n)(ContentTypeSchema);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"{id} Schema","defaultMessage":"{id} Schema"},{"id":"Success","defaultMessage":"Success"},{"id":"Save","defaultMessage":"Save"},{"id":"Cancel","defaultMessage":"Cancel"},{"id":"Error","defaultMessage":"Error"},{"id":"Schema updates","defaultMessage":"Schema updates"},{"id":"Info","defaultMessage":"Info"},{"id":"Changes saved.","defaultMessage":"Changes saved."}]}},"sourceType":"module","externalDependencies":[]}