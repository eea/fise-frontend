{"ast":null,"code":"import _map from \"lodash/map\";\nimport _isEmpty from \"lodash/isEmpty\";\nimport _find from \"lodash/find\";\nimport _filter from \"lodash/filter\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Toolbar/Types.jsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { FormattedMessage } from 'react-intl';\nimport { flattenToAppURL, langmap } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\nconst Types = ({\n  types,\n  pathname,\n  content,\n  currentLanguage\n}) => {\n  const {\n    settings\n  } = config;\n  return types.length > 0 || settings.isMultilingual && content['@components'].translations ? __jsx(\"div\", {\n    className: \"menu-more pastanaga-menu\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 5\n    }\n  }, types.length > 0 && __jsx(React.Fragment, null, __jsx(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 11\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"Add Content\",\n    defaultMessage: \"Add Content\\u2026\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }\n  })), __jsx(\"div\", {\n    className: \"pastanaga-menu-list\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 11\n    }\n  }, __jsx(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 13\n    }\n  }, _map(_filter(types), item => {\n    // Strip the type for the item we want to add\n    const contentTypeToAdd = item['@id'].split('@types/')[1];\n    // If we are in the root or in /contents, we need to strip the preceeding / and /contents\n    const currentPath = pathname.replace(/\\/contents$/, '').replace(/\\/$/, '');\n    // Finally build the route URL\n    const addContentTypeRoute = `${currentPath}/add?type=${contentTypeToAdd}`;\n    return __jsx(\"li\", {\n      key: item['@id'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 19\n      }\n    }, __jsx(Link, {\n      to: addContentTypeRoute,\n      id: `toolbar-add-${item['@id'].split('@types/')[1].toLowerCase().replace(' ', '-')}`,\n      className: \"item\",\n      key: item.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 21\n      }\n    }, __jsx(FormattedMessage, {\n      id: item.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 23\n      }\n    })));\n  })))), settings.isMultilingual && content['@components'].translations && (() => {\n    const translationsLeft = _filter(settings.supportedLanguages, lang => !Boolean(content['@components'].translations && _find(content['@components'].translations.items, {\n      language: lang\n    })) && currentLanguage !== lang);\n    return !_isEmpty(translationsLeft) && __jsx(React.Fragment, null, __jsx(\"header\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Add Translation\\u2026\",\n      defaultMessage: \"Add Translation\\u2026\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 19\n      }\n    })), __jsx(\"div\", {\n      className: \"pastanaga-menu-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }\n    }, __jsx(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 19\n      }\n    }, _map(translationsLeft, lang => __jsx(\"li\", {\n      key: lang,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 23\n      }\n    }, __jsx(Link, {\n      to: {\n        pathname: `${pathname}/create-translation`,\n        state: {\n          type: content['@type'],\n          translationOf: flattenToAppURL(content['@id']),\n          language: lang\n        }\n      },\n      className: \"item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 25\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Translate to {lang}\",\n      defaultMessage: \"Translate to {lang}\",\n      values: {\n        lang: langmap[lang].nativeName.toLowerCase()\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 27\n      }\n    })))))));\n  })()) : __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }\n  });\n};\nTypes.propTypes = {\n  pathname: PropTypes.string.isRequired,\n  types: PropTypes.arrayOf(PropTypes.shape({\n    '@id': PropTypes.string,\n    addable: PropTypes.bool,\n    title: PropTypes.string\n  })).isRequired\n};\nexport default connect(state => ({\n  types: _filter(state.types.types, 'addable'),\n  currentLanguage: state.intl.locale\n}), {})(Types);","map":{"version":3,"names":["React","PropTypes","connect","Link","FormattedMessage","flattenToAppURL","langmap","config","Types","types","pathname","content","currentLanguage","settings","length","isMultilingual","translations","item","contentTypeToAdd","split","currentPath","replace","addContentTypeRoute","toLowerCase","title","translationsLeft","supportedLanguages","lang","Boolean","items","language","state","type","translationOf","nativeName","propTypes","string","isRequired","arrayOf","shape","addable","bool","intl","locale"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Toolbar/Types.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { filter, find, isEmpty, map } from 'lodash';\nimport { FormattedMessage } from 'react-intl';\nimport { flattenToAppURL, langmap } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\n\nconst Types = ({ types, pathname, content, currentLanguage }) => {\n  const { settings } = config;\n  return types.length > 0 ||\n    (settings.isMultilingual && content['@components'].translations) ? (\n    <div className=\"menu-more pastanaga-menu\">\n      {types.length > 0 && (\n        <>\n          <header>\n            <FormattedMessage id=\"Add Content\" defaultMessage=\"Add Content…\" />\n          </header>\n          <div className=\"pastanaga-menu-list\">\n            <ul>\n              {map(filter(types), (item) => {\n                // Strip the type for the item we want to add\n                const contentTypeToAdd = item['@id'].split('@types/')[1];\n                // If we are in the root or in /contents, we need to strip the preceeding / and /contents\n                const currentPath = pathname\n                  .replace(/\\/contents$/, '')\n                  .replace(/\\/$/, '');\n                // Finally build the route URL\n                const addContentTypeRoute = `${currentPath}/add?type=${contentTypeToAdd}`;\n                return (\n                  <li key={item['@id']}>\n                    <Link\n                      to={addContentTypeRoute}\n                      id={`toolbar-add-${item['@id']\n                        .split('@types/')[1]\n                        .toLowerCase()\n                        .replace(' ', '-')}`}\n                      className=\"item\"\n                      key={item.title}\n                    >\n                      <FormattedMessage id={item.title} />\n                    </Link>\n                  </li>\n                );\n              })}\n            </ul>\n          </div>\n        </>\n      )}\n      {settings.isMultilingual &&\n        content['@components'].translations &&\n        (() => {\n          const translationsLeft = filter(\n            settings.supportedLanguages,\n            (lang) =>\n              !Boolean(\n                content['@components'].translations &&\n                  find(content['@components'].translations.items, {\n                    language: lang,\n                  }),\n              ) && currentLanguage !== lang,\n          );\n\n          return (\n            !isEmpty(translationsLeft) && (\n              <>\n                <header>\n                  <FormattedMessage\n                    id=\"Add Translation…\"\n                    defaultMessage=\"Add Translation…\"\n                  />\n                </header>\n                <div className=\"pastanaga-menu-list\">\n                  <ul>\n                    {map(translationsLeft, (lang) => (\n                      <li key={lang}>\n                        <Link\n                          to={{\n                            pathname: `${pathname}/create-translation`,\n                            state: {\n                              type: content['@type'],\n                              translationOf: flattenToAppURL(content['@id']),\n                              language: lang,\n                            },\n                          }}\n                          className=\"item\"\n                        >\n                          <FormattedMessage\n                            id=\"Translate to {lang}\"\n                            defaultMessage=\"Translate to {lang}\"\n                            values={{\n                              lang: langmap[lang].nativeName.toLowerCase(),\n                            }}\n                          />\n                        </Link>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              </>\n            )\n          );\n        })()}\n    </div>\n  ) : (\n    <span />\n  );\n};\n\nTypes.propTypes = {\n  pathname: PropTypes.string.isRequired,\n  types: PropTypes.arrayOf(\n    PropTypes.shape({\n      '@id': PropTypes.string,\n      addable: PropTypes.bool,\n      title: PropTypes.string,\n    }),\n  ).isRequired,\n};\n\nexport default connect(\n  (state) => ({\n    types: filter(state.types.types, 'addable'),\n    currentLanguage: state.intl.locale,\n  }),\n  {},\n)(Types);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Add Content","defaultMessage":"Add Content…"},{"id":"Add Translation…","defaultMessage":"Add Translation…"},{"id":"Translate to {lang}","defaultMessage":"Translate to {lang}"}]}},"sourceType":"module","externalDependencies":[]}