{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n/**\n * Clipboard reducer.\n * @module reducers/clipboard/clipboard\n */\n\nimport { COPY, CUT, COPY_CONTENT, MOVE_CONTENT } from '@plone/volto/constants/ActionTypes';\nconst initialState = {\n  action: null,\n  source: null,\n  request: {\n    loaded: false,\n    loading: false,\n    error: null\n  }\n};\n\n/**\n * Clipboard reducer.\n * @function clipboard\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function clipboard(state = initialState, action = {}) {\n  switch (action.type) {\n    case COPY:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        action: 'copy',\n        source: action.source\n      });\n    case CUT:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        action: 'cut',\n        source: action.source\n      });\n    case `${COPY_CONTENT}_PENDING`:\n    case `${MOVE_CONTENT}_PENDING`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        request: {\n          loading: true,\n          loaded: false,\n          error: null\n        }\n      });\n    case `${COPY_CONTENT}_SUCCESS`:\n    case `${MOVE_CONTENT}_SUCCESS`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        request: {\n          loading: false,\n          loaded: true,\n          error: null\n        }\n      });\n    case `${COPY_CONTENT}_FAIL`:\n    case `${MOVE_CONTENT}_FAIL`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        request: {\n          loading: false,\n          loaded: false,\n          error: action.error\n        }\n      });\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["COPY","CUT","COPY_CONTENT","MOVE_CONTENT","initialState","action","source","request","loaded","loading","error","clipboard","state","type"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/reducers/clipboard/clipboard.js"],"sourcesContent":["/**\n * Clipboard reducer.\n * @module reducers/clipboard/clipboard\n */\n\nimport {\n  COPY,\n  CUT,\n  COPY_CONTENT,\n  MOVE_CONTENT,\n} from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {\n  action: null,\n  source: null,\n  request: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n};\n\n/**\n * Clipboard reducer.\n * @function clipboard\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function clipboard(state = initialState, action = {}) {\n  switch (action.type) {\n    case COPY:\n      return {\n        ...state,\n        action: 'copy',\n        source: action.source,\n      };\n    case CUT:\n      return {\n        ...state,\n        action: 'cut',\n        source: action.source,\n      };\n    case `${COPY_CONTENT}_PENDING`:\n    case `${MOVE_CONTENT}_PENDING`:\n      return {\n        ...state,\n        request: {\n          loading: true,\n          loaded: false,\n          error: null,\n        },\n      };\n    case `${COPY_CONTENT}_SUCCESS`:\n    case `${MOVE_CONTENT}_SUCCESS`:\n      return {\n        ...state,\n        request: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${COPY_CONTENT}_FAIL`:\n    case `${MOVE_CONTENT}_FAIL`:\n      return {\n        ...state,\n        request: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    default:\n      return state;\n  }\n}\n"],"mappings":";;;AAAA;AACA;AACA;AACA;;AAEA,SACEA,IAAI,EACJC,GAAG,EACHC,YAAY,EACZC,YAAY,QACP,oCAAoC;AAE3C,MAAMC,YAAY,GAAG;EACnBC,MAAM,EAAE,IAAI;EACZC,MAAM,EAAE,IAAI;EACZC,OAAO,EAAE;IACPC,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE,KAAK;IACdC,KAAK,EAAE;EACT;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,SAAS,CAACC,KAAK,GAAGR,YAAY,EAAEC,MAAM,GAAG,CAAC,CAAC,EAAE;EACnE,QAAQA,MAAM,CAACQ,IAAI;IACjB,KAAKb,IAAI;MACP,uCACKY,KAAK;QACRP,MAAM,EAAE,MAAM;QACdC,MAAM,EAAED,MAAM,CAACC;MAAM;IAEzB,KAAKL,GAAG;MACN,uCACKW,KAAK;QACRP,MAAM,EAAE,KAAK;QACbC,MAAM,EAAED,MAAM,CAACC;MAAM;IAEzB,KAAM,GAAEJ,YAAa,UAAS;IAC9B,KAAM,GAAEC,YAAa,UAAS;MAC5B,uCACKS,KAAK;QACRL,OAAO,EAAE;UACPE,OAAO,EAAE,IAAI;UACbD,MAAM,EAAE,KAAK;UACbE,KAAK,EAAE;QACT;MAAC;IAEL,KAAM,GAAER,YAAa,UAAS;IAC9B,KAAM,GAAEC,YAAa,UAAS;MAC5B,uCACKS,KAAK;QACRL,OAAO,EAAE;UACPE,OAAO,EAAE,KAAK;UACdD,MAAM,EAAE,IAAI;UACZE,KAAK,EAAE;QACT;MAAC;IAEL,KAAM,GAAER,YAAa,OAAM;IAC3B,KAAM,GAAEC,YAAa,OAAM;MACzB,uCACKS,KAAK;QACRL,OAAO,EAAE;UACPE,OAAO,EAAE,KAAK;UACdD,MAAM,EAAE,KAAK;UACbE,KAAK,EAAEL,MAAM,CAACK;QAChB;MAAC;IAEL;MACE,OAAOE,KAAK;EAAC;AAEnB"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}