{"ast":null,"code":"import _cloneDeep from \"lodash/cloneDeep\";\nimport _without from \"lodash/without\";\nimport _pickBy from \"lodash/pickBy\";\nimport _mapValues from \"lodash/mapValues\";\nimport _map from \"lodash/map\";\nimport _keys from \"lodash/keys\";\nimport _isEmpty from \"lodash/isEmpty\";\nimport _findIndex from \"lodash/findIndex\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Form/Form.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n/**\n * Form component.\n * @module components/manage/Form/Form\n */\n\nimport { BlocksForm, Field, Icon, Toast } from '@plone/volto/components';\nimport { difference, FormValidation, getBlocksFieldname, getBlocksLayoutFieldname, messages } from '@plone/volto/helpers';\nimport aheadSVG from '@plone/volto/icons/ahead.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport isBoolean from 'lodash/isBoolean';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Portal } from 'react-portal';\nimport { connect } from 'react-redux';\nimport { Button, Container, Form as UiForm, Message, Segment, Tab } from 'semantic-ui-react';\nimport { v4 as uuid } from 'uuid';\nimport { toast } from 'react-toastify';\nimport { BlocksToolbar, UndoToolbar } from '@plone/volto/components';\nimport { setSidebarTab } from '@plone/volto/actions';\nimport { compose } from 'redux';\nimport config from '@plone/volto/registry';\n\n/**\n * Form container class.\n * @class Form\n * @extends Component\n */\nclass Form extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Form\n   */\n  constructor(props) {\n    super(props);\n    _defineProperty(this, \"getOnlyFormModifiedValues\", () => {\n      const fieldsModified = Object.keys(difference(this.state.formData, this.state.initialFormData));\n      return _objectSpread(_objectSpread({}, _pickBy(this.state.formData, (value, key) => fieldsModified.includes(key))), this.state.formData['@static_behaviors'] && {\n        '@static_behaviors': this.state.formData['@static_behaviors']\n      });\n    });\n    _defineProperty(this, \"removeBlocksLayoutFields\", schema => {\n      const newSchema = _objectSpread({}, schema);\n      const layoutFieldsetIndex = _findIndex(newSchema.fieldsets, fieldset => fieldset.id === 'layout');\n      if (layoutFieldsetIndex > -1) {\n        const layoutFields = newSchema.fieldsets[layoutFieldsetIndex].fields;\n        newSchema.fieldsets[layoutFieldsetIndex].fields = layoutFields.filter(field => field !== 'blocks' && field !== 'blocks_layout');\n        if (newSchema.fieldsets[layoutFieldsetIndex].fields.length === 0) {\n          newSchema.fieldsets = [...newSchema.fieldsets.slice(0, layoutFieldsetIndex), ...newSchema.fieldsets.slice(layoutFieldsetIndex + 1)];\n        }\n      }\n      return newSchema;\n    });\n    const ids = {\n      title: uuid(),\n      text: uuid()\n    };\n    let {\n      formData\n    } = props;\n    const blocksFieldname = getBlocksFieldname(formData);\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n    if (!props.isEditForm) {\n      // It's a normal (add form), get defaults from schema\n      formData = _objectSpread(_objectSpread({}, _mapValues(props.schema.properties, 'default')), formData);\n    }\n    // defaults for block editor; should be moved to schema on server side\n    // Adding fallback in case the fields are empty, so we are sure that the edit form\n    // shows at least the default blocks\n    if (formData.hasOwnProperty(blocksFieldname) && formData.hasOwnProperty(blocksLayoutFieldname)) {\n      if (!formData[blocksLayoutFieldname] || _isEmpty(formData[blocksLayoutFieldname].items)) {\n        formData[blocksLayoutFieldname] = {\n          items: [ids.title, ids.text]\n        };\n      }\n      if (!formData[blocksFieldname] || _isEmpty(formData[blocksFieldname])) {\n        formData[blocksFieldname] = {\n          [ids.title]: {\n            '@type': 'title'\n          },\n          [ids.text]: {\n            '@type': config.settings.defaultBlockType\n          }\n        };\n      }\n    }\n    let selectedBlock = null;\n    if (formData.hasOwnProperty(blocksLayoutFieldname) && formData[blocksLayoutFieldname].items.length > 0) {\n      var _config$blocks, _config$blocks$initia;\n      selectedBlock = formData[blocksLayoutFieldname].items[0];\n      if ((_config$blocks = config.blocks) !== null && _config$blocks !== void 0 && (_config$blocks$initia = _config$blocks.initialBlocksFocus) !== null && _config$blocks$initia !== void 0 && _config$blocks$initia[this.props.type]) {\n        //Default selected is not the first block, but the one from config.\n        Object.keys(formData[blocksFieldname]).forEach(b_key => {\n          var _config$blocks2, _config$blocks2$initi;\n          if (formData[blocksFieldname][b_key]['@type'] === ((_config$blocks2 = config.blocks) === null || _config$blocks2 === void 0 ? void 0 : (_config$blocks2$initi = _config$blocks2.initialBlocksFocus) === null || _config$blocks2$initi === void 0 ? void 0 : _config$blocks2$initi[this.props.type])) {\n            selectedBlock = b_key;\n          }\n        });\n      }\n    }\n    this.state = {\n      formData,\n      initialFormData: _cloneDeep(formData),\n      errors: {},\n      selected: selectedBlock,\n      multiSelected: [],\n      isClient: false\n    };\n    this.onChangeField = this.onChangeField.bind(this);\n    this.onSelectBlock = this.onSelectBlock.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.onCancel = this.onCancel.bind(this);\n    this.onTabChange = this.onTabChange.bind(this);\n    this.onBlurField = this.onBlurField.bind(this);\n    this.onClickInput = this.onClickInput.bind(this);\n  }\n\n  /**\n   * On updates caused by props change\n   * if errors from Backend come, these will be shown to their corresponding Fields\n   * also the first Tab to have any errors will be selected\n   * @param {Object} prevProps\n   */\n  async componentDidUpdate(prevProps, prevState) {\n    let {\n      requestError\n    } = this.props;\n    let errors = {};\n    let activeIndex = 0;\n    if (requestError && prevProps.requestError !== requestError) {\n      errors = FormValidation.giveServerErrorsToCorrespondingFields(requestError);\n      activeIndex = FormValidation.showFirstTabWithErrors({\n        errors,\n        schema: this.props.schema\n      });\n      this.setState({\n        errors,\n        activeIndex\n      });\n    }\n    if (this.props.onChangeFormData) {\n      if (\n      // TODO: use fast-deep-equal\n      JSON.stringify(prevState === null || prevState === void 0 ? void 0 : prevState.formData) !== JSON.stringify(this.state.formData)) {\n        this.props.onChangeFormData(this.state.formData);\n      }\n    }\n  }\n\n  /**\n   * Tab selection is done only by setting activeIndex in state\n   */\n  onTabChange(e, {\n    activeIndex\n  }) {\n    this.setState({\n      activeIndex\n    });\n  }\n\n  /**\n   * If user clicks on input, the form will be not considered pristine\n   * this will avoid onBlur effects without interraction with the form\n   * @param {Object} e event\n   */\n  onClickInput(e) {\n    this.setState({\n      isFormPristine: false\n    });\n  }\n\n  /**\n   * Validate fields on blur\n   * @method onBlurField\n   * @param {string} id Id of the field\n   * @param {*} value Value of the field\n   * @returns {undefined}\n   */\n  onBlurField(id, value) {\n    if (!this.state.isFormPristine) {\n      const errors = FormValidation.validateFieldsPerFieldset({\n        schema: this.props.schema,\n        formData: this.state.formData,\n        formatMessage: this.props.intl.formatMessage,\n        touchedField: {\n          [id]: value\n        }\n      });\n      this.setState({\n        errors\n      });\n    }\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.setState({\n      isClient: true\n    });\n  }\n  static getDerivedStateFromProps(props, state) {\n    let newState = _objectSpread({}, state);\n    if (!props.isFormSelected) {\n      newState.selected = null;\n    }\n    return newState;\n  }\n\n  /**\n   * Change field handler\n   * Remove errors for changed field\n   * @method onChangeField\n   * @param {string} id Id of the field\n   * @param {*} value Value of the field\n   * @returns {undefined}\n   */\n  onChangeField(id, value) {\n    this.setState(prevState => {\n      const {\n        errors,\n        formData\n      } = prevState;\n      delete errors[id];\n      return {\n        errors,\n        formData: _objectSpread(_objectSpread({}, formData), {}, {\n          // We need to catch also when the value equals false this fixes #888\n          [id]: value || value !== undefined && isBoolean(value) ? value : null\n        })\n      };\n    });\n  }\n\n  /**\n   * Select block handler\n   * @method onSelectBlock\n   * @param {string} id Id of the field\n   * @param {string} isMultipleSelection true if multiple blocks are selected\n   * @returns {undefined}\n   */\n  onSelectBlock(id, isMultipleSelection, event) {\n    let multiSelected = [];\n    let selected = id;\n    if (isMultipleSelection) {\n      selected = null;\n      const blocksLayoutFieldname = getBlocksLayoutFieldname(this.state.formData);\n      const blocks_layout = this.state.formData[blocksLayoutFieldname].items;\n      if (event.shiftKey) {\n        const anchor = this.state.multiSelected.length > 0 ? blocks_layout.indexOf(this.state.multiSelected[0]) : blocks_layout.indexOf(this.state.selected);\n        const focus = blocks_layout.indexOf(id);\n        if (anchor === focus) {\n          multiSelected = [id];\n        } else if (focus > anchor) {\n          multiSelected = [...blocks_layout.slice(anchor, focus + 1)];\n        } else {\n          multiSelected = [...blocks_layout.slice(focus, anchor + 1)];\n        }\n      }\n      if ((event.ctrlKey || event.metaKey) && !event.shiftKey) {\n        multiSelected = this.state.multiSelected || [];\n        if (!this.state.multiSelected.includes(this.state.selected)) {\n          multiSelected = [...multiSelected, this.state.selected];\n          selected = null;\n        }\n        if (this.state.multiSelected.includes(id)) {\n          selected = null;\n          multiSelected = _without(multiSelected, id);\n        } else {\n          multiSelected = [...multiSelected, id];\n        }\n      }\n    }\n    this.setState({\n      selected,\n      multiSelected\n    });\n    if (this.props.onSelectForm) {\n      if (event) event.nativeEvent.stopImmediatePropagation();\n      this.props.onSelectForm();\n    }\n  }\n\n  /**\n   * Cancel handler\n   * It prevents event from triggering submit, reset form if props.resetAfterSubmit\n   * and calls this.props.onCancel\n   * @method onCancel\n   * @param {Object} event Event object.\n   * @returns {undefined}\n   */\n  onCancel(event) {\n    if (event) {\n      event.preventDefault();\n    }\n    if (this.props.resetOnCancel || this.props.resetAfterSubmit) {\n      this.setState({\n        formData: this.props.formData\n      });\n    }\n    this.props.onCancel(event);\n  }\n\n  /**\n   * Submit handler also validate form and collect errors\n   * @method onSubmit\n   * @param {Object} event Event object.\n   * @returns {undefined}\n   */\n  onSubmit(event) {\n    if (event) {\n      event.preventDefault();\n    }\n    const errors = this.props.schema ? FormValidation.validateFieldsPerFieldset({\n      schema: this.props.schema,\n      formData: this.state.formData,\n      formatMessage: this.props.intl.formatMessage\n    }) : {};\n    if (_keys(errors).length > 0) {\n      const activeIndex = FormValidation.showFirstTabWithErrors({\n        errors,\n        schema: this.props.schema\n      });\n      this.setState({\n        errors,\n        activeIndex\n      }, () => {\n        Object.keys(errors).forEach(err => toast.error(__jsx(Toast, {\n          error: true,\n          title: err,\n          content: errors[err].join(', '),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 444,\n            columnNumber: 15\n          }\n        })));\n      });\n      // Changes the focus to the metadata tab in the sidebar if error\n      this.props.setSidebarTab(0);\n    } else {\n      // Get only the values that have been modified (Edit forms), send all in case that\n      // it's an add form\n      if (this.props.isEditForm) {\n        this.props.onSubmit(this.getOnlyFormModifiedValues());\n      } else {\n        this.props.onSubmit(this.state.formData);\n      }\n      if (this.props.resetAfterSubmit) {\n        this.setState({\n          formData: this.props.formData\n        });\n      }\n    }\n  }\n\n  /**\n   * getOnlyFormModifiedValues handler\n   * It returns only the values of the fields that are have really changed since the\n   * form was loaded. Useful for edit forms and PATCH operations, when we only want to\n   * send the changed data.\n   * @method getOnlyFormModifiedValues\n   * @param {Object} event Event object.\n   * @returns {undefined}\n   */\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const {\n      settings\n    } = config;\n    const {\n      schema: originalSchema,\n      onCancel,\n      onSubmit\n    } = this.props;\n    const {\n      formData\n    } = this.state;\n    const schema = this.removeBlocksLayoutFields(originalSchema);\n    return this.props.visual ?\n    // Removing this from SSR is important, since react-beautiful-dnd supports SSR,\n    // but draftJS don't like it much and the hydration gets messed up\n    this.state.isClient && __jsx(\"div\", {\n      className: \"ui container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 9\n      }\n    }, __jsx(BlocksToolbar, {\n      formData: this.state.formData,\n      selectedBlock: this.state.selected,\n      selectedBlocks: this.state.multiSelected,\n      onChangeBlocks: newBlockData => this.setState({\n        formData: _objectSpread(_objectSpread({}, formData), newBlockData)\n      }),\n      onSetSelectedBlocks: blockIds => this.setState({\n        multiSelected: blockIds\n      }),\n      onSelectBlock: this.onSelectBlock,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 11\n      }\n    }), __jsx(UndoToolbar, {\n      state: {\n        formData: this.state.formData,\n        selected: this.state.selected,\n        multiSelected: this.state.multiSelected\n      },\n      enableHotKeys: true,\n      onUndoRedo: ({\n        state\n      }) => this.setState(state),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 11\n      }\n    }), __jsx(BlocksForm, {\n      onChangeFormData: newFormData => this.setState({\n        formData: _objectSpread(_objectSpread({}, formData), newFormData)\n      }),\n      onChangeField: this.onChangeField,\n      onSelectBlock: this.onSelectBlock,\n      properties: formData,\n      pathname: this.props.pathname,\n      selectedBlock: this.state.selected,\n      multiSelected: this.state.multiSelected,\n      manage: this.props.isAdminForm,\n      allowedBlocks: this.props.allowedBlocks,\n      showRestricted: this.props.showRestricted,\n      editable: this.props.editable,\n      isMainForm: this.props.editable,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 11\n      }\n    }), this.state.isClient && this.props.editable && __jsx(Portal, {\n      node: __CLIENT__ && document.getElementById('sidebar-metadata'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 581,\n        columnNumber: 13\n      }\n    }, __jsx(UiForm, {\n      method: \"post\",\n      onSubmit: this.onSubmit,\n      error: _keys(this.state.errors).length > 0,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 584,\n        columnNumber: 15\n      }\n    }, schema && _map(schema.fieldsets, item => [__jsx(Segment, {\n      secondary: true,\n      attached: true,\n      className: `fieldset-${item.id}`,\n      key: item.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 591,\n        columnNumber: 21\n      }\n    }, item.title), __jsx(Segment, {\n      attached: true,\n      key: `fieldset-contents-${item.title}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 599,\n        columnNumber: 21\n      }\n    }, _map(item.fields, (field, index) => {\n      var _this$state$formData;\n      return __jsx(Field, _extends({}, schema.properties[field], {\n        id: field,\n        fieldSet: item.title.toLowerCase(),\n        formData: this.state.formData,\n        focus: false,\n        value: (_this$state$formData = this.state.formData) === null || _this$state$formData === void 0 ? void 0 : _this$state$formData[field],\n        required: schema.required.indexOf(field) !== -1,\n        onChange: this.onChangeField,\n        onBlur: this.onBlurField,\n        onClick: this.onClickInput,\n        key: field,\n        error: this.state.errors[field],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 601,\n          columnNumber: 25\n        }\n      }));\n    }))])))) : __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 624,\n        columnNumber: 7\n      }\n    }, __jsx(UiForm, {\n      method: \"post\",\n      onSubmit: this.onSubmit,\n      error: _keys(this.state.errors).length > 0,\n      className: settings.verticalFormTabs ? 'vertical-form' : '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625,\n        columnNumber: 9\n      }\n    }, __jsx(\"fieldset\", {\n      className: \"invisible\",\n      disabled: !this.props.editable,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 631,\n        columnNumber: 11\n      }\n    }, __jsx(Segment.Group, {\n      raised: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 632,\n        columnNumber: 13\n      }\n    }, schema && schema.fieldsets.length > 1 && __jsx(React.Fragment, null, settings.verticalFormTabs && this.props.title && __jsx(Segment, {\n      secondary: true,\n      attached: true,\n      key: this.props.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 636,\n        columnNumber: 21\n      }\n    }, this.props.title), __jsx(Tab, {\n      menu: {\n        secondary: true,\n        pointing: true,\n        attached: true,\n        tabular: true,\n        className: 'formtabs',\n        vertical: settings.verticalFormTabs\n      },\n      grid: {\n        paneWidth: 9,\n        tabWidth: 3,\n        stackable: true\n      },\n      onTabChange: this.onTabChange,\n      activeIndex: this.state.activeIndex,\n      panes: _map(schema.fieldsets, item => ({\n        menuItem: item.title,\n        render: () => [!settings.verticalFormTabs && this.props.title && __jsx(Segment, {\n          secondary: true,\n          attached: true,\n          key: this.props.title,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 656,\n            columnNumber: 27\n          }\n        }, this.props.title), item.description && __jsx(Message, {\n          attached: \"bottom\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 661,\n            columnNumber: 27\n          }\n        }, item.description), ..._map(item.fields, (field, index) => {\n          var _this$state$formData2;\n          return __jsx(Field, _extends({}, schema.properties[field], {\n            id: field,\n            formData: this.state.formData,\n            fieldSet: item.title.toLowerCase(),\n            focus: index === 0,\n            value: (_this$state$formData2 = this.state.formData) === null || _this$state$formData2 === void 0 ? void 0 : _this$state$formData2[field],\n            required: schema.required.indexOf(field) !== -1,\n            onChange: this.onChangeField,\n            onBlur: this.onBlurField,\n            onClick: this.onClickInput,\n            key: field,\n            error: this.state.errors[field],\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 666,\n              columnNumber: 27\n            }\n          }));\n        })]\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 640,\n        columnNumber: 19\n      }\n    })), schema && schema.fieldsets.length === 1 && __jsx(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 687,\n        columnNumber: 17\n      }\n    }, this.props.title && __jsx(Segment, {\n      className: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 689,\n        columnNumber: 21\n      }\n    }, __jsx(\"h1\", {\n      style: {\n        fontSize: '16px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 690,\n        columnNumber: 23\n      }\n    }, \" \", this.props.title)), this.props.description && __jsx(Segment, {\n      secondary: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 694,\n        columnNumber: 21\n      }\n    }, this.props.description), _keys(this.state.errors).length > 0 && __jsx(Message, {\n      icon: \"warning\",\n      negative: true,\n      attached: true,\n      header: this.props.intl.formatMessage(messages.error),\n      content: this.props.intl.formatMessage(messages.thereWereSomeErrors),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 697,\n        columnNumber: 21\n      }\n    }), this.props.error && __jsx(Message, {\n      icon: \"warning\",\n      negative: true,\n      attached: true,\n      header: this.props.intl.formatMessage(messages.error),\n      content: this.props.error.message,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 708,\n        columnNumber: 21\n      }\n    }), _map(schema.fieldsets[0].fields, field => {\n      var _this$state$formData3;\n      return __jsx(Field, _extends({}, schema.properties[field], {\n        id: field,\n        value: (_this$state$formData3 = this.state.formData) === null || _this$state$formData3 === void 0 ? void 0 : _this$state$formData3[field],\n        required: schema.required.indexOf(field) !== -1,\n        onChange: this.onChangeField,\n        onBlur: this.onBlurField,\n        onClick: this.onClickInput,\n        key: field,\n        error: this.state.errors[field],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 717,\n          columnNumber: 21\n        }\n      }));\n    })), !this.props.hideActions && __jsx(Segment, {\n      className: \"actions\",\n      clearing: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 732,\n        columnNumber: 17\n      }\n    }, onSubmit && __jsx(Button, {\n      basic: true,\n      primary: true,\n      floated: \"right\",\n      type: \"submit\",\n      \"aria-label\": this.props.submitLabel ? this.props.submitLabel : this.props.intl.formatMessage(messages.save),\n      title: this.props.submitLabel ? this.props.submitLabel : this.props.intl.formatMessage(messages.save),\n      loading: this.props.loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 734,\n        columnNumber: 21\n      }\n    }, __jsx(Icon, {\n      className: \"circled\",\n      name: aheadSVG,\n      size: \"30px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 751,\n        columnNumber: 23\n      }\n    })), onCancel && __jsx(Button, {\n      basic: true,\n      secondary: true,\n      \"aria-label\": this.props.intl.formatMessage(messages.cancel),\n      title: this.props.intl.formatMessage(messages.cancel),\n      floated: \"right\",\n      onClick: this.onCancel,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 755,\n        columnNumber: 21\n      }\n    }, __jsx(Icon, {\n      className: \"circled\",\n      name: clearSVG,\n      size: \"30px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 765,\n        columnNumber: 23\n      }\n    })))))));\n  }\n}\n_defineProperty(Form, \"propTypes\", {\n  schema: PropTypes.shape({\n    fieldsets: PropTypes.arrayOf(PropTypes.shape({\n      fields: PropTypes.arrayOf(PropTypes.string),\n      id: PropTypes.string,\n      title: PropTypes.string\n    })),\n    properties: PropTypes.objectOf(PropTypes.any),\n    definitions: PropTypes.objectOf(PropTypes.any),\n    required: PropTypes.arrayOf(PropTypes.string)\n  }),\n  formData: PropTypes.objectOf(PropTypes.any),\n  pathname: PropTypes.string,\n  onSubmit: PropTypes.func,\n  onCancel: PropTypes.func,\n  submitLabel: PropTypes.string,\n  resetAfterSubmit: PropTypes.bool,\n  resetOnCancel: PropTypes.bool,\n  isEditForm: PropTypes.bool,\n  isAdminForm: PropTypes.bool,\n  title: PropTypes.string,\n  error: PropTypes.shape({\n    message: PropTypes.string\n  }),\n  loading: PropTypes.bool,\n  hideActions: PropTypes.bool,\n  description: PropTypes.string,\n  visual: PropTypes.bool,\n  blocks: PropTypes.arrayOf(PropTypes.object),\n  isFormSelected: PropTypes.bool,\n  onSelectForm: PropTypes.func,\n  editable: PropTypes.bool,\n  onChangeFormData: PropTypes.func,\n  requestError: PropTypes.string,\n  allowedBlocks: PropTypes.arrayOf(PropTypes.string),\n  showRestricted: PropTypes.bool\n});\n_defineProperty(Form, \"defaultProps\", {\n  formData: null,\n  onSubmit: null,\n  onCancel: null,\n  submitLabel: null,\n  resetAfterSubmit: false,\n  resetOnCancel: false,\n  isEditForm: false,\n  isAdminForm: false,\n  title: null,\n  description: null,\n  error: null,\n  loading: null,\n  hideActions: false,\n  visual: false,\n  blocks: [],\n  pathname: '',\n  schema: {},\n  isFormSelected: true,\n  onSelectForm: null,\n  editable: true,\n  requestError: null,\n  allowedBlocks: null\n});\nconst FormIntl = injectIntl(Form, {\n  forwardRef: true\n});\nexport default compose(connect(null, {\n  setSidebarTab\n}, null, {\n  forwardRef: true\n}))(FormIntl);","map":{"version":3,"names":["BlocksForm","Field","Icon","Toast","difference","FormValidation","getBlocksFieldname","getBlocksLayoutFieldname","messages","aheadSVG","clearSVG","isBoolean","PropTypes","React","Component","injectIntl","Portal","connect","Button","Container","Form","UiForm","Message","Segment","Tab","v4","uuid","toast","BlocksToolbar","UndoToolbar","setSidebarTab","compose","config","constructor","props","fieldsModified","Object","keys","state","formData","initialFormData","value","key","includes","schema","newSchema","layoutFieldsetIndex","fieldsets","fieldset","id","layoutFields","fields","filter","field","length","slice","ids","title","text","blocksFieldname","blocksLayoutFieldname","isEditForm","properties","hasOwnProperty","items","settings","defaultBlockType","selectedBlock","blocks","initialBlocksFocus","type","forEach","b_key","errors","selected","multiSelected","isClient","onChangeField","bind","onSelectBlock","onSubmit","onCancel","onTabChange","onBlurField","onClickInput","componentDidUpdate","prevProps","prevState","requestError","activeIndex","giveServerErrorsToCorrespondingFields","showFirstTabWithErrors","setState","onChangeFormData","JSON","stringify","e","isFormPristine","validateFieldsPerFieldset","formatMessage","intl","touchedField","componentDidMount","getDerivedStateFromProps","newState","isFormSelected","undefined","isMultipleSelection","event","blocks_layout","shiftKey","anchor","indexOf","focus","ctrlKey","metaKey","onSelectForm","nativeEvent","stopImmediatePropagation","preventDefault","resetOnCancel","resetAfterSubmit","err","error","join","getOnlyFormModifiedValues","render","originalSchema","removeBlocksLayoutFields","visual","newBlockData","blockIds","newFormData","pathname","isAdminForm","allowedBlocks","showRestricted","editable","__CLIENT__","document","getElementById","item","index","toLowerCase","required","verticalFormTabs","secondary","pointing","attached","tabular","className","vertical","paneWidth","tabWidth","stackable","menuItem","description","fontSize","thereWereSomeErrors","message","hideActions","submitLabel","save","loading","cancel","shape","arrayOf","string","objectOf","any","definitions","func","bool","object","FormIntl","forwardRef"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Form/Form.jsx"],"sourcesContent":["/**\n * Form component.\n * @module components/manage/Form/Form\n */\n\nimport { BlocksForm, Field, Icon, Toast } from '@plone/volto/components';\nimport {\n  difference,\n  FormValidation,\n  getBlocksFieldname,\n  getBlocksLayoutFieldname,\n  messages,\n} from '@plone/volto/helpers';\nimport aheadSVG from '@plone/volto/icons/ahead.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport {\n  findIndex,\n  isEmpty,\n  keys,\n  map,\n  mapValues,\n  pickBy,\n  without,\n  cloneDeep,\n} from 'lodash';\nimport isBoolean from 'lodash/isBoolean';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Portal } from 'react-portal';\nimport { connect } from 'react-redux';\nimport {\n  Button,\n  Container,\n  Form as UiForm,\n  Message,\n  Segment,\n  Tab,\n} from 'semantic-ui-react';\nimport { v4 as uuid } from 'uuid';\nimport { toast } from 'react-toastify';\nimport { BlocksToolbar, UndoToolbar } from '@plone/volto/components';\nimport { setSidebarTab } from '@plone/volto/actions';\nimport { compose } from 'redux';\nimport config from '@plone/volto/registry';\n\n/**\n * Form container class.\n * @class Form\n * @extends Component\n */\nclass Form extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    schema: PropTypes.shape({\n      fieldsets: PropTypes.arrayOf(\n        PropTypes.shape({\n          fields: PropTypes.arrayOf(PropTypes.string),\n          id: PropTypes.string,\n          title: PropTypes.string,\n        }),\n      ),\n      properties: PropTypes.objectOf(PropTypes.any),\n      definitions: PropTypes.objectOf(PropTypes.any),\n      required: PropTypes.arrayOf(PropTypes.string),\n    }),\n    formData: PropTypes.objectOf(PropTypes.any),\n    pathname: PropTypes.string,\n    onSubmit: PropTypes.func,\n    onCancel: PropTypes.func,\n    submitLabel: PropTypes.string,\n    resetAfterSubmit: PropTypes.bool,\n    resetOnCancel: PropTypes.bool,\n    isEditForm: PropTypes.bool,\n    isAdminForm: PropTypes.bool,\n    title: PropTypes.string,\n    error: PropTypes.shape({\n      message: PropTypes.string,\n    }),\n    loading: PropTypes.bool,\n    hideActions: PropTypes.bool,\n    description: PropTypes.string,\n    visual: PropTypes.bool,\n    blocks: PropTypes.arrayOf(PropTypes.object),\n    isFormSelected: PropTypes.bool,\n    onSelectForm: PropTypes.func,\n    editable: PropTypes.bool,\n    onChangeFormData: PropTypes.func,\n    requestError: PropTypes.string,\n    allowedBlocks: PropTypes.arrayOf(PropTypes.string),\n    showRestricted: PropTypes.bool,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    formData: null,\n    onSubmit: null,\n    onCancel: null,\n    submitLabel: null,\n    resetAfterSubmit: false,\n    resetOnCancel: false,\n    isEditForm: false,\n    isAdminForm: false,\n    title: null,\n    description: null,\n    error: null,\n    loading: null,\n    hideActions: false,\n    visual: false,\n    blocks: [],\n    pathname: '',\n    schema: {},\n    isFormSelected: true,\n    onSelectForm: null,\n    editable: true,\n    requestError: null,\n    allowedBlocks: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Form\n   */\n  constructor(props) {\n    super(props);\n    const ids = {\n      title: uuid(),\n      text: uuid(),\n    };\n    let { formData } = props;\n    const blocksFieldname = getBlocksFieldname(formData);\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n\n    if (!props.isEditForm) {\n      // It's a normal (add form), get defaults from schema\n      formData = {\n        ...mapValues(props.schema.properties, 'default'),\n        ...formData,\n      };\n    }\n    // defaults for block editor; should be moved to schema on server side\n    // Adding fallback in case the fields are empty, so we are sure that the edit form\n    // shows at least the default blocks\n    if (\n      formData.hasOwnProperty(blocksFieldname) &&\n      formData.hasOwnProperty(blocksLayoutFieldname)\n    ) {\n      if (\n        !formData[blocksLayoutFieldname] ||\n        isEmpty(formData[blocksLayoutFieldname].items)\n      ) {\n        formData[blocksLayoutFieldname] = {\n          items: [ids.title, ids.text],\n        };\n      }\n      if (!formData[blocksFieldname] || isEmpty(formData[blocksFieldname])) {\n        formData[blocksFieldname] = {\n          [ids.title]: {\n            '@type': 'title',\n          },\n          [ids.text]: {\n            '@type': config.settings.defaultBlockType,\n          },\n        };\n      }\n    }\n\n    let selectedBlock = null;\n    if (\n      formData.hasOwnProperty(blocksLayoutFieldname) &&\n      formData[blocksLayoutFieldname].items.length > 0\n    ) {\n      selectedBlock = formData[blocksLayoutFieldname].items[0];\n\n      if (config.blocks?.initialBlocksFocus?.[this.props.type]) {\n        //Default selected is not the first block, but the one from config.\n        Object.keys(formData[blocksFieldname]).forEach((b_key) => {\n          if (\n            formData[blocksFieldname][b_key]['@type'] ===\n            config.blocks?.initialBlocksFocus?.[this.props.type]\n          ) {\n            selectedBlock = b_key;\n          }\n        });\n      }\n    }\n    this.state = {\n      formData,\n      initialFormData: cloneDeep(formData),\n      errors: {},\n      selected: selectedBlock,\n      multiSelected: [],\n      isClient: false,\n    };\n    this.onChangeField = this.onChangeField.bind(this);\n    this.onSelectBlock = this.onSelectBlock.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.onCancel = this.onCancel.bind(this);\n    this.onTabChange = this.onTabChange.bind(this);\n    this.onBlurField = this.onBlurField.bind(this);\n    this.onClickInput = this.onClickInput.bind(this);\n  }\n\n  /**\n   * On updates caused by props change\n   * if errors from Backend come, these will be shown to their corresponding Fields\n   * also the first Tab to have any errors will be selected\n   * @param {Object} prevProps\n   */\n  async componentDidUpdate(prevProps, prevState) {\n    let { requestError } = this.props;\n    let errors = {};\n    let activeIndex = 0;\n\n    if (requestError && prevProps.requestError !== requestError) {\n      errors = FormValidation.giveServerErrorsToCorrespondingFields(\n        requestError,\n      );\n      activeIndex = FormValidation.showFirstTabWithErrors({\n        errors,\n        schema: this.props.schema,\n      });\n\n      this.setState({\n        errors,\n        activeIndex,\n      });\n    }\n\n    if (this.props.onChangeFormData) {\n      if (\n        // TODO: use fast-deep-equal\n        JSON.stringify(prevState?.formData) !==\n        JSON.stringify(this.state.formData)\n      ) {\n        this.props.onChangeFormData(this.state.formData);\n      }\n    }\n  }\n\n  /**\n   * Tab selection is done only by setting activeIndex in state\n   */\n  onTabChange(e, { activeIndex }) {\n    this.setState({ activeIndex });\n  }\n\n  /**\n   * If user clicks on input, the form will be not considered pristine\n   * this will avoid onBlur effects without interraction with the form\n   * @param {Object} e event\n   */\n  onClickInput(e) {\n    this.setState({ isFormPristine: false });\n  }\n\n  /**\n   * Validate fields on blur\n   * @method onBlurField\n   * @param {string} id Id of the field\n   * @param {*} value Value of the field\n   * @returns {undefined}\n   */\n  onBlurField(id, value) {\n    if (!this.state.isFormPristine) {\n      const errors = FormValidation.validateFieldsPerFieldset({\n        schema: this.props.schema,\n        formData: this.state.formData,\n        formatMessage: this.props.intl.formatMessage,\n        touchedField: { [id]: value },\n      });\n\n      this.setState({\n        errors,\n      });\n    }\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.setState({ isClient: true });\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    let newState = { ...state };\n    if (!props.isFormSelected) {\n      newState.selected = null;\n    }\n\n    return newState;\n  }\n\n  /**\n   * Change field handler\n   * Remove errors for changed field\n   * @method onChangeField\n   * @param {string} id Id of the field\n   * @param {*} value Value of the field\n   * @returns {undefined}\n   */\n  onChangeField(id, value) {\n    this.setState((prevState) => {\n      const { errors, formData } = prevState;\n      delete errors[id];\n      return {\n        errors,\n        formData: {\n          ...formData,\n          // We need to catch also when the value equals false this fixes #888\n          [id]:\n            value || (value !== undefined && isBoolean(value)) ? value : null,\n        },\n      };\n    });\n  }\n\n  /**\n   * Select block handler\n   * @method onSelectBlock\n   * @param {string} id Id of the field\n   * @param {string} isMultipleSelection true if multiple blocks are selected\n   * @returns {undefined}\n   */\n  onSelectBlock(id, isMultipleSelection, event) {\n    let multiSelected = [];\n    let selected = id;\n\n    if (isMultipleSelection) {\n      selected = null;\n      const blocksLayoutFieldname = getBlocksLayoutFieldname(\n        this.state.formData,\n      );\n\n      const blocks_layout = this.state.formData[blocksLayoutFieldname].items;\n\n      if (event.shiftKey) {\n        const anchor =\n          this.state.multiSelected.length > 0\n            ? blocks_layout.indexOf(this.state.multiSelected[0])\n            : blocks_layout.indexOf(this.state.selected);\n        const focus = blocks_layout.indexOf(id);\n\n        if (anchor === focus) {\n          multiSelected = [id];\n        } else if (focus > anchor) {\n          multiSelected = [...blocks_layout.slice(anchor, focus + 1)];\n        } else {\n          multiSelected = [...blocks_layout.slice(focus, anchor + 1)];\n        }\n      }\n\n      if ((event.ctrlKey || event.metaKey) && !event.shiftKey) {\n        multiSelected = this.state.multiSelected || [];\n        if (!this.state.multiSelected.includes(this.state.selected)) {\n          multiSelected = [...multiSelected, this.state.selected];\n          selected = null;\n        }\n        if (this.state.multiSelected.includes(id)) {\n          selected = null;\n          multiSelected = without(multiSelected, id);\n        } else {\n          multiSelected = [...multiSelected, id];\n        }\n      }\n    }\n\n    this.setState({\n      selected,\n      multiSelected,\n    });\n\n    if (this.props.onSelectForm) {\n      if (event) event.nativeEvent.stopImmediatePropagation();\n      this.props.onSelectForm();\n    }\n  }\n\n  /**\n   * Cancel handler\n   * It prevents event from triggering submit, reset form if props.resetAfterSubmit\n   * and calls this.props.onCancel\n   * @method onCancel\n   * @param {Object} event Event object.\n   * @returns {undefined}\n   */\n  onCancel(event) {\n    if (event) {\n      event.preventDefault();\n    }\n    if (this.props.resetOnCancel || this.props.resetAfterSubmit) {\n      this.setState({\n        formData: this.props.formData,\n      });\n    }\n    this.props.onCancel(event);\n  }\n\n  /**\n   * Submit handler also validate form and collect errors\n   * @method onSubmit\n   * @param {Object} event Event object.\n   * @returns {undefined}\n   */\n  onSubmit(event) {\n    if (event) {\n      event.preventDefault();\n    }\n\n    const errors = this.props.schema\n      ? FormValidation.validateFieldsPerFieldset({\n          schema: this.props.schema,\n          formData: this.state.formData,\n          formatMessage: this.props.intl.formatMessage,\n        })\n      : {};\n\n    if (keys(errors).length > 0) {\n      const activeIndex = FormValidation.showFirstTabWithErrors({\n        errors,\n        schema: this.props.schema,\n      });\n      this.setState(\n        {\n          errors,\n          activeIndex,\n        },\n        () => {\n          Object.keys(errors).forEach((err) =>\n            toast.error(\n              <Toast error title={err} content={errors[err].join(', ')} />,\n            ),\n          );\n        },\n      );\n      // Changes the focus to the metadata tab in the sidebar if error\n      this.props.setSidebarTab(0);\n    } else {\n      // Get only the values that have been modified (Edit forms), send all in case that\n      // it's an add form\n      if (this.props.isEditForm) {\n        this.props.onSubmit(this.getOnlyFormModifiedValues());\n      } else {\n        this.props.onSubmit(this.state.formData);\n      }\n      if (this.props.resetAfterSubmit) {\n        this.setState({\n          formData: this.props.formData,\n        });\n      }\n    }\n  }\n\n  /**\n   * getOnlyFormModifiedValues handler\n   * It returns only the values of the fields that are have really changed since the\n   * form was loaded. Useful for edit forms and PATCH operations, when we only want to\n   * send the changed data.\n   * @method getOnlyFormModifiedValues\n   * @param {Object} event Event object.\n   * @returns {undefined}\n   */\n  getOnlyFormModifiedValues = () => {\n    const fieldsModified = Object.keys(\n      difference(this.state.formData, this.state.initialFormData),\n    );\n    return {\n      ...pickBy(this.state.formData, (value, key) =>\n        fieldsModified.includes(key),\n      ),\n      ...(this.state.formData['@static_behaviors'] && {\n        '@static_behaviors': this.state.formData['@static_behaviors'],\n      }),\n    };\n  };\n\n  /**\n   * Removed blocks and blocks_layout fields from the form.\n   * @method removeBlocksLayoutFields\n   * @param {object} schema The schema definition of the form.\n   * @returns A modified copy of the given schema.\n   */\n  removeBlocksLayoutFields = (schema) => {\n    const newSchema = { ...schema };\n    const layoutFieldsetIndex = findIndex(\n      newSchema.fieldsets,\n      (fieldset) => fieldset.id === 'layout',\n    );\n    if (layoutFieldsetIndex > -1) {\n      const layoutFields = newSchema.fieldsets[layoutFieldsetIndex].fields;\n      newSchema.fieldsets[layoutFieldsetIndex].fields = layoutFields.filter(\n        (field) => field !== 'blocks' && field !== 'blocks_layout',\n      );\n      if (newSchema.fieldsets[layoutFieldsetIndex].fields.length === 0) {\n        newSchema.fieldsets = [\n          ...newSchema.fieldsets.slice(0, layoutFieldsetIndex),\n          ...newSchema.fieldsets.slice(layoutFieldsetIndex + 1),\n        ];\n      }\n    }\n    return newSchema;\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { settings } = config;\n    const { schema: originalSchema, onCancel, onSubmit } = this.props;\n    const { formData } = this.state;\n    const schema = this.removeBlocksLayoutFields(originalSchema);\n\n    return this.props.visual ? (\n      // Removing this from SSR is important, since react-beautiful-dnd supports SSR,\n      // but draftJS don't like it much and the hydration gets messed up\n      this.state.isClient && (\n        <div className=\"ui container\">\n          <BlocksToolbar\n            formData={this.state.formData}\n            selectedBlock={this.state.selected}\n            selectedBlocks={this.state.multiSelected}\n            onChangeBlocks={(newBlockData) =>\n              this.setState({\n                formData: {\n                  ...formData,\n                  ...newBlockData,\n                },\n              })\n            }\n            onSetSelectedBlocks={(blockIds) =>\n              this.setState({ multiSelected: blockIds })\n            }\n            onSelectBlock={this.onSelectBlock}\n          />\n          <UndoToolbar\n            state={{\n              formData: this.state.formData,\n              selected: this.state.selected,\n              multiSelected: this.state.multiSelected,\n            }}\n            enableHotKeys\n            onUndoRedo={({ state }) => this.setState(state)}\n          />\n          <BlocksForm\n            onChangeFormData={(newFormData) =>\n              this.setState({\n                formData: {\n                  ...formData,\n                  ...newFormData,\n                },\n              })\n            }\n            onChangeField={this.onChangeField}\n            onSelectBlock={this.onSelectBlock}\n            properties={formData}\n            pathname={this.props.pathname}\n            selectedBlock={this.state.selected}\n            multiSelected={this.state.multiSelected}\n            manage={this.props.isAdminForm}\n            allowedBlocks={this.props.allowedBlocks}\n            showRestricted={this.props.showRestricted}\n            editable={this.props.editable}\n            isMainForm={this.props.editable}\n          />\n          {this.state.isClient && this.props.editable && (\n            <Portal\n              node={__CLIENT__ && document.getElementById('sidebar-metadata')}\n            >\n              <UiForm\n                method=\"post\"\n                onSubmit={this.onSubmit}\n                error={keys(this.state.errors).length > 0}\n              >\n                {schema &&\n                  map(schema.fieldsets, (item) => [\n                    <Segment\n                      secondary\n                      attached\n                      className={`fieldset-${item.id}`}\n                      key={item.title}\n                    >\n                      {item.title}\n                    </Segment>,\n                    <Segment attached key={`fieldset-contents-${item.title}`}>\n                      {map(item.fields, (field, index) => (\n                        <Field\n                          {...schema.properties[field]}\n                          id={field}\n                          fieldSet={item.title.toLowerCase()}\n                          formData={this.state.formData}\n                          focus={false}\n                          value={this.state.formData?.[field]}\n                          required={schema.required.indexOf(field) !== -1}\n                          onChange={this.onChangeField}\n                          onBlur={this.onBlurField}\n                          onClick={this.onClickInput}\n                          key={field}\n                          error={this.state.errors[field]}\n                        />\n                      ))}\n                    </Segment>,\n                  ])}\n              </UiForm>\n            </Portal>\n          )}\n        </div>\n      )\n    ) : (\n      <Container>\n        <UiForm\n          method=\"post\"\n          onSubmit={this.onSubmit}\n          error={keys(this.state.errors).length > 0}\n          className={settings.verticalFormTabs ? 'vertical-form' : ''}\n        >\n          <fieldset className=\"invisible\" disabled={!this.props.editable}>\n            <Segment.Group raised>\n              {schema && schema.fieldsets.length > 1 && (\n                <>\n                  {settings.verticalFormTabs && this.props.title && (\n                    <Segment secondary attached key={this.props.title}>\n                      {this.props.title}\n                    </Segment>\n                  )}\n                  <Tab\n                    menu={{\n                      secondary: true,\n                      pointing: true,\n                      attached: true,\n                      tabular: true,\n                      className: 'formtabs',\n                      vertical: settings.verticalFormTabs,\n                    }}\n                    grid={{ paneWidth: 9, tabWidth: 3, stackable: true }}\n                    onTabChange={this.onTabChange}\n                    activeIndex={this.state.activeIndex}\n                    panes={map(schema.fieldsets, (item) => ({\n                      menuItem: item.title,\n                      render: () => [\n                        !settings.verticalFormTabs && this.props.title && (\n                          <Segment secondary attached key={this.props.title}>\n                            {this.props.title}\n                          </Segment>\n                        ),\n                        item.description && (\n                          <Message attached=\"bottom\">\n                            {item.description}\n                          </Message>\n                        ),\n                        ...map(item.fields, (field, index) => (\n                          <Field\n                            {...schema.properties[field]}\n                            id={field}\n                            formData={this.state.formData}\n                            fieldSet={item.title.toLowerCase()}\n                            focus={index === 0}\n                            value={this.state.formData?.[field]}\n                            required={schema.required.indexOf(field) !== -1}\n                            onChange={this.onChangeField}\n                            onBlur={this.onBlurField}\n                            onClick={this.onClickInput}\n                            key={field}\n                            error={this.state.errors[field]}\n                          />\n                        )),\n                      ],\n                    }))}\n                  />\n                </>\n              )}\n              {schema && schema.fieldsets.length === 1 && (\n                <Segment>\n                  {this.props.title && (\n                    <Segment className=\"primary\">\n                      <h1 style={{ fontSize: '16px' }}> {this.props.title}</h1>\n                    </Segment>\n                  )}\n                  {this.props.description && (\n                    <Segment secondary>{this.props.description}</Segment>\n                  )}\n                  {keys(this.state.errors).length > 0 && (\n                    <Message\n                      icon=\"warning\"\n                      negative\n                      attached\n                      header={this.props.intl.formatMessage(messages.error)}\n                      content={this.props.intl.formatMessage(\n                        messages.thereWereSomeErrors,\n                      )}\n                    />\n                  )}\n                  {this.props.error && (\n                    <Message\n                      icon=\"warning\"\n                      negative\n                      attached\n                      header={this.props.intl.formatMessage(messages.error)}\n                      content={this.props.error.message}\n                    />\n                  )}\n                  {map(schema.fieldsets[0].fields, (field) => (\n                    <Field\n                      {...schema.properties[field]}\n                      id={field}\n                      value={this.state.formData?.[field]}\n                      required={schema.required.indexOf(field) !== -1}\n                      onChange={this.onChangeField}\n                      onBlur={this.onBlurField}\n                      onClick={this.onClickInput}\n                      key={field}\n                      error={this.state.errors[field]}\n                    />\n                  ))}\n                </Segment>\n              )}\n              {!this.props.hideActions && (\n                <Segment className=\"actions\" clearing>\n                  {onSubmit && (\n                    <Button\n                      basic\n                      primary\n                      floated=\"right\"\n                      type=\"submit\"\n                      aria-label={\n                        this.props.submitLabel\n                          ? this.props.submitLabel\n                          : this.props.intl.formatMessage(messages.save)\n                      }\n                      title={\n                        this.props.submitLabel\n                          ? this.props.submitLabel\n                          : this.props.intl.formatMessage(messages.save)\n                      }\n                      loading={this.props.loading}\n                    >\n                      <Icon className=\"circled\" name={aheadSVG} size=\"30px\" />\n                    </Button>\n                  )}\n                  {onCancel && (\n                    <Button\n                      basic\n                      secondary\n                      aria-label={this.props.intl.formatMessage(\n                        messages.cancel,\n                      )}\n                      title={this.props.intl.formatMessage(messages.cancel)}\n                      floated=\"right\"\n                      onClick={this.onCancel}\n                    >\n                      <Icon className=\"circled\" name={clearSVG} size=\"30px\" />\n                    </Button>\n                  )}\n                </Segment>\n              )}\n            </Segment.Group>\n          </fieldset>\n        </UiForm>\n      </Container>\n    );\n  }\n}\n\nconst FormIntl = injectIntl(Form, { forwardRef: true });\n\nexport default compose(\n  connect(null, { setSidebarTab }, null, { forwardRef: true }),\n)(FormIntl);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}