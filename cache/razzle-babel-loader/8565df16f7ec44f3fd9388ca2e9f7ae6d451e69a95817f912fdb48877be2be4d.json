{"ast":null,"code":"export const NONVALUE_OPERATIONS = new Set(['plone.app.querystring.operation.boolean.isFalse', 'plone.app.querystring.operation.boolean.isTrue']);\nexport const DATE_OPERATIONS = new Set(['plone.app.querystring.operation.date.between']);\nexport const hasNonValueOperation = ops => {\n  return ops.filter(x => NONVALUE_OPERATIONS.has(x)).length > 0;\n};\nexport const hasDateOperation = ops => {\n  return ops.filter(x => DATE_OPERATIONS.has(x)).length > 0;\n};","map":{"version":3,"names":["NONVALUE_OPERATIONS","Set","DATE_OPERATIONS","hasNonValueOperation","ops","filter","x","has","length","hasDateOperation"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Blocks/Search/utils.js"],"sourcesContent":["export const NONVALUE_OPERATIONS = new Set([\n  'plone.app.querystring.operation.boolean.isFalse',\n  'plone.app.querystring.operation.boolean.isTrue',\n]);\n\nexport const DATE_OPERATIONS = new Set([\n  'plone.app.querystring.operation.date.between',\n]);\n\nexport const hasNonValueOperation = (ops) => {\n  return ops.filter((x) => NONVALUE_OPERATIONS.has(x)).length > 0;\n};\n\nexport const hasDateOperation = (ops) => {\n  return ops.filter((x) => DATE_OPERATIONS.has(x)).length > 0;\n};\n"],"mappings":"AAAA,OAAO,MAAMA,mBAAmB,GAAG,IAAIC,GAAG,CAAC,CACzC,iDAAiD,EACjD,gDAAgD,CACjD,CAAC;AAEF,OAAO,MAAMC,eAAe,GAAG,IAAID,GAAG,CAAC,CACrC,8CAA8C,CAC/C,CAAC;AAEF,OAAO,MAAME,oBAAoB,GAAIC,GAAG,IAAK;EAC3C,OAAOA,GAAG,CAACC,MAAM,CAAEC,CAAC,IAAKN,mBAAmB,CAACO,GAAG,CAACD,CAAC,CAAC,CAAC,CAACE,MAAM,GAAG,CAAC;AACjE,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAIL,GAAG,IAAK;EACvC,OAAOA,GAAG,CAACC,MAAM,CAAEC,CAAC,IAAKJ,eAAe,CAACK,GAAG,CAACD,CAAC,CAAC,CAAC,CAACE,MAAM,GAAG,CAAC;AAC7D,CAAC"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}