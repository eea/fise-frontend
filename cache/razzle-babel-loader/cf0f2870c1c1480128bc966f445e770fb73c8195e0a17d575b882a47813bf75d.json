{"ast":null,"code":"import _extends from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/extends.js\";\nimport _classCallCheck from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-group-block/src/components/manage/Blocks/Group/EditBlockWrapper.jsx\";\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { Icon, BlockChooser } from '@plone/volto/components';\nimport { blockHasValue } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\nimport { Button } from 'semantic-ui-react';\nimport includes from 'lodash/includes';\nimport isBoolean from 'lodash/isBoolean';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { doesNodeContainClick } from 'semantic-ui-react/dist/commonjs/lib';\nimport cx from 'classnames';\nimport dragSVG from '@plone/volto/icons/drag.svg';\nimport addSVG from '@plone/volto/icons/circle-plus.svg';\nimport trashSVG from '@plone/volto/icons/delete.svg';\nvar messages = defineMessages({\n  unknownBlock: {\n    \"id\": \"Unknown Block\",\n    \"defaultMessage\": \"Unknown Block {block}\"\n  },\n  \"delete\": {\n    \"id\": \"delete\",\n    \"defaultMessage\": \"delete\"\n  }\n});\nvar EditBlockWrapper = /*#__PURE__*/function (_React$Component) {\n  _inherits(EditBlockWrapper, _React$Component);\n  var _super = _createSuper(EditBlockWrapper);\n  function EditBlockWrapper(props) {\n    var _this;\n    _classCallCheck(this, EditBlockWrapper);\n    _this = _super.call(this, props);\n    _defineProperty(_assertThisInitialized(_this), \"handleClickOutside\", function (e) {\n      if (_this.blockNode.current && doesNodeContainClick(_this.blockNode.current, e)) return;\n      if (_this.state.addNewBlockOpened) {\n        _this.setState({\n          addNewBlockOpened: false\n        });\n        return true;\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"blockNode\", /*#__PURE__*/React.createRef());\n    _this.state = {\n      addNewBlockOpened: false\n    };\n    return _this;\n  }\n  _createClass(EditBlockWrapper, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      document.addEventListener('mousedown', this.handleClickOutside, false);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      document.removeEventListener('mousedown', this.handleClickOutside);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _data$instructions,\n        _this2 = this;\n      var _this$props = this.props,\n        intl = _this$props.intl,\n        blockProps = _this$props.blockProps,\n        draginfo = _this$props.draginfo,\n        extraControls = _this$props.extraControls,\n        disabled = _this$props.disabled,\n        children = _this$props.children;\n      var allowedBlocks = blockProps.allowedBlocks,\n        block = blockProps.block,\n        data = blockProps.data,\n        onSelectBlock = blockProps.onSelectBlock,\n        onDeleteBlock = blockProps.onDeleteBlock,\n        _onMutateBlock = blockProps.onMutateBlock,\n        _onInsertBlock = blockProps.onInsertBlock,\n        selected = blockProps.selected;\n      var type = data['@type'];\n      var disableNewBlocks = data.disableNewBlocks;\n      var dragVisible = !data.fixed;\n      var visible = selected;\n      var required = isBoolean(data.required) ? data.required : includes(config.blocks.requiredBlocks, type);\n\n      // Get editing instructions from block settings or props\n      var instructions = (data === null || data === void 0 ? void 0 : (_data$instructions = data.instructions) === null || _data$instructions === void 0 ? void 0 : _data$instructions.data) || (data === null || data === void 0 ? void 0 : data.instructions);\n      if (!instructions || instructions === '<p><br/></p>') {\n        instructions = '';\n      }\n      return __jsx(\"div\", {\n        ref: this.blockNode,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 7\n        }\n      }, __jsx(\"div\", _extends({\n        ref: draginfo === null || draginfo === void 0 ? void 0 : draginfo.innerRef\n      }, selected ? draginfo === null || draginfo === void 0 ? void 0 : draginfo.draggableProps : null, {\n        className: \"block-editor-\".concat(data['@type']),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 9\n        }\n      }), (!selected || !visible || disabled) && __jsx(\"div\", _extends({\n        style: {\n          display: 'none'\n          // keep react-beautiful-dnd happy\n        }\n      }, draginfo.dragHandleProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 13\n        }\n      })), visible && __jsx(\"div\", {\n        className: \"block-toolbar\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }\n      }, instructions ? extraControls : '', !disabled && __jsx(React.Fragment, null, __jsx(\"div\", _extends({\n        style: {\n          display: dragVisible ? 'inline-block' : 'none'\n        }\n      }, draginfo.dragHandleProps, {\n        className: \"drag handle wrapper-group-block\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 19\n        }\n      }), __jsx(Button, {\n        icon: true,\n        basic: true,\n        title: \"Drag and drop\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 21\n        }\n      }, __jsx(Icon, {\n        name: dragSVG,\n        size: \"19px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 23\n        }\n      }))), !disableNewBlocks && !blockHasValue(data) && __jsx(Button, {\n        icon: true,\n        basic: true,\n        title: \"Add block\",\n        onClick: function onClick() {\n          _this2.setState({\n            addNewBlockOpened: !_this2.state.addNewBlockOpened\n          });\n        },\n        className: \"group-block-add-button\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 21\n        }\n      }, __jsx(Icon, {\n        name: addSVG,\n        className: \"\",\n        size: \"19px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 23\n        }\n      })), !required && __jsx(Button, {\n        icon: true,\n        basic: true,\n        title: \"Remove block\",\n        onClick: function onClick() {\n          return onDeleteBlock(block);\n        },\n        className: \"delete-button-group-block\",\n        \"aria-label\": intl.formatMessage(messages[\"delete\"]),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }\n      }, __jsx(Icon, {\n        name: trashSVG,\n        size: \"19px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 23\n        }\n      })), this.state.addNewBlockOpened && __jsx(BlockChooser, {\n        onMutateBlock: function onMutateBlock(id, value) {\n          _onMutateBlock(id, value);\n          _this2.setState({\n            addNewBlockOpened: false\n          });\n        },\n        onInsertBlock: function onInsertBlock(id, value) {\n          onSelectBlock(_onInsertBlock(id, value));\n          _this2.setState({\n            addNewBlockOpened: false\n          });\n        },\n        currentBlock: block,\n        allowedBlocks: allowedBlocks,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 21\n        }\n      }))), __jsx(\"div\", {\n        className: cx('ui drag block wrapper inner', type, {\n          multiSelected: this.props.multiSelected\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 11\n        }\n      }, children)));\n    }\n  }]);\n  return EditBlockWrapper;\n}(React.Component);\nexport default _c = injectIntl(EditBlockWrapper);\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["React","Icon","BlockChooser","blockHasValue","config","Button","includes","isBoolean","defineMessages","injectIntl","doesNodeContainClick","cx","dragSVG","addSVG","trashSVG","messages","unknownBlock","EditBlockWrapper","props","e","blockNode","current","state","addNewBlockOpened","setState","createRef","document","addEventListener","handleClickOutside","removeEventListener","intl","blockProps","draginfo","extraControls","disabled","children","allowedBlocks","block","data","onSelectBlock","onDeleteBlock","onMutateBlock","onInsertBlock","selected","type","disableNewBlocks","dragVisible","fixed","visible","required","blocks","requiredBlocks","instructions","innerRef","draggableProps","display","dragHandleProps","formatMessage","id","value","multiSelected","Component"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-group-block/src/components/manage/Blocks/Group/EditBlockWrapper.jsx"],"sourcesContent":["import React from 'react';\nimport { Icon, BlockChooser } from '@plone/volto/components';\nimport { blockHasValue } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\nimport { Button } from 'semantic-ui-react';\nimport includes from 'lodash/includes';\nimport isBoolean from 'lodash/isBoolean';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { doesNodeContainClick } from 'semantic-ui-react/dist/commonjs/lib';\nimport cx from 'classnames';\n\nimport dragSVG from '@plone/volto/icons/drag.svg';\nimport addSVG from '@plone/volto/icons/circle-plus.svg';\nimport trashSVG from '@plone/volto/icons/delete.svg';\n\nconst messages = defineMessages({\n  unknownBlock: {\n    id: 'Unknown Block',\n    defaultMessage: 'Unknown Block {block}',\n  },\n  delete: {\n    id: 'delete',\n    defaultMessage: 'delete',\n  },\n});\n\nclass EditBlockWrapper extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      addNewBlockOpened: false,\n    };\n  }\n\n  componentDidMount() {\n    document.addEventListener('mousedown', this.handleClickOutside, false);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('mousedown', this.handleClickOutside);\n  }\n\n  handleClickOutside = (e) => {\n    if (\n      this.blockNode.current &&\n      doesNodeContainClick(this.blockNode.current, e)\n    )\n      return;\n\n    if (this.state.addNewBlockOpened) {\n      this.setState({\n        addNewBlockOpened: false,\n      });\n      return true;\n    }\n  };\n\n  blockNode = React.createRef();\n\n  render() {\n    const {\n      intl,\n      blockProps,\n      draginfo,\n      extraControls,\n      disabled,\n      children,\n    } = this.props;\n\n    const {\n      allowedBlocks,\n      block,\n      data,\n      onSelectBlock,\n      onDeleteBlock,\n      onMutateBlock,\n      onInsertBlock,\n      selected,\n    } = blockProps;\n    const type = data['@type'];\n    const { disableNewBlocks } = data;\n    const dragVisible = !data.fixed;\n    const visible = selected;\n\n    const required = isBoolean(data.required)\n      ? data.required\n      : includes(config.blocks.requiredBlocks, type);\n\n    // Get editing instructions from block settings or props\n    let instructions = data?.instructions?.data || data?.instructions;\n    if (!instructions || instructions === '<p><br/></p>') {\n      instructions = '';\n    }\n\n    return (\n      <div ref={this.blockNode}>\n        <div\n          ref={draginfo?.innerRef}\n          {...(selected ? draginfo?.draggableProps : null)}\n          className={`block-editor-${data['@type']}`}\n        >\n          {(!selected || !visible || disabled) && (\n            <div\n              style={{\n                display: 'none',\n                // keep react-beautiful-dnd happy\n              }}\n              {...draginfo.dragHandleProps}\n            ></div>\n          )}\n          {visible && (\n            <div className=\"block-toolbar\">\n              {instructions ? extraControls : ''}\n\n              {!disabled && (\n                <>\n                  <div\n                    style={{\n                      display: dragVisible ? 'inline-block' : 'none',\n                    }}\n                    {...draginfo.dragHandleProps}\n                    className=\"drag handle wrapper-group-block\"\n                  >\n                    <Button icon basic title=\"Drag and drop\">\n                      <Icon name={dragSVG} size=\"19px\" />\n                    </Button>\n                  </div>\n\n                  {!disableNewBlocks && !blockHasValue(data) && (\n                    <Button\n                      icon\n                      basic\n                      title=\"Add block\"\n                      onClick={() => {\n                        this.setState({\n                          addNewBlockOpened: !this.state.addNewBlockOpened,\n                        });\n                      }}\n                      className=\"group-block-add-button\"\n                    >\n                      <Icon name={addSVG} className=\"\" size=\"19px\" />\n                    </Button>\n                  )}\n                  {!required && (\n                    <Button\n                      icon\n                      basic\n                      title=\"Remove block\"\n                      onClick={() => onDeleteBlock(block)}\n                      className=\"delete-button-group-block\"\n                      aria-label={intl.formatMessage(messages.delete)}\n                    >\n                      <Icon name={trashSVG} size=\"19px\" />\n                    </Button>\n                  )}\n                  {this.state.addNewBlockOpened && (\n                    <BlockChooser\n                      onMutateBlock={(id, value) => {\n                        onMutateBlock(id, value);\n                        this.setState({ addNewBlockOpened: false });\n                      }}\n                      onInsertBlock={(id, value) => {\n                        onSelectBlock(onInsertBlock(id, value));\n                        this.setState({ addNewBlockOpened: false });\n                      }}\n                      currentBlock={block}\n                      allowedBlocks={allowedBlocks}\n                    />\n                  )}\n                </>\n              )}\n            </div>\n          )}\n\n          <div\n            className={cx('ui drag block wrapper inner', type, {\n              multiSelected: this.props.multiSelected,\n            })}\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default injectIntl(EditBlockWrapper);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Unknown Block","defaultMessage":"Unknown Block {block}"},{"id":"delete","defaultMessage":"delete"}]}},"sourceType":"module","externalDependencies":[]}