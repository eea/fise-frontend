{"ast":null,"code":"import { useCallback, useEffect, useRef } from 'react';\nimport { doesNodeContainClick } from 'semantic-ui-react/dist/commonjs/lib';\n\n/**\n * Hook used to detect clicks outside a component (or an escape key press).\n * onTriggered function is triggered on `click` or escape `keyup` event.\n */\nexport function useDetectClickOutside({\n  onTriggered,\n  disableClick,\n  disableKeys,\n  allowAnyKey,\n  triggerKeys\n}) {\n  const ref = useRef(null);\n  const keyListener = useCallback(e => {\n    if (allowAnyKey) {\n      onTriggered(e);\n    } else if (triggerKeys) {\n      if (triggerKeys.includes(e.key)) {\n        onTriggered(e);\n      }\n    } else {\n      if (e.key === 'Escape') {\n        onTriggered(e);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const clickListener = useCallback(e => {\n    if (ref && ref.current) {\n      if (!doesNodeContainClick(ref.current, e)) {\n        onTriggered(e);\n      }\n    }\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [ref.current]);\n  useEffect(() => {\n    // We attach the events to `window`, since the React synthetic event system is\n    // attached in there, so if we stopPropagation on `onClick` then it does not stop\n    // if the event is attached in `document`\n    // https://stackoverflow.com/questions/24415631/reactjs-syntheticevent-stoppropagation-only-works-with-react-events/52879137#52879137\n    // https://gist.github.com/ggregoire/ce7bc946212920c0a6bad8125567d001\n    // https://levelup.gitconnected.com/how-exactly-does-react-handles-events-71e8b5e359f2\n    !disableClick && window.addEventListener('click', clickListener);\n    !disableKeys && window.addEventListener('keyup', keyListener);\n    return () => {\n      !disableClick && window.removeEventListener('click', clickListener);\n      !disableKeys && window.removeEventListener('keyup', keyListener);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return ref;\n}","map":{"version":3,"names":["useCallback","useEffect","useRef","doesNodeContainClick","useDetectClickOutside","onTriggered","disableClick","disableKeys","allowAnyKey","triggerKeys","ref","keyListener","e","includes","key","clickListener","current","window","addEventListener","removeEventListener"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/helpers/Utils/useDetectClickOutside.js"],"sourcesContent":["import { useCallback, useEffect, useRef } from 'react';\nimport { doesNodeContainClick } from 'semantic-ui-react/dist/commonjs/lib';\n\n/**\n * Hook used to detect clicks outside a component (or an escape key press).\n * onTriggered function is triggered on `click` or escape `keyup` event.\n */\nexport function useDetectClickOutside({\n  onTriggered,\n  disableClick,\n  disableKeys,\n  allowAnyKey,\n  triggerKeys,\n}) {\n  const ref = useRef(null);\n\n  const keyListener = useCallback((e) => {\n    if (allowAnyKey) {\n      onTriggered(e);\n    } else if (triggerKeys) {\n      if (triggerKeys.includes(e.key)) {\n        onTriggered(e);\n      }\n    } else {\n      if (e.key === 'Escape') {\n        onTriggered(e);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const clickListener = useCallback(\n    (e) => {\n      if (ref && ref.current) {\n        if (!doesNodeContainClick(ref.current, e)) {\n          onTriggered(e);\n        }\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [ref.current],\n  );\n\n  useEffect(() => {\n    // We attach the events to `window`, since the React synthetic event system is\n    // attached in there, so if we stopPropagation on `onClick` then it does not stop\n    // if the event is attached in `document`\n    // https://stackoverflow.com/questions/24415631/reactjs-syntheticevent-stoppropagation-only-works-with-react-events/52879137#52879137\n    // https://gist.github.com/ggregoire/ce7bc946212920c0a6bad8125567d001\n    // https://levelup.gitconnected.com/how-exactly-does-react-handles-events-71e8b5e359f2\n    !disableClick && window.addEventListener('click', clickListener);\n    !disableKeys && window.addEventListener('keyup', keyListener);\n    return () => {\n      !disableClick && window.removeEventListener('click', clickListener);\n      !disableKeys && window.removeEventListener('keyup', keyListener);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return ref;\n}\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AACtD,SAASC,oBAAoB,QAAQ,qCAAqC;;AAE1E;AACA;AACA;AACA;AACA,OAAO,SAASC,qBAAqB,CAAC;EACpCC,WAAW;EACXC,YAAY;EACZC,WAAW;EACXC,WAAW;EACXC;AACF,CAAC,EAAE;EACD,MAAMC,GAAG,GAAGR,MAAM,CAAC,IAAI,CAAC;EAExB,MAAMS,WAAW,GAAGX,WAAW,CAAEY,CAAC,IAAK;IACrC,IAAIJ,WAAW,EAAE;MACfH,WAAW,CAACO,CAAC,CAAC;IAChB,CAAC,MAAM,IAAIH,WAAW,EAAE;MACtB,IAAIA,WAAW,CAACI,QAAQ,CAACD,CAAC,CAACE,GAAG,CAAC,EAAE;QAC/BT,WAAW,CAACO,CAAC,CAAC;MAChB;IACF,CAAC,MAAM;MACL,IAAIA,CAAC,CAACE,GAAG,KAAK,QAAQ,EAAE;QACtBT,WAAW,CAACO,CAAC,CAAC;MAChB;IACF;IACA;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,aAAa,GAAGf,WAAW,CAC9BY,CAAC,IAAK;IACL,IAAIF,GAAG,IAAIA,GAAG,CAACM,OAAO,EAAE;MACtB,IAAI,CAACb,oBAAoB,CAACO,GAAG,CAACM,OAAO,EAAEJ,CAAC,CAAC,EAAE;QACzCP,WAAW,CAACO,CAAC,CAAC;MAChB;IACF;EACF,CAAC;EACD;EACA,CAACF,GAAG,CAACM,OAAO,CAAC,CACd;EAEDf,SAAS,CAAC,MAAM;IACd;IACA;IACA;IACA;IACA;IACA;IACA,CAACK,YAAY,IAAIW,MAAM,CAACC,gBAAgB,CAAC,OAAO,EAAEH,aAAa,CAAC;IAChE,CAACR,WAAW,IAAIU,MAAM,CAACC,gBAAgB,CAAC,OAAO,EAAEP,WAAW,CAAC;IAC7D,OAAO,MAAM;MACX,CAACL,YAAY,IAAIW,MAAM,CAACE,mBAAmB,CAAC,OAAO,EAAEJ,aAAa,CAAC;MACnE,CAACR,WAAW,IAAIU,MAAM,CAACE,mBAAmB,CAAC,OAAO,EAAER,WAAW,CAAC;IAClE,CAAC;IACD;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,OAAOD,GAAG;AACZ"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}