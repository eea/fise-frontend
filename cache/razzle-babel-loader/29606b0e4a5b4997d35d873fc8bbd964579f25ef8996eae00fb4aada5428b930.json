{"ast":null,"code":"import _extends from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/extends.js\";\nimport _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _uniqBy from \"lodash/uniqBy\";\nimport _map from \"lodash/map\";\nimport _last from \"lodash/last\";\nimport _filter from \"lodash/filter\";\nimport _concat from \"lodash/concat\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Controlpanels/Controlpanels.jsx\";\nvar __jsx = React.createElement;\n/**\n * Controlpanels component.\n * @module components/manage/Controlpanels/Controlpanels\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { Portal } from 'react-portal';\nimport { Helmet } from '@plone/volto/helpers';\nimport { Container, Grid, Header, Segment } from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport { listControlpanels, getSystemInformation } from '@plone/volto/actions';\nimport { Error, Icon, Toolbar, VersionOverview } from '@plone/volto/components';\nimport config from '@plone/volto/registry';\nimport backSVG from '@plone/volto/icons/back.svg';\nvar messages = defineMessages({\n  sitesetup: {\n    \"id\": \"Site Setup\",\n    \"defaultMessage\": \"Site Setup\"\n  },\n  back: {\n    \"id\": \"Back\",\n    \"defaultMessage\": \"Back\"\n  },\n  versionoverview: {\n    \"id\": \"Version Overview\",\n    \"defaultMessage\": \"Version Overview\"\n  },\n  general: {\n    \"id\": \"General\",\n    \"defaultMessage\": \"General\"\n  },\n  addonconfiguration: {\n    \"id\": \"Add-on Configuration\",\n    \"defaultMessage\": \"Add-on Configuration\"\n  },\n  content: {\n    \"id\": \"Content\",\n    \"defaultMessage\": \"Content\"\n  },\n  moderatecomments: {\n    \"id\": \"Moderate Comments\",\n    \"defaultMessage\": \"Moderate Comments\"\n  },\n  usersandgroups: {\n    \"id\": \"Users and Groups\",\n    \"defaultMessage\": \"Users and Groups\"\n  },\n  usersControlPanelCategory: {\n    \"id\": \"Users\",\n    \"defaultMessage\": \"Users\"\n  },\n  users: {\n    \"id\": \"Users\",\n    \"defaultMessage\": \"Users\"\n  },\n  groups: {\n    \"id\": \"Groups\",\n    \"defaultMessage\": \"Groups\"\n  },\n  addons: {\n    \"id\": \"Add-Ons\",\n    \"defaultMessage\": \"Add-Ons\"\n  },\n  database: {\n    \"id\": \"Database\",\n    \"defaultMessage\": \"Database\"\n  },\n  usergroupmemberbership: {\n    \"id\": \"User Group Membership\",\n    \"defaultMessage\": \"User Group Membership\"\n  },\n  undo: {\n    \"id\": \"Undo\",\n    \"defaultMessage\": \"Undo\"\n  },\n  urlmanagement: {\n    \"id\": \"URL Management\",\n    \"defaultMessage\": \"URL Management\"\n  }\n});\n\n/**\n * Controlpanels container class.\n * @class Controlpanels\n * @extends Component\n */\nvar Controlpanels = /*#__PURE__*/function (_Component) {\n  _inherits(Controlpanels, _Component);\n  var _super = _createSuper(Controlpanels);\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs EditComponent\n   */\n  function Controlpanels(props) {\n    var _this;\n    _classCallCheck(this, Controlpanels);\n    _this = _super.call(this, props);\n    _this.state = {\n      error: null,\n      isClient: false\n    };\n    return _this;\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  _createClass(Controlpanels, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.listControlpanels();\n      this.props.getSystemInformation();\n      this.setState({\n        isClient: true\n      });\n    }\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      // Error\n      if (this.props.controlpanelsRequest.loading && nextProps.controlpanelsRequest.error) {\n        this.setState({\n          error: nextProps.controlpanelsRequest.error\n        });\n      }\n    }\n\n    /**\n     * Render method.\n     * @method render\n     * @returns {string} Markup for the component.\n     */\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      // Error\n      if (this.state.error) {\n        return __jsx(Error, {\n          error: this.state.error,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 14\n          }\n        });\n      }\n      var customcontrolpanels = config.settings.controlpanels ? config.settings.controlpanels.map(function (el) {\n        el.group = _this2.props.intl.formatMessage({\n          id: el.group,\n          defaultMessage: el.group\n        }) || el.group;\n        return el;\n      }) : [];\n      var controlpanels = _map(_concat(this.props.controlpanels, customcontrolpanels, [{\n        '@id': '/addons',\n        group: this.props.intl.formatMessage(messages.general),\n        title: this.props.intl.formatMessage(messages.addons)\n      }, {\n        '@id': '/database',\n        group: this.props.intl.formatMessage(messages.general),\n        title: this.props.intl.formatMessage(messages.database)\n      }, {\n        '@id': '/undo',\n        group: this.props.intl.formatMessage(messages.general),\n        title: this.props.intl.formatMessage(messages.undo)\n      }, {\n        '@id': '/aliases',\n        group: this.props.intl.formatMessage(messages.general),\n        title: this.props.intl.formatMessage(messages.urlmanagement)\n      }, {\n        '@id': '/moderate-comments',\n        group: this.props.intl.formatMessage(messages.content),\n        title: this.props.intl.formatMessage(messages.moderatecomments)\n      }, {\n        '@id': '/users',\n        group: this.props.intl.formatMessage(messages.usersControlPanelCategory),\n        title: this.props.intl.formatMessage(messages.users)\n      }, {\n        '@id': '/usergroupmembership',\n        group: this.props.intl.formatMessage(messages.usersControlPanelCategory),\n        title: this.props.intl.formatMessage(messages.usergroupmemberbership)\n      }, {\n        '@id': '/groups',\n        group: this.props.intl.formatMessage(messages.usersControlPanelCategory),\n        title: this.props.intl.formatMessage(messages.groups)\n      }]), function (controlpanel) {\n        return _objectSpread(_objectSpread({}, controlpanel), {}, {\n          id: _last(controlpanel['@id'].split('/'))\n        });\n      });\n      var groups = _map(_uniqBy(controlpanels, 'group'), 'group');\n      var icons = config.settings.controlPanelsIcons;\n      return __jsx(\"div\", {\n        className: \"view-wrapper\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 7\n        }\n      }, __jsx(Helmet, {\n        title: this.props.intl.formatMessage(messages.sitesetup),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 9\n        }\n      }), __jsx(Container, {\n        className: \"controlpanel\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 9\n        }\n      }, __jsx(Segment.Group, {\n        raised: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 11\n        }\n      }, __jsx(Segment, {\n        className: \"primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 13\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"Site Setup\",\n        defaultMessage: \"Site Setup\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 15\n        }\n      })), _map(groups, function (group) {\n        return [__jsx(Segment, {\n          key: \"header-\".concat(group),\n          secondary: true,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 15\n          }\n        }, group), __jsx(Segment, {\n          key: \"body-\".concat(group),\n          attached: true,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 15\n          }\n        }, __jsx(Grid, {\n          columns: 6,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 17\n          }\n        }, __jsx(Grid.Row, {\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 19\n          }\n        }, _map(_filter(controlpanels, {\n          group: group\n        }), function (controlpanel) {\n          return __jsx(Grid.Column, {\n            key: controlpanel.id,\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 245,\n              columnNumber: 23\n            }\n          }, __jsx(Link, {\n            to: \"/controlpanel/\".concat(controlpanel.id),\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 25\n            }\n          }, __jsx(Header, {\n            as: \"h3\",\n            icon: true,\n            textAlign: \"center\",\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 27\n            }\n          }, __jsx(Icon, {\n            name: (icons === null || icons === void 0 ? void 0 : icons[controlpanel.id]) || icons[\"default\"],\n            size: \"48px\",\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 248,\n              columnNumber: 29\n            }\n          }), __jsx(Header.Content, {\n            __self: _this2,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 252,\n              columnNumber: 29\n            }\n          }, controlpanel.title))));\n        }))))];\n      })), __jsx(Segment.Group, {\n        raised: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }\n      }, __jsx(Segment, {\n        className: \"primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 265,\n          columnNumber: 13\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"Version Overview\",\n        defaultMessage: \"Version Overview\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 15\n        }\n      })), __jsx(Segment, {\n        attached: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 13\n        }\n      }, this.props.systemInformation ? __jsx(VersionOverview, _extends({}, this.props.systemInformation, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 17\n        }\n      })) : null))), this.state.isClient && __jsx(Portal, {\n        node: document.getElementById('toolbar'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279,\n          columnNumber: 11\n        }\n      }, __jsx(Toolbar, {\n        pathname: this.props.pathname,\n        hideDefaultViewButtons: true,\n        inner: __jsx(Link, {\n          to: \"/\",\n          className: \"item\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 284,\n            columnNumber: 17\n          }\n        }, __jsx(Icon, {\n          name: backSVG,\n          className: \"contents circled\",\n          size: \"30px\",\n          title: this.props.intl.formatMessage(messages.back),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 285,\n            columnNumber: 19\n          }\n        })),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 13\n        }\n      })));\n    }\n  }]);\n  return Controlpanels;\n}(Component);\n_defineProperty(Controlpanels, \"propTypes\", {\n  listControlpanels: PropTypes.func.isRequired,\n  controlpanels: PropTypes.arrayOf(PropTypes.shape({\n    '@id': PropTypes.string,\n    group: PropTypes.string,\n    title: PropTypes.string\n  })).isRequired,\n  pathname: PropTypes.string.isRequired\n});\nexport default compose(injectIntl, connect(function (state, props) {\n  return {\n    controlpanels: state.controlpanels.controlpanels,\n    controlpanelsRequest: state.controlpanels.list,\n    pathname: props.location.pathname,\n    systemInformation: state.controlpanels.systeminformation\n  };\n}, {\n  listControlpanels: listControlpanels,\n  getSystemInformation: getSystemInformation\n}))(Controlpanels);","map":{"version":3,"names":["React","Component","PropTypes","connect","compose","Link","Portal","Helmet","Container","Grid","Header","Segment","FormattedMessage","defineMessages","injectIntl","listControlpanels","getSystemInformation","Error","Icon","Toolbar","VersionOverview","config","backSVG","messages","sitesetup","back","versionoverview","general","addonconfiguration","content","moderatecomments","usersandgroups","usersControlPanelCategory","users","groups","addons","database","usergroupmemberbership","undo","urlmanagement","Controlpanels","props","state","error","isClient","setState","nextProps","controlpanelsRequest","loading","customcontrolpanels","settings","controlpanels","map","el","group","intl","formatMessage","id","defaultMessage","title","controlpanel","split","icons","controlPanelsIcons","systemInformation","document","getElementById","pathname","func","isRequired","arrayOf","shape","string","list","location","systeminformation"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Controlpanels/Controlpanels.jsx"],"sourcesContent":["/**\n * Controlpanels component.\n * @module components/manage/Controlpanels/Controlpanels\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { concat, filter, last, map, uniqBy } from 'lodash';\nimport { Portal } from 'react-portal';\nimport { Helmet } from '@plone/volto/helpers';\nimport { Container, Grid, Header, Segment } from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\n\nimport { listControlpanels, getSystemInformation } from '@plone/volto/actions';\nimport { Error, Icon, Toolbar, VersionOverview } from '@plone/volto/components';\n\nimport config from '@plone/volto/registry';\n\nimport backSVG from '@plone/volto/icons/back.svg';\n\nconst messages = defineMessages({\n  sitesetup: {\n    id: 'Site Setup',\n    defaultMessage: 'Site Setup',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  versionoverview: {\n    id: 'Version Overview',\n    defaultMessage: 'Version Overview',\n  },\n  general: {\n    id: 'General',\n    defaultMessage: 'General',\n  },\n  addonconfiguration: {\n    id: 'Add-on Configuration',\n    defaultMessage: 'Add-on Configuration',\n  },\n  content: {\n    id: 'Content',\n    defaultMessage: 'Content',\n  },\n  moderatecomments: {\n    id: 'Moderate Comments',\n    defaultMessage: 'Moderate Comments',\n  },\n  usersandgroups: {\n    id: 'Users and Groups',\n    defaultMessage: 'Users and Groups',\n  },\n  usersControlPanelCategory: {\n    id: 'Users',\n    defaultMessage: 'Users',\n  },\n  users: {\n    id: 'Users',\n    defaultMessage: 'Users',\n  },\n  groups: {\n    id: 'Groups',\n    defaultMessage: 'Groups',\n  },\n  addons: {\n    id: 'Add-Ons',\n    defaultMessage: 'Add-Ons',\n  },\n  database: {\n    id: 'Database',\n    defaultMessage: 'Database',\n  },\n  usergroupmemberbership: {\n    id: 'User Group Membership',\n    defaultMessage: 'User Group Membership',\n  },\n  undo: {\n    id: 'Undo',\n    defaultMessage: 'Undo',\n  },\n  urlmanagement: {\n    id: 'URL Management',\n    defaultMessage: 'URL Management',\n  },\n});\n\n/**\n * Controlpanels container class.\n * @class Controlpanels\n * @extends Component\n */\nclass Controlpanels extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    listControlpanels: PropTypes.func.isRequired,\n    controlpanels: PropTypes.arrayOf(\n      PropTypes.shape({\n        '@id': PropTypes.string,\n        group: PropTypes.string,\n        title: PropTypes.string,\n      }),\n    ).isRequired,\n    pathname: PropTypes.string.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs EditComponent\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isClient: false,\n    };\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.listControlpanels();\n    this.props.getSystemInformation();\n    this.setState({ isClient: true });\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    // Error\n    if (\n      this.props.controlpanelsRequest.loading &&\n      nextProps.controlpanelsRequest.error\n    ) {\n      this.setState({\n        error: nextProps.controlpanelsRequest.error,\n      });\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    // Error\n    if (this.state.error) {\n      return <Error error={this.state.error} />;\n    }\n\n    let customcontrolpanels = config.settings.controlpanels\n      ? config.settings.controlpanels.map((el) => {\n          el.group =\n            this.props.intl.formatMessage({\n              id: el.group,\n              defaultMessage: el.group,\n            }) || el.group;\n          return el;\n        })\n      : [];\n    const controlpanels = map(\n      concat(this.props.controlpanels, customcontrolpanels, [\n        {\n          '@id': '/addons',\n          group: this.props.intl.formatMessage(messages.general),\n          title: this.props.intl.formatMessage(messages.addons),\n        },\n        {\n          '@id': '/database',\n          group: this.props.intl.formatMessage(messages.general),\n          title: this.props.intl.formatMessage(messages.database),\n        },\n        {\n          '@id': '/undo',\n          group: this.props.intl.formatMessage(messages.general),\n          title: this.props.intl.formatMessage(messages.undo),\n        },\n        {\n          '@id': '/aliases',\n          group: this.props.intl.formatMessage(messages.general),\n          title: this.props.intl.formatMessage(messages.urlmanagement),\n        },\n        {\n          '@id': '/moderate-comments',\n          group: this.props.intl.formatMessage(messages.content),\n          title: this.props.intl.formatMessage(messages.moderatecomments),\n        },\n        {\n          '@id': '/users',\n          group: this.props.intl.formatMessage(\n            messages.usersControlPanelCategory,\n          ),\n          title: this.props.intl.formatMessage(messages.users),\n        },\n        {\n          '@id': '/usergroupmembership',\n          group: this.props.intl.formatMessage(\n            messages.usersControlPanelCategory,\n          ),\n          title: this.props.intl.formatMessage(messages.usergroupmemberbership),\n        },\n        {\n          '@id': '/groups',\n          group: this.props.intl.formatMessage(\n            messages.usersControlPanelCategory,\n          ),\n          title: this.props.intl.formatMessage(messages.groups),\n        },\n      ]),\n      (controlpanel) => ({\n        ...controlpanel,\n        id: last(controlpanel['@id'].split('/')),\n      }),\n    );\n    const groups = map(uniqBy(controlpanels, 'group'), 'group');\n    const { controlPanelsIcons: icons } = config.settings;\n\n    return (\n      <div className=\"view-wrapper\">\n        <Helmet title={this.props.intl.formatMessage(messages.sitesetup)} />\n        <Container className=\"controlpanel\">\n          <Segment.Group raised>\n            <Segment className=\"primary\">\n              <FormattedMessage id=\"Site Setup\" defaultMessage=\"Site Setup\" />\n            </Segment>\n            {map(groups, (group) => [\n              <Segment key={`header-${group}`} secondary>\n                {group}\n              </Segment>,\n              <Segment key={`body-${group}`} attached>\n                <Grid columns={6}>\n                  <Grid.Row>\n                    {map(filter(controlpanels, { group }), (controlpanel) => (\n                      <Grid.Column key={controlpanel.id}>\n                        <Link to={`/controlpanel/${controlpanel.id}`}>\n                          <Header as=\"h3\" icon textAlign=\"center\">\n                            <Icon\n                              name={icons?.[controlpanel.id] || icons.default}\n                              size=\"48px\"\n                            />\n                            <Header.Content>\n                              {controlpanel.title}\n                            </Header.Content>\n                          </Header>\n                        </Link>\n                      </Grid.Column>\n                    ))}\n                  </Grid.Row>\n                </Grid>\n              </Segment>,\n            ])}\n          </Segment.Group>\n          <Segment.Group raised>\n            <Segment className=\"primary\">\n              <FormattedMessage\n                id=\"Version Overview\"\n                defaultMessage=\"Version Overview\"\n              />\n            </Segment>\n            <Segment attached>\n              {this.props.systemInformation ? (\n                <VersionOverview {...this.props.systemInformation} />\n              ) : null}\n            </Segment>\n          </Segment.Group>\n        </Container>\n        {this.state.isClient && (\n          <Portal node={document.getElementById('toolbar')}>\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={\n                <Link to=\"/\" className=\"item\">\n                  <Icon\n                    name={backSVG}\n                    className=\"contents circled\"\n                    size=\"30px\"\n                    title={this.props.intl.formatMessage(messages.back)}\n                  />\n                </Link>\n              }\n            />\n          </Portal>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      controlpanels: state.controlpanels.controlpanels,\n      controlpanelsRequest: state.controlpanels.list,\n      pathname: props.location.pathname,\n      systemInformation: state.controlpanels.systeminformation,\n    }),\n    { listControlpanels, getSystemInformation },\n  ),\n)(Controlpanels);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Site Setup","defaultMessage":"Site Setup"},{"id":"Back","defaultMessage":"Back"},{"id":"Version Overview","defaultMessage":"Version Overview"},{"id":"General","defaultMessage":"General"},{"id":"Add-on Configuration","defaultMessage":"Add-on Configuration"},{"id":"Content","defaultMessage":"Content"},{"id":"Moderate Comments","defaultMessage":"Moderate Comments"},{"id":"Users and Groups","defaultMessage":"Users and Groups"},{"id":"Users","defaultMessage":"Users"},{"id":"Groups","defaultMessage":"Groups"},{"id":"Add-Ons","defaultMessage":"Add-Ons"},{"id":"Database","defaultMessage":"Database"},{"id":"User Group Membership","defaultMessage":"User Group Membership"},{"id":"Undo","defaultMessage":"Undo"},{"id":"URL Management","defaultMessage":"URL Management"}]}},"sourceType":"module","externalDependencies":[]}