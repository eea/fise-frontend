{"ast":null,"code":"import _map from \"lodash/map\";\n/**\n * Sitemap helper.\n * @module helpers/Sitemap\n */\n\nimport superagent from 'superagent';\nimport zlib from 'zlib';\nimport { toPublicURL } from '@plone/volto/helpers';\nimport { addHeadersFactory } from '@plone/volto/helpers/Proxy/Proxy';\nimport config from '@plone/volto/registry';\n\n/**\n * Generate sitemap\n * @function generateSitemap\n * @param {Object} _req Request object\n * @return {string} Generated sitemap\n */\nexport var generateSitemap = function generateSitemap(_req) {\n  return new Promise(function (resolve) {\n    var _settings$internalApi;\n    var settings = config.settings;\n    var APISUFIX = settings.legacyTraverse ? '' : '/++api++';\n    var apiPath = (_settings$internalApi = settings.internalApiPath) !== null && _settings$internalApi !== void 0 ? _settings$internalApi : settings.apiPath;\n    var request = superagent.get(\"\".concat(apiPath).concat(APISUFIX, \"/@search?metadata_fields=modified&b_size=100000000&use_site_search_settings=1\"));\n    request.set('Accept', 'application/json');\n    request.use(addHeadersFactory(_req));\n    var authToken = _req.universalCookies.get('auth_token');\n    if (authToken) {\n      request.set('Authorization', \"Bearer \".concat(authToken));\n    }\n    request.end(function (error) {\n      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        body = _ref.body;\n      if (error) {\n        resolve(body || error);\n      } else {\n        var items = _map(body.items, function (item) {\n          return \"  <url>\\n    <loc>\".concat(toPublicURL(item['@id']), \"</loc>\\n\\n            <lastmod>\").concat(item.modified, \"</lastmod>\\n  </url>\");\n        });\n        var result = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n<urlset xmlns=\\\"http://www.sitemaps.org/schemas/sitemap/0.9\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd\\\">\\n\".concat(items.join('\\n'), \"\\n</urlset>\");\n        zlib.gzip(Buffer.from(result, 'utf8'), function (_err, buffer) {\n          resolve(buffer);\n        });\n      }\n    });\n  });\n};","map":{"version":3,"names":["superagent","zlib","toPublicURL","addHeadersFactory","config","generateSitemap","_req","Promise","resolve","settings","APISUFIX","legacyTraverse","apiPath","internalApiPath","request","get","set","use","authToken","universalCookies","end","error","body","items","item","modified","result","join","gzip","Buffer","from","_err","buffer"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/helpers/Sitemap/Sitemap.js"],"sourcesContent":["/**\n * Sitemap helper.\n * @module helpers/Sitemap\n */\n\nimport superagent from 'superagent';\nimport { map } from 'lodash';\nimport zlib from 'zlib';\nimport { toPublicURL } from '@plone/volto/helpers';\nimport { addHeadersFactory } from '@plone/volto/helpers/Proxy/Proxy';\n\nimport config from '@plone/volto/registry';\n\n/**\n * Generate sitemap\n * @function generateSitemap\n * @param {Object} _req Request object\n * @return {string} Generated sitemap\n */\nexport const generateSitemap = (_req) =>\n  new Promise((resolve) => {\n    const { settings } = config;\n    const APISUFIX = settings.legacyTraverse ? '' : '/++api++';\n    const apiPath = settings.internalApiPath ?? settings.apiPath;\n    const request = superagent.get(\n      `${apiPath}${APISUFIX}/@search?metadata_fields=modified&b_size=100000000&use_site_search_settings=1`,\n    );\n    request.set('Accept', 'application/json');\n    request.use(addHeadersFactory(_req));\n    const authToken = _req.universalCookies.get('auth_token');\n    if (authToken) {\n      request.set('Authorization', `Bearer ${authToken}`);\n    }\n    request.end((error, { body } = {}) => {\n      if (error) {\n        resolve(body || error);\n      } else {\n        const items = map(\n          body.items,\n          (item) =>\n            `  <url>\\n    <loc>${toPublicURL(item['@id'])}</loc>\\n\n            <lastmod>${item.modified}</lastmod>\\n  </url>`,\n        );\n        const result = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.sitemaps.org/schemas/sitemap/0.9 http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd\">\\n${items.join(\n          '\\n',\n        )}\\n</urlset>`;\n        zlib.gzip(Buffer.from(result, 'utf8'), (_err, buffer) => {\n          resolve(buffer);\n        });\n      }\n    });\n  });\n"],"mappings":";AAAA;AACA;AACA;AACA;;AAEA,OAAOA,UAAU,MAAM,YAAY;AAEnC,OAAOC,IAAI,MAAM,MAAM;AACvB,SAASC,WAAW,QAAQ,sBAAsB;AAClD,SAASC,iBAAiB,QAAQ,kCAAkC;AAEpE,OAAOC,MAAM,MAAM,uBAAuB;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAe,CAAIC,IAAI;EAAA,OAClC,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAK;IAAA;IACvB,IAAQC,QAAQ,GAAKL,MAAM,CAAnBK,QAAQ;IAChB,IAAMC,QAAQ,GAAGD,QAAQ,CAACE,cAAc,GAAG,EAAE,GAAG,UAAU;IAC1D,IAAMC,OAAO,4BAAGH,QAAQ,CAACI,eAAe,yEAAIJ,QAAQ,CAACG,OAAO;IAC5D,IAAME,OAAO,GAAGd,UAAU,CAACe,GAAG,WACzBH,OAAO,SAAGF,QAAQ,mFACtB;IACDI,OAAO,CAACE,GAAG,CAAC,QAAQ,EAAE,kBAAkB,CAAC;IACzCF,OAAO,CAACG,GAAG,CAACd,iBAAiB,CAACG,IAAI,CAAC,CAAC;IACpC,IAAMY,SAAS,GAAGZ,IAAI,CAACa,gBAAgB,CAACJ,GAAG,CAAC,YAAY,CAAC;IACzD,IAAIG,SAAS,EAAE;MACbJ,OAAO,CAACE,GAAG,CAAC,eAAe,mBAAYE,SAAS,EAAG;IACrD;IACAJ,OAAO,CAACM,GAAG,CAAC,UAACC,KAAK,EAAoB;MAAA,+EAAP,CAAC,CAAC;QAAXC,IAAI,QAAJA,IAAI;MACxB,IAAID,KAAK,EAAE;QACTb,OAAO,CAACc,IAAI,IAAID,KAAK,CAAC;MACxB,CAAC,MAAM;QACL,IAAME,KAAK,GAAG,KACZD,IAAI,CAACC,KAAK,EACV,UAACC,IAAI;UAAA,mCACkBtB,WAAW,CAACsB,IAAI,CAAC,KAAK,CAAC,CAAC,4CAClCA,IAAI,CAACC,QAAQ;QAAA,CAAsB,CACjD;QACD,IAAMC,MAAM,4SAA2RH,KAAK,CAACI,IAAI,CAC/S,IAAI,CACL,gBAAa;QACd1B,IAAI,CAAC2B,IAAI,CAACC,MAAM,CAACC,IAAI,CAACJ,MAAM,EAAE,MAAM,CAAC,EAAE,UAACK,IAAI,EAAEC,MAAM,EAAK;UACvDxB,OAAO,CAACwB,MAAM,CAAC;QACjB,CAAC,CAAC;MACJ;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;AAAA"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}