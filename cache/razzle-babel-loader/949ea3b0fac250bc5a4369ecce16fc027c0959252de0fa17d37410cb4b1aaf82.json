{"ast":null,"code":"import _extends from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/extends.js\";\nimport _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-datablocks/src/components/manage/Blocks/DataConnectedEmbedBlock/Edit.jsx\";\nvar __jsx = React.createElement;\n/**\n * Edit map block.\n * @module components/manage/Blocks/Maps/Edit\n */\n\nimport InlineForm from '@plone/volto/components/manage/Form/InlineForm';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Message } from 'semantic-ui-react';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport cx from 'classnames';\nimport PrivacyProtection from '@eeacms/volto-embed/PrivacyProtection/PrivacyProtection';\nimport { SidebarPortal } from '@plone/volto/components';\nimport mapsBlockSVG from '@plone/volto/components/manage/Blocks/Maps/block-maps.svg';\nimport schema from './schema';\nimport { addPrivacyProtectionToSchema } from '@eeacms/volto-embed/PrivacyProtection';\nvar messages = defineMessages({\n  MapsBlockInputPlaceholder: {\n    \"id\": \"Enter map Embed Code\",\n    \"defaultMessage\": \"Enter map Embed Code\"\n  },\n  left: {\n    \"id\": \"Left\",\n    \"defaultMessage\": \"Left\"\n  },\n  right: {\n    \"id\": \"Right\",\n    \"defaultMessage\": \"Right\"\n  },\n  center: {\n    \"id\": \"Center\",\n    \"defaultMessage\": \"Center\"\n  },\n  full: {\n    \"id\": \"Full\",\n    \"defaultMessage\": \"Full\"\n  },\n  GoogleMapsEmbeddedBlock: {\n    \"id\": \"Google Maps Embedded Block\",\n    \"defaultMessage\": \"Google Maps Embedded Block\"\n  }\n});\n\n/**\n * Edit image block class.\n * @class Edit\n * @extends Component\n */\nvar Edit = /*#__PURE__*/function (_Component) {\n  _inherits(Edit, _Component);\n  var _super = _createSuper(Edit);\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  function Edit(props) {\n    var _this;\n    _classCallCheck(this, Edit);\n    _this = _super.call(this, props);\n    _this.getSrc = _this.getSrc.bind(_assertThisInitialized(_this));\n    _this.state = {\n      url: '',\n      error: null\n    };\n    _this.onSubmitUrl = _this.onSubmitUrl.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  /**\n   * Submit url handler\n   * @method onSubmitUrl\n   * @param {string} e event\n   * @returns {undefined}\n   */\n  _createClass(Edit, [{\n    key: \"onSubmitUrl\",\n    value: function onSubmitUrl() {\n      this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n        url: this.getSrc(this.props.data.url)\n      }));\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var data = this.props.data;\n      if (data.url !== prevProps.data.url) {\n        this.onSubmitUrl();\n      }\n    }\n    /**\n     * get getSrc handler\n     * @method getSrc\n     * @param {string} embed Embed HTML code from Google Maps share option\n     * @returns {string} Source URL\n     */\n    // getSrc(embed) {\n    //   // Optimization, don't need the src\n    //   if (!embed.trim().startsWith('<iframe')) {\n    //     return embed;\n    //   }\n    //   const parser = new DOMParser();\n    //   const doc = parser.parseFromString(embed, 'text/html');\n    //   const iframe = doc.getElementsByTagName('iframe');\n    //   if (iframe.length === 0) {\n    //     this.setState({ error: true });\n    //     return '';\n    //   }\n    //   this.setState({ error: false });\n    //   return iframe[0].src;\n    // }\n  }, {\n    key: \"getSrc\",\n    value: function getSrc(embed) {\n      if (embed) {\n        var _this$props$propertie, _this$props$propertie2, _this$props$propertie3;\n        var nuts_code = ((_this$props$propertie = this.props.properties) === null || _this$props$propertie === void 0 ? void 0 : (_this$props$propertie2 = _this$props$propertie.data_query) === null || _this$props$propertie2 === void 0 ? void 0 : (_this$props$propertie3 = _this$props$propertie2[0]) === null || _this$props$propertie3 === void 0 ? void 0 : _this$props$propertie3.v[0]) || '<<NUTS_CODE>>';\n        return embed.replace('<<NUTS_CODE>>', nuts_code);\n      }\n    }\n\n    /**\n     * Render method.\n     * @method render\n     * @returns {string} Markup for the component.\n     */\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      return __jsx(\"div\", {\n        className: cx('block maps align', {\n          center: !Boolean(this.props.data.align)\n        }, this.props.data.align),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 7\n        }\n      }, this.props.data.url ? __jsx(PrivacyProtection, _extends({\n        data: this.props.data,\n        isEditMode: true\n      }, this.props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }\n      }), __jsx(\"div\", {\n        className: cx('maps-inner', {\n          'full-width': this.props.data.align === 'full'\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 13\n        }\n      }, this.props.selected ? null : __jsx(\"div\", {\n        style: {\n          position: 'absolute',\n          top: '0',\n          left: '0',\n          right: '0',\n          bottom: '0',\n          width: '100%',\n          height: '100%'\n        },\n        className: \"embed-chart-overlay\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 17\n        }\n      }), __jsx(\"iframe\", {\n        title: this.props.intl.formatMessage(messages.GoogleMapsEmbeddedBlock),\n        src: this.props.data.url,\n        className: \"google-map\",\n        frameBorder: \"0\",\n        allowFullScreen: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 15\n        }\n      }))) : __jsx(Message, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 11\n        }\n      }, __jsx(\"center\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 13\n        }\n      }, __jsx(\"img\", {\n        src: mapsBlockSVG,\n        alt: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 15\n        }\n      }), __jsx(\"div\", {\n        className: \"message-text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 15\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"Please use the sidebar to add Embed URL\",\n        defaultMessage: \"Please use the sidebar to add Embed URL.\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 17\n        }\n      }), this.state.error && __jsx(\"div\", {\n        style: {\n          color: 'red'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 19\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"Embed code error, please follow the instructions and try again.\",\n        defaultMessage: \"Embed code error, please follow the instructions and try again.\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 21\n        }\n      }))))), __jsx(SidebarPortal, {\n        selected: this.props.selected,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 9\n        }\n      }, __jsx(InlineForm, {\n        schema: addPrivacyProtectionToSchema(schema),\n        title: schema.title,\n        onChangeField: function onChangeField(id, value) {\n          _this2.props.onChangeBlock(_this2.props.block, _objectSpread(_objectSpread({}, _this2.props.data), {}, _defineProperty({}, id, value)));\n        },\n        formData: this.props.data,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }\n      })));\n    }\n  }]);\n  return Edit;\n}(Component);\n_defineProperty(Edit, \"propTypes\", {\n  selected: PropTypes.bool.isRequired,\n  block: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  pathname: PropTypes.string.isRequired,\n  onChangeBlock: PropTypes.func.isRequired,\n  onSelectBlock: PropTypes.func.isRequired,\n  onDeleteBlock: PropTypes.func.isRequired,\n  onFocusPreviousBlock: PropTypes.func.isRequired,\n  onFocusNextBlock: PropTypes.func.isRequired,\n  handleKeyDown: PropTypes.func.isRequired\n});\nexport default _c = injectIntl(Edit);\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["InlineForm","React","Component","PropTypes","Message","defineMessages","FormattedMessage","injectIntl","cx","PrivacyProtection","SidebarPortal","mapsBlockSVG","schema","addPrivacyProtectionToSchema","messages","MapsBlockInputPlaceholder","left","right","center","full","GoogleMapsEmbeddedBlock","Edit","props","getSrc","bind","state","url","error","onSubmitUrl","onChangeBlock","block","data","prevProps","prevState","embed","nuts_code","properties","data_query","v","replace","Boolean","align","selected","position","top","bottom","width","height","intl","formatMessage","color","title","id","value","bool","isRequired","string","index","number","objectOf","any","pathname","func","onSelectBlock","onDeleteBlock","onFocusPreviousBlock","onFocusNextBlock","handleKeyDown"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-datablocks/src/components/manage/Blocks/DataConnectedEmbedBlock/Edit.jsx"],"sourcesContent":["/**\n * Edit map block.\n * @module components/manage/Blocks/Maps/Edit\n */\n\nimport InlineForm from '@plone/volto/components/manage/Form/InlineForm';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Message } from 'semantic-ui-react';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport cx from 'classnames';\nimport PrivacyProtection from '@eeacms/volto-embed/PrivacyProtection/PrivacyProtection';\n\nimport { SidebarPortal } from '@plone/volto/components';\nimport mapsBlockSVG from '@plone/volto/components/manage/Blocks/Maps/block-maps.svg';\nimport schema from './schema';\nimport { addPrivacyProtectionToSchema } from '@eeacms/volto-embed/PrivacyProtection';\n\nconst messages = defineMessages({\n  MapsBlockInputPlaceholder: {\n    id: 'Enter map Embed Code',\n    defaultMessage: 'Enter map Embed Code',\n  },\n  left: {\n    id: 'Left',\n    defaultMessage: 'Left',\n  },\n  right: {\n    id: 'Right',\n    defaultMessage: 'Right',\n  },\n  center: {\n    id: 'Center',\n    defaultMessage: 'Center',\n  },\n  full: {\n    id: 'Full',\n    defaultMessage: 'Full',\n  },\n  GoogleMapsEmbeddedBlock: {\n    id: 'Google Maps Embedded Block',\n    defaultMessage: 'Google Maps Embedded Block',\n  },\n});\n\n/**\n * Edit image block class.\n * @class Edit\n * @extends Component\n */\nclass Edit extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    selected: PropTypes.bool.isRequired,\n    block: PropTypes.string.isRequired,\n    index: PropTypes.number.isRequired,\n    data: PropTypes.objectOf(PropTypes.any).isRequired,\n    pathname: PropTypes.string.isRequired,\n    onChangeBlock: PropTypes.func.isRequired,\n    onSelectBlock: PropTypes.func.isRequired,\n    onDeleteBlock: PropTypes.func.isRequired,\n    onFocusPreviousBlock: PropTypes.func.isRequired,\n    onFocusNextBlock: PropTypes.func.isRequired,\n    handleKeyDown: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.getSrc = this.getSrc.bind(this);\n    this.state = {\n      url: '',\n      error: null,\n    };\n    this.onSubmitUrl = this.onSubmitUrl.bind(this);\n  }\n\n  /**\n   * Submit url handler\n   * @method onSubmitUrl\n   * @param {string} e event\n   * @returns {undefined}\n   */\n  onSubmitUrl() {\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      url: this.getSrc(this.props.data.url),\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const { data } = this.props;\n    if (data.url !== prevProps.data.url) {\n      this.onSubmitUrl();\n    }\n  }\n  /**\n   * get getSrc handler\n   * @method getSrc\n   * @param {string} embed Embed HTML code from Google Maps share option\n   * @returns {string} Source URL\n   */\n  // getSrc(embed) {\n  //   // Optimization, don't need the src\n  //   if (!embed.trim().startsWith('<iframe')) {\n  //     return embed;\n  //   }\n  //   const parser = new DOMParser();\n  //   const doc = parser.parseFromString(embed, 'text/html');\n  //   const iframe = doc.getElementsByTagName('iframe');\n  //   if (iframe.length === 0) {\n  //     this.setState({ error: true });\n  //     return '';\n  //   }\n  //   this.setState({ error: false });\n  //   return iframe[0].src;\n  // }\n  getSrc(embed) {\n    if (embed) {\n      const nuts_code =\n        this.props.properties?.data_query?.[0]?.v[0] || '<<NUTS_CODE>>';\n      return embed.replace('<<NUTS_CODE>>', nuts_code);\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <div\n        className={cx(\n          'block maps align',\n          {\n            center: !Boolean(this.props.data.align),\n          },\n          this.props.data.align,\n        )}\n      >\n        {this.props.data.url ? (\n          <PrivacyProtection data={this.props.data} isEditMode {...this.props}>\n            <div\n              className={cx('maps-inner', {\n                'full-width': this.props.data.align === 'full',\n              })}\n            >\n              {this.props.selected ? null : (\n                <div\n                  style={{\n                    position: 'absolute',\n                    top: '0',\n                    left: '0',\n                    right: '0',\n                    bottom: '0',\n                    width: '100%',\n                    height: '100%',\n                  }}\n                  className=\"embed-chart-overlay\"\n                />\n              )}\n              <iframe\n                title={this.props.intl.formatMessage(\n                  messages.GoogleMapsEmbeddedBlock,\n                )}\n                src={this.props.data.url}\n                className=\"google-map\"\n                frameBorder=\"0\"\n                allowFullScreen\n              />\n            </div>\n          </PrivacyProtection>\n        ) : (\n          <Message>\n            <center>\n              <img src={mapsBlockSVG} alt=\"\" />\n              <div className=\"message-text\">\n                <FormattedMessage\n                  id=\"Please use the sidebar to add Embed URL\"\n                  defaultMessage=\"Please use the sidebar to add Embed URL.\"\n                />\n                {this.state.error && (\n                  <div style={{ color: 'red' }}>\n                    <FormattedMessage\n                      id=\"Embed code error, please follow the instructions and try again.\"\n                      defaultMessage=\"Embed code error, please follow the instructions and try again.\"\n                    />\n                  </div>\n                )}\n              </div>\n            </center>\n          </Message>\n        )}\n        <SidebarPortal selected={this.props.selected}>\n          <InlineForm\n            schema={addPrivacyProtectionToSchema(schema)}\n            title={schema.title}\n            onChangeField={(id, value) => {\n              this.props.onChangeBlock(this.props.block, {\n                ...this.props.data,\n                [id]: value,\n              });\n            }}\n            formData={this.props.data}\n          />\n        </SidebarPortal>\n      </div>\n    );\n  }\n}\n\nexport default injectIntl(Edit);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Enter map Embed Code","defaultMessage":"Enter map Embed Code"},{"id":"Left","defaultMessage":"Left"},{"id":"Right","defaultMessage":"Right"},{"id":"Center","defaultMessage":"Center"},{"id":"Full","defaultMessage":"Full"},{"id":"Google Maps Embedded Block","defaultMessage":"Google Maps Embedded Block"},{"id":"Please use the sidebar to add Embed URL","defaultMessage":"Please use the sidebar to add Embed URL."},{"id":"Embed code error, please follow the instructions and try again.","defaultMessage":"Embed code error, please follow the instructions and try again."}]}},"sourceType":"module","externalDependencies":[]}