{"ast":null,"code":"import _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { GET_TAXONOMY, UPDATE_TAXONOMY } from './constants';\nvar initialState = {};\nfunction getRequestKey(actionType) {\n  return actionType.split('_')[0].toLowerCase();\n}\nexport function taxonomy() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case \"\".concat(GET_TAXONOMY, \"_PENDING\"):\n    case \"\".concat(UPDATE_TAXONOMY, \"_PENDING\"):\n      return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, getRequestKey(action.type), {\n        loading: true,\n        loaded: false,\n        error: null\n      }));\n    case \"\".concat(GET_TAXONOMY, \"_SUCCESS\"):\n    case \"\".concat(UPDATE_TAXONOMY, \"_SUCCESS\"):\n      return _objectSpread(_objectSpread({}, state), {}, _defineProperty({\n        data: _objectSpread(_objectSpread({}, state.data), {}, _defineProperty({}, action.url, action.result))\n      }, getRequestKey(action.type), {\n        loading: false,\n        loaded: true,\n        error: null\n      }));\n    case \"\".concat(GET_TAXONOMY, \"_FAIL\"):\n    case \"\".concat(UPDATE_TAXONOMY, \"_FAIL\"):\n      return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, getRequestKey(action.type), {\n        loading: false,\n        loaded: false,\n        error: action.error\n      }));\n    default:\n      break;\n  }\n  return state;\n}","map":{"version":3,"names":["GET_TAXONOMY","UPDATE_TAXONOMY","initialState","getRequestKey","actionType","split","toLowerCase","taxonomy","state","action","type","loading","loaded","error","data","url","result"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-taxonomy/src/reducers.js"],"sourcesContent":["import { GET_TAXONOMY, UPDATE_TAXONOMY } from './constants';\n\nconst initialState = {};\n\nfunction getRequestKey(actionType) {\n  return actionType.split('_')[0].toLowerCase();\n}\n\nexport function taxonomy(state = initialState, action) {\n  switch (action.type) {\n    case `${GET_TAXONOMY}_PENDING`:\n    case `${UPDATE_TAXONOMY}_PENDING`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: true,\n          loaded: false,\n          error: null,\n        },\n      };\n    case `${GET_TAXONOMY}_SUCCESS`:\n    case `${UPDATE_TAXONOMY}_SUCCESS`:\n      return {\n        ...state,\n        data: {\n          ...state.data,\n          [action.url]: action.result,\n        },\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${GET_TAXONOMY}_FAIL`:\n    case `${UPDATE_TAXONOMY}_FAIL`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    default:\n      break;\n  }\n  return state;\n}\n"],"mappings":";;AAAA,SAASA,YAAY,EAAEC,eAAe,QAAQ,aAAa;AAE3D,IAAMC,YAAY,GAAG,CAAC,CAAC;AAEvB,SAASC,aAAa,CAACC,UAAU,EAAE;EACjC,OAAOA,UAAU,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACC,WAAW,EAAE;AAC/C;AAEA,OAAO,SAASC,QAAQ,GAA+B;EAAA,IAA9BC,KAAK,uEAAGN,YAAY;EAAA,IAAEO,MAAM;EACnD,QAAQA,MAAM,CAACC,IAAI;IACjB,eAAQV,YAAY;IACpB,eAAQC,eAAe;MACrB,uCACKO,KAAK,2BACPL,aAAa,CAACM,MAAM,CAACC,IAAI,CAAC,EAAG;QAC5BC,OAAO,EAAE,IAAI;QACbC,MAAM,EAAE,KAAK;QACbC,KAAK,EAAE;MACT,CAAC;IAEL,eAAQb,YAAY;IACpB,eAAQC,eAAe;MACrB,uCACKO,KAAK;QACRM,IAAI,kCACCN,KAAK,CAACM,IAAI,2BACZL,MAAM,CAACM,GAAG,EAAGN,MAAM,CAACO,MAAM;MAC5B,GACAb,aAAa,CAACM,MAAM,CAACC,IAAI,CAAC,EAAG;QAC5BC,OAAO,EAAE,KAAK;QACdC,MAAM,EAAE,IAAI;QACZC,KAAK,EAAE;MACT,CAAC;IAEL,eAAQb,YAAY;IACpB,eAAQC,eAAe;MACrB,uCACKO,KAAK,2BACPL,aAAa,CAACM,MAAM,CAACC,IAAI,CAAC,EAAG;QAC5BC,OAAO,EAAE,KAAK;QACdC,MAAM,EAAE,KAAK;QACbC,KAAK,EAAEJ,MAAM,CAACI;MAChB,CAAC;IAEL;MACE;EAAM;EAEV,OAAOL,KAAK;AACd"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}