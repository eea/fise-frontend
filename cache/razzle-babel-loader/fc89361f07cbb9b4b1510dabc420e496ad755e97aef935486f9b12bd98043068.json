{"ast":null,"code":"import _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"path\", \"secure\"];\nimport config from '@plone/volto/registry';\nexport var getCookieOptions = function getCookieOptions() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _options$path = options.path,\n    path = _options$path === void 0 ? '/' : _options$path,\n    secure = options.secure,\n    otherOptions = _objectWithoutProperties(options, _excluded);\n  var secureOption = secure;\n  try {\n    if (secureOption === undefined || secureOption === null) {\n      var _window$location$prot, _window, _window$location;\n      var protocol = (_window$location$prot = (_window = window) === null || _window === void 0 ? void 0 : (_window$location = _window.location) === null || _window$location === void 0 ? void 0 : _window$location.protocol) !== null && _window$location$prot !== void 0 ? _window$location$prot : 'http';\n      secureOption = protocol.startsWith('https') ? true : false;\n    }\n  } catch (e) {\n    //window is not defined. It's ssr and we use 'secure' option passed from param\n    secureOption = false;\n  }\n  return _objectSpread({\n    path: path,\n    expires: new Date(new Date().getTime() + config.settings.cookieExpires * 1000),\n    secure: secureOption\n  }, otherOptions);\n};","map":{"version":3,"names":["config","getCookieOptions","options","path","secure","otherOptions","secureOption","undefined","protocol","window","location","startsWith","e","expires","Date","getTime","settings","cookieExpires"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/helpers/Cookies/cookies.js"],"sourcesContent":["import config from '@plone/volto/registry';\n\nexport const getCookieOptions = (options = {}) => {\n  const { path = '/', secure, ...otherOptions } = options;\n  let secureOption = secure;\n\n  try {\n    if (secureOption === undefined || secureOption === null) {\n      const protocol = window?.location?.protocol ?? 'http';\n      secureOption = protocol.startsWith('https') ? true : false;\n    }\n  } catch (e) {\n    //window is not defined. It's ssr and we use 'secure' option passed from param\n    secureOption = false;\n  }\n\n  return {\n    path: path,\n    expires: new Date(\n      new Date().getTime() + config.settings.cookieExpires * 1000,\n    ),\n    secure: secureOption,\n    ...otherOptions,\n  };\n};\n"],"mappings":";;;AAAA,OAAOA,MAAM,MAAM,uBAAuB;AAE1C,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgB,GAAqB;EAAA,IAAjBC,OAAO,uEAAG,CAAC,CAAC;EAC3C,oBAAgDA,OAAO,CAA/CC,IAAI;IAAJA,IAAI,8BAAG,GAAG;IAAEC,MAAM,GAAsBF,OAAO,CAAnCE,MAAM;IAAKC,YAAY,4BAAKH,OAAO;EACvD,IAAII,YAAY,GAAGF,MAAM;EAEzB,IAAI;IACF,IAAIE,YAAY,KAAKC,SAAS,IAAID,YAAY,KAAK,IAAI,EAAE;MAAA;MACvD,IAAME,QAAQ,uCAAGC,MAAM,gEAAN,QAAQC,QAAQ,qDAAhB,iBAAkBF,QAAQ,yEAAI,MAAM;MACrDF,YAAY,GAAGE,QAAQ,CAACG,UAAU,CAAC,OAAO,CAAC,GAAG,IAAI,GAAG,KAAK;IAC5D;EACF,CAAC,CAAC,OAAOC,CAAC,EAAE;IACV;IACAN,YAAY,GAAG,KAAK;EACtB;EAEA;IACEH,IAAI,EAAEA,IAAI;IACVU,OAAO,EAAE,IAAIC,IAAI,CACf,IAAIA,IAAI,EAAE,CAACC,OAAO,EAAE,GAAGf,MAAM,CAACgB,QAAQ,CAACC,aAAa,GAAG,IAAI,CAC5D;IACDb,MAAM,EAAEE;EAAY,GACjBD,YAAY;AAEnB,CAAC"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}