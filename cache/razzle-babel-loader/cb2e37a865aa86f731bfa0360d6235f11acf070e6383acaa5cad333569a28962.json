{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-block-image-cards/src/ImageCards/displays/Cards.jsx\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport DefaultImageSVG from '@plone/volto/components/manage/Blocks/Listing/default-image.svg';\nimport React from 'react';\nimport cx from 'classnames';\nimport { Card, Icon, Message } from 'semantic-ui-react';\nimport { UniversalLink } from '@plone/volto/components';\nimport { serializeNodes } from '@plone/volto-slate/editor/render';\nimport { getScaleUrl, getPath } from '../utils';\nimport '@eeacms/volto-block-image-cards/ImageCards/css/cards.less';\nconst alignmentTypes = {\n  left: 'left',\n  right: 'right',\n  center: 'centered',\n  full: 'left'\n};\nconst Cards = props => {\n  const {\n    data,\n    editable\n  } = props;\n  const {\n    align,\n    cards,\n    image_scale,\n    gridSize = 'one',\n    theme = 'default'\n  } = data;\n  const makeImage = item => {\n    const {\n      attachedimage\n    } = item;\n    return __jsx(\"img\", {\n      src: getScaleUrl(getPath(attachedimage), image_scale || 'preview') || DefaultImageSVG,\n      alt: item.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 7\n      }\n    });\n  };\n  const makeTextBody = item => __jsx(React.Fragment, null, __jsx(Card.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, __jsx(Card.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, item.title ? item.title : item.id), item.meta && __jsx(Card.Meta, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 23\n    }\n  }, serializeNodes(item.meta)), item.text && __jsx(Card.Description, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  }, serializeNodes(item.text))), item.link && __jsx(Card.Content, {\n    extra: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, __jsx(UniversalLink, {\n    href: item.link,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }, __jsx(Icon, {\n    name: \"linkify\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }), item.linkTitle || item.link)));\n  return cards && cards.length > 0 ? __jsx(\"div\", {\n    className: cx('ui fluid cards', gridSize),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, cards.map(item => __jsx(Card, {\n    key: item['@id'],\n    className: cx(alignmentTypes[align] || 'left', theme),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, makeImage(item), makeTextBody(item)))) : __jsx(React.Fragment, null, editable ? __jsx(Message, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 19\n    }\n  }, \"No image cards\") : '');\n};\nCards.schema = () => ({\n  title: 'Image Card',\n  fieldsets: [{\n    id: 'default',\n    title: 'Default',\n    fields: ['title', 'meta', 'text', 'attachedimage', 'link', 'linkTitle', 'copyright']\n  }],\n  properties: {\n    title: {\n      type: 'string',\n      title: 'Title'\n    },\n    meta: {\n      widget: 'slate_richtext',\n      title: 'Meta data'\n    },\n    text: {\n      widget: 'slate_richtext',\n      title: 'Text'\n    },\n    link: {\n      widget: 'url',\n      title: 'Link'\n    },\n    linkTitle: {\n      type: 'string',\n      title: 'Link title'\n    },\n    attachedimage: {\n      widget: 'attachedimage',\n      title: 'Image'\n    },\n    copyright: {\n      widget: 'slate_richtext',\n      title: 'Copyright'\n    }\n  },\n  required: ['attachedimage']\n});\nCards.schemaExtender = schema => {\n  return _objectSpread(_objectSpread({}, schema), {}, {\n    fieldsets: [...schema.fieldsets, {\n      id: 'cards_grid',\n      title: 'Cards grid',\n      fields: ['gridSize', 'theme']\n    }],\n    properties: _objectSpread(_objectSpread({}, schema.properties), {}, {\n      gridSize: {\n        title: 'Grid Size',\n        choices: [['one', 'One'], ['two', 'Two'], ['three', 'Three'], ['four', 'Four']],\n        factory: 'Choice',\n        type: 'string'\n      },\n      theme: {\n        title: 'Theme',\n        choices: [['default', 'Default'], ['primary', 'Primary'], ['secondary', 'Secondary'], ['tertiary', 'Tertiary']]\n      }\n    })\n  });\n};\nexport default Cards;","map":{"version":3,"names":["DefaultImageSVG","React","cx","Card","Icon","Message","UniversalLink","serializeNodes","getScaleUrl","getPath","alignmentTypes","left","right","center","full","Cards","props","data","editable","align","cards","image_scale","gridSize","theme","makeImage","item","attachedimage","title","makeTextBody","id","meta","text","link","linkTitle","length","map","schema","fieldsets","fields","properties","type","widget","copyright","required","schemaExtender","choices","factory"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-block-image-cards/src/ImageCards/displays/Cards.jsx"],"sourcesContent":["import DefaultImageSVG from '@plone/volto/components/manage/Blocks/Listing/default-image.svg';\nimport React from 'react';\nimport cx from 'classnames';\nimport { Card, Icon, Message } from 'semantic-ui-react';\nimport { UniversalLink } from '@plone/volto/components';\nimport { serializeNodes } from '@plone/volto-slate/editor/render';\nimport { getScaleUrl, getPath } from '../utils';\n\nimport '@eeacms/volto-block-image-cards/ImageCards/css/cards.less';\n\nconst alignmentTypes = {\n  left: 'left',\n  right: 'right',\n  center: 'centered',\n  full: 'left',\n};\n\nconst Cards = (props) => {\n  const { data, editable } = props;\n  const {\n    align,\n    cards,\n    image_scale,\n    gridSize = 'one',\n    theme = 'default',\n  } = data;\n\n  const makeImage = (item) => {\n    const { attachedimage } = item;\n    return (\n      <img\n        src={\n          getScaleUrl(getPath(attachedimage), image_scale || 'preview') ||\n          DefaultImageSVG\n        }\n        alt={item.title}\n      />\n    );\n  };\n\n  const makeTextBody = (item) => (\n    <>\n      <Card.Content>\n        <Card.Header>{item.title ? item.title : item.id}</Card.Header>\n        {item.meta && <Card.Meta>{serializeNodes(item.meta)}</Card.Meta>}\n        {item.text && (\n          <Card.Description>{serializeNodes(item.text)}</Card.Description>\n        )}\n      </Card.Content>\n      {item.link && (\n        <Card.Content extra>\n          <UniversalLink href={item.link}>\n            <Icon name=\"linkify\" />\n            {item.linkTitle || item.link}\n          </UniversalLink>\n        </Card.Content>\n      )}\n    </>\n  );\n\n  return cards && cards.length > 0 ? (\n    <div className={cx('ui fluid cards', gridSize)}>\n      {cards.map((item) => (\n        <Card\n          key={item['@id']}\n          className={cx(alignmentTypes[align] || 'left', theme)}\n        >\n          {makeImage(item)}\n          {makeTextBody(item)}\n        </Card>\n      ))}\n    </div>\n  ) : (\n    <>{editable ? <Message>No image cards</Message> : ''}</>\n  );\n};\n\nCards.schema = () => ({\n  title: 'Image Card',\n  fieldsets: [\n    {\n      id: 'default',\n      title: 'Default',\n      fields: [\n        'title',\n        'meta',\n        'text',\n        'attachedimage',\n        'link',\n        'linkTitle',\n        'copyright',\n      ],\n    },\n  ],\n\n  properties: {\n    title: {\n      type: 'string',\n      title: 'Title',\n    },\n    meta: {\n      widget: 'slate_richtext',\n      title: 'Meta data',\n    },\n    text: {\n      widget: 'slate_richtext',\n      title: 'Text',\n    },\n    link: {\n      widget: 'url',\n      title: 'Link',\n    },\n    linkTitle: {\n      type: 'string',\n      title: 'Link title',\n    },\n    attachedimage: {\n      widget: 'attachedimage',\n      title: 'Image',\n    },\n    copyright: {\n      widget: 'slate_richtext',\n      title: 'Copyright',\n    },\n  },\n\n  required: ['attachedimage'],\n});\n\nCards.schemaExtender = (schema) => {\n  return {\n    ...schema,\n    fieldsets: [\n      ...schema.fieldsets,\n      {\n        id: 'cards_grid',\n        title: 'Cards grid',\n        fields: ['gridSize', 'theme'],\n      },\n    ],\n    properties: {\n      ...schema.properties,\n      gridSize: {\n        title: 'Grid Size',\n        choices: [\n          ['one', 'One'],\n          ['two', 'Two'],\n          ['three', 'Three'],\n          ['four', 'Four'],\n        ],\n        factory: 'Choice',\n        type: 'string',\n      },\n      theme: {\n        title: 'Theme',\n        choices: [\n          ['default', 'Default'],\n          ['primary', 'Primary'],\n          ['secondary', 'Secondary'],\n          ['tertiary', 'Tertiary'],\n        ],\n      },\n    },\n  };\n};\n\nexport default Cards;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}