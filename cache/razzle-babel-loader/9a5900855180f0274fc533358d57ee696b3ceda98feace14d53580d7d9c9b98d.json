{"ast":null,"code":"import _extends from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/extends.js\";\nimport _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-metadata-block/src/components/manage/Blocks/Metadata/Edit.jsx\",\n  _this = this,\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport cx from 'classnames';\nimport { useSelector } from 'react-redux';\nimport { Field } from '@plone/volto/components';\nimport { SelectMetadataBlock } from '@eeacms/volto-metadata-block/widgets';\nimport '@eeacms/volto-metadata-block/less/editor.less';\nvar EditMetadataBlock = function EditMetadataBlock(props) {\n  _s();\n  var _data$data, _schema$required;\n  var selected = props.selected,\n    block = props.block,\n    onSelectBlock = props.onSelectBlock,\n    data = props.data,\n    onChangeBlock = props.onChangeBlock,\n    onChangeField = props.onChangeField,\n    properties = props.properties,\n    metadata = props.metadata;\n  var _useState = useState(data === null || data === void 0 ? void 0 : (_data$data = data.data) === null || _data$data === void 0 ? void 0 : _data$data.id),\n    metadata_id = _useState[0],\n    setMetadata_id = _useState[1];\n  var schema = useSelector(function (state) {\n    var _state$schema;\n    return (state === null || state === void 0 ? void 0 : (_state$schema = state.schema) === null || _state$schema === void 0 ? void 0 : _state$schema.schema) || {};\n  });\n  var metadata_element = {};\n  metadata ? metadata_element = _objectSpread({}, metadata) : metadata_element = _objectSpread({}, properties);\n  var onMetadataSelect = React.useCallback(function (event, select) {\n    var value = select.value;\n    onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n      data: value\n    }));\n    setMetadata_id(value.id);\n  }, [block, data, onChangeBlock]);\n  var field = schema.properties ? schema.properties[metadata_id] : null;\n  var required = schema === null || schema === void 0 ? void 0 : (_schema$required = schema.required) === null || _schema$required === void 0 ? void 0 : _schema$required.includes(metadata_id);\n  return __jsx(\"div\", {\n    className: cx('block metadata', {\n      selected: selected\n    }),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, field ? __jsx(Field, _extends({}, field, {\n    id: metadata_id,\n    value: metadata_element[metadata_id],\n    required: required,\n    onChange: function onChange(id, value) {\n      onChangeField(id, value);\n    },\n    key: metadata_id,\n    block: block,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  })) : __jsx(SelectMetadataBlock, {\n    onChange: onMetadataSelect,\n    onOpen: function onOpen() {\n      return onSelectBlock(block);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }));\n};\n_s(EditMetadataBlock, \"szyBmrFo0GcC/3ia0MHkiGYIVns=\", false, function () {\n  return [useSelector];\n});\n_c = EditMetadataBlock;\nexport default EditMetadataBlock;\nvar _c;\n$RefreshReg$(_c, \"EditMetadataBlock\");","map":{"version":3,"names":["React","useState","cx","useSelector","Field","SelectMetadataBlock","EditMetadataBlock","props","selected","block","onSelectBlock","data","onChangeBlock","onChangeField","properties","metadata","id","metadata_id","setMetadata_id","schema","state","metadata_element","onMetadataSelect","useCallback","event","select","value","field","required","includes"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-metadata-block/src/components/manage/Blocks/Metadata/Edit.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport cx from 'classnames';\nimport { useSelector } from 'react-redux';\nimport { Field } from '@plone/volto/components';\nimport { SelectMetadataBlock } from '@eeacms/volto-metadata-block/widgets';\nimport '@eeacms/volto-metadata-block/less/editor.less';\n\nconst EditMetadataBlock = (props) => {\n  const {\n    selected,\n    block,\n    onSelectBlock,\n    data,\n    onChangeBlock,\n    onChangeField,\n    properties,\n    metadata,\n  } = props;\n  const [metadata_id, setMetadata_id] = useState(data?.data?.id);\n  const schema = useSelector((state) => {\n    return state?.schema?.schema || {};\n  });\n  let metadata_element = {};\n  metadata\n    ? (metadata_element = { ...metadata })\n    : (metadata_element = { ...properties });\n\n  const onMetadataSelect = React.useCallback(\n    (event, select) => {\n      const { value } = select;\n      onChangeBlock(block, { ...data, data: value });\n      setMetadata_id(value.id);\n    },\n    [block, data, onChangeBlock],\n  );\n\n  const field = schema.properties ? schema.properties[metadata_id] : null;\n  const required = schema?.required?.includes(metadata_id);\n\n  return (\n    <div className={cx('block metadata', { selected: selected })}>\n      {field ? (\n        <Field\n          {...field}\n          id={metadata_id}\n          value={metadata_element[metadata_id]}\n          required={required}\n          onChange={(id, value) => {\n            onChangeField(id, value);\n          }}\n          key={metadata_id}\n          block={block}\n        />\n      ) : (\n        <SelectMetadataBlock\n          onChange={onMetadataSelect}\n          onOpen={() => onSelectBlock(block)}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default EditMetadataBlock;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}