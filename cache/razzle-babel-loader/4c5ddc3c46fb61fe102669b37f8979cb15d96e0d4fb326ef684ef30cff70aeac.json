{"ast":null,"code":"/**\n * AuthToken helper.\n * @module helpers/AuthToken\n */\n\nimport Cookies from 'universal-cookie';\nimport jwtDecode from 'jwt-decode';\nimport { loginRenew } from '@plone/volto/actions';\nimport { getCookieOptions } from '@plone/volto/helpers';\nimport { push } from 'connected-react-router';\n\n/**\n * Get auth token method (does not work in SSR)\n * @method getAuthToken\n * @returns {undefined}\n */\nexport function getAuthToken() {\n  var cookies = new Cookies();\n  return cookies.get('auth_token');\n}\n\n/**\n * Persist auth token method.\n * @method persistAuthToken\n * @param {object} store Redux store.\n * @returns {undefined}\n */\nexport function persistAuthToken(store, req) {\n  var cookies = new Cookies();\n  var currentValue;\n  if (req) {\n    // We are in SSR\n    currentValue = req.universalCookies.get('auth_token');\n  } else {\n    currentValue = cookies.get('auth_token');\n  }\n\n  /**\n   * handleChange method.\n   * @method handleChange\n   * @param {bool} initial Initial call.\n   * @returns {undefined}\n   */\n  function handleChange(initial) {\n    var previousValue = currentValue;\n    var state = store.getState();\n    currentValue = state.userSession.token;\n    if (module.hot && module.hot.data && module.hot.data.reloaded && previousValue) {\n      currentValue = previousValue;\n    }\n    if (previousValue !== currentValue || initial) {\n      if (!currentValue) {\n        if (previousValue) {\n          cookies.remove('auth_token', {\n            path: '/'\n          });\n        }\n      } else {\n        if (previousValue !== currentValue) {\n          cookies.set('auth_token', currentValue, getCookieOptions({\n            expires: new Date(jwtDecode(currentValue).exp * 1000)\n          }));\n        }\n        var exp = (jwtDecode(store.getState().userSession.token).exp * 1000 - new Date().getTime()) * 0.9 || 3600000;\n        setTimeout(function () {\n          if (store.getState().userSession.token) {\n            if (jwtDecode(store.getState().userSession.token).exp * 1000 > new Date().getTime()) {\n              store.dispatch(loginRenew());\n            } else {\n              // Logout\n              store.dispatch(push(\"/logout?return_url=\".concat(store.getState().router.location.pathname)));\n            }\n          }\n        }, exp);\n      }\n    }\n  }\n  store.subscribe(handleChange);\n  handleChange(true);\n}\nif (module.hot) {\n  module.hot.dispose(function (data) {\n    data.reloaded = true;\n  });\n}","map":{"version":3,"names":["Cookies","jwtDecode","loginRenew","getCookieOptions","push","getAuthToken","cookies","get","persistAuthToken","store","req","currentValue","universalCookies","handleChange","initial","previousValue","state","getState","userSession","token","module","hot","data","reloaded","remove","path","set","expires","Date","exp","getTime","setTimeout","dispatch","router","location","pathname","subscribe","dispose"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/helpers/AuthToken/AuthToken.js"],"sourcesContent":["/**\n * AuthToken helper.\n * @module helpers/AuthToken\n */\n\nimport Cookies from 'universal-cookie';\nimport jwtDecode from 'jwt-decode';\n\nimport { loginRenew } from '@plone/volto/actions';\nimport { getCookieOptions } from '@plone/volto/helpers';\nimport { push } from 'connected-react-router';\n\n/**\n * Get auth token method (does not work in SSR)\n * @method getAuthToken\n * @returns {undefined}\n */\nexport function getAuthToken() {\n  const cookies = new Cookies();\n  return cookies.get('auth_token');\n}\n\n/**\n * Persist auth token method.\n * @method persistAuthToken\n * @param {object} store Redux store.\n * @returns {undefined}\n */\nexport function persistAuthToken(store, req) {\n  const cookies = new Cookies();\n  let currentValue;\n  if (req) {\n    // We are in SSR\n    currentValue = req.universalCookies.get('auth_token');\n  } else {\n    currentValue = cookies.get('auth_token');\n  }\n\n  /**\n   * handleChange method.\n   * @method handleChange\n   * @param {bool} initial Initial call.\n   * @returns {undefined}\n   */\n  function handleChange(initial) {\n    const previousValue = currentValue;\n    const state = store.getState();\n    currentValue = state.userSession.token;\n\n    if (\n      module.hot &&\n      module.hot.data &&\n      module.hot.data.reloaded &&\n      previousValue\n    ) {\n      currentValue = previousValue;\n    }\n\n    if (previousValue !== currentValue || initial) {\n      if (!currentValue) {\n        if (previousValue) {\n          cookies.remove('auth_token', { path: '/' });\n        }\n      } else {\n        if (previousValue !== currentValue) {\n          cookies.set(\n            'auth_token',\n            currentValue,\n            getCookieOptions({\n              expires: new Date(jwtDecode(currentValue).exp * 1000),\n            }),\n          );\n        }\n        const exp =\n          (jwtDecode(store.getState().userSession.token).exp * 1000 -\n            new Date().getTime()) *\n            0.9 || 3600000;\n        setTimeout(() => {\n          if (store.getState().userSession.token) {\n            if (\n              jwtDecode(store.getState().userSession.token).exp * 1000 >\n              new Date().getTime()\n            ) {\n              store.dispatch(loginRenew());\n            } else {\n              // Logout\n              store.dispatch(\n                push(\n                  `/logout?return_url=${\n                    store.getState().router.location.pathname\n                  }`,\n                ),\n              );\n            }\n          }\n        }, exp);\n      }\n    }\n  }\n\n  store.subscribe(handleChange);\n  handleChange(true);\n}\n\nif (module.hot) {\n  module.hot.dispose((data) => {\n    data.reloaded = true;\n  });\n}\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}