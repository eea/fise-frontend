{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-forests-theme/src/customizations/volto/components/manage/Blocks/Block/Settings.jsx\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport InlineForm from '@plone/volto/components/manage/Form/InlineForm';\nconst Settings = ({\n  data,\n  block,\n  onChangeBlock,\n  schema\n}) => {\n  return __jsx(InlineForm, {\n    schema: schema,\n    title: schema.title,\n    onChangeField: (id, value) => {\n      onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n        [id]: value\n      }));\n    },\n    formData: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 5\n    }\n  });\n};\nSettings.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  block: PropTypes.string.isRequired,\n  onChangeBlock: PropTypes.func.isRequired,\n  schema: PropTypes.objectOf(PropTypes.any).isRequired\n};\nexport default injectIntl(Settings);","map":{"version":3,"names":["React","PropTypes","injectIntl","InlineForm","Settings","data","block","onChangeBlock","schema","title","id","value","propTypes","objectOf","any","isRequired","string","func"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-forests-theme/src/customizations/volto/components/manage/Blocks/Block/Settings.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport InlineForm from '@plone/volto/components/manage/Form/InlineForm';\n\nconst Settings = ({ data, block, onChangeBlock, schema }) => {\n  return (\n    <InlineForm\n      schema={schema}\n      title={schema.title}\n      onChangeField={(id, value) => {\n        onChangeBlock(block, {\n          ...data,\n          [id]: value,\n        });\n      }}\n      formData={data}\n    />\n  );\n};\n\nSettings.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  block: PropTypes.string.isRequired,\n  onChangeBlock: PropTypes.func.isRequired,\n  schema: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default injectIntl(Settings);\n"],"mappings":";;;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,UAAU,QAAQ,YAAY;AACvC,OAAOC,UAAU,MAAM,gDAAgD;AAEvE,MAAMC,QAAQ,GAAG,CAAC;EAAEC,IAAI;EAAEC,KAAK;EAAEC,aAAa;EAAEC;AAAO,CAAC,KAAK;EAC3D,OACE,MAAC,UAAU;IACT,MAAM,EAAEA,MAAO;IACf,KAAK,EAAEA,MAAM,CAACC,KAAM;IACpB,aAAa,EAAE,CAACC,EAAE,EAAEC,KAAK,KAAK;MAC5BJ,aAAa,CAACD,KAAK,kCACdD,IAAI;QACP,CAACK,EAAE,GAAGC;MAAK,GACX;IACJ,CAAE;IACF,QAAQ,EAAEN,IAAK;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EACf;AAEN,CAAC;AAEDD,QAAQ,CAACQ,SAAS,GAAG;EACnBP,IAAI,EAAEJ,SAAS,CAACY,QAAQ,CAACZ,SAAS,CAACa,GAAG,CAAC,CAACC,UAAU;EAClDT,KAAK,EAAEL,SAAS,CAACe,MAAM,CAACD,UAAU;EAClCR,aAAa,EAAEN,SAAS,CAACgB,IAAI,CAACF,UAAU;EACxCP,MAAM,EAAEP,SAAS,CAACY,QAAQ,CAACZ,SAAS,CAACa,GAAG,CAAC,CAACC;AAC5C,CAAC;AAED,eAAeb,UAAU,CAACE,QAAQ,CAAC"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}