{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-widget-geolocation/src/components/manage/Widgets/SearchGeoName.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport React from 'react';\nimport InlineForm from './InlineForm';\nimport { Icon as VoltoIcon } from '@plone/volto/components';\nimport { useSelector, shallowEqual, useDispatch } from 'react-redux';\nimport { GeoSearchSchema as schema } from './schema';\nimport ListResults from './ListResults';\nimport { getGeonameSettings } from '@eeacms/volto-widget-geolocation/actions';\nimport worldSVG from '@plone/volto/icons/world.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport checkSVG from '@plone/volto/icons/check.svg';\nexport default (props => {\n  var _subrequest$geonamesU, _subrequest$geonamesU2, _subrequest$geonamesU3;\n  const {\n    id,\n    data,\n    block,\n    setPopup,\n    onChange,\n    onChangeSchema\n  } = props;\n  const [resultsValue, setResultsValue] = React.useState(data.geolocation);\n  const InlineFormSchema = schema(props);\n  const [searchUrl, setSearchUrl] = React.useState('');\n  const subrequest = useSelector(state => state.content.subrequests, shallowEqual);\n  const geonamesUrl = Object.keys(subrequest).find(item => item === searchUrl);\n  const results = (_subrequest$geonamesU = subrequest[geonamesUrl]) === null || _subrequest$geonamesU === void 0 ? void 0 : (_subrequest$geonamesU2 = _subrequest$geonamesU.data) === null || _subrequest$geonamesU2 === void 0 ? void 0 : _subrequest$geonamesU2.geonames;\n  const loading = (_subrequest$geonamesU3 = subrequest[geonamesUrl]) === null || _subrequest$geonamesU3 === void 0 ? void 0 : _subrequest$geonamesU3.loading;\n  const dispatch = useDispatch();\n  const saveResultsValue = item => {\n    setResultsValue(prevState => [...(prevState || []), {\n      label: item.toponymName,\n      value: 'geo-' + item.geonameId\n    }]);\n  };\n  const changeTaglist = (field, value) => {\n    setResultsValue(prevState => field ? field.map(item => ({\n      label: item.label,\n      value: item.value\n    })) : null);\n  };\n  //componentDidMount\n  React.useEffect(() => {\n    dispatch(getGeonameSettings());\n  }, [dispatch]);\n  const onChangeValues = React.useCallback((field, value) => {\n    if (field === 'searchUrl') {\n      setSearchUrl(value);\n    } else if (onChangeSchema) {\n      onChangeSchema(field, value);\n    } else {\n      onChange(id, _objectSpread(_objectSpread({}, data), {}, {\n        [field]: value\n      })); //eea.coremetadata: As we don't have blocksData here\n    }\n  }, [onChangeSchema, onChange, data, id]);\n  return __jsx(InlineForm, _extends({\n    data: data,\n    schema: InlineFormSchema,\n    block: block,\n    setValue: changeTaglist,\n    value: resultsValue,\n    title: schema.title,\n    icon: __jsx(VoltoIcon, {\n      size: \"24px\",\n      name: worldSVG,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }\n    }),\n    onChangeField: (id, value) => {\n      return onChangeValues(id, value);\n    },\n    headerActions: __jsx(React.Fragment, null, __jsx(\"button\", {\n      onClick: () => {\n        onChange(id, Array.isArray(resultsValue) //eea.coremetadata behaviour #https://github.com/eea/eea.coremetadata/blob/develop/eea/coremetadata/interfaces.py#L130\n        ? {\n          geolocation: resultsValue\n        } : resultsValue);\n        setPopup(false);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }\n    }, __jsx(VoltoIcon, {\n      size: \"24px\",\n      name: checkSVG,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 13\n      }\n    })), __jsx(\"button\", {\n      onClick: () => {\n        setPopup(false);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }\n    }, __jsx(VoltoIcon, {\n      size: \"24px\",\n      name: clearSVG,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }\n    }))),\n    footer: (results === null || results === void 0 ? void 0 : results.length) && __jsx(ListResults, {\n      results: results,\n      loading: loading,\n      setValue: saveResultsValue,\n      value: resultsValue,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }\n    })\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }));\n});","map":{"version":3,"names":["React","InlineForm","Icon","VoltoIcon","useSelector","shallowEqual","useDispatch","GeoSearchSchema","schema","ListResults","getGeonameSettings","worldSVG","clearSVG","checkSVG","props","id","data","block","setPopup","onChange","onChangeSchema","resultsValue","setResultsValue","useState","geolocation","InlineFormSchema","searchUrl","setSearchUrl","subrequest","state","content","subrequests","geonamesUrl","Object","keys","find","item","results","geonames","loading","dispatch","saveResultsValue","prevState","label","toponymName","value","geonameId","changeTaglist","field","map","useEffect","onChangeValues","useCallback","title","Array","isArray","length"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-widget-geolocation/src/components/manage/Widgets/SearchGeoName.jsx"],"sourcesContent":["import React from 'react';\nimport InlineForm from './InlineForm';\nimport { Icon as VoltoIcon } from '@plone/volto/components';\nimport { useSelector, shallowEqual, useDispatch } from 'react-redux';\n\nimport { GeoSearchSchema as schema } from './schema';\nimport ListResults from './ListResults';\nimport { getGeonameSettings } from '@eeacms/volto-widget-geolocation/actions';\nimport worldSVG from '@plone/volto/icons/world.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport checkSVG from '@plone/volto/icons/check.svg';\n\nexport default (props) => {\n  const { id, data, block, setPopup, onChange, onChangeSchema } = props;\n  const [resultsValue, setResultsValue] = React.useState(data.geolocation);\n  const InlineFormSchema = schema(props);\n  const [searchUrl, setSearchUrl] = React.useState('');\n  const subrequest = useSelector(\n    (state) => state.content.subrequests,\n    shallowEqual,\n  );\n  const geonamesUrl = Object.keys(subrequest).find(\n    (item) => item === searchUrl,\n  );\n  const results = subrequest[geonamesUrl]?.data?.geonames;\n  const loading = subrequest[geonamesUrl]?.loading;\n  const dispatch = useDispatch();\n\n  const saveResultsValue = (item) => {\n    setResultsValue((prevState) => [\n      ...(prevState || []),\n      {\n        label: item.toponymName,\n        value: 'geo-' + item.geonameId,\n      },\n    ]);\n  };\n\n  const changeTaglist = (field, value) => {\n    setResultsValue((prevState) =>\n      field\n        ? field.map((item) => ({\n            label: item.label,\n            value: item.value,\n          }))\n        : null,\n    );\n  };\n  //componentDidMount\n  React.useEffect(() => {\n    dispatch(getGeonameSettings());\n  }, [dispatch]);\n\n  const onChangeValues = React.useCallback(\n    (field, value) => {\n      if (field === 'searchUrl') {\n        setSearchUrl(value);\n      } else if (onChangeSchema) {\n        onChangeSchema(field, value);\n      } else {\n        onChange(id, { ...data, [field]: value }); //eea.coremetadata: As we don't have blocksData here\n      }\n    },\n    [onChangeSchema, onChange, data, id],\n  );\n  return (\n    <InlineForm\n      data={data}\n      schema={InlineFormSchema}\n      block={block}\n      setValue={changeTaglist}\n      value={resultsValue}\n      title={schema.title}\n      icon={<VoltoIcon size=\"24px\" name={worldSVG} />}\n      onChangeField={(id, value) => {\n        return onChangeValues(id, value);\n      }}\n      headerActions={\n        <>\n          <button\n            onClick={() => {\n              onChange(\n                id,\n                Array.isArray(resultsValue) //eea.coremetadata behaviour #https://github.com/eea/eea.coremetadata/blob/develop/eea/coremetadata/interfaces.py#L130\n                  ? { geolocation: resultsValue }\n                  : resultsValue,\n              );\n              setPopup(false);\n            }}\n          >\n            <VoltoIcon size=\"24px\" name={checkSVG} />\n          </button>\n          <button\n            onClick={() => {\n              setPopup(false);\n            }}\n          >\n            <VoltoIcon size=\"24px\" name={clearSVG} />\n          </button>\n        </>\n      }\n      footer={\n        results?.length && (\n          <ListResults\n            results={results}\n            loading={loading}\n            setValue={saveResultsValue}\n            value={resultsValue}\n          />\n        )\n      }\n      {...props}\n    />\n  );\n};\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}