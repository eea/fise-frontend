{"ast":null,"code":"import _isEqual from \"lodash/isEqual\";\nimport _includes from \"lodash/includes\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Blocks/Text/Edit.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n/**\n * Edit text block.\n * @module components/manage/Blocks/Title/Edit\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport config from '@plone/volto/registry';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport { BlockChooserButton } from '@plone/volto/components';\nimport loadable from '@loadable/component';\nconst Editor = loadable({\n  resolved: {},\n  chunkName() {\n    return \"draft-js-plugins-editor\";\n  },\n  isReady(props) {\n    var key = this.resolve(props);\n    if (this.resolved[key] !== true) {\n      return false;\n    }\n    if (typeof __webpack_modules__ !== 'undefined') {\n      return !!__webpack_modules__[key];\n    }\n    return false;\n  },\n  importAsync: () => import( /* webpackChunkName: \"draft-js-plugins-editor\" */'draft-js-plugins-editor'),\n  requireAsync(props) {\n    var _this = this;\n    var key = this.resolve(props);\n    this.resolved[key] = false;\n    return this.importAsync(props).then(function (resolved) {\n      _this.resolved[key] = true;\n      return resolved;\n    });\n  },\n  requireSync(props) {\n    var id = this.resolve(props);\n    if (typeof __webpack_require__ !== 'undefined') {\n      return __webpack_require__(id);\n    }\n    return eval('module.require')(id);\n  },\n  resolve() {\n    if (require.resolveWeak) {\n      return require.resolveWeak(\"draft-js-plugins-editor\");\n    }\n    return eval('require.resolve')(\"draft-js-plugins-editor\");\n  }\n});\nconst messages = defineMessages({\n  text: {\n    \"id\": \"Type text\\u2026\",\n    \"defaultMessage\": \"Type text\\u2026\"\n  }\n});\n\n/**\n * Edit text block class.\n * @class Edit\n * @extends Component\n */\nexport class EditComponent extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    const {\n      settings\n    } = config;\n    this.draftConfig = settings.richtextEditorSettings(props);\n    const {\n      EditorState,\n      convertFromRaw\n    } = props.draftJs;\n    const createInlineToolbarPlugin = props.draftJsInlineToolbarPlugin.default;\n    if (!__SERVER__) {\n      let editorState;\n      if (props.data && props.data.text) {\n        editorState = EditorState.createWithContent(convertFromRaw(props.data.text));\n      } else {\n        editorState = EditorState.createEmpty();\n      }\n      const inlineToolbarPlugin = createInlineToolbarPlugin({\n        structure: this.draftConfig.richTextEditorInlineToolbarButtons\n      });\n      this.state = {\n        editorState,\n        inlineToolbarPlugin\n      };\n    }\n    this.onChange = this.onChange.bind(this);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    if (this.props.selected) {\n      // See https://github.com/draft-js-plugins/draft-js-plugins/issues/800\n      setTimeout(this.node.focus, 0);\n    }\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (!this.props.selected && nextProps.selected) {\n      const selectionState = this.state.editorState.getSelection();\n      if (selectionState.getStartOffset() < selectionState.getEndOffset()) {\n        //keep selection\n      } else {\n        //nothing is selected, move focus to end\n        // See https://github.com/draft-js-plugins/draft-js-plugins/issues/800\n        setTimeout(this.node.focus, 0);\n        const {\n          EditorState\n        } = this.props.draftJs;\n        this.setState({\n          editorState: EditorState.moveFocusToEnd(this.state.editorState)\n        });\n      }\n    }\n  }\n  componentDidUpdate(prevProps) {\n    const {\n      convertToRaw,\n      EditorState,\n      convertFromRaw\n    } = this.props.draftJs;\n    if (!_isEqual(this.props.data, prevProps.data) && !_isEqual(convertToRaw(this.state.editorState.getCurrentContent()), this.props.data.text)) {\n      const editorState = this.props.data && this.props.data.text ? EditorState.createWithContent(convertFromRaw(this.props.data.text)) : EditorState.createEmpty();\n      this.setState({\n        editorState: editorState\n      });\n    }\n  }\n\n  /**\n   * @param {*} nextProps\n   * @param {*} nextState\n   * @returns {boolean}\n   * @memberof Edit\n   */\n  shouldComponentUpdate(nextProps, nextState) {\n    return this.props.selected || !_isEqual(this.props.data, nextProps.data) || !_isEqual(this.state.editorState, nextState.editorState);\n  }\n\n  /**\n   * Change handler\n   * @method onChange\n   * @param {object} editorState Editor state.\n   * @returns {undefined}\n   */\n  onChange(editorState) {\n    const shouldFilterPaste = editorState.getLastChangeType() === 'insert-fragment';\n    const {\n      convertToRaw\n    } = this.props.draftJs;\n    const {\n      filterEditorState\n    } = this.props.draftJsFilters;\n    if (!_isEqual(convertToRaw(editorState.getCurrentContent()), convertToRaw(this.state.editorState.getCurrentContent()))) {\n      if (shouldFilterPaste) {\n        let filteredState = editorState;\n        filteredState = filterEditorState({\n          blocks: ['unordered-list-item', 'ordered-list-item'],\n          styles: ['BOLD', 'ITALIC'],\n          entities: [{\n            type: 'LINK',\n            attributes: ['url']\n          }],\n          whitespacedCharacters: []\n        }, filteredState);\n        editorState = filteredState;\n      }\n      this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n        text: convertToRaw(editorState.getCurrentContent())\n      }));\n    }\n    this.setState({\n      editorState\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    var _this$props$data;\n    // console.log('draft config', this.draftConfig);\n\n    if (__SERVER__) {\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 14\n        }\n      });\n    }\n    const placeholder = this.props.data.placeholder || this.props.formTitle || this.props.intl.formatMessage(messages.text);\n    const disableNewBlocks = ((_this$props$data = this.props.data) === null || _this$props$data === void 0 ? void 0 : _this$props$data.disableNewBlocks) || this.props.detached;\n    const {\n      InlineToolbar\n    } = this.state.inlineToolbarPlugin;\n    // const { settings } = config;\n\n    const isSoftNewlineEvent = this.props.draftJsLibIsSoftNewlineEvent.default;\n    const {\n      RichUtils\n    } = this.props.draftJs;\n    return __jsx(React.Fragment, null, __jsx(Editor, {\n      readOnly: !this.props.editable,\n      onChange: this.onChange,\n      editorState: this.state.editorState,\n      plugins: [this.state.inlineToolbarPlugin,\n      // ...settings.richTextEditorPlugins,\n      ...this.draftConfig.richTextEditorPlugins],\n      blockRenderMap: this.draftConfig.extendedBlockRenderMap,\n      blockStyleFn: this.draftConfig.blockStyleFn,\n      customStyleMap: this.draftConfig.customStyleMap,\n      placeholder: placeholder,\n      handleReturn: e => {\n        if (isSoftNewlineEvent(e)) {\n          this.onChange(RichUtils.insertSoftNewline(this.state.editorState));\n          return 'handled';\n        }\n        if (!disableNewBlocks) {\n          const selectionState = this.state.editorState.getSelection();\n          const anchorKey = selectionState.getAnchorKey();\n          const currentContent = this.state.editorState.getCurrentContent();\n          const currentContentBlock = currentContent.getBlockForKey(anchorKey);\n          const blockType = currentContentBlock.getType();\n          if (!_includes(this.draftConfig.listBlockTypes, blockType)) {\n            this.props.onSelectBlock(this.props.onAddBlock(config.settings.defaultBlockType, this.props.index + 1));\n            return 'handled';\n          }\n          return 'un-handled';\n        }\n        return {};\n      },\n      handleKeyCommand: (command, editorState) => {\n        if (this.props.data.required) {\n          return;\n        }\n        if (command === 'backspace' && editorState.getCurrentContent().getPlainText().length === 0) {\n          this.props.onDeleteBlock(this.props.block, true);\n        }\n      },\n      onUpArrow: () => {\n        const selectionState = this.state.editorState.getSelection();\n        const currentCursorPosition = selectionState.getStartOffset();\n        if (currentCursorPosition === 0) {\n          this.props.onFocusPreviousBlock(this.props.block, this.node);\n        }\n      },\n      onDownArrow: () => {\n        const selectionState = this.state.editorState.getSelection();\n        const {\n          editorState\n        } = this.state;\n        const currentCursorPosition = selectionState.getStartOffset();\n        const blockLength = editorState.getCurrentContent().getFirstBlock().getLength();\n        if (currentCursorPosition === blockLength) {\n          this.props.onFocusNextBlock(this.props.block, this.node);\n        }\n      },\n      ref: node => {\n        this.node = node;\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }\n    }), __jsx(InlineToolbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 9\n      }\n    }), this.props.selected && __jsx(BlockChooserButton, {\n      data: this.props.data,\n      block: this.props.block,\n      onInsertBlock: (id, value) => {\n        this.props.onSelectBlock(this.props.onInsertBlock(id, value));\n      },\n      allowedBlocks: this.props.allowedBlocks,\n      blocksConfig: this.props.blocksConfig,\n      size: \"24px\",\n      className: \"block-add-button\",\n      properties: this.props.properties,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 11\n      }\n    }));\n  }\n}\n_defineProperty(EditComponent, \"propTypes\", {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  detached: PropTypes.bool,\n  index: PropTypes.number.isRequired,\n  selected: PropTypes.bool.isRequired,\n  block: PropTypes.string.isRequired,\n  onAddBlock: PropTypes.func.isRequired,\n  onInsertBlock: PropTypes.func.isRequired,\n  onChangeBlock: PropTypes.func.isRequired,\n  onDeleteBlock: PropTypes.func.isRequired,\n  onMutateBlock: PropTypes.func.isRequired,\n  onFocusPreviousBlock: PropTypes.func.isRequired,\n  onFocusNextBlock: PropTypes.func.isRequired,\n  onSelectBlock: PropTypes.func.isRequired,\n  editable: PropTypes.bool,\n  allowedBlocks: PropTypes.arrayOf(PropTypes.string),\n  showRestricted: PropTypes.bool,\n  formTitle: PropTypes.string,\n  formDescription: PropTypes.string,\n  blocksConfig: PropTypes.objectOf(PropTypes.any),\n  properties: PropTypes.objectOf(PropTypes.any)\n});\n_defineProperty(EditComponent, \"defaultProps\", {\n  detached: false,\n  editable: true\n});\nexport const Edit = compose(injectIntl, injectLazyLibs(['draftJs', 'draftJsLibIsSoftNewlineEvent', 'draftJsFilters', 'draftJsInlineToolbarPlugin', 'draftJsBlockBreakoutPlugin', 'draftJsCreateInlineStyleButton', 'draftJsCreateBlockStyleButton', 'immutableLib'\n// TODO: add all plugin dependencies, also in Wysiwyg and Cell\n]))(EditComponent);\nconst Preloader = props => {\n  const [loaded, setLoaded] = React.useState(false);\n  React.useEffect(() => {\n    Editor.load().then(() => setLoaded(true));\n  }, []);\n  return loaded ? __jsx(Edit, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 19\n    }\n  })) : null;\n};\nexport default Preloader;","map":{"version":3,"names":["React","Component","PropTypes","compose","defineMessages","injectIntl","config","injectLazyLibs","BlockChooserButton","loadable","Editor","messages","text","EditComponent","constructor","props","settings","draftConfig","richtextEditorSettings","EditorState","convertFromRaw","draftJs","createInlineToolbarPlugin","draftJsInlineToolbarPlugin","default","__SERVER__","editorState","data","createWithContent","createEmpty","inlineToolbarPlugin","structure","richTextEditorInlineToolbarButtons","state","onChange","bind","componentDidMount","selected","setTimeout","node","focus","UNSAFE_componentWillReceiveProps","nextProps","selectionState","getSelection","getStartOffset","getEndOffset","setState","moveFocusToEnd","componentDidUpdate","prevProps","convertToRaw","getCurrentContent","shouldComponentUpdate","nextState","shouldFilterPaste","getLastChangeType","filterEditorState","draftJsFilters","filteredState","blocks","styles","entities","type","attributes","whitespacedCharacters","onChangeBlock","block","render","placeholder","formTitle","intl","formatMessage","disableNewBlocks","detached","InlineToolbar","isSoftNewlineEvent","draftJsLibIsSoftNewlineEvent","RichUtils","editable","richTextEditorPlugins","extendedBlockRenderMap","blockStyleFn","customStyleMap","e","insertSoftNewline","anchorKey","getAnchorKey","currentContent","currentContentBlock","getBlockForKey","blockType","getType","listBlockTypes","onSelectBlock","onAddBlock","defaultBlockType","index","command","required","getPlainText","length","onDeleteBlock","currentCursorPosition","onFocusPreviousBlock","blockLength","getFirstBlock","getLength","onFocusNextBlock","id","value","onInsertBlock","allowedBlocks","blocksConfig","properties","objectOf","any","isRequired","bool","number","string","func","onMutateBlock","arrayOf","showRestricted","formDescription","Edit","Preloader","loaded","setLoaded","useState","useEffect","load","then"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Blocks/Text/Edit.jsx"],"sourcesContent":["/**\n * Edit text block.\n * @module components/manage/Blocks/Title/Edit\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\n\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { includes, isEqual } from 'lodash';\nimport config from '@plone/volto/registry';\n\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport { BlockChooserButton } from '@plone/volto/components';\n\nimport loadable from '@loadable/component';\n\nconst Editor = loadable(() => import('draft-js-plugins-editor'));\n\nconst messages = defineMessages({\n  text: {\n    id: 'Type text…',\n    defaultMessage: 'Type text…',\n  },\n});\n\n/**\n * Edit text block class.\n * @class Edit\n * @extends Component\n */\nexport class EditComponent extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    data: PropTypes.objectOf(PropTypes.any).isRequired,\n    detached: PropTypes.bool,\n    index: PropTypes.number.isRequired,\n    selected: PropTypes.bool.isRequired,\n    block: PropTypes.string.isRequired,\n    onAddBlock: PropTypes.func.isRequired,\n    onInsertBlock: PropTypes.func.isRequired,\n    onChangeBlock: PropTypes.func.isRequired,\n    onDeleteBlock: PropTypes.func.isRequired,\n    onMutateBlock: PropTypes.func.isRequired,\n    onFocusPreviousBlock: PropTypes.func.isRequired,\n    onFocusNextBlock: PropTypes.func.isRequired,\n    onSelectBlock: PropTypes.func.isRequired,\n    editable: PropTypes.bool,\n    allowedBlocks: PropTypes.arrayOf(PropTypes.string),\n    showRestricted: PropTypes.bool,\n    formTitle: PropTypes.string,\n    formDescription: PropTypes.string,\n    blocksConfig: PropTypes.objectOf(PropTypes.any),\n    properties: PropTypes.objectOf(PropTypes.any),\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    detached: false,\n    editable: true,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n\n    const { settings } = config;\n\n    this.draftConfig = settings.richtextEditorSettings(props);\n\n    const { EditorState, convertFromRaw } = props.draftJs;\n    const createInlineToolbarPlugin = props.draftJsInlineToolbarPlugin.default;\n\n    if (!__SERVER__) {\n      let editorState;\n      if (props.data && props.data.text) {\n        editorState = EditorState.createWithContent(\n          convertFromRaw(props.data.text),\n        );\n      } else {\n        editorState = EditorState.createEmpty();\n      }\n\n      const inlineToolbarPlugin = createInlineToolbarPlugin({\n        structure: this.draftConfig.richTextEditorInlineToolbarButtons,\n      });\n\n      this.state = {\n        editorState,\n        inlineToolbarPlugin,\n      };\n    }\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    if (this.props.selected) {\n      // See https://github.com/draft-js-plugins/draft-js-plugins/issues/800\n      setTimeout(this.node.focus, 0);\n    }\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (!this.props.selected && nextProps.selected) {\n      const selectionState = this.state.editorState.getSelection();\n\n      if (selectionState.getStartOffset() < selectionState.getEndOffset()) {\n        //keep selection\n      } else {\n        //nothing is selected, move focus to end\n        // See https://github.com/draft-js-plugins/draft-js-plugins/issues/800\n        setTimeout(this.node.focus, 0);\n        const { EditorState } = this.props.draftJs;\n\n        this.setState({\n          editorState: EditorState.moveFocusToEnd(this.state.editorState),\n        });\n      }\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { convertToRaw, EditorState, convertFromRaw } = this.props.draftJs;\n    if (\n      !isEqual(this.props.data, prevProps.data) &&\n      !isEqual(\n        convertToRaw(this.state.editorState.getCurrentContent()),\n        this.props.data.text,\n      )\n    ) {\n      const editorState =\n        this.props.data && this.props.data.text\n          ? EditorState.createWithContent(convertFromRaw(this.props.data.text))\n          : EditorState.createEmpty();\n\n      this.setState({\n        editorState: editorState,\n      });\n    }\n  }\n\n  /**\n   * @param {*} nextProps\n   * @param {*} nextState\n   * @returns {boolean}\n   * @memberof Edit\n   */\n  shouldComponentUpdate(nextProps, nextState) {\n    return (\n      this.props.selected ||\n      !isEqual(this.props.data, nextProps.data) ||\n      !isEqual(this.state.editorState, nextState.editorState)\n    );\n  }\n\n  /**\n   * Change handler\n   * @method onChange\n   * @param {object} editorState Editor state.\n   * @returns {undefined}\n   */\n  onChange(editorState) {\n    const shouldFilterPaste =\n      editorState.getLastChangeType() === 'insert-fragment';\n\n    const { convertToRaw } = this.props.draftJs;\n    const { filterEditorState } = this.props.draftJsFilters;\n\n    if (\n      !isEqual(\n        convertToRaw(editorState.getCurrentContent()),\n        convertToRaw(this.state.editorState.getCurrentContent()),\n      )\n    ) {\n      if (shouldFilterPaste) {\n        let filteredState = editorState;\n        filteredState = filterEditorState(\n          {\n            blocks: ['unordered-list-item', 'ordered-list-item'],\n            styles: ['BOLD', 'ITALIC'],\n            entities: [\n              {\n                type: 'LINK',\n                attributes: ['url'],\n              },\n            ],\n            whitespacedCharacters: [],\n          },\n          filteredState,\n        );\n        editorState = filteredState;\n      }\n      this.props.onChangeBlock(this.props.block, {\n        ...this.props.data,\n        text: convertToRaw(editorState.getCurrentContent()),\n      });\n    }\n    this.setState({ editorState });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    // console.log('draft config', this.draftConfig);\n\n    if (__SERVER__) {\n      return <div />;\n    }\n\n    const placeholder =\n      this.props.data.placeholder ||\n      this.props.formTitle ||\n      this.props.intl.formatMessage(messages.text);\n\n    const disableNewBlocks =\n      this.props.data?.disableNewBlocks || this.props.detached;\n    const { InlineToolbar } = this.state.inlineToolbarPlugin;\n    // const { settings } = config;\n\n    const isSoftNewlineEvent = this.props.draftJsLibIsSoftNewlineEvent.default;\n    const { RichUtils } = this.props.draftJs;\n\n    return (\n      <>\n        <Editor\n          readOnly={!this.props.editable}\n          onChange={this.onChange}\n          editorState={this.state.editorState}\n          plugins={[\n            this.state.inlineToolbarPlugin,\n            // ...settings.richTextEditorPlugins,\n            ...this.draftConfig.richTextEditorPlugins,\n          ]}\n          blockRenderMap={this.draftConfig.extendedBlockRenderMap}\n          blockStyleFn={this.draftConfig.blockStyleFn}\n          customStyleMap={this.draftConfig.customStyleMap}\n          placeholder={placeholder}\n          handleReturn={(e) => {\n            if (isSoftNewlineEvent(e)) {\n              this.onChange(\n                RichUtils.insertSoftNewline(this.state.editorState),\n              );\n              return 'handled';\n            }\n            if (!disableNewBlocks) {\n              const selectionState = this.state.editorState.getSelection();\n              const anchorKey = selectionState.getAnchorKey();\n              const currentContent = this.state.editorState.getCurrentContent();\n              const currentContentBlock = currentContent.getBlockForKey(\n                anchorKey,\n              );\n              const blockType = currentContentBlock.getType();\n              if (!includes(this.draftConfig.listBlockTypes, blockType)) {\n                this.props.onSelectBlock(\n                  this.props.onAddBlock(\n                    config.settings.defaultBlockType,\n                    this.props.index + 1,\n                  ),\n                );\n                return 'handled';\n              }\n              return 'un-handled';\n            }\n            return {};\n          }}\n          handleKeyCommand={(command, editorState) => {\n            if (this.props.data.required) {\n              return;\n            }\n            if (\n              command === 'backspace' &&\n              editorState.getCurrentContent().getPlainText().length === 0\n            ) {\n              this.props.onDeleteBlock(this.props.block, true);\n            }\n          }}\n          onUpArrow={() => {\n            const selectionState = this.state.editorState.getSelection();\n            const currentCursorPosition = selectionState.getStartOffset();\n\n            if (currentCursorPosition === 0) {\n              this.props.onFocusPreviousBlock(this.props.block, this.node);\n            }\n          }}\n          onDownArrow={() => {\n            const selectionState = this.state.editorState.getSelection();\n            const { editorState } = this.state;\n            const currentCursorPosition = selectionState.getStartOffset();\n            const blockLength = editorState\n              .getCurrentContent()\n              .getFirstBlock()\n              .getLength();\n\n            if (currentCursorPosition === blockLength) {\n              this.props.onFocusNextBlock(this.props.block, this.node);\n            }\n          }}\n          ref={(node) => {\n            this.node = node;\n          }}\n        />\n        <InlineToolbar />\n        {this.props.selected && (\n          <BlockChooserButton\n            data={this.props.data}\n            block={this.props.block}\n            onInsertBlock={(id, value) => {\n              this.props.onSelectBlock(this.props.onInsertBlock(id, value));\n            }}\n            allowedBlocks={this.props.allowedBlocks}\n            blocksConfig={this.props.blocksConfig}\n            size=\"24px\"\n            className=\"block-add-button\"\n            properties={this.props.properties}\n          />\n        )}\n      </>\n    );\n  }\n}\n\nexport const Edit = compose(\n  injectIntl,\n  injectLazyLibs([\n    'draftJs',\n    'draftJsLibIsSoftNewlineEvent',\n    'draftJsFilters',\n    'draftJsInlineToolbarPlugin',\n    'draftJsBlockBreakoutPlugin',\n    'draftJsCreateInlineStyleButton',\n    'draftJsCreateBlockStyleButton',\n    'immutableLib',\n    // TODO: add all plugin dependencies, also in Wysiwyg and Cell\n  ]),\n)(EditComponent);\n\nconst Preloader = (props) => {\n  const [loaded, setLoaded] = React.useState(false);\n  React.useEffect(() => {\n    Editor.load().then(() => setLoaded(true));\n  }, []);\n  return loaded ? <Edit {...props} /> : null;\n};\n\nexport default Preloader;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Type text…","defaultMessage":"Type text…"}]}},"sourceType":"module","externalDependencies":[]}