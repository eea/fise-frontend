{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Multilingual/CompareLanguages.jsx\",\n  _this = this,\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport config from '@plone/volto/registry';\nimport { langmap, useDetectClickOutside } from '@plone/volto/helpers';\nimport { Icon } from '@plone/volto/components';\nimport { Button } from 'semantic-ui-react';\nimport translateSVG from '@plone/volto/icons/translate.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nvar messages = defineMessages({\n  compare_to: {\n    \"id\": \"compare_to\",\n    \"defaultMessage\": \"Compare to language\"\n  },\n  stop_compare: {\n    \"id\": \"Stop compare\",\n    \"defaultMessage\": \"Stop compare\"\n  }\n});\nvar CompareLanguagesMenu = function CompareLanguagesMenu(_ref) {\n  _s();\n  var theToolbar = _ref.theToolbar,\n    translations = _ref.translations,\n    comparingLanguage = _ref.comparingLanguage,\n    setComparingLanguage = _ref.setComparingLanguage,\n    closeMenu = _ref.closeMenu;\n  var intl = useIntl();\n  var ClickOutsideListener = function ClickOutsideListener() {\n    closeMenu();\n  };\n  var ref = useDetectClickOutside({\n    onTriggered: ClickOutsideListener,\n    triggerKeys: ['Escape']\n  });\n  return __jsx(\"div\", {\n    className: \"toolbar-content show compare-languages\",\n    ref: ref,\n    style: {\n      flex: theToolbar.current ? \"0 0 \".concat(theToolbar.current.getBoundingClientRect().width, \"px\") : null\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"pastanaga-menu\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, __jsx(\"header\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, intl.formatMessage(messages.compare_to)), __jsx(\"div\", {\n    className: \"pastanaga-menu-list\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, __jsx(\"ul\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }, translations.map(function (t) {\n    return __jsx(\"li\", {\n      key: t['@id'],\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 15\n      }\n    }, comparingLanguage === t.language ? __jsx(\"button\", {\n      \"aria-label\": \"\".concat(intl.formatMessage(messages.stop_compare), \" \").concat(langmap[t.language].nativeName),\n      title: \"\".concat(intl.formatMessage(messages.stop_compare), \" \").concat(langmap[t.language].nativeName),\n      onClick: function onClick() {\n        setComparingLanguage(null);\n        closeMenu();\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 19\n      }\n    }, langmap[t.language].nativeName, __jsx(Icon, {\n      name: clearSVG,\n      size: \"30px\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 21\n      }\n    })) : __jsx(\"button\", {\n      \"aria-label\": \"\".concat(intl.formatMessage(messages.compare_to), \" \").concat(langmap[t.language].nativeName.toLowerCase()),\n      title: \"\".concat(intl.formatMessage(messages.compare_to), \" \").concat(langmap[t.language].nativeName.toLowerCase()),\n      onClick: function onClick() {\n        setComparingLanguage(t.language);\n        closeMenu();\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 19\n      }\n    }, langmap[t.language].nativeName));\n  })))));\n};\n_s(CompareLanguagesMenu, \"t5kzopvpDiokZ1TNKHGqscouJyA=\", false, function () {\n  return [useIntl, useDetectClickOutside];\n});\n_c = CompareLanguagesMenu;\nvar CompareLanguages = /*#__PURE__*/React.forwardRef(_c2 = _s2(function (props, ref) {\n  var _content$Components, _content$Components$t;\n  _s2();\n  var content = props.content,\n    comparingLanguage = props.comparingLanguage,\n    _setComparingLanguage = props.setComparingLanguage,\n    pathname = props.pathname,\n    toolbarRef = props.toolbarRef;\n  var intl = useIntl();\n  var _useState = useState(false),\n    viewMenu = _useState[0],\n    setViewMenu = _useState[1];\n  var translations = config.settings.isMultilingual ? (content === null || content === void 0 ? void 0 : (_content$Components = content['@components']) === null || _content$Components === void 0 ? void 0 : (_content$Components$t = _content$Components.translations) === null || _content$Components$t === void 0 ? void 0 : _content$Components$t.items) || [] : [];\n  var translationsObject = {};\n  translations.forEach(function (t) {\n    translationsObject[t.language] = t['@id'];\n  });\n  if (config.settings.isMultilingual && translations.length > 0) {\n    return __jsx(\"div\", {\n      className: \"toolbar-compare-translations-wrapper\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      className: \"toolbar-button-spacer\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }\n    }), __jsx(Button, {\n      \"aria-label\": intl.formatMessage(messages.compare_to),\n      title: intl.formatMessage(messages.compare_to),\n      onClick: function onClick() {\n        setViewMenu(!viewMenu);\n      },\n      id: \"toolbar-compare-translations\",\n      className: \"toolbar-button-compare-translations\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }\n    }, __jsx(Icon, {\n      className: \"mobile hidden\",\n      name: translateSVG,\n      size: \"30px\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }\n    }), viewMenu ? __jsx(Icon, {\n      className: \"mobile only\",\n      name: clearSVG,\n      size: \"30px\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 13\n      }\n    }) : __jsx(Icon, {\n      className: \"mobile only\",\n      name: translateSVG,\n      size: \"30px\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 13\n      }\n    })), viewMenu && __jsx(CompareLanguagesMenu, {\n      pathname: pathname,\n      theToolbar: toolbarRef,\n      key: \"compareLanguagesComponent\",\n      closeMenu: function closeMenu() {\n        return setViewMenu(false);\n      },\n      translations: translations,\n      setComparingLanguage: function setComparingLanguage(value) {\n        _setComparingLanguage(value, translationsObject[value]);\n      },\n      comparingLanguage: comparingLanguage,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }\n    }));\n  } else {\n    return null;\n  }\n}, \"f2p8sGAZ6urXksc1HLawiLXzZxg=\", false, function () {\n  return [useIntl];\n}));\n_c3 = CompareLanguages;\nexport default CompareLanguages;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"CompareLanguagesMenu\");\n$RefreshReg$(_c2, \"CompareLanguages$React.forwardRef\");\n$RefreshReg$(_c3, \"CompareLanguages\");","map":{"version":3,"names":["React","useState","defineMessages","useIntl","config","langmap","useDetectClickOutside","Icon","Button","translateSVG","clearSVG","messages","compare_to","stop_compare","CompareLanguagesMenu","theToolbar","translations","comparingLanguage","setComparingLanguage","closeMenu","intl","ClickOutsideListener","ref","onTriggered","triggerKeys","flex","current","getBoundingClientRect","width","formatMessage","map","t","language","nativeName","toLowerCase","CompareLanguages","forwardRef","props","content","pathname","toolbarRef","viewMenu","setViewMenu","settings","isMultilingual","items","translationsObject","forEach","length","value"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Multilingual/CompareLanguages.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport config from '@plone/volto/registry';\nimport { langmap, useDetectClickOutside } from '@plone/volto/helpers';\n\nimport { Icon } from '@plone/volto/components';\nimport { Button } from 'semantic-ui-react';\nimport translateSVG from '@plone/volto/icons/translate.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\n\nconst messages = defineMessages({\n  compare_to: {\n    id: 'compare_to',\n    defaultMessage: 'Compare to language',\n  },\n  stop_compare: {\n    id: 'Stop compare',\n    defaultMessage: 'Stop compare',\n  },\n});\n\nconst CompareLanguagesMenu = ({\n  theToolbar,\n  translations,\n  comparingLanguage,\n  setComparingLanguage,\n  closeMenu,\n}) => {\n  const intl = useIntl();\n\n  const ClickOutsideListener = () => {\n    closeMenu();\n  };\n\n  const ref = useDetectClickOutside({\n    onTriggered: ClickOutsideListener,\n    triggerKeys: ['Escape'],\n  });\n\n  return (\n    <div\n      className=\"toolbar-content show compare-languages\"\n      ref={ref}\n      style={{\n        flex: theToolbar.current\n          ? `0 0 ${theToolbar.current.getBoundingClientRect().width}px`\n          : null,\n      }}\n    >\n      <div className=\"pastanaga-menu\">\n        <header>{intl.formatMessage(messages.compare_to)}</header>\n        <div className=\"pastanaga-menu-list\">\n          <ul>\n            {translations.map((t) => (\n              <li key={t['@id']}>\n                {comparingLanguage === t.language ? (\n                  <button\n                    aria-label={`${intl.formatMessage(messages.stop_compare)} ${\n                      langmap[t.language].nativeName\n                    }`}\n                    title={`${intl.formatMessage(messages.stop_compare)} ${\n                      langmap[t.language].nativeName\n                    }`}\n                    onClick={() => {\n                      setComparingLanguage(null);\n                      closeMenu();\n                    }}\n                  >\n                    {langmap[t.language].nativeName}\n                    <Icon name={clearSVG} size=\"30px\" />\n                  </button>\n                ) : (\n                  <button\n                    aria-label={`${intl.formatMessage(\n                      messages.compare_to,\n                    )} ${langmap[t.language].nativeName.toLowerCase()}`}\n                    title={`${intl.formatMessage(\n                      messages.compare_to,\n                    )} ${langmap[t.language].nativeName.toLowerCase()}`}\n                    onClick={() => {\n                      setComparingLanguage(t.language);\n                      closeMenu();\n                    }}\n                  >\n                    {langmap[t.language].nativeName}\n                  </button>\n                )}\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst CompareLanguages = React.forwardRef((props, ref) => {\n  const {\n    content,\n    comparingLanguage,\n    setComparingLanguage,\n    pathname,\n    toolbarRef,\n  } = props;\n\n  const intl = useIntl();\n  const [viewMenu, setViewMenu] = useState(false);\n  const translations = config.settings.isMultilingual\n    ? content?.['@components']?.translations?.items || []\n    : [];\n\n  const translationsObject = {};\n  translations.forEach((t) => {\n    translationsObject[t.language] = t['@id'];\n  });\n\n  if (config.settings.isMultilingual && translations.length > 0) {\n    return (\n      <div className=\"toolbar-compare-translations-wrapper\">\n        <div className=\"toolbar-button-spacer\" />\n\n        <Button\n          aria-label={intl.formatMessage(messages.compare_to)}\n          title={intl.formatMessage(messages.compare_to)}\n          onClick={() => {\n            setViewMenu(!viewMenu);\n          }}\n          id=\"toolbar-compare-translations\"\n          className=\"toolbar-button-compare-translations\"\n        >\n          <Icon className=\"mobile hidden\" name={translateSVG} size=\"30px\" />\n          {viewMenu ? (\n            <Icon className=\"mobile only\" name={clearSVG} size=\"30px\" />\n          ) : (\n            <Icon className=\"mobile only\" name={translateSVG} size=\"30px\" />\n          )}\n        </Button>\n\n        {viewMenu && (\n          <CompareLanguagesMenu\n            pathname={pathname}\n            theToolbar={toolbarRef}\n            key={`compareLanguagesComponent`}\n            closeMenu={() => setViewMenu(false)}\n            translations={translations}\n            setComparingLanguage={(value) => {\n              setComparingLanguage(value, translationsObject[value]);\n            }}\n            comparingLanguage={comparingLanguage}\n          />\n        )}\n      </div>\n    );\n  } else {\n    return null;\n  }\n});\n\nexport default CompareLanguages;\n"],"mappings":";;;;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,cAAc,EAAEC,OAAO,QAAQ,YAAY;AACpD,OAAOC,MAAM,MAAM,uBAAuB;AAC1C,SAASC,OAAO,EAAEC,qBAAqB,QAAQ,sBAAsB;AAErE,SAASC,IAAI,QAAQ,yBAAyB;AAC9C,SAASC,MAAM,QAAQ,mBAAmB;AAC1C,OAAOC,YAAY,MAAM,kCAAkC;AAC3D,OAAOC,QAAQ,MAAM,8BAA8B;AAEnD,IAAMC,QAAQ,GAAGT,cAAc,CAAC;EAC9BU,UAAU;IAAA;IAAA;EAAA,CAGT;EACDC,YAAY;IAAA;IAAA;EAAA;AAId,CAAC,CAAC;AAEF,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAoB,OAMpB;EAAA;EAAA,IALJC,UAAU,QAAVA,UAAU;IACVC,YAAY,QAAZA,YAAY;IACZC,iBAAiB,QAAjBA,iBAAiB;IACjBC,oBAAoB,QAApBA,oBAAoB;IACpBC,SAAS,QAATA,SAAS;EAET,IAAMC,IAAI,GAAGjB,OAAO,EAAE;EAEtB,IAAMkB,oBAAoB,GAAG,SAAvBA,oBAAoB,GAAS;IACjCF,SAAS,EAAE;EACb,CAAC;EAED,IAAMG,GAAG,GAAGhB,qBAAqB,CAAC;IAChCiB,WAAW,EAAEF,oBAAoB;IACjCG,WAAW,EAAE,CAAC,QAAQ;EACxB,CAAC,CAAC;EAEF,OACE;IACE,SAAS,EAAC,wCAAwC;IAClD,GAAG,EAAEF,GAAI;IACT,KAAK,EAAE;MACLG,IAAI,EAAEV,UAAU,CAACW,OAAO,iBACbX,UAAU,CAACW,OAAO,CAACC,qBAAqB,EAAE,CAACC,KAAK,UACvD;IACN,CAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAEF;IAAK,SAAS,EAAC,gBAAgB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAC7B;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAASR,IAAI,CAACS,aAAa,CAAClB,QAAQ,CAACC,UAAU,CAAC,CAAU,EAC1D;IAAK,SAAS,EAAC,qBAAqB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAClC;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACGI,YAAY,CAACc,GAAG,CAAC,UAACC,CAAC;IAAA,OAClB;MAAI,GAAG,EAAEA,CAAC,CAAC,KAAK,CAAE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACfd,iBAAiB,KAAKc,CAAC,CAACC,QAAQ,GAC/B;MACE,wBAAeZ,IAAI,CAACS,aAAa,CAAClB,QAAQ,CAACE,YAAY,CAAC,cACtDR,OAAO,CAAC0B,CAAC,CAACC,QAAQ,CAAC,CAACC,UAAU,CAC7B;MACH,KAAK,YAAKb,IAAI,CAACS,aAAa,CAAClB,QAAQ,CAACE,YAAY,CAAC,cACjDR,OAAO,CAAC0B,CAAC,CAACC,QAAQ,CAAC,CAACC,UAAU,CAC7B;MACH,OAAO,EAAE,mBAAM;QACbf,oBAAoB,CAAC,IAAI,CAAC;QAC1BC,SAAS,EAAE;MACb,CAAE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAEDd,OAAO,CAAC0B,CAAC,CAACC,QAAQ,CAAC,CAACC,UAAU,EAC/B,MAAC,IAAI;MAAC,IAAI,EAAEvB,QAAS;MAAC,IAAI,EAAC,MAAM;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAG,CAC7B,GAET;MACE,wBAAeU,IAAI,CAACS,aAAa,CAC/BlB,QAAQ,CAACC,UAAU,CACpB,cAAIP,OAAO,CAAC0B,CAAC,CAACC,QAAQ,CAAC,CAACC,UAAU,CAACC,WAAW,EAAE,CAAG;MACpD,KAAK,YAAKd,IAAI,CAACS,aAAa,CAC1BlB,QAAQ,CAACC,UAAU,CACpB,cAAIP,OAAO,CAAC0B,CAAC,CAACC,QAAQ,CAAC,CAACC,UAAU,CAACC,WAAW,EAAE,CAAG;MACpD,OAAO,EAAE,mBAAM;QACbhB,oBAAoB,CAACa,CAAC,CAACC,QAAQ,CAAC;QAChCb,SAAS,EAAE;MACb,CAAE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAEDd,OAAO,CAAC0B,CAAC,CAACC,QAAQ,CAAC,CAACC,UAAU,CAElC,CACE;EAAA,CACN,CAAC,CACC,CACD,CACF,CACF;AAEV,CAAC;AAAC,GAzEInB,oBAAoB;EAAA,QAOXX,OAAO,EAMRG,qBAAqB;AAAA;AAAA,KAb7BQ,oBAAoB;AA2E1B,IAAMqB,gBAAgB,gBAAGnC,KAAK,CAACoC,UAAU,WAAC,UAACC,KAAK,EAAEf,GAAG,EAAK;EAAA;EAAA;EACxD,IACEgB,OAAO,GAKLD,KAAK,CALPC,OAAO;IACPrB,iBAAiB,GAIfoB,KAAK,CAJPpB,iBAAiB;IACjBC,qBAAoB,GAGlBmB,KAAK,CAHPnB,oBAAoB;IACpBqB,QAAQ,GAENF,KAAK,CAFPE,QAAQ;IACRC,UAAU,GACRH,KAAK,CADPG,UAAU;EAGZ,IAAMpB,IAAI,GAAGjB,OAAO,EAAE;EACtB,gBAAgCF,QAAQ,CAAC,KAAK,CAAC;IAAxCwC,QAAQ;IAAEC,WAAW;EAC5B,IAAM1B,YAAY,GAAGZ,MAAM,CAACuC,QAAQ,CAACC,cAAc,GAC/C,CAAAN,OAAO,aAAPA,OAAO,8CAAPA,OAAO,CAAG,aAAa,CAAC,iFAAxB,oBAA0BtB,YAAY,0DAAtC,sBAAwC6B,KAAK,KAAI,EAAE,GACnD,EAAE;EAEN,IAAMC,kBAAkB,GAAG,CAAC,CAAC;EAC7B9B,YAAY,CAAC+B,OAAO,CAAC,UAAChB,CAAC,EAAK;IAC1Be,kBAAkB,CAACf,CAAC,CAACC,QAAQ,CAAC,GAAGD,CAAC,CAAC,KAAK,CAAC;EAC3C,CAAC,CAAC;EAEF,IAAI3B,MAAM,CAACuC,QAAQ,CAACC,cAAc,IAAI5B,YAAY,CAACgC,MAAM,GAAG,CAAC,EAAE;IAC7D,OACE;MAAK,SAAS,EAAC,sCAAsC;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACnD;MAAK,SAAS,EAAC,uBAAuB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAG,EAEzC,MAAC,MAAM;MACL,cAAY5B,IAAI,CAACS,aAAa,CAAClB,QAAQ,CAACC,UAAU,CAAE;MACpD,KAAK,EAAEQ,IAAI,CAACS,aAAa,CAAClB,QAAQ,CAACC,UAAU,CAAE;MAC/C,OAAO,EAAE,mBAAM;QACb8B,WAAW,CAAC,CAACD,QAAQ,CAAC;MACxB,CAAE;MACF,EAAE,EAAC,8BAA8B;MACjC,SAAS,EAAC,qCAAqC;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAE/C,MAAC,IAAI;MAAC,SAAS,EAAC,eAAe;MAAC,IAAI,EAAEhC,YAAa;MAAC,IAAI,EAAC,MAAM;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAG,EACjEgC,QAAQ,GACP,MAAC,IAAI;MAAC,SAAS,EAAC,aAAa;MAAC,IAAI,EAAE/B,QAAS;MAAC,IAAI,EAAC,MAAM;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAG,GAE5D,MAAC,IAAI;MAAC,SAAS,EAAC,aAAa;MAAC,IAAI,EAAED,YAAa;MAAC,IAAI,EAAC,MAAM;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAC9D,CACM,EAERgC,QAAQ,IACP,MAAC,oBAAoB;MACnB,QAAQ,EAAEF,QAAS;MACnB,UAAU,EAAEC,UAAW;MACvB,GAAG,6BAA8B;MACjC,SAAS,EAAE;QAAA,OAAME,WAAW,CAAC,KAAK,CAAC;MAAA,CAAC;MACpC,YAAY,EAAE1B,YAAa;MAC3B,oBAAoB,EAAE,8BAACiC,KAAK,EAAK;QAC/B/B,qBAAoB,CAAC+B,KAAK,EAAEH,kBAAkB,CAACG,KAAK,CAAC,CAAC;MACxD,CAAE;MACF,iBAAiB,EAAEhC,iBAAkB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAExC,CACG;EAEV,CAAC,MAAM;IACL,OAAO,IAAI;EACb;AACF,CAAC;EAAA,QAnDcd,OAAO;AAAA,GAmDpB;AAAC,MA5DGgC,gBAAgB;AA8DtB,eAAeA,gBAAgB;AAAC;AAAA;AAAA;AAAA"},"metadata":{"react-intl":{"messages":[{"id":"compare_to","defaultMessage":"Compare to language"},{"id":"Stop compare","defaultMessage":"Stop compare"}]}},"sourceType":"module","externalDependencies":[]}