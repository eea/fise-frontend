{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/volto-slate/src/editor/plugins/SimpleLink/index.js\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport React from 'react';\nimport { defineMessages } from 'react-intl'; // , defineMessages\nimport { ReactEditor, useSlate } from 'slate-react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport AddLinkForm from '@plone/volto/components/manage/AnchorPlugin/components/LinkButton/AddLinkForm';\nimport { _insertElement, _unwrapElement, _isActiveElement, _getActiveElement } from 'volto-slate/components/ElementEditor/utils';\nimport { SIMPLELINK, LINK } from 'volto-slate/constants';\nimport { LinkElement } from './render';\nimport { simpleLinkDeserializer, withSimpleLink } from './extensions';\nimport { setPluginOptions } from 'volto-slate/actions';\nimport { ToolbarButton as UIToolbarButton, PositionedToolbar } from 'volto-slate/editor/ui';\nimport linkSVG from '@plone/volto/icons/link.svg';\nimport unlinkSVG from '@plone/volto/icons/unlink.svg';\nconst messages = defineMessages({\n  add: {\n    \"id\": \"Add link\",\n    \"defaultMessage\": \"Add link\"\n  },\n  edit: {\n    \"id\": \"Edit link\",\n    \"defaultMessage\": \"Edit link\"\n  }\n});\nfunction getPositionStyle() {\n  const domSelection = window.getSelection();\n  if (domSelection.rangeCount < 1) {\n    return {};\n  }\n  const domRange = domSelection.getRangeAt(0);\n  const rect = domRange.getBoundingClientRect();\n  return {\n    style: {\n      opacity: 1,\n      top: rect.top + window.pageYOffset - 6,\n      left: rect.left + window.pageXOffset + rect.width / 2\n    }\n  };\n}\nconst SimpleLinkEditor = props => {\n  var _node$data;\n  const {\n    editor,\n    pluginId,\n    getActiveElement,\n    unwrapElement,\n    insertElement\n  } = props;\n  const pid = `${editor.uid}-${pluginId}`;\n  const showEditor = useSelector(state => {\n    var _state$slate_plugins, _state$slate_plugins$;\n    return (_state$slate_plugins = state['slate_plugins']) === null || _state$slate_plugins === void 0 ? void 0 : (_state$slate_plugins$ = _state$slate_plugins[pid]) === null || _state$slate_plugins$ === void 0 ? void 0 : _state$slate_plugins$.show_sidebar_editor;\n  });\n  const savedPosition = React.useRef();\n  const dispatch = useDispatch();\n  const active = getActiveElement(editor);\n  const [node] = active || [];\n  if (showEditor && !savedPosition.current) {\n    savedPosition.current = getPositionStyle();\n  }\n  return showEditor ? __jsx(PositionedToolbar, {\n    className: \"add-link\",\n    position: savedPosition.current,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, __jsx(AddLinkForm, {\n    block: \"draft-js\",\n    placeholder: 'Add link',\n    data: {\n      url: (node === null || node === void 0 ? void 0 : (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.url) || ''\n    },\n    theme: {},\n    onChangeValue: url => {\n      if (!active) {\n        if (!editor.selection) editor.selection = editor.savedSelection;\n        insertElement(editor, {\n          url\n        });\n      } else {\n        const selection = unwrapElement(editor);\n        editor.selection = selection;\n        insertElement(editor, {\n          url\n        });\n      }\n      ReactEditor.focus(editor);\n      dispatch(setPluginOptions(pid, {\n        show_sidebar_editor: false\n      }));\n      savedPosition.current = null;\n    },\n    onClear: () => {\n      // clear button was pressed in the link edit popup\n      const newSelection = JSON.parse(JSON.stringify(unwrapElement(editor)));\n      editor.selection = newSelection;\n      editor.savedSelection = newSelection;\n    },\n    onOverrideContent: c => {\n      dispatch(setPluginOptions(pid, {\n        show_sidebar_editor: false\n      }));\n      savedPosition.current = null;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  })) : '';\n};\nexport default (config => {\n  const {\n    slate\n  } = config.settings;\n  const PLUGINID = SIMPLELINK;\n  const linkBtnIndex = slate.toolbarButtons.findIndex(b => b === LINK);\n  slate.expandedToolbarButtons = slate.expandedToolbarButtons.filter(b => b !== LINK);\n  const insertElement = _insertElement(PLUGINID);\n  const getActiveElement = _getActiveElement(PLUGINID);\n  const isActiveElement = _isActiveElement(PLUGINID);\n  const unwrapElement = _unwrapElement(PLUGINID);\n  const ToolbarButton = props => {\n    const dispatch = useDispatch();\n    const editor = useSlate();\n    const isElement = isActiveElement(editor);\n    return __jsx(UIToolbarButton, {\n      title: isElement ? messages.edit : messages.add,\n      icon: isElement ? unlinkSVG : linkSVG,\n      active: isElement,\n      onMouseDown: e => {\n        e.stopPropagation();\n        e.preventDefault();\n        const pid = `${editor.uid}-${PLUGINID}`;\n        editor.savedSelection = JSON.parse(JSON.stringify(editor.selection));\n        dispatch(setPluginOptions(pid, {\n          show_sidebar_editor: true\n        }));\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 7\n      }\n    });\n  };\n  const pluginOptions = {\n    insertElement,\n    getActiveElement,\n    isActiveElement,\n    unwrapElement\n  };\n  slate.buttons[PLUGINID] = ToolbarButton;\n  slate.toolbarButtons[linkBtnIndex] = PLUGINID;\n  slate.htmlTagsToSlate.A = simpleLinkDeserializer;\n  slate.extensions.push(withSimpleLink);\n  slate.elements[PLUGINID] = LinkElement;\n  slate.nodeTypesToHighlight.push(PLUGINID);\n  slate.persistentHelpers.push(props => __jsx(SimpleLinkEditor, _extends({}, props, {\n    pluginId: PLUGINID\n  }, pluginOptions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 5\n    }\n  })));\n  return config;\n});","map":{"version":3,"names":["React","defineMessages","ReactEditor","useSlate","useSelector","useDispatch","AddLinkForm","_insertElement","_unwrapElement","_isActiveElement","_getActiveElement","SIMPLELINK","LINK","LinkElement","simpleLinkDeserializer","withSimpleLink","setPluginOptions","ToolbarButton","UIToolbarButton","PositionedToolbar","linkSVG","unlinkSVG","messages","add","edit","getPositionStyle","domSelection","window","getSelection","rangeCount","domRange","getRangeAt","rect","getBoundingClientRect","style","opacity","top","pageYOffset","left","pageXOffset","width","SimpleLinkEditor","props","editor","pluginId","getActiveElement","unwrapElement","insertElement","pid","uid","showEditor","state","show_sidebar_editor","savedPosition","useRef","dispatch","active","node","current","url","data","selection","savedSelection","focus","newSelection","JSON","parse","stringify","c","config","slate","settings","PLUGINID","linkBtnIndex","toolbarButtons","findIndex","b","expandedToolbarButtons","filter","isActiveElement","isElement","e","stopPropagation","preventDefault","pluginOptions","buttons","htmlTagsToSlate","A","extensions","push","elements","nodeTypesToHighlight","persistentHelpers"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/volto-slate/src/editor/plugins/SimpleLink/index.js"],"sourcesContent":["import React from 'react';\nimport { defineMessages } from 'react-intl'; // , defineMessages\nimport { ReactEditor, useSlate } from 'slate-react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport AddLinkForm from '@plone/volto/components/manage/AnchorPlugin/components/LinkButton/AddLinkForm';\nimport {\n  _insertElement,\n  _unwrapElement,\n  _isActiveElement,\n  _getActiveElement,\n} from 'volto-slate/components/ElementEditor/utils';\nimport { SIMPLELINK, LINK } from 'volto-slate/constants';\nimport { LinkElement } from './render';\nimport { simpleLinkDeserializer, withSimpleLink } from './extensions';\nimport { setPluginOptions } from 'volto-slate/actions';\nimport {\n  ToolbarButton as UIToolbarButton,\n  PositionedToolbar,\n} from 'volto-slate/editor/ui';\n\nimport linkSVG from '@plone/volto/icons/link.svg';\nimport unlinkSVG from '@plone/volto/icons/unlink.svg';\n\nconst messages = defineMessages({\n  add: {\n    id: 'Add link',\n    defaultMessage: 'Add link',\n  },\n  edit: {\n    id: 'Edit link',\n    defaultMessage: 'Edit link',\n  },\n});\n\nfunction getPositionStyle() {\n  const domSelection = window.getSelection();\n  if (domSelection.rangeCount < 1) {\n    return {};\n  }\n  const domRange = domSelection.getRangeAt(0);\n  const rect = domRange.getBoundingClientRect();\n\n  return {\n    style: {\n      opacity: 1,\n      top: rect.top + window.pageYOffset - 6,\n      left: rect.left + window.pageXOffset + rect.width / 2,\n    },\n  };\n}\n\nconst SimpleLinkEditor = (props) => {\n  const {\n    editor,\n    pluginId,\n    getActiveElement,\n    unwrapElement,\n    insertElement,\n  } = props;\n  const pid = `${editor.uid}-${pluginId}`;\n  const showEditor = useSelector((state) => {\n    return state['slate_plugins']?.[pid]?.show_sidebar_editor;\n  });\n  const savedPosition = React.useRef();\n\n  const dispatch = useDispatch();\n\n  const active = getActiveElement(editor);\n  const [node] = active || [];\n\n  if (showEditor && !savedPosition.current) {\n    savedPosition.current = getPositionStyle();\n  }\n\n  return showEditor ? (\n    <PositionedToolbar className=\"add-link\" position={savedPosition.current}>\n      <AddLinkForm\n        block=\"draft-js\"\n        placeholder={'Add link'}\n        data={{ url: node?.data?.url || '' }}\n        theme={{}}\n        onChangeValue={(url) => {\n          if (!active) {\n            if (!editor.selection) editor.selection = editor.savedSelection;\n            insertElement(editor, { url });\n          } else {\n            const selection = unwrapElement(editor);\n            editor.selection = selection;\n            insertElement(editor, { url });\n          }\n          ReactEditor.focus(editor);\n          dispatch(setPluginOptions(pid, { show_sidebar_editor: false }));\n          savedPosition.current = null;\n        }}\n        onClear={() => {\n          // clear button was pressed in the link edit popup\n          const newSelection = JSON.parse(\n            JSON.stringify(unwrapElement(editor)),\n          );\n          editor.selection = newSelection;\n          editor.savedSelection = newSelection;\n        }}\n        onOverrideContent={(c) => {\n          dispatch(setPluginOptions(pid, { show_sidebar_editor: false }));\n          savedPosition.current = null;\n        }}\n      />\n    </PositionedToolbar>\n  ) : (\n    ''\n  );\n};\n\nexport default (config) => {\n  const { slate } = config.settings;\n\n  const PLUGINID = SIMPLELINK;\n\n  const linkBtnIndex = slate.toolbarButtons.findIndex((b) => b === LINK);\n  slate.expandedToolbarButtons = slate.expandedToolbarButtons.filter(\n    (b) => b !== LINK,\n  );\n\n  const insertElement = _insertElement(PLUGINID);\n  const getActiveElement = _getActiveElement(PLUGINID);\n  const isActiveElement = _isActiveElement(PLUGINID);\n  const unwrapElement = _unwrapElement(PLUGINID);\n\n  const ToolbarButton = (props) => {\n    const dispatch = useDispatch();\n    const editor = useSlate();\n    const isElement = isActiveElement(editor);\n\n    return (\n      <UIToolbarButton\n        title={isElement ? messages.edit : messages.add}\n        icon={isElement ? unlinkSVG : linkSVG}\n        active={isElement}\n        onMouseDown={(e) => {\n          e.stopPropagation();\n          e.preventDefault();\n          const pid = `${editor.uid}-${PLUGINID}`;\n          editor.savedSelection = JSON.parse(JSON.stringify(editor.selection));\n          dispatch(setPluginOptions(pid, { show_sidebar_editor: true }));\n        }}\n      />\n    );\n  };\n\n  const pluginOptions = {\n    insertElement,\n    getActiveElement,\n    isActiveElement,\n    unwrapElement,\n  };\n\n  slate.buttons[PLUGINID] = ToolbarButton;\n  slate.toolbarButtons[linkBtnIndex] = PLUGINID;\n  slate.htmlTagsToSlate.A = simpleLinkDeserializer;\n  slate.extensions.push(withSimpleLink);\n  slate.elements[PLUGINID] = LinkElement;\n  slate.nodeTypesToHighlight.push(PLUGINID);\n  slate.persistentHelpers.push((props) => (\n    <SimpleLinkEditor {...props} pluginId={PLUGINID} {...pluginOptions} />\n  ));\n\n  return config;\n};\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Add link","defaultMessage":"Add link"},{"id":"Edit link","defaultMessage":"Edit link"}]}},"sourceType":"module","externalDependencies":[]}