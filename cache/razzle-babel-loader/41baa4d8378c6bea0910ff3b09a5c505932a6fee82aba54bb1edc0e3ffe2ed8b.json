{"ast":null,"code":"import _classCallCheck from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/theme/Register/Register.jsx\";\nvar __jsx = React.createElement;\n/**\n * Register container.\n * @module components/theme/Register/Register\n */\n\nimport React, { Component } from 'react';\nimport { Helmet } from '@plone/volto/helpers';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Form, Toast } from '@plone/volto/components';\nimport { createUser } from '@plone/volto/actions';\nvar messages = defineMessages({\n  title: {\n    \"id\": \"Registration form\",\n    \"defaultMessage\": \"Registration form\"\n  },\n  \"default\": {\n    \"id\": \"Default\",\n    \"defaultMessage\": \"Default\"\n  },\n  fullnameTitle: {\n    \"id\": \"Full Name\",\n    \"defaultMessage\": \"Full Name\"\n  },\n  fullnameDescription: {\n    \"id\": \"Enter full name, e.g. John Smith.\",\n    \"defaultMessage\": \"Enter full name, e.g. John Smith.\"\n  },\n  emailTitle: {\n    \"id\": \"E-mail\",\n    \"defaultMessage\": \"E-mail\"\n  },\n  emailDescription: {\n    \"id\": \"Enter an email address. This will be your login name. We respect your privacy, and will not give the address away to any third parties or expose it anywhere.\",\n    \"defaultMessage\": \"Enter an email address. This will be your login name. We respect your privacy, and will not give the address away to any third parties or expose it anywhere.\"\n  },\n  successRegisterCompletedTitle: {\n    \"id\": \"Account Registration Completed\",\n    \"defaultMessage\": \"Account Registration Completed\"\n  },\n  successRegisterCompletedBody: {\n    \"id\": \"The registration process has been successful. Please check your e-mail inbox for information on how activate your account.\",\n    \"defaultMessage\": \"The registration process has been successful. Please check your e-mail inbox for information on how activate your account.\"\n  },\n  register: {\n    \"id\": \"Register\",\n    \"defaultMessage\": \"Register\"\n  }\n});\n\n/**\n * Register class.\n * @class Register\n * @extends Component\n */\nvar Register = /*#__PURE__*/function (_Component) {\n  _inherits(Register, _Component);\n  var _super = _createSuper(Register);\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  function Register(props) {\n    var _this;\n    _classCallCheck(this, Register);\n    _this = _super.call(this, props);\n    _this.onSubmit = _this.onSubmit.bind(_assertThisInitialized(_this));\n    _this.state = {\n      error: null\n    };\n    return _this;\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  _createClass(Register, [{\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      if (this.props.loading && nextProps.loaded) {\n        toast.success(__jsx(Toast, {\n          success: true,\n          title: this.props.intl.formatMessage(messages.successRegisterCompletedTitle),\n          content: this.props.intl.formatMessage(messages.successRegisterCompletedBody),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 9\n          }\n        }));\n        this.props.history.push('/login');\n      }\n    }\n\n    /**\n     * On submit handler\n     * @method onSubmit\n     * @param {object} data Form data.\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(data) {\n      this.props.createUser({\n        fullname: data.fullname,\n        email: data.email,\n        password: data.password\n      });\n      this.setState({\n        error: null\n      });\n    }\n\n    /**\n     * Render method.\n     * @method render\n     * @returns {string} Markup for the component.\n     */\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(\"div\", {\n        id: \"page-register\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 7\n        }\n      }, __jsx(Helmet, {\n        title: this.props.intl.formatMessage(messages.register),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 9\n        }\n      }), __jsx(Form, {\n        onSubmit: this.onSubmit,\n        title: this.props.intl.formatMessage(messages.title),\n        error: this.state.error || this.props.error,\n        loading: this.props.loading,\n        submitLabel: this.props.intl.formatMessage(messages.register),\n        schema: {\n          fieldsets: [{\n            id: 'default',\n            title: this.props.intl.formatMessage(messages[\"default\"]),\n            fields: ['fullname', 'email']\n          }],\n          properties: {\n            fullname: {\n              type: 'string',\n              title: this.props.intl.formatMessage(messages.fullnameTitle),\n              description: this.props.intl.formatMessage(messages.fullnameDescription)\n            },\n            email: {\n              type: 'string',\n              title: this.props.intl.formatMessage(messages.emailTitle),\n              description: this.props.intl.formatMessage(messages.emailDescription)\n            }\n          },\n          required: ['fullname', 'email']\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n  return Register;\n}(Component);\n_defineProperty(Register, \"propTypes\", {\n  createUser: PropTypes.func.isRequired,\n  loading: PropTypes.bool.isRequired,\n  loaded: PropTypes.bool.isRequired,\n  error: PropTypes.shape({\n    message: PropTypes.string\n  })\n});\n_defineProperty(Register, \"defaultProps\", {\n  error: null\n});\nexport default compose(withRouter, injectIntl, connect(function (state) {\n  return {\n    loading: state.users.create.loading,\n    loaded: state.users.create.loaded,\n    error: state.users.create.error\n  };\n}, {\n  createUser: createUser\n}))(Register);","map":{"version":3,"names":["React","Component","Helmet","connect","compose","defineMessages","injectIntl","PropTypes","withRouter","toast","Form","Toast","createUser","messages","title","fullnameTitle","fullnameDescription","emailTitle","emailDescription","successRegisterCompletedTitle","successRegisterCompletedBody","register","Register","props","onSubmit","bind","state","error","nextProps","loading","loaded","success","intl","formatMessage","history","push","data","fullname","email","password","setState","fieldsets","id","fields","properties","type","description","required","func","isRequired","bool","shape","message","string","users","create"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/theme/Register/Register.jsx"],"sourcesContent":["/**\n * Register container.\n * @module components/theme/Register/Register\n */\n\nimport React, { Component } from 'react';\nimport { Helmet } from '@plone/volto/helpers';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { toast } from 'react-toastify';\n\nimport { Form, Toast } from '@plone/volto/components';\nimport { createUser } from '@plone/volto/actions';\n\nconst messages = defineMessages({\n  title: {\n    id: 'Registration form',\n    defaultMessage: 'Registration form',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  fullnameTitle: {\n    id: 'Full Name',\n    defaultMessage: 'Full Name',\n  },\n  fullnameDescription: {\n    id: 'Enter full name, e.g. John Smith.',\n    defaultMessage: 'Enter full name, e.g. John Smith.',\n  },\n  emailTitle: {\n    id: 'E-mail',\n    defaultMessage: 'E-mail',\n  },\n  emailDescription: {\n    id:\n      'Enter an email address. This will be your login name. We respect your privacy, and will not give the address away to any third parties or expose it anywhere.',\n    defaultMessage:\n      'Enter an email address. This will be your login name. We respect your privacy, and will not give the address away to any third parties or expose it anywhere.',\n  },\n  successRegisterCompletedTitle: {\n    id: 'Account Registration Completed',\n    defaultMessage: 'Account Registration Completed',\n  },\n  successRegisterCompletedBody: {\n    id:\n      'The registration process has been successful. Please check your e-mail inbox for information on how activate your account.',\n    defaultMessage:\n      'The registration process has been successful. Please check your e-mail inbox for information on how activate your account.',\n  },\n  register: {\n    id: 'Register',\n    defaultMessage: 'Register',\n  },\n});\n\n/**\n * Register class.\n * @class Register\n * @extends Component\n */\nclass Register extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    createUser: PropTypes.func.isRequired,\n    loading: PropTypes.bool.isRequired,\n    loaded: PropTypes.bool.isRequired,\n    error: PropTypes.shape({\n      message: PropTypes.string,\n    }),\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    error: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = {\n      error: null,\n    };\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.loading && nextProps.loaded) {\n      toast.success(\n        <Toast\n          success\n          title={this.props.intl.formatMessage(\n            messages.successRegisterCompletedTitle,\n          )}\n          content={this.props.intl.formatMessage(\n            messages.successRegisterCompletedBody,\n          )}\n        />,\n      );\n      this.props.history.push('/login');\n    }\n  }\n\n  /**\n   * On submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    this.props.createUser({\n      fullname: data.fullname,\n      email: data.email,\n      password: data.password,\n    });\n    this.setState({\n      error: null,\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <div id=\"page-register\">\n        <Helmet title={this.props.intl.formatMessage(messages.register)} />\n        <Form\n          onSubmit={this.onSubmit}\n          title={this.props.intl.formatMessage(messages.title)}\n          error={this.state.error || this.props.error}\n          loading={this.props.loading}\n          submitLabel={this.props.intl.formatMessage(messages.register)}\n          schema={{\n            fieldsets: [\n              {\n                id: 'default',\n                title: this.props.intl.formatMessage(messages.default),\n                fields: ['fullname', 'email'],\n              },\n            ],\n            properties: {\n              fullname: {\n                type: 'string',\n                title: this.props.intl.formatMessage(messages.fullnameTitle),\n                description: this.props.intl.formatMessage(\n                  messages.fullnameDescription,\n                ),\n              },\n              email: {\n                type: 'string',\n                title: this.props.intl.formatMessage(messages.emailTitle),\n                description: this.props.intl.formatMessage(\n                  messages.emailDescription,\n                ),\n              },\n            },\n            required: ['fullname', 'email'],\n          }}\n        />\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  withRouter,\n  injectIntl,\n  connect(\n    (state) => ({\n      loading: state.users.create.loading,\n      loaded: state.users.create.loaded,\n      error: state.users.create.error,\n    }),\n    { createUser },\n  ),\n)(Register);\n"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,SAASC,MAAM,QAAQ,sBAAsB;AAC7C,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,OAAO,QAAQ,OAAO;AAC/B,SAASC,cAAc,EAAEC,UAAU,QAAQ,YAAY;AACvD,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,KAAK,QAAQ,gBAAgB;AAEtC,SAASC,IAAI,EAAEC,KAAK,QAAQ,yBAAyB;AACrD,SAASC,UAAU,QAAQ,sBAAsB;AAEjD,IAAMC,QAAQ,GAAGR,cAAc,CAAC;EAC9BS,KAAK;IAAA;IAAA;EAAA,CAGJ;EACD;IAAA;IAAA;EAAA,CAGC;EACDC,aAAa;IAAA;IAAA;EAAA,CAGZ;EACDC,mBAAmB;IAAA;IAAA;EAAA,CAGlB;EACDC,UAAU;IAAA;IAAA;EAAA,CAGT;EACDC,gBAAgB;IAAA;IAAA;EAAA,CAKf;EACDC,6BAA6B;IAAA;IAAA;EAAA,CAG5B;EACDC,4BAA4B;IAAA;IAAA;EAAA,CAK3B;EACDC,QAAQ;IAAA;IAAA;EAAA;AAIV,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AAJA,IAKMC,QAAQ;EAAA;EAAA;EACZ;AACF;AACA;AACA;AACA;;EAUE;AACF;AACA;AACA;AACA;;EAKE;AACF;AACA;AACA;AACA;AACA;EACE,kBAAYC,KAAK,EAAE;IAAA;IAAA;IACjB,0BAAMA,KAAK;IACX,MAAKC,QAAQ,GAAG,MAAKA,QAAQ,CAACC,IAAI,+BAAM;IACxC,MAAKC,KAAK,GAAG;MACXC,KAAK,EAAE;IACT,CAAC;IAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;AACA;EALE;IAAA;IAAA,OAMA,0CAAiCC,SAAS,EAAE;MAC1C,IAAI,IAAI,CAACL,KAAK,CAACM,OAAO,IAAID,SAAS,CAACE,MAAM,EAAE;QAC1CrB,KAAK,CAACsB,OAAO,CACX,MAAC,KAAK;UACJ,OAAO;UACP,KAAK,EAAE,IAAI,CAACR,KAAK,CAACS,IAAI,CAACC,aAAa,CAClCpB,QAAQ,CAACM,6BAA6B,CACtC;UACF,OAAO,EAAE,IAAI,CAACI,KAAK,CAACS,IAAI,CAACC,aAAa,CACpCpB,QAAQ,CAACO,4BAA4B,CACrC;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,EACF,CACH;QACD,IAAI,CAACG,KAAK,CAACW,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC;MACnC;IACF;;IAEA;AACF;AACA;AACA;AACA;AACA;EALE;IAAA;IAAA,OAMA,kBAASC,IAAI,EAAE;MACb,IAAI,CAACb,KAAK,CAACX,UAAU,CAAC;QACpByB,QAAQ,EAAED,IAAI,CAACC,QAAQ;QACvBC,KAAK,EAAEF,IAAI,CAACE,KAAK;QACjBC,QAAQ,EAAEH,IAAI,CAACG;MACjB,CAAC,CAAC;MACF,IAAI,CAACC,QAAQ,CAAC;QACZb,KAAK,EAAE;MACT,CAAC,CAAC;IACJ;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAA;IAAA,OAKA,kBAAS;MACP,OACE;QAAK,EAAE,EAAC,eAAe;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GACrB,MAAC,MAAM;QAAC,KAAK,EAAE,IAAI,CAACJ,KAAK,CAACS,IAAI,CAACC,aAAa,CAACpB,QAAQ,CAACQ,QAAQ,CAAE;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAAG,EACnE,MAAC,IAAI;QACH,QAAQ,EAAE,IAAI,CAACG,QAAS;QACxB,KAAK,EAAE,IAAI,CAACD,KAAK,CAACS,IAAI,CAACC,aAAa,CAACpB,QAAQ,CAACC,KAAK,CAAE;QACrD,KAAK,EAAE,IAAI,CAACY,KAAK,CAACC,KAAK,IAAI,IAAI,CAACJ,KAAK,CAACI,KAAM;QAC5C,OAAO,EAAE,IAAI,CAACJ,KAAK,CAACM,OAAQ;QAC5B,WAAW,EAAE,IAAI,CAACN,KAAK,CAACS,IAAI,CAACC,aAAa,CAACpB,QAAQ,CAACQ,QAAQ,CAAE;QAC9D,MAAM,EAAE;UACNoB,SAAS,EAAE,CACT;YACEC,EAAE,EAAE,SAAS;YACb5B,KAAK,EAAE,IAAI,CAACS,KAAK,CAACS,IAAI,CAACC,aAAa,CAACpB,QAAQ,WAAQ,CAAC;YACtD8B,MAAM,EAAE,CAAC,UAAU,EAAE,OAAO;UAC9B,CAAC,CACF;UACDC,UAAU,EAAE;YACVP,QAAQ,EAAE;cACRQ,IAAI,EAAE,QAAQ;cACd/B,KAAK,EAAE,IAAI,CAACS,KAAK,CAACS,IAAI,CAACC,aAAa,CAACpB,QAAQ,CAACE,aAAa,CAAC;cAC5D+B,WAAW,EAAE,IAAI,CAACvB,KAAK,CAACS,IAAI,CAACC,aAAa,CACxCpB,QAAQ,CAACG,mBAAmB;YAEhC,CAAC;YACDsB,KAAK,EAAE;cACLO,IAAI,EAAE,QAAQ;cACd/B,KAAK,EAAE,IAAI,CAACS,KAAK,CAACS,IAAI,CAACC,aAAa,CAACpB,QAAQ,CAACI,UAAU,CAAC;cACzD6B,WAAW,EAAE,IAAI,CAACvB,KAAK,CAACS,IAAI,CAACC,aAAa,CACxCpB,QAAQ,CAACK,gBAAgB;YAE7B;UACF,CAAC;UACD6B,QAAQ,EAAE,CAAC,UAAU,EAAE,OAAO;QAChC,CAAE;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EACF,CACE;IAEV;EAAC;EAAA;AAAA,EA1HoB9C,SAAS;AAAA,gBAA1BqB,QAAQ,eAMO;EACjBV,UAAU,EAAEL,SAAS,CAACyC,IAAI,CAACC,UAAU;EACrCpB,OAAO,EAAEtB,SAAS,CAAC2C,IAAI,CAACD,UAAU;EAClCnB,MAAM,EAAEvB,SAAS,CAAC2C,IAAI,CAACD,UAAU;EACjCtB,KAAK,EAAEpB,SAAS,CAAC4C,KAAK,CAAC;IACrBC,OAAO,EAAE7C,SAAS,CAAC8C;EACrB,CAAC;AACH,CAAC;AAAA,gBAbG/B,QAAQ,kBAoBU;EACpBK,KAAK,EAAE;AACT,CAAC;AAuGH,eAAevB,OAAO,CACpBI,UAAU,EACVF,UAAU,EACVH,OAAO,CACL,UAACuB,KAAK;EAAA,OAAM;IACVG,OAAO,EAAEH,KAAK,CAAC4B,KAAK,CAACC,MAAM,CAAC1B,OAAO;IACnCC,MAAM,EAAEJ,KAAK,CAAC4B,KAAK,CAACC,MAAM,CAACzB,MAAM;IACjCH,KAAK,EAAED,KAAK,CAAC4B,KAAK,CAACC,MAAM,CAAC5B;EAC5B,CAAC;AAAA,CAAC,EACF;EAAEf,UAAU,EAAVA;AAAW,CAAC,CACf,CACF,CAACU,QAAQ,CAAC"},"metadata":{"react-intl":{"messages":[{"id":"Registration form","defaultMessage":"Registration form"},{"id":"Default","defaultMessage":"Default"},{"id":"Full Name","defaultMessage":"Full Name"},{"id":"Enter full name, e.g. John Smith.","defaultMessage":"Enter full name, e.g. John Smith."},{"id":"E-mail","defaultMessage":"E-mail"},{"id":"Enter an email address. This will be your login name. We respect your privacy, and will not give the address away to any third parties or expose it anywhere.","defaultMessage":"Enter an email address. This will be your login name. We respect your privacy, and will not give the address away to any third parties or expose it anywhere."},{"id":"Account Registration Completed","defaultMessage":"Account Registration Completed"},{"id":"The registration process has been successful. Please check your e-mail inbox for information on how activate your account.","defaultMessage":"The registration process has been successful. Please check your e-mail inbox for information on how activate your account."},{"id":"Register","defaultMessage":"Register"}]}},"sourceType":"module","externalDependencies":[]}