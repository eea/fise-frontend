{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/volto-slate/src/widgets/BlocksBrowser/BlocksBrowserNav.jsx\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Button, Segment, Popup } from 'semantic-ui-react';\nimport { useIntl, defineMessages } from 'react-intl';\nimport cx from 'classnames';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport { getContentIcon } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\nimport rightArrowSVG from '@plone/volto/icons/right-key.svg';\nimport leftArrowSVG from '@plone/volto/icons/left-key.svg';\nimport homeSVG from '@plone/volto/icons/home.svg';\nconst messages = defineMessages({\n  browse: {\n    \"id\": \"Browse\",\n    \"defaultMessage\": \"Browse\"\n  },\n  back: {\n    \"id\": \"Back\",\n    \"defaultMessage\": \"Back\"\n  },\n  select: {\n    \"id\": \"Select\",\n    \"defaultMessage\": \"Select\"\n  }\n});\n// TODO: getBlocks in Block configuration\n// TODO: Merge/Use 'volto-slate/utils' getAllBlocks\nconst getBlocks = data => {\n  var _data$blocks_layout, _data$blocks_layout$i;\n  if (!(data !== null && data !== void 0 && (_data$blocks_layout = data.blocks_layout) !== null && _data$blocks_layout !== void 0 && (_data$blocks_layout$i = _data$blocks_layout.items) !== null && _data$blocks_layout$i !== void 0 && _data$blocks_layout$i.length)) return [];\n  return data.blocks_layout.items.map((block, index) => {\n    var _config$blocks$blocks, _config$blocks$blocks2, _config$blocks$blocks3;\n    const type = data.blocks[block]['@type'];\n    return _objectSpread({\n      type: type || `unknown_${index}`,\n      title: data.blocks[block].id || ((_config$blocks$blocks = config.blocks.blocksConfig[type]) === null || _config$blocks$blocks === void 0 ? void 0 : _config$blocks$blocks.title) || type || `unknown_${index}`,\n      id: data.blocks[block].id || block\n    }, ((_config$blocks$blocks2 = config.blocks.blocksConfig[type]) === null || _config$blocks$blocks2 === void 0 ? void 0 : (_config$blocks$blocks3 = _config$blocks$blocks2.getBlocks) === null || _config$blocks$blocks3 === void 0 ? void 0 : _config$blocks$blocks3.call(_config$blocks$blocks2, _objectSpread(_objectSpread({}, data.blocks[block]), {}, {\n      parentId: block\n    }))) || {});\n  });\n};\nconst addHighlight = id => {\n  const element = document.getElementById(id);\n  if (element && !element.classList.contains('block-highlight')) {\n    element.classList.add('block-highlight');\n  }\n};\nconst removeHighlight = id => {\n  const element = document.getElementById(id);\n  if (element && element.classList.contains('block-highlight')) {\n    element.classList.remove('block-highlight');\n  }\n};\nconst BlocksBrowserNav = props => {\n  const {\n    selected,\n    handleClickOnItem,\n    handleDoubleClickOnItem,\n    content\n  } = props;\n  const blocksData = getBlocks(content);\n  const [selectedBlocks, setSelectedBlocks] = React.useState(null);\n  const [parent, setParent] = React.useState(null);\n  const intl = useIntl();\n  const isSelected = item => {\n    let ret = false;\n    if (selected) {\n      selected.filter(item => item != null).forEach(_item => {\n        if (_item['id'] === item['id']) {\n          ret = true;\n        }\n      });\n    }\n    return ret;\n  };\n  const blocks = selectedBlocks || blocksData;\n  return __jsx(Segment, {\n    as: \"ul\",\n    className: \"object-listing\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, selectedBlocks ? __jsx(Button.Group, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    basic: true,\n    icon: true,\n    onClick: e => {\n      e.stopPropagation();\n      setSelectedBlocks(null);\n      removeHighlight(parent);\n      setParent(null);\n    },\n    \"aria-label\": intl.formatMessage(messages.back),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 11\n    }\n  }, __jsx(Icon, {\n    name: leftArrowSVG,\n    size: \"24px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  }))) : '', blocks && blocks.map(item => {\n    var _item$blocks;\n    return __jsx(\"li\", {\n      role: \"presentation\",\n      \"aria-label\": `${intl.formatMessage(messages.select)} ${item.id}`,\n      key: item.id,\n      className: cx('', {\n        'selected-item': isSelected(item)\n      }),\n      onClick: () => handleClickOnItem(item),\n      onDoubleClick: () => handleDoubleClickOnItem(item),\n      onMouseOver: () => {\n        addHighlight(item.id);\n      },\n      onMouseOut: () => {\n        removeHighlight(item.id);\n      },\n      onFocus: () => {},\n      onBlur: () => {},\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }\n    }, __jsx(\"span\", {\n      title: item['title'],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }\n    }, __jsx(Popup, {\n      key: item['id'],\n      content: __jsx(React.Fragment, null, __jsx(Icon, {\n        name: homeSVG,\n        size: \"18px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 21\n        }\n      }), \" \", item['title']),\n      trigger: __jsx(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 19\n        }\n      }, __jsx(Icon, {\n        name: getContentIcon(item['title'], false),\n        size: \"24px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 21\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 15\n      }\n    }), item['title']), (_item$blocks = item.blocks) !== null && _item$blocks !== void 0 && _item$blocks.length ? __jsx(Button.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 15\n      }\n    }, __jsx(Button, {\n      basic: true,\n      icon: true,\n      onClick: e => {\n        e.stopPropagation();\n        setSelectedBlocks(item.blocks);\n        if (!parent) {\n          setParent(item.id);\n        }\n      },\n      \"aria-label\": `${intl.formatMessage(messages.browse)} ${item.id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }\n    }, __jsx(Icon, {\n      name: rightArrowSVG,\n      size: \"24px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 19\n      }\n    }))) : '');\n  }));\n};\nexport default connect(state => ({\n  content: state.content.data\n}))(BlocksBrowserNav);","map":{"version":3,"names":["React","connect","Button","Segment","Popup","useIntl","defineMessages","cx","Icon","getContentIcon","config","rightArrowSVG","leftArrowSVG","homeSVG","messages","browse","back","select","getBlocks","data","blocks_layout","items","length","map","block","index","type","blocks","title","id","blocksConfig","parentId","addHighlight","element","document","getElementById","classList","contains","add","removeHighlight","remove","BlocksBrowserNav","props","selected","handleClickOnItem","handleDoubleClickOnItem","content","blocksData","selectedBlocks","setSelectedBlocks","useState","parent","setParent","intl","isSelected","item","ret","filter","forEach","_item","e","stopPropagation","formatMessage","state"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/volto-slate/src/widgets/BlocksBrowser/BlocksBrowserNav.jsx"],"sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Button, Segment, Popup } from 'semantic-ui-react';\nimport { useIntl, defineMessages } from 'react-intl';\nimport cx from 'classnames';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport { getContentIcon } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\n\nimport rightArrowSVG from '@plone/volto/icons/right-key.svg';\nimport leftArrowSVG from '@plone/volto/icons/left-key.svg';\nimport homeSVG from '@plone/volto/icons/home.svg';\n\nconst messages = defineMessages({\n  browse: {\n    id: 'Browse',\n    defaultMessage: 'Browse',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  select: {\n    id: 'Select',\n    defaultMessage: 'Select',\n  },\n});\n// TODO: getBlocks in Block configuration\n// TODO: Merge/Use 'volto-slate/utils' getAllBlocks\nconst getBlocks = (data) => {\n  if (!data?.blocks_layout?.items?.length) return [];\n  return data.blocks_layout.items.map((block, index) => {\n    const type = data.blocks[block]['@type'];\n    return {\n      type: type || `unknown_${index}`,\n      title:\n        data.blocks[block].id ||\n        config.blocks.blocksConfig[type]?.title ||\n        type ||\n        `unknown_${index}`,\n      id: data.blocks[block].id || block,\n      ...(config.blocks.blocksConfig[type]?.getBlocks?.({\n        ...data.blocks[block],\n        parentId: block,\n      }) || {}),\n    };\n  });\n};\n\nconst addHighlight = (id) => {\n  const element = document.getElementById(id);\n  if (element && !element.classList.contains('block-highlight')) {\n    element.classList.add('block-highlight');\n  }\n};\n\nconst removeHighlight = (id) => {\n  const element = document.getElementById(id);\n  if (element && element.classList.contains('block-highlight')) {\n    element.classList.remove('block-highlight');\n  }\n};\n\nconst BlocksBrowserNav = (props) => {\n  const {\n    selected,\n    handleClickOnItem,\n    handleDoubleClickOnItem,\n    content,\n  } = props;\n  const blocksData = getBlocks(content);\n  const [selectedBlocks, setSelectedBlocks] = React.useState(null);\n  const [parent, setParent] = React.useState(null);\n  const intl = useIntl();\n  const isSelected = (item) => {\n    let ret = false;\n    if (selected) {\n      selected\n        .filter((item) => item != null)\n        .forEach((_item) => {\n          if (_item['id'] === item['id']) {\n            ret = true;\n          }\n        });\n    }\n    return ret;\n  };\n\n  const blocks = selectedBlocks || blocksData;\n\n  return (\n    <Segment as=\"ul\" className=\"object-listing\">\n      {selectedBlocks ? (\n        <Button.Group>\n          <Button\n            basic\n            icon\n            onClick={(e) => {\n              e.stopPropagation();\n              setSelectedBlocks(null);\n              removeHighlight(parent);\n              setParent(null);\n            }}\n            aria-label={intl.formatMessage(messages.back)}\n          >\n            <Icon name={leftArrowSVG} size=\"24px\" />\n          </Button>\n        </Button.Group>\n      ) : (\n        ''\n      )}\n      {blocks &&\n        blocks.map((item) => (\n          <li\n            role=\"presentation\"\n            aria-label={`${intl.formatMessage(messages.select)} ${item.id}`}\n            key={item.id}\n            className={cx('', {\n              'selected-item': isSelected(item),\n            })}\n            onClick={() => handleClickOnItem(item)}\n            onDoubleClick={() => handleDoubleClickOnItem(item)}\n            onMouseOver={() => {\n              addHighlight(item.id);\n            }}\n            onMouseOut={() => {\n              removeHighlight(item.id);\n            }}\n            onFocus={() => {}}\n            onBlur={() => {}}\n          >\n            <span title={item['title']}>\n              <Popup\n                key={item['id']}\n                content={\n                  <>\n                    <Icon name={homeSVG} size=\"18px\" /> {item['title']}\n                  </>\n                }\n                trigger={\n                  <span>\n                    <Icon\n                      name={getContentIcon(item['title'], false)}\n                      size=\"24px\"\n                    />\n                  </span>\n                }\n              />\n\n              {item['title']}\n            </span>\n            {item.blocks?.length ? (\n              <Button.Group>\n                <Button\n                  basic\n                  icon\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setSelectedBlocks(item.blocks);\n                    if (!parent) {\n                      setParent(item.id);\n                    }\n                  }}\n                  aria-label={`${intl.formatMessage(messages.browse)} ${\n                    item.id\n                  }`}\n                >\n                  <Icon name={rightArrowSVG} size=\"24px\" />\n                </Button>\n              </Button.Group>\n            ) : (\n              ''\n            )}\n          </li>\n        ))}\n    </Segment>\n  );\n};\n\nexport default connect((state) => ({\n  content: state.content.data,\n}))(BlocksBrowserNav);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Browse","defaultMessage":"Browse"},{"id":"Back","defaultMessage":"Back"},{"id":"Select","defaultMessage":"Select"}]}},"sourceType":"module","externalDependencies":[]}