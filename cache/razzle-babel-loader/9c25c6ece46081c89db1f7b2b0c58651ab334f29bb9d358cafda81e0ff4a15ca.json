{"ast":null,"code":"import _assertThisInitialized from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _extends from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/extends.js\";\nimport _classCallCheck from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-plotlycharts/src/ChartEditor/CustomColorPicker.jsx\";\nvar __jsx = React.createElement;\n/* eslint-disable jsx-a11y/no-static-element-interactions */\n/* eslint-disable jsx-a11y/click-events-have-key-events */\nimport Fields from 'react-color/lib/components/sketch/SketchFields';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport tinycolor from 'tinycolor2';\nimport { Hue, Saturation } from 'react-color/lib/components/common';\nimport { CustomPicker as customPicker } from 'react-color';\n\n// Utility functions for converting ColorPicker color objects or raw strings\n// into TinyColor objects.\nvar extractRGB = function extractRGB(c) {\n  return c.rgb || c;\n};\nvar getColorSource = function getColorSource(c) {\n  return c.source === 'hex' ? c.hex : extractRGB(c);\n};\nvar toTinyColor = function toTinyColor(c) {\n  return tinycolor(getColorSource(c));\n};\nvar Custom = /*#__PURE__*/function (_Component) {\n  _inherits(Custom, _Component);\n  var _super = _createSuper(Custom);\n  function Custom() {\n    _classCallCheck(this, Custom);\n    return _super.apply(this, arguments);\n  }\n  _createClass(Custom, [{\n    key: \"render\",\n    value: function render() {\n      var onChangeComplete = this.props.onChangeComplete;\n      return __jsx(\"div\", {\n        className: \"colorpicker__outer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 7\n        }\n      }, __jsx(\"div\", {\n        className: \"colorpicker__controls +flex\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 9\n        }\n      }, __jsx(\"div\", {\n        className: \"colorpicker__sliders\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 11\n        }\n      }, __jsx(\"div\", {\n        className: \"colorpicker__slider\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 13\n        }\n      }, __jsx(Hue, _extends({}, this.props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 15\n        }\n      }))))), __jsx(\"div\", {\n        className: \"colorpicker__saturation\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 9\n        }\n      }, __jsx(Saturation, _extends({}, this.props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }\n      }))), __jsx(\"div\", {\n        className: \"colorpicker__custom-input\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 9\n        }\n      }, __jsx(Fields, _extends({}, this.props, {\n        onChange: onChangeComplete,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }\n      }))));\n    }\n  }]);\n  return Custom;\n}(Component);\nCustom.propTypes = {\n  rgb: PropTypes.object,\n  onChangeComplete: PropTypes.func\n};\nvar CustomColorPicker = customPicker(Custom);\n_c = CustomColorPicker;\nvar ColorPicker = /*#__PURE__*/function (_Component2) {\n  _inherits(ColorPicker, _Component2);\n  var _super2 = _createSuper(ColorPicker);\n  function ColorPicker(props) {\n    var _this;\n    _classCallCheck(this, ColorPicker);\n    _this = _super2.call(this, props);\n    _this.state = {\n      isVisible: false\n    };\n    _this.onSelectedColorChange = _this.onSelectedColorChange.bind(_assertThisInitialized(_this));\n    _this.toggleVisible = _this.toggleVisible.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n  _createClass(ColorPicker, [{\n    key: \"onSelectedColorChange\",\n    value: function onSelectedColorChange(newColor) {\n      // We use our own toTinyColor because this value is a ColorPicker\n      // color value which is an object that needs unpacking. We also handle\n      // the case where a color string is passed in (just in case).\n      var color = toTinyColor(newColor);\n\n      // relayout call only wants a RGB String\n      this.props.onColorChange(color.toRgbString());\n    }\n  }, {\n    key: \"toggleVisible\",\n    value: function toggleVisible() {\n      this.setState({\n        isVisible: !this.state.isVisible\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // We use tinycolor here instead of our own toTinyColor as\n      // tinycolor handles `null` values and other weirdness we may\n      // expect from user data.\n      var selectedColor = tinycolor(this.props.selectedColor);\n      var colorText = selectedColor.toHexString();\n\n      // Convert rgba to rgb if necessary\n      var rgbString = selectedColor._a !== 0 ? selectedColor.toRgbString() : \"rgb(\".concat(selectedColor._r, \",\").concat(selectedColor._g, \",\").concat(selectedColor._b, \")\");\n\n      // We need inline style here to assign the background color\n      // dynamically.\n      var swatchStyle = {\n        backgroundColor: rgbString\n      };\n      return __jsx(React.Fragment, null, __jsx(\"div\", {\n        className: \"colorpicker__container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 9\n        }\n      }, __jsx(\"div\", {\n        className: \"colorpicker\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }\n      }, __jsx(\"div\", {\n        className: \"colorpicker__swatch +cursor-clickable\",\n        style: swatchStyle,\n        onClick: this.toggleVisible,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }\n      })), __jsx(\"div\", {\n        className: \"colorpicker__selected-color +hover-grey\",\n        onClick: this.toggleVisible,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }\n      }, colorText)), this.state.isVisible && __jsx(CustomColorPicker, {\n        color: rgbString,\n        onChangeComplete: this.onSelectedColorChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }\n      }));\n    }\n  }]);\n  return ColorPicker;\n}(Component);\nColorPicker.propTypes = {\n  onColorChange: PropTypes.func.isRequired,\n  selectedColor: PropTypes.string\n};\nexport default ColorPicker;\nvar _c;\n$RefreshReg$(_c, \"CustomColorPicker\");","map":{"version":3,"names":["Fields","React","Component","PropTypes","tinycolor","Hue","Saturation","CustomPicker","customPicker","extractRGB","c","rgb","getColorSource","source","hex","toTinyColor","Custom","onChangeComplete","props","propTypes","object","func","CustomColorPicker","ColorPicker","state","isVisible","onSelectedColorChange","bind","toggleVisible","newColor","color","onColorChange","toRgbString","setState","selectedColor","colorText","toHexString","rgbString","_a","_r","_g","_b","swatchStyle","backgroundColor","isRequired","string"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-plotlycharts/src/ChartEditor/CustomColorPicker.jsx"],"sourcesContent":["/* eslint-disable jsx-a11y/no-static-element-interactions */\n/* eslint-disable jsx-a11y/click-events-have-key-events */\nimport Fields from 'react-color/lib/components/sketch/SketchFields';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport tinycolor from 'tinycolor2';\nimport { Hue, Saturation } from 'react-color/lib/components/common';\nimport { CustomPicker as customPicker } from 'react-color';\n\n// Utility functions for converting ColorPicker color objects or raw strings\n// into TinyColor objects.\nconst extractRGB = (c) => c.rgb || c;\nconst getColorSource = (c) => (c.source === 'hex' ? c.hex : extractRGB(c));\nconst toTinyColor = (c) => tinycolor(getColorSource(c));\n\nclass Custom extends Component {\n  render() {\n    const { onChangeComplete } = this.props;\n\n    return (\n      <div className=\"colorpicker__outer\">\n        <div className=\"colorpicker__controls +flex\">\n          <div className=\"colorpicker__sliders\">\n            <div className=\"colorpicker__slider\">\n              <Hue {...this.props} />\n            </div>\n          </div>\n        </div>\n        <div className=\"colorpicker__saturation\">\n          <Saturation {...this.props} />\n        </div>\n        <div className=\"colorpicker__custom-input\">\n          <Fields {...this.props} onChange={onChangeComplete} />\n        </div>\n      </div>\n    );\n  }\n}\n\nCustom.propTypes = {\n  rgb: PropTypes.object,\n  onChangeComplete: PropTypes.func,\n};\n\nconst CustomColorPicker = customPicker(Custom);\n\nclass ColorPicker extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isVisible: false,\n    };\n\n    this.onSelectedColorChange = this.onSelectedColorChange.bind(this);\n    this.toggleVisible = this.toggleVisible.bind(this);\n  }\n\n  onSelectedColorChange(newColor) {\n    // We use our own toTinyColor because this value is a ColorPicker\n    // color value which is an object that needs unpacking. We also handle\n    // the case where a color string is passed in (just in case).\n    const color = toTinyColor(newColor);\n\n    // relayout call only wants a RGB String\n    this.props.onColorChange(color.toRgbString());\n  }\n\n  toggleVisible() {\n    this.setState({ isVisible: !this.state.isVisible });\n  }\n\n  render() {\n    // We use tinycolor here instead of our own toTinyColor as\n    // tinycolor handles `null` values and other weirdness we may\n    // expect from user data.\n    const selectedColor = tinycolor(this.props.selectedColor);\n    const colorText = selectedColor.toHexString();\n\n    // Convert rgba to rgb if necessary\n    const rgbString =\n      selectedColor._a !== 0\n        ? selectedColor.toRgbString()\n        : `rgb(${selectedColor._r},${selectedColor._g},${selectedColor._b})`;\n\n    // We need inline style here to assign the background color\n    // dynamically.\n    const swatchStyle = { backgroundColor: rgbString };\n\n    return (\n      <>\n        <div className=\"colorpicker__container\">\n          <div className=\"colorpicker\">\n            <div\n              className=\"colorpicker__swatch +cursor-clickable\"\n              style={swatchStyle}\n              onClick={this.toggleVisible}\n            />\n          </div>\n\n          <div\n            className=\"colorpicker__selected-color +hover-grey\"\n            onClick={this.toggleVisible}\n          >\n            {colorText}\n          </div>\n        </div>\n\n        {this.state.isVisible && (\n          <CustomColorPicker\n            color={rgbString}\n            onChangeComplete={this.onSelectedColorChange}\n          />\n        )}\n      </>\n    );\n  }\n}\n\nColorPicker.propTypes = {\n  onColorChange: PropTypes.func.isRequired,\n  selectedColor: PropTypes.string,\n};\n\nexport default ColorPicker;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}