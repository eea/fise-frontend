{"ast":null,"code":"import _extends from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/extends.js\";\nimport _slicedToArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _isEqual from \"lodash/isEqual\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Blocks/HTML/Edit.jsx\",\n  _this5 = this;\nvar __jsx = React.createElement;\n/**\n * Edit html block.\n * @module components/manage/Blocks/HTML/Edit\n */\n\nimport { compose } from 'redux';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Popup } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport loadable from '@loadable/component';\nimport { Icon } from '@plone/volto/components';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport showSVG from '@plone/volto/icons/show.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport codeSVG from '@plone/volto/icons/code.svg';\nimport indentSVG from '@plone/volto/icons/indent.svg';\nvar Editor = loadable({\n  resolved: {},\n  chunkName: function chunkName() {\n    return \"react-simple-code-editor\";\n  },\n  isReady: function isReady(props) {\n    var key = this.resolve(props);\n    if (this.resolved[key] !== true) {\n      return false;\n    }\n    if (typeof __webpack_modules__ !== 'undefined') {\n      return !!__webpack_modules__[key];\n    }\n    return false;\n  },\n  importAsync: function importAsync() {\n    return import( /* webpackChunkName: \"react-simple-code-editor\" */'react-simple-code-editor');\n  },\n  requireAsync: function requireAsync(props) {\n    var _this = this;\n    var key = this.resolve(props);\n    this.resolved[key] = false;\n    return this.importAsync(props).then(function (resolved) {\n      _this.resolved[key] = true;\n      return resolved;\n    });\n  },\n  requireSync: function requireSync(props) {\n    var id = this.resolve(props);\n    if (typeof __webpack_require__ !== 'undefined') {\n      return __webpack_require__(id);\n    }\n    return eval('module.require')(id);\n  },\n  resolve: function resolve() {\n    if (require.resolveWeak) {\n      return require.resolveWeak(\"react-simple-code-editor\");\n    }\n    return eval('require.resolve')(\"react-simple-code-editor\");\n  }\n});\n_c = Editor;\nvar messages = defineMessages({\n  source: {\n    \"id\": \"Source\",\n    \"defaultMessage\": \"Source\"\n  },\n  preview: {\n    \"id\": \"Preview\",\n    \"defaultMessage\": \"Preview\"\n  },\n  placeholder: {\n    \"id\": \"<p>Add some HTML here</p>\",\n    \"defaultMessage\": \"<p>Add some HTML here</p>\"\n  },\n  prettier: {\n    \"id\": \"Prettify your code\",\n    \"defaultMessage\": \"Prettify your code\"\n  },\n  clear: {\n    \"id\": \"Clear\",\n    \"defaultMessage\": \"Clear\"\n  },\n  code: {\n    \"id\": \"Code\",\n    \"defaultMessage\": \"Code\"\n  }\n});\n\n/**\n * Edit html block class.\n * @class Edit\n * @extends Component\n */\nvar Edit = /*#__PURE__*/function (_Component) {\n  _inherits(Edit, _Component);\n  var _super = _createSuper(Edit);\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   */\n  function Edit(props) {\n    var _this2;\n    _classCallCheck(this, Edit);\n    _this2 = _super.call(this, props);\n    _defineProperty(_assertThisInitialized(_this2), \"codeEditorRef\", /*#__PURE__*/React.createRef());\n    _defineProperty(_assertThisInitialized(_this2), \"savedSelection\", {});\n    _defineProperty(_assertThisInitialized(_this2), \"onPrettify\", function () {\n      try {\n        var code = _this2.props.prettierStandalone.format(_this2.getValue(), {\n          parser: 'html',\n          plugins: [_this2.props.prettierParserHtml]\n        }).trim();\n        _this2.onChangeCode(code);\n      } catch (ex) {\n        // error while parsing the user-typed HTML\n        // TODO: show a toast notification or something similar to the user\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this2), \"getSelection\", function (editor) {\n      if (!editor || !editor._input) {\n        return {};\n      }\n      var o = {};\n      if (editor._input.selectionStart) {\n        o.selectionStart = editor._input.selectionStart;\n      }\n      if (editor._input.selectionEnd) {\n        o.selectionEnd = editor._input.selectionEnd;\n      }\n      return o;\n    });\n    _defineProperty(_assertThisInitialized(_this2), \"restoreSelectionAndFocus\", function (editor) {\n      var _this2$savedSelection, _this2$savedSelection2;\n      // Don't restore selection when the block is not selected.\n      if (_this2.props.selected && editor._input && typeof ((_this2$savedSelection = _this2.savedSelection) === null || _this2$savedSelection === void 0 ? void 0 : _this2$savedSelection.selectionStart) === 'number' && typeof ((_this2$savedSelection2 = _this2.savedSelection) === null || _this2$savedSelection2 === void 0 ? void 0 : _this2$savedSelection2.selectionEnd) === 'number') {\n        var _this2$savedSelection3, _this2$savedSelection4;\n        editor._input.selectionStart = (_this2$savedSelection3 = _this2.savedSelection) === null || _this2$savedSelection3 === void 0 ? void 0 : _this2$savedSelection3.selectionStart;\n        editor._input.selectionEnd = (_this2$savedSelection4 = _this2.savedSelection) === null || _this2$savedSelection4 === void 0 ? void 0 : _this2$savedSelection4.selectionEnd;\n        editor._input.focus();\n      }\n    });\n    _this2.state = {\n      isPreview: false\n    };\n    _this2.onChangeCode = _this2.onChangeCode.bind(_assertThisInitialized(_this2));\n    _this2.onPreview = _this2.onPreview.bind(_assertThisInitialized(_this2));\n    _this2.onCodeEditor = _this2.onCodeEditor.bind(_assertThisInitialized(_this2));\n    return _this2;\n  }\n  _createClass(Edit, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      // The selection is saved in the snapshot.\n      this.savedSelection = snapshot;\n      this.restoreSelectionAndFocus(this.codeEditorRef.current);\n    }\n\n    /**\n     * @param {*} nextProps\n     * @param {*} nextState\n     * @returns {boolean}\n     * @memberof Edit\n     */\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps) {\n      // Always rerender when the DOM node is not created for the Editor (the\n      // first call to shouldComponentUpdate).\n      if (!this._input) {\n        return true;\n      }\n\n      // Rerender the entire component when the Editor in it changes its selection\n      // because this way we get a call to getSnapshotBeforeUpdate where we can\n      // save the selection.\n      return this.props.selected || !_isEqual(this.props.data, nextProps.data) || this._input.selectionStart !== this.savedSelection.selectionStart || this._input.selectionEnd !== this.savedSelection.selectionEnd;\n    }\n\n    /**\n     * Change html handler\n     * @method onChangeCode\n     * @param {string} code New value html\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onChangeCode\",\n    value: function onChangeCode(code) {\n      this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n        html: code\n      }));\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      return this.props.data.html || '';\n    }\n\n    /**\n     * Preview mode handler\n     * @method onPreview\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onPreview\",\n    value: function onPreview() {\n      var _this3 = this;\n      try {\n        var code = this.props.prettierStandalone.format(this.getValue(), {\n          parser: 'html',\n          plugins: [this.props.prettierParserHtml]\n        }).trim();\n        this.setState({\n          isPreview: !this.state.isPreview\n        }, function () {\n          return _this3.onChangeCode(code);\n        });\n      } catch (ex) {\n        // error while parsing the user-typed HTML\n        // TODO: show a toast notification or something similar to the user\n      }\n    }\n\n    /**\n     * Prettify handler\n     * @method onPrettify\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onCodeEditor\",\n    value:\n    /**\n     * Code Editor mode handler\n     * @method onPreview\n     * @returns {undefined}\n     */\n    function onCodeEditor() {\n      this.setState({\n        isPreview: !this.state.isPreview\n      });\n    }\n  }, {\n    key: \"getSnapshotBeforeUpdate\",\n    value: function getSnapshotBeforeUpdate(prevProps, prevState) {\n      return this.getSelection(this.codeEditorRef.current);\n    }\n  }, {\n    key: \"render\",\n    value:\n    /**\n     * Render method.\n     * @method render\n     * @returns {string} Markup for the component.\n     */\n    function render() {\n      var _this4 = this,\n        _this$props$prismCore,\n        _this$props$prismCore2,\n        _this$props$prismCore3;\n      var placeholder = this.props.data.placeholder || this.props.intl.formatMessage(messages.placeholder);\n      var value = this.getValue();\n      return __jsx(React.Fragment, null, this.props.selected && value && __jsx(\"div\", {\n        className: \"toolbar\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 11\n        }\n      }, __jsx(Popup, {\n        trigger: __jsx(Button, {\n          icon: true,\n          basic: true,\n          \"aria-label\": this.props.intl.formatMessage(messages.source),\n          active: !this.state.isPreview,\n          onClick: this.onCodeEditor,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 250,\n            columnNumber: 17\n          }\n        }, __jsx(Icon, {\n          name: codeSVG,\n          size: \"24px\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 19\n          }\n        })),\n        position: \"top center\",\n        content: this.props.intl.formatMessage(messages.code),\n        size: \"mini\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 13\n        }\n      }), __jsx(Popup, {\n        trigger: __jsx(Button, {\n          icon: true,\n          basic: true,\n          \"aria-label\": this.props.intl.formatMessage(messages.preview),\n          active: this.state.isPreview,\n          onClick: this.onPreview,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 17\n          }\n        }, __jsx(Icon, {\n          name: showSVG,\n          size: \"24px\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 19\n          }\n        })),\n        position: \"top center\",\n        content: this.props.intl.formatMessage(messages.preview),\n        size: \"mini\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 13\n        }\n      }), __jsx(Popup, {\n        trigger: __jsx(Button, {\n          icon: true,\n          basic: true,\n          \"aria-label\": this.props.intl.formatMessage(messages.prettier),\n          onClick: this.onPrettify,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 17\n          }\n        }, __jsx(Icon, {\n          name: indentSVG,\n          size: \"24px\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 19\n          }\n        })),\n        position: \"top center\",\n        content: this.props.intl.formatMessage(messages.prettier),\n        size: \"mini\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280,\n          columnNumber: 13\n        }\n      }), __jsx(\"div\", {\n        className: \"separator\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 13\n        }\n      }), __jsx(Popup, {\n        trigger: __jsx(Button.Group, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 298,\n            columnNumber: 17\n          }\n        }, __jsx(Button, {\n          icon: true,\n          basic: true,\n          onClick: function onClick() {\n            return _this4.onChangeCode('');\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 19\n          }\n        }, __jsx(Icon, {\n          name: clearSVG,\n          size: \"24px\",\n          color: \"#e40166\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 21\n          }\n        }))),\n        position: \"top center\",\n        content: this.props.intl.formatMessage(messages.clear),\n        size: \"mini\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 13\n        }\n      })), this.state.isPreview ? __jsx(\"div\", {\n        dangerouslySetInnerHTML: {\n          __html: value\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 11\n        }\n      }) : __jsx(Editor, {\n        value: this.getValue(),\n        readOnly: !this.props.editable,\n        placeholder: placeholder,\n        onValueChange: function onValueChange(code) {\n          return _this4.onChangeCode(code);\n        },\n        highlight: (_this$props$prismCore = this.props.prismCore) !== null && _this$props$prismCore !== void 0 && _this$props$prismCore.highlight && (_this$props$prismCore2 = this.props.prismCore) !== null && _this$props$prismCore2 !== void 0 && (_this$props$prismCore3 = _this$props$prismCore2.languages) !== null && _this$props$prismCore3 !== void 0 && _this$props$prismCore3.html ? function (code) {\n          return _this4.props.prismCore.highlight(code, _this4.props.prismCore.languages.html, 'html');\n        } : function () {},\n        padding: 8,\n        className: \"html-editor\",\n        ref: function ref(node) {\n          if (node) {\n            _this4.codeEditorRef.current = node;\n          }\n        },\n        ignoreTabKey: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 11\n        }\n      }));\n    }\n  }]);\n  return Edit;\n}(Component);\n_defineProperty(Edit, \"propTypes\", {\n  selected: PropTypes.bool.isRequired,\n  block: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  onChangeBlock: PropTypes.func.isRequired,\n  onSelectBlock: PropTypes.func.isRequired,\n  onDeleteBlock: PropTypes.func.isRequired,\n  handleKeyDown: PropTypes.func.isRequired,\n  editable: PropTypes.bool\n});\n_defineProperty(Edit, \"defaultProps\", {\n  editable: true\n});\nvar withPrismMarkup = function withPrismMarkup(WrappedComponent) {\n  var _s = $RefreshSig$();\n  return _s(function (props) {\n    _s();\n    var _React$useState = React.useState(),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      loaded = _React$useState2[0],\n      setLoaded = _React$useState2[1];\n    var promise = React.useRef(null);\n    var cancelled = React.useRef(false);\n    React.useEffect(function () {\n      promise.current = import('prismjs/components/prism-markup');\n      promise.current.then(function () {\n        if (!cancelled.current) {\n          setLoaded(true);\n        }\n      });\n      return function () {\n        cancelled.current = true;\n      };\n    }, []);\n    return loaded ? __jsx(WrappedComponent, _extends({}, props, {\n      __self: _this5,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 19\n      }\n    })) : null;\n  }, \"fRlpqsEqxY9QHNnz9gFOsq6OyFQ=\");\n};\nexport default compose(injectLazyLibs(['prettierStandalone', 'prettierParserHtml', 'prismCore']), withPrismMarkup, injectIntl)(Edit);\nvar _c;\n$RefreshReg$(_c, \"Editor\");","map":{"version":3,"names":["compose","React","Component","PropTypes","Button","Popup","defineMessages","injectIntl","loadable","Icon","injectLazyLibs","showSVG","clearSVG","codeSVG","indentSVG","Editor","messages","source","preview","placeholder","prettier","clear","code","Edit","props","createRef","prettierStandalone","format","getValue","parser","plugins","prettierParserHtml","trim","onChangeCode","ex","editor","_input","o","selectionStart","selectionEnd","selected","savedSelection","focus","state","isPreview","bind","onPreview","onCodeEditor","prevProps","prevState","snapshot","restoreSelectionAndFocus","codeEditorRef","current","nextProps","data","onChangeBlock","block","html","setState","getSelection","intl","formatMessage","value","onPrettify","__html","editable","prismCore","highlight","languages","node","bool","isRequired","string","index","number","objectOf","any","func","onSelectBlock","onDeleteBlock","handleKeyDown","withPrismMarkup","WrappedComponent","useState","loaded","setLoaded","promise","useRef","cancelled","useEffect","then"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Blocks/HTML/Edit.jsx"],"sourcesContent":["/**\n * Edit html block.\n * @module components/manage/Blocks/HTML/Edit\n */\n\nimport { compose } from 'redux';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Popup } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport loadable from '@loadable/component';\nimport { isEqual } from 'lodash';\n\nimport { Icon } from '@plone/volto/components';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport showSVG from '@plone/volto/icons/show.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport codeSVG from '@plone/volto/icons/code.svg';\nimport indentSVG from '@plone/volto/icons/indent.svg';\n\nconst Editor = loadable(() => import('react-simple-code-editor'));\n\nconst messages = defineMessages({\n  source: {\n    id: 'Source',\n    defaultMessage: 'Source',\n  },\n  preview: {\n    id: 'Preview',\n    defaultMessage: 'Preview',\n  },\n  placeholder: {\n    id: '<p>Add some HTML here</p>',\n    defaultMessage: '<p>Add some HTML here</p>',\n  },\n  prettier: {\n    id: 'Prettify your code',\n    defaultMessage: 'Prettify your code',\n  },\n  clear: {\n    id: 'Clear',\n    defaultMessage: 'Clear',\n  },\n  code: {\n    id: 'Code',\n    defaultMessage: 'Code',\n  },\n});\n\n/**\n * Edit html block class.\n * @class Edit\n * @extends Component\n */\nclass Edit extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    selected: PropTypes.bool.isRequired,\n    block: PropTypes.string.isRequired,\n    index: PropTypes.number.isRequired,\n    data: PropTypes.objectOf(PropTypes.any).isRequired,\n    onChangeBlock: PropTypes.func.isRequired,\n    onSelectBlock: PropTypes.func.isRequired,\n    onDeleteBlock: PropTypes.func.isRequired,\n    handleKeyDown: PropTypes.func.isRequired,\n    editable: PropTypes.bool,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    editable: true,\n  };\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      isPreview: false,\n    };\n    this.onChangeCode = this.onChangeCode.bind(this);\n    this.onPreview = this.onPreview.bind(this);\n    this.onCodeEditor = this.onCodeEditor.bind(this);\n  }\n\n  codeEditorRef = React.createRef();\n  savedSelection = {};\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    // The selection is saved in the snapshot.\n    this.savedSelection = snapshot;\n\n    this.restoreSelectionAndFocus(this.codeEditorRef.current);\n  }\n\n  /**\n   * @param {*} nextProps\n   * @param {*} nextState\n   * @returns {boolean}\n   * @memberof Edit\n   */\n  shouldComponentUpdate(nextProps) {\n    // Always rerender when the DOM node is not created for the Editor (the\n    // first call to shouldComponentUpdate).\n    if (!this._input) {\n      return true;\n    }\n\n    // Rerender the entire component when the Editor in it changes its selection\n    // because this way we get a call to getSnapshotBeforeUpdate where we can\n    // save the selection.\n    return (\n      this.props.selected ||\n      !isEqual(this.props.data, nextProps.data) ||\n      this._input.selectionStart !== this.savedSelection.selectionStart ||\n      this._input.selectionEnd !== this.savedSelection.selectionEnd\n    );\n  }\n\n  /**\n   * Change html handler\n   * @method onChangeCode\n   * @param {string} code New value html\n   * @returns {undefined}\n   */\n  onChangeCode(code) {\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      html: code,\n    });\n  }\n\n  getValue() {\n    return this.props.data.html || '';\n  }\n\n  /**\n   * Preview mode handler\n   * @method onPreview\n   * @returns {undefined}\n   */\n  onPreview() {\n    try {\n      const code = this.props.prettierStandalone\n        .format(this.getValue(), {\n          parser: 'html',\n          plugins: [this.props.prettierParserHtml],\n        })\n        .trim();\n      this.setState(\n        {\n          isPreview: !this.state.isPreview,\n        },\n        () => this.onChangeCode(code),\n      );\n    } catch (ex) {\n      // error while parsing the user-typed HTML\n      // TODO: show a toast notification or something similar to the user\n    }\n  }\n\n  /**\n   * Prettify handler\n   * @method onPrettify\n   * @returns {undefined}\n   */\n  onPrettify = () => {\n    try {\n      const code = this.props.prettierStandalone\n        .format(this.getValue(), {\n          parser: 'html',\n          plugins: [this.props.prettierParserHtml],\n        })\n        .trim();\n      this.onChangeCode(code);\n    } catch (ex) {\n      // error while parsing the user-typed HTML\n      // TODO: show a toast notification or something similar to the user\n    }\n  };\n\n  /**\n   * Code Editor mode handler\n   * @method onPreview\n   * @returns {undefined}\n   */\n  onCodeEditor() {\n    this.setState({ isPreview: !this.state.isPreview });\n  }\n\n  getSelection = (editor) => {\n    if (!editor || !editor._input) {\n      return {};\n    }\n\n    const o = {};\n    if (editor._input.selectionStart) {\n      o.selectionStart = editor._input.selectionStart;\n    }\n    if (editor._input.selectionEnd) {\n      o.selectionEnd = editor._input.selectionEnd;\n    }\n    return o;\n  };\n\n  getSnapshotBeforeUpdate(prevProps, prevState) {\n    return this.getSelection(this.codeEditorRef.current);\n  }\n\n  restoreSelectionAndFocus = (editor) => {\n    // Don't restore selection when the block is not selected.\n    if (\n      this.props.selected &&\n      editor._input &&\n      typeof this.savedSelection?.selectionStart === 'number' &&\n      typeof this.savedSelection?.selectionEnd === 'number'\n    ) {\n      editor._input.selectionStart = this.savedSelection?.selectionStart;\n      editor._input.selectionEnd = this.savedSelection?.selectionEnd;\n      editor._input.focus();\n    }\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const placeholder =\n      this.props.data.placeholder ||\n      this.props.intl.formatMessage(messages.placeholder);\n    const value = this.getValue();\n    return (\n      <>\n        {this.props.selected && value && (\n          <div className=\"toolbar\">\n            <Popup\n              trigger={\n                <Button\n                  icon\n                  basic\n                  aria-label={this.props.intl.formatMessage(messages.source)}\n                  active={!this.state.isPreview}\n                  onClick={this.onCodeEditor}\n                >\n                  <Icon name={codeSVG} size=\"24px\" />\n                </Button>\n              }\n              position=\"top center\"\n              content={this.props.intl.formatMessage(messages.code)}\n              size=\"mini\"\n            />\n            <Popup\n              trigger={\n                <Button\n                  icon\n                  basic\n                  aria-label={this.props.intl.formatMessage(messages.preview)}\n                  active={this.state.isPreview}\n                  onClick={this.onPreview}\n                >\n                  <Icon name={showSVG} size=\"24px\" />\n                </Button>\n              }\n              position=\"top center\"\n              content={this.props.intl.formatMessage(messages.preview)}\n              size=\"mini\"\n            />\n            <Popup\n              trigger={\n                <Button\n                  icon\n                  basic\n                  aria-label={this.props.intl.formatMessage(messages.prettier)}\n                  onClick={this.onPrettify}\n                >\n                  <Icon name={indentSVG} size=\"24px\" />\n                </Button>\n              }\n              position=\"top center\"\n              content={this.props.intl.formatMessage(messages.prettier)}\n              size=\"mini\"\n            />\n            <div className=\"separator\" />\n            <Popup\n              trigger={\n                <Button.Group>\n                  <Button icon basic onClick={() => this.onChangeCode('')}>\n                    <Icon name={clearSVG} size=\"24px\" color=\"#e40166\" />\n                  </Button>\n                </Button.Group>\n              }\n              position=\"top center\"\n              content={this.props.intl.formatMessage(messages.clear)}\n              size=\"mini\"\n            />\n          </div>\n        )}\n        {this.state.isPreview ? (\n          <div dangerouslySetInnerHTML={{ __html: value }} />\n        ) : (\n          <Editor\n            value={this.getValue()}\n            readOnly={!this.props.editable}\n            placeholder={placeholder}\n            onValueChange={(code) => this.onChangeCode(code)}\n            highlight={\n              this.props.prismCore?.highlight &&\n              this.props.prismCore?.languages?.html\n                ? (code) =>\n                    this.props.prismCore.highlight(\n                      code,\n                      this.props.prismCore.languages.html,\n                      'html',\n                    )\n                : () => {}\n            }\n            padding={8}\n            className=\"html-editor\"\n            ref={(node) => {\n              if (node) {\n                this.codeEditorRef.current = node;\n              }\n            }}\n            ignoreTabKey={true}\n          />\n        )}\n      </>\n    );\n  }\n}\n\nconst withPrismMarkup = (WrappedComponent) => (props) => {\n  const [loaded, setLoaded] = React.useState();\n  const promise = React.useRef(null);\n  const cancelled = React.useRef(false);\n\n  React.useEffect(() => {\n    promise.current = import('prismjs/components/prism-markup');\n    promise.current.then(() => {\n      if (!cancelled.current) {\n        setLoaded(true);\n      }\n    });\n    return () => {\n      cancelled.current = true;\n    };\n  }, []);\n\n  return loaded ? <WrappedComponent {...props} /> : null;\n};\n\nexport default compose(\n  injectLazyLibs(['prettierStandalone', 'prettierParserHtml', 'prismCore']),\n  withPrismMarkup,\n  injectIntl,\n)(Edit);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Source","defaultMessage":"Source"},{"id":"Preview","defaultMessage":"Preview"},{"id":"<p>Add some HTML here</p>","defaultMessage":"<p>Add some HTML here</p>"},{"id":"Prettify your code","defaultMessage":"Prettify your code"},{"id":"Clear","defaultMessage":"Clear"},{"id":"Code","defaultMessage":"Code"}]}},"sourceType":"module","externalDependencies":[]}