{"ast":null,"code":"/**\n * Workflow actions.\n * @module actions/workflow/workflow\n */\n\nimport { GET_WORKFLOW, GET_WORKFLOW_MULTIPLE, TRANSITION_WORKFLOW } from '@plone/volto/constants/ActionTypes';\nimport { flattenToAppURL } from '@plone/volto/helpers';\n\n/**\n * Get workflow function.\n * @function getWorkflow\n * @param {string|Array} urls Workflow url(s).\n * @returns {Object} Get workflow action.\n */\nexport function getWorkflow(urls) {\n  return {\n    type: typeof urls === 'string' ? GET_WORKFLOW : GET_WORKFLOW_MULTIPLE,\n    request: typeof urls === 'string' ? {\n      op: 'get',\n      path: `${urls}/@workflow`\n    } : urls.map(url => ({\n      op: 'get',\n      path: `${url}/@workflow`\n    }))\n  };\n}\n\n/**\n * Transition workflow.\n * @function transitionWorkflow\n * @param {string} urls Content url(s).\n * @param {bool} include_children Include children.\n * @returns {Object} Transition workflow action.\n */\nexport function transitionWorkflow(urls, include_children = false) {\n  return {\n    type: TRANSITION_WORKFLOW,\n    request: typeof urls === 'string' ? {\n      op: 'post',\n      path: flattenToAppURL(urls),\n      data: {\n        include_children\n      }\n    } : urls.map(url => ({\n      op: 'post',\n      path: flattenToAppURL(url),\n      data: {\n        include_children\n      }\n    }))\n  };\n}","map":{"version":3,"names":["GET_WORKFLOW","GET_WORKFLOW_MULTIPLE","TRANSITION_WORKFLOW","flattenToAppURL","getWorkflow","urls","type","request","op","path","map","url","transitionWorkflow","include_children","data"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/actions/workflow/workflow.js"],"sourcesContent":["/**\n * Workflow actions.\n * @module actions/workflow/workflow\n */\n\nimport {\n  GET_WORKFLOW,\n  GET_WORKFLOW_MULTIPLE,\n  TRANSITION_WORKFLOW,\n} from '@plone/volto/constants/ActionTypes';\nimport { flattenToAppURL } from '@plone/volto/helpers';\n\n/**\n * Get workflow function.\n * @function getWorkflow\n * @param {string|Array} urls Workflow url(s).\n * @returns {Object} Get workflow action.\n */\nexport function getWorkflow(urls) {\n  return {\n    type: typeof urls === 'string' ? GET_WORKFLOW : GET_WORKFLOW_MULTIPLE,\n    request:\n      typeof urls === 'string'\n        ? { op: 'get', path: `${urls}/@workflow` }\n        : urls.map((url) => ({ op: 'get', path: `${url}/@workflow` })),\n  };\n}\n\n/**\n * Transition workflow.\n * @function transitionWorkflow\n * @param {string} urls Content url(s).\n * @param {bool} include_children Include children.\n * @returns {Object} Transition workflow action.\n */\nexport function transitionWorkflow(urls, include_children = false) {\n  return {\n    type: TRANSITION_WORKFLOW,\n    request:\n      typeof urls === 'string'\n        ? {\n            op: 'post',\n            path: flattenToAppURL(urls),\n            data: { include_children },\n          }\n        : urls.map((url) => ({\n            op: 'post',\n            path: flattenToAppURL(url),\n            data: { include_children },\n          })),\n  };\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,SACEA,YAAY,EACZC,qBAAqB,EACrBC,mBAAmB,QACd,oCAAoC;AAC3C,SAASC,eAAe,QAAQ,sBAAsB;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAW,CAACC,IAAI,EAAE;EAChC,OAAO;IACLC,IAAI,EAAE,OAAOD,IAAI,KAAK,QAAQ,GAAGL,YAAY,GAAGC,qBAAqB;IACrEM,OAAO,EACL,OAAOF,IAAI,KAAK,QAAQ,GACpB;MAAEG,EAAE,EAAE,KAAK;MAAEC,IAAI,EAAG,GAAEJ,IAAK;IAAY,CAAC,GACxCA,IAAI,CAACK,GAAG,CAAEC,GAAG,KAAM;MAAEH,EAAE,EAAE,KAAK;MAAEC,IAAI,EAAG,GAAEE,GAAI;IAAY,CAAC,CAAC;EACnE,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,kBAAkB,CAACP,IAAI,EAAEQ,gBAAgB,GAAG,KAAK,EAAE;EACjE,OAAO;IACLP,IAAI,EAAEJ,mBAAmB;IACzBK,OAAO,EACL,OAAOF,IAAI,KAAK,QAAQ,GACpB;MACEG,EAAE,EAAE,MAAM;MACVC,IAAI,EAAEN,eAAe,CAACE,IAAI,CAAC;MAC3BS,IAAI,EAAE;QAAED;MAAiB;IAC3B,CAAC,GACDR,IAAI,CAACK,GAAG,CAAEC,GAAG,KAAM;MACjBH,EAAE,EAAE,MAAM;MACVC,IAAI,EAAEN,eAAe,CAACQ,GAAG,CAAC;MAC1BG,IAAI,EAAE;QAAED;MAAiB;IAC3B,CAAC,CAAC;EACV,CAAC;AACH"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}