{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Preferences/PersonalInformation.jsx\";\nvar __jsx = React.createElement;\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n/**\n * Personal information component.\n * @module components/manage/Preferences/PersonalInformation\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { injectIntl } from 'react-intl';\nimport { withRouter } from 'react-router-dom';\nimport jwtDecode from 'jwt-decode';\nimport { toast } from 'react-toastify';\nimport { messages } from '@plone/volto/helpers';\nimport { Form, Toast } from '@plone/volto/components';\nimport { getUser, updateUser, getUserSchema } from '@plone/volto/actions';\n\n/**\n * PersonalInformation class.\n * @class PersonalInformation\n * @extends Component\n */\nclass PersonalInformation extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ChangePassword\n   */\n  constructor(props) {\n    super(props);\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n  componentDidMount() {\n    this.props.getUser(this.props.userId);\n    this.props.getUserSchema();\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    // We don't want the user to change his login name/username or the roles\n    // from this form\n    // Backend will complain anyways, but we clean the data here before it does\n    delete data.id;\n    delete data.username;\n    delete data.roles;\n    this.props.updateUser(this.props.userId, data);\n    toast.success(__jsx(Toast, {\n      success: true,\n      title: this.props.intl.formatMessage(messages.success),\n      content: this.props.intl.formatMessage(messages.saved),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }\n    }));\n    if (this.props.closeMenu) this.props.closeMenu();\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    if (this.props.closeMenu) this.props.closeMenu();else this.props.history.goBack();\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    var _this$props, _this$props$userschem, _this$props2;\n    return ((_this$props = this.props) === null || _this$props === void 0 ? void 0 : (_this$props$userschem = _this$props.userschema) === null || _this$props$userschem === void 0 ? void 0 : _this$props$userschem.loaded) && __jsx(Form, {\n      formData: this.props.user,\n      schema: (_this$props2 = this.props) === null || _this$props2 === void 0 ? void 0 : _this$props2.userschema.userschema,\n      onSubmit: this.onSubmit,\n      onCancel: this.onCancel,\n      loading: this.props.loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }\n    });\n  }\n}\n_defineProperty(PersonalInformation, \"propTypes\", {\n  user: PropTypes.shape({\n    fullname: PropTypes.string,\n    email: PropTypes.string,\n    home_page: PropTypes.string,\n    location: PropTypes.string\n  }).isRequired,\n  updateUser: PropTypes.func.isRequired,\n  getUser: PropTypes.func.isRequired,\n  userId: PropTypes.string.isRequired,\n  loaded: PropTypes.bool.isRequired,\n  loading: PropTypes.bool,\n  closeMenu: PropTypes.func,\n  getUserSchema: PropTypes.func.isRequired\n});\nexport default compose(withRouter, injectIntl, connect((state, props) => ({\n  user: state.users.user,\n  userId: state.userSession.token ? jwtDecode(state.userSession.token).sub : '',\n  loaded: state.users.get.loaded,\n  loading: state.users.update.loading,\n  userschema: state.userschema\n}), {\n  getUser,\n  updateUser,\n  getUserSchema\n}))(PersonalInformation);","map":{"version":3,"names":["React","Component","PropTypes","connect","compose","injectIntl","withRouter","jwtDecode","toast","messages","Form","Toast","getUser","updateUser","getUserSchema","PersonalInformation","constructor","props","onCancel","bind","onSubmit","componentDidMount","userId","data","id","username","roles","success","intl","formatMessage","saved","closeMenu","history","goBack","render","userschema","loaded","user","loading","shape","fullname","string","email","home_page","location","isRequired","func","bool","state","users","userSession","token","sub","get","update"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Preferences/PersonalInformation.jsx"],"sourcesContent":["/**\n * Personal information component.\n * @module components/manage/Preferences/PersonalInformation\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { injectIntl } from 'react-intl';\nimport { withRouter } from 'react-router-dom';\nimport jwtDecode from 'jwt-decode';\nimport { toast } from 'react-toastify';\nimport { messages } from '@plone/volto/helpers';\nimport { Form, Toast } from '@plone/volto/components';\nimport { getUser, updateUser, getUserSchema } from '@plone/volto/actions';\n\n/**\n * PersonalInformation class.\n * @class PersonalInformation\n * @extends Component\n */\nclass PersonalInformation extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    user: PropTypes.shape({\n      fullname: PropTypes.string,\n      email: PropTypes.string,\n      home_page: PropTypes.string,\n      location: PropTypes.string,\n    }).isRequired,\n    updateUser: PropTypes.func.isRequired,\n    getUser: PropTypes.func.isRequired,\n    userId: PropTypes.string.isRequired,\n    loaded: PropTypes.bool.isRequired,\n    loading: PropTypes.bool,\n    closeMenu: PropTypes.func,\n    getUserSchema: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ChangePassword\n   */\n  constructor(props) {\n    super(props);\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.getUser(this.props.userId);\n    this.props.getUserSchema();\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    // We don't want the user to change his login name/username or the roles\n    // from this form\n    // Backend will complain anyways, but we clean the data here before it does\n    delete data.id;\n    delete data.username;\n    delete data.roles;\n    this.props.updateUser(this.props.userId, data);\n    toast.success(\n      <Toast\n        success\n        title={this.props.intl.formatMessage(messages.success)}\n        content={this.props.intl.formatMessage(messages.saved)}\n      />,\n    );\n    if (this.props.closeMenu) this.props.closeMenu();\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    if (this.props.closeMenu) this.props.closeMenu();\n    else this.props.history.goBack();\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      this.props?.userschema?.loaded && (\n        <Form\n          formData={this.props.user}\n          schema={this.props?.userschema.userschema}\n          onSubmit={this.onSubmit}\n          onCancel={this.onCancel}\n          loading={this.props.loading}\n        />\n      )\n    );\n  }\n}\n\nexport default compose(\n  withRouter,\n  injectIntl,\n  connect(\n    (state, props) => ({\n      user: state.users.user,\n      userId: state.userSession.token\n        ? jwtDecode(state.userSession.token).sub\n        : '',\n      loaded: state.users.get.loaded,\n      loading: state.users.update.loading,\n      userschema: state.userschema,\n    }),\n    { getUser, updateUser, getUserSchema },\n  ),\n)(PersonalInformation);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}