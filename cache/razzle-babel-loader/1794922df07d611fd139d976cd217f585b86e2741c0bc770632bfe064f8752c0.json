{"ast":null,"code":"import _isString from \"lodash/isString\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-embed/src/Iframe/EditIframe.jsx\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n/**\n * Edit map block.\n * @module components/manage/Blocks/Maps/Edit\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Input, Message } from 'semantic-ui-react';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport cx from 'classnames';\nimport { Icon, SidebarPortal } from '@plone/volto/components';\nimport InlineForm from '@plone/volto/components/manage/Form/InlineForm';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport aheadSVG from '@plone/volto/icons/ahead.svg';\nimport mapsBlockSVG from '@plone/volto/components/manage/Blocks/Maps/block-maps.svg';\nimport schema from './schema';\nimport { addPrivacyProtectionToSchema } from '../PrivacyProtection';\nimport { PrivacyProtection } from '../PrivacyProtection';\nconst messages = defineMessages({\n  MapsBlockInputPlaceholder: {\n    \"id\": \"Enter map Embed Code\",\n    \"defaultMessage\": \"Enter map Embed Code\"\n  },\n  left: {\n    \"id\": \"Left\",\n    \"defaultMessage\": \"Left\"\n  },\n  right: {\n    \"id\": \"Right\",\n    \"defaultMessage\": \"Right\"\n  },\n  center: {\n    \"id\": \"Center\",\n    \"defaultMessage\": \"Center\"\n  },\n  full: {\n    \"id\": \"Full\",\n    \"defaultMessage\": \"Full\"\n  },\n  GoogleMapsEmbeddedBlock: {\n    \"id\": \"Google Maps Embedded Block\",\n    \"defaultMessage\": \"Google Maps Embedded Block\"\n  }\n});\n\n/**\n * Edit image block class.\n * @class Edit\n * @extends Component\n */\nclass Edit extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    _defineProperty(this, \"onChangeUrl\", ({\n      target\n    }) => {\n      this.setState({\n        url: target.value\n      });\n    });\n    _defineProperty(this, \"resetSubmitUrl\", () => {\n      this.setState({\n        url: ''\n      });\n    });\n    this.getSrc = this.getSrc.bind(this);\n    this.state = {\n      url: '',\n      error: null\n    };\n    this.onSubmitUrl = this.onSubmitUrl.bind(this);\n    this.onKeyDownVariantMenuForm = this.onKeyDownVariantMenuForm.bind(this);\n  }\n\n  /**\n   * Backward compatibility\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    const {\n      privacy_statement\n    } = this.props.data.dataprotection || {};\n    if (_isString(privacy_statement)) {\n      this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n        dataprotection: _objectSpread(_objectSpread({}, this.props.data.dataprotection || {}), {}, {\n          privacy_statement: [{\n            children: [{\n              text: privacy_statement\n            }]\n          }]\n        })\n      }));\n    }\n  }\n\n  /**\n   * Change url handler\n   * @method onChangeUrl\n   * @param {Object} target Target object\n   * @returns {undefined}\n   */\n\n  /**\n   * Submit url handler\n   * @method onSubmitUrl\n   * @param {string} e event\n   * @returns {undefined}\n   */\n  onSubmitUrl() {\n    this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n      url: this.getSrc(this.state.url),\n      privacy_notification: this.state.privacy_notification\n    }));\n  }\n\n  /**\n   * Keydown handler on Variant Menu Form\n   * This is required since the ENTER key is already mapped to a onKeyDown\n   * event and needs to be overriden with a child onKeyDown.\n   * @method onKeyDownVariantMenuForm\n   * @param {Object} e Event object\n   * @returns {undefined}\n   */\n  onKeyDownVariantMenuForm(e) {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      e.stopPropagation();\n      this.onSubmitUrl();\n    } else if (e.key === 'Escape') {\n      e.preventDefault();\n      e.stopPropagation();\n      // TODO: Do something on ESC key\n    }\n  }\n\n  /**\n   * get getSrc handler\n   * @method getSrc\n   * @param {string} embed Embed HTML code from Google Maps share option\n   * @returns {string} Source URL\n   */\n  getSrc(embed) {\n    // Optimization, don't need the src\n    if (!embed.trim().startsWith('<iframe')) {\n      return embed;\n    }\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(embed, 'text/html');\n    const iframe = doc.getElementsByTagName('iframe');\n    if (iframe.length === 0) {\n      this.setState({\n        error: true\n      });\n      return '';\n    }\n    this.setState({\n      error: false\n    });\n    return iframe[0].src;\n  }\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return __jsx(\"div\", {\n      className: cx('block maps align', {\n        center: !Boolean(this.props.data.align)\n      }, this.props.data.align),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 7\n      }\n    }, this.props.data.url ? __jsx(\"div\", {\n      className: cx('maps-inner', {\n        'full-width': this.props.data.align === 'full'\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }\n    }, __jsx(PrivacyProtection, {\n      data: this.props.data,\n      editable: this.props.editable,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 13\n      }\n    }, __jsx(\"iframe\", {\n      title: this.props.intl.formatMessage(messages.GoogleMapsEmbeddedBlock),\n      src: this.props.data.url,\n      className: \"google-map\",\n      frameBorder: \"0\",\n      allowFullScreen: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 15\n      }\n    }))) : __jsx(Message, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 11\n      }\n    }, __jsx(\"center\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 13\n      }\n    }, __jsx(\"img\", {\n      src: mapsBlockSVG,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 15\n      }\n    }), __jsx(\"div\", {\n      className: \"toolbar-inner\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 15\n      }\n    }, __jsx(Input, {\n      onKeyDown: this.onKeyDownVariantMenuForm,\n      onChange: this.onChangeUrl,\n      placeholder: this.props.intl.formatMessage(messages.MapsBlockInputPlaceholder),\n      value: this.state.url\n      // Prevents propagation to the Dropzone and the opening\n      // of the upload browser dialog\n      ,\n      onClick: e => e.stopPropagation(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 17\n      }\n    }), this.state.url && __jsx(Button.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 19\n      }\n    }, __jsx(Button, {\n      basic: true,\n      className: \"cancel\",\n      onClick: e => {\n        e.stopPropagation();\n        this.setState({\n          url: ''\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 21\n      }\n    }, __jsx(Icon, {\n      name: clearSVG,\n      size: \"30px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 23\n      }\n    }))), __jsx(Button.Group, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 17\n      }\n    }, __jsx(Button, {\n      basic: true,\n      primary: true,\n      onClick: e => {\n        e.stopPropagation();\n        this.onSubmitUrl();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 19\n      }\n    }, __jsx(Icon, {\n      name: aheadSVG,\n      size: \"30px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 21\n      }\n    })))), __jsx(\"div\", {\n      className: \"message-text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 15\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Please enter the Embed Code provided by Google Maps -> Share -> Embed map. It should contain the <iframe> code on it.\",\n      defaultMessage: \"Please enter the Embed Code provided by Google Maps -> Share -> Embed map. It should contain the <iframe> code on it.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 17\n      }\n    }), this.state.error && __jsx(\"div\", {\n      style: {\n        color: 'red'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 19\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Embed code error, please follow the instructions and try again.\",\n      defaultMessage: \"Embed code error, please follow the instructions and try again.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 21\n      }\n    }))))), __jsx(SidebarPortal, {\n      selected: this.props.selected,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 9\n      }\n    }, __jsx(InlineForm, {\n      schema: addPrivacyProtectionToSchema(schema),\n      title: schema.title,\n      onChangeField: (id, value) => {\n        this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n          [id]: value\n        }));\n      },\n      formData: this.props.data,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 11\n      }\n    })));\n  }\n}\n_defineProperty(Edit, \"propTypes\", {\n  selected: PropTypes.bool.isRequired,\n  block: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  pathname: PropTypes.string.isRequired,\n  onChangeBlock: PropTypes.func.isRequired,\n  onSelectBlock: PropTypes.func.isRequired,\n  onDeleteBlock: PropTypes.func.isRequired,\n  onFocusPreviousBlock: PropTypes.func.isRequired,\n  onFocusNextBlock: PropTypes.func.isRequired,\n  handleKeyDown: PropTypes.func.isRequired\n});\nexport default injectIntl(Edit);","map":{"version":3,"names":["React","Component","PropTypes","Button","Input","Message","defineMessages","FormattedMessage","injectIntl","cx","Icon","SidebarPortal","InlineForm","clearSVG","aheadSVG","mapsBlockSVG","schema","addPrivacyProtectionToSchema","PrivacyProtection","messages","MapsBlockInputPlaceholder","left","right","center","full","GoogleMapsEmbeddedBlock","Edit","constructor","props","target","setState","url","value","getSrc","bind","state","error","onSubmitUrl","onKeyDownVariantMenuForm","componentDidMount","privacy_statement","data","dataprotection","onChangeBlock","block","children","text","privacy_notification","e","key","preventDefault","stopPropagation","embed","trim","startsWith","parser","DOMParser","doc","parseFromString","iframe","getElementsByTagName","length","src","render","Boolean","align","editable","intl","formatMessage","onChangeUrl","color","selected","title","id","bool","isRequired","string","index","number","objectOf","any","pathname","func","onSelectBlock","onDeleteBlock","onFocusPreviousBlock","onFocusNextBlock","handleKeyDown"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-embed/src/Iframe/EditIframe.jsx"],"sourcesContent":["/**\n * Edit map block.\n * @module components/manage/Blocks/Maps/Edit\n */\n\nimport React, { Component } from 'react';\nimport { isString } from 'lodash';\nimport PropTypes from 'prop-types';\nimport { Button, Input, Message } from 'semantic-ui-react';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport cx from 'classnames';\n\nimport { Icon, SidebarPortal } from '@plone/volto/components';\nimport InlineForm from '@plone/volto/components/manage/Form/InlineForm';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport aheadSVG from '@plone/volto/icons/ahead.svg';\nimport mapsBlockSVG from '@plone/volto/components/manage/Blocks/Maps/block-maps.svg';\nimport schema from './schema';\nimport { addPrivacyProtectionToSchema } from '../PrivacyProtection';\nimport { PrivacyProtection } from '../PrivacyProtection';\n\nconst messages = defineMessages({\n  MapsBlockInputPlaceholder: {\n    id: 'Enter map Embed Code',\n    defaultMessage: 'Enter map Embed Code',\n  },\n  left: {\n    id: 'Left',\n    defaultMessage: 'Left',\n  },\n  right: {\n    id: 'Right',\n    defaultMessage: 'Right',\n  },\n  center: {\n    id: 'Center',\n    defaultMessage: 'Center',\n  },\n  full: {\n    id: 'Full',\n    defaultMessage: 'Full',\n  },\n  GoogleMapsEmbeddedBlock: {\n    id: 'Google Maps Embedded Block',\n    defaultMessage: 'Google Maps Embedded Block',\n  },\n});\n\n/**\n * Edit image block class.\n * @class Edit\n * @extends Component\n */\nclass Edit extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    selected: PropTypes.bool.isRequired,\n    block: PropTypes.string.isRequired,\n    index: PropTypes.number.isRequired,\n    data: PropTypes.objectOf(PropTypes.any).isRequired,\n    pathname: PropTypes.string.isRequired,\n    onChangeBlock: PropTypes.func.isRequired,\n    onSelectBlock: PropTypes.func.isRequired,\n    onDeleteBlock: PropTypes.func.isRequired,\n    onFocusPreviousBlock: PropTypes.func.isRequired,\n    onFocusNextBlock: PropTypes.func.isRequired,\n    handleKeyDown: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.getSrc = this.getSrc.bind(this);\n    this.state = {\n      url: '',\n      error: null,\n    };\n    this.onSubmitUrl = this.onSubmitUrl.bind(this);\n    this.onKeyDownVariantMenuForm = this.onKeyDownVariantMenuForm.bind(this);\n  }\n\n  /**\n   * Backward compatibility\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    const { privacy_statement } = this.props.data.dataprotection || {};\n    if (isString(privacy_statement)) {\n      this.props.onChangeBlock(this.props.block, {\n        ...this.props.data,\n        dataprotection: {\n          ...(this.props.data.dataprotection || {}),\n          privacy_statement: [\n            {\n              children: [\n                {\n                  text: privacy_statement,\n                },\n              ],\n            },\n          ],\n        },\n      });\n    }\n  }\n\n  /**\n   * Change url handler\n   * @method onChangeUrl\n   * @param {Object} target Target object\n   * @returns {undefined}\n   */\n  onChangeUrl = ({ target }) => {\n    this.setState({\n      url: target.value,\n    });\n  };\n\n  /**\n   * Submit url handler\n   * @method onSubmitUrl\n   * @param {string} e event\n   * @returns {undefined}\n   */\n  onSubmitUrl() {\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      url: this.getSrc(this.state.url),\n      privacy_notification: this.state.privacy_notification,\n    });\n  }\n\n  /**\n   * Keydown handler on Variant Menu Form\n   * This is required since the ENTER key is already mapped to a onKeyDown\n   * event and needs to be overriden with a child onKeyDown.\n   * @method onKeyDownVariantMenuForm\n   * @param {Object} e Event object\n   * @returns {undefined}\n   */\n  onKeyDownVariantMenuForm(e) {\n    if (e.key === 'Enter') {\n      e.preventDefault();\n      e.stopPropagation();\n      this.onSubmitUrl();\n    } else if (e.key === 'Escape') {\n      e.preventDefault();\n      e.stopPropagation();\n      // TODO: Do something on ESC key\n    }\n  }\n\n  /**\n   * get getSrc handler\n   * @method getSrc\n   * @param {string} embed Embed HTML code from Google Maps share option\n   * @returns {string} Source URL\n   */\n  getSrc(embed) {\n    // Optimization, don't need the src\n    if (!embed.trim().startsWith('<iframe')) {\n      return embed;\n    }\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(embed, 'text/html');\n    const iframe = doc.getElementsByTagName('iframe');\n    if (iframe.length === 0) {\n      this.setState({ error: true });\n      return '';\n    }\n    this.setState({ error: false });\n    return iframe[0].src;\n  }\n\n  resetSubmitUrl = () => {\n    this.setState({\n      url: '',\n    });\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <div\n        className={cx(\n          'block maps align',\n          {\n            center: !Boolean(this.props.data.align),\n          },\n          this.props.data.align,\n        )}\n      >\n        {this.props.data.url ? (\n          <div\n            className={cx('maps-inner', {\n              'full-width': this.props.data.align === 'full',\n            })}\n          >\n            <PrivacyProtection\n              data={this.props.data}\n              editable={this.props.editable}\n            >\n              <iframe\n                title={this.props.intl.formatMessage(\n                  messages.GoogleMapsEmbeddedBlock,\n                )}\n                src={this.props.data.url}\n                className=\"google-map\"\n                frameBorder=\"0\"\n                allowFullScreen\n              />\n            </PrivacyProtection>\n          </div>\n        ) : (\n          <Message>\n            <center>\n              <img src={mapsBlockSVG} alt=\"\" />\n              <div className=\"toolbar-inner\">\n                <Input\n                  onKeyDown={this.onKeyDownVariantMenuForm}\n                  onChange={this.onChangeUrl}\n                  placeholder={this.props.intl.formatMessage(\n                    messages.MapsBlockInputPlaceholder,\n                  )}\n                  value={this.state.url}\n                  // Prevents propagation to the Dropzone and the opening\n                  // of the upload browser dialog\n                  onClick={(e) => e.stopPropagation()}\n                />\n                {this.state.url && (\n                  <Button.Group>\n                    <Button\n                      basic\n                      className=\"cancel\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        this.setState({ url: '' });\n                      }}\n                    >\n                      <Icon name={clearSVG} size=\"30px\" />\n                    </Button>\n                  </Button.Group>\n                )}\n                <Button.Group>\n                  <Button\n                    basic\n                    primary\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      this.onSubmitUrl();\n                    }}\n                  >\n                    <Icon name={aheadSVG} size=\"30px\" />\n                  </Button>\n                </Button.Group>\n              </div>\n              <div className=\"message-text\">\n                <FormattedMessage\n                  id=\"Please enter the Embed Code provided by Google Maps -> Share -> Embed map. It should contain the <iframe> code on it.\"\n                  defaultMessage=\"Please enter the Embed Code provided by Google Maps -> Share -> Embed map. It should contain the <iframe> code on it.\"\n                />\n                {this.state.error && (\n                  <div style={{ color: 'red' }}>\n                    <FormattedMessage\n                      id=\"Embed code error, please follow the instructions and try again.\"\n                      defaultMessage=\"Embed code error, please follow the instructions and try again.\"\n                    />\n                  </div>\n                )}\n              </div>\n            </center>\n          </Message>\n        )}\n        <SidebarPortal selected={this.props.selected}>\n          <InlineForm\n            schema={addPrivacyProtectionToSchema(schema)}\n            title={schema.title}\n            onChangeField={(id, value) => {\n              this.props.onChangeBlock(this.props.block, {\n                ...this.props.data,\n                [id]: value,\n              });\n            }}\n            formData={this.props.data}\n          />\n        </SidebarPortal>\n      </div>\n    );\n  }\n}\n\nexport default injectIntl(Edit);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Enter map Embed Code","defaultMessage":"Enter map Embed Code"},{"id":"Left","defaultMessage":"Left"},{"id":"Right","defaultMessage":"Right"},{"id":"Center","defaultMessage":"Center"},{"id":"Full","defaultMessage":"Full"},{"id":"Google Maps Embedded Block","defaultMessage":"Google Maps Embedded Block"},{"id":"Please enter the Embed Code provided by Google Maps -> Share -> Embed map. It should contain the <iframe> code on it.","defaultMessage":"Please enter the Embed Code provided by Google Maps -> Share -> Embed map. It should contain the <iframe> code on it."},{"id":"Embed code error, please follow the instructions and try again.","defaultMessage":"Embed code error, please follow the instructions and try again."}]}},"sourceType":"module","externalDependencies":[]}