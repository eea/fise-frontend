{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Rules/Rules.jsx\";\nvar __jsx = React.createElement;\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n/**\n * Rules container.\n * @module components/manage/Rules/Rules\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from '@plone/volto/helpers';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { Portal } from 'react-portal';\nimport { Button, Checkbox, Container, Segment, Select, Table } from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport { getBaseUrl } from '@plone/volto/helpers';\nimport { addRule, getRules, enableRules, disableRules, applyRulesToSubfolders, unapplyRulesToSubfolders, removeRules } from '@plone/volto/actions';\nimport { Icon, Toolbar } from '@plone/volto/components';\nimport backSVG from '@plone/volto/icons/back.svg';\nimport checkSVG from '@plone/volto/icons/check.svg';\nimport { toast } from 'react-toastify';\nimport { Toast } from '@plone/volto/components';\nconst messages = defineMessages({\n  back: {\n    \"id\": \"Back\",\n    \"defaultMessage\": \"Back\"\n  },\n  rules: {\n    \"id\": \"Rules\",\n    \"defaultMessage\": \"Rules\"\n  },\n  success: {\n    \"id\": \"Success\",\n    \"defaultMessage\": \"Success\"\n  },\n  add: {\n    \"id\": \"Added\",\n    \"defaultMessage\": \"Added\"\n  },\n  enable: {\n    \"id\": \"Enabled\",\n    \"defaultMessage\": \"Enabled\"\n  },\n  disable: {\n    \"id\": \"Disabled\",\n    \"defaultMessage\": \"Disabled\"\n  },\n  apply: {\n    \"id\": \"Applied to subfolders\",\n    \"defaultMessage\": \"Applied to subfolders\"\n  },\n  unapply: {\n    \"id\": \"Disabled apply to subfolders\",\n    \"defaultMessage\": \"Disabled apply to subfolders\"\n  },\n  remove: {\n    \"id\": \"Unassigned\",\n    \"defaultMessage\": \"Unassigned\"\n  }\n});\n\n/**\n * Rules class.\n * @class Rules\n * @extends Component\n */\nclass Rules extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Rules\n   */\n  constructor(props) {\n    super(props);\n    _defineProperty(this, \"handleCheckRule\", rule => {\n      const rules = this.state.checkedRules;\n      if (rules.includes(rule)) {\n        const index = rules.indexOf(rule);\n        if (index > -1) {\n          let newRules = rules;\n          newRules.splice(index, 1);\n          this.setState({\n            checkedRules: newRules\n          });\n        }\n      } else {\n        this.setState({\n          checkedRules: [...this.state.checkedRules, rule]\n        });\n      }\n    });\n    _defineProperty(this, \"handleDisableRules\", () => {\n      this.props.disableRules(getBaseUrl(this.props.pathname), this.state.checkedRules);\n    });\n    _defineProperty(this, \"handleEnableRules\", () => {\n      this.props.enableRules(getBaseUrl(this.props.pathname), this.state.checkedRules);\n    });\n    _defineProperty(this, \"handleApplyToSubfolder\", () => {\n      this.props.applyRulesToSubfolders(getBaseUrl(this.props.pathname), this.state.checkedRules);\n    });\n    _defineProperty(this, \"handleUnapplyToSubfolder\", () => {\n      this.props.unapplyRulesToSubfolders(getBaseUrl(this.props.pathname), this.state.checkedRules);\n    });\n    _defineProperty(this, \"handleRemoveRules\", () => {\n      this.props.removeRules(getBaseUrl(this.props.pathname), this.state.checkedRules);\n    });\n    _defineProperty(this, \"handleAddRule\", () => {\n      this.props.addRule(getBaseUrl(this.props.pathname), this.state.newRule);\n    });\n    this.state = {\n      isClient: false,\n      checkedRules: [],\n      newRule: ''\n    };\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.getRules(getBaseUrl(this.props.pathname));\n    this.setState({\n      isClient: true\n    });\n  }\n  componentDidUpdate(prevProps, prevState) {}\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.rules.add.loading && nextProps.rules.add.loaded) {\n      this.props.getRules(getBaseUrl(this.props.pathname));\n      this.setState({\n        newRule: ''\n      });\n      toast.success(__jsx(Toast, {\n        success: true,\n        title: this.props.intl.formatMessage(messages.success),\n        content: this.props.intl.formatMessage(messages.add),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 9\n        }\n      }));\n    }\n    if (this.props.rules.disable.loading && nextProps.rules.disable.loaded) {\n      this.props.getRules(getBaseUrl(this.props.pathname));\n      this.setState({\n        checkedRules: []\n      });\n      toast.success(__jsx(Toast, {\n        success: true,\n        title: this.props.intl.formatMessage(messages.success),\n        content: this.props.intl.formatMessage(messages.disable),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 9\n        }\n      }));\n    }\n    if (this.props.rules.enable.loading && nextProps.rules.enable.loaded) {\n      this.props.getRules(getBaseUrl(this.props.pathname));\n      this.setState({\n        checkedRules: []\n      });\n      toast.success(__jsx(Toast, {\n        success: true,\n        title: this.props.intl.formatMessage(messages.success),\n        content: this.props.intl.formatMessage(messages.enable),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 9\n        }\n      }));\n    }\n    if (this.props.rules.apply.loading && nextProps.rules.apply.loaded) {\n      this.props.getRules(getBaseUrl(this.props.pathname));\n      this.setState({\n        checkedRules: []\n      });\n      toast.success(__jsx(Toast, {\n        success: true,\n        title: this.props.intl.formatMessage(messages.success),\n        content: this.props.intl.formatMessage(messages.apply),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 9\n        }\n      }));\n    }\n    if (this.props.rules.unapply.loading && nextProps.rules.unapply.loaded) {\n      this.props.getRules(getBaseUrl(this.props.pathname));\n      this.setState({\n        checkedRules: []\n      });\n      toast.success(__jsx(Toast, {\n        success: true,\n        title: this.props.intl.formatMessage(messages.success),\n        content: this.props.intl.formatMessage(messages.unapply),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 9\n        }\n      }));\n    }\n    if (this.props.rules.remove.loading && nextProps.rules.remove.loaded) {\n      this.props.getRules(getBaseUrl(this.props.pathname));\n      this.setState({\n        checkedRules: []\n      });\n      toast.success(__jsx(Toast, {\n        success: true,\n        title: this.props.intl.formatMessage(messages.success),\n        content: this.props.intl.formatMessage(messages.remove),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 9\n        }\n      }));\n    }\n  }\n\n  /**\n   * Rule check handler\n   * @method handleCheckRule\n   * @returns {undefined}\n   */\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    var _this$props$rules;\n    const {\n      acquired_rules,\n      assigned_rules,\n      assignable_rules\n    } = ((_this$props$rules = this.props.rules) === null || _this$props$rules === void 0 ? void 0 : _this$props$rules.rules) || {};\n    return __jsx(Container, {\n      id: \"rules\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 7\n      }\n    }, __jsx(Helmet, {\n      title: this.props.intl.formatMessage(messages.rules),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 9\n      }\n    }), __jsx(Segment.Group, {\n      raised: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }\n    }, __jsx(Segment, {\n      className: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 11\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Content rules for {title}\",\n      defaultMessage: \"Content rules for {title}\",\n      values: {\n        title: __jsx(\"q\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 32\n          }\n        }, this.props.title)\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 13\n      }\n    })), __jsx(Segment, {\n      secondary: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 11\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"The following content rules are active in this Page. Use the content rules control panel to create new rules or delete or modify existing ones.\",\n      defaultMessage: \"The following content rules are active in this Page. Use the content rules control panel to create new rules or delete or modify existing ones.\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 13\n      }\n    }))), acquired_rules && acquired_rules.length > 0 && __jsx(Table, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 11\n      }\n    }, __jsx(Table.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 13\n      }\n    }, __jsx(Table.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 15\n      }\n    }, __jsx(Table.HeaderCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 17\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Content rules from parent folders\",\n      defaultMessage: \"Content rules from parent folders\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 19\n      }\n    })), __jsx(Table.HeaderCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 17\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Active\",\n      defaultMessage: \"Active\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 19\n      }\n    }))), acquired_rules.map((rule, i) => __jsx(Table.Row, {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 17\n      }\n    }, __jsx(Table.Cell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 19\n      }\n    }, rule.title, \"(\", rule.trigger, \")\"), __jsx(Table.Cell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 19\n      }\n    }, rule.enabled && __jsx(\"span\", {\n      style: {\n        color: 'green'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 23\n      }\n    }, __jsx(Icon, {\n      name: checkSVG,\n      className: \"contents circled\",\n      size: \"10px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 25\n      }\n    }))))))), assignable_rules && assignable_rules.length > 0 && __jsx(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 11\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Available content rules:\",\n      defaultMessage: \"Available content rules:\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 13\n      }\n    }), __jsx(\"div\", {\n      style: {\n        display: 'flex'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 13\n      }\n    }, __jsx(Select, {\n      placeholder: \"Select rule\",\n      value: this.state.newRule,\n      onChange: (e, {\n        value\n      }) => this.setState({\n        newRule: value\n      }),\n      options: assignable_rules.map((rule, i) => {\n        return {\n          key: rule.id,\n          value: rule.id,\n          text: rule.title\n        };\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 15\n      }\n    }), __jsx(Button, {\n      onClick: this.handleAddRule,\n      primary: true,\n      style: {\n        marginLeft: '10px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 15\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Add\",\n      defaultMessage: \"Add\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 17\n      }\n    })))), assigned_rules && assigned_rules.length > 0 && __jsx(React.Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 11\n      }\n    }, __jsx(Table, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 13\n      }\n    }, __jsx(Table.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 15\n      }\n    }, __jsx(Table.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 17\n      }\n    }, __jsx(Table.HeaderCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 19\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Select\",\n      defaultMessage: \"Select\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 21\n      }\n    })), __jsx(Table.HeaderCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 393,\n        columnNumber: 19\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Active content rules in this Page\",\n      defaultMessage: \"Active content rules in this Page\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 21\n      }\n    })), __jsx(Table.HeaderCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 19\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Applies to subfolders?\",\n      defaultMessage: \"Applies to subfolders?\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 21\n      }\n    })), __jsx(Table.HeaderCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405,\n        columnNumber: 19\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Enabled here?\",\n      defaultMessage: \"Enabled here?\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 21\n      }\n    })), __jsx(Table.HeaderCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 19\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Enabled?\",\n      defaultMessage: \"Enabled?\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 21\n      }\n    }))), assigned_rules.map((rule, i) => __jsx(Table.Row, {\n      key: i,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 416,\n        columnNumber: 19\n      }\n    }, __jsx(Table.Cell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 21\n      }\n    }, __jsx(Checkbox, {\n      onChange: (o, {\n        value\n      }) => this.handleCheckRule(value),\n      value: rule.id,\n      checked: this.state.checkedRules.includes(rule.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 418,\n        columnNumber: 23\n      }\n    })), __jsx(Table.Cell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 21\n      }\n    }, rule.title, \"(\", rule.trigger, \")\"), __jsx(Table.Cell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 21\n      }\n    }, rule.bubbles && __jsx(\"span\", {\n      style: {\n        color: 'green'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429,\n        columnNumber: 25\n      }\n    }, __jsx(Icon, {\n      name: checkSVG,\n      className: \"contents circled\",\n      size: \"10px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 27\n      }\n    }))), __jsx(Table.Cell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 21\n      }\n    }, rule.enabled && __jsx(\"span\", {\n      style: {\n        color: 'green'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 25\n      }\n    }, __jsx(Icon, {\n      name: checkSVG,\n      className: \"contents circled\",\n      size: \"10px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 27\n      }\n    }))), __jsx(Table.Cell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 21\n      }\n    }, rule.global_enabled && __jsx(\"span\", {\n      style: {\n        color: 'green'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 25\n      }\n    }, __jsx(Icon, {\n      name: checkSVG,\n      className: \"contents circled\",\n      size: \"10px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 27\n      }\n    }))))))), __jsx(Button, {\n      onClick: this.handleEnableRules,\n      primary: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 13\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Enable\",\n      defaultMessage: \"Enable\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 15\n      }\n    })), __jsx(Button, {\n      onClick: this.handleDisableRules,\n      primary: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 13\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Disable\",\n      defaultMessage: \"Disable\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 15\n      }\n    })), __jsx(Button, {\n      onClick: this.handleApplyToSubfolder,\n      primary: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 470,\n        columnNumber: 13\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Apply to subfolders\",\n      defaultMessage: \"Apply to subfolders\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 471,\n        columnNumber: 15\n      }\n    })), __jsx(Button, {\n      onClick: this.handleUnapplyToSubfolder,\n      primary: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 13\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Disable apply to subfolders\",\n      defaultMessage: \"Disable apply to subfolders\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 15\n      }\n    })), __jsx(Button, {\n      color: \"youtube\",\n      onClick: this.handleRemoveRules,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 13\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Unassign\",\n      defaultMessage: \"Unassign\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 15\n      }\n    }))), this.state.isClient && __jsx(Portal, {\n      node: document.getElementById('toolbar'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 488,\n        columnNumber: 11\n      }\n    }, __jsx(Toolbar, {\n      pathname: this.props.pathname,\n      hideDefaultViewButtons: true,\n      inner: __jsx(Link, {\n        to: `${getBaseUrl(this.props.pathname)}`,\n        className: \"item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 493,\n          columnNumber: 17\n        }\n      }, __jsx(Icon, {\n        name: backSVG,\n        className: \"contents circled\",\n        size: \"30px\",\n        title: this.props.intl.formatMessage(messages.back),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 19\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 489,\n        columnNumber: 13\n      }\n    })));\n  }\n}\n_defineProperty(Rules, \"propTypes\", {\n  getRules: PropTypes.func.isRequired,\n  addRule: PropTypes.func.isRequired,\n  enableRules: PropTypes.func.isRequired,\n  disableRules: PropTypes.func.isRequired,\n  applyRulesToSubfolders: PropTypes.func.isRequired,\n  unapplyRulesToSubfolders: PropTypes.func.isRequired,\n  removeRules: PropTypes.func.isRequired,\n  pathname: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired\n});\nexport default compose(injectIntl, connect((state, props) => {\n  var _state$content$data;\n  return {\n    rules: state.rules,\n    pathname: props.location.pathname,\n    title: ((_state$content$data = state.content.data) === null || _state$content$data === void 0 ? void 0 : _state$content$data.title) || ''\n  };\n}, {\n  addRule,\n  getRules,\n  enableRules,\n  disableRules,\n  applyRulesToSubfolders,\n  unapplyRulesToSubfolders,\n  removeRules\n}))(Rules);","map":{"version":3,"names":["React","Component","PropTypes","Helmet","connect","compose","Link","Portal","Button","Checkbox","Container","Segment","Select","Table","FormattedMessage","defineMessages","injectIntl","getBaseUrl","addRule","getRules","enableRules","disableRules","applyRulesToSubfolders","unapplyRulesToSubfolders","removeRules","Icon","Toolbar","backSVG","checkSVG","toast","Toast","messages","back","rules","success","add","enable","disable","apply","unapply","remove","Rules","constructor","props","rule","state","checkedRules","includes","index","indexOf","newRules","splice","setState","pathname","newRule","isClient","componentDidMount","componentDidUpdate","prevProps","prevState","UNSAFE_componentWillReceiveProps","nextProps","loading","loaded","intl","formatMessage","render","acquired_rules","assigned_rules","assignable_rules","title","length","map","i","trigger","enabled","color","display","e","value","key","id","text","handleAddRule","marginLeft","o","handleCheckRule","bubbles","global_enabled","handleEnableRules","handleDisableRules","handleApplyToSubfolder","handleUnapplyToSubfolder","handleRemoveRules","document","getElementById","func","isRequired","string","location","content","data"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Rules/Rules.jsx"],"sourcesContent":["/**\n * Rules container.\n * @module components/manage/Rules/Rules\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from '@plone/volto/helpers';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { Portal } from 'react-portal';\nimport {\n  Button,\n  Checkbox,\n  Container,\n  Segment,\n  Select,\n  Table,\n} from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\n\nimport { getBaseUrl } from '@plone/volto/helpers';\nimport {\n  addRule,\n  getRules,\n  enableRules,\n  disableRules,\n  applyRulesToSubfolders,\n  unapplyRulesToSubfolders,\n  removeRules,\n} from '@plone/volto/actions';\n\nimport { Icon, Toolbar } from '@plone/volto/components';\n\nimport backSVG from '@plone/volto/icons/back.svg';\nimport checkSVG from '@plone/volto/icons/check.svg';\n\nimport { toast } from 'react-toastify';\nimport { Toast } from '@plone/volto/components';\n\nconst messages = defineMessages({\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  rules: {\n    id: 'Rules',\n    defaultMessage: 'Rules',\n  },\n  success: {\n    id: 'Success',\n    defaultMessage: 'Success',\n  },\n  add: {\n    id: 'Added',\n    defaultMessage: 'Added',\n  },\n  enable: {\n    id: 'Enabled',\n    defaultMessage: 'Enabled',\n  },\n  disable: {\n    id: 'Disabled',\n    defaultMessage: 'Disabled',\n  },\n  apply: {\n    id: 'Applied to subfolders',\n    defaultMessage: 'Applied to subfolders',\n  },\n  unapply: {\n    id: 'Disabled apply to subfolders',\n    defaultMessage: 'Disabled apply to subfolders',\n  },\n  remove: {\n    id: 'Unassigned',\n    defaultMessage: 'Unassigned',\n  },\n});\n\n/**\n * Rules class.\n * @class Rules\n * @extends Component\n */\nclass Rules extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    getRules: PropTypes.func.isRequired,\n    addRule: PropTypes.func.isRequired,\n    enableRules: PropTypes.func.isRequired,\n    disableRules: PropTypes.func.isRequired,\n    applyRulesToSubfolders: PropTypes.func.isRequired,\n    unapplyRulesToSubfolders: PropTypes.func.isRequired,\n    removeRules: PropTypes.func.isRequired,\n    pathname: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Rules\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      isClient: false,\n      checkedRules: [],\n      newRule: '',\n    };\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.getRules(getBaseUrl(this.props.pathname));\n    this.setState({ isClient: true });\n  }\n\n  componentDidUpdate(prevProps, prevState) {}\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.rules.add.loading && nextProps.rules.add.loaded) {\n      this.props.getRules(getBaseUrl(this.props.pathname));\n      this.setState({ newRule: '' });\n      toast.success(\n        <Toast\n          success\n          title={this.props.intl.formatMessage(messages.success)}\n          content={this.props.intl.formatMessage(messages.add)}\n        />,\n      );\n    }\n    if (this.props.rules.disable.loading && nextProps.rules.disable.loaded) {\n      this.props.getRules(getBaseUrl(this.props.pathname));\n      this.setState({ checkedRules: [] });\n      toast.success(\n        <Toast\n          success\n          title={this.props.intl.formatMessage(messages.success)}\n          content={this.props.intl.formatMessage(messages.disable)}\n        />,\n      );\n    }\n    if (this.props.rules.enable.loading && nextProps.rules.enable.loaded) {\n      this.props.getRules(getBaseUrl(this.props.pathname));\n      this.setState({ checkedRules: [] });\n      toast.success(\n        <Toast\n          success\n          title={this.props.intl.formatMessage(messages.success)}\n          content={this.props.intl.formatMessage(messages.enable)}\n        />,\n      );\n    }\n    if (this.props.rules.apply.loading && nextProps.rules.apply.loaded) {\n      this.props.getRules(getBaseUrl(this.props.pathname));\n      this.setState({ checkedRules: [] });\n      toast.success(\n        <Toast\n          success\n          title={this.props.intl.formatMessage(messages.success)}\n          content={this.props.intl.formatMessage(messages.apply)}\n        />,\n      );\n    }\n    if (this.props.rules.unapply.loading && nextProps.rules.unapply.loaded) {\n      this.props.getRules(getBaseUrl(this.props.pathname));\n      this.setState({ checkedRules: [] });\n      toast.success(\n        <Toast\n          success\n          title={this.props.intl.formatMessage(messages.success)}\n          content={this.props.intl.formatMessage(messages.unapply)}\n        />,\n      );\n    }\n\n    if (this.props.rules.remove.loading && nextProps.rules.remove.loaded) {\n      this.props.getRules(getBaseUrl(this.props.pathname));\n      this.setState({ checkedRules: [] });\n      toast.success(\n        <Toast\n          success\n          title={this.props.intl.formatMessage(messages.success)}\n          content={this.props.intl.formatMessage(messages.remove)}\n        />,\n      );\n    }\n  }\n\n  /**\n   * Rule check handler\n   * @method handleCheckRule\n   * @returns {undefined}\n   */\n  handleCheckRule = (rule) => {\n    const rules = this.state.checkedRules;\n    if (rules.includes(rule)) {\n      const index = rules.indexOf(rule);\n      if (index > -1) {\n        let newRules = rules;\n        newRules.splice(index, 1);\n        this.setState({ checkedRules: newRules });\n      }\n    } else {\n      this.setState({\n        checkedRules: [...this.state.checkedRules, rule],\n      });\n    }\n  };\n\n  /**\n   * Disable rules handler\n   * @method handleDisableRules\n   * @returns {undefined}\n   */\n  handleDisableRules = () => {\n    this.props.disableRules(\n      getBaseUrl(this.props.pathname),\n      this.state.checkedRules,\n    );\n  };\n\n  /**\n   * Enable rules handler\n   * @method handleEnableRules\n   * @returns {undefined}\n   */\n  handleEnableRules = () => {\n    this.props.enableRules(\n      getBaseUrl(this.props.pathname),\n      this.state.checkedRules,\n    );\n  };\n\n  /**\n   * Apply rules to subfolder handler\n   * @method handleApplyToSubfolder\n   * @returns {undefined}\n   */\n  handleApplyToSubfolder = () => {\n    this.props.applyRulesToSubfolders(\n      getBaseUrl(this.props.pathname),\n      this.state.checkedRules,\n    );\n  };\n\n  /**\n   * Unapply rules to subfolder handler\n   * @method handleUnapplyToSubfolder\n   * @returns {undefined}\n   */\n  handleUnapplyToSubfolder = () => {\n    this.props.unapplyRulesToSubfolders(\n      getBaseUrl(this.props.pathname),\n      this.state.checkedRules,\n    );\n  };\n\n  /**\n   * Remove rules handler\n   * @method handleRemoveRules\n   * @returns {undefined}\n   */\n  handleRemoveRules = () => {\n    this.props.removeRules(\n      getBaseUrl(this.props.pathname),\n      this.state.checkedRules,\n    );\n  };\n\n  /**\n   * Remove rules handler\n   * @method handleAddRule\n   * @returns {undefined}\n   */\n  handleAddRule = () => {\n    this.props.addRule(getBaseUrl(this.props.pathname), this.state.newRule);\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { acquired_rules, assigned_rules, assignable_rules } =\n      this.props.rules?.rules || {};\n    return (\n      <Container id=\"rules\">\n        <Helmet title={this.props.intl.formatMessage(messages.rules)} />\n        <Segment.Group raised>\n          <Segment className=\"primary\">\n            <FormattedMessage\n              id=\"Content rules for {title}\"\n              defaultMessage=\"Content rules for {title}\"\n              values={{ title: <q>{this.props.title}</q> }}\n            />\n          </Segment>\n          <Segment secondary>\n            <FormattedMessage\n              id=\"The following content rules are active in this Page. Use the content rules control panel to create new rules or delete or modify existing ones.\"\n              defaultMessage=\"The following content rules are active in this Page. Use the content rules control panel to create new rules or delete or modify existing ones.\"\n            />\n          </Segment>\n        </Segment.Group>\n\n        {acquired_rules && acquired_rules.length > 0 && (\n          <Table>\n            <Table.Body>\n              <Table.Row>\n                <Table.HeaderCell>\n                  <FormattedMessage\n                    id=\"Content rules from parent folders\"\n                    defaultMessage=\"Content rules from parent folders\"\n                  />\n                </Table.HeaderCell>\n                <Table.HeaderCell>\n                  <FormattedMessage id=\"Active\" defaultMessage=\"Active\" />\n                </Table.HeaderCell>\n              </Table.Row>\n\n              {acquired_rules.map((rule, i) => (\n                <Table.Row key={i}>\n                  <Table.Cell>\n                    {/* this can be a link to the control panel */}\n                    {rule.title}({rule.trigger})\n                  </Table.Cell>\n                  <Table.Cell>\n                    {rule.enabled && (\n                      <span style={{ color: 'green' }}>\n                        <Icon\n                          name={checkSVG}\n                          className=\"contents circled\"\n                          size=\"10px\"\n                        />\n                      </span>\n                    )}\n                  </Table.Cell>\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n        )}\n        {assignable_rules && assignable_rules.length > 0 && (\n          <Segment>\n            <FormattedMessage\n              id=\"Available content rules:\"\n              defaultMessage=\"Available content rules:\"\n            />\n            <div style={{ display: 'flex' }}>\n              <Select\n                placeholder=\"Select rule\"\n                value={this.state.newRule}\n                onChange={(e, { value }) => this.setState({ newRule: value })}\n                options={assignable_rules.map((rule, i) => {\n                  return { key: rule.id, value: rule.id, text: rule.title };\n                })}\n              />\n              <Button\n                onClick={this.handleAddRule}\n                primary\n                style={{ marginLeft: '10px' }}\n              >\n                <FormattedMessage id=\"Add\" defaultMessage=\"Add\" />\n              </Button>\n            </div>\n          </Segment>\n        )}\n        {assigned_rules && assigned_rules.length > 0 && (\n          <React.Fragment>\n            <Table>\n              <Table.Body>\n                <Table.Row>\n                  <Table.HeaderCell>\n                    <FormattedMessage id=\"Select\" defaultMessage=\"Select\" />\n                  </Table.HeaderCell>\n                  <Table.HeaderCell>\n                    <FormattedMessage\n                      id=\"Active content rules in this Page\"\n                      defaultMessage=\"Active content rules in this Page\"\n                    />\n                  </Table.HeaderCell>\n                  <Table.HeaderCell>\n                    <FormattedMessage\n                      id=\"Applies to subfolders?\"\n                      defaultMessage=\"Applies to subfolders?\"\n                    />\n                  </Table.HeaderCell>\n                  <Table.HeaderCell>\n                    <FormattedMessage\n                      id=\"Enabled here?\"\n                      defaultMessage=\"Enabled here?\"\n                    />\n                  </Table.HeaderCell>\n                  <Table.HeaderCell>\n                    <FormattedMessage id=\"Enabled?\" defaultMessage=\"Enabled?\" />\n                  </Table.HeaderCell>\n                </Table.Row>\n                {assigned_rules.map((rule, i) => (\n                  <Table.Row key={i}>\n                    <Table.Cell>\n                      <Checkbox\n                        onChange={(o, { value }) => this.handleCheckRule(value)}\n                        value={rule.id}\n                        checked={this.state.checkedRules.includes(rule.id)}\n                      />\n                    </Table.Cell>\n                    <Table.Cell>\n                      {rule.title}({rule.trigger})\n                    </Table.Cell>\n                    <Table.Cell>\n                      {rule.bubbles && (\n                        <span style={{ color: 'green' }}>\n                          <Icon\n                            name={checkSVG}\n                            className=\"contents circled\"\n                            size=\"10px\"\n                          />\n                        </span>\n                      )}\n                    </Table.Cell>\n                    <Table.Cell>\n                      {rule.enabled && (\n                        <span style={{ color: 'green' }}>\n                          <Icon\n                            name={checkSVG}\n                            className=\"contents circled\"\n                            size=\"10px\"\n                          />\n                        </span>\n                      )}\n                    </Table.Cell>\n                    <Table.Cell>\n                      {rule.global_enabled && (\n                        <span style={{ color: 'green' }}>\n                          <Icon\n                            name={checkSVG}\n                            className=\"contents circled\"\n                            size=\"10px\"\n                          />\n                        </span>\n                      )}\n                    </Table.Cell>\n                  </Table.Row>\n                ))}\n              </Table.Body>\n            </Table>\n            <Button onClick={this.handleEnableRules} primary>\n              <FormattedMessage id=\"Enable\" defaultMessage=\"Enable\" />\n            </Button>\n            <Button onClick={this.handleDisableRules} primary>\n              <FormattedMessage id=\"Disable\" defaultMessage=\"Disable\" />\n            </Button>\n            <Button onClick={this.handleApplyToSubfolder} primary>\n              <FormattedMessage\n                id=\"Apply to subfolders\"\n                defaultMessage=\"Apply to subfolders\"\n              />\n            </Button>\n            <Button onClick={this.handleUnapplyToSubfolder} primary>\n              <FormattedMessage\n                id=\"Disable apply to subfolders\"\n                defaultMessage=\"Disable apply to subfolders\"\n              />\n            </Button>\n            <Button color=\"youtube\" onClick={this.handleRemoveRules}>\n              <FormattedMessage id=\"Unassign\" defaultMessage=\"Unassign\" />\n            </Button>\n          </React.Fragment>\n        )}\n        {this.state.isClient && (\n          <Portal node={document.getElementById('toolbar')}>\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={\n                <Link\n                  to={`${getBaseUrl(this.props.pathname)}`}\n                  className=\"item\"\n                >\n                  <Icon\n                    name={backSVG}\n                    className=\"contents circled\"\n                    size=\"30px\"\n                    title={this.props.intl.formatMessage(messages.back)}\n                  />\n                </Link>\n              }\n            />\n          </Portal>\n        )}\n      </Container>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      rules: state.rules,\n      pathname: props.location.pathname,\n      title: state.content.data?.title || '',\n    }),\n    {\n      addRule,\n      getRules,\n      enableRules,\n      disableRules,\n      applyRulesToSubfolders,\n      unapplyRulesToSubfolders,\n      removeRules,\n    },\n  ),\n)(Rules);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Back","defaultMessage":"Back"},{"id":"Rules","defaultMessage":"Rules"},{"id":"Success","defaultMessage":"Success"},{"id":"Added","defaultMessage":"Added"},{"id":"Enabled","defaultMessage":"Enabled"},{"id":"Disabled","defaultMessage":"Disabled"},{"id":"Applied to subfolders","defaultMessage":"Applied to subfolders"},{"id":"Disabled apply to subfolders","defaultMessage":"Disabled apply to subfolders"},{"id":"Unassigned","defaultMessage":"Unassigned"},{"id":"Content rules for {title}","defaultMessage":"Content rules for {title}"},{"id":"The following content rules are active in this Page. Use the content rules control panel to create new rules or delete or modify existing ones.","defaultMessage":"The following content rules are active in this Page. Use the content rules control panel to create new rules or delete or modify existing ones."},{"id":"Content rules from parent folders","defaultMessage":"Content rules from parent folders"},{"id":"Active","defaultMessage":"Active"},{"id":"Available content rules:","defaultMessage":"Available content rules:"},{"id":"Add","defaultMessage":"Add"},{"id":"Select","defaultMessage":"Select"},{"id":"Active content rules in this Page","defaultMessage":"Active content rules in this Page"},{"id":"Applies to subfolders?","defaultMessage":"Applies to subfolders?"},{"id":"Enabled here?","defaultMessage":"Enabled here?"},{"id":"Enabled?","defaultMessage":"Enabled?"},{"id":"Enable","defaultMessage":"Enable"},{"id":"Disable","defaultMessage":"Disable"},{"id":"Apply to subfolders","defaultMessage":"Apply to subfolders"},{"id":"Disable apply to subfolders","defaultMessage":"Disable apply to subfolders"},{"id":"Unassign","defaultMessage":"Unassign"}]}},"sourceType":"module","externalDependencies":[]}