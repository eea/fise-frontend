{"ast":null,"code":"import _classCallCheck from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/theme/PasswordReset/PasswordReset.jsx\";\nvar __jsx = React.createElement;\n/**\n * PasswordReset component.\n * @module components/theme/PasswordReset/PasswordReset\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Helmet } from '@plone/volto/helpers';\nimport { Container } from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport { Form } from '@plone/volto/components';\nimport { setInitialPassword } from '@plone/volto/actions';\nimport config from '@plone/volto/registry';\nvar messages = defineMessages({\n  title: {\n    \"id\": \"Set your password\",\n    \"defaultMessage\": \"Set your password\"\n  },\n  description: {\n    \"id\": \"Please fill out the form below to set your password.\",\n    \"defaultMessage\": \"Please fill out the form below to set your password.\"\n  },\n  \"default\": {\n    \"id\": \"Default\",\n    \"defaultMessage\": \"Default\"\n  },\n  usernameTitle: {\n    \"id\": \"My username is\",\n    \"defaultMessage\": \"My username is\"\n  },\n  emailTitle: {\n    \"id\": \"My email is\",\n    \"defaultMessage\": \"My email is\"\n  },\n  usernameDescription: {\n    \"id\": \"Enter your username for verification.\",\n    \"defaultMessage\": \"Enter your username for verification.\"\n  },\n  emailDescription: {\n    \"id\": \"Enter your email for verification.\",\n    \"defaultMessage\": \"Enter your email for verification.\"\n  },\n  passwordTitle: {\n    \"id\": \"New password\",\n    \"defaultMessage\": \"New password\"\n  },\n  passwordDescription: {\n    \"id\": \"Enter your new password. Minimum 5 characters.\",\n    \"defaultMessage\": \"Enter your new password. Minimum 5 characters.\"\n  },\n  passwordRepeatTitle: {\n    \"id\": \"Confirm password\",\n    \"defaultMessage\": \"Confirm password\"\n  },\n  passwordsDoNotMatch: {\n    \"id\": \"Passwords do not match.\",\n    \"defaultMessage\": \"Passwords do not match.\"\n  },\n  mailDoNotMatch: {\n    \"id\": \"E-mail addresses do not match.\",\n    \"defaultMessage\": \"E-mail addresses do not match.\"\n  },\n  passwordRepeatDescription: {\n    \"id\": \"Re-enter the password. Make sure the passwords are identical.\",\n    \"defaultMessage\": \"Re-enter the password. Make sure the passwords are identical.\"\n  },\n  setMyPassword: {\n    \"id\": \"Set my password\",\n    \"defaultMessage\": \"Set my password\"\n  },\n  successRedirectToLoginTitle: {\n    \"id\": \"Account activation completed\",\n    \"defaultMessage\": \"Account activation completed\"\n  },\n  successRedirectToLoginBody: {\n    \"id\": \"Your password has been set successfully. You may now {link} with your new password.\",\n    \"defaultMessage\": \"Your password has been set successfully. You may now {link} with your new password.\"\n  },\n  passwordReset: {\n    \"id\": \"Password reset\",\n    \"defaultMessage\": \"Password reset\"\n  }\n});\n\n/**\n * PasswordReset class.\n * @class PasswordReset\n * @extends Component\n */\nvar PasswordReset = /*#__PURE__*/function (_Component) {\n  _inherits(PasswordReset, _Component);\n  var _super = _createSuper(PasswordReset);\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Controlpanel\n   */\n  function PasswordReset(props) {\n    var _this;\n    _classCallCheck(this, PasswordReset);\n    _this = _super.call(this, props);\n    _this.onCancel = _this.onCancel.bind(_assertThisInitialized(_this));\n    _this.onSubmit = _this.onSubmit.bind(_assertThisInitialized(_this));\n    _this.state = {\n      error: null,\n      isSuccessful: false\n    };\n    _this.identifierField = config.settings.useEmailAsLogin ? 'email' : 'username';\n    _this.identifierTitle = _this.identifierField === 'email' ? _this.props.intl.formatMessage(messages.emailTitle) : _this.props.intl.formatMessage(messages.usernameTitle);\n    _this.identifierDescription = _this.identifierField === 'email' ? _this.props.intl.formatMessage(messages.emailDescription) : _this.props.intl.formatMessage(messages.usernameDescription);\n    return _this;\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  _createClass(PasswordReset, [{\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      if (this.props.loading && nextProps.loaded) {\n        this.setState({\n          isSuccessful: true\n        });\n      }\n    }\n\n    /**\n     * Submit handler\n     * @method onSubmit\n     * @param {object} data Form data.\n     * @param {object} event Form data.\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(data) {\n      if (data.password === data.passwordRepeat) {\n        this.props.setInitialPassword(data[this.identifierField], this.props.token, data.password);\n        this.setState({\n          error: null\n        });\n      } else {\n        this.setState({\n          error: {\n            message: this.props.intl.formatMessage(messages.passwordsDoNotMatch)\n          }\n        });\n      }\n    }\n\n    /**\n     * Cancel handler\n     * @method onCancel\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onCancel\",\n    value: function onCancel() {\n      this.props.history.goBack();\n    }\n\n    /**\n     * Render method.\n     * @method render\n     * @returns {string} Markup for the component.\n     */\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (this.state.isSuccessful) {\n        return __jsx(Container, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 206,\n            columnNumber: 9\n          }\n        }, __jsx(\"h1\", {\n          className: \"documentFirstHeading\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 11\n          }\n        }, __jsx(FormattedMessage, {\n          id: \"Account activation completed\",\n          defaultMessage: \"Account activation completed\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 13\n          }\n        })), __jsx(\"p\", {\n          className: \"description\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 11\n          }\n        }, __jsx(FormattedMessage, {\n          id: \"Your password has been set successfully. You may now {link} with your new password.\",\n          defaultMessage: \"Your password has been set successfully. You may now {link} with your new password.\",\n          values: {\n            link: __jsx(Link, {\n              to: \"/login\",\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 219,\n                columnNumber: 19\n              }\n            }, this.props.intl.formatMessage({\n              id: 'Log In'\n            }))\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 13\n          }\n        })));\n      }\n      if (this.props.token) {\n        var _properties;\n        return __jsx(\"div\", {\n          id: \"page-password-reset\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 9\n          }\n        }, __jsx(Helmet, {\n          title: this.props.intl.formatMessage(messages.passwordReset),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 11\n          }\n        }), __jsx(Container, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 11\n          }\n        }, __jsx(Form, {\n          title: this.props.intl.formatMessage(messages.title),\n          description: this.props.intl.formatMessage(messages.description),\n          onSubmit: this.onSubmit,\n          onCancel: this.onCancel,\n          error: this.state.error || this.props.error,\n          schema: {\n            fieldsets: [{\n              id: 'default',\n              title: this.props.intl.formatMessage(messages[\"default\"]),\n              fields: [this.identifierField, 'password', 'passwordRepeat']\n            }],\n            properties: (_properties = {}, _defineProperty(_properties, this.identifierField, {\n              type: 'string',\n              title: this.identifierTitle,\n              description: this.identifierDescription\n            }), _defineProperty(_properties, \"password\", {\n              description: this.props.intl.formatMessage(messages.passwordDescription),\n              title: this.props.intl.formatMessage(messages.passwordTitle),\n              type: 'string',\n              widget: 'password'\n            }), _defineProperty(_properties, \"passwordRepeat\", {\n              description: this.props.intl.formatMessage(messages.passwordRepeatDescription),\n              title: this.props.intl.formatMessage(messages.passwordRepeatTitle),\n              type: 'string',\n              widget: 'password'\n            }), _properties),\n            submitLabel: this.props.intl.formatMessage(messages.setMyPassword),\n            required: [this.identifierField, 'password', 'passwordRepeat']\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 13\n          }\n        })));\n      }\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 12\n        }\n      });\n    }\n  }]);\n  return PasswordReset;\n}(Component);\n_defineProperty(PasswordReset, \"propTypes\", {\n  loading: PropTypes.bool.isRequired,\n  loaded: PropTypes.bool.isRequired,\n  error: PropTypes.string,\n  token: PropTypes.string.isRequired,\n  setInitialPassword: PropTypes.func.isRequired\n});\n_defineProperty(PasswordReset, \"defaultProps\", {\n  error: null\n});\nexport default compose(withRouter, injectIntl, connect(function (state, props) {\n  return {\n    loading: state.users.initial.loading,\n    loaded: state.users.initial.loaded,\n    error: state.users.initial.error,\n    token: props.match.params.token\n  };\n}, {\n  setInitialPassword: setInitialPassword\n}))(PasswordReset);","map":{"version":3,"names":["React","Component","PropTypes","connect","compose","Link","withRouter","Helmet","Container","FormattedMessage","defineMessages","injectIntl","Form","setInitialPassword","config","messages","title","description","usernameTitle","emailTitle","usernameDescription","emailDescription","passwordTitle","passwordDescription","passwordRepeatTitle","passwordsDoNotMatch","mailDoNotMatch","passwordRepeatDescription","setMyPassword","successRedirectToLoginTitle","successRedirectToLoginBody","passwordReset","PasswordReset","props","onCancel","bind","onSubmit","state","error","isSuccessful","identifierField","settings","useEmailAsLogin","identifierTitle","intl","formatMessage","identifierDescription","nextProps","loading","loaded","setState","data","password","passwordRepeat","token","message","history","goBack","link","id","fieldsets","fields","properties","type","widget","submitLabel","required","bool","isRequired","string","func","users","initial","match","params"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/theme/PasswordReset/PasswordReset.jsx"],"sourcesContent":["/**\n * PasswordReset component.\n * @module components/theme/PasswordReset/PasswordReset\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Helmet } from '@plone/volto/helpers';\nimport { Container } from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\n\nimport { Form } from '@plone/volto/components';\nimport { setInitialPassword } from '@plone/volto/actions';\nimport config from '@plone/volto/registry';\n\nconst messages = defineMessages({\n  title: {\n    id: 'Set your password',\n    defaultMessage: 'Set your password',\n  },\n  description: {\n    id: 'Please fill out the form below to set your password.',\n    defaultMessage: 'Please fill out the form below to set your password.',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  usernameTitle: {\n    id: 'My username is',\n    defaultMessage: 'My username is',\n  },\n  emailTitle: {\n    id: 'My email is',\n    defaultMessage: 'My email is',\n  },\n  usernameDescription: {\n    id: 'Enter your username for verification.',\n    defaultMessage: 'Enter your username for verification.',\n  },\n  emailDescription: {\n    id: 'Enter your email for verification.',\n    defaultMessage: 'Enter your email for verification.',\n  },\n  passwordTitle: {\n    id: 'New password',\n    defaultMessage: 'New password',\n  },\n  passwordDescription: {\n    id: 'Enter your new password. Minimum 5 characters.',\n    defaultMessage: 'Enter your new password. Minimum 5 characters.',\n  },\n  passwordRepeatTitle: {\n    id: 'Confirm password',\n    defaultMessage: 'Confirm password',\n  },\n  passwordsDoNotMatch: {\n    id: 'Passwords do not match.',\n    defaultMessage: 'Passwords do not match.',\n  },\n  mailDoNotMatch: {\n    id: 'E-mail addresses do not match.',\n    defaultMessage: 'E-mail addresses do not match.',\n  },\n  passwordRepeatDescription: {\n    id: 'Re-enter the password. Make sure the passwords are identical.',\n    defaultMessage:\n      'Re-enter the password. Make sure the passwords are identical.',\n  },\n  setMyPassword: {\n    id: 'Set my password',\n    defaultMessage: 'Set my password',\n  },\n  successRedirectToLoginTitle: {\n    id: 'Account activation completed',\n    defaultMessage: 'Account activation completed',\n  },\n  successRedirectToLoginBody: {\n    id:\n      'Your password has been set successfully. You may now {link} with your new password.',\n    defaultMessage:\n      'Your password has been set successfully. You may now {link} with your new password.',\n  },\n  passwordReset: {\n    id: 'Password reset',\n    defaultMessage: 'Password reset',\n  },\n});\n\n/**\n * PasswordReset class.\n * @class PasswordReset\n * @extends Component\n */\nclass PasswordReset extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    loaded: PropTypes.bool.isRequired,\n    error: PropTypes.string,\n    token: PropTypes.string.isRequired,\n    setInitialPassword: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    error: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Controlpanel\n   */\n  constructor(props) {\n    super(props);\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = {\n      error: null,\n      isSuccessful: false,\n    };\n\n    this.identifierField = config.settings.useEmailAsLogin\n      ? 'email'\n      : 'username';\n\n    this.identifierTitle =\n      this.identifierField === 'email'\n        ? this.props.intl.formatMessage(messages.emailTitle)\n        : this.props.intl.formatMessage(messages.usernameTitle);\n\n    this.identifierDescription =\n      this.identifierField === 'email'\n        ? this.props.intl.formatMessage(messages.emailDescription)\n        : this.props.intl.formatMessage(messages.usernameDescription);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.loading && nextProps.loaded) {\n      this.setState({ isSuccessful: true });\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @param {object} event Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    if (data.password === data.passwordRepeat) {\n      this.props.setInitialPassword(\n        data[this.identifierField],\n        this.props.token,\n        data.password,\n      );\n      this.setState({\n        error: null,\n      });\n    } else {\n      this.setState({\n        error: {\n          message: this.props.intl.formatMessage(messages.passwordsDoNotMatch),\n        },\n      });\n    }\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.props.history.goBack();\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    if (this.state.isSuccessful) {\n      return (\n        <Container>\n          <h1 className=\"documentFirstHeading\">\n            <FormattedMessage\n              id=\"Account activation completed\"\n              defaultMessage=\"Account activation completed\"\n            />\n          </h1>\n          <p className=\"description\">\n            <FormattedMessage\n              id=\"Your password has been set successfully. You may now {link} with your new password.\"\n              defaultMessage=\"Your password has been set successfully. You may now {link} with your new password.\"\n              values={{\n                link: (\n                  <Link to=\"/login\">\n                    {this.props.intl.formatMessage({ id: 'Log In' })}\n                  </Link>\n                ),\n              }}\n            />\n          </p>\n        </Container>\n      );\n    }\n    if (this.props.token) {\n      return (\n        <div id=\"page-password-reset\">\n          <Helmet\n            title={this.props.intl.formatMessage(messages.passwordReset)}\n          />\n          <Container>\n            <Form\n              title={this.props.intl.formatMessage(messages.title)}\n              description={this.props.intl.formatMessage(messages.description)}\n              onSubmit={this.onSubmit}\n              onCancel={this.onCancel}\n              error={this.state.error || this.props.error}\n              schema={{\n                fieldsets: [\n                  {\n                    id: 'default',\n                    title: this.props.intl.formatMessage(messages.default),\n                    fields: [\n                      this.identifierField,\n                      'password',\n                      'passwordRepeat',\n                    ],\n                  },\n                ],\n                properties: {\n                  [this.identifierField]: {\n                    type: 'string',\n                    title: this.identifierTitle,\n                    description: this.identifierDescription,\n                  },\n                  password: {\n                    description: this.props.intl.formatMessage(\n                      messages.passwordDescription,\n                    ),\n                    title: this.props.intl.formatMessage(\n                      messages.passwordTitle,\n                    ),\n                    type: 'string',\n                    widget: 'password',\n                  },\n                  passwordRepeat: {\n                    description: this.props.intl.formatMessage(\n                      messages.passwordRepeatDescription,\n                    ),\n                    title: this.props.intl.formatMessage(\n                      messages.passwordRepeatTitle,\n                    ),\n                    type: 'string',\n                    widget: 'password',\n                  },\n                },\n                submitLabel: this.props.intl.formatMessage(\n                  messages.setMyPassword,\n                ),\n                required: [this.identifierField, 'password', 'passwordRepeat'],\n              }}\n            />\n          </Container>\n        </div>\n      );\n    }\n    return <div />;\n  }\n}\n\nexport default compose(\n  withRouter,\n  injectIntl,\n  connect(\n    (state, props) => ({\n      loading: state.users.initial.loading,\n      loaded: state.users.initial.loaded,\n      error: state.users.initial.error,\n      token: props.match.params.token,\n    }),\n    { setInitialPassword },\n  ),\n)(PasswordReset);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Set your password","defaultMessage":"Set your password"},{"id":"Please fill out the form below to set your password.","defaultMessage":"Please fill out the form below to set your password."},{"id":"Default","defaultMessage":"Default"},{"id":"My username is","defaultMessage":"My username is"},{"id":"My email is","defaultMessage":"My email is"},{"id":"Enter your username for verification.","defaultMessage":"Enter your username for verification."},{"id":"Enter your email for verification.","defaultMessage":"Enter your email for verification."},{"id":"New password","defaultMessage":"New password"},{"id":"Enter your new password. Minimum 5 characters.","defaultMessage":"Enter your new password. Minimum 5 characters."},{"id":"Confirm password","defaultMessage":"Confirm password"},{"id":"Passwords do not match.","defaultMessage":"Passwords do not match."},{"id":"E-mail addresses do not match.","defaultMessage":"E-mail addresses do not match."},{"id":"Re-enter the password. Make sure the passwords are identical.","defaultMessage":"Re-enter the password. Make sure the passwords are identical."},{"id":"Set my password","defaultMessage":"Set my password"},{"id":"Account activation completed","defaultMessage":"Account activation completed"},{"id":"Your password has been set successfully. You may now {link} with your new password.","defaultMessage":"Your password has been set successfully. You may now {link} with your new password."},{"id":"Password reset","defaultMessage":"Password reset"}]}},"sourceType":"module","externalDependencies":[]}