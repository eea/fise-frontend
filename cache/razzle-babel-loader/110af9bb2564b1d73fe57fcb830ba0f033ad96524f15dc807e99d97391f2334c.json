{"ast":null,"code":"import _isEmpty from \"lodash/isEmpty\";\nimport _keys from \"lodash/keys\";\nimport _unionBy from \"lodash/unionBy\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-widget-geolocation/src/components/manage/Widgets/GeolocationWidget.jsx\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, Button, Segment } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { FormFieldWrapper, Icon } from '@plone/volto/components';\nimport { getGeoData } from '@eeacms/volto-widget-geolocation/actions';\nimport { GeolocationWidgetView } from '@eeacms/volto-widget-geolocation/components';\nimport { SidebarPopup } from '@plone/volto/components';\nimport Select, { components } from 'react-select';\nimport { getBioTags, getCountries } from './util';\nimport SearchGeoName from './SearchGeoName';\nimport { eeaCountries, countryGroups } from './eeaCountries';\nimport { biogeographicalData } from './biogeographical';\nimport { Option, DropdownIndicator, selectTheme, customSelectStyles } from '@plone/volto/components/manage/Widgets/SelectStyling';\nimport zoomSVG from '@plone/volto/icons/zoom-in.svg';\nimport './public.less';\nconst messages = defineMessages({\n  coverage: {\n    \"id\": \"Geographic coverage\",\n    \"defaultMessage\": \"Geographic coverage\"\n  },\n  group: {\n    \"id\": \"Geographic group\",\n    \"defaultMessage\": \"Geographic group\"\n  },\n  search: {\n    \"id\": \"Advanced search\",\n    \"defaultMessage\": \"Advanced search\"\n  }\n});\nconst getOptions = (arr, state) => {\n  return state ? _unionBy(arr, state, 'label') : arr;\n};\nconst Group = props => __jsx(components.Group, _extends({}, props, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 26\n  }\n}));\nconst GeolocationWidget = props => {\n  const {\n    id,\n    value = {},\n    block,\n    onChange,\n    intl,\n    onChangeSchema\n  } = props;\n  const originalValue = value;\n  const {\n    0: isOpenPopup,\n    1: setPopup\n  } = useState(false);\n  const dispatch = useDispatch();\n  const geoData = useSelector(state => {\n    var _state$geolocation;\n    return ((_state$geolocation = state.geolocation) === null || _state$geolocation === void 0 ? void 0 : _state$geolocation.data) || {};\n  });\n  const {\n    biotags = {},\n    geotags = {}\n  } = geoData;\n  React.useEffect(() => {\n    dispatch(getGeoData());\n  }, [dispatch]);\n  let options = [{\n    label: 'Biogeographical regions',\n    options: !_isEmpty(biotags) ? getBioTags(biotags) : biogeographicalData\n  }, {\n    label: 'Countries groups',\n    options: !_isEmpty(geotags) ? getCountries(geotags) : eeaCountries\n  }];\n  const eeaGroups = () => {\n    return !_isEmpty(geotags) ? _keys(geotags).map(item => ({\n      label: item,\n      value: item\n    })) : countryGroups;\n  };\n  const handleGroupChange = ({\n    label,\n    value\n  }) => {\n    let arr = [];\n    if (_isEmpty(geotags)) {\n      arr = eeaCountries.filter(item => {\n        var _item$group;\n        return (_item$group = item.group) === null || _item$group === void 0 ? void 0 : _item$group.includes(label);\n      });\n    } else {\n      arr = _keys(geotags[value]).filter(item => item !== 'title').map(item => item !== 'title' ? {\n        value: item,\n        label: geotags[value][item]\n      } : '');\n    }\n    onChange(id, _objectSpread(_objectSpread({}, originalValue), {}, {\n      geolocation: getOptions(originalValue.geolocation, arr)\n    }));\n  };\n  const _groupId = `${id}-select-listingblock-template-group`;\n  const _coverageId = `${id}-select-listingblock-template-coverage`;\n  return __jsx(FormFieldWrapper, _extends({}, props, {\n    title: props.title || 'Geographic coverage',\n    className: \"geo-field-wrapper\",\n    columns: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }\n  }), __jsx(Grid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }\n  }, originalValue !== null && originalValue !== void 0 && originalValue.readOnly ? __jsx(Grid.Row, {\n    stretched: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  }, __jsx(Grid.Column, {\n    width: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    className: \"wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 15\n    }\n  }, __jsx(\"label\", {\n    htmlFor: \"select-listingblock-template\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 17\n    }\n  }, intl.formatMessage(messages.coverage)))), __jsx(Grid.Column, {\n    width: \"8\",\n    style: {\n      flexDirection: 'unset'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }\n  }, __jsx(GeolocationWidgetView, {\n    value: originalValue,\n    className: \"read-only\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 15\n    }\n  }))) : __jsx(React.Fragment, null, __jsx(Grid.Row, {\n    stretched: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  }, __jsx(Grid.Column, {\n    width: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 15\n    }\n  }, __jsx(\"div\", {\n    className: \"wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }\n  }, __jsx(\"label\", {\n    htmlFor: `${id}-select-listingblock-template-group`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 19\n    }\n  }, intl.formatMessage(messages.group)))), __jsx(Grid.Column, {\n    width: \"8\",\n    style: {\n      flexDirection: 'unset'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 15\n    }\n  }, __jsx(Select, {\n    defaultValue: [],\n    id: _groupId,\n    name: _groupId,\n    className: \"react-select-container\",\n    classNamePrefix: \"react-select\",\n    options: eeaGroups(),\n    styles: customSelectStyles,\n    theme: selectTheme,\n    components: {\n      DropdownIndicator,\n      Option\n    },\n    value: [],\n    onChange: handleGroupChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 17\n    }\n  }))), __jsx(Grid.Row, {\n    stretched: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }\n  }, __jsx(Grid.Column, {\n    width: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 15\n    }\n  }, __jsx(\"div\", {\n    className: \"wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 17\n    }\n  }, __jsx(\"label\", {\n    htmlFor: \"select-listingblock-template\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 19\n    }\n  }, intl.formatMessage(messages.coverage)))), __jsx(Grid.Column, {\n    width: \"8\",\n    style: {\n      flexDirection: 'unset'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 15\n    }\n  }, __jsx(Select, {\n    isMulti: true,\n    id: _coverageId,\n    name: _coverageId,\n    className: \"react-select-container\",\n    classNamePrefix: \"react-select\",\n    options: options,\n    styles: customSelectStyles,\n    theme: selectTheme,\n    components: {\n      DropdownIndicator,\n      Option,\n      Group\n    },\n    value: value.geolocation || value,\n    onChange: geolocation => {\n      onChange(id, geolocation === '' ? _objectSpread(_objectSpread({}, value), {}, {\n        geolocation: undefined\n      }) : _objectSpread(_objectSpread({}, value), {}, {\n        geolocation\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 17\n    }\n  }))), __jsx(Grid.Row, {\n    stretched: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }\n  }, __jsx(Segment, {\n    attached: true,\n    className: \"actions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 15\n    }\n  }, __jsx(\"label\", {\n    className: 'popup-label',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 17\n    }\n  }, intl.formatMessage(messages.search)), __jsx(Button, {\n    basic: true,\n    primary: true,\n    floated: \"left\",\n    onClick: event => {\n      setPopup(true);\n      event.preventDefault();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 17\n    }\n  }, __jsx(Icon, {\n    name: zoomSVG,\n    size: \"30px\",\n    className: \"addSVG\",\n    title: intl.formatMessage(messages.search),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 19\n    }\n  }))), __jsx(SidebarPopup, {\n    open: isOpenPopup,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 15\n    }\n  }, __jsx(SearchGeoName, {\n    id: id,\n    data: value,\n    setPopup: setPopup,\n    block: block,\n    onChange: onChange,\n    onChangeSchema: onChangeSchema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 17\n    }\n  }))))));\n};\nGeolocationWidget.propTypes = {\n  // data: PropTypes.objectOf(PropTypes.any).isRequired,\n  // value: PropTypes.objectOf(PropTypes.any).isRequired,\n  block: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired\n};\nexport default injectIntl(GeolocationWidget);","map":{"version":3,"names":["React","useState","PropTypes","Grid","Button","Segment","defineMessages","injectIntl","useSelector","useDispatch","FormFieldWrapper","Icon","getGeoData","GeolocationWidgetView","SidebarPopup","Select","components","getBioTags","getCountries","SearchGeoName","eeaCountries","countryGroups","biogeographicalData","Option","DropdownIndicator","selectTheme","customSelectStyles","zoomSVG","messages","coverage","group","search","getOptions","arr","state","Group","props","GeolocationWidget","id","value","block","onChange","intl","onChangeSchema","originalValue","isOpenPopup","setPopup","dispatch","geoData","geolocation","data","biotags","geotags","useEffect","options","label","eeaGroups","map","item","handleGroupChange","filter","includes","_groupId","_coverageId","title","readOnly","formatMessage","flexDirection","undefined","event","preventDefault","propTypes","string","isRequired","func"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-widget-geolocation/src/components/manage/Widgets/GeolocationWidget.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, Button, Segment } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { FormFieldWrapper, Icon } from '@plone/volto/components';\nimport { unionBy, keys, isEmpty } from 'lodash';\nimport { getGeoData } from '@eeacms/volto-widget-geolocation/actions';\nimport { GeolocationWidgetView } from '@eeacms/volto-widget-geolocation/components';\n\nimport { SidebarPopup } from '@plone/volto/components';\n\nimport Select, { components } from 'react-select';\nimport { getBioTags, getCountries } from './util';\nimport SearchGeoName from './SearchGeoName';\nimport { eeaCountries, countryGroups } from './eeaCountries';\nimport { biogeographicalData } from './biogeographical';\nimport {\n  Option,\n  DropdownIndicator,\n  selectTheme,\n  customSelectStyles,\n} from '@plone/volto/components/manage/Widgets/SelectStyling';\nimport zoomSVG from '@plone/volto/icons/zoom-in.svg';\nimport './public.less';\n\nconst messages = defineMessages({\n  coverage: {\n    id: 'Geographic coverage',\n    defaultMessage: 'Geographic coverage',\n  },\n  group: {\n    id: 'Geographic group',\n    defaultMessage: 'Geographic group',\n  },\n  search: {\n    id: 'Advanced search',\n    defaultMessage: 'Advanced search',\n  },\n});\n\nconst getOptions = (arr, state) => {\n  return state ? unionBy(arr, state, 'label') : arr;\n};\n\nconst Group = (props) => <components.Group {...props} />;\n\nconst GeolocationWidget = (props) => {\n  const { id, value = {}, block, onChange, intl, onChangeSchema } = props;\n  const originalValue = value;\n\n  const [isOpenPopup, setPopup] = useState(false);\n  const dispatch = useDispatch();\n  const geoData = useSelector((state) => state.geolocation?.data || {});\n  const { biotags = {}, geotags = {} } = geoData;\n\n  React.useEffect(() => {\n    dispatch(getGeoData());\n  }, [dispatch]);\n\n  let options = [\n    {\n      label: 'Biogeographical regions',\n      options: !isEmpty(biotags) ? getBioTags(biotags) : biogeographicalData,\n    },\n    {\n      label: 'Countries groups',\n      options: !isEmpty(geotags) ? getCountries(geotags) : eeaCountries,\n    },\n  ];\n\n  const eeaGroups = () => {\n    return !isEmpty(geotags)\n      ? keys(geotags).map((item) => ({\n          label: item,\n          value: item,\n        }))\n      : countryGroups;\n  };\n\n  const handleGroupChange = ({ label, value }) => {\n    let arr = [];\n    if (isEmpty(geotags)) {\n      arr = eeaCountries.filter((item) => item.group?.includes(label));\n    } else {\n      arr = keys(geotags[value])\n        .filter((item) => item !== 'title')\n        .map((item) =>\n          item !== 'title'\n            ? {\n                value: item,\n                label: geotags[value][item],\n              }\n            : '',\n        );\n    }\n    onChange(id, {\n      ...originalValue,\n      geolocation: getOptions(originalValue.geolocation, arr),\n    });\n  };\n\n  const _groupId = `${id}-select-listingblock-template-group`;\n  const _coverageId = `${id}-select-listingblock-template-coverage`;\n\n  return (\n    <FormFieldWrapper\n      {...props}\n      title={props.title || 'Geographic coverage'}\n      className=\"geo-field-wrapper\"\n      columns={1}\n    >\n      <Grid>\n        {originalValue?.readOnly ? (\n          <Grid.Row stretched>\n            <Grid.Column width=\"4\">\n              <div className=\"wrapper\">\n                <label htmlFor=\"select-listingblock-template\">\n                  {intl.formatMessage(messages.coverage)}\n                </label>\n              </div>\n            </Grid.Column>\n            <Grid.Column width=\"8\" style={{ flexDirection: 'unset' }}>\n              <GeolocationWidgetView\n                value={originalValue}\n                className=\"read-only\"\n              />\n            </Grid.Column>\n          </Grid.Row>\n        ) : (\n          <>\n            <Grid.Row stretched>\n              <Grid.Column width=\"4\">\n                <div className=\"wrapper\">\n                  <label htmlFor={`${id}-select-listingblock-template-group`}>\n                    {intl.formatMessage(messages.group)}\n                  </label>\n                </div>\n              </Grid.Column>\n              <Grid.Column width=\"8\" style={{ flexDirection: 'unset' }}>\n                <Select\n                  defaultValue={[]}\n                  id={_groupId}\n                  name={_groupId}\n                  className=\"react-select-container\"\n                  classNamePrefix=\"react-select\"\n                  options={eeaGroups()}\n                  styles={customSelectStyles}\n                  theme={selectTheme}\n                  components={{ DropdownIndicator, Option }}\n                  value={[]}\n                  onChange={handleGroupChange}\n                />\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row stretched>\n              <Grid.Column width=\"4\">\n                <div className=\"wrapper\">\n                  <label htmlFor=\"select-listingblock-template\">\n                    {intl.formatMessage(messages.coverage)}\n                  </label>\n                </div>\n              </Grid.Column>\n              <Grid.Column width=\"8\" style={{ flexDirection: 'unset' }}>\n                <Select\n                  isMulti\n                  id={_coverageId}\n                  name={_coverageId}\n                  className=\"react-select-container\"\n                  classNamePrefix=\"react-select\"\n                  options={options}\n                  styles={customSelectStyles}\n                  theme={selectTheme}\n                  components={{ DropdownIndicator, Option, Group }}\n                  value={value.geolocation || value}\n                  onChange={(geolocation) => {\n                    onChange(\n                      id,\n                      geolocation === ''\n                        ? { ...value, geolocation: undefined }\n                        : { ...value, geolocation },\n                    );\n                  }}\n                />\n              </Grid.Column>\n            </Grid.Row>\n            <Grid.Row stretched>\n              <Segment attached className=\"actions\">\n                <label className={'popup-label'}>\n                  {intl.formatMessage(messages.search)}\n                </label>\n                <Button\n                  basic\n                  primary\n                  floated=\"left\"\n                  onClick={(event) => {\n                    setPopup(true);\n                    event.preventDefault();\n                  }}\n                >\n                  <Icon\n                    name={zoomSVG}\n                    size=\"30px\"\n                    className=\"addSVG\"\n                    title={intl.formatMessage(messages.search)}\n                  />\n                </Button>\n              </Segment>\n              <SidebarPopup open={isOpenPopup}>\n                <SearchGeoName\n                  id={id}\n                  data={value}\n                  setPopup={setPopup}\n                  block={block}\n                  onChange={onChange}\n                  onChangeSchema={onChangeSchema}\n                />\n              </SidebarPopup>\n            </Grid.Row>\n          </>\n        )}\n      </Grid>\n    </FormFieldWrapper>\n  );\n};\n\nGeolocationWidget.propTypes = {\n  // data: PropTypes.objectOf(PropTypes.any).isRequired,\n  // value: PropTypes.objectOf(PropTypes.any).isRequired,\n  block: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(GeolocationWidget);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Geographic coverage","defaultMessage":"Geographic coverage"},{"id":"Geographic group","defaultMessage":"Geographic group"},{"id":"Advanced search","defaultMessage":"Advanced search"}]}},"sourceType":"module","externalDependencies":[]}