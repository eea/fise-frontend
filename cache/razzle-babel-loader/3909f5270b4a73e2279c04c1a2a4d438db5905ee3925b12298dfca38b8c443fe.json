{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-forests-theme/src/components/theme/SiteMap/SiteMap.jsx\";\nvar __jsx = React.createElement;\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { asyncConnect } from 'redux-connect';\nimport { Link } from 'react-router-dom';\nimport { getBaseUrl } from '@plone/volto/helpers';\nimport { getNavSiteMap } from '@eeacms/volto-forests-theme/actions';\n\n/**\n * @export\n * @class SiteMap\n * @extends {Component}\n */\nclass SiteMap extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  componentDidMount() {\n    this.props.getNavSiteMap(getBaseUrl(this.props.location.pathname), 100);\n  }\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const {\n      navigation\n    } = this.props;\n    const TreeMap = ({\n      data\n    }) => {\n      return __jsx(\"ul\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 9\n        }\n      }, data.map((m, i) => {\n        return __jsx(\"li\", {\n          key: i,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 15\n          }\n        }, __jsx(Link, {\n          to: \"/\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 17\n          }\n        }, m.title), m.items && !!m.items.length && __jsx(TreeMap, {\n          data: m.items,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 49\n          }\n        }));\n      }));\n    };\n    return __jsx(Fragment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }\n    }, __jsx(TreeMap, {\n      data: navigation.items,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }\n    }));\n  }\n}\n_defineProperty(SiteMap, \"propTypes\", {\n  pathname: PropTypes.string.isRequired,\n  getNavSiteMap: PropTypes.func.isRequired\n});\nexport const __test__ = connect((state, props) => ({\n  pathname: props.location.pathname,\n  content: state.content.data\n}), {})(SiteMap);\nexport default compose(asyncConnect([{\n  key: 'navigation',\n  promise: ({\n    location,\n    store: {\n      dispatch\n    }\n  }) => dispatch(getNavSiteMap(getBaseUrl(location.pathname), 100))\n}]), connect((state, props) => ({\n  pathname: props.location.pathname\n}), {\n  getNavSiteMap\n}))(SiteMap);","map":{"version":3,"names":["React","Component","Fragment","PropTypes","connect","compose","asyncConnect","Link","getBaseUrl","getNavSiteMap","SiteMap","componentDidMount","props","location","pathname","render","navigation","TreeMap","data","map","m","i","title","items","length","string","isRequired","func","__test__","state","content","key","promise","store","dispatch"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-forests-theme/src/components/theme/SiteMap/SiteMap.jsx"],"sourcesContent":["import React, { Component, Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { asyncConnect } from 'redux-connect';\nimport { Link } from 'react-router-dom';\n\nimport { getBaseUrl } from '@plone/volto/helpers';\nimport { getNavSiteMap } from '@eeacms/volto-forests-theme/actions';\n\n/**\n * @export\n * @class SiteMap\n * @extends {Component}\n */\nclass SiteMap extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    pathname: PropTypes.string.isRequired,\n    getNavSiteMap: PropTypes.func.isRequired,\n  };\n\n  componentDidMount() {\n    this.props.getNavSiteMap(getBaseUrl(this.props.location.pathname), 100);\n  }\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { navigation } = this.props;\n\n    const TreeMap = ({ data }) => {\n      return (\n        <ul>\n          {data.map((m, i) => {\n            return (\n              <li key={i}>\n                <Link to=\"/\">{m.title}</Link>\n                {m.items && !!m.items.length && <TreeMap data={m.items} />}\n              </li>\n            );\n          })}\n        </ul>\n      );\n    };\n\n    return (\n      <Fragment>\n        <TreeMap data={navigation.items} />\n      </Fragment>\n    );\n  }\n}\n\nexport const __test__ = connect(\n  (state, props) => ({\n    pathname: props.location.pathname,\n    content: state.content.data,\n  }),\n  {},\n)(SiteMap);\n\nexport default compose(\n  asyncConnect([\n    {\n      key: 'navigation',\n      promise: ({ location, store: { dispatch } }) =>\n        dispatch(getNavSiteMap(getBaseUrl(location.pathname), 100)),\n    },\n  ]),\n  connect((state, props) => ({ pathname: props.location.pathname }), {\n    getNavSiteMap,\n  }),\n)(SiteMap);\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,OAAO,QAAQ,OAAO;AAC/B,SAASC,YAAY,QAAQ,eAAe;AAC5C,SAASC,IAAI,QAAQ,kBAAkB;AAEvC,SAASC,UAAU,QAAQ,sBAAsB;AACjD,SAASC,aAAa,QAAQ,qCAAqC;;AAEnE;AACA;AACA;AACA;AACA;AACA,MAAMC,OAAO,SAAST,SAAS,CAAC;EAC9B;AACF;AACA;AACA;AACA;;EAMEU,iBAAiB,GAAG;IAClB,IAAI,CAACC,KAAK,CAACH,aAAa,CAACD,UAAU,CAAC,IAAI,CAACI,KAAK,CAACC,QAAQ,CAACC,QAAQ,CAAC,EAAE,GAAG,CAAC;EACzE;EACA;AACF;AACA;AACA;AACA;EACEC,MAAM,GAAG;IACP,MAAM;MAAEC;IAAW,CAAC,GAAG,IAAI,CAACJ,KAAK;IAEjC,MAAMK,OAAO,GAAG,CAAC;MAAEC;IAAK,CAAC,KAAK;MAC5B,OACE;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GACGA,IAAI,CAACC,GAAG,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;QAClB,OACE;UAAI,GAAG,EAAEA,CAAE;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,GACT,MAAC,IAAI;UAAC,EAAE,EAAC,GAAG;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,GAAED,CAAC,CAACE,KAAK,CAAQ,EAC5BF,CAAC,CAACG,KAAK,IAAI,CAAC,CAACH,CAAC,CAACG,KAAK,CAACC,MAAM,IAAI,MAAC,OAAO;UAAC,IAAI,EAAEJ,CAAC,CAACG,KAAM;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,EAAG,CACvD;MAET,CAAC,CAAC,CACC;IAET,CAAC;IAED,OACE,MAAC,QAAQ;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACP,MAAC,OAAO;MAAC,IAAI,EAAEP,UAAU,CAACO,KAAM;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAG,CAC1B;EAEf;AACF;AAAC,gBA3CKb,OAAO,eAMQ;EACjBI,QAAQ,EAAEX,SAAS,CAACsB,MAAM,CAACC,UAAU;EACrCjB,aAAa,EAAEN,SAAS,CAACwB,IAAI,CAACD;AAChC,CAAC;AAoCH,OAAO,MAAME,QAAQ,GAAGxB,OAAO,CAC7B,CAACyB,KAAK,EAAEjB,KAAK,MAAM;EACjBE,QAAQ,EAAEF,KAAK,CAACC,QAAQ,CAACC,QAAQ;EACjCgB,OAAO,EAAED,KAAK,CAACC,OAAO,CAACZ;AACzB,CAAC,CAAC,EACF,CAAC,CAAC,CACH,CAACR,OAAO,CAAC;AAEV,eAAeL,OAAO,CACpBC,YAAY,CAAC,CACX;EACEyB,GAAG,EAAE,YAAY;EACjBC,OAAO,EAAE,CAAC;IAAEnB,QAAQ;IAAEoB,KAAK,EAAE;MAAEC;IAAS;EAAE,CAAC,KACzCA,QAAQ,CAACzB,aAAa,CAACD,UAAU,CAACK,QAAQ,CAACC,QAAQ,CAAC,EAAE,GAAG,CAAC;AAC9D,CAAC,CACF,CAAC,EACFV,OAAO,CAAC,CAACyB,KAAK,EAAEjB,KAAK,MAAM;EAAEE,QAAQ,EAAEF,KAAK,CAACC,QAAQ,CAACC;AAAS,CAAC,CAAC,EAAE;EACjEL;AACF,CAAC,CAAC,CACH,CAACC,OAAO,CAAC"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}