{"ast":null,"code":"import _map from \"lodash/map\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-datablocks/src/components/manage/Widgets/SelectProviderPickWidget.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n/**\n * SelectProviderPickWidget component.\n * @module components/manage/Widgets/SelectProviderPickWidget\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { getVocabFromHint, getVocabFromField, getVocabFromItems } from '@plone/volto/helpers';\nimport { FormFieldWrapper } from '@plone/volto/components';\nimport { getVocabulary, getVocabularyTokenTitle } from '@plone/volto/actions';\nimport { customSelectStyles, DropdownIndicator, ClearIndicator, Option, selectTheme, MenuList } from '@plone/volto/components/manage/Widgets/SelectStyling';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nconst messages = defineMessages({\n  default: {\n    \"id\": \"Default\",\n    \"defaultMessage\": \"Default\"\n  },\n  idTitle: {\n    \"id\": \"Short Name\",\n    \"defaultMessage\": \"Short Name\"\n  },\n  idDescription: {\n    \"id\": \"Used for programmatic access to the fieldset.\",\n    \"defaultMessage\": \"Used for programmatic access to the fieldset.\"\n  },\n  title: {\n    \"id\": \"Title\",\n    \"defaultMessage\": \"Title\"\n  },\n  description: {\n    \"id\": \"Description\",\n    \"defaultMessage\": \"Description\"\n  },\n  close: {\n    \"id\": \"Close\",\n    \"defaultMessage\": \"Close\"\n  },\n  choices: {\n    \"id\": \"Choices\",\n    \"defaultMessage\": \"Choices\"\n  },\n  providerChoices: {\n    \"id\": \"Provider Choices\",\n    \"defaultMessage\": \"Choices\"\n  },\n  required: {\n    \"id\": \"Required\",\n    \"defaultMessage\": \"Required\"\n  },\n  select: {\n    \"id\": \"Select\\u2026\",\n    \"defaultMessage\": \"Select\\u2026\"\n  },\n  providerSelect: {\n    \"id\": \"Select provider\",\n    \"defaultMessage\": \"Select provider\"\n  },\n  no_value: {\n    \"id\": \"No value\",\n    \"defaultMessage\": \"No value\"\n  },\n  no_options: {\n    \"id\": \"No options\",\n    \"defaultMessage\": \"No options\"\n  }\n});\n\n/**\n * SelectProviderPickWidget component class.\n * @function SelectProviderPickWidget\n * @returns {string} Markup of the component.\n */\nclass SelectProviderPickWidget extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    var _this$props$choices;\n    if ((!this.props.choices || ((_this$props$choices = this.props.choices) === null || _this$props$choices === void 0 ? void 0 : _this$props$choices.length) === 0) && this.props.vocabBaseUrl) {\n      this.props.getVocabulary({\n        vocabNameOrURL: this.props.vocabBaseUrl,\n        size: -1,\n        subrequest: this.props.intl.locale\n      });\n    }\n  }\n  onChangeValue(selectedOption, type, onChange) {\n    const isMulti = this.props.isMulti ? this.props.isMulti : this.props.id === 'roles' || this.props.id === 'groups';\n    const changeValObjByType = (selectedOption, val, type) => {\n      var joinedVal = {};\n      if (type === 'value') {\n        joinedVal = val ? _objectSpread(_objectSpread({}, val), {}, {\n          value: selectedOption.value\n        }) : {\n          value: selectedOption.value\n        };\n      } else {\n        joinedVal = val ? _objectSpread(_objectSpread({}, val), {}, {\n          provider: selectedOption.value\n        }) : {\n          provider: selectedOption.value\n        };\n      }\n      return joinedVal;\n    };\n    if (isMulti) {\n      return this.props.onChange(this.props.id, selectedOption.map(el => el.value));\n    }\n    return this.props.onChange(this.props.id, selectedOption && selectedOption.value !== 'no-value' ? changeValObjByType(selectedOption, this.props.value, type) : undefined);\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    var _this$props$placehold, _this$props$placehold2;\n    const {\n      id,\n      choices,\n      providerChoices\n    } = this.props;\n\n    // Make sure that both disabled and isDisabled (from the DX layout feat work)\n    const disabled = this.props.disabled || this.props.isDisabled;\n    const Select = this.props.reactSelect.default;\n    let options = this.props.vocabBaseUrl ? this.props.choices : [..._map(choices, option => ({\n      value: option[0],\n      label:\n      // Fix \"None\" on the serializer, to remove when fixed in p.restapi\n      option[1] !== 'None' && option[1] ? option[1] : option[0]\n    })),\n    // Only set \"no-value\" option if there's no default in the field\n    // TODO: also if this.props.defaultValue?\n    ...(this.props.noValueOption && !this.props.default ? [{\n      label: this.props.intl.formatMessage(messages.no_value),\n      value: 'no-value'\n    }] : [])];\n    let providerOptions = this.props.vocabBaseUrl ? this.props.providerChoices : [..._map(providerChoices, option => ({\n      value: option[0],\n      label:\n      // Fix \"None\" on the serializer, to remove when fixed in p.restapi\n      option[1] !== 'None' && option[1] ? option[1] : option[0]\n    })),\n    // Only set \"no-value\" option if there's no default in the field\n    // TODO: also if this.props.defaultValue?\n    ...(this.props.noValueOption && !this.props.default ? [{\n      label: this.props.intl.formatMessage(messages.no_value),\n      value: 'no-value'\n    }] : [])];\n    const isMulti = this.props.isMulti ? this.props.isMulti : id === 'roles' || id === 'groups';\n    return __jsx(FormFieldWrapper, _extends({}, this.props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 7\n      }\n    }), __jsx(Select, {\n      id: `field-${id}`,\n      key: choices,\n      name: id,\n      isDisabled: disabled,\n      isSearchable: true,\n      className: \"react-select-container\",\n      classNamePrefix: \"react-select\",\n      isMulti: isMulti,\n      options: options,\n      styles: customSelectStyles,\n      theme: selectTheme,\n      components: _objectSpread(_objectSpread({}, (options === null || options === void 0 ? void 0 : options.length) > 25 && {\n        MenuList\n      }), {}, {\n        DropdownIndicator,\n        ClearIndicator,\n        Option: this.props.customOptionStyling || Option\n      }),\n      value: this.props.value && this.props.value.value ? {\n        label: this.props.value.value,\n        value: this.props.value.value\n      } : {\n        label: 'No value',\n        value: 'No value'\n      },\n      placeholder: (_this$props$placehold = this.props.placeholder) !== null && _this$props$placehold !== void 0 ? _this$props$placehold : this.props.intl.formatMessage(messages.select),\n      onChange: selectedOption => this.onChangeValue(selectedOption, 'value'),\n      isClearable: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }\n    }), __jsx(Select, {\n      id: `field-${id}`,\n      key: providerChoices,\n      name: id,\n      isDisabled: disabled,\n      isSearchable: true,\n      className: \"react-select-container\",\n      classNamePrefix: \"react-select\",\n      isMulti: isMulti,\n      options: providerOptions,\n      styles: customSelectStyles,\n      theme: selectTheme,\n      components: _objectSpread(_objectSpread({}, (options === null || options === void 0 ? void 0 : options.length) > 25 && {\n        MenuList\n      }), {}, {\n        DropdownIndicator,\n        ClearIndicator,\n        Option: this.props.customOptionStyling || Option\n      }),\n      value: this.props.value && this.props.value.provider ? {\n        label: this.props.value.provider,\n        value: this.props.value.provider\n      } : {\n        label: 'No value',\n        value: 'No value'\n      },\n      placeholder: (_this$props$placehold2 = this.props.placeholder) !== null && _this$props$placehold2 !== void 0 ? _this$props$placehold2 : this.props.intl.formatMessage(messages.providerSelect),\n      onChange: selectedOption => this.onChangeValue(selectedOption, 'provider'),\n      isClearable: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 9\n      }\n    }));\n  }\n}\n_defineProperty(SelectProviderPickWidget, \"propTypes\", {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  required: PropTypes.bool,\n  error: PropTypes.arrayOf(PropTypes.string),\n  getVocabulary: PropTypes.func.isRequired,\n  getVocabularyTokenTitle: PropTypes.func.isRequired,\n  choices: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.object, PropTypes.array])),\n  providerChoices: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.object, PropTypes.array])),\n  items: PropTypes.shape({\n    vocabulary: PropTypes.object\n  }),\n  widgetOptions: PropTypes.shape({\n    vocabulary: PropTypes.object\n  }),\n  value: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.bool, PropTypes.func, PropTypes.array]),\n  onChange: PropTypes.func.isRequired,\n  onBlur: PropTypes.func,\n  onClick: PropTypes.func,\n  onEdit: PropTypes.func,\n  onDelete: PropTypes.func,\n  wrapped: PropTypes.bool,\n  noValueOption: PropTypes.bool,\n  customOptionStyling: PropTypes.any,\n  isMulti: PropTypes.bool\n});\n_defineProperty(SelectProviderPickWidget, \"defaultProps\", {\n  description: null,\n  required: false,\n  items: {\n    vocabulary: null\n  },\n  widgetOptions: {\n    vocabulary: null\n  },\n  error: [],\n  choices: [],\n  providerChoices: [],\n  value: null,\n  onChange: () => {},\n  onBlur: () => {},\n  onClick: () => {},\n  onEdit: null,\n  onDelete: null,\n  noValueOption: true,\n  customOptionStyling: null\n});\nexport const SelectProviderPickWidgetComponent = injectIntl(SelectProviderPickWidget);\nexport default compose(injectLazyLibs(['reactSelect']), connect((state, props) => {\n  var _state$vocabularies, _state$vocabularies$v, _state$vocabularies$v2;\n  const vocabBaseUrl = !props.choices ? getVocabFromHint(props) || getVocabFromField(props) || getVocabFromItems(props) : '';\n  const vocabState = (_state$vocabularies = state.vocabularies) === null || _state$vocabularies === void 0 ? void 0 : (_state$vocabularies$v = _state$vocabularies[vocabBaseUrl]) === null || _state$vocabularies$v === void 0 ? void 0 : (_state$vocabularies$v2 = _state$vocabularies$v.subrequests) === null || _state$vocabularies$v2 === void 0 ? void 0 : _state$vocabularies$v2[props.intl.locale];\n\n  // If the schema already has the choices in it, then do not try to get the vocab,\n  // even if there is one\n  if (props.choices) {\n    return {\n      choices: props.choices\n    };\n  } else if (vocabState) {\n    var _vocabState$items;\n    return {\n      vocabBaseUrl,\n      choices: (_vocabState$items = vocabState === null || vocabState === void 0 ? void 0 : vocabState.items) !== null && _vocabState$items !== void 0 ? _vocabState$items : []\n    };\n    // There is a moment that vocabState is not there yet, so we need to pass the\n    // vocabBaseUrl to the component.\n  } else if (vocabBaseUrl) {\n    return {\n      vocabBaseUrl\n    };\n  }\n  return {};\n}, {\n  getVocabulary,\n  getVocabularyTokenTitle\n}))(SelectProviderPickWidgetComponent);","map":{"version":3,"names":["React","Component","PropTypes","connect","compose","defineMessages","injectIntl","getVocabFromHint","getVocabFromField","getVocabFromItems","FormFieldWrapper","getVocabulary","getVocabularyTokenTitle","customSelectStyles","DropdownIndicator","ClearIndicator","Option","selectTheme","MenuList","injectLazyLibs","messages","default","idTitle","idDescription","title","description","close","choices","providerChoices","required","select","providerSelect","no_value","no_options","SelectProviderPickWidget","componentDidMount","props","length","vocabBaseUrl","vocabNameOrURL","size","subrequest","intl","locale","onChangeValue","selectedOption","type","onChange","isMulti","id","changeValObjByType","val","joinedVal","value","provider","map","el","undefined","render","disabled","isDisabled","Select","reactSelect","options","option","label","noValueOption","formatMessage","providerOptions","customOptionStyling","placeholder","string","isRequired","bool","error","arrayOf","func","oneOfType","object","array","items","shape","vocabulary","widgetOptions","onBlur","onClick","onEdit","onDelete","wrapped","any","SelectProviderPickWidgetComponent","state","vocabState","vocabularies","subrequests"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-datablocks/src/components/manage/Widgets/SelectProviderPickWidget.jsx"],"sourcesContent":["/**\n * SelectProviderPickWidget component.\n * @module components/manage/Widgets/SelectProviderPickWidget\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { map } from 'lodash';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport {\n  getVocabFromHint,\n  getVocabFromField,\n  getVocabFromItems,\n} from '@plone/volto/helpers';\nimport { FormFieldWrapper } from '@plone/volto/components';\nimport { getVocabulary, getVocabularyTokenTitle } from '@plone/volto/actions';\n\nimport {\n  customSelectStyles,\n  DropdownIndicator,\n  ClearIndicator,\n  Option,\n  selectTheme,\n  MenuList,\n} from '@plone/volto/components/manage/Widgets/SelectStyling';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\n\nconst messages = defineMessages({\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  idTitle: {\n    id: 'Short Name',\n    defaultMessage: 'Short Name',\n  },\n  idDescription: {\n    id: 'Used for programmatic access to the fieldset.',\n    defaultMessage: 'Used for programmatic access to the fieldset.',\n  },\n  title: {\n    id: 'Title',\n    defaultMessage: 'Title',\n  },\n  description: {\n    id: 'Description',\n    defaultMessage: 'Description',\n  },\n  close: {\n    id: 'Close',\n    defaultMessage: 'Close',\n  },\n  choices: {\n    id: 'Choices',\n    defaultMessage: 'Choices',\n  },\n  providerChoices: {\n    id: 'Provider Choices',\n    defaultMessage: 'Choices',\n  },\n\n  required: {\n    id: 'Required',\n    defaultMessage: 'Required',\n  },\n  select: {\n    id: 'Select…',\n    defaultMessage: 'Select…',\n  },\n  providerSelect: {\n    id: 'Select provider',\n    defaultMessage: 'Select provider',\n  },\n  no_value: {\n    id: 'No value',\n    defaultMessage: 'No value',\n  },\n  no_options: {\n    id: 'No options',\n    defaultMessage: 'No options',\n  },\n});\n\n/**\n * SelectProviderPickWidget component class.\n * @function SelectProviderPickWidget\n * @returns {string} Markup of the component.\n */\nclass SelectProviderPickWidget extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string,\n    required: PropTypes.bool,\n    error: PropTypes.arrayOf(PropTypes.string),\n    getVocabulary: PropTypes.func.isRequired,\n    getVocabularyTokenTitle: PropTypes.func.isRequired,\n    choices: PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    ),\n    providerChoices: PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    ),\n    items: PropTypes.shape({\n      vocabulary: PropTypes.object,\n    }),\n    widgetOptions: PropTypes.shape({\n      vocabulary: PropTypes.object,\n    }),\n    value: PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.string,\n      PropTypes.bool,\n      PropTypes.func,\n      PropTypes.array,\n    ]),\n    onChange: PropTypes.func.isRequired,\n    onBlur: PropTypes.func,\n    onClick: PropTypes.func,\n    onEdit: PropTypes.func,\n    onDelete: PropTypes.func,\n    wrapped: PropTypes.bool,\n    noValueOption: PropTypes.bool,\n    customOptionStyling: PropTypes.any,\n    isMulti: PropTypes.bool,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    description: null,\n    required: false,\n    items: {\n      vocabulary: null,\n    },\n    widgetOptions: {\n      vocabulary: null,\n    },\n    error: [],\n    choices: [],\n    providerChoices: [],\n    value: null,\n    onChange: () => {},\n    onBlur: () => {},\n    onClick: () => {},\n    onEdit: null,\n    onDelete: null,\n    noValueOption: true,\n    customOptionStyling: null,\n  };\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    if (\n      (!this.props.choices || this.props.choices?.length === 0) &&\n      this.props.vocabBaseUrl\n    ) {\n      this.props.getVocabulary({\n        vocabNameOrURL: this.props.vocabBaseUrl,\n        size: -1,\n        subrequest: this.props.intl.locale,\n      });\n    }\n  }\n\n  onChangeValue(selectedOption, type, onChange) {\n    const isMulti = this.props.isMulti\n      ? this.props.isMulti\n      : this.props.id === 'roles' || this.props.id === 'groups';\n\n    const changeValObjByType = (selectedOption, val, type) => {\n      var joinedVal = {};\n      if (type === 'value') {\n        joinedVal = val\n          ? { ...val, value: selectedOption.value }\n          : { value: selectedOption.value };\n      } else {\n        joinedVal = val\n          ? { ...val, provider: selectedOption.value }\n          : { provider: selectedOption.value };\n      }\n      return joinedVal;\n    };\n\n    if (isMulti) {\n      return this.props.onChange(\n        this.props.id,\n        selectedOption.map((el) => el.value),\n      );\n    }\n    return this.props.onChange(\n      this.props.id,\n      selectedOption && selectedOption.value !== 'no-value'\n        ? changeValObjByType(selectedOption, this.props.value, type)\n        : undefined,\n    );\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { id, choices, providerChoices } = this.props;\n\n    // Make sure that both disabled and isDisabled (from the DX layout feat work)\n    const disabled = this.props.disabled || this.props.isDisabled;\n    const Select = this.props.reactSelect.default;\n\n    let options = this.props.vocabBaseUrl\n      ? this.props.choices\n      : [\n          ...map(choices, (option) => ({\n            value: option[0],\n            label:\n              // Fix \"None\" on the serializer, to remove when fixed in p.restapi\n              option[1] !== 'None' && option[1] ? option[1] : option[0],\n          })),\n          // Only set \"no-value\" option if there's no default in the field\n          // TODO: also if this.props.defaultValue?\n          ...(this.props.noValueOption && !this.props.default\n            ? [\n                {\n                  label: this.props.intl.formatMessage(messages.no_value),\n                  value: 'no-value',\n                },\n              ]\n            : []),\n        ];\n\n    let providerOptions = this.props.vocabBaseUrl\n      ? this.props.providerChoices\n      : [\n          ...map(providerChoices, (option) => ({\n            value: option[0],\n            label:\n              // Fix \"None\" on the serializer, to remove when fixed in p.restapi\n              option[1] !== 'None' && option[1] ? option[1] : option[0],\n          })),\n          // Only set \"no-value\" option if there's no default in the field\n          // TODO: also if this.props.defaultValue?\n          ...(this.props.noValueOption && !this.props.default\n            ? [\n                {\n                  label: this.props.intl.formatMessage(messages.no_value),\n                  value: 'no-value',\n                },\n              ]\n            : []),\n        ];\n\n    const isMulti = this.props.isMulti\n      ? this.props.isMulti\n      : id === 'roles' || id === 'groups';\n\n    return (\n      <FormFieldWrapper {...this.props}>\n        <Select\n          id={`field-${id}`}\n          key={choices}\n          name={id}\n          isDisabled={disabled}\n          isSearchable={true}\n          className=\"react-select-container\"\n          classNamePrefix=\"react-select\"\n          isMulti={isMulti}\n          options={options}\n          styles={customSelectStyles}\n          theme={selectTheme}\n          components={{\n            ...(options?.length > 25 && {\n              MenuList,\n            }),\n            DropdownIndicator,\n            ClearIndicator,\n            Option: this.props.customOptionStyling || Option,\n          }}\n          value={\n            this.props.value && this.props.value.value\n              ? {\n                  label: this.props.value.value,\n                  value: this.props.value.value,\n                }\n              : {\n                  label: 'No value',\n                  value: 'No value',\n                }\n          }\n          placeholder={\n            this.props.placeholder ??\n            this.props.intl.formatMessage(messages.select)\n          }\n          onChange={(selectedOption) =>\n            this.onChangeValue(selectedOption, 'value')\n          }\n          isClearable\n        />\n\n        <Select\n          id={`field-${id}`}\n          key={providerChoices}\n          name={id}\n          isDisabled={disabled}\n          isSearchable={true}\n          className=\"react-select-container\"\n          classNamePrefix=\"react-select\"\n          isMulti={isMulti}\n          options={providerOptions}\n          styles={customSelectStyles}\n          theme={selectTheme}\n          components={{\n            ...(options?.length > 25 && {\n              MenuList,\n            }),\n            DropdownIndicator,\n            ClearIndicator,\n            Option: this.props.customOptionStyling || Option,\n          }}\n          value={\n            this.props.value && this.props.value.provider\n              ? {\n                  label: this.props.value.provider,\n                  value: this.props.value.provider,\n                }\n              : {\n                  label: 'No value',\n                  value: 'No value',\n                }\n          }\n          placeholder={\n            this.props.placeholder ??\n            this.props.intl.formatMessage(messages.providerSelect)\n          }\n          onChange={(selectedOption) =>\n            this.onChangeValue(selectedOption, 'provider')\n          }\n          isClearable\n        />\n      </FormFieldWrapper>\n    );\n  }\n}\n\nexport const SelectProviderPickWidgetComponent = injectIntl(\n  SelectProviderPickWidget,\n);\n\nexport default compose(\n  injectLazyLibs(['reactSelect']),\n  connect(\n    (state, props) => {\n      const vocabBaseUrl = !props.choices\n        ? getVocabFromHint(props) ||\n          getVocabFromField(props) ||\n          getVocabFromItems(props)\n        : '';\n\n      const vocabState =\n        state.vocabularies?.[vocabBaseUrl]?.subrequests?.[props.intl.locale];\n\n      // If the schema already has the choices in it, then do not try to get the vocab,\n      // even if there is one\n      if (props.choices) {\n        return {\n          choices: props.choices,\n        };\n      } else if (vocabState) {\n        return {\n          vocabBaseUrl,\n          choices: vocabState?.items ?? [],\n        };\n        // There is a moment that vocabState is not there yet, so we need to pass the\n        // vocabBaseUrl to the component.\n      } else if (vocabBaseUrl) {\n        return {\n          vocabBaseUrl,\n        };\n      }\n      return {};\n    },\n    { getVocabulary, getVocabularyTokenTitle },\n  ),\n)(SelectProviderPickWidgetComponent);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Default","defaultMessage":"Default"},{"id":"Short Name","defaultMessage":"Short Name"},{"id":"Used for programmatic access to the fieldset.","defaultMessage":"Used for programmatic access to the fieldset."},{"id":"Title","defaultMessage":"Title"},{"id":"Description","defaultMessage":"Description"},{"id":"Close","defaultMessage":"Close"},{"id":"Choices","defaultMessage":"Choices"},{"id":"Provider Choices","defaultMessage":"Choices"},{"id":"Required","defaultMessage":"Required"},{"id":"Select…","defaultMessage":"Select…"},{"id":"Select provider","defaultMessage":"Select provider"},{"id":"No value","defaultMessage":"No value"},{"id":"No options","defaultMessage":"No options"}]}},"sourceType":"module","externalDependencies":[]}