{"ast":null,"code":"import _objectWithoutProperties from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _slicedToArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toPairs from \"lodash/toPairs\";\nimport _keys from \"lodash/keys\";\nimport _isObject from \"lodash/isObject\";\nimport _find from \"lodash/find\";\nimport _endsWith from \"lodash/endsWith\";\nimport _without from \"lodash/without\";\nimport _omit from \"lodash/omit\";\nvar _excluded = [\"data\", \"intl\"];\nimport move from 'lodash-move';\nimport { v4 as uuid } from 'uuid';\nimport config from '@plone/volto/registry';\nimport { applySchemaEnhancer } from '@plone/volto/helpers';\n\n/**\n * Get blocks field.\n * @function getBlocksFieldname\n * @param {Object} props Properties.\n * @return {string} Field name of the blocks\n */\nexport function getBlocksFieldname(props) {\n  return _find(_keys(props), function (key) {\n    return key !== 'volto.blocks' && _endsWith(key, 'blocks');\n  }) || null;\n}\n\n/**\n * Get blocks layout field.\n * @function getBlocksLayoutFieldname\n * @param {Object} props Properties.\n * @return {string} Field name of the blocks layout\n */\nexport function getBlocksLayoutFieldname(props) {\n  return _find(_keys(props), function (key) {\n    return key !== 'volto.blocks' && _endsWith(key, 'blocks_layout');\n  }) || null;\n}\n\n/**\n * Has blocks data.\n * @function hasBlocksData\n * @param {Object} props Properties.\n * @return {boolean} True if it has blocks data.\n */\nexport function hasBlocksData(props) {\n  return _find(_keys(props), function (key) {\n    return key !== 'volto.blocks' && _endsWith(key, 'blocks');\n  }) !== undefined;\n}\n\n/**\n * Pluggable method to test if a block has a set value (any non-empty value)\n * @function blockHasValue\n * @param {Object} data Block data\n * @return {boolean} True if block has a non-empty value\n */\nexport function blockHasValue(data) {\n  var _blocks$blocksConfig$;\n  var blocks = config.blocks;\n  var blockType = data['@type'];\n  var check = (_blocks$blocksConfig$ = blocks.blocksConfig[blockType]) === null || _blocks$blocksConfig$ === void 0 ? void 0 : _blocks$blocksConfig$.blockHasValue;\n  if (!check) {\n    return true;\n  }\n  return check(data);\n}\n\n/**\n * Get block pairs of [id, block] from content properties\n * @function getBlocks\n * @param {Object} properties\n * @return {Array} a list of block [id, value] pairs, in order from layout\n */\nexport var getBlocks = function getBlocks(properties) {\n  var _properties$blocksLay, _properties$blocksLay2;\n  var blocksFieldName = getBlocksFieldname(properties);\n  var blocksLayoutFieldname = getBlocksLayoutFieldname(properties);\n  return ((_properties$blocksLay = properties[blocksLayoutFieldname]) === null || _properties$blocksLay === void 0 ? void 0 : (_properties$blocksLay2 = _properties$blocksLay.items) === null || _properties$blocksLay2 === void 0 ? void 0 : _properties$blocksLay2.map(function (n) {\n    return [n, properties[blocksFieldName][n]];\n  })) || [];\n};\n\n/**\n * Move block to different location index within blocks_layout\n * @function moveBlock\n * @param {Object} formData Form data\n * @param {number} source index within form blocks_layout items\n * @param {number} destination index within form blocks_layout items\n * @return {Object} New form data\n */\nexport function moveBlock(formData, source, destination) {\n  var blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n  return _objectSpread(_objectSpread({}, formData), {}, _defineProperty({}, blocksLayoutFieldname, {\n    items: move(formData[blocksLayoutFieldname].items, source, destination)\n  }));\n}\n\n/**\n * Delete block by id\n * @function deleteBlock\n * @param {Object} formData Form data\n * @param {string} blockId Block uid\n * @return {Object} New form data\n */\nexport function deleteBlock(formData, blockId) {\n  var _objectSpread3;\n  var blocksFieldname = getBlocksFieldname(formData);\n  var blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n  var newFormData = _objectSpread(_objectSpread({}, formData), {}, (_objectSpread3 = {}, _defineProperty(_objectSpread3, blocksLayoutFieldname, {\n    items: _without(formData[blocksLayoutFieldname].items, blockId)\n  }), _defineProperty(_objectSpread3, blocksFieldname, _omit(formData[blocksFieldname], [blockId])), _objectSpread3));\n  if (newFormData[blocksLayoutFieldname].items.length === 0) {\n    newFormData = addBlock(newFormData, config.settings.defaultBlockType, 0);\n  }\n  return newFormData;\n}\n\n/**\n * Add block\n * @function addBlock\n * @param {Object} formData Form data\n * @param {string} type Block type\n * @param {number} index Destination index\n * @return {Array} New block id, New form data\n */\nexport function addBlock(formData, type, index) {\n  var _objectSpread5;\n  var settings = config.settings;\n  var id = uuid();\n  var idTrailingBlock = uuid();\n  var blocksFieldname = getBlocksFieldname(formData);\n  var blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n  var totalItems = formData[blocksLayoutFieldname].items.length;\n  var insert = index === -1 ? totalItems : index;\n  return [id, _objectSpread(_objectSpread({}, formData), {}, (_objectSpread5 = {}, _defineProperty(_objectSpread5, blocksLayoutFieldname, {\n    items: [].concat(_toConsumableArray(formData[blocksLayoutFieldname].items.slice(0, insert)), [id], _toConsumableArray(type !== settings.defaultBlockType ? [idTrailingBlock] : []), _toConsumableArray(formData[blocksLayoutFieldname].items.slice(insert)))\n  }), _defineProperty(_objectSpread5, blocksFieldname, _objectSpread(_objectSpread({}, formData[blocksFieldname]), {}, _defineProperty({}, id, {\n    '@type': type\n  }), type !== settings.defaultBlockType && _defineProperty({}, idTrailingBlock, {\n    '@type': settings.defaultBlockType\n  }))), _defineProperty(_objectSpread5, \"selected\", id), _objectSpread5))];\n}\n\n/**\n * Mutate block\n * @function mutateBlock\n * @param {Object} formData Form data\n * @param {string} id Block uid to mutate\n * @param {number} value Block's new value\n * @return {Object} New form data\n */\nexport function mutateBlock(formData, id, value) {\n  var _objectSpread8, _objectSpread9;\n  var settings = config.settings;\n  var blocksFieldname = getBlocksFieldname(formData);\n  var blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n  var index = formData[blocksLayoutFieldname].items.indexOf(id) + 1;\n\n  // Test if block at index is already a placeholder (trailing) block\n  var trailId = formData[blocksLayoutFieldname].items[index];\n  if (trailId) {\n    var block = formData[blocksFieldname][trailId];\n    if (!blockHasValue(block)) {\n      return _objectSpread(_objectSpread({}, formData), {}, _defineProperty({}, blocksFieldname, _objectSpread(_objectSpread({}, formData[blocksFieldname]), {}, _defineProperty({}, id, value || null))));\n    }\n  }\n  var idTrailingBlock = uuid();\n  return _objectSpread(_objectSpread({}, formData), {}, (_objectSpread9 = {}, _defineProperty(_objectSpread9, blocksFieldname, _objectSpread(_objectSpread({}, formData[blocksFieldname]), {}, (_objectSpread8 = {}, _defineProperty(_objectSpread8, id, value || null), _defineProperty(_objectSpread8, idTrailingBlock, {\n    '@type': settings.defaultBlockType\n  }), _objectSpread8))), _defineProperty(_objectSpread9, blocksLayoutFieldname, {\n    items: [].concat(_toConsumableArray(formData[blocksLayoutFieldname].items.slice(0, index)), [idTrailingBlock], _toConsumableArray(formData[blocksLayoutFieldname].items.slice(index)))\n  }), _objectSpread9));\n}\n\n/**\n * Insert new block before another block\n * @function insertBlock\n * @param {Object} formData Form data\n * @param {string} id Insert new block before the block with this id\n * @param {number} value New block's value\n * @return {Array} New block id, New form data\n */\nexport function insertBlock(formData, id, value) {\n  var _objectSpread10, _objectSpread11;\n  var current = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var blocksFieldname = getBlocksFieldname(formData);\n  var blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n  var index = formData[blocksLayoutFieldname].items.indexOf(id);\n  var newBlockId = uuid();\n  return [newBlockId, _objectSpread(_objectSpread({}, formData), {}, (_objectSpread11 = {}, _defineProperty(_objectSpread11, blocksFieldname, _objectSpread(_objectSpread({}, formData[blocksFieldname]), {}, (_objectSpread10 = {}, _defineProperty(_objectSpread10, newBlockId, value || null), _defineProperty(_objectSpread10, id, _objectSpread(_objectSpread({}, formData[blocksFieldname][id]), current)), _objectSpread10))), _defineProperty(_objectSpread11, blocksLayoutFieldname, {\n    items: [].concat(_toConsumableArray(formData[blocksLayoutFieldname].items.slice(0, index)), [newBlockId], _toConsumableArray(formData[blocksLayoutFieldname].items.slice(index)))\n  }), _objectSpread11))];\n}\n\n/**\n * Change block\n * @function changeBlock\n * @param {Object} formData Form data\n * @param {string} id Block uid to change\n * @param {number} value Block's new value\n * @return {Object} New form data\n */\nexport function changeBlock(formData, id, value) {\n  var blocksFieldname = getBlocksFieldname(formData);\n  return _objectSpread(_objectSpread({}, formData), {}, _defineProperty({}, blocksFieldname, _objectSpread(_objectSpread({}, formData[blocksFieldname]), {}, _defineProperty({}, id, value || null))));\n}\n\n/**\n * Get the next block UID within form\n * @function nextBlockId\n * @param {Object} formData Form data\n * @param {string} currentBlock Block uid\n * @return {string} Next block uid\n */\nexport function nextBlockId(formData, currentBlock) {\n  var blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n  var currentIndex = formData[blocksLayoutFieldname].items.indexOf(currentBlock);\n  if (currentIndex === formData[blocksLayoutFieldname].items.length - 1) {\n    // We are already at the bottom block don't do anything\n    return null;\n  }\n  var newIndex = currentIndex + 1;\n  return formData[blocksLayoutFieldname].items[newIndex];\n}\n\n/**\n * Get the previous block UID within form\n * @function previousBlockId\n * @param {Object} formData Form data\n * @param {string} currentBlock Block uid\n * @return {string} Previous block uid\n */\nexport function previousBlockId(formData, currentBlock) {\n  var blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n  var currentIndex = formData[blocksLayoutFieldname].items.indexOf(currentBlock);\n  if (currentIndex === 0) {\n    // We are already at the top block don't do anything\n    return null;\n  }\n  var newindex = currentIndex - 1;\n  return formData[blocksLayoutFieldname].items[newindex];\n}\n\n/**\n * Generate empty block form\n * @function emptyBlocksForm\n * @param {Object} formData Form data\n * @return {Object} Empty blocks form with one defaultBlockType block\n */\nexport function emptyBlocksForm() {\n  var settings = config.settings;\n  var id = uuid();\n  return {\n    blocks: _defineProperty({}, id, {\n      '@type': settings.defaultBlockType\n    }),\n    blocks_layout: {\n      items: [id]\n    }\n  };\n}\n\n/**\n * Recursively discover blocks in data and call the provided callback\n * @function visitBlocks\n * @param {Object} content A content data structure (an object with blocks and blocks_layout)\n * @param {Function} callback A function to call on each discovered block\n */\nexport function visitBlocks(content, callback) {\n  var queue = getBlocks(content);\n  while (queue.length > 0) {\n    var _queue$shift = queue.shift(),\n      _queue$shift2 = _slicedToArray(_queue$shift, 2),\n      id = _queue$shift2[0],\n      blockdata = _queue$shift2[1];\n    callback([id, blockdata]);\n\n    // assumes that a block value is like: {blocks, blocks_layout} or\n    // { data: {blocks, blocks_layout}}\n    if (Object.keys(blockdata || {}).indexOf('blocks') > -1) {\n      queue.push.apply(queue, _toConsumableArray(getBlocks(blockdata)));\n    }\n    if (Object.keys((blockdata === null || blockdata === void 0 ? void 0 : blockdata.data) || {}).indexOf('blocks') > -1) {\n      queue.push.apply(queue, _toConsumableArray(getBlocks(blockdata.data)));\n    }\n  }\n}\n\n/**\n * Initializes data with the default values coming from schema\n */\nexport function applySchemaDefaults(_ref2) {\n  var _ref2$data = _ref2.data,\n    data = _ref2$data === void 0 ? {} : _ref2$data,\n    schema = _ref2.schema;\n  var derivedData = _objectSpread(_objectSpread({}, Object.keys(schema.properties).reduce(function (accumulator, currentField) {\n    return schema.properties[currentField][\"default\"] ? _objectSpread(_objectSpread({}, accumulator), {}, _defineProperty({}, currentField, schema.properties[currentField][\"default\"])) : accumulator;\n  }, {})), data);\n  return derivedData;\n}\n\n/**\n * Apply the block's default (as defined in schema) to the block data.\n *\n * @function applyBlockDefaults\n * @param {Object} params An object with data, intl and anything else\n * @return {Object} Derived data, with the defaults extracted from the schema\n */\nexport function applyBlockDefaults(_ref3, blocksConfig) {\n  var data = _ref3.data,\n    intl = _ref3.intl,\n    rest = _objectWithoutProperties(_ref3, _excluded);\n  var block_type = data['@type'];\n  var _ref4 = (blocksConfig || config.blocks.blocksConfig)[block_type] || {},\n    blockSchema = _ref4.blockSchema;\n  if (!blockSchema) return data;\n  var schema = typeof blockSchema === 'function' ? blockSchema(_objectSpread({\n    data: data,\n    intl: intl\n  }, rest)) : blockSchema;\n  schema = applySchemaEnhancer({\n    schema: schema,\n    formData: data,\n    intl: intl\n  });\n  return applySchemaDefaults({\n    data: data,\n    schema: schema\n  });\n}\nexport var buildStyleClassNamesFromData = function buildStyleClassNamesFromData(styles) {\n  // styles has the form\n  // const styles = {\n  // color: 'red',\n  // backgroundColor: '#AABBCC',\n  // }\n  // Returns: ['has--color--red', 'has--backgroundColor--AABBCC']\n  var styleArray = [];\n  var pairedStyles = _toPairs(styles);\n  pairedStyles.forEach(function (item) {\n    if (_isObject(item[1])) {\n      var flattenedNestedStyles = _toPairs(item[1]).map(function (nested) {\n        return [item[0]].concat(_toConsumableArray(nested));\n      });\n      flattenedNestedStyles.forEach(function (sub) {\n        return styleArray.push(sub);\n      });\n    } else {\n      styleArray.push(item);\n    }\n  });\n  return styleArray.map(function (item) {\n    var classname = item.map(function (item) {\n      var str_item = item ? item.toString() : '';\n      return str_item && str_item.startsWith('#') ? str_item.replace('#', '') : str_item;\n    });\n    return \"has--\".concat(classname[0], \"--\").concat(classname[1]).concat(classname[2] ? \"--\".concat(classname[2]) : '');\n  });\n};","map":{"version":3,"names":["move","v4","uuid","config","applySchemaEnhancer","getBlocksFieldname","props","key","getBlocksLayoutFieldname","hasBlocksData","undefined","blockHasValue","data","blocks","blockType","check","blocksConfig","getBlocks","properties","blocksFieldName","blocksLayoutFieldname","items","map","n","moveBlock","formData","source","destination","deleteBlock","blockId","blocksFieldname","newFormData","length","addBlock","settings","defaultBlockType","type","index","id","idTrailingBlock","totalItems","insert","slice","mutateBlock","value","indexOf","trailId","block","insertBlock","current","newBlockId","changeBlock","nextBlockId","currentBlock","currentIndex","newIndex","previousBlockId","newindex","emptyBlocksForm","blocks_layout","visitBlocks","content","callback","queue","shift","blockdata","Object","keys","push","applySchemaDefaults","schema","derivedData","reduce","accumulator","currentField","applyBlockDefaults","intl","rest","block_type","blockSchema","buildStyleClassNamesFromData","styles","styleArray","pairedStyles","forEach","item","flattenedNestedStyles","nested","sub","classname","str_item","toString","startsWith","replace"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/helpers/Blocks/Blocks.js"],"sourcesContent":["/**\n * Blocks helper.\n * @module helpers/Blocks\n */\n\nimport { omit, without, endsWith, find, isObject, keys, toPairs } from 'lodash';\nimport move from 'lodash-move';\nimport { v4 as uuid } from 'uuid';\nimport config from '@plone/volto/registry';\nimport { applySchemaEnhancer } from '@plone/volto/helpers';\n\n/**\n * Get blocks field.\n * @function getBlocksFieldname\n * @param {Object} props Properties.\n * @return {string} Field name of the blocks\n */\nexport function getBlocksFieldname(props) {\n  return (\n    find(\n      keys(props),\n      (key) => key !== 'volto.blocks' && endsWith(key, 'blocks'),\n    ) || null\n  );\n}\n\n/**\n * Get blocks layout field.\n * @function getBlocksLayoutFieldname\n * @param {Object} props Properties.\n * @return {string} Field name of the blocks layout\n */\nexport function getBlocksLayoutFieldname(props) {\n  return (\n    find(\n      keys(props),\n      (key) => key !== 'volto.blocks' && endsWith(key, 'blocks_layout'),\n    ) || null\n  );\n}\n\n/**\n * Has blocks data.\n * @function hasBlocksData\n * @param {Object} props Properties.\n * @return {boolean} True if it has blocks data.\n */\nexport function hasBlocksData(props) {\n  return (\n    find(\n      keys(props),\n      (key) => key !== 'volto.blocks' && endsWith(key, 'blocks'),\n    ) !== undefined\n  );\n}\n\n/**\n * Pluggable method to test if a block has a set value (any non-empty value)\n * @function blockHasValue\n * @param {Object} data Block data\n * @return {boolean} True if block has a non-empty value\n */\nexport function blockHasValue(data) {\n  const { blocks } = config;\n  const blockType = data['@type'];\n  const check = blocks.blocksConfig[blockType]?.blockHasValue;\n  if (!check) {\n    return true;\n  }\n  return check(data);\n}\n\n/**\n * Get block pairs of [id, block] from content properties\n * @function getBlocks\n * @param {Object} properties\n * @return {Array} a list of block [id, value] pairs, in order from layout\n */\nexport const getBlocks = (properties) => {\n  const blocksFieldName = getBlocksFieldname(properties);\n  const blocksLayoutFieldname = getBlocksLayoutFieldname(properties);\n  return (\n    properties[blocksLayoutFieldname]?.items?.map((n) => [\n      n,\n      properties[blocksFieldName][n],\n    ]) || []\n  );\n};\n\n/**\n * Move block to different location index within blocks_layout\n * @function moveBlock\n * @param {Object} formData Form data\n * @param {number} source index within form blocks_layout items\n * @param {number} destination index within form blocks_layout items\n * @return {Object} New form data\n */\nexport function moveBlock(formData, source, destination) {\n  const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n  return {\n    ...formData,\n    [blocksLayoutFieldname]: {\n      items: move(formData[blocksLayoutFieldname].items, source, destination),\n    },\n  };\n}\n\n/**\n * Delete block by id\n * @function deleteBlock\n * @param {Object} formData Form data\n * @param {string} blockId Block uid\n * @return {Object} New form data\n */\nexport function deleteBlock(formData, blockId) {\n  const blocksFieldname = getBlocksFieldname(formData);\n  const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n\n  let newFormData = {\n    ...formData,\n    [blocksLayoutFieldname]: {\n      items: without(formData[blocksLayoutFieldname].items, blockId),\n    },\n    [blocksFieldname]: omit(formData[blocksFieldname], [blockId]),\n  };\n\n  if (newFormData[blocksLayoutFieldname].items.length === 0) {\n    newFormData = addBlock(newFormData, config.settings.defaultBlockType, 0);\n  }\n\n  return newFormData;\n}\n\n/**\n * Add block\n * @function addBlock\n * @param {Object} formData Form data\n * @param {string} type Block type\n * @param {number} index Destination index\n * @return {Array} New block id, New form data\n */\nexport function addBlock(formData, type, index) {\n  const { settings } = config;\n  const id = uuid();\n  const idTrailingBlock = uuid();\n  const blocksFieldname = getBlocksFieldname(formData);\n  const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n  const totalItems = formData[blocksLayoutFieldname].items.length;\n  const insert = index === -1 ? totalItems : index;\n\n  return [\n    id,\n    {\n      ...formData,\n      [blocksLayoutFieldname]: {\n        items: [\n          ...formData[blocksLayoutFieldname].items.slice(0, insert),\n          id,\n          ...(type !== settings.defaultBlockType ? [idTrailingBlock] : []),\n          ...formData[blocksLayoutFieldname].items.slice(insert),\n        ],\n      },\n      [blocksFieldname]: {\n        ...formData[blocksFieldname],\n        [id]: {\n          '@type': type,\n        },\n        ...(type !== settings.defaultBlockType && {\n          [idTrailingBlock]: {\n            '@type': settings.defaultBlockType,\n          },\n        }),\n      },\n      selected: id,\n    },\n  ];\n}\n\n/**\n * Mutate block\n * @function mutateBlock\n * @param {Object} formData Form data\n * @param {string} id Block uid to mutate\n * @param {number} value Block's new value\n * @return {Object} New form data\n */\nexport function mutateBlock(formData, id, value) {\n  const { settings } = config;\n  const blocksFieldname = getBlocksFieldname(formData);\n  const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n  const index = formData[blocksLayoutFieldname].items.indexOf(id) + 1;\n\n  // Test if block at index is already a placeholder (trailing) block\n  const trailId = formData[blocksLayoutFieldname].items[index];\n  if (trailId) {\n    const block = formData[blocksFieldname][trailId];\n    if (!blockHasValue(block)) {\n      return {\n        ...formData,\n        [blocksFieldname]: {\n          ...formData[blocksFieldname],\n          [id]: value || null,\n        },\n      };\n    }\n  }\n\n  const idTrailingBlock = uuid();\n  return {\n    ...formData,\n    [blocksFieldname]: {\n      ...formData[blocksFieldname],\n      [id]: value || null,\n      [idTrailingBlock]: {\n        '@type': settings.defaultBlockType,\n      },\n    },\n    [blocksLayoutFieldname]: {\n      items: [\n        ...formData[blocksLayoutFieldname].items.slice(0, index),\n        idTrailingBlock,\n        ...formData[blocksLayoutFieldname].items.slice(index),\n      ],\n    },\n  };\n}\n\n/**\n * Insert new block before another block\n * @function insertBlock\n * @param {Object} formData Form data\n * @param {string} id Insert new block before the block with this id\n * @param {number} value New block's value\n * @return {Array} New block id, New form data\n */\nexport function insertBlock(formData, id, value, current = {}) {\n  const blocksFieldname = getBlocksFieldname(formData);\n  const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n  const index = formData[blocksLayoutFieldname].items.indexOf(id);\n\n  const newBlockId = uuid();\n  return [\n    newBlockId,\n    {\n      ...formData,\n      [blocksFieldname]: {\n        ...formData[blocksFieldname],\n        [newBlockId]: value || null,\n        [id]: {\n          ...formData[blocksFieldname][id],\n          ...current,\n        },\n      },\n      [blocksLayoutFieldname]: {\n        items: [\n          ...formData[blocksLayoutFieldname].items.slice(0, index),\n          newBlockId,\n          ...formData[blocksLayoutFieldname].items.slice(index),\n        ],\n      },\n    },\n  ];\n}\n\n/**\n * Change block\n * @function changeBlock\n * @param {Object} formData Form data\n * @param {string} id Block uid to change\n * @param {number} value Block's new value\n * @return {Object} New form data\n */\nexport function changeBlock(formData, id, value) {\n  const blocksFieldname = getBlocksFieldname(formData);\n  return {\n    ...formData,\n    [blocksFieldname]: {\n      ...formData[blocksFieldname],\n      [id]: value || null,\n    },\n  };\n}\n\n/**\n * Get the next block UID within form\n * @function nextBlockId\n * @param {Object} formData Form data\n * @param {string} currentBlock Block uid\n * @return {string} Next block uid\n */\nexport function nextBlockId(formData, currentBlock) {\n  const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n  const currentIndex = formData[blocksLayoutFieldname].items.indexOf(\n    currentBlock,\n  );\n\n  if (currentIndex === formData[blocksLayoutFieldname].items.length - 1) {\n    // We are already at the bottom block don't do anything\n    return null;\n  }\n\n  const newIndex = currentIndex + 1;\n  return formData[blocksLayoutFieldname].items[newIndex];\n}\n\n/**\n * Get the previous block UID within form\n * @function previousBlockId\n * @param {Object} formData Form data\n * @param {string} currentBlock Block uid\n * @return {string} Previous block uid\n */\nexport function previousBlockId(formData, currentBlock) {\n  const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n  const currentIndex = formData[blocksLayoutFieldname].items.indexOf(\n    currentBlock,\n  );\n\n  if (currentIndex === 0) {\n    // We are already at the top block don't do anything\n    return null;\n  }\n  const newindex = currentIndex - 1;\n  return formData[blocksLayoutFieldname].items[newindex];\n}\n\n/**\n * Generate empty block form\n * @function emptyBlocksForm\n * @param {Object} formData Form data\n * @return {Object} Empty blocks form with one defaultBlockType block\n */\nexport function emptyBlocksForm() {\n  const { settings } = config;\n  const id = uuid();\n  return {\n    blocks: {\n      [id]: {\n        '@type': settings.defaultBlockType,\n      },\n    },\n    blocks_layout: { items: [id] },\n  };\n}\n\n/**\n * Recursively discover blocks in data and call the provided callback\n * @function visitBlocks\n * @param {Object} content A content data structure (an object with blocks and blocks_layout)\n * @param {Function} callback A function to call on each discovered block\n */\nexport function visitBlocks(content, callback) {\n  const queue = getBlocks(content);\n  while (queue.length > 0) {\n    const [id, blockdata] = queue.shift();\n    callback([id, blockdata]);\n\n    // assumes that a block value is like: {blocks, blocks_layout} or\n    // { data: {blocks, blocks_layout}}\n    if (Object.keys(blockdata || {}).indexOf('blocks') > -1) {\n      queue.push(...getBlocks(blockdata));\n    }\n    if (Object.keys(blockdata?.data || {}).indexOf('blocks') > -1) {\n      queue.push(...getBlocks(blockdata.data));\n    }\n  }\n}\n\n/**\n * Initializes data with the default values coming from schema\n */\nexport function applySchemaDefaults({ data = {}, schema }) {\n  const derivedData = {\n    ...Object.keys(schema.properties).reduce((accumulator, currentField) => {\n      return schema.properties[currentField].default\n        ? {\n            ...accumulator,\n            [currentField]: schema.properties[currentField].default,\n          }\n        : accumulator;\n    }, {}),\n    ...data,\n  };\n  return derivedData;\n}\n\n/**\n * Apply the block's default (as defined in schema) to the block data.\n *\n * @function applyBlockDefaults\n * @param {Object} params An object with data, intl and anything else\n * @return {Object} Derived data, with the defaults extracted from the schema\n */\nexport function applyBlockDefaults({ data, intl, ...rest }, blocksConfig) {\n  const block_type = data['@type'];\n  const { blockSchema } =\n    (blocksConfig || config.blocks.blocksConfig)[block_type] || {};\n  if (!blockSchema) return data;\n\n  let schema =\n    typeof blockSchema === 'function'\n      ? blockSchema({ data, intl, ...rest })\n      : blockSchema;\n  schema = applySchemaEnhancer({ schema, formData: data, intl });\n\n  return applySchemaDefaults({ data, schema });\n}\n\nexport const buildStyleClassNamesFromData = (styles) => {\n  // styles has the form\n  // const styles = {\n  // color: 'red',\n  // backgroundColor: '#AABBCC',\n  // }\n  // Returns: ['has--color--red', 'has--backgroundColor--AABBCC']\n  let styleArray = [];\n  const pairedStyles = toPairs(styles);\n  pairedStyles.forEach((item) => {\n    if (isObject(item[1])) {\n      const flattenedNestedStyles = toPairs(item[1]).map((nested) => [\n        item[0],\n        ...nested,\n      ]);\n      flattenedNestedStyles.forEach((sub) => styleArray.push(sub));\n    } else {\n      styleArray.push(item);\n    }\n  });\n  return styleArray.map((item) => {\n    const classname = item.map((item) => {\n      const str_item = item ? item.toString() : '';\n      return str_item && str_item.startsWith('#')\n        ? str_item.replace('#', '')\n        : str_item;\n    });\n    return `has--${classname[0]}--${classname[1]}${\n      classname[2] ? `--${classname[2]}` : ''\n    }`;\n  });\n};\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}