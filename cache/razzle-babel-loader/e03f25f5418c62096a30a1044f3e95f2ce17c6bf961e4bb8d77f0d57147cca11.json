{"ast":null,"code":"import _pull from \"lodash/pull\";\nimport _map from \"lodash/map\";\nimport _find from \"lodash/find\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Controlpanels/Groups/GroupsControlpanel.jsx\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n/**\n * Users controlpanel container.\n * @module components/manage/Controlpanels/UsersControlpanel\n */\nimport { createGroup, deleteGroup, listGroups, getControlpanel, listRoles, updateGroup, authenticatedRole } from '@plone/volto/actions';\nimport { Icon, ModalForm, Toast, Toolbar, RenderGroups, Pagination, Error } from '@plone/volto/components';\nimport { Link } from 'react-router-dom';\nimport { Helmet, messages } from '@plone/volto/helpers';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport addUserSvg from '@plone/volto/icons/add-user.svg';\nimport saveSVG from '@plone/volto/icons/save.svg';\nimport ploneSVG from '@plone/volto/icons/plone.svg';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Portal } from 'react-portal';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { bindActionCreators, compose } from 'redux';\nimport { Confirm, Container, Button, Form, Input, Segment, Table } from 'semantic-ui-react';\n\n/**\n * GroupsControlpanel class.\n * @class GroupsControlpanel\n * @extends Component\n */\nclass GroupsControlpanel extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Sharing\n   */\n  constructor(props) {\n    super(props);\n    _defineProperty(this, \"fetchData\", async () => {\n      await this.props.getControlpanel('usergroup');\n      await this.props.listRoles();\n      if (!this.props.many_groups) {\n        await this.props.listGroups();\n        this.setState({\n          groupEntries: this.props.groups\n        });\n      }\n    });\n    _defineProperty(this, \"updateGroupRoleSubmit\", e => {\n      e.stopPropagation();\n      this.state.groupEntries.forEach(item => {\n        this.props.updateGroup(item.id, item);\n      });\n      this.props.authenticatedRole(this.state.authenticatedRole);\n      toast.success(__jsx(Toast, {\n        success: true,\n        title: this.props.intl.formatMessage(messages.success),\n        content: this.props.intl.formatMessage(messages.updateGroups),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 7\n        }\n      }));\n    });\n    _defineProperty(this, \"onChangePage\", (event, {\n      value\n    }) => {\n      this.setState({\n        currentPage: value\n      });\n    });\n    this.onChangeSearch = this.onChangeSearch.bind(this);\n    this.onSearchGroups = this.onSearchGroups.bind(this);\n    this.deleteGroup = this.deleteGroup.bind(this);\n    this.onDeleteOk = this.onDeleteOk.bind(this);\n    this.onDeleteCancel = this.onDeleteCancel.bind(this);\n    this.onAddGroupSubmit = this.onAddGroupSubmit.bind(this);\n    this.onAddGroupError = this.onAddGroupError.bind(this);\n    this.onAddGroupSuccess = this.onAddGroupSuccess.bind(this);\n    this.updateGroupRole = this.updateGroupRole.bind(this);\n    this.state = {\n      search: '',\n      addGroupError: '',\n      showDelete: false,\n      groupToDelete: undefined,\n      showAddGroup: false,\n      groupEntries: [],\n      isClient: false,\n      authenticatedRole: props.inheritedRole || [],\n      currentPage: 0,\n      pageSize: 10\n    };\n  }\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.setState({\n      isClient: true\n    });\n    this.fetchData();\n  }\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.deleteGroupRequest.loading && nextProps.deleteGroupRequest.loaded || this.props.createGroupRequest.loading && nextProps.createGroupRequest.loaded) {\n      this.props.listGroups(this.state.search);\n    }\n    if (this.props.createGroupRequest.loading && nextProps.createGroupRequest.loaded) {\n      this.onAddGroupSuccess();\n    }\n    if (this.props.createGroupRequest.loading && nextProps.createGroupRequest.error) {\n      this.onAddGroupError(nextProps.createGroupRequest.error);\n    }\n    if (this.props.loadRolesRequest.loading && nextProps.loadRolesRequest.error) {\n      this.setState({\n        error: nextProps.loadRolesRequest.error\n      });\n    }\n  }\n  getGroupFromProps(value) {\n    return _find(this.props.groups, ['@id', value]);\n  }\n\n  /**\n   *\n   *\n   * @param {*} event Event object\n   * @memberof GroupsControlpanel\n   * @returns {undefined}\n   */\n  onSearchGroups(event) {\n    event.preventDefault();\n    this.props.listGroups(this.state.search);\n  }\n\n  /**\n   * On change search handler\n   * @method onChangeSearch\n   * @param {object} event Event object.\n   * @returns {undefined}\n   */\n  onChangeSearch(event) {\n    this.setState({\n      search: event.target.value\n    });\n  }\n\n  /**\n   *\n   *\n   * @param {*} event Event object.\n   * @param {*} { value } id (groupname)\n   * @memberof GroupsControlpanel\n   * @returns {undefined}\n   */\n  deleteGroup(event, {\n    value\n  }) {\n    if (value) {\n      this.setState({\n        showDelete: true,\n        groupToDelete: this.getGroupFromProps(value)\n      });\n    }\n  }\n\n  /**\n   * On delete ok\n   * @method onDeleteOk\n   * @returns {undefined}\n   */\n  onDeleteOk() {\n    if (this.state.groupToDelete) {\n      this.props.deleteGroup(this.state.groupToDelete.id);\n      this.setState({\n        showDelete: false,\n        groupToDelete: undefined\n      });\n    }\n  }\n\n  /**\n   * On delete cancel\n   * @method onDeleteCancel\n   * @returns {undefined}\n   */\n  onDeleteCancel() {\n    this.setState({\n      showDelete: false,\n      itemsToDelete: []\n    });\n  }\n\n  /**\n   *\n   * @param {*} name\n   * @param {*} value\n   * @memberof GroupsControlpanel\n   */\n  updateGroupRole(name, value) {\n    this.setState(prevState => ({\n      groupEntries: _map(this.state.groupEntries, entry => _objectSpread(_objectSpread({}, entry), {}, {\n        roles: entry.id === name && !entry.roles.includes(value) ? [...entry.roles, value] : entry.id !== name ? entry.roles : _pull(entry.roles, value)\n      })),\n      authenticatedRole: name === 'AuthenticatedUsers' && !prevState.authenticatedRole.includes(value) ? [...prevState.authenticatedRole, value] : name !== 'AuthenticatedUsers' ? prevState.authenticatedRole : _pull(prevState.authenticatedRole, value)\n    }));\n  }\n  /**\n   * @param {*} event\n   * @memberof GroupsControlpanel\n   */\n\n  /**\n   *\n   *\n   * @param {object} data Form data from the ModalForm.\n   * @param {func} callback to set new form data in the ModalForm\n   * @memberof GroupsControlpanel\n   * @returns {undefined}\n   */\n  onAddGroupSubmit(data, callback) {\n    this.props.createGroup(data);\n    this.setState({\n      addGroupSetFormDataCallback: callback\n    });\n  }\n\n  /**\n   * Handle Errors after createGroup()\n   *\n   * @param {*} error object. Requires the property .message\n   * @memberof GroupsControlpanel\n   * @returns {undefined}\n   */\n  onAddGroupError(error) {\n    this.setState({\n      addGroupError: error.response.body.message\n    });\n  }\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.groups !== prevProps.groups) {\n      this.setState({\n        groupEntries: this.props.groups\n      });\n    }\n  }\n\n  /**\n   * Handle Success after createGroup()\n   *\n   * @memberof GroupsControlpanel\n   * @returns {undefined}\n   */\n  onAddGroupSuccess() {\n    this.state.addGroupSetFormDataCallback({});\n    this.setState({\n      showAddGroup: false,\n      addGroupError: undefined,\n      addGroupSetFormDataCallback: undefined\n    });\n    toast.success(__jsx(Toast, {\n      success: true,\n      title: this.props.intl.formatMessage(messages.success),\n      content: this.props.intl.formatMessage(messages.groupCreated),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 7\n      }\n    }));\n  }\n\n  /**\n   * On change page\n   * @method onChangePage\n   * @param {object} event Event object.\n   * @param {string} value Page value.\n   * @returns {undefined}\n   */\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    var _this$state$groupEntr;\n    if (this.state.error) {\n      return __jsx(Error, {\n        error: this.state.error,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 14\n        }\n      });\n    }\n    /*let fullnameToDelete = this.state.groupToDelete\n        ? this.state.groupToDelete.fullname\n        : '';*/\n    let groupNameToDelete = this.state.groupToDelete ? this.state.groupToDelete.id : '';\n    return __jsx(Container, {\n      className: \"users-control-panel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 7\n      }\n    }, __jsx(Helmet, {\n      title: this.props.intl.formatMessage(messages.groups),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 9\n      }\n    }), __jsx(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370,\n        columnNumber: 9\n      }\n    }, __jsx(Confirm, {\n      open: this.state.showDelete,\n      header: this.props.intl.formatMessage(messages.deleteGroupConfirmTitle),\n      content: __jsx(\"div\", {\n        className: \"content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 15\n        }\n      }, __jsx(\"ul\", {\n        className: \"content\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 17\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"Do you really want to delete the group {groupname}?\",\n        defaultMessage: \"Do you really want to delete the group {groupname}?\",\n        values: {\n          groupname: __jsx(\"b\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 383,\n              columnNumber: 34\n            }\n          }, groupNameToDelete)\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 19\n        }\n      }))),\n      onCancel: this.onDeleteCancel,\n      onConfirm: this.onDeleteOk,\n      size: null,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 11\n      }\n    }), this.state.showAddGroup ? __jsx(ModalForm, {\n      open: this.state.showAddGroup,\n      className: \"modal\",\n      onSubmit: this.onAddGroupSubmit,\n      submitError: this.state.addGroupError,\n      onCancel: () => this.setState({\n        showAddGroup: false\n      }),\n      title: this.props.intl.formatMessage(messages.addGroupsFormTitle),\n      loading: this.props.createGroupRequest.loading,\n      schema: {\n        fieldsets: [{\n          id: 'default',\n          title: 'FIXME: Group Data',\n          fields: ['title', 'description', 'groupname', 'email', 'roles']\n        }],\n        properties: {\n          title: {\n            title: this.props.intl.formatMessage(messages.addGroupsFormTitleTitle),\n            type: 'string',\n            description: ''\n          },\n          description: {\n            title: this.props.intl.formatMessage(messages.addGroupsFormDescriptionTitle),\n            type: 'string',\n            description: ''\n          },\n          groupname: {\n            title: this.props.intl.formatMessage(messages.addGroupsFormGroupNameTitle),\n            type: 'string',\n            description: 'A unique identifier for the group. Can not be changed after creation.'\n          },\n          email: {\n            title: this.props.intl.formatMessage(messages.addGroupsFormEmailTitle),\n            type: 'string',\n            description: '',\n            widget: 'email'\n          },\n          roles: {\n            title: this.props.intl.formatMessage(messages.addGroupsFormRolesTitle),\n            type: 'array',\n            choices: this.props.roles.map(role => [role.id, role.id]),\n            noValueOption: false,\n            description: ''\n          }\n        },\n        required: ['groupname']\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 13\n      }\n    }) : null), __jsx(Segment.Group, {\n      raised: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 9\n      }\n    }, __jsx(Segment, {\n      className: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 11\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Groups\",\n      defaultMessage: \"Groups\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 13\n      }\n    })), __jsx(Segment, {\n      secondary: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 11\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Groups are logical collections of users, such as departments and business units. Groups are not directly related to permissions on a global level, you normally use Roles for that - and let certain Groups have a particular role. The symbol{plone_svg}indicates a role inherited from membership in another group.\",\n      defaultMessage: \"Groups are logical collections of users, such as departments and business units. Groups are not directly related to permissions on a global level, you normally use Roles for that - and let certain Groups have a particular role. The symbol{plone_svg}indicates a role inherited from membership in another group.\",\n      values: {\n        plone_svg: __jsx(Icon, {\n          name: ploneSVG,\n          size: \"20px\",\n          color: \"#007EB1\",\n          title: 'plone-svg',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 472,\n            columnNumber: 19\n          }\n        })\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 13\n      }\n    })), __jsx(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 11\n      }\n    }, __jsx(Form, {\n      onSubmit: this.onSearchGroups,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 483,\n        columnNumber: 13\n      }\n    }, __jsx(Form.Field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 15\n      }\n    }, __jsx(Input, {\n      name: \"SearchableText\",\n      action: {\n        icon: 'search'\n      },\n      placeholder: this.props.intl.formatMessage(messages.searchGroups),\n      onChange: this.onChangeSearch,\n      id: \"group-search-input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 17\n      }\n    })))), __jsx(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 497,\n        columnNumber: 11\n      }\n    }, __jsx(\"div\", {\n      className: \"table\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 13\n      }\n    }, __jsx(Table, {\n      padded: true,\n      striped: true,\n      attached: true,\n      unstackable: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 15\n      }\n    }, __jsx(Table.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 17\n      }\n    }, __jsx(Table.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 19\n      }\n    }, __jsx(Table.HeaderCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 502,\n        columnNumber: 21\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Groupname\",\n      defaultMessage: \"Groupname\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 23\n      }\n    })), this.props.roles.map(role => __jsx(Table.HeaderCell, {\n      key: role.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 23\n      }\n    }, role.id)), __jsx(Table.HeaderCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 513,\n        columnNumber: 21\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Actions\",\n      defaultMessage: \"Actions\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 23\n      }\n    })))), __jsx(Table.Body, {\n      \"data-group\": \"groups\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 17\n      }\n    }, this.state.groupEntries.slice(this.state.currentPage * 10, this.state.pageSize * (this.state.currentPage + 1)).map(group => __jsx(RenderGroups, {\n      key: group.id,\n      onDelete: this.deleteGroup,\n      roles: this.props.roles,\n      group: group,\n      updateGroups: this.updateGroupRole,\n      inheritedRole: this.state.authenticatedRole,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 23\n      }\n    }))))), __jsx(\"div\", {\n      className: \"contents-pagination\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 537,\n        columnNumber: 13\n      }\n    }, __jsx(Pagination, {\n      current: this.state.currentPage,\n      total: Math.ceil(((_this$state$groupEntr = this.state.groupEntries) === null || _this$state$groupEntr === void 0 ? void 0 : _this$state$groupEntr.length) / this.state.pageSize),\n      onChangePage: this.onChangePage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 15\n      }\n    })))), this.state.isClient && __jsx(Portal, {\n      node: document.getElementById('toolbar'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 549,\n        columnNumber: 11\n      }\n    }, __jsx(Toolbar, {\n      pathname: this.props.pathname,\n      hideDefaultViewButtons: true,\n      inner: __jsx(React.Fragment, null, __jsx(Button, {\n        id: \"toolbar-save\",\n        className: \"save\",\n        \"aria-label\": this.props.intl.formatMessage(messages.save),\n        onClick: this.updateGroupRoleSubmit,\n        loading: this.props.createGroupRequest.loading,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 555,\n          columnNumber: 19\n        }\n      }, __jsx(Icon, {\n        name: saveSVG,\n        className: \"circled\",\n        size: \"30px\",\n        title: this.props.intl.formatMessage(messages.save),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 562,\n          columnNumber: 21\n        }\n      })), __jsx(Link, {\n        to: \"/controlpanel\",\n        className: \"cancel\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 569,\n          columnNumber: 19\n        }\n      }, __jsx(Icon, {\n        name: clearSVG,\n        className: \"circled\",\n        \"aria-label\": this.props.intl.formatMessage(messages.cancel),\n        size: \"30px\",\n        title: this.props.intl.formatMessage(messages.cancel),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 21\n        }\n      })), __jsx(Button, {\n        id: \"toolbar-add\",\n        \"aria-label\": this.props.intl.formatMessage(messages.addGroupsButtonTitle),\n        onClick: () => {\n          this.setState({\n            showAddGroup: true\n          });\n        },\n        loading: this.props.createGroupRequest.loading,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 580,\n          columnNumber: 19\n        }\n      }, __jsx(Icon, {\n        name: addUserSvg,\n        size: \"45px\",\n        color: \"#826A6A\",\n        title: this.props.intl.formatMessage(messages.addGroupsButtonTitle),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 590,\n          columnNumber: 21\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 13\n      }\n    })));\n  }\n}\n_defineProperty(GroupsControlpanel, \"propTypes\", {\n  listRoles: PropTypes.func.isRequired,\n  listGroups: PropTypes.func.isRequired,\n  pathname: PropTypes.string.isRequired,\n  roles: PropTypes.arrayOf(PropTypes.shape({\n    '@id': PropTypes.string,\n    '@type': PropTypes.string,\n    id: PropTypes.string\n  })).isRequired,\n  groups: PropTypes.arrayOf(PropTypes.shape({\n    Title: PropTypes.string,\n    Description: PropTypes.string,\n    roles: PropTypes.arrayOf(PropTypes.string),\n    groupname: PropTypes.string\n  })).isRequired\n});\nexport default compose(injectIntl, connect((state, props) => {\n  var _state$controlpanels, _state$controlpanels$, _state$controlpanels$2, _state$controlpanels2, _state$controlpanels3, _state$controlpanels4;\n  return {\n    roles: state.roles.roles,\n    groups: state.groups.groups,\n    description: state.description,\n    many_users: (_state$controlpanels = state.controlpanels) === null || _state$controlpanels === void 0 ? void 0 : (_state$controlpanels$ = _state$controlpanels.controlpanel) === null || _state$controlpanels$ === void 0 ? void 0 : (_state$controlpanels$2 = _state$controlpanels$.data) === null || _state$controlpanels$2 === void 0 ? void 0 : _state$controlpanels$2.many_users,\n    many_groups: (_state$controlpanels2 = state.controlpanels) === null || _state$controlpanels2 === void 0 ? void 0 : (_state$controlpanels3 = _state$controlpanels2.controlpanel) === null || _state$controlpanels3 === void 0 ? void 0 : (_state$controlpanels4 = _state$controlpanels3.data) === null || _state$controlpanels4 === void 0 ? void 0 : _state$controlpanels4.many_groups,\n    pathname: props.location.pathname,\n    deleteGroupRequest: state.groups.delete,\n    createGroupRequest: state.groups.create,\n    loadRolesRequest: state.roles,\n    inheritedRole: state.authRole.authenticatedRole\n  };\n}, dispatch => bindActionCreators({\n  listRoles,\n  listGroups,\n  deleteGroup,\n  getControlpanel,\n  createGroup,\n  updateGroup,\n  authenticatedRole\n}, dispatch)))(GroupsControlpanel);","map":{"version":3,"names":["createGroup","deleteGroup","listGroups","getControlpanel","listRoles","updateGroup","authenticatedRole","Icon","ModalForm","Toast","Toolbar","RenderGroups","Pagination","Error","Link","Helmet","messages","clearSVG","addUserSvg","saveSVG","ploneSVG","PropTypes","React","Component","FormattedMessage","injectIntl","Portal","connect","toast","bindActionCreators","compose","Confirm","Container","Button","Form","Input","Segment","Table","GroupsControlpanel","constructor","props","many_groups","setState","groupEntries","groups","e","stopPropagation","state","forEach","item","id","success","intl","formatMessage","updateGroups","event","value","currentPage","onChangeSearch","bind","onSearchGroups","onDeleteOk","onDeleteCancel","onAddGroupSubmit","onAddGroupError","onAddGroupSuccess","updateGroupRole","search","addGroupError","showDelete","groupToDelete","undefined","showAddGroup","isClient","inheritedRole","pageSize","componentDidMount","fetchData","UNSAFE_componentWillReceiveProps","nextProps","deleteGroupRequest","loading","loaded","createGroupRequest","error","loadRolesRequest","getGroupFromProps","preventDefault","target","itemsToDelete","name","prevState","entry","roles","includes","data","callback","addGroupSetFormDataCallback","response","body","message","componentDidUpdate","prevProps","groupCreated","render","groupNameToDelete","deleteGroupConfirmTitle","groupname","addGroupsFormTitle","fieldsets","title","fields","properties","addGroupsFormTitleTitle","type","description","addGroupsFormDescriptionTitle","addGroupsFormGroupNameTitle","email","addGroupsFormEmailTitle","widget","addGroupsFormRolesTitle","choices","map","role","noValueOption","required","plone_svg","icon","searchGroups","slice","group","Math","ceil","length","onChangePage","document","getElementById","pathname","save","updateGroupRoleSubmit","cancel","addGroupsButtonTitle","func","isRequired","string","arrayOf","shape","Title","Description","many_users","controlpanels","controlpanel","location","delete","create","authRole","dispatch"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Controlpanels/Groups/GroupsControlpanel.jsx"],"sourcesContent":["/**\n * Users controlpanel container.\n * @module components/manage/Controlpanels/UsersControlpanel\n */\nimport {\n  createGroup,\n  deleteGroup,\n  listGroups,\n  getControlpanel,\n  listRoles,\n  updateGroup,\n  authenticatedRole,\n} from '@plone/volto/actions';\nimport {\n  Icon,\n  ModalForm,\n  Toast,\n  Toolbar,\n  RenderGroups,\n  Pagination,\n  Error,\n} from '@plone/volto/components';\nimport { Link } from 'react-router-dom';\nimport { Helmet, messages } from '@plone/volto/helpers';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport addUserSvg from '@plone/volto/icons/add-user.svg';\nimport saveSVG from '@plone/volto/icons/save.svg';\nimport ploneSVG from '@plone/volto/icons/plone.svg';\nimport { find, map, pull } from 'lodash';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { FormattedMessage, injectIntl } from 'react-intl';\nimport { Portal } from 'react-portal';\nimport { connect } from 'react-redux';\n\nimport { toast } from 'react-toastify';\nimport { bindActionCreators, compose } from 'redux';\nimport {\n  Confirm,\n  Container,\n  Button,\n  Form,\n  Input,\n  Segment,\n  Table,\n} from 'semantic-ui-react';\n\n/**\n * GroupsControlpanel class.\n * @class GroupsControlpanel\n * @extends Component\n */\nclass GroupsControlpanel extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    listRoles: PropTypes.func.isRequired,\n    listGroups: PropTypes.func.isRequired,\n    pathname: PropTypes.string.isRequired,\n    roles: PropTypes.arrayOf(\n      PropTypes.shape({\n        '@id': PropTypes.string,\n        '@type': PropTypes.string,\n        id: PropTypes.string,\n      }),\n    ).isRequired,\n    groups: PropTypes.arrayOf(\n      PropTypes.shape({\n        Title: PropTypes.string,\n        Description: PropTypes.string,\n        roles: PropTypes.arrayOf(PropTypes.string),\n        groupname: PropTypes.string,\n      }),\n    ).isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Sharing\n   */\n  constructor(props) {\n    super(props);\n    this.onChangeSearch = this.onChangeSearch.bind(this);\n    this.onSearchGroups = this.onSearchGroups.bind(this);\n    this.deleteGroup = this.deleteGroup.bind(this);\n    this.onDeleteOk = this.onDeleteOk.bind(this);\n    this.onDeleteCancel = this.onDeleteCancel.bind(this);\n    this.onAddGroupSubmit = this.onAddGroupSubmit.bind(this);\n    this.onAddGroupError = this.onAddGroupError.bind(this);\n    this.onAddGroupSuccess = this.onAddGroupSuccess.bind(this);\n    this.updateGroupRole = this.updateGroupRole.bind(this);\n    this.state = {\n      search: '',\n      addGroupError: '',\n      showDelete: false,\n      groupToDelete: undefined,\n      showAddGroup: false,\n      groupEntries: [],\n      isClient: false,\n      authenticatedRole: props.inheritedRole || [],\n      currentPage: 0,\n      pageSize: 10,\n    };\n  }\n\n  fetchData = async () => {\n    await this.props.getControlpanel('usergroup');\n    await this.props.listRoles();\n    if (!this.props.many_groups) {\n      await this.props.listGroups();\n      this.setState({\n        groupEntries: this.props.groups,\n      });\n    }\n  };\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.setState({\n      isClient: true,\n    });\n    this.fetchData();\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (\n      (this.props.deleteGroupRequest.loading &&\n        nextProps.deleteGroupRequest.loaded) ||\n      (this.props.createGroupRequest.loading &&\n        nextProps.createGroupRequest.loaded)\n    ) {\n      this.props.listGroups(this.state.search);\n    }\n    if (\n      this.props.createGroupRequest.loading &&\n      nextProps.createGroupRequest.loaded\n    ) {\n      this.onAddGroupSuccess();\n    }\n    if (\n      this.props.createGroupRequest.loading &&\n      nextProps.createGroupRequest.error\n    ) {\n      this.onAddGroupError(nextProps.createGroupRequest.error);\n    }\n    if (\n      this.props.loadRolesRequest.loading &&\n      nextProps.loadRolesRequest.error\n    ) {\n      this.setState({\n        error: nextProps.loadRolesRequest.error,\n      });\n    }\n  }\n\n  getGroupFromProps(value) {\n    return find(this.props.groups, ['@id', value]);\n  }\n\n  /**\n   *\n   *\n   * @param {*} event Event object\n   * @memberof GroupsControlpanel\n   * @returns {undefined}\n   */\n  onSearchGroups(event) {\n    event.preventDefault();\n    this.props.listGroups(this.state.search);\n  }\n\n  /**\n   * On change search handler\n   * @method onChangeSearch\n   * @param {object} event Event object.\n   * @returns {undefined}\n   */\n  onChangeSearch(event) {\n    this.setState({\n      search: event.target.value,\n    });\n  }\n\n  /**\n   *\n   *\n   * @param {*} event Event object.\n   * @param {*} { value } id (groupname)\n   * @memberof GroupsControlpanel\n   * @returns {undefined}\n   */\n  deleteGroup(event, { value }) {\n    if (value) {\n      this.setState({\n        showDelete: true,\n        groupToDelete: this.getGroupFromProps(value),\n      });\n    }\n  }\n\n  /**\n   * On delete ok\n   * @method onDeleteOk\n   * @returns {undefined}\n   */\n  onDeleteOk() {\n    if (this.state.groupToDelete) {\n      this.props.deleteGroup(this.state.groupToDelete.id);\n      this.setState({\n        showDelete: false,\n        groupToDelete: undefined,\n      });\n    }\n  }\n\n  /**\n   * On delete cancel\n   * @method onDeleteCancel\n   * @returns {undefined}\n   */\n  onDeleteCancel() {\n    this.setState({\n      showDelete: false,\n      itemsToDelete: [],\n    });\n  }\n\n  /**\n   *\n   * @param {*} name\n   * @param {*} value\n   * @memberof GroupsControlpanel\n   */\n  updateGroupRole(name, value) {\n    this.setState((prevState) => ({\n      groupEntries: map(this.state.groupEntries, (entry) => ({\n        ...entry,\n        roles:\n          entry.id === name && !entry.roles.includes(value)\n            ? [...entry.roles, value]\n            : entry.id !== name\n            ? entry.roles\n            : pull(entry.roles, value),\n      })),\n      authenticatedRole:\n        name === 'AuthenticatedUsers' &&\n        !prevState.authenticatedRole.includes(value)\n          ? [...prevState.authenticatedRole, value]\n          : name !== 'AuthenticatedUsers'\n          ? prevState.authenticatedRole\n          : pull(prevState.authenticatedRole, value),\n    }));\n  }\n  /**\n   * @param {*} event\n   * @memberof GroupsControlpanel\n   */\n  updateGroupRoleSubmit = (e) => {\n    e.stopPropagation();\n    this.state.groupEntries.forEach((item) => {\n      this.props.updateGroup(item.id, item);\n    });\n    this.props.authenticatedRole(this.state.authenticatedRole);\n    toast.success(\n      <Toast\n        success\n        title={this.props.intl.formatMessage(messages.success)}\n        content={this.props.intl.formatMessage(messages.updateGroups)}\n      />,\n    );\n  };\n  /**\n   *\n   *\n   * @param {object} data Form data from the ModalForm.\n   * @param {func} callback to set new form data in the ModalForm\n   * @memberof GroupsControlpanel\n   * @returns {undefined}\n   */\n  onAddGroupSubmit(data, callback) {\n    this.props.createGroup(data);\n    this.setState({\n      addGroupSetFormDataCallback: callback,\n    });\n  }\n\n  /**\n   * Handle Errors after createGroup()\n   *\n   * @param {*} error object. Requires the property .message\n   * @memberof GroupsControlpanel\n   * @returns {undefined}\n   */\n  onAddGroupError(error) {\n    this.setState({\n      addGroupError: error.response.body.message,\n    });\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.props.groups !== prevProps.groups) {\n      this.setState({\n        groupEntries: this.props.groups,\n      });\n    }\n  }\n\n  /**\n   * Handle Success after createGroup()\n   *\n   * @memberof GroupsControlpanel\n   * @returns {undefined}\n   */\n  onAddGroupSuccess() {\n    this.state.addGroupSetFormDataCallback({});\n    this.setState({\n      showAddGroup: false,\n      addGroupError: undefined,\n      addGroupSetFormDataCallback: undefined,\n    });\n    toast.success(\n      <Toast\n        success\n        title={this.props.intl.formatMessage(messages.success)}\n        content={this.props.intl.formatMessage(messages.groupCreated)}\n      />,\n    );\n  }\n\n  /**\n   * On change page\n   * @method onChangePage\n   * @param {object} event Event object.\n   * @param {string} value Page value.\n   * @returns {undefined}\n   */\n  onChangePage = (event, { value }) => {\n    this.setState({\n      currentPage: value,\n    });\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    if (this.state.error) {\n      return <Error error={this.state.error} />;\n    }\n    /*let fullnameToDelete = this.state.groupToDelete\n        ? this.state.groupToDelete.fullname\n        : '';*/\n    let groupNameToDelete = this.state.groupToDelete\n      ? this.state.groupToDelete.id\n      : '';\n\n    return (\n      <Container className=\"users-control-panel\">\n        <Helmet title={this.props.intl.formatMessage(messages.groups)} />\n        <div className=\"container\">\n          <Confirm\n            open={this.state.showDelete}\n            header={this.props.intl.formatMessage(\n              messages.deleteGroupConfirmTitle,\n            )}\n            content={\n              <div className=\"content\">\n                <ul className=\"content\">\n                  <FormattedMessage\n                    id=\"Do you really want to delete the group {groupname}?\"\n                    defaultMessage=\"Do you really want to delete the group {groupname}?\"\n                    values={{\n                      groupname: <b>{groupNameToDelete}</b>,\n                    }}\n                  />\n                </ul>\n              </div>\n            }\n            onCancel={this.onDeleteCancel}\n            onConfirm={this.onDeleteOk}\n            size={null}\n          />\n          {this.state.showAddGroup ? (\n            <ModalForm\n              open={this.state.showAddGroup}\n              className=\"modal\"\n              onSubmit={this.onAddGroupSubmit}\n              submitError={this.state.addGroupError}\n              onCancel={() => this.setState({ showAddGroup: false })}\n              title={this.props.intl.formatMessage(messages.addGroupsFormTitle)}\n              loading={this.props.createGroupRequest.loading}\n              schema={{\n                fieldsets: [\n                  {\n                    id: 'default',\n                    title: 'FIXME: Group Data',\n                    fields: [\n                      'title',\n                      'description',\n                      'groupname',\n                      'email',\n                      'roles',\n                    ],\n                  },\n                ],\n                properties: {\n                  title: {\n                    title: this.props.intl.formatMessage(\n                      messages.addGroupsFormTitleTitle,\n                    ),\n                    type: 'string',\n                    description: '',\n                  },\n                  description: {\n                    title: this.props.intl.formatMessage(\n                      messages.addGroupsFormDescriptionTitle,\n                    ),\n                    type: 'string',\n                    description: '',\n                  },\n                  groupname: {\n                    title: this.props.intl.formatMessage(\n                      messages.addGroupsFormGroupNameTitle,\n                    ),\n                    type: 'string',\n                    description:\n                      'A unique identifier for the group. Can not be changed after creation.',\n                  },\n                  email: {\n                    title: this.props.intl.formatMessage(\n                      messages.addGroupsFormEmailTitle,\n                    ),\n                    type: 'string',\n                    description: '',\n                    widget: 'email',\n                  },\n                  roles: {\n                    title: this.props.intl.formatMessage(\n                      messages.addGroupsFormRolesTitle,\n                    ),\n                    type: 'array',\n                    choices: this.props.roles.map((role) => [role.id, role.id]),\n                    noValueOption: false,\n                    description: '',\n                  },\n                },\n                required: ['groupname'],\n              }}\n            />\n          ) : null}\n        </div>\n        <Segment.Group raised>\n          <Segment className=\"primary\">\n            <FormattedMessage id=\"Groups\" defaultMessage=\"Groups\" />\n          </Segment>\n          <Segment secondary>\n            <FormattedMessage\n              id=\"Groups are logical collections of users, such as departments and business units. Groups are not directly related to permissions on a global level, you normally use Roles for that - and let certain Groups have a particular role. The symbol{plone_svg}indicates a role inherited from membership in another group.\"\n              defaultMessage=\"Groups are logical collections of users, such as departments and business units. Groups are not directly related to permissions on a global level, you normally use Roles for that - and let certain Groups have a particular role. The symbol{plone_svg}indicates a role inherited from membership in another group.\"\n              values={{\n                plone_svg: (\n                  <Icon\n                    name={ploneSVG}\n                    size=\"20px\"\n                    color=\"#007EB1\"\n                    title={'plone-svg'}\n                  />\n                ),\n              }}\n            />\n          </Segment>\n          <Segment>\n            <Form onSubmit={this.onSearchGroups}>\n              <Form.Field>\n                <Input\n                  name=\"SearchableText\"\n                  action={{ icon: 'search' }}\n                  placeholder={this.props.intl.formatMessage(\n                    messages.searchGroups,\n                  )}\n                  onChange={this.onChangeSearch}\n                  id=\"group-search-input\"\n                />\n              </Form.Field>\n            </Form>\n          </Segment>\n          <Form>\n            <div className=\"table\">\n              <Table padded striped attached unstackable>\n                <Table.Header>\n                  <Table.Row>\n                    <Table.HeaderCell>\n                      <FormattedMessage\n                        id=\"Groupname\"\n                        defaultMessage=\"Groupname\"\n                      />\n                    </Table.HeaderCell>\n                    {this.props.roles.map((role) => (\n                      <Table.HeaderCell key={role.id}>\n                        {role.id}\n                      </Table.HeaderCell>\n                    ))}\n                    <Table.HeaderCell>\n                      <FormattedMessage id=\"Actions\" defaultMessage=\"Actions\" />\n                    </Table.HeaderCell>\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body data-group=\"groups\">\n                  {this.state.groupEntries\n                    .slice(\n                      this.state.currentPage * 10,\n                      this.state.pageSize * (this.state.currentPage + 1),\n                    )\n                    .map((group) => (\n                      <RenderGroups\n                        key={group.id}\n                        onDelete={this.deleteGroup}\n                        roles={this.props.roles}\n                        group={group}\n                        updateGroups={this.updateGroupRole}\n                        inheritedRole={this.state.authenticatedRole}\n                      />\n                    ))}\n                </Table.Body>\n              </Table>\n            </div>\n            <div className=\"contents-pagination\">\n              <Pagination\n                current={this.state.currentPage}\n                total={Math.ceil(\n                  this.state.groupEntries?.length / this.state.pageSize,\n                )}\n                onChangePage={this.onChangePage}\n              />\n            </div>\n          </Form>\n        </Segment.Group>\n        {this.state.isClient && (\n          <Portal node={document.getElementById('toolbar')}>\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={\n                <>\n                  <Button\n                    id=\"toolbar-save\"\n                    className=\"save\"\n                    aria-label={this.props.intl.formatMessage(messages.save)}\n                    onClick={this.updateGroupRoleSubmit}\n                    loading={this.props.createGroupRequest.loading}\n                  >\n                    <Icon\n                      name={saveSVG}\n                      className=\"circled\"\n                      size=\"30px\"\n                      title={this.props.intl.formatMessage(messages.save)}\n                    />\n                  </Button>\n                  <Link to=\"/controlpanel\" className=\"cancel\">\n                    <Icon\n                      name={clearSVG}\n                      className=\"circled\"\n                      aria-label={this.props.intl.formatMessage(\n                        messages.cancel,\n                      )}\n                      size=\"30px\"\n                      title={this.props.intl.formatMessage(messages.cancel)}\n                    />\n                  </Link>\n                  <Button\n                    id=\"toolbar-add\"\n                    aria-label={this.props.intl.formatMessage(\n                      messages.addGroupsButtonTitle,\n                    )}\n                    onClick={() => {\n                      this.setState({ showAddGroup: true });\n                    }}\n                    loading={this.props.createGroupRequest.loading}\n                  >\n                    <Icon\n                      name={addUserSvg}\n                      size=\"45px\"\n                      color=\"#826A6A\"\n                      title={this.props.intl.formatMessage(\n                        messages.addGroupsButtonTitle,\n                      )}\n                    />\n                  </Button>\n                </>\n              }\n            />\n          </Portal>\n        )}\n      </Container>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      roles: state.roles.roles,\n      groups: state.groups.groups,\n      description: state.description,\n      many_users: state.controlpanels?.controlpanel?.data?.many_users,\n      many_groups: state.controlpanels?.controlpanel?.data?.many_groups,\n      pathname: props.location.pathname,\n      deleteGroupRequest: state.groups.delete,\n      createGroupRequest: state.groups.create,\n      loadRolesRequest: state.roles,\n      inheritedRole: state.authRole.authenticatedRole,\n    }),\n    (dispatch) =>\n      bindActionCreators(\n        {\n          listRoles,\n          listGroups,\n          deleteGroup,\n          getControlpanel,\n          createGroup,\n          updateGroup,\n          authenticatedRole,\n        },\n        dispatch,\n      ),\n  ),\n)(GroupsControlpanel);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Do you really want to delete the group {groupname}?","defaultMessage":"Do you really want to delete the group {groupname}?"},{"id":"Groups","defaultMessage":"Groups"},{"id":"Groups are logical collections of users, such as departments and business units. Groups are not directly related to permissions on a global level, you normally use Roles for that - and let certain Groups have a particular role. The symbol{plone_svg}indicates a role inherited from membership in another group.","defaultMessage":"Groups are logical collections of users, such as departments and business units. Groups are not directly related to permissions on a global level, you normally use Roles for that - and let certain Groups have a particular role. The symbol{plone_svg}indicates a role inherited from membership in another group."},{"id":"Groupname","defaultMessage":"Groupname"},{"id":"Actions","defaultMessage":"Actions"}]}},"sourceType":"module","externalDependencies":[]}