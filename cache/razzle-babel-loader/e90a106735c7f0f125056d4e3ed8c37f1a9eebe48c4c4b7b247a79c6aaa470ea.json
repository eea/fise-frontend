{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-object-widget/src/Widget/ObjectListInlineWidget.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport { Accordion, Button, Segment } from 'semantic-ui-react';\nimport React from 'react';\nimport { Icon as VoltoIcon, FormFieldWrapper, DragDropList } from '@plone/volto/components';\nimport { ObjectWidget } from '@plone/volto/components';\nimport deleteSVG from '@plone/volto/icons/delete.svg';\nimport addSVG from '@plone/volto/icons/add.svg';\nimport dragSVG from '@plone/volto/icons/drag.svg';\nimport { v4 as uuid } from 'uuid';\nimport './style.css';\nconst ObjectListInlineWidget = props => {\n  const {\n    id,\n    schema,\n    value = [],\n    onChange,\n    schemaExtender,\n    defaultData = {}\n  } = props;\n  return __jsx(React.Fragment, null, __jsx(FormFieldWrapper, _extends({}, props, {\n    className: \"objectlist-inline-widget\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, __jsx(Button, {\n    compact: true,\n    onClick: () => onChange(id, [...value, _objectSpread({\n      '@id': uuid()\n    }, defaultData)]),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }\n  }, __jsx(VoltoIcon, {\n    name: addSVG,\n    size: \"12px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }), `Add ${schema.title}`))), __jsx(DragDropList, {\n    childList: value.map(o => [o['@id'], o]),\n    onMoveItem: result => {\n      const {\n        source,\n        destination\n      } = result;\n      if (!destination) {\n        return;\n      }\n      const first = value[source.index];\n      const second = value[destination.index];\n      value[destination.index] = first;\n      value[source.index] = second;\n      onChange(id, value);\n      return true;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, ({\n    child,\n    childId,\n    index,\n    draginfo\n  }) => {\n    return __jsx(\"div\", _extends({\n      ref: draginfo.innerRef\n    }, draginfo.draggableProps, {\n      key: childId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 13\n      }\n    }), __jsx(Segment.Group, {\n      raised: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 15\n      }\n    }, __jsx(Accordion, {\n      key: index,\n      fluid: true,\n      styled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }\n    }, __jsx(Accordion.Title, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 19\n      }\n    }, __jsx(\"button\", _extends({\n      style: {\n        visibility: 'visible',\n        display: 'inline-block'\n      }\n    }, draginfo.dragHandleProps, {\n      className: \"drag handle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }\n    }), __jsx(VoltoIcon, {\n      name: dragSVG,\n      size: \"18px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 23\n      }\n    })), `${schema.title} #${index + 1}`, __jsx(\"button\", {\n      onClick: () => {\n        onChange(id, value.filter((v, i) => i !== index));\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }\n    }, __jsx(VoltoIcon, {\n      name: deleteSVG,\n      size: \"16px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 23\n      }\n    }))), __jsx(Accordion.Content, {\n      active: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 19\n      }\n    }, __jsx(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }\n    }, __jsx(ObjectWidget, {\n      id: `${id}-${index}`,\n      key: `ow-${id}-${index}`,\n      schema: schemaExtender ? schemaExtender(schema, child) : schema,\n      value: child,\n      onChange: (fi, fv) => {\n        const newvalue = value.map((v, i) => i !== index ? v : fv);\n        onChange(id, newvalue);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 23\n      }\n    }))))));\n  }));\n};\nexport default ObjectListInlineWidget;","map":{"version":3,"names":["Accordion","Button","Segment","React","Icon","VoltoIcon","FormFieldWrapper","DragDropList","ObjectWidget","deleteSVG","addSVG","dragSVG","v4","uuid","ObjectListInlineWidget","props","id","schema","value","onChange","schemaExtender","defaultData","title","map","o","result","source","destination","first","index","second","child","childId","draginfo","innerRef","draggableProps","visibility","display","dragHandleProps","filter","v","i","fi","fv","newvalue"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-object-widget/src/Widget/ObjectListInlineWidget.jsx"],"sourcesContent":["import { Accordion, Button, Segment } from 'semantic-ui-react';\n\nimport React from 'react';\nimport {\n  Icon as VoltoIcon,\n  FormFieldWrapper,\n  DragDropList,\n} from '@plone/volto/components';\nimport { ObjectWidget } from '@plone/volto/components';\n\nimport deleteSVG from '@plone/volto/icons/delete.svg';\nimport addSVG from '@plone/volto/icons/add.svg';\nimport dragSVG from '@plone/volto/icons/drag.svg';\nimport { v4 as uuid } from 'uuid';\n\nimport './style.css';\n\nconst ObjectListInlineWidget = (props) => {\n  const {\n    id,\n    schema,\n    value = [],\n    onChange,\n    schemaExtender,\n    defaultData = {},\n  } = props;\n\n  return (\n    <>\n      <FormFieldWrapper {...props} className=\"objectlist-inline-widget\">\n        <div>\n          <Button\n            compact\n            onClick={() =>\n              onChange(id, [\n                ...value,\n                {\n                  '@id': uuid(),\n                  ...defaultData,\n                },\n              ])\n            }\n          >\n            <VoltoIcon name={addSVG} size=\"12px\" />\n            {`Add ${schema.title}`}\n          </Button>\n        </div>\n      </FormFieldWrapper>\n      <DragDropList\n        childList={value.map((o) => [o['@id'], o])}\n        onMoveItem={(result) => {\n          const { source, destination } = result;\n          if (!destination) {\n            return;\n          }\n\n          const first = value[source.index];\n          const second = value[destination.index];\n          value[destination.index] = first;\n          value[source.index] = second;\n\n          onChange(id, value);\n          return true;\n        }}\n      >\n        {({ child, childId, index, draginfo }) => {\n          return (\n            <div\n              ref={draginfo.innerRef}\n              {...draginfo.draggableProps}\n              key={childId}\n            >\n              <Segment.Group raised>\n                <Accordion key={index} fluid styled>\n                  <Accordion.Title>\n                    <button\n                      style={{\n                        visibility: 'visible',\n                        display: 'inline-block',\n                      }}\n                      {...draginfo.dragHandleProps}\n                      className=\"drag handle\"\n                    >\n                      <VoltoIcon name={dragSVG} size=\"18px\" />\n                    </button>\n\n                    {`${schema.title} #${index + 1}`}\n                    <button\n                      onClick={() => {\n                        onChange(\n                          id,\n                          value.filter((v, i) => i !== index),\n                        );\n                      }}\n                    >\n                      <VoltoIcon name={deleteSVG} size=\"16px\" />\n                    </button>\n                  </Accordion.Title>\n                  <Accordion.Content active>\n                    <Segment>\n                      <ObjectWidget\n                        id={`${id}-${index}`}\n                        key={`ow-${id}-${index}`}\n                        schema={\n                          schemaExtender\n                            ? schemaExtender(schema, child)\n                            : schema\n                        }\n                        value={child}\n                        onChange={(fi, fv) => {\n                          const newvalue = value.map((v, i) =>\n                            i !== index ? v : fv,\n                          );\n                          onChange(id, newvalue);\n                        }}\n                      />\n                    </Segment>\n                  </Accordion.Content>\n                </Accordion>\n              </Segment.Group>\n            </div>\n          );\n        }}\n      </DragDropList>\n    </>\n  );\n};\nexport default ObjectListInlineWidget;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}