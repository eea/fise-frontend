{"ast":null,"code":"import _extends from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/extends.js\";\nimport _slicedToArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _isEqual from \"lodash/isEqual\";\nimport _includes from \"lodash/includes\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Blocks/Text/Edit.jsx\",\n  _this4 = this,\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\n/**\n * Edit text block.\n * @module components/manage/Blocks/Title/Edit\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport config from '@plone/volto/registry';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport { BlockChooserButton } from '@plone/volto/components';\nimport loadable from '@loadable/component';\nvar Editor = loadable({\n  resolved: {},\n  chunkName: function chunkName() {\n    return \"draft-js-plugins-editor\";\n  },\n  isReady: function isReady(props) {\n    var key = this.resolve(props);\n    if (this.resolved[key] !== true) {\n      return false;\n    }\n    if (typeof __webpack_modules__ !== 'undefined') {\n      return !!__webpack_modules__[key];\n    }\n    return false;\n  },\n  importAsync: function importAsync() {\n    return import( /* webpackChunkName: \"draft-js-plugins-editor\" */'draft-js-plugins-editor');\n  },\n  requireAsync: function requireAsync(props) {\n    var _this = this;\n    var key = this.resolve(props);\n    this.resolved[key] = false;\n    return this.importAsync(props).then(function (resolved) {\n      _this.resolved[key] = true;\n      return resolved;\n    });\n  },\n  requireSync: function requireSync(props) {\n    var id = this.resolve(props);\n    if (typeof __webpack_require__ !== 'undefined') {\n      return __webpack_require__(id);\n    }\n    return eval('module.require')(id);\n  },\n  resolve: function resolve() {\n    if (require.resolveWeak) {\n      return require.resolveWeak(\"draft-js-plugins-editor\");\n    }\n    return eval('require.resolve')(\"draft-js-plugins-editor\");\n  }\n});\n_c = Editor;\nvar messages = defineMessages({\n  text: {\n    \"id\": \"Type text\\u2026\",\n    \"defaultMessage\": \"Type text\\u2026\"\n  }\n});\n\n/**\n * Edit text block class.\n * @class Edit\n * @extends Component\n */\nexport var EditComponent = /*#__PURE__*/function (_Component) {\n  _inherits(EditComponent, _Component);\n  var _super = _createSuper(EditComponent);\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  function EditComponent(props) {\n    var _this2;\n    _classCallCheck(this, EditComponent);\n    _this2 = _super.call(this, props);\n    var settings = config.settings;\n    _this2.draftConfig = settings.richtextEditorSettings(props);\n    var _props$draftJs = props.draftJs,\n      EditorState = _props$draftJs.EditorState,\n      convertFromRaw = _props$draftJs.convertFromRaw;\n    var createInlineToolbarPlugin = props.draftJsInlineToolbarPlugin[\"default\"];\n    if (!__SERVER__) {\n      var editorState;\n      if (props.data && props.data.text) {\n        editorState = EditorState.createWithContent(convertFromRaw(props.data.text));\n      } else {\n        editorState = EditorState.createEmpty();\n      }\n      var inlineToolbarPlugin = createInlineToolbarPlugin({\n        structure: _this2.draftConfig.richTextEditorInlineToolbarButtons\n      });\n      _this2.state = {\n        editorState: editorState,\n        inlineToolbarPlugin: inlineToolbarPlugin\n      };\n    }\n    _this2.onChange = _this2.onChange.bind(_assertThisInitialized(_this2));\n    return _this2;\n  }\n\n  /**\n   * Component will receive props\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  _createClass(EditComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.selected) {\n        // See https://github.com/draft-js-plugins/draft-js-plugins/issues/800\n        setTimeout(this.node.focus, 0);\n      }\n    }\n\n    /**\n     * Component will receive props\n     * @method componentWillReceiveProps\n     * @param {Object} nextProps Next properties\n     * @returns {undefined}\n     */\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      if (!this.props.selected && nextProps.selected) {\n        var selectionState = this.state.editorState.getSelection();\n        if (selectionState.getStartOffset() < selectionState.getEndOffset()) {\n          //keep selection\n        } else {\n          //nothing is selected, move focus to end\n          // See https://github.com/draft-js-plugins/draft-js-plugins/issues/800\n          setTimeout(this.node.focus, 0);\n          var EditorState = this.props.draftJs.EditorState;\n          this.setState({\n            editorState: EditorState.moveFocusToEnd(this.state.editorState)\n          });\n        }\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props$draftJs = this.props.draftJs,\n        convertToRaw = _this$props$draftJs.convertToRaw,\n        EditorState = _this$props$draftJs.EditorState,\n        convertFromRaw = _this$props$draftJs.convertFromRaw;\n      if (!_isEqual(this.props.data, prevProps.data) && !_isEqual(convertToRaw(this.state.editorState.getCurrentContent()), this.props.data.text)) {\n        var editorState = this.props.data && this.props.data.text ? EditorState.createWithContent(convertFromRaw(this.props.data.text)) : EditorState.createEmpty();\n        this.setState({\n          editorState: editorState\n        });\n      }\n    }\n\n    /**\n     * @param {*} nextProps\n     * @param {*} nextState\n     * @returns {boolean}\n     * @memberof Edit\n     */\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      return this.props.selected || !_isEqual(this.props.data, nextProps.data) || !_isEqual(this.state.editorState, nextState.editorState);\n    }\n\n    /**\n     * Change handler\n     * @method onChange\n     * @param {object} editorState Editor state.\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onChange\",\n    value: function onChange(editorState) {\n      var shouldFilterPaste = editorState.getLastChangeType() === 'insert-fragment';\n      var convertToRaw = this.props.draftJs.convertToRaw;\n      var filterEditorState = this.props.draftJsFilters.filterEditorState;\n      if (!_isEqual(convertToRaw(editorState.getCurrentContent()), convertToRaw(this.state.editorState.getCurrentContent()))) {\n        if (shouldFilterPaste) {\n          var filteredState = editorState;\n          filteredState = filterEditorState({\n            blocks: ['unordered-list-item', 'ordered-list-item'],\n            styles: ['BOLD', 'ITALIC'],\n            entities: [{\n              type: 'LINK',\n              attributes: ['url']\n            }],\n            whitespacedCharacters: []\n          }, filteredState);\n          editorState = filteredState;\n        }\n        this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n          text: convertToRaw(editorState.getCurrentContent())\n        }));\n      }\n      this.setState({\n        editorState: editorState\n      });\n    }\n\n    /**\n     * Render method.\n     * @method render\n     * @returns {string} Markup for the component.\n     */\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props$data,\n        _this3 = this;\n      // console.log('draft config', this.draftConfig);\n\n      if (__SERVER__) {\n        return __jsx(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 14\n          }\n        });\n      }\n      var placeholder = this.props.data.placeholder || this.props.formTitle || this.props.intl.formatMessage(messages.text);\n      var disableNewBlocks = ((_this$props$data = this.props.data) === null || _this$props$data === void 0 ? void 0 : _this$props$data.disableNewBlocks) || this.props.detached;\n      var InlineToolbar = this.state.inlineToolbarPlugin.InlineToolbar;\n      // const { settings } = config;\n\n      var isSoftNewlineEvent = this.props.draftJsLibIsSoftNewlineEvent[\"default\"];\n      var RichUtils = this.props.draftJs.RichUtils;\n      return __jsx(React.Fragment, null, __jsx(Editor, {\n        readOnly: !this.props.editable,\n        onChange: this.onChange,\n        editorState: this.state.editorState,\n        plugins: [this.state.inlineToolbarPlugin].concat(_toConsumableArray(this.draftConfig.richTextEditorPlugins)),\n        blockRenderMap: this.draftConfig.extendedBlockRenderMap,\n        blockStyleFn: this.draftConfig.blockStyleFn,\n        customStyleMap: this.draftConfig.customStyleMap,\n        placeholder: placeholder,\n        handleReturn: function handleReturn(e) {\n          if (isSoftNewlineEvent(e)) {\n            _this3.onChange(RichUtils.insertSoftNewline(_this3.state.editorState));\n            return 'handled';\n          }\n          if (!disableNewBlocks) {\n            var selectionState = _this3.state.editorState.getSelection();\n            var anchorKey = selectionState.getAnchorKey();\n            var currentContent = _this3.state.editorState.getCurrentContent();\n            var currentContentBlock = currentContent.getBlockForKey(anchorKey);\n            var blockType = currentContentBlock.getType();\n            if (!_includes(_this3.draftConfig.listBlockTypes, blockType)) {\n              _this3.props.onSelectBlock(_this3.props.onAddBlock(config.settings.defaultBlockType, _this3.props.index + 1));\n              return 'handled';\n            }\n            return 'un-handled';\n          }\n          return {};\n        },\n        handleKeyCommand: function handleKeyCommand(command, editorState) {\n          if (_this3.props.data.required) {\n            return;\n          }\n          if (command === 'backspace' && editorState.getCurrentContent().getPlainText().length === 0) {\n            _this3.props.onDeleteBlock(_this3.props.block, true);\n          }\n        },\n        onUpArrow: function onUpArrow() {\n          var selectionState = _this3.state.editorState.getSelection();\n          var currentCursorPosition = selectionState.getStartOffset();\n          if (currentCursorPosition === 0) {\n            _this3.props.onFocusPreviousBlock(_this3.props.block, _this3.node);\n          }\n        },\n        onDownArrow: function onDownArrow() {\n          var selectionState = _this3.state.editorState.getSelection();\n          var editorState = _this3.state.editorState;\n          var currentCursorPosition = selectionState.getStartOffset();\n          var blockLength = editorState.getCurrentContent().getFirstBlock().getLength();\n          if (currentCursorPosition === blockLength) {\n            _this3.props.onFocusNextBlock(_this3.props.block, _this3.node);\n          }\n        },\n        ref: function ref(node) {\n          _this3.node = node;\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 9\n        }\n      }), __jsx(InlineToolbar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 9\n        }\n      }), this.props.selected && __jsx(BlockChooserButton, {\n        data: this.props.data,\n        block: this.props.block,\n        onInsertBlock: function onInsertBlock(id, value) {\n          _this3.props.onSelectBlock(_this3.props.onInsertBlock(id, value));\n        },\n        allowedBlocks: this.props.allowedBlocks,\n        blocksConfig: this.props.blocksConfig,\n        size: \"24px\",\n        className: \"block-add-button\",\n        properties: this.props.properties,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 11\n        }\n      }));\n    }\n  }]);\n  return EditComponent;\n}(Component);\n_defineProperty(EditComponent, \"propTypes\", {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  detached: PropTypes.bool,\n  index: PropTypes.number.isRequired,\n  selected: PropTypes.bool.isRequired,\n  block: PropTypes.string.isRequired,\n  onAddBlock: PropTypes.func.isRequired,\n  onInsertBlock: PropTypes.func.isRequired,\n  onChangeBlock: PropTypes.func.isRequired,\n  onDeleteBlock: PropTypes.func.isRequired,\n  onMutateBlock: PropTypes.func.isRequired,\n  onFocusPreviousBlock: PropTypes.func.isRequired,\n  onFocusNextBlock: PropTypes.func.isRequired,\n  onSelectBlock: PropTypes.func.isRequired,\n  editable: PropTypes.bool,\n  allowedBlocks: PropTypes.arrayOf(PropTypes.string),\n  showRestricted: PropTypes.bool,\n  formTitle: PropTypes.string,\n  formDescription: PropTypes.string,\n  blocksConfig: PropTypes.objectOf(PropTypes.any),\n  properties: PropTypes.objectOf(PropTypes.any)\n});\n_defineProperty(EditComponent, \"defaultProps\", {\n  detached: false,\n  editable: true\n});\nexport var Edit = compose(injectIntl, injectLazyLibs(['draftJs', 'draftJsLibIsSoftNewlineEvent', 'draftJsFilters', 'draftJsInlineToolbarPlugin', 'draftJsBlockBreakoutPlugin', 'draftJsCreateInlineStyleButton', 'draftJsCreateBlockStyleButton', 'immutableLib'\n// TODO: add all plugin dependencies, also in Wysiwyg and Cell\n]))(EditComponent);\n_c2 = Edit;\nvar Preloader = function Preloader(props) {\n  _s();\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    loaded = _React$useState2[0],\n    setLoaded = _React$useState2[1];\n  React.useEffect(function () {\n    Editor.load().then(function () {\n      return setLoaded(true);\n    });\n  }, []);\n  return loaded ? __jsx(Edit, _extends({}, props, {\n    __self: _this4,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 19\n    }\n  })) : null;\n};\n_s(Preloader, \"I8RUn14npbk54TheiKdNt4wCpsU=\");\n_c3 = Preloader;\nexport default Preloader;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Editor\");\n$RefreshReg$(_c2, \"Edit\");\n$RefreshReg$(_c3, \"Preloader\");","map":{"version":3,"names":["React","Component","PropTypes","compose","defineMessages","injectIntl","config","injectLazyLibs","BlockChooserButton","loadable","Editor","messages","text","EditComponent","props","settings","draftConfig","richtextEditorSettings","draftJs","EditorState","convertFromRaw","createInlineToolbarPlugin","draftJsInlineToolbarPlugin","__SERVER__","editorState","data","createWithContent","createEmpty","inlineToolbarPlugin","structure","richTextEditorInlineToolbarButtons","state","onChange","bind","selected","setTimeout","node","focus","nextProps","selectionState","getSelection","getStartOffset","getEndOffset","setState","moveFocusToEnd","prevProps","convertToRaw","getCurrentContent","nextState","shouldFilterPaste","getLastChangeType","filterEditorState","draftJsFilters","filteredState","blocks","styles","entities","type","attributes","whitespacedCharacters","onChangeBlock","block","placeholder","formTitle","intl","formatMessage","disableNewBlocks","detached","InlineToolbar","isSoftNewlineEvent","draftJsLibIsSoftNewlineEvent","RichUtils","editable","richTextEditorPlugins","extendedBlockRenderMap","blockStyleFn","customStyleMap","e","insertSoftNewline","anchorKey","getAnchorKey","currentContent","currentContentBlock","getBlockForKey","blockType","getType","listBlockTypes","onSelectBlock","onAddBlock","defaultBlockType","index","command","required","getPlainText","length","onDeleteBlock","currentCursorPosition","onFocusPreviousBlock","blockLength","getFirstBlock","getLength","onFocusNextBlock","id","value","onInsertBlock","allowedBlocks","blocksConfig","properties","objectOf","any","isRequired","bool","number","string","func","onMutateBlock","arrayOf","showRestricted","formDescription","Edit","Preloader","useState","loaded","setLoaded","useEffect","load","then"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Blocks/Text/Edit.jsx"],"sourcesContent":["/**\n * Edit text block.\n * @module components/manage/Blocks/Title/Edit\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { compose } from 'redux';\n\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { includes, isEqual } from 'lodash';\nimport config from '@plone/volto/registry';\n\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport { BlockChooserButton } from '@plone/volto/components';\n\nimport loadable from '@loadable/component';\n\nconst Editor = loadable(() => import('draft-js-plugins-editor'));\n\nconst messages = defineMessages({\n  text: {\n    id: 'Type text…',\n    defaultMessage: 'Type text…',\n  },\n});\n\n/**\n * Edit text block class.\n * @class Edit\n * @extends Component\n */\nexport class EditComponent extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    data: PropTypes.objectOf(PropTypes.any).isRequired,\n    detached: PropTypes.bool,\n    index: PropTypes.number.isRequired,\n    selected: PropTypes.bool.isRequired,\n    block: PropTypes.string.isRequired,\n    onAddBlock: PropTypes.func.isRequired,\n    onInsertBlock: PropTypes.func.isRequired,\n    onChangeBlock: PropTypes.func.isRequired,\n    onDeleteBlock: PropTypes.func.isRequired,\n    onMutateBlock: PropTypes.func.isRequired,\n    onFocusPreviousBlock: PropTypes.func.isRequired,\n    onFocusNextBlock: PropTypes.func.isRequired,\n    onSelectBlock: PropTypes.func.isRequired,\n    editable: PropTypes.bool,\n    allowedBlocks: PropTypes.arrayOf(PropTypes.string),\n    showRestricted: PropTypes.bool,\n    formTitle: PropTypes.string,\n    formDescription: PropTypes.string,\n    blocksConfig: PropTypes.objectOf(PropTypes.any),\n    properties: PropTypes.objectOf(PropTypes.any),\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    detached: false,\n    editable: true,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n\n    const { settings } = config;\n\n    this.draftConfig = settings.richtextEditorSettings(props);\n\n    const { EditorState, convertFromRaw } = props.draftJs;\n    const createInlineToolbarPlugin = props.draftJsInlineToolbarPlugin.default;\n\n    if (!__SERVER__) {\n      let editorState;\n      if (props.data && props.data.text) {\n        editorState = EditorState.createWithContent(\n          convertFromRaw(props.data.text),\n        );\n      } else {\n        editorState = EditorState.createEmpty();\n      }\n\n      const inlineToolbarPlugin = createInlineToolbarPlugin({\n        structure: this.draftConfig.richTextEditorInlineToolbarButtons,\n      });\n\n      this.state = {\n        editorState,\n        inlineToolbarPlugin,\n      };\n    }\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    if (this.props.selected) {\n      // See https://github.com/draft-js-plugins/draft-js-plugins/issues/800\n      setTimeout(this.node.focus, 0);\n    }\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (!this.props.selected && nextProps.selected) {\n      const selectionState = this.state.editorState.getSelection();\n\n      if (selectionState.getStartOffset() < selectionState.getEndOffset()) {\n        //keep selection\n      } else {\n        //nothing is selected, move focus to end\n        // See https://github.com/draft-js-plugins/draft-js-plugins/issues/800\n        setTimeout(this.node.focus, 0);\n        const { EditorState } = this.props.draftJs;\n\n        this.setState({\n          editorState: EditorState.moveFocusToEnd(this.state.editorState),\n        });\n      }\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const { convertToRaw, EditorState, convertFromRaw } = this.props.draftJs;\n    if (\n      !isEqual(this.props.data, prevProps.data) &&\n      !isEqual(\n        convertToRaw(this.state.editorState.getCurrentContent()),\n        this.props.data.text,\n      )\n    ) {\n      const editorState =\n        this.props.data && this.props.data.text\n          ? EditorState.createWithContent(convertFromRaw(this.props.data.text))\n          : EditorState.createEmpty();\n\n      this.setState({\n        editorState: editorState,\n      });\n    }\n  }\n\n  /**\n   * @param {*} nextProps\n   * @param {*} nextState\n   * @returns {boolean}\n   * @memberof Edit\n   */\n  shouldComponentUpdate(nextProps, nextState) {\n    return (\n      this.props.selected ||\n      !isEqual(this.props.data, nextProps.data) ||\n      !isEqual(this.state.editorState, nextState.editorState)\n    );\n  }\n\n  /**\n   * Change handler\n   * @method onChange\n   * @param {object} editorState Editor state.\n   * @returns {undefined}\n   */\n  onChange(editorState) {\n    const shouldFilterPaste =\n      editorState.getLastChangeType() === 'insert-fragment';\n\n    const { convertToRaw } = this.props.draftJs;\n    const { filterEditorState } = this.props.draftJsFilters;\n\n    if (\n      !isEqual(\n        convertToRaw(editorState.getCurrentContent()),\n        convertToRaw(this.state.editorState.getCurrentContent()),\n      )\n    ) {\n      if (shouldFilterPaste) {\n        let filteredState = editorState;\n        filteredState = filterEditorState(\n          {\n            blocks: ['unordered-list-item', 'ordered-list-item'],\n            styles: ['BOLD', 'ITALIC'],\n            entities: [\n              {\n                type: 'LINK',\n                attributes: ['url'],\n              },\n            ],\n            whitespacedCharacters: [],\n          },\n          filteredState,\n        );\n        editorState = filteredState;\n      }\n      this.props.onChangeBlock(this.props.block, {\n        ...this.props.data,\n        text: convertToRaw(editorState.getCurrentContent()),\n      });\n    }\n    this.setState({ editorState });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    // console.log('draft config', this.draftConfig);\n\n    if (__SERVER__) {\n      return <div />;\n    }\n\n    const placeholder =\n      this.props.data.placeholder ||\n      this.props.formTitle ||\n      this.props.intl.formatMessage(messages.text);\n\n    const disableNewBlocks =\n      this.props.data?.disableNewBlocks || this.props.detached;\n    const { InlineToolbar } = this.state.inlineToolbarPlugin;\n    // const { settings } = config;\n\n    const isSoftNewlineEvent = this.props.draftJsLibIsSoftNewlineEvent.default;\n    const { RichUtils } = this.props.draftJs;\n\n    return (\n      <>\n        <Editor\n          readOnly={!this.props.editable}\n          onChange={this.onChange}\n          editorState={this.state.editorState}\n          plugins={[\n            this.state.inlineToolbarPlugin,\n            // ...settings.richTextEditorPlugins,\n            ...this.draftConfig.richTextEditorPlugins,\n          ]}\n          blockRenderMap={this.draftConfig.extendedBlockRenderMap}\n          blockStyleFn={this.draftConfig.blockStyleFn}\n          customStyleMap={this.draftConfig.customStyleMap}\n          placeholder={placeholder}\n          handleReturn={(e) => {\n            if (isSoftNewlineEvent(e)) {\n              this.onChange(\n                RichUtils.insertSoftNewline(this.state.editorState),\n              );\n              return 'handled';\n            }\n            if (!disableNewBlocks) {\n              const selectionState = this.state.editorState.getSelection();\n              const anchorKey = selectionState.getAnchorKey();\n              const currentContent = this.state.editorState.getCurrentContent();\n              const currentContentBlock = currentContent.getBlockForKey(\n                anchorKey,\n              );\n              const blockType = currentContentBlock.getType();\n              if (!includes(this.draftConfig.listBlockTypes, blockType)) {\n                this.props.onSelectBlock(\n                  this.props.onAddBlock(\n                    config.settings.defaultBlockType,\n                    this.props.index + 1,\n                  ),\n                );\n                return 'handled';\n              }\n              return 'un-handled';\n            }\n            return {};\n          }}\n          handleKeyCommand={(command, editorState) => {\n            if (this.props.data.required) {\n              return;\n            }\n            if (\n              command === 'backspace' &&\n              editorState.getCurrentContent().getPlainText().length === 0\n            ) {\n              this.props.onDeleteBlock(this.props.block, true);\n            }\n          }}\n          onUpArrow={() => {\n            const selectionState = this.state.editorState.getSelection();\n            const currentCursorPosition = selectionState.getStartOffset();\n\n            if (currentCursorPosition === 0) {\n              this.props.onFocusPreviousBlock(this.props.block, this.node);\n            }\n          }}\n          onDownArrow={() => {\n            const selectionState = this.state.editorState.getSelection();\n            const { editorState } = this.state;\n            const currentCursorPosition = selectionState.getStartOffset();\n            const blockLength = editorState\n              .getCurrentContent()\n              .getFirstBlock()\n              .getLength();\n\n            if (currentCursorPosition === blockLength) {\n              this.props.onFocusNextBlock(this.props.block, this.node);\n            }\n          }}\n          ref={(node) => {\n            this.node = node;\n          }}\n        />\n        <InlineToolbar />\n        {this.props.selected && (\n          <BlockChooserButton\n            data={this.props.data}\n            block={this.props.block}\n            onInsertBlock={(id, value) => {\n              this.props.onSelectBlock(this.props.onInsertBlock(id, value));\n            }}\n            allowedBlocks={this.props.allowedBlocks}\n            blocksConfig={this.props.blocksConfig}\n            size=\"24px\"\n            className=\"block-add-button\"\n            properties={this.props.properties}\n          />\n        )}\n      </>\n    );\n  }\n}\n\nexport const Edit = compose(\n  injectIntl,\n  injectLazyLibs([\n    'draftJs',\n    'draftJsLibIsSoftNewlineEvent',\n    'draftJsFilters',\n    'draftJsInlineToolbarPlugin',\n    'draftJsBlockBreakoutPlugin',\n    'draftJsCreateInlineStyleButton',\n    'draftJsCreateBlockStyleButton',\n    'immutableLib',\n    // TODO: add all plugin dependencies, also in Wysiwyg and Cell\n  ]),\n)(EditComponent);\n\nconst Preloader = (props) => {\n  const [loaded, setLoaded] = React.useState(false);\n  React.useEffect(() => {\n    Editor.load().then(() => setLoaded(true));\n  }, []);\n  return loaded ? <Edit {...props} /> : null;\n};\n\nexport default Preloader;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Type text…","defaultMessage":"Type text…"}]}},"sourceType":"module","externalDependencies":[]}