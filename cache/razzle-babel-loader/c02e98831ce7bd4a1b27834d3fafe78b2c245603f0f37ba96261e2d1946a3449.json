{"ast":null,"code":"import _toConsumableArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _merge from \"lodash/merge\";\nimport _mapKeys from \"lodash/mapKeys\";\nimport _map from \"lodash/map\";\nimport _isArray from \"lodash/isArray\";\nimport _pickBy from \"lodash/pickBy\";\nimport _keys from \"lodash/keys\";\nimport _flatten from \"lodash/flatten\";\nimport { GET_SCHEMA, POST_SCHEMA, PUT_SCHEMA, UPDATE_SCHEMA } from '@plone/volto/constants/ActionTypes';\nvar initialState = {\n  error: null,\n  loaded: false,\n  loading: false,\n  schema: null,\n  post: {\n    loaded: false,\n    loading: false,\n    error: null\n  },\n  update: {\n    loaded: false,\n    loading: false,\n    error: null\n  },\n  put: {\n    loaded: false,\n    loading: false,\n    error: null\n  }\n};\n\n/**\n * Get request key\n * @function getRequestKey\n * @param {string} actionType Action type.\n * @returns {string} Request key.\n */\nfunction getRequestKey(actionType) {\n  return actionType.split('_')[0].toLowerCase();\n}\n\n/**\n * Schema reducer.\n * @function schema\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function schema() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  switch (action.type) {\n    /** PENDING */\n    case \"\".concat(GET_SCHEMA, \"_PENDING\"):\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: null,\n        loading: true,\n        loaded: false\n      });\n    case \"\".concat(POST_SCHEMA, \"_PENDING\"):\n    case \"\".concat(PUT_SCHEMA, \"_PENDING\"):\n    case \"\".concat(UPDATE_SCHEMA, \"_PENDING\"):\n      return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, getRequestKey(action.type), {\n        loading: true,\n        loaded: false,\n        error: null\n      }));\n\n    /** SUCCESS */\n    case \"\".concat(GET_SCHEMA, \"_SUCCESS\"):\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: null,\n        loading: false,\n        loaded: true,\n        schema: _objectSpread(_objectSpread({}, action.result), {}, {\n          required: [].concat(_toConsumableArray(action.result.required), _toConsumableArray(_flatten(_map(_keys(_pickBy(action.result.properties, _isArray)), function (fieldset) {\n            return _map(action.result.definitions[fieldset].required, function (required) {\n              return \"\".concat(fieldset, \".\").concat(required);\n            });\n          })))),\n          properties: _objectSpread(_objectSpread({}, action.result.properties), _merge.apply(void 0, _toConsumableArray(_map(_keys(_pickBy(action.result.properties, _isArray)), function (fieldset) {\n            return _mapKeys(action.result.definitions[fieldset].properties, function (value, key) {\n              return \"\".concat(fieldset, \".\").concat(key);\n            });\n          }))))\n        })\n      });\n    case \"\".concat(POST_SCHEMA, \"_SUCCESS\"):\n    case \"\".concat(PUT_SCHEMA, \"_SUCCESS\"):\n    case \"\".concat(UPDATE_SCHEMA, \"_SUCCESS\"):\n      return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, getRequestKey(action.type), {\n        loading: false,\n        loaded: true,\n        error: null\n      }));\n\n    /** FAIL */\n    case \"\".concat(GET_SCHEMA, \"_FAIL\"):\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.error,\n        loading: false,\n        loaded: false,\n        schema: null\n      });\n    case \"\".concat(POST_SCHEMA, \"_FAIL\"):\n    case \"\".concat(PUT_SCHEMA, \"_FAIL\"):\n    case \"\".concat(UPDATE_SCHEMA, \"_FAIL\"):\n      return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, getRequestKey(action.type), {\n        loading: false,\n        loaded: false,\n        error: action.error\n      }));\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["GET_SCHEMA","POST_SCHEMA","PUT_SCHEMA","UPDATE_SCHEMA","initialState","error","loaded","loading","schema","post","update","put","getRequestKey","actionType","split","toLowerCase","state","action","type","result","required","properties","fieldset","definitions","value","key"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/reducers/schema/schema.js"],"sourcesContent":["/**\n * Schema reducer.\n * @module reducers/schema/schema\n */\n\nimport { flatten, keys, pickBy, isArray, map, mapKeys, merge } from 'lodash';\n\nimport {\n  GET_SCHEMA,\n  POST_SCHEMA,\n  PUT_SCHEMA,\n  UPDATE_SCHEMA,\n} from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {\n  error: null,\n  loaded: false,\n  loading: false,\n  schema: null,\n  post: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  update: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  put: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n};\n\n/**\n * Get request key\n * @function getRequestKey\n * @param {string} actionType Action type.\n * @returns {string} Request key.\n */\nfunction getRequestKey(actionType) {\n  return actionType.split('_')[0].toLowerCase();\n}\n\n/**\n * Schema reducer.\n * @function schema\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function schema(state = initialState, action = {}) {\n  switch (action.type) {\n    /** PENDING */\n    case `${GET_SCHEMA}_PENDING`:\n      return {\n        ...state,\n        error: null,\n        loading: true,\n        loaded: false,\n      };\n    case `${POST_SCHEMA}_PENDING`:\n    case `${PUT_SCHEMA}_PENDING`:\n    case `${UPDATE_SCHEMA}_PENDING`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: true,\n          loaded: false,\n          error: null,\n        },\n      };\n\n    /** SUCCESS */\n    case `${GET_SCHEMA}_SUCCESS`:\n      return {\n        ...state,\n        error: null,\n        loading: false,\n        loaded: true,\n        schema: {\n          ...action.result,\n          required: [\n            ...action.result.required,\n            ...flatten(\n              map(keys(pickBy(action.result.properties, isArray)), (fieldset) =>\n                map(\n                  action.result.definitions[fieldset].required,\n                  (required) => `${fieldset}.${required}`,\n                ),\n              ),\n            ),\n          ],\n          properties: {\n            ...action.result.properties,\n            ...merge(\n              ...map(\n                keys(pickBy(action.result.properties, isArray)),\n                (fieldset) =>\n                  mapKeys(\n                    action.result.definitions[fieldset].properties,\n                    (value, key) => `${fieldset}.${key}`,\n                  ),\n              ),\n            ),\n          },\n        },\n      };\n    case `${POST_SCHEMA}_SUCCESS`:\n    case `${PUT_SCHEMA}_SUCCESS`:\n    case `${UPDATE_SCHEMA}_SUCCESS`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n\n    /** FAIL */\n    case `${GET_SCHEMA}_FAIL`:\n      return {\n        ...state,\n        error: action.error,\n        loading: false,\n        loaded: false,\n        schema: null,\n      };\n    case `${POST_SCHEMA}_FAIL`:\n    case `${PUT_SCHEMA}_FAIL`:\n    case `${UPDATE_SCHEMA}_FAIL`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    default:\n      return state;\n  }\n}\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}