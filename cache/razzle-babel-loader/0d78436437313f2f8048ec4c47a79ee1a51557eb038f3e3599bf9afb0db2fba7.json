{"ast":null,"code":"import _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _isEmpty from \"lodash/isEmpty\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-group-block/src/components/manage/Blocks/Group/Edit.jsx\",\n  _this = this,\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\nimport React, { useState } from 'react';\nimport { BlocksForm, SidebarPortal, Icon, InlineForm } from '@plone/volto/components';\nimport { emptyBlocksForm } from '@plone/volto/helpers';\nimport delightedSVG from '@plone/volto/icons/delighted.svg';\nimport dissatisfiedSVG from '@plone/volto/icons/dissatisfied.svg';\nimport PropTypes from 'prop-types';\nimport { Button, Segment } from 'semantic-ui-react';\nimport EditBlockWrapper from './EditBlockWrapper';\nimport EditSchema from './EditSchema';\nimport helpSVG from '@plone/volto/icons/help.svg';\nimport cx from 'classnames';\nimport './editor.less';\nvar Edit = function Edit(props) {\n  _s();\n  var _data$data, _data$instructions;\n  var block = props.block,\n    data = props.data,\n    onChangeBlock = props.onChangeBlock,\n    _onChangeField = props.onChangeField,\n    pathname = props.pathname,\n    selected = props.selected,\n    manage = props.manage,\n    formDescription = props.formDescription;\n  var metadata = props.metadata || props.properties;\n  var data_blocks = data === null || data === void 0 ? void 0 : (_data$data = data.data) === null || _data$data === void 0 ? void 0 : _data$data.blocks;\n  var properties = _isEmpty(data_blocks) ? emptyBlocksForm() : data.data;\n  var _useState = useState(properties.blocks_layout.items[0]),\n    selectedBlock = _useState[0],\n    setSelectedBlock = _useState[1];\n  React.useEffect(function () {\n    if (_isEmpty(data_blocks) && properties.blocks_layout.items[0] !== selectedBlock) {\n      setSelectedBlock(properties.blocks_layout.items[0]);\n      onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n        data: properties\n      }));\n    }\n  }, [onChangeBlock, properties, selectedBlock, block, data, data_blocks]);\n  var blockState = {};\n  var charCount = 0;\n\n  /**\n   * Count the number of characters that are anything except using Regex\n   * @param {string} paragraph\n   * @returns\n   */\n  var countCharsWithoutSpaces = function countCharsWithoutSpaces(paragraph) {\n    var regex = /[^\\s\\\\]/g;\n    return (paragraph.match(regex) || []).length;\n  };\n\n  /**\n   * Count the number of characters\n   * @param {string} paragraph\n   * @returns\n   */\n  var countCharsWithSpaces = function countCharsWithSpaces(paragraph) {\n    return (paragraph === null || paragraph === void 0 ? void 0 : paragraph.length) || 0;\n  };\n\n  /**\n   * Recursively look for any block that contains text or plaintext\n   * @param {Object} blocksObject\n   * @returns\n   */\n  var countTextInBlocks = function countTextInBlocks(blocksObject) {\n    var groupCharCount = 0;\n    if (!props.data.maxChars) {\n      return groupCharCount;\n    }\n    Object.keys(blocksObject).forEach(function (blockId) {\n      var _blocksObject$blockId, _blocksObject$blockId2, _blocksObject$blockId3, _blocksObject$blockId4, _blocksObject$blockId5, _blocksObject$blockId6, _blocksObject$blockId7, _blocksObject$blockId8, _blocksObject$blockId9, _blocksObject$blockId10, _blocksObject$blockId11;\n      var foundText = (_blocksObject$blockId = blocksObject[blockId]) !== null && _blocksObject$blockId !== void 0 && _blocksObject$blockId.plaintext ? (_blocksObject$blockId2 = blocksObject[blockId]) === null || _blocksObject$blockId2 === void 0 ? void 0 : _blocksObject$blockId2.plaintext : (_blocksObject$blockId3 = blocksObject[blockId]) !== null && _blocksObject$blockId3 !== void 0 && (_blocksObject$blockId4 = _blocksObject$blockId3.text) !== null && _blocksObject$blockId4 !== void 0 && (_blocksObject$blockId5 = _blocksObject$blockId4.blocks[0]) !== null && _blocksObject$blockId5 !== void 0 && _blocksObject$blockId5.text ? blocksObject[blockId].text.blocks[0].text : (_blocksObject$blockId6 = blocksObject[blockId]) !== null && _blocksObject$blockId6 !== void 0 && (_blocksObject$blockId7 = _blocksObject$blockId6.data) !== null && _blocksObject$blockId7 !== void 0 && _blocksObject$blockId7.blocks ? countTextInBlocks((_blocksObject$blockId8 = blocksObject[blockId]) === null || _blocksObject$blockId8 === void 0 ? void 0 : (_blocksObject$blockId9 = _blocksObject$blockId8.data) === null || _blocksObject$blockId9 === void 0 ? void 0 : _blocksObject$blockId9.blocks) : (_blocksObject$blockId10 = blocksObject[blockId]) !== null && _blocksObject$blockId10 !== void 0 && _blocksObject$blockId10.blocks ? countTextInBlocks((_blocksObject$blockId11 = blocksObject[blockId]) === null || _blocksObject$blockId11 === void 0 ? void 0 : _blocksObject$blockId11.blocks) : '';\n      var resultText = typeof foundText === 'string' || foundText instanceof String ? foundText : '';\n      groupCharCount += props.data.ignoreSpaces ? countCharsWithoutSpaces(resultText) : countCharsWithSpaces(resultText);\n    });\n    return groupCharCount;\n  };\n  var showCharCounter = function showCharCounter() {\n    if (data_blocks) {\n      charCount = countTextInBlocks(data_blocks);\n    }\n  };\n  showCharCounter();\n  var counterClass = charCount < Math.ceil(props.data.maxChars / 1.05) ? 'info' : charCount < props.data.maxChars ? 'warning' : 'danger';\n  var counterComponent = props.data.maxChars ? __jsx(\"p\", {\n    className: cx('counter', counterClass),\n    onClick: function onClick() {\n      setSelectedBlock();\n      props.setSidebarTab(1);\n    },\n    \"aria-hidden\": \"true\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 5\n    }\n  }, props.data.maxChars - charCount < 0 ? __jsx(React.Fragment, null, __jsx(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 11\n    }\n  }, \"\".concat(charCount - props.data.maxChars, \" characters over the limit\")), __jsx(Icon, {\n    name: dissatisfiedSVG,\n    size: \"24px\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }\n  })) : __jsx(React.Fragment, null, __jsx(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 11\n    }\n  }, \"\".concat(props.data.maxChars - charCount, \" characters remaining out of \").concat(props.data.maxChars)), __jsx(Icon, {\n    name: delightedSVG,\n    size: \"24px\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 11\n    }\n  }))) : null;\n\n  // Get editing instructions from block settings or props\n  var instructions = (data === null || data === void 0 ? void 0 : (_data$instructions = data.instructions) === null || _data$instructions === void 0 ? void 0 : _data$instructions.data) || (data === null || data === void 0 ? void 0 : data.instructions);\n  if (!instructions || instructions === '<p><br/></p>') {\n    instructions = formDescription;\n  }\n  return __jsx(\"fieldset\", {\n    className: \"section-block\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 5\n    }\n  }, __jsx(\"legend\", {\n    onClick: function onClick() {\n      setSelectedBlock();\n      props.setSidebarTab(1);\n    },\n    \"aria-hidden\": \"true\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }\n  }, data.title || 'Section'), __jsx(BlocksForm, {\n    metadata: metadata,\n    properties: properties,\n    manage: manage,\n    selectedBlock: selected ? selectedBlock : null,\n    allowedBlocks: data.allowedBlocks,\n    title: data.placeholder,\n    description: instructions,\n    onSelectBlock: function onSelectBlock(id) {\n      setSelectedBlock(id);\n    },\n    onChangeFormData: function onChangeFormData(newFormData) {\n      onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n        data: newFormData\n      }));\n    },\n    onChangeField: function onChangeField(id, value) {\n      if (['blocks', 'blocks_layout'].indexOf(id) > -1) {\n        blockState[id] = value;\n        onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n          data: _objectSpread(_objectSpread({}, data.data), blockState)\n        }));\n      } else {\n        _onChangeField(id, value);\n      }\n    },\n    pathname: pathname,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }\n  }, function (_ref, editBlock, blockProps) {\n    var draginfo = _ref.draginfo;\n    return __jsx(EditBlockWrapper, {\n      draginfo: draginfo,\n      blockProps: blockProps,\n      disabled: data.disableInnerButtons,\n      extraControls: __jsx(React.Fragment, null, instructions && __jsx(React.Fragment, null, __jsx(Button, {\n        icon: true,\n        basic: true,\n        title: \"Section help\",\n        onClick: function onClick() {\n          setSelectedBlock();\n          var tab = manage ? 0 : 1;\n          props.setSidebarTab(tab);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 21\n        }\n      }, __jsx(Icon, {\n        name: helpSVG,\n        className: \"\",\n        size: \"19px\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 23\n        }\n      })))),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }\n    }, editBlock);\n  }), counterComponent, __jsx(SidebarPortal, {\n    selected: selected && !selectedBlock,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 7\n    }\n  }, instructions && __jsx(Segment, {\n    attached: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: instructions\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 13\n    }\n  })), !(data !== null && data !== void 0 && data.readOnlySettings) && __jsx(InlineForm, {\n    schema: EditSchema,\n    title: \"Section (Group) settings\",\n    formData: data,\n    onChangeField: function onChangeField(id, value) {\n      props.onChangeBlock(props.block, _objectSpread(_objectSpread({}, props.data), {}, _defineProperty({}, id, value)));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 11\n    }\n  })));\n};\n_s(Edit, \"oK+zcUQLvbo26Hh8dfvmPTahgdc=\");\n_c = Edit;\nEdit.propTypes = {\n  block: PropTypes.string.isRequired,\n  data: PropTypes.object.isRequired,\n  onChangeBlock: PropTypes.func.isRequired,\n  pathname: PropTypes.string.isRequired,\n  selected: PropTypes.bool.isRequired,\n  manage: PropTypes.bool.isRequired\n};\nexport default Edit;\nvar _c;\n$RefreshReg$(_c, \"Edit\");","map":{"version":3,"names":["React","useState","BlocksForm","SidebarPortal","Icon","InlineForm","emptyBlocksForm","delightedSVG","dissatisfiedSVG","PropTypes","Button","Segment","EditBlockWrapper","EditSchema","helpSVG","cx","Edit","props","block","data","onChangeBlock","onChangeField","pathname","selected","manage","formDescription","metadata","properties","data_blocks","blocks","blocks_layout","items","selectedBlock","setSelectedBlock","useEffect","blockState","charCount","countCharsWithoutSpaces","paragraph","regex","match","length","countCharsWithSpaces","countTextInBlocks","blocksObject","groupCharCount","maxChars","Object","keys","forEach","blockId","foundText","plaintext","text","resultText","String","ignoreSpaces","showCharCounter","counterClass","Math","ceil","counterComponent","setSidebarTab","instructions","title","allowedBlocks","placeholder","id","newFormData","value","indexOf","editBlock","blockProps","draginfo","disableInnerButtons","tab","__html","readOnlySettings","propTypes","string","isRequired","object","func","bool"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-group-block/src/components/manage/Blocks/Group/Edit.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { isEmpty } from 'lodash';\nimport {\n  BlocksForm,\n  SidebarPortal,\n  Icon,\n  InlineForm,\n} from '@plone/volto/components';\nimport { emptyBlocksForm } from '@plone/volto/helpers';\nimport delightedSVG from '@plone/volto/icons/delighted.svg';\nimport dissatisfiedSVG from '@plone/volto/icons/dissatisfied.svg';\nimport PropTypes from 'prop-types';\nimport { Button, Segment } from 'semantic-ui-react';\nimport EditBlockWrapper from './EditBlockWrapper';\nimport EditSchema from './EditSchema';\nimport helpSVG from '@plone/volto/icons/help.svg';\nimport cx from 'classnames';\nimport './editor.less';\n\nconst Edit = (props) => {\n  const {\n    block,\n    data,\n    onChangeBlock,\n    onChangeField,\n    pathname,\n    selected,\n    manage,\n    formDescription,\n  } = props;\n\n  const metadata = props.metadata || props.properties;\n  const data_blocks = data?.data?.blocks;\n  const properties = isEmpty(data_blocks) ? emptyBlocksForm() : data.data;\n\n  const [selectedBlock, setSelectedBlock] = useState(\n    properties.blocks_layout.items[0],\n  );\n\n  React.useEffect(() => {\n    if (\n      isEmpty(data_blocks) &&\n      properties.blocks_layout.items[0] !== selectedBlock\n    ) {\n      setSelectedBlock(properties.blocks_layout.items[0]);\n      onChangeBlock(block, {\n        ...data,\n        data: properties,\n      });\n    }\n  }, [onChangeBlock, properties, selectedBlock, block, data, data_blocks]);\n\n  const blockState = {};\n  let charCount = 0;\n\n  /**\n   * Count the number of characters that are anything except using Regex\n   * @param {string} paragraph\n   * @returns\n   */\n  const countCharsWithoutSpaces = (paragraph) => {\n    const regex = /[^\\s\\\\]/g;\n\n    return (paragraph.match(regex) || []).length;\n  };\n\n  /**\n   * Count the number of characters\n   * @param {string} paragraph\n   * @returns\n   */\n  const countCharsWithSpaces = (paragraph) => {\n    return paragraph?.length || 0;\n  };\n\n  /**\n   * Recursively look for any block that contains text or plaintext\n   * @param {Object} blocksObject\n   * @returns\n   */\n  const countTextInBlocks = (blocksObject) => {\n    let groupCharCount = 0;\n    if (!props.data.maxChars) {\n      return groupCharCount;\n    }\n\n    Object.keys(blocksObject).forEach((blockId) => {\n      const foundText = blocksObject[blockId]?.plaintext\n        ? blocksObject[blockId]?.plaintext\n        : blocksObject[blockId]?.text?.blocks[0]?.text\n        ? blocksObject[blockId].text.blocks[0].text\n        : blocksObject[blockId]?.data?.blocks\n        ? countTextInBlocks(blocksObject[blockId]?.data?.blocks)\n        : blocksObject[blockId]?.blocks\n        ? countTextInBlocks(blocksObject[blockId]?.blocks)\n        : '';\n      const resultText =\n        typeof foundText === 'string' || foundText instanceof String\n          ? foundText\n          : '';\n\n      groupCharCount += props.data.ignoreSpaces\n        ? countCharsWithoutSpaces(resultText)\n        : countCharsWithSpaces(resultText);\n    });\n\n    return groupCharCount;\n  };\n\n  const showCharCounter = () => {\n    if (data_blocks) {\n      charCount = countTextInBlocks(data_blocks);\n    }\n  };\n  showCharCounter();\n\n  const counterClass =\n    charCount < Math.ceil(props.data.maxChars / 1.05)\n      ? 'info'\n      : charCount < props.data.maxChars\n      ? 'warning'\n      : 'danger';\n\n  const counterComponent = props.data.maxChars ? (\n    <p\n      className={cx('counter', counterClass)}\n      onClick={() => {\n        setSelectedBlock();\n        props.setSidebarTab(1);\n      }}\n      aria-hidden=\"true\"\n    >\n      {props.data.maxChars - charCount < 0 ? (\n        <>\n          <span>{`${\n            charCount - props.data.maxChars\n          } characters over the limit`}</span>\n          <Icon name={dissatisfiedSVG} size=\"24px\" />\n        </>\n      ) : (\n        <>\n          <span>{`${\n            props.data.maxChars - charCount\n          } characters remaining out of ${props.data.maxChars}`}</span>\n          <Icon name={delightedSVG} size=\"24px\" />\n        </>\n      )}\n    </p>\n  ) : null;\n\n  // Get editing instructions from block settings or props\n  let instructions = data?.instructions?.data || data?.instructions;\n  if (!instructions || instructions === '<p><br/></p>') {\n    instructions = formDescription;\n  }\n\n  return (\n    <fieldset className=\"section-block\">\n      <legend\n        onClick={() => {\n          setSelectedBlock();\n          props.setSidebarTab(1);\n        }}\n        aria-hidden=\"true\"\n      >\n        {data.title || 'Section'}\n      </legend>\n      <BlocksForm\n        metadata={metadata}\n        properties={properties}\n        manage={manage}\n        selectedBlock={selected ? selectedBlock : null}\n        allowedBlocks={data.allowedBlocks}\n        title={data.placeholder}\n        description={instructions}\n        onSelectBlock={(id) => {\n          setSelectedBlock(id);\n        }}\n        onChangeFormData={(newFormData) => {\n          onChangeBlock(block, {\n            ...data,\n            data: newFormData,\n          });\n        }}\n        onChangeField={(id, value) => {\n          if (['blocks', 'blocks_layout'].indexOf(id) > -1) {\n            blockState[id] = value;\n            onChangeBlock(block, {\n              ...data,\n              data: {\n                ...data.data,\n                ...blockState,\n              },\n            });\n          } else {\n            onChangeField(id, value);\n          }\n        }}\n        pathname={pathname}\n      >\n        {({ draginfo }, editBlock, blockProps) => (\n          <EditBlockWrapper\n            draginfo={draginfo}\n            blockProps={blockProps}\n            disabled={data.disableInnerButtons}\n            extraControls={\n              <>\n                {instructions && (\n                  <>\n                    <Button\n                      icon\n                      basic\n                      title=\"Section help\"\n                      onClick={() => {\n                        setSelectedBlock();\n                        const tab = manage ? 0 : 1;\n                        props.setSidebarTab(tab);\n                      }}\n                    >\n                      <Icon name={helpSVG} className=\"\" size=\"19px\" />\n                    </Button>\n                  </>\n                )}\n              </>\n            }\n          >\n            {editBlock}\n          </EditBlockWrapper>\n        )}\n      </BlocksForm>\n\n      {counterComponent}\n      <SidebarPortal selected={selected && !selectedBlock}>\n        {instructions && (\n          <Segment attached>\n            <div dangerouslySetInnerHTML={{ __html: instructions }} />\n          </Segment>\n        )}\n        {!data?.readOnlySettings && (\n          <InlineForm\n            schema={EditSchema}\n            title=\"Section (Group) settings\"\n            formData={data}\n            onChangeField={(id, value) => {\n              props.onChangeBlock(props.block, {\n                ...props.data,\n                [id]: value,\n              });\n            }}\n          />\n        )}\n      </SidebarPortal>\n    </fieldset>\n  );\n};\n\nEdit.propTypes = {\n  block: PropTypes.string.isRequired,\n  data: PropTypes.object.isRequired,\n  onChangeBlock: PropTypes.func.isRequired,\n  pathname: PropTypes.string.isRequired,\n  selected: PropTypes.bool.isRequired,\n  manage: PropTypes.bool.isRequired,\n};\n\nexport default Edit;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}