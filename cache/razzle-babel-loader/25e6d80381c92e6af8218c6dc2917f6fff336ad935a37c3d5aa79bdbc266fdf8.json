{"ast":null,"code":"import _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n/**\n * Vocabularies actions.\n * @module actions/vocabularies/vocabularies\n */\n\nimport { GET_VOCABULARY, GET_VOCABULARY_TOKEN_TITLE } from '@plone/volto/constants/ActionTypes';\nimport { getVocabName } from '@plone/volto/helpers/Vocabularies/Vocabularies';\nimport qs from 'query-string';\n\n/**\n * Get vocabulary given a URL (coming from a Schema) or from a vocabulary name.\n * @function getVocabulary\n * @param {string} vocabNameOrURL Full API URL of vocabulary or vocabulary name\n * @param {string} query Only include results containing this string.\n * @param {number} start Start of result batch.\n * @param {number} b_size The size of the batch.\n * @param {string} subrequest Name of the subrequest.\n * @returns {Object} Get vocabulary action.\n */\nexport function getVocabulary(_ref) {\n  var vocabNameOrURL = _ref.vocabNameOrURL,\n    _ref$query = _ref.query,\n    query = _ref$query === void 0 ? null : _ref$query,\n    _ref$start = _ref.start,\n    start = _ref$start === void 0 ? 0 : _ref$start,\n    size = _ref.size,\n    subrequest = _ref.subrequest;\n  var vocabulary = getVocabName(vocabNameOrURL);\n  var queryString = \"b_start=\".concat(start).concat(size ? '&b_size=' + size : '');\n  if (query) {\n    queryString = \"\".concat(queryString, \"&title=\").concat(query);\n  }\n  return {\n    type: GET_VOCABULARY,\n    vocabulary: vocabNameOrURL,\n    start: start,\n    request: {\n      op: 'get',\n      path: \"/@vocabularies/\".concat(vocabulary, \"?\").concat(queryString)\n    },\n    subrequest: subrequest\n  };\n}\n\n/**\n * Get the title value given a token from vocabulary given a vocabulary URL\n * (coming from a Schema) or from a vocabulary name.\n * @function getVocabularyTokenTitle\n * @param {string} vocabNameOrURL Full API URL of vocabulary or vocabulary name\n * @param {string} token Only include results containing this string.\n * @returns {Object} Get vocabulary action.\n */\nexport function getVocabularyTokenTitle(_ref2) {\n  var vocabNameOrURL = _ref2.vocabNameOrURL,\n    _ref2$token = _ref2.token,\n    token = _ref2$token === void 0 ? null : _ref2$token,\n    _ref2$tokens = _ref2.tokens,\n    tokens = _ref2$tokens === void 0 ? null : _ref2$tokens,\n    subrequest = _ref2.subrequest;\n  // In case we have a URL, we have to get the vocabulary name\n  var vocabulary = getVocabName(vocabNameOrURL);\n  var queryString = _objectSpread(_objectSpread({}, token && {\n    token: token\n  }), tokens && {\n    tokens: tokens\n  });\n  return {\n    type: GET_VOCABULARY_TOKEN_TITLE,\n    vocabulary: vocabNameOrURL,\n    token: token,\n    tokens: tokens,\n    subrequest: subrequest,\n    request: {\n      op: 'get',\n      path: \"/@vocabularies/\".concat(vocabulary, \"?b_size=-1&\").concat(qs.stringify(queryString, {\n        encode: false\n      }))\n    }\n  };\n}","map":{"version":3,"names":["GET_VOCABULARY","GET_VOCABULARY_TOKEN_TITLE","getVocabName","qs","getVocabulary","vocabNameOrURL","query","start","size","subrequest","vocabulary","queryString","type","request","op","path","getVocabularyTokenTitle","token","tokens","stringify","encode"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/actions/vocabularies/vocabularies.js"],"sourcesContent":["/**\n * Vocabularies actions.\n * @module actions/vocabularies/vocabularies\n */\n\nimport {\n  GET_VOCABULARY,\n  GET_VOCABULARY_TOKEN_TITLE,\n} from '@plone/volto/constants/ActionTypes';\nimport { getVocabName } from '@plone/volto/helpers/Vocabularies/Vocabularies';\nimport qs from 'query-string';\n\n/**\n * Get vocabulary given a URL (coming from a Schema) or from a vocabulary name.\n * @function getVocabulary\n * @param {string} vocabNameOrURL Full API URL of vocabulary or vocabulary name\n * @param {string} query Only include results containing this string.\n * @param {number} start Start of result batch.\n * @param {number} b_size The size of the batch.\n * @param {string} subrequest Name of the subrequest.\n * @returns {Object} Get vocabulary action.\n */\nexport function getVocabulary({\n  vocabNameOrURL,\n  query = null,\n  start = 0,\n  size,\n  subrequest,\n}) {\n  const vocabulary = getVocabName(vocabNameOrURL);\n\n  let queryString = `b_start=${start}${size ? '&b_size=' + size : ''}`;\n\n  if (query) {\n    queryString = `${queryString}&title=${query}`;\n  }\n  return {\n    type: GET_VOCABULARY,\n    vocabulary: vocabNameOrURL,\n    start,\n    request: {\n      op: 'get',\n      path: `/@vocabularies/${vocabulary}?${queryString}`,\n    },\n    subrequest,\n  };\n}\n\n/**\n * Get the title value given a token from vocabulary given a vocabulary URL\n * (coming from a Schema) or from a vocabulary name.\n * @function getVocabularyTokenTitle\n * @param {string} vocabNameOrURL Full API URL of vocabulary or vocabulary name\n * @param {string} token Only include results containing this string.\n * @returns {Object} Get vocabulary action.\n */\nexport function getVocabularyTokenTitle({\n  vocabNameOrURL,\n  token = null,\n  tokens = null,\n  subrequest,\n}) {\n  // In case we have a URL, we have to get the vocabulary name\n  const vocabulary = getVocabName(vocabNameOrURL);\n  const queryString = {\n    ...(token && { token }),\n    ...(tokens && { tokens }),\n  };\n\n  return {\n    type: GET_VOCABULARY_TOKEN_TITLE,\n    vocabulary: vocabNameOrURL,\n    token,\n    tokens,\n    subrequest,\n    request: {\n      op: 'get',\n      path: `/@vocabularies/${vocabulary}?b_size=-1&${qs.stringify(\n        queryString,\n        {\n          encode: false,\n        },\n      )}`,\n    },\n  };\n}\n"],"mappings":";AAAA;AACA;AACA;AACA;;AAEA,SACEA,cAAc,EACdC,0BAA0B,QACrB,oCAAoC;AAC3C,SAASC,YAAY,QAAQ,gDAAgD;AAC7E,OAAOC,EAAE,MAAM,cAAc;;AAE7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAa,OAM1B;EAAA,IALDC,cAAc,QAAdA,cAAc;IAAA,kBACdC,KAAK;IAALA,KAAK,2BAAG,IAAI;IAAA,kBACZC,KAAK;IAALA,KAAK,2BAAG,CAAC;IACTC,IAAI,QAAJA,IAAI;IACJC,UAAU,QAAVA,UAAU;EAEV,IAAMC,UAAU,GAAGR,YAAY,CAACG,cAAc,CAAC;EAE/C,IAAIM,WAAW,qBAAcJ,KAAK,SAAGC,IAAI,GAAG,UAAU,GAAGA,IAAI,GAAG,EAAE,CAAE;EAEpE,IAAIF,KAAK,EAAE;IACTK,WAAW,aAAMA,WAAW,oBAAUL,KAAK,CAAE;EAC/C;EACA,OAAO;IACLM,IAAI,EAAEZ,cAAc;IACpBU,UAAU,EAAEL,cAAc;IAC1BE,KAAK,EAALA,KAAK;IACLM,OAAO,EAAE;MACPC,EAAE,EAAE,KAAK;MACTC,IAAI,2BAAoBL,UAAU,cAAIC,WAAW;IACnD,CAAC;IACDF,UAAU,EAAVA;EACF,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASO,uBAAuB,QAKpC;EAAA,IAJDX,cAAc,SAAdA,cAAc;IAAA,oBACdY,KAAK;IAALA,KAAK,4BAAG,IAAI;IAAA,qBACZC,MAAM;IAANA,MAAM,6BAAG,IAAI;IACbT,UAAU,SAAVA,UAAU;EAEV;EACA,IAAMC,UAAU,GAAGR,YAAY,CAACG,cAAc,CAAC;EAC/C,IAAMM,WAAW,mCACXM,KAAK,IAAI;IAAEA,KAAK,EAALA;EAAM,CAAC,GAClBC,MAAM,IAAI;IAAEA,MAAM,EAANA;EAAO,CAAC,CACzB;EAED,OAAO;IACLN,IAAI,EAAEX,0BAA0B;IAChCS,UAAU,EAAEL,cAAc;IAC1BY,KAAK,EAALA,KAAK;IACLC,MAAM,EAANA,MAAM;IACNT,UAAU,EAAVA,UAAU;IACVI,OAAO,EAAE;MACPC,EAAE,EAAE,KAAK;MACTC,IAAI,2BAAoBL,UAAU,wBAAcP,EAAE,CAACgB,SAAS,CAC1DR,WAAW,EACX;QACES,MAAM,EAAE;MACV,CAAC,CACF;IACH;EACF,CAAC;AACH"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}