{"ast":null,"code":"import _uniqBy from \"lodash/uniqBy\";\nimport _map from \"lodash/map\";\nimport _last from \"lodash/last\";\nimport _filter from \"lodash/filter\";\nimport _concat from \"lodash/concat\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Controlpanels/Controlpanels.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n/**\n * Controlpanels component.\n * @module components/manage/Controlpanels/Controlpanels\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { Portal } from 'react-portal';\nimport { Helmet } from '@plone/volto/helpers';\nimport { Container, Grid, Header, Segment } from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport { listControlpanels, getSystemInformation } from '@plone/volto/actions';\nimport { Error, Icon, Toolbar, VersionOverview } from '@plone/volto/components';\nimport config from '@plone/volto/registry';\nimport backSVG from '@plone/volto/icons/back.svg';\nconst messages = defineMessages({\n  sitesetup: {\n    \"id\": \"Site Setup\",\n    \"defaultMessage\": \"Site Setup\"\n  },\n  back: {\n    \"id\": \"Back\",\n    \"defaultMessage\": \"Back\"\n  },\n  versionoverview: {\n    \"id\": \"Version Overview\",\n    \"defaultMessage\": \"Version Overview\"\n  },\n  general: {\n    \"id\": \"General\",\n    \"defaultMessage\": \"General\"\n  },\n  addonconfiguration: {\n    \"id\": \"Add-on Configuration\",\n    \"defaultMessage\": \"Add-on Configuration\"\n  },\n  content: {\n    \"id\": \"Content\",\n    \"defaultMessage\": \"Content\"\n  },\n  moderatecomments: {\n    \"id\": \"Moderate Comments\",\n    \"defaultMessage\": \"Moderate Comments\"\n  },\n  usersandgroups: {\n    \"id\": \"Users and Groups\",\n    \"defaultMessage\": \"Users and Groups\"\n  },\n  usersControlPanelCategory: {\n    \"id\": \"Users\",\n    \"defaultMessage\": \"Users\"\n  },\n  users: {\n    \"id\": \"Users\",\n    \"defaultMessage\": \"Users\"\n  },\n  groups: {\n    \"id\": \"Groups\",\n    \"defaultMessage\": \"Groups\"\n  },\n  addons: {\n    \"id\": \"Add-Ons\",\n    \"defaultMessage\": \"Add-Ons\"\n  },\n  database: {\n    \"id\": \"Database\",\n    \"defaultMessage\": \"Database\"\n  },\n  usergroupmemberbership: {\n    \"id\": \"User Group Membership\",\n    \"defaultMessage\": \"User Group Membership\"\n  },\n  undo: {\n    \"id\": \"Undo\",\n    \"defaultMessage\": \"Undo\"\n  },\n  urlmanagement: {\n    \"id\": \"URL Management\",\n    \"defaultMessage\": \"URL Management\"\n  },\n  contentRules: {\n    \"id\": \"Content Rules\",\n    \"defaultMessage\": \"Content Rules\"\n  }\n});\n\n/**\n * Controlpanels container class.\n * @class Controlpanels\n * @extends Component\n */\nclass Controlpanels extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs EditComponent\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isClient: false\n    };\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.listControlpanels();\n    this.props.getSystemInformation();\n    this.setState({\n      isClient: true\n    });\n  }\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    // Error\n    if (this.props.controlpanelsRequest.loading && nextProps.controlpanelsRequest.error) {\n      this.setState({\n        error: nextProps.controlpanelsRequest.error\n      });\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    // Error\n    if (this.state.error) {\n      return __jsx(Error, {\n        error: this.state.error,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 14\n        }\n      });\n    }\n    let customcontrolpanels = config.settings.controlpanels ? config.settings.controlpanels.map(el => {\n      el.group = this.props.intl.formatMessage({\n        id: el.group,\n        defaultMessage: el.group\n      }) || el.group;\n      return el;\n    }) : [];\n    const controlpanels = _map(_concat(this.props.controlpanels, customcontrolpanels, [{\n      '@id': '/addons',\n      group: this.props.intl.formatMessage(messages.general),\n      title: this.props.intl.formatMessage(messages.addons)\n    }, {\n      '@id': '/database',\n      group: this.props.intl.formatMessage(messages.general),\n      title: this.props.intl.formatMessage(messages.database)\n    }, {\n      '@id': '/rules',\n      group: this.props.intl.formatMessage(messages.content),\n      title: this.props.intl.formatMessage(messages.contentRules)\n    }, {\n      '@id': '/undo',\n      group: this.props.intl.formatMessage(messages.general),\n      title: this.props.intl.formatMessage(messages.undo)\n    }, {\n      '@id': '/aliases',\n      group: this.props.intl.formatMessage(messages.general),\n      title: this.props.intl.formatMessage(messages.urlmanagement)\n    }, {\n      '@id': '/moderate-comments',\n      group: this.props.intl.formatMessage(messages.content),\n      title: this.props.intl.formatMessage(messages.moderatecomments)\n    }, {\n      '@id': '/users',\n      group: this.props.intl.formatMessage(messages.usersControlPanelCategory),\n      title: this.props.intl.formatMessage(messages.users)\n    }, {\n      '@id': '/usergroupmembership',\n      group: this.props.intl.formatMessage(messages.usersControlPanelCategory),\n      title: this.props.intl.formatMessage(messages.usergroupmemberbership)\n    }, {\n      '@id': '/groups',\n      group: this.props.intl.formatMessage(messages.usersControlPanelCategory),\n      title: this.props.intl.formatMessage(messages.groups)\n    }]), controlpanel => _objectSpread(_objectSpread({}, controlpanel), {}, {\n      id: _last(controlpanel['@id'].split('/'))\n    }));\n    const groups = _map(_uniqBy(controlpanels, 'group'), 'group');\n    const {\n      controlPanelsIcons: icons\n    } = config.settings;\n    return __jsx(\"div\", {\n      className: \"view-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 7\n      }\n    }, __jsx(Helmet, {\n      title: this.props.intl.formatMessage(messages.sitesetup),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 9\n      }\n    }), __jsx(Container, {\n      className: \"controlpanel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }\n    }, __jsx(Segment.Group, {\n      raised: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 11\n      }\n    }, __jsx(Segment, {\n      className: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 13\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Site Setup\",\n      defaultMessage: \"Site Setup\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 15\n      }\n    })), _map(groups, group => [__jsx(Segment, {\n      key: `header-${group}`,\n      secondary: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 15\n      }\n    }, group), __jsx(Segment, {\n      key: `body-${group}`,\n      attached: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 15\n      }\n    }, __jsx(Grid, {\n      columns: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 17\n      }\n    }, __jsx(Grid.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 19\n      }\n    }, _map(_filter(controlpanels, {\n      group\n    }), controlpanel => __jsx(Grid.Column, {\n      key: controlpanel.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 23\n      }\n    }, __jsx(Link, {\n      to: `/controlpanel/${controlpanel.id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 25\n      }\n    }, __jsx(Header, {\n      as: \"h3\",\n      icon: true,\n      textAlign: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 27\n      }\n    }, __jsx(Icon, {\n      name: (icons === null || icons === void 0 ? void 0 : icons[controlpanel.id]) || icons.default,\n      size: \"48px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 29\n      }\n    }), __jsx(Header.Content, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 29\n      }\n    }, controlpanel.title))))))))])), __jsx(Segment.Group, {\n      raised: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 11\n      }\n    }, __jsx(Segment, {\n      className: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 13\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Version Overview\",\n      defaultMessage: \"Version Overview\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 15\n      }\n    })), __jsx(Segment, {\n      attached: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 13\n      }\n    }, this.props.systemInformation ? __jsx(VersionOverview, _extends({}, this.props.systemInformation, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 17\n      }\n    })) : null))), this.state.isClient && __jsx(Portal, {\n      node: document.getElementById('toolbar'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 11\n      }\n    }, __jsx(Toolbar, {\n      pathname: this.props.pathname,\n      hideDefaultViewButtons: true,\n      inner: __jsx(Link, {\n        to: \"/\",\n        className: \"item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 17\n        }\n      }, __jsx(Icon, {\n        name: backSVG,\n        className: \"contents circled\",\n        size: \"30px\",\n        title: this.props.intl.formatMessage(messages.back),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 19\n        }\n      })),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 13\n      }\n    })));\n  }\n}\n_defineProperty(Controlpanels, \"propTypes\", {\n  listControlpanels: PropTypes.func.isRequired,\n  controlpanels: PropTypes.arrayOf(PropTypes.shape({\n    '@id': PropTypes.string,\n    group: PropTypes.string,\n    title: PropTypes.string\n  })).isRequired,\n  pathname: PropTypes.string.isRequired\n});\nexport default compose(injectIntl, connect((state, props) => ({\n  controlpanels: state.controlpanels.controlpanels,\n  controlpanelsRequest: state.controlpanels.list,\n  pathname: props.location.pathname,\n  systemInformation: state.controlpanels.systeminformation\n}), {\n  listControlpanels,\n  getSystemInformation\n}))(Controlpanels);","map":{"version":3,"names":["React","Component","PropTypes","connect","compose","Link","Portal","Helmet","Container","Grid","Header","Segment","FormattedMessage","defineMessages","injectIntl","listControlpanels","getSystemInformation","Error","Icon","Toolbar","VersionOverview","config","backSVG","messages","sitesetup","back","versionoverview","general","addonconfiguration","content","moderatecomments","usersandgroups","usersControlPanelCategory","users","groups","addons","database","usergroupmemberbership","undo","urlmanagement","contentRules","Controlpanels","constructor","props","state","error","isClient","componentDidMount","setState","UNSAFE_componentWillReceiveProps","nextProps","controlpanelsRequest","loading","render","customcontrolpanels","settings","controlpanels","map","el","group","intl","formatMessage","id","defaultMessage","title","controlpanel","split","controlPanelsIcons","icons","default","systemInformation","document","getElementById","pathname","func","isRequired","arrayOf","shape","string","list","location","systeminformation"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Controlpanels/Controlpanels.jsx"],"sourcesContent":["/**\n * Controlpanels component.\n * @module components/manage/Controlpanels/Controlpanels\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { concat, filter, last, map, uniqBy } from 'lodash';\nimport { Portal } from 'react-portal';\nimport { Helmet } from '@plone/volto/helpers';\nimport { Container, Grid, Header, Segment } from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\n\nimport { listControlpanels, getSystemInformation } from '@plone/volto/actions';\nimport { Error, Icon, Toolbar, VersionOverview } from '@plone/volto/components';\n\nimport config from '@plone/volto/registry';\n\nimport backSVG from '@plone/volto/icons/back.svg';\n\nconst messages = defineMessages({\n  sitesetup: {\n    id: 'Site Setup',\n    defaultMessage: 'Site Setup',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  versionoverview: {\n    id: 'Version Overview',\n    defaultMessage: 'Version Overview',\n  },\n  general: {\n    id: 'General',\n    defaultMessage: 'General',\n  },\n  addonconfiguration: {\n    id: 'Add-on Configuration',\n    defaultMessage: 'Add-on Configuration',\n  },\n  content: {\n    id: 'Content',\n    defaultMessage: 'Content',\n  },\n  moderatecomments: {\n    id: 'Moderate Comments',\n    defaultMessage: 'Moderate Comments',\n  },\n  usersandgroups: {\n    id: 'Users and Groups',\n    defaultMessage: 'Users and Groups',\n  },\n  usersControlPanelCategory: {\n    id: 'Users',\n    defaultMessage: 'Users',\n  },\n  users: {\n    id: 'Users',\n    defaultMessage: 'Users',\n  },\n  groups: {\n    id: 'Groups',\n    defaultMessage: 'Groups',\n  },\n  addons: {\n    id: 'Add-Ons',\n    defaultMessage: 'Add-Ons',\n  },\n  database: {\n    id: 'Database',\n    defaultMessage: 'Database',\n  },\n  usergroupmemberbership: {\n    id: 'User Group Membership',\n    defaultMessage: 'User Group Membership',\n  },\n  undo: {\n    id: 'Undo',\n    defaultMessage: 'Undo',\n  },\n  urlmanagement: {\n    id: 'URL Management',\n    defaultMessage: 'URL Management',\n  },\n  contentRules: {\n    id: 'Content Rules',\n    defaultMessage: 'Content Rules',\n  },\n});\n\n/**\n * Controlpanels container class.\n * @class Controlpanels\n * @extends Component\n */\nclass Controlpanels extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    listControlpanels: PropTypes.func.isRequired,\n    controlpanels: PropTypes.arrayOf(\n      PropTypes.shape({\n        '@id': PropTypes.string,\n        group: PropTypes.string,\n        title: PropTypes.string,\n      }),\n    ).isRequired,\n    pathname: PropTypes.string.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs EditComponent\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isClient: false,\n    };\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.listControlpanels();\n    this.props.getSystemInformation();\n    this.setState({ isClient: true });\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    // Error\n    if (\n      this.props.controlpanelsRequest.loading &&\n      nextProps.controlpanelsRequest.error\n    ) {\n      this.setState({\n        error: nextProps.controlpanelsRequest.error,\n      });\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    // Error\n    if (this.state.error) {\n      return <Error error={this.state.error} />;\n    }\n\n    let customcontrolpanels = config.settings.controlpanels\n      ? config.settings.controlpanels.map((el) => {\n          el.group =\n            this.props.intl.formatMessage({\n              id: el.group,\n              defaultMessage: el.group,\n            }) || el.group;\n          return el;\n        })\n      : [];\n    const controlpanels = map(\n      concat(this.props.controlpanels, customcontrolpanels, [\n        {\n          '@id': '/addons',\n          group: this.props.intl.formatMessage(messages.general),\n          title: this.props.intl.formatMessage(messages.addons),\n        },\n        {\n          '@id': '/database',\n          group: this.props.intl.formatMessage(messages.general),\n          title: this.props.intl.formatMessage(messages.database),\n        },\n        {\n          '@id': '/rules',\n          group: this.props.intl.formatMessage(messages.content),\n          title: this.props.intl.formatMessage(messages.contentRules),\n        },\n        {\n          '@id': '/undo',\n          group: this.props.intl.formatMessage(messages.general),\n          title: this.props.intl.formatMessage(messages.undo),\n        },\n        {\n          '@id': '/aliases',\n          group: this.props.intl.formatMessage(messages.general),\n          title: this.props.intl.formatMessage(messages.urlmanagement),\n        },\n        {\n          '@id': '/moderate-comments',\n          group: this.props.intl.formatMessage(messages.content),\n          title: this.props.intl.formatMessage(messages.moderatecomments),\n        },\n        {\n          '@id': '/users',\n          group: this.props.intl.formatMessage(\n            messages.usersControlPanelCategory,\n          ),\n          title: this.props.intl.formatMessage(messages.users),\n        },\n        {\n          '@id': '/usergroupmembership',\n          group: this.props.intl.formatMessage(\n            messages.usersControlPanelCategory,\n          ),\n          title: this.props.intl.formatMessage(messages.usergroupmemberbership),\n        },\n        {\n          '@id': '/groups',\n          group: this.props.intl.formatMessage(\n            messages.usersControlPanelCategory,\n          ),\n          title: this.props.intl.formatMessage(messages.groups),\n        },\n      ]),\n      (controlpanel) => ({\n        ...controlpanel,\n        id: last(controlpanel['@id'].split('/')),\n      }),\n    );\n    const groups = map(uniqBy(controlpanels, 'group'), 'group');\n    const { controlPanelsIcons: icons } = config.settings;\n\n    return (\n      <div className=\"view-wrapper\">\n        <Helmet title={this.props.intl.formatMessage(messages.sitesetup)} />\n        <Container className=\"controlpanel\">\n          <Segment.Group raised>\n            <Segment className=\"primary\">\n              <FormattedMessage id=\"Site Setup\" defaultMessage=\"Site Setup\" />\n            </Segment>\n            {map(groups, (group) => [\n              <Segment key={`header-${group}`} secondary>\n                {group}\n              </Segment>,\n              <Segment key={`body-${group}`} attached>\n                <Grid columns={6}>\n                  <Grid.Row>\n                    {map(filter(controlpanels, { group }), (controlpanel) => (\n                      <Grid.Column key={controlpanel.id}>\n                        <Link to={`/controlpanel/${controlpanel.id}`}>\n                          <Header as=\"h3\" icon textAlign=\"center\">\n                            <Icon\n                              name={icons?.[controlpanel.id] || icons.default}\n                              size=\"48px\"\n                            />\n                            <Header.Content>\n                              {controlpanel.title}\n                            </Header.Content>\n                          </Header>\n                        </Link>\n                      </Grid.Column>\n                    ))}\n                  </Grid.Row>\n                </Grid>\n              </Segment>,\n            ])}\n          </Segment.Group>\n          <Segment.Group raised>\n            <Segment className=\"primary\">\n              <FormattedMessage\n                id=\"Version Overview\"\n                defaultMessage=\"Version Overview\"\n              />\n            </Segment>\n            <Segment attached>\n              {this.props.systemInformation ? (\n                <VersionOverview {...this.props.systemInformation} />\n              ) : null}\n            </Segment>\n          </Segment.Group>\n        </Container>\n        {this.state.isClient && (\n          <Portal node={document.getElementById('toolbar')}>\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={\n                <Link to=\"/\" className=\"item\">\n                  <Icon\n                    name={backSVG}\n                    className=\"contents circled\"\n                    size=\"30px\"\n                    title={this.props.intl.formatMessage(messages.back)}\n                  />\n                </Link>\n              }\n            />\n          </Portal>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      controlpanels: state.controlpanels.controlpanels,\n      controlpanelsRequest: state.controlpanels.list,\n      pathname: props.location.pathname,\n      systemInformation: state.controlpanels.systeminformation,\n    }),\n    { listControlpanels, getSystemInformation },\n  ),\n)(Controlpanels);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Site Setup","defaultMessage":"Site Setup"},{"id":"Back","defaultMessage":"Back"},{"id":"Version Overview","defaultMessage":"Version Overview"},{"id":"General","defaultMessage":"General"},{"id":"Add-on Configuration","defaultMessage":"Add-on Configuration"},{"id":"Content","defaultMessage":"Content"},{"id":"Moderate Comments","defaultMessage":"Moderate Comments"},{"id":"Users and Groups","defaultMessage":"Users and Groups"},{"id":"Users","defaultMessage":"Users"},{"id":"Groups","defaultMessage":"Groups"},{"id":"Add-Ons","defaultMessage":"Add-Ons"},{"id":"Database","defaultMessage":"Database"},{"id":"User Group Membership","defaultMessage":"User Group Membership"},{"id":"Undo","defaultMessage":"Undo"},{"id":"URL Management","defaultMessage":"URL Management"},{"id":"Content Rules","defaultMessage":"Content Rules"}]}},"sourceType":"module","externalDependencies":[]}