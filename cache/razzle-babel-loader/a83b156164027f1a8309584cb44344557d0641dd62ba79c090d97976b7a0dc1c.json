{"ast":null,"code":"import _toConsumableArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport config from '@plone/volto/registry';\nvar ImageCard = function ImageCard() {\n  return {\n    title: 'Image Card',\n    fieldsets: [{\n      id: 'default',\n      title: 'Default',\n      fields: ['title', 'text', 'attachedimage', 'link', 'copyright']\n    }],\n    properties: {\n      title: {\n        type: 'string',\n        title: 'Title'\n      },\n      text: {\n        widget: 'slate_richtext',\n        title: 'Text'\n      },\n      link: {\n        widget: 'url',\n        title: 'Link'\n      },\n      attachedimage: {\n        widget: 'attachedimage',\n        title: 'Image'\n      },\n      copyright: {\n        widget: 'slate_richtext',\n        title: 'Copyright'\n      }\n    },\n    required: ['attachedimage']\n  };\n};\n_c = ImageCard;\nvar ImageCards = function ImageCards(props) {\n  var display_types_obj = config.blocks.blocksConfig.imagecards.blockRenderers;\n  var display_types = Object.keys(display_types_obj).map(function (template) {\n    return [template, display_types_obj[template].title || template];\n  });\n  var selected_renderer = props && props.data.display;\n  var schema = selected_renderer && display_types_obj[selected_renderer].schema || ImageCard;\n  return {\n    title: 'Image Cards',\n    fieldsets: [{\n      id: 'default',\n      title: 'Default',\n      fields: ['title', 'text', 'display', 'align', 'image_scale', 'cards']\n    }],\n    properties: {\n      title: {\n        type: 'string',\n        title: 'Title'\n      },\n      text: {\n        widget: 'slate_richtext',\n        title: 'Text'\n      },\n      display: {\n        title: 'Display',\n        choices: _toConsumableArray(display_types),\n        \"default\": 'carousel'\n      },\n      cards: {\n        widget: 'object_list',\n        title: 'Images',\n        description: 'Add a list of Images as Carousel Items',\n        schema: schema()\n      },\n      image_scale: {\n        type: 'string',\n        title: 'Image scale',\n        \"default\": 'large'\n      },\n      align: {\n        title: 'Alignment',\n        widget: 'align',\n        type: 'string'\n      }\n    },\n    required: ['display', 'cards']\n  };\n};\n_c2 = ImageCards;\nexport default ImageCards;\nvar _c, _c2;\n$RefreshReg$(_c, \"ImageCard\");\n$RefreshReg$(_c2, \"ImageCards\");","map":{"version":3,"names":["config","ImageCard","title","fieldsets","id","fields","properties","type","text","widget","link","attachedimage","copyright","required","ImageCards","props","display_types_obj","blocks","blocksConfig","imagecards","blockRenderers","display_types","Object","keys","map","template","selected_renderer","data","display","schema","choices","cards","description","image_scale","align"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-block-image-cards/src/ImageCards/schema.jsx"],"sourcesContent":["import config from '@plone/volto/registry';\n\nconst ImageCard = () => ({\n  title: 'Image Card',\n  fieldsets: [\n    {\n      id: 'default',\n      title: 'Default',\n      fields: ['title', 'text', 'attachedimage', 'link', 'copyright'],\n    },\n  ],\n\n  properties: {\n    title: {\n      type: 'string',\n      title: 'Title',\n    },\n    text: {\n      widget: 'slate_richtext',\n      title: 'Text',\n    },\n    link: {\n      widget: 'url',\n      title: 'Link',\n    },\n    attachedimage: {\n      widget: 'attachedimage',\n      title: 'Image',\n    },\n    copyright: {\n      widget: 'slate_richtext',\n      title: 'Copyright',\n    },\n  },\n\n  required: ['attachedimage'],\n});\n\nconst ImageCards = (props) => {\n  const display_types_obj =\n    config.blocks.blocksConfig.imagecards.blockRenderers;\n  const display_types = Object.keys(display_types_obj).map((template) => [\n    template,\n    display_types_obj[template].title || template,\n  ]);\n  const selected_renderer = props && props.data.display;\n  const schema =\n    (selected_renderer && display_types_obj[selected_renderer].schema) ||\n    ImageCard;\n\n  return {\n    title: 'Image Cards',\n\n    fieldsets: [\n      {\n        id: 'default',\n        title: 'Default',\n        fields: ['title', 'text', 'display', 'align', 'image_scale', 'cards'],\n      },\n    ],\n\n    properties: {\n      title: {\n        type: 'string',\n        title: 'Title',\n      },\n      text: {\n        widget: 'slate_richtext',\n        title: 'Text',\n      },\n      display: {\n        title: 'Display',\n        choices: [...display_types],\n        default: 'carousel',\n      },\n      cards: {\n        widget: 'object_list',\n        title: 'Images',\n        description: 'Add a list of Images as Carousel Items',\n        schema: schema(),\n      },\n      image_scale: {\n        type: 'string',\n        title: 'Image scale',\n        default: 'large',\n      },\n      align: {\n        title: 'Alignment',\n        widget: 'align',\n        type: 'string',\n      },\n    },\n\n    required: ['display', 'cards'],\n  };\n};\n\nexport default ImageCards;\n"],"mappings":";AAAA,OAAOA,MAAM,MAAM,uBAAuB;AAE1C,IAAMC,SAAS,GAAG,SAAZA,SAAS;EAAA,OAAU;IACvBC,KAAK,EAAE,YAAY;IACnBC,SAAS,EAAE,CACT;MACEC,EAAE,EAAE,SAAS;MACbF,KAAK,EAAE,SAAS;MAChBG,MAAM,EAAE,CAAC,OAAO,EAAE,MAAM,EAAE,eAAe,EAAE,MAAM,EAAE,WAAW;IAChE,CAAC,CACF;IAEDC,UAAU,EAAE;MACVJ,KAAK,EAAE;QACLK,IAAI,EAAE,QAAQ;QACdL,KAAK,EAAE;MACT,CAAC;MACDM,IAAI,EAAE;QACJC,MAAM,EAAE,gBAAgB;QACxBP,KAAK,EAAE;MACT,CAAC;MACDQ,IAAI,EAAE;QACJD,MAAM,EAAE,KAAK;QACbP,KAAK,EAAE;MACT,CAAC;MACDS,aAAa,EAAE;QACbF,MAAM,EAAE,eAAe;QACvBP,KAAK,EAAE;MACT,CAAC;MACDU,SAAS,EAAE;QACTH,MAAM,EAAE,gBAAgB;QACxBP,KAAK,EAAE;MACT;IACF,CAAC;IAEDW,QAAQ,EAAE,CAAC,eAAe;EAC5B,CAAC;AAAA,CAAC;AAAC,KAlCGZ,SAAS;AAoCf,IAAMa,UAAU,GAAG,SAAbA,UAAU,CAAIC,KAAK,EAAK;EAC5B,IAAMC,iBAAiB,GACrBhB,MAAM,CAACiB,MAAM,CAACC,YAAY,CAACC,UAAU,CAACC,cAAc;EACtD,IAAMC,aAAa,GAAGC,MAAM,CAACC,IAAI,CAACP,iBAAiB,CAAC,CAACQ,GAAG,CAAC,UAACC,QAAQ;IAAA,OAAK,CACrEA,QAAQ,EACRT,iBAAiB,CAACS,QAAQ,CAAC,CAACvB,KAAK,IAAIuB,QAAQ,CAC9C;EAAA,EAAC;EACF,IAAMC,iBAAiB,GAAGX,KAAK,IAAIA,KAAK,CAACY,IAAI,CAACC,OAAO;EACrD,IAAMC,MAAM,GACTH,iBAAiB,IAAIV,iBAAiB,CAACU,iBAAiB,CAAC,CAACG,MAAM,IACjE5B,SAAS;EAEX,OAAO;IACLC,KAAK,EAAE,aAAa;IAEpBC,SAAS,EAAE,CACT;MACEC,EAAE,EAAE,SAAS;MACbF,KAAK,EAAE,SAAS;MAChBG,MAAM,EAAE,CAAC,OAAO,EAAE,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,aAAa,EAAE,OAAO;IACtE,CAAC,CACF;IAEDC,UAAU,EAAE;MACVJ,KAAK,EAAE;QACLK,IAAI,EAAE,QAAQ;QACdL,KAAK,EAAE;MACT,CAAC;MACDM,IAAI,EAAE;QACJC,MAAM,EAAE,gBAAgB;QACxBP,KAAK,EAAE;MACT,CAAC;MACD0B,OAAO,EAAE;QACP1B,KAAK,EAAE,SAAS;QAChB4B,OAAO,qBAAMT,aAAa,CAAC;QAC3B,WAAS;MACX,CAAC;MACDU,KAAK,EAAE;QACLtB,MAAM,EAAE,aAAa;QACrBP,KAAK,EAAE,QAAQ;QACf8B,WAAW,EAAE,wCAAwC;QACrDH,MAAM,EAAEA,MAAM;MAChB,CAAC;MACDI,WAAW,EAAE;QACX1B,IAAI,EAAE,QAAQ;QACdL,KAAK,EAAE,aAAa;QACpB,WAAS;MACX,CAAC;MACDgC,KAAK,EAAE;QACLhC,KAAK,EAAE,WAAW;QAClBO,MAAM,EAAE,OAAO;QACfF,IAAI,EAAE;MACR;IACF,CAAC;IAEDM,QAAQ,EAAE,CAAC,SAAS,EAAE,OAAO;EAC/B,CAAC;AACH,CAAC;AAAC,MAzDIC,UAAU;AA2DhB,eAAeA,UAAU;AAAC;AAAA;AAAA"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}