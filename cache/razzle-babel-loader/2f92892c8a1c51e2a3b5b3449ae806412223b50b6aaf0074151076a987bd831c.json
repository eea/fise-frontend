{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-metadata-block/src/components/manage/Blocks/Metadata/Edit.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport React, { useState } from 'react';\nimport cx from 'classnames';\nimport { useSelector } from 'react-redux';\nimport { Field } from '@plone/volto/components';\nimport { SelectMetadataBlock } from '@eeacms/volto-metadata-block/widgets';\nimport '@eeacms/volto-metadata-block/less/editor.less';\nconst EditMetadataBlock = props => {\n  var _data$data, _schema$required;\n  const {\n    selected,\n    block,\n    onSelectBlock,\n    data,\n    onChangeBlock,\n    onChangeField,\n    properties,\n    metadata\n  } = props;\n  const {\n    0: metadata_id,\n    1: setMetadata_id\n  } = useState(data === null || data === void 0 ? void 0 : (_data$data = data.data) === null || _data$data === void 0 ? void 0 : _data$data.id);\n  const schema = useSelector(state => {\n    var _state$schema;\n    return (state === null || state === void 0 ? void 0 : (_state$schema = state.schema) === null || _state$schema === void 0 ? void 0 : _state$schema.schema) || {};\n  });\n  let metadata_element = {};\n  metadata ? metadata_element = _objectSpread({}, metadata) : metadata_element = _objectSpread({}, properties);\n  const onMetadataSelect = React.useCallback((event, select) => {\n    const {\n      value\n    } = select;\n    onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n      data: value\n    }));\n    setMetadata_id(value.id);\n  }, [block, data, onChangeBlock]);\n  const field = schema.properties ? schema.properties[metadata_id] : null;\n  const required = schema === null || schema === void 0 ? void 0 : (_schema$required = schema.required) === null || _schema$required === void 0 ? void 0 : _schema$required.includes(metadata_id);\n  return __jsx(\"div\", {\n    className: cx('block metadata', {\n      selected: selected\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, field ? __jsx(Field, _extends({}, field, {\n    id: metadata_id,\n    value: metadata_element[metadata_id],\n    required: required,\n    onChange: (id, value) => {\n      onChangeField(id, value);\n    },\n    key: metadata_id,\n    block: block,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  })) : __jsx(SelectMetadataBlock, {\n    onChange: onMetadataSelect,\n    onOpen: () => onSelectBlock(block),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }));\n};\nexport default EditMetadataBlock;","map":{"version":3,"names":["React","useState","cx","useSelector","Field","SelectMetadataBlock","EditMetadataBlock","props","selected","block","onSelectBlock","data","onChangeBlock","onChangeField","properties","metadata","metadata_id","setMetadata_id","id","schema","state","metadata_element","onMetadataSelect","useCallback","event","select","value","field","required","includes"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-metadata-block/src/components/manage/Blocks/Metadata/Edit.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport cx from 'classnames';\nimport { useSelector } from 'react-redux';\nimport { Field } from '@plone/volto/components';\nimport { SelectMetadataBlock } from '@eeacms/volto-metadata-block/widgets';\nimport '@eeacms/volto-metadata-block/less/editor.less';\n\nconst EditMetadataBlock = (props) => {\n  const {\n    selected,\n    block,\n    onSelectBlock,\n    data,\n    onChangeBlock,\n    onChangeField,\n    properties,\n    metadata,\n  } = props;\n  const [metadata_id, setMetadata_id] = useState(data?.data?.id);\n  const schema = useSelector((state) => {\n    return state?.schema?.schema || {};\n  });\n  let metadata_element = {};\n  metadata\n    ? (metadata_element = { ...metadata })\n    : (metadata_element = { ...properties });\n\n  const onMetadataSelect = React.useCallback(\n    (event, select) => {\n      const { value } = select;\n      onChangeBlock(block, { ...data, data: value });\n      setMetadata_id(value.id);\n    },\n    [block, data, onChangeBlock],\n  );\n\n  const field = schema.properties ? schema.properties[metadata_id] : null;\n  const required = schema?.required?.includes(metadata_id);\n\n  return (\n    <div className={cx('block metadata', { selected: selected })}>\n      {field ? (\n        <Field\n          {...field}\n          id={metadata_id}\n          value={metadata_element[metadata_id]}\n          required={required}\n          onChange={(id, value) => {\n            onChangeField(id, value);\n          }}\n          key={metadata_id}\n          block={block}\n        />\n      ) : (\n        <SelectMetadataBlock\n          onChange={onMetadataSelect}\n          onOpen={() => onSelectBlock(block)}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default EditMetadataBlock;\n"],"mappings":";;;;;;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,EAAE,MAAM,YAAY;AAC3B,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,KAAK,QAAQ,yBAAyB;AAC/C,SAASC,mBAAmB,QAAQ,sCAAsC;AAC1E,OAAO,+CAA+C;AAEtD,MAAMC,iBAAiB,GAAIC,KAAK,IAAK;EAAA;EACnC,MAAM;IACJC,QAAQ;IACRC,KAAK;IACLC,aAAa;IACbC,IAAI;IACJC,aAAa;IACbC,aAAa;IACbC,UAAU;IACVC;EACF,CAAC,GAAGR,KAAK;EACT,MAAM;IAAA,GAACS,WAAW;IAAA,GAAEC;EAAc,IAAIhB,QAAQ,CAACU,IAAI,aAAJA,IAAI,qCAAJA,IAAI,CAAEA,IAAI,+CAAV,WAAYO,EAAE,CAAC;EAC9D,MAAMC,MAAM,GAAGhB,WAAW,CAAEiB,KAAK,IAAK;IAAA;IACpC,OAAO,CAAAA,KAAK,aAALA,KAAK,wCAALA,KAAK,CAAED,MAAM,kDAAb,cAAeA,MAAM,KAAI,CAAC,CAAC;EACpC,CAAC,CAAC;EACF,IAAIE,gBAAgB,GAAG,CAAC,CAAC;EACzBN,QAAQ,GACHM,gBAAgB,qBAAQN,QAAQ,CAAE,GAClCM,gBAAgB,qBAAQP,UAAU,CAAG;EAE1C,MAAMQ,gBAAgB,GAAGtB,KAAK,CAACuB,WAAW,CACxC,CAACC,KAAK,EAAEC,MAAM,KAAK;IACjB,MAAM;MAAEC;IAAM,CAAC,GAAGD,MAAM;IACxBb,aAAa,CAACH,KAAK,kCAAOE,IAAI;MAAEA,IAAI,EAAEe;IAAK,GAAG;IAC9CT,cAAc,CAACS,KAAK,CAACR,EAAE,CAAC;EAC1B,CAAC,EACD,CAACT,KAAK,EAAEE,IAAI,EAAEC,aAAa,CAAC,CAC7B;EAED,MAAMe,KAAK,GAAGR,MAAM,CAACL,UAAU,GAAGK,MAAM,CAACL,UAAU,CAACE,WAAW,CAAC,GAAG,IAAI;EACvE,MAAMY,QAAQ,GAAGT,MAAM,aAANA,MAAM,2CAANA,MAAM,CAAES,QAAQ,qDAAhB,iBAAkBC,QAAQ,CAACb,WAAW,CAAC;EAExD,OACE;IAAK,SAAS,EAAEd,EAAE,CAAC,gBAAgB,EAAE;MAAEM,QAAQ,EAAEA;IAAS,CAAC,CAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAC1DmB,KAAK,GACJ,MAAC,KAAK,eACAA,KAAK;IACT,EAAE,EAAEX,WAAY;IAChB,KAAK,EAAEK,gBAAgB,CAACL,WAAW,CAAE;IACrC,QAAQ,EAAEY,QAAS;IACnB,QAAQ,EAAE,CAACV,EAAE,EAAEQ,KAAK,KAAK;MACvBb,aAAa,CAACK,EAAE,EAAEQ,KAAK,CAAC;IAC1B,CAAE;IACF,GAAG,EAAEV,WAAY;IACjB,KAAK,EAAEP,KAAM;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACb,GAEF,MAAC,mBAAmB;IAClB,QAAQ,EAAEa,gBAAiB;IAC3B,MAAM,EAAE,MAAMZ,aAAa,CAACD,KAAK,CAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAEtC,CACG;AAEV,CAAC;AAED,eAAeH,iBAAiB"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}