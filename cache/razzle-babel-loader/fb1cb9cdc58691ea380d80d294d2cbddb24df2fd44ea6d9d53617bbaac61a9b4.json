{"ast":null,"code":"import _toConsumableArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _nth from \"lodash/nth\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Controlpanels/ContentTypeSchema.jsx\";\nvar __jsx = React.createElement;\n/**\n * Content type schema.\n * @module components/manage/Controlpanels/ContentTypeSchema\n */\n\nimport { getSchema, putSchema } from '@plone/volto/actions';\nimport { getParentUrl } from '@plone/volto/helpers';\nimport { Error, Form, Icon, Toast, Toolbar } from '@plone/volto/components';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport saveSVG from '@plone/volto/icons/save.svg';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { Portal } from 'react-portal';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { compose } from 'redux';\nimport { Button, Header } from 'semantic-ui-react';\nvar messages = defineMessages({\n  title: {\n    \"id\": \"{id} Schema\",\n    \"defaultMessage\": \"{id} Schema\"\n  },\n  success: {\n    \"id\": \"Success\",\n    \"defaultMessage\": \"Success\"\n  },\n  save: {\n    \"id\": \"Save\",\n    \"defaultMessage\": \"Save\"\n  },\n  cancel: {\n    \"id\": \"Cancel\",\n    \"defaultMessage\": \"Cancel\"\n  },\n  error: {\n    \"id\": \"Error\",\n    \"defaultMessage\": \"Error\"\n  },\n  typeCreated: {\n    \"id\": \"Schema updates\",\n    \"defaultMessage\": \"Schema updates\"\n  },\n  info: {\n    \"id\": \"Info\",\n    \"defaultMessage\": \"Info\"\n  },\n  changesSaved: {\n    \"id\": \"Changes saved.\",\n    \"defaultMessage\": \"Changes saved.\"\n  }\n});\n\n/**\n * ContentTypeSchema class.\n * @class ContentTypeSchema\n * @extends Component\n */\nvar ContentTypeSchema = /*#__PURE__*/function (_Component) {\n  _inherits(ContentTypeSchema, _Component);\n  var _super = _createSuper(ContentTypeSchema);\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  function ContentTypeSchema(props) {\n    var _this;\n    _classCallCheck(this, ContentTypeSchema);\n    _this = _super.call(this, props);\n    _defineProperty(_assertThisInitialized(_this), \"form\", /*#__PURE__*/React.createRef());\n    _defineProperty(_assertThisInitialized(_this), \"makeSchemaList\", function (schema) {\n      var result = {\n        title: 'Schema',\n        type: 'object',\n        fieldsets: [{\n          fields: ['schema'],\n          id: 'default',\n          title: 'Default'\n        }],\n        properties: {\n          schema: {\n            description: 'Form schema',\n            title: 'Form schema',\n            type: 'schema',\n            id: 'schema'\n          }\n        },\n        required: [],\n        layouts: null\n      };\n      result.layouts = schema.layouts.slice();\n      return result;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"isEditable\", function (field) {\n      return !field.behavior || field.behavior.includes('generated');\n    });\n    _defineProperty(_assertThisInitialized(_this), \"makeSchemaData\", function (schema, contentType) {\n      var fieldsets = schema.fieldsets.map(function (fieldset) {\n        var readOnlyFields = fieldset.fields.filter(function (fieldId) {\n          return !_this.isEditable(schema.properties[fieldId]) && fieldId !== 'changeNote';\n        });\n        var userCreatedFields = fieldset.fields.filter(function (fieldId) {\n          return _this.isEditable(schema.properties[fieldId]);\n        });\n        var changeNote = fieldset.fields.filter(function (fieldId) {\n          return fieldId === 'changeNote';\n        });\n        return _objectSpread(_objectSpread({}, fieldset), {}, {\n          fields: [].concat(_toConsumableArray(readOnlyFields), _toConsumableArray(userCreatedFields), _toConsumableArray(changeNote))\n        });\n      });\n      var result = _objectSpread(_objectSpread({}, schema), {}, {\n        fieldsets: fieldsets,\n        contentType: contentType\n      });\n      return {\n        schema: JSON.stringify(result)\n      };\n    });\n    _this.state = {\n      error: null,\n      schema: null,\n      content: null,\n      isClient: false\n    };\n    _this.onCancel = _this.onCancel.bind(_assertThisInitialized(_this));\n    _this.onSubmit = _this.onSubmit.bind(_assertThisInitialized(_this));\n    _this.form = /*#__PURE__*/React.createRef();\n    return _this;\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  _createClass(ContentTypeSchema, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.getSchema(this.props.id);\n      this.setState({\n        isClient: true\n      });\n    }\n\n    /**\n     * Component will receive props\n     * @method componentWillReceiveProps\n     * @param {Object} nextProps Next properties\n     * @returns {undefined}\n     */\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      // Schema error\n      if (this.props.schemaRequest.loading && nextProps.schemaRequest.error) {\n        this.setState({\n          error: nextProps.schemaRequest.error\n        });\n      }\n\n      // Schema GET\n      if (this.props.schemaRequest.loading && nextProps.schemaRequest.loaded) {\n        var _nextProps$schema;\n        var properties = ((_nextProps$schema = nextProps.schema) === null || _nextProps$schema === void 0 ? void 0 : _nextProps$schema.properties) || {};\n        var content = {};\n        var value, key;\n        for (key in properties) {\n          value = properties[key][\"default\"];\n          if (value) {\n            content[key] = value;\n          }\n        }\n        this.setState({\n          schema: nextProps.schema,\n          content: content\n        });\n      }\n\n      // Schema updated\n      if (this.props.schemaRequest.put.loading && nextProps.schemaRequest.put.loaded) {\n        // this.props.getSchema(this.props.id);\n        toast.info(__jsx(Toast, {\n          info: true,\n          title: this.props.intl.formatMessage(messages.info),\n          content: this.props.intl.formatMessage(messages.changesSaved),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 9\n          }\n        }));\n      }\n\n      // Schema update error\n      if (this.props.schemaRequest.put.loading && nextProps.schemaRequest.put.error) {\n        toast.error(__jsx(Toast, {\n          error: true,\n          title: this.props.intl.formatMessage(messages.error),\n          content: JSON.stringify(nextProps.schemaRequest.put.error.response.body || nextProps.schemaRequest.put.error.response.text),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 9\n          }\n        }));\n      }\n    }\n\n    /**\n     * Submit handler\n     * @method onSubmit\n     * @param {object} data Form data.\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(data) {\n      this.props.putSchema(this.props.id, data.schema);\n    }\n\n    /**\n     * Cancel handler\n     * @method onCancel\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onCancel\",\n    value: function onCancel() {\n      var url = getParentUrl(this.props.pathname);\n      this.props.history.push(getParentUrl(url));\n    }\n  }, {\n    key: \"render\",\n    value:\n    /**\n     * Render method.\n     * @method render\n     * @returns {string} Markup for the component.\n     */\n    function render() {\n      var _this2 = this;\n      // Error\n      if (this.state.error) {\n        return __jsx(Error, {\n          error: this.state.error,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 14\n          }\n        });\n      }\n      if (this.state.schema) {\n        var _this$props, _this$props$schema;\n        var contentTypeSchema = this.makeSchemaList(this.state.schema);\n        var schemaData = this.makeSchemaData(this.state.schema, this.props.id);\n        return __jsx(\"div\", {\n          id: \"page-controlpanel-schema\",\n          className: \"ui container\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 9\n          }\n        }, __jsx(Header, {\n          disabled: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 11\n          }\n        }, this.props.intl.formatMessage(messages.title, {\n          id: ((_this$props = this.props) === null || _this$props === void 0 ? void 0 : (_this$props$schema = _this$props.schema) === null || _this$props$schema === void 0 ? void 0 : _this$props$schema.title) || this.props.id\n        })), __jsx(Form, {\n          ref: this.form,\n          schema: contentTypeSchema,\n          formData: schemaData,\n          pathname: this.props.pathname,\n          onSubmit: this.onSubmit,\n          onCancel: this.onCancel,\n          hideActions: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 11\n          }\n        }), this.state.isClient && __jsx(Portal, {\n          node: document.getElementById('toolbar'),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 13\n          }\n        }, __jsx(Toolbar, {\n          pathname: this.props.pathname,\n          hideDefaultViewButtons: true,\n          inner: __jsx(React.Fragment, null, __jsx(Button, {\n            id: \"toolbar-save\",\n            className: \"save\",\n            \"aria-label\": this.props.intl.formatMessage(messages.save),\n            onClick: function onClick() {\n              return _this2.form.current.onSubmit();\n            },\n            disabled: this.props.schemaRequest.put.loading,\n            loading: this.props.schemaRequest.put.loading,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 21\n            }\n          }, __jsx(Icon, {\n            name: saveSVG,\n            className: \"circled\",\n            size: \"30px\",\n            title: this.props.intl.formatMessage(messages.save),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 301,\n              columnNumber: 23\n            }\n          })), __jsx(Button, {\n            className: \"cancel\",\n            \"aria-label\": this.props.intl.formatMessage(messages.cancel),\n            onClick: function onClick() {\n              return _this2.onCancel();\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 21\n            }\n          }, __jsx(Icon, {\n            name: clearSVG,\n            className: \"circled\",\n            size: \"30px\",\n            title: this.props.intl.formatMessage(messages.cancel),\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 23\n            }\n          }))),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 15\n          }\n        })));\n      }\n      return __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 12\n        }\n      });\n    }\n  }]);\n  return ContentTypeSchema;\n}(Component);\n_defineProperty(ContentTypeSchema, \"propTypes\", {\n  getSchema: PropTypes.func.isRequired,\n  putSchema: PropTypes.func.isRequired,\n  pathname: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired\n});\n_defineProperty(ContentTypeSchema, \"defaultProps\", {});\nexport default compose(injectIntl, connect(function (state, props) {\n  return {\n    schema: state.schema.schema,\n    schemaRequest: state.schema,\n    pathname: props.location.pathname,\n    id: _nth(props.location.pathname.split('/'), -2)\n  };\n}, {\n  getSchema: getSchema,\n  putSchema: putSchema\n}))(ContentTypeSchema);","map":{"version":3,"names":["getSchema","putSchema","getParentUrl","Error","Form","Icon","Toast","Toolbar","clearSVG","saveSVG","PropTypes","React","Component","defineMessages","injectIntl","Portal","connect","toast","compose","Button","Header","messages","title","success","save","cancel","error","typeCreated","info","changesSaved","ContentTypeSchema","props","createRef","schema","result","type","fieldsets","fields","id","properties","description","required","layouts","slice","field","behavior","includes","contentType","map","fieldset","readOnlyFields","filter","fieldId","isEditable","userCreatedFields","changeNote","JSON","stringify","state","content","isClient","onCancel","bind","onSubmit","form","setState","nextProps","schemaRequest","loading","loaded","value","key","put","intl","formatMessage","response","body","text","data","url","pathname","history","push","contentTypeSchema","makeSchemaList","schemaData","makeSchemaData","document","getElementById","current","func","isRequired","string","location","split"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Controlpanels/ContentTypeSchema.jsx"],"sourcesContent":["/**\n * Content type schema.\n * @module components/manage/Controlpanels/ContentTypeSchema\n */\n\nimport { getSchema, putSchema } from '@plone/volto/actions';\nimport { getParentUrl } from '@plone/volto/helpers';\nimport { nth } from 'lodash';\nimport { Error, Form, Icon, Toast, Toolbar } from '@plone/volto/components';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport saveSVG from '@plone/volto/icons/save.svg';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { Portal } from 'react-portal';\nimport { connect } from 'react-redux';\nimport { toast } from 'react-toastify';\nimport { compose } from 'redux';\nimport { Button, Header } from 'semantic-ui-react';\n\nconst messages = defineMessages({\n  title: {\n    id: '{id} Schema',\n    defaultMessage: '{id} Schema',\n  },\n  success: {\n    id: 'Success',\n    defaultMessage: 'Success',\n  },\n  save: {\n    id: 'Save',\n    defaultMessage: 'Save',\n  },\n  cancel: {\n    id: 'Cancel',\n    defaultMessage: 'Cancel',\n  },\n  error: {\n    id: 'Error',\n    defaultMessage: 'Error',\n  },\n  typeCreated: {\n    id: 'Schema updates',\n    defaultMessage: 'Schema updates',\n  },\n  info: {\n    id: 'Info',\n    defaultMessage: 'Info',\n  },\n  changesSaved: {\n    id: 'Changes saved.',\n    defaultMessage: 'Changes saved.',\n  },\n});\n\n/**\n * ContentTypeSchema class.\n * @class ContentTypeSchema\n * @extends Component\n */\nclass ContentTypeSchema extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    getSchema: PropTypes.func.isRequired,\n    putSchema: PropTypes.func.isRequired,\n    pathname: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {};\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      schema: null,\n      content: null,\n      isClient: false,\n    };\n\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.form = React.createRef();\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.getSchema(this.props.id);\n    this.setState({ isClient: true });\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    // Schema error\n    if (this.props.schemaRequest.loading && nextProps.schemaRequest.error) {\n      this.setState({\n        error: nextProps.schemaRequest.error,\n      });\n    }\n\n    // Schema GET\n    if (this.props.schemaRequest.loading && nextProps.schemaRequest.loaded) {\n      let properties = nextProps.schema?.properties || {};\n      let content = {};\n      let value, key;\n      for (key in properties) {\n        value = properties[key].default;\n        if (value) {\n          content[key] = value;\n        }\n      }\n\n      this.setState({\n        schema: nextProps.schema,\n        content: content,\n      });\n    }\n\n    // Schema updated\n    if (\n      this.props.schemaRequest.put.loading &&\n      nextProps.schemaRequest.put.loaded\n    ) {\n      // this.props.getSchema(this.props.id);\n      toast.info(\n        <Toast\n          info\n          title={this.props.intl.formatMessage(messages.info)}\n          content={this.props.intl.formatMessage(messages.changesSaved)}\n        />,\n      );\n    }\n\n    // Schema update error\n    if (\n      this.props.schemaRequest.put.loading &&\n      nextProps.schemaRequest.put.error\n    ) {\n      toast.error(\n        <Toast\n          error\n          title={this.props.intl.formatMessage(messages.error)}\n          content={JSON.stringify(\n            nextProps.schemaRequest.put.error.response.body ||\n              nextProps.schemaRequest.put.error.response.text,\n          )}\n        />,\n      );\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    this.props.putSchema(this.props.id, data.schema);\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    let url = getParentUrl(this.props.pathname);\n    this.props.history.push(getParentUrl(url));\n  }\n\n  form = React.createRef();\n\n  makeSchemaList = (schema) => {\n    const result = {\n      title: 'Schema',\n      type: 'object',\n      fieldsets: [\n        {\n          fields: ['schema'],\n          id: 'default',\n          title: 'Default',\n        },\n      ],\n      properties: {\n        schema: {\n          description: 'Form schema',\n          title: 'Form schema',\n          type: 'schema',\n          id: 'schema',\n        },\n      },\n      required: [],\n      layouts: null,\n    };\n    result.layouts = schema.layouts.slice();\n\n    return result;\n  };\n\n  isEditable = (field) =>\n    !field.behavior || field.behavior.includes('generated');\n\n  makeSchemaData = (schema, contentType) => {\n    const fieldsets = schema.fieldsets.map((fieldset) => {\n      const readOnlyFields = fieldset.fields.filter(\n        (fieldId) =>\n          !this.isEditable(schema.properties[fieldId]) &&\n          fieldId !== 'changeNote',\n      );\n      const userCreatedFields = fieldset.fields.filter((fieldId) =>\n        this.isEditable(schema.properties[fieldId]),\n      );\n      const changeNote = fieldset.fields.filter(\n        (fieldId) => fieldId === 'changeNote',\n      );\n      return {\n        ...fieldset,\n        fields: [...readOnlyFields, ...userCreatedFields, ...changeNote],\n      };\n    });\n    const result = {\n      ...schema,\n      fieldsets,\n      contentType,\n    };\n\n    return { schema: JSON.stringify(result) };\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    // Error\n    if (this.state.error) {\n      return <Error error={this.state.error} />;\n    }\n\n    if (this.state.schema) {\n      const contentTypeSchema = this.makeSchemaList(this.state.schema);\n      const schemaData = this.makeSchemaData(this.state.schema, this.props.id);\n\n      return (\n        <div id=\"page-controlpanel-schema\" className=\"ui container\">\n          <Header disabled>\n            {this.props.intl.formatMessage(messages.title, {\n              id: this.props?.schema?.title || this.props.id,\n            })}\n          </Header>\n          <Form\n            ref={this.form}\n            schema={contentTypeSchema}\n            formData={schemaData}\n            pathname={this.props.pathname}\n            onSubmit={this.onSubmit}\n            onCancel={this.onCancel}\n            hideActions\n          />\n          {this.state.isClient && (\n            <Portal node={document.getElementById('toolbar')}>\n              <Toolbar\n                pathname={this.props.pathname}\n                hideDefaultViewButtons\n                inner={\n                  <>\n                    <Button\n                      id=\"toolbar-save\"\n                      className=\"save\"\n                      aria-label={this.props.intl.formatMessage(messages.save)}\n                      onClick={() => this.form.current.onSubmit()}\n                      disabled={this.props.schemaRequest.put.loading}\n                      loading={this.props.schemaRequest.put.loading}\n                    >\n                      <Icon\n                        name={saveSVG}\n                        className=\"circled\"\n                        size=\"30px\"\n                        title={this.props.intl.formatMessage(messages.save)}\n                      />\n                    </Button>\n                    <Button\n                      className=\"cancel\"\n                      aria-label={this.props.intl.formatMessage(\n                        messages.cancel,\n                      )}\n                      onClick={() => this.onCancel()}\n                    >\n                      <Icon\n                        name={clearSVG}\n                        className=\"circled\"\n                        size=\"30px\"\n                        title={this.props.intl.formatMessage(messages.cancel)}\n                      />\n                    </Button>\n                  </>\n                }\n              />\n            </Portal>\n          )}\n        </div>\n      );\n    }\n\n    return <div />;\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      schema: state.schema.schema,\n      schemaRequest: state.schema,\n      pathname: props.location.pathname,\n      id: nth(props.location.pathname.split('/'), -2),\n    }),\n    {\n      getSchema,\n      putSchema,\n    },\n  ),\n)(ContentTypeSchema);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"{id} Schema","defaultMessage":"{id} Schema"},{"id":"Success","defaultMessage":"Success"},{"id":"Save","defaultMessage":"Save"},{"id":"Cancel","defaultMessage":"Cancel"},{"id":"Error","defaultMessage":"Error"},{"id":"Schema updates","defaultMessage":"Schema updates"},{"id":"Info","defaultMessage":"Info"},{"id":"Changes saved.","defaultMessage":"Changes saved."}]}},"sourceType":"module","externalDependencies":[]}