{"ast":null,"code":"import _extends from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/extends.js\";\nimport _slicedToArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-widget-temporal-coverage/src/components/manage/Widgets/TemporalWidget.jsx\",\n  _this = this,\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport CreatableSelect from 'react-select/creatable';\nimport { FormFieldWrapper } from '@plone/volto/components';\nimport { Option, DropdownIndicator, selectTheme, customSelectStyles } from '@plone/volto/components/manage/Widgets/SelectStyling';\nimport { createTemporalRangeOptions, getIndividualValues, createOption } from '@eeacms/volto-widget-temporal-coverage/helpers';\nimport { TemporalWidgetView } from '@eeacms/volto-widget-temporal-coverage/components';\nimport './public.less';\nvar messages = defineMessages({\n  temporalCoverage: {\n    \"id\": \"Temporal coverage\",\n    \"defaultMessage\": \"Temporal coverage\"\n  },\n  NoSelection: {\n    \"id\": \"No selection\",\n    \"defaultMessage\": \"No selection\"\n  }\n});\nfunction addTemporalValues(current_temporal_values, new_values) {\n  var year_values = current_temporal_values ? current_temporal_values.map(function (item) {\n    return item.value;\n  }) : [];\n  if (new_values.includes('-')) {\n    var split_values = new_values.split('-');\n    var start_year = parseInt(split_values[0]);\n    var end_year = parseInt(split_values[1]);\n    for (var year = start_year; year <= end_year; year++) {\n      if (year_values.indexOf(year) === -1) {\n        year_values.push(year);\n      }\n    }\n  } else {\n    var _year = parseInt(new_values);\n    if (year_values.indexOf(_year) === -1) {\n      year_values.push(_year);\n    }\n  }\n  year_values.sort();\n  return year_values.map(function (year) {\n    return createOption(year);\n  });\n}\nvar TemporalWidget = function TemporalWidget(props) {\n  _s();\n  var _onChange = props.onChange,\n    value = props.value,\n    intl = props.intl,\n    _props$id = props.id,\n    id = _props$id === void 0 ? 'select-temporal-coverage' : _props$id,\n    _props$title = props.title,\n    title = _props$title === void 0 ? 'Temporal coverage' : _props$title;\n  var _React$useState = React.useState(''),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    currentInputValue = _React$useState2[0],\n    setCurrentInputValue = _React$useState2[1];\n  var _React$useState3 = React.useState([]),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    temporalRangeOptions = _React$useState4[0],\n    setTemporalRangeOptions = _React$useState4[1];\n  var temporal = value === null || value === void 0 ? void 0 : value.temporal;\n  useEffect(function () {\n    setTemporalRangeOptions(createTemporalRangeOptions(getIndividualValues(temporal)));\n  }, [temporal]);\n  return __jsx(FormFieldWrapper, _extends({}, props, {\n    id: id,\n    className: \"temporal-field-wrapper\",\n    title: title,\n    columns: 1,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }), __jsx(Grid, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, __jsx(Grid.Row, {\n    stretched: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }, __jsx(Grid.Column, {\n    width: \"4\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    className: \"wrapper\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, __jsx(\"label\", {\n    htmlFor: \"select-listingblock-template\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 15\n    }\n  }, intl.formatMessage(messages.temporalCoverage)))), __jsx(Grid.Column, {\n    width: \"8\",\n    style: {\n      flexDirection: 'unset'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }, value !== null && value !== void 0 && value.readOnly ? __jsx(TemporalWidgetView, {\n    value: value,\n    className: \"read-only\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 15\n    }\n  }) : __jsx(CreatableSelect, {\n    defaultValue: temporalRangeOptions,\n    isMulti: true,\n    allowCreateWhileLoading: true,\n    id: id,\n    inputValue: currentInputValue,\n    name: \"select-temporal-coverage\",\n    className: \"react-select-container\",\n    classNamePrefix: \"react-select\",\n    options: [{\n      label: intl.formatMessage(messages.NoSelection),\n      value: ''\n    }],\n    onInputChange: function onInputChange(newInputValue) {\n      if (!newInputValue) {\n        return setCurrentInputValue(newInputValue);\n      }\n      var new_input_length = newInputValue.length;\n      var last_char = newInputValue[new_input_length - 1];\n      // dissallow non numeric values and allow - only as 5th char\n      if (last_char === '-' && new_input_length !== 5 || ['-', '0'].indexOf(last_char) === -1 && !parseInt(last_char)) {\n        return currentInputValue;\n      }\n      if (new_input_length === 5 && new_input_length > currentInputValue.length && newInputValue[4] !== '-') {\n        newInputValue = newInputValue.slice(0, 4) + '-' + newInputValue.slice(4, 5);\n      }\n      if (new_input_length <= 9) {\n        return setCurrentInputValue(newInputValue);\n      }\n      return setCurrentInputValue(newInputValue);\n    },\n    isValidNewOption: function isValidNewOption(inputValue) {\n      var new_option = inputValue.split('-');\n      // allow only ranges when second value is higher\n      if (new_option.length === 2) {\n        var first_value = parseInt(new_option[0]);\n        var second_value = parseInt(new_option[1]);\n        return first_value < second_value;\n      }\n      return /^\\d+$/.test(parseInt(inputValue.split('-')[0]));\n    },\n    onCreateOption: function onCreateOption(newOption) {\n      var temporal_values = addTemporalValues(getIndividualValues(value === null || value === void 0 ? void 0 : value.temporal), newOption);\n      _onChange(id, newOption === '' ? undefined : {\n        temporal: temporal_values\n      });\n    },\n    value: temporalRangeOptions,\n    styles: customSelectStyles,\n    theme: selectTheme,\n    components: {\n      DropdownIndicator: DropdownIndicator,\n      Option: Option\n    },\n    onChange: function onChange(values) {\n      var temporal_values = value.length && getIndividualValues(values) || values;\n      _onChange(id, value === '' ? undefined : {\n        temporal: temporal_values\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 15\n    }\n  })))));\n};\n_s(TemporalWidget, \"7/e4xigUaATSGqxfF6ByOX7lUVQ=\");\n_c = TemporalWidget;\nTemporalWidget.propTypes = {\n  value: PropTypes.objectOf(PropTypes.any),\n  block: PropTypes.string\n};\nexport default _c2 = injectIntl(TemporalWidget);\nvar _c, _c2;\n$RefreshReg$(_c, \"TemporalWidget\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useEffect","PropTypes","Grid","defineMessages","injectIntl","CreatableSelect","FormFieldWrapper","Option","DropdownIndicator","selectTheme","customSelectStyles","createTemporalRangeOptions","getIndividualValues","createOption","TemporalWidgetView","messages","temporalCoverage","NoSelection","addTemporalValues","current_temporal_values","new_values","year_values","map","item","value","includes","split_values","split","start_year","parseInt","end_year","year","indexOf","push","sort","TemporalWidget","props","onChange","intl","id","title","useState","currentInputValue","setCurrentInputValue","temporalRangeOptions","setTemporalRangeOptions","temporal","formatMessage","flexDirection","readOnly","label","newInputValue","new_input_length","length","last_char","slice","inputValue","new_option","first_value","second_value","test","newOption","temporal_values","undefined","values","propTypes","objectOf","any","block","string"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-widget-temporal-coverage/src/components/manage/Widgets/TemporalWidget.jsx"],"sourcesContent":["import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport CreatableSelect from 'react-select/creatable';\nimport { FormFieldWrapper } from '@plone/volto/components';\nimport {\n  Option,\n  DropdownIndicator,\n  selectTheme,\n  customSelectStyles,\n} from '@plone/volto/components/manage/Widgets/SelectStyling';\n\nimport {\n  createTemporalRangeOptions,\n  getIndividualValues,\n  createOption,\n} from '@eeacms/volto-widget-temporal-coverage/helpers';\n\nimport { TemporalWidgetView } from '@eeacms/volto-widget-temporal-coverage/components';\n\nimport './public.less';\n\nconst messages = defineMessages({\n  temporalCoverage: {\n    id: 'Temporal coverage',\n    defaultMessage: 'Temporal coverage',\n  },\n  NoSelection: {\n    id: 'No selection',\n    defaultMessage: 'No selection',\n  },\n});\n\nfunction addTemporalValues(current_temporal_values, new_values) {\n  let year_values = current_temporal_values\n    ? current_temporal_values.map((item) => item.value)\n    : [];\n  if (new_values.includes('-')) {\n    let split_values = new_values.split('-');\n    let start_year = parseInt(split_values[0]);\n    let end_year = parseInt(split_values[1]);\n    for (let year = start_year; year <= end_year; year++) {\n      if (year_values.indexOf(year) === -1) {\n        year_values.push(year);\n      }\n    }\n  } else {\n    const year = parseInt(new_values);\n    if (year_values.indexOf(year) === -1) {\n      year_values.push(year);\n    }\n  }\n  year_values.sort();\n  return year_values.map((year) => createOption(year));\n}\n\nconst TemporalWidget = (props) => {\n  const {\n    onChange,\n    value,\n    intl,\n    id = 'select-temporal-coverage',\n    title = 'Temporal coverage',\n  } = props;\n\n  const [currentInputValue, setCurrentInputValue] = React.useState('');\n  const [temporalRangeOptions, setTemporalRangeOptions] = React.useState([]);\n  const temporal = value?.temporal;\n\n  useEffect(() => {\n    setTemporalRangeOptions(\n      createTemporalRangeOptions(getIndividualValues(temporal)),\n    );\n  }, [temporal]);\n\n  return (\n    <FormFieldWrapper\n      {...props}\n      id={id}\n      className=\"temporal-field-wrapper\"\n      title={title}\n      columns={1}\n    >\n      <Grid>\n        <Grid.Row stretched>\n          <Grid.Column width=\"4\">\n            <div className=\"wrapper\">\n              <label htmlFor=\"select-listingblock-template\">\n                {intl.formatMessage(messages.temporalCoverage)}\n              </label>\n            </div>\n          </Grid.Column>\n          <Grid.Column width=\"8\" style={{ flexDirection: 'unset' }}>\n            {value?.readOnly ? (\n              <TemporalWidgetView value={value} className=\"read-only\" />\n            ) : (\n              <CreatableSelect\n                defaultValue={temporalRangeOptions}\n                isMulti\n                allowCreateWhileLoading={true}\n                id={id}\n                inputValue={currentInputValue}\n                name=\"select-temporal-coverage\"\n                className=\"react-select-container\"\n                classNamePrefix=\"react-select\"\n                options={[\n                  {\n                    label: intl.formatMessage(messages.NoSelection),\n                    value: '',\n                  },\n                ]}\n                onInputChange={(newInputValue) => {\n                  if (!newInputValue) {\n                    return setCurrentInputValue(newInputValue);\n                  }\n                  let new_input_length = newInputValue.length;\n                  let last_char = newInputValue[new_input_length - 1];\n                  // dissallow non numeric values and allow - only as 5th char\n                  if (\n                    (last_char === '-' && new_input_length !== 5) ||\n                    (['-', '0'].indexOf(last_char) === -1 &&\n                      !parseInt(last_char))\n                  ) {\n                    return currentInputValue;\n                  }\n\n                  if (\n                    new_input_length === 5 &&\n                    new_input_length > currentInputValue.length &&\n                    newInputValue[4] !== '-'\n                  ) {\n                    newInputValue =\n                      newInputValue.slice(0, 4) +\n                      '-' +\n                      newInputValue.slice(4, 5);\n                  }\n                  if (new_input_length <= 9) {\n                    return setCurrentInputValue(newInputValue);\n                  }\n\n                  return setCurrentInputValue(newInputValue);\n                }}\n                isValidNewOption={(inputValue) => {\n                  let new_option = inputValue.split('-');\n                  // allow only ranges when second value is higher\n                  if (new_option.length === 2) {\n                    let first_value = parseInt(new_option[0]);\n                    let second_value = parseInt(new_option[1]);\n                    return first_value < second_value;\n                  }\n                  return /^\\d+$/.test(parseInt(inputValue.split('-')[0]));\n                }}\n                onCreateOption={(newOption) => {\n                  let temporal_values = addTemporalValues(\n                    getIndividualValues(value?.temporal),\n                    newOption,\n                  );\n                  onChange(\n                    id,\n                    newOption === ''\n                      ? undefined\n                      : { temporal: temporal_values },\n                  );\n                }}\n                value={temporalRangeOptions}\n                styles={customSelectStyles}\n                theme={selectTheme}\n                components={{ DropdownIndicator, Option }}\n                onChange={(values) => {\n                  let temporal_values =\n                    (value.length && getIndividualValues(values)) || values;\n                  onChange(\n                    id,\n                    value === '' ? undefined : { temporal: temporal_values },\n                  );\n                }}\n              />\n            )}\n          </Grid.Column>\n        </Grid.Row>\n      </Grid>\n    </FormFieldWrapper>\n  );\n};\n\nTemporalWidget.propTypes = {\n  value: PropTypes.objectOf(PropTypes.any),\n  block: PropTypes.string,\n};\n\nexport default injectIntl(TemporalWidget);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Temporal coverage","defaultMessage":"Temporal coverage"},{"id":"No selection","defaultMessage":"No selection"}]}},"sourceType":"module","externalDependencies":[]}