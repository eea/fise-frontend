{"ast":null,"code":"import _remove from \"lodash/remove\";\nimport _map from \"lodash/map\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-slate/src/blocks/Table/TableBlockEdit.jsx\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n/**\n * Slate Table block editor.\n * @module volto-slate/blocks/Table/Edit\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Table } from 'semantic-ui-react';\nimport cx from 'classnames';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { Icon, BlockDataForm, SidebarPortal } from '@plone/volto/components';\nimport Cell from './Cell';\nimport getSchema from './schema';\nimport rowBeforeSVG from '@plone/volto/icons/row-before.svg';\nimport rowAfterSVG from '@plone/volto/icons/row-after.svg';\nimport colBeforeSVG from '@plone/volto/icons/column-before.svg';\nimport colAfterSVG from '@plone/volto/icons/column-after.svg';\nimport rowDeleteSVG from '@plone/volto/icons/row-delete.svg';\nimport colDeleteSVG from '@plone/volto/icons/column-delete.svg';\n\n/**\n * Returns a random string of 32 digits.\n */\nconst getId = () => Math.floor(Math.random() * Math.pow(2, 24)).toString(32);\n\n/**\n * @returns {object} An empty Slate paragraph (a simple Slate block node with\n * type set to \"p\" and a `Text` child with an empty string).\n */\nfunction getEmptyParagraph() {\n  return [{\n    type: 'p',\n    children: [{\n      text: ''\n    }]\n  }];\n}\n\n/**\n * @param {string} type The type of the newly created cell: either 'header' or\n * 'data', by default it is 'data'.\n * @returns {object} A new cell object containing three properties: `key`,\n * `type` and `value`.\n */\nconst emptyCell = (type = 'data') => ({\n  key: getId(),\n  type: type,\n  value: getEmptyParagraph()\n});\n\n/**\n * @param {Array[object]} cells Array of placeholders, each of them will be\n * replaced in the newly created row with an empty cell. (Practically, just the\n * length of the array matters.)\n * @returns {object} A new row object containing the keys `key` and `cells`.\n */\nconst emptyRow = cells => ({\n  key: getId(),\n  cells: _map(cells, () => emptyCell())\n});\n\n/**\n * The initial value for the displayed table's data. The IDs of the rows and\n * cells are computed here only once, so each new table has the same IDs\n * initially, but this does not have bad consequences since the key has\n * relevance only in the context in which it is used.\n */\nconst initialTable = {\n  hideHeaders: false,\n  fixed: true,\n  compact: false,\n  basic: false,\n  celled: true,\n  inverted: false,\n  striped: false,\n  rows: [{\n    key: getId(),\n    cells: [{\n      key: getId(),\n      type: 'header',\n      value: getEmptyParagraph()\n    }, {\n      key: getId(),\n      type: 'header',\n      value: getEmptyParagraph()\n    }]\n  }, {\n    key: getId(),\n    cells: [{\n      key: getId(),\n      type: 'data',\n      value: getEmptyParagraph()\n    }, {\n      key: getId(),\n      type: 'data',\n      value: getEmptyParagraph()\n    }]\n  }]\n};\nconst messages = defineMessages({\n  insertRowBefore: {\n    \"id\": \"Insert row before\",\n    \"defaultMessage\": \"Insert row before\"\n  },\n  insertRowAfter: {\n    \"id\": \"Insert row after\",\n    \"defaultMessage\": \"Insert row after\"\n  },\n  deleteRow: {\n    \"id\": \"Delete row\",\n    \"defaultMessage\": \"Delete row\"\n  },\n  insertColBefore: {\n    \"id\": \"Insert col before\",\n    \"defaultMessage\": \"Insert col before\"\n  },\n  insertColAfter: {\n    \"id\": \"Insert col after\",\n    \"defaultMessage\": \"Insert col after\"\n  },\n  deleteCol: {\n    \"id\": \"Delete col\",\n    \"defaultMessage\": \"Delete col\"\n  }\n});\n\n/**\n * Edit component for the Slate Table block type in Volto.\n * @class Edit\n * @extends Component\n */\nclass Edit extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      headers: [],\n      rows: {},\n      selected: {\n        row: 0,\n        cell: 0\n      },\n      isClient: false\n    };\n    this.schema = getSchema({\n      intl: props.intl\n    });\n    this.onChange = this.onChange.bind(this);\n    this.onSelectCell = this.onSelectCell.bind(this);\n    this.onInsertRowBefore = this.onInsertRowBefore.bind(this);\n    this.onInsertRowAfter = this.onInsertRowAfter.bind(this);\n    this.onInsertColBefore = this.onInsertColBefore.bind(this);\n    this.onInsertColAfter = this.onInsertColAfter.bind(this);\n    this.onDeleteRow = this.onDeleteRow.bind(this);\n    this.onDeleteCol = this.onDeleteCol.bind(this);\n    this.onChangeCell = this.onChangeCell.bind(this);\n  }\n\n  /**\n   * Component did mount lifecycle method\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    if (!this.props.data.table) {\n      this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n        table: initialTable\n      }));\n    }\n    this.setState({\n      isClient: true\n    });\n  }\n\n  /**\n   * Component will receive props lifecycle method\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (!nextProps.data.table) {\n      this.props.onChangeBlock(nextProps.block, _objectSpread(_objectSpread({}, nextProps.data), {}, {\n        table: initialTable\n      }));\n    }\n  }\n\n  /**\n   * On change\n   * @method onChange\n   * @param {string} id Id of modified property.\n   * @param {any} value New value of modified property.\n   * @returns {undefined}\n   */\n  onChange(id, value) {\n    const table = this.props.data.table;\n    this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n      table: _objectSpread(_objectSpread({}, table), {}, {\n        [id]: value\n      })\n    }));\n  }\n\n  /**\n   * Select cell handler\n   * @method onSelectCell\n   * @param {Number} row Row index.\n   * @param {Number} cell Cell index.\n   * @returns {undefined}\n   */\n  onSelectCell(row, cell) {\n    this.setState({\n      selected: {\n        row,\n        cell\n      }\n    });\n  }\n\n  /**\n   * Change cell handler\n   * @param {Number} row Row index.\n   * @param {Number} cell Cell index.\n   * @param {Array} slateValue Value of the `SlateEditor` in the cell.\n   * @returns {undefined}\n   */\n  onChangeCell(row, cell, slateValue) {\n    const table = JSON.parse(JSON.stringify(this.props.data.table));\n    table.rows[row].cells[cell] = _objectSpread(_objectSpread({}, table.rows[row].cells[cell]), {}, {\n      value: JSON.parse(JSON.stringify(slateValue))\n    });\n    this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n      table\n    }));\n  }\n\n  /**\n   * Insert row before handler. Keeps the selected cell as selected after the\n   * operation is done.\n   * @returns {undefined}\n   */\n  onInsertRowBefore() {\n    const table = this.props.data.table;\n    this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n      table: _objectSpread(_objectSpread({}, table), {}, {\n        rows: [...table.rows.slice(0, this.state.selected.row), emptyRow(table.rows[0].cells), ...table.rows.slice(this.state.selected.row)]\n      })\n    }));\n    this.setState({\n      selected: {\n        row: this.state.selected.row + 1,\n        cell: this.state.selected.cell\n      }\n    });\n  }\n\n  /**\n   * Insert row after handler\n   * @returns {undefined}\n   */\n  onInsertRowAfter() {\n    const table = this.props.data.table;\n    this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n      table: _objectSpread(_objectSpread({}, table), {}, {\n        rows: [...table.rows.slice(0, this.state.selected.row + 1), emptyRow(table.rows[0].cells), ...table.rows.slice(this.state.selected.row + 1)]\n      })\n    }));\n  }\n\n  /**\n   * Insert column before handler. Keeps the selected cell as selected after the\n   * operation is done.\n   * @returns {undefined}\n   */\n  onInsertColBefore() {\n    const table = this.props.data.table;\n    this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n      table: _objectSpread(_objectSpread({}, table), {}, {\n        rows: _map(table.rows, (row, index) => _objectSpread(_objectSpread({}, row), {}, {\n          cells: [...row.cells.slice(0, this.state.selected.cell), emptyCell(table.rows[index].cells[this.state.selected.cell].type), ...row.cells.slice(this.state.selected.cell)]\n        }))\n      })\n    }));\n    this.setState({\n      selected: {\n        row: this.state.selected.row,\n        cell: this.state.selected.cell + 1\n      }\n    });\n  }\n\n  /**\n   * Insert column after handler\n   * @returns {undefined}\n   */\n  onInsertColAfter() {\n    const table = this.props.data.table;\n    this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n      table: _objectSpread(_objectSpread({}, table), {}, {\n        rows: _map(table.rows, (row, index) => _objectSpread(_objectSpread({}, row), {}, {\n          cells: [...row.cells.slice(0, this.state.selected.cell + 1), emptyCell(table.rows[index].cells[this.state.selected.cell].type), ...row.cells.slice(this.state.selected.cell + 1)]\n        }))\n      })\n    }));\n  }\n\n  /**\n   * Delete column handler. Changes the selected cell if the last table column\n   * is selected.\n   * @returns {undefined}\n   */\n  onDeleteCol() {\n    const table = this.props.data.table;\n    if (this.state.selected.cell === table.rows[0].cells.length - 1) {\n      this.setState({\n        selected: {\n          row: this.state.selected.row,\n          cell: this.state.selected.cell - 1\n        }\n      });\n    }\n    this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n      table: _objectSpread(_objectSpread({}, table), {}, {\n        rows: _map(table.rows, row => _objectSpread(_objectSpread({}, row), {}, {\n          cells: _remove(row.cells, (cell, index) => index !== this.state.selected.cell)\n        }))\n      })\n    }));\n  }\n\n  /**\n   * Delete row handler. Changes the selected cell if the last table row is\n   * selected.\n   * @method onDeleteRow\n   * @returns {undefined}\n   */\n  onDeleteRow() {\n    const table = this.props.data.table;\n    if (this.state.selected.row === table.rows.length - 1) {\n      this.setState({\n        selected: {\n          row: this.state.selected.row - 1,\n          cell: this.state.selected.cell\n        }\n      });\n    }\n    this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n      table: _objectSpread(_objectSpread({}, table), {}, {\n        rows: _remove(table.rows, (row, index) => index !== this.state.selected.row)\n      })\n    }));\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.selected && !this.props.selected) {\n      this.setState({\n        selected: null\n      });\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    var _this$props$data$tabl, _this$props$data$tabl2, _this$props$data$tabl3, _this$props$data$tabl4, _this$props$data$tabl5, _this$props$data$tabl6, _this$props$data$tabl7, _this$props$data$tabl8, _this$props$data$tabl9, _this$props$data$tabl10, _this$props$data$tabl11, _this$props$data$tabl12, _this$props$data$tabl13, _this$props$data$tabl14, _this$props$data$tabl15, _this$props$data$tabl16, _this$props$data$tabl17, _this$props$data$tabl18;\n    const headers = ((_this$props$data$tabl = this.props.data.table) === null || _this$props$data$tabl === void 0 ? void 0 : (_this$props$data$tabl2 = _this$props$data$tabl.rows) === null || _this$props$data$tabl2 === void 0 ? void 0 : (_this$props$data$tabl3 = _this$props$data$tabl2[0]) === null || _this$props$data$tabl3 === void 0 ? void 0 : _this$props$data$tabl3.cells) || [];\n    const rows = ((_this$props$data$tabl4 = this.props.data.table) === null || _this$props$data$tabl4 === void 0 ? void 0 : (_this$props$data$tabl5 = _this$props$data$tabl4.rows) === null || _this$props$data$tabl5 === void 0 ? void 0 : _this$props$data$tabl5.filter((_, index) => index > 0)) || [];\n    return (\n      // TODO: use slate-table instead of table, but first copy the CSS styles\n      // to the new name\n      __jsx(\"div\", {\n        className: cx('block table', {\n          selected: this.props.selected\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 7\n        }\n      }, this.props.selected && __jsx(\"div\", {\n        className: \"toolbar\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 11\n        }\n      }, __jsx(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 13\n        }\n      }, __jsx(Button, {\n        icon: true,\n        basic: true,\n        onClick: this.onInsertRowBefore,\n        title: this.props.intl.formatMessage(messages.insertRowBefore),\n        \"aria-label\": this.props.intl.formatMessage(messages.insertRowBefore),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 460,\n          columnNumber: 15\n        }\n      }, __jsx(Icon, {\n        name: rowBeforeSVG,\n        size: \"24px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 17\n        }\n      }))), __jsx(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 13\n        }\n      }, __jsx(Button, {\n        icon: true,\n        basic: true,\n        onClick: this.onInsertRowAfter,\n        title: this.props.intl.formatMessage(messages.insertRowAfter),\n        \"aria-label\": this.props.intl.formatMessage(messages.insertRowAfter),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 473,\n          columnNumber: 15\n        }\n      }, __jsx(Icon, {\n        name: rowAfterSVG,\n        size: \"24px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 17\n        }\n      }))), __jsx(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 13\n        }\n      }, __jsx(Button, {\n        icon: true,\n        basic: true,\n        onClick: this.onDeleteRow,\n        disabled: this.props.data.table && ((_this$props$data$tabl6 = this.props.data.table) === null || _this$props$data$tabl6 === void 0 ? void 0 : (_this$props$data$tabl7 = _this$props$data$tabl6.rows) === null || _this$props$data$tabl7 === void 0 ? void 0 : _this$props$data$tabl7.length) === 1,\n        title: this.props.intl.formatMessage(messages.deleteRow),\n        \"aria-label\": this.props.intl.formatMessage(messages.deleteRow),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 15\n        }\n      }, __jsx(Icon, {\n        name: rowDeleteSVG,\n        size: \"24px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 17\n        }\n      }))), __jsx(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 500,\n          columnNumber: 13\n        }\n      }, __jsx(Button, {\n        icon: true,\n        basic: true,\n        onClick: this.onInsertColBefore,\n        title: this.props.intl.formatMessage(messages.insertColBefore),\n        \"aria-label\": this.props.intl.formatMessage(messages.insertColBefore),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 15\n        }\n      }, __jsx(Icon, {\n        name: colBeforeSVG,\n        size: \"24px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 510,\n          columnNumber: 17\n        }\n      }))), __jsx(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 513,\n          columnNumber: 13\n        }\n      }, __jsx(Button, {\n        icon: true,\n        basic: true,\n        onClick: this.onInsertColAfter,\n        title: this.props.intl.formatMessage(messages.insertColAfter),\n        \"aria-label\": this.props.intl.formatMessage(messages.insertColAfter),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 514,\n          columnNumber: 15\n        }\n      }, __jsx(Icon, {\n        name: colAfterSVG,\n        size: \"24px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 523,\n          columnNumber: 17\n        }\n      }))), __jsx(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 13\n        }\n      }, __jsx(Button, {\n        icon: true,\n        basic: true,\n        onClick: this.onDeleteCol,\n        disabled: this.props.data.table && ((_this$props$data$tabl8 = this.props.data.table) === null || _this$props$data$tabl8 === void 0 ? void 0 : (_this$props$data$tabl9 = _this$props$data$tabl8.rows) === null || _this$props$data$tabl9 === void 0 ? void 0 : (_this$props$data$tabl10 = _this$props$data$tabl9[0]) === null || _this$props$data$tabl10 === void 0 ? void 0 : (_this$props$data$tabl11 = _this$props$data$tabl10.cells) === null || _this$props$data$tabl11 === void 0 ? void 0 : _this$props$data$tabl11.length) === 1,\n        title: this.props.intl.formatMessage(messages.deleteCol),\n        \"aria-label\": this.props.intl.formatMessage(messages.deleteCol),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 15\n        }\n      }, __jsx(Icon, {\n        name: colDeleteSVG,\n        size: \"24px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 17\n        }\n      })))), this.props.data.table && __jsx(Table, {\n        fixed: (_this$props$data$tabl12 = this.props.data.table) === null || _this$props$data$tabl12 === void 0 ? void 0 : _this$props$data$tabl12.fixed,\n        compact: (_this$props$data$tabl13 = this.props.data.table) === null || _this$props$data$tabl13 === void 0 ? void 0 : _this$props$data$tabl13.compact,\n        basic: (_this$props$data$tabl14 = this.props.data.table) !== null && _this$props$data$tabl14 !== void 0 && _this$props$data$tabl14.basic ? 'very' : false,\n        celled: (_this$props$data$tabl15 = this.props.data.table) === null || _this$props$data$tabl15 === void 0 ? void 0 : _this$props$data$tabl15.celled,\n        inverted: (_this$props$data$tabl16 = this.props.data.table) === null || _this$props$data$tabl16 === void 0 ? void 0 : _this$props$data$tabl16.inverted,\n        striped: (_this$props$data$tabl17 = this.props.data.table) === null || _this$props$data$tabl17 === void 0 ? void 0 : _this$props$data$tabl17.striped,\n        className: \"slate-table-block\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 544,\n          columnNumber: 11\n        }\n      }, !((_this$props$data$tabl18 = this.props.data.table) !== null && _this$props$data$tabl18 !== void 0 && _this$props$data$tabl18.hideHeaders) ? __jsx(Table.Header, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 554,\n          columnNumber: 15\n        }\n      }, __jsx(Table.Row, {\n        textAlign: \"center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 555,\n          columnNumber: 17\n        }\n      }, headers.map((cell, cellIndex) => __jsx(Table.HeaderCell, {\n        key: cell.key,\n        textAlign: \"center\",\n        verticalAlign: \"middle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 557,\n          columnNumber: 21\n        }\n      }, __jsx(Cell, {\n        value: cell.value,\n        row: 0,\n        cell: cellIndex,\n        onSelectCell: this.onSelectCell,\n        selected: this.props.selected && this.state.selected && 0 === this.state.selected.row && cellIndex === this.state.selected.cell,\n        selectedCell: this.state.selected,\n        isTableBlockSelected: this.props.selected,\n        onAddBlock: this.props.onAddBlock,\n        onSelectBlock: this.props.onSelectBlock,\n        onChange: this.onChangeCell,\n        index: this.props.index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 562,\n          columnNumber: 23\n        }\n      }))))) : '', __jsx(Table.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 587,\n          columnNumber: 13\n        }\n      }, _map(rows, (row, rowIndex) => __jsx(Table.Row, {\n        key: row.key,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 589,\n          columnNumber: 17\n        }\n      }, _map(row.cells, (cell, cellIndex) => {\n        var _this$props$data$tabl19, _this$props$data$tabl20;\n        return __jsx(Table.Cell, {\n          key: cell.key,\n          textAlign: ((_this$props$data$tabl19 = this.props.data.table) === null || _this$props$data$tabl19 === void 0 ? void 0 : _this$props$data$tabl19.textAlign) || 'center',\n          verticalAlign: ((_this$props$data$tabl20 = this.props.data.table) === null || _this$props$data$tabl20 === void 0 ? void 0 : _this$props$data$tabl20.verticalAlign) || 'middle',\n          className: this.props.selected && this.state.selected && rowIndex + 1 === this.state.selected.row && cellIndex === this.state.selected.cell && this.props.selected ? 'selected' : '',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 591,\n            columnNumber: 21\n          }\n        }, __jsx(Cell, {\n          value: cell.value,\n          row: rowIndex + 1,\n          cell: cellIndex,\n          onSelectCell: this.onSelectCell,\n          selected: this.props.selected && this.state.selected && rowIndex + 1 === this.state.selected.row && cellIndex === this.state.selected.cell,\n          selectedCell: this.state.selected,\n          isTableBlockSelected: this.props.selected,\n          onAddBlock: this.props.onAddBlock,\n          onSelectBlock: this.props.onSelectBlock,\n          onChange: this.onChangeCell,\n          index: this.props.index,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 607,\n            columnNumber: 23\n          }\n        }));\n      }))))), __jsx(SidebarPortal, {\n        selected: this.props.selected,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 632,\n          columnNumber: 9\n        }\n      }, __jsx(BlockDataForm, {\n        block: this.props.block,\n        schema: this.schema,\n        title: this.schema.title,\n        onChangeField: (id, value) => {\n          this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), ['variation'].includes(id) ? {\n            [id]: value\n          } : {\n            table: _objectSpread(_objectSpread({}, this.props.data.table || {}), {}, {\n              [id]: value\n            })\n          }));\n        },\n        formData: _objectSpread(_objectSpread({}, this.props.data.table || {}), this.props.data),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 633,\n          columnNumber: 11\n        }\n      })))\n    );\n  }\n}\n_defineProperty(Edit, \"propTypes\", {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  detached: PropTypes.bool,\n  index: PropTypes.number.isRequired,\n  selected: PropTypes.bool.isRequired,\n  block: PropTypes.string.isRequired,\n  onAddBlock: PropTypes.func.isRequired,\n  onChangeBlock: PropTypes.func.isRequired,\n  onDeleteBlock: PropTypes.func.isRequired,\n  onInsertBlock: PropTypes.func.isRequired,\n  onMutateBlock: PropTypes.func.isRequired,\n  onFocusPreviousBlock: PropTypes.func.isRequired,\n  onFocusNextBlock: PropTypes.func.isRequired,\n  onSelectBlock: PropTypes.func.isRequired\n});\n_defineProperty(Edit, \"defaultProps\", {\n  detached: false\n});\nexport default injectIntl(Edit);","map":{"version":3,"names":["React","Component","PropTypes","Button","Table","cx","defineMessages","injectIntl","Icon","BlockDataForm","SidebarPortal","Cell","getSchema","rowBeforeSVG","rowAfterSVG","colBeforeSVG","colAfterSVG","rowDeleteSVG","colDeleteSVG","getId","Math","floor","random","pow","toString","getEmptyParagraph","type","children","text","emptyCell","key","value","emptyRow","cells","initialTable","hideHeaders","fixed","compact","basic","celled","inverted","striped","rows","messages","insertRowBefore","insertRowAfter","deleteRow","insertColBefore","insertColAfter","deleteCol","Edit","constructor","props","state","headers","selected","row","cell","isClient","schema","intl","onChange","bind","onSelectCell","onInsertRowBefore","onInsertRowAfter","onInsertColBefore","onInsertColAfter","onDeleteRow","onDeleteCol","onChangeCell","componentDidMount","data","table","onChangeBlock","block","setState","UNSAFE_componentWillReceiveProps","nextProps","id","slateValue","JSON","parse","stringify","slice","index","length","componentDidUpdate","prevProps","render","filter","_","formatMessage","map","cellIndex","onAddBlock","onSelectBlock","rowIndex","textAlign","verticalAlign","title","includes","objectOf","any","isRequired","detached","bool","number","string","func","onDeleteBlock","onInsertBlock","onMutateBlock","onFocusPreviousBlock","onFocusNextBlock"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-slate/src/blocks/Table/TableBlockEdit.jsx"],"sourcesContent":["/**\n * Slate Table block editor.\n * @module volto-slate/blocks/Table/Edit\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { map, remove } from 'lodash';\nimport { Button, Table } from 'semantic-ui-react';\nimport cx from 'classnames';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { Icon, BlockDataForm, SidebarPortal } from '@plone/volto/components';\n\nimport Cell from './Cell';\n\nimport getSchema from './schema';\n\nimport rowBeforeSVG from '@plone/volto/icons/row-before.svg';\nimport rowAfterSVG from '@plone/volto/icons/row-after.svg';\nimport colBeforeSVG from '@plone/volto/icons/column-before.svg';\nimport colAfterSVG from '@plone/volto/icons/column-after.svg';\nimport rowDeleteSVG from '@plone/volto/icons/row-delete.svg';\nimport colDeleteSVG from '@plone/volto/icons/column-delete.svg';\n\n/**\n * Returns a random string of 32 digits.\n */\nconst getId = () => Math.floor(Math.random() * Math.pow(2, 24)).toString(32);\n\n/**\n * @returns {object} An empty Slate paragraph (a simple Slate block node with\n * type set to \"p\" and a `Text` child with an empty string).\n */\nfunction getEmptyParagraph() {\n  return [{ type: 'p', children: [{ text: '' }] }];\n}\n\n/**\n * @param {string} type The type of the newly created cell: either 'header' or\n * 'data', by default it is 'data'.\n * @returns {object} A new cell object containing three properties: `key`,\n * `type` and `value`.\n */\nconst emptyCell = (type = 'data') => ({\n  key: getId(),\n  type: type,\n  value: getEmptyParagraph(),\n});\n\n/**\n * @param {Array[object]} cells Array of placeholders, each of them will be\n * replaced in the newly created row with an empty cell. (Practically, just the\n * length of the array matters.)\n * @returns {object} A new row object containing the keys `key` and `cells`.\n */\nconst emptyRow = (cells) => ({\n  key: getId(),\n  cells: map(cells, () => emptyCell()),\n});\n\n/**\n * The initial value for the displayed table's data. The IDs of the rows and\n * cells are computed here only once, so each new table has the same IDs\n * initially, but this does not have bad consequences since the key has\n * relevance only in the context in which it is used.\n */\nconst initialTable = {\n  hideHeaders: false,\n  fixed: true,\n  compact: false,\n  basic: false,\n  celled: true,\n  inverted: false,\n  striped: false,\n  rows: [\n    {\n      key: getId(),\n      cells: [\n        {\n          key: getId(),\n          type: 'header',\n          value: getEmptyParagraph(),\n        },\n        {\n          key: getId(),\n          type: 'header',\n          value: getEmptyParagraph(),\n        },\n      ],\n    },\n    {\n      key: getId(),\n      cells: [\n        {\n          key: getId(),\n          type: 'data',\n          value: getEmptyParagraph(),\n        },\n        {\n          key: getId(),\n          type: 'data',\n          value: getEmptyParagraph(),\n        },\n      ],\n    },\n  ],\n};\n\nconst messages = defineMessages({\n  insertRowBefore: {\n    id: 'Insert row before',\n    defaultMessage: 'Insert row before',\n  },\n  insertRowAfter: {\n    id: 'Insert row after',\n    defaultMessage: 'Insert row after',\n  },\n  deleteRow: {\n    id: 'Delete row',\n    defaultMessage: 'Delete row',\n  },\n  insertColBefore: {\n    id: 'Insert col before',\n    defaultMessage: 'Insert col before',\n  },\n  insertColAfter: {\n    id: 'Insert col after',\n    defaultMessage: 'Insert col after',\n  },\n  deleteCol: {\n    id: 'Delete col',\n    defaultMessage: 'Delete col',\n  },\n});\n\n/**\n * Edit component for the Slate Table block type in Volto.\n * @class Edit\n * @extends Component\n */\nclass Edit extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    data: PropTypes.objectOf(PropTypes.any).isRequired,\n    detached: PropTypes.bool,\n    index: PropTypes.number.isRequired,\n    selected: PropTypes.bool.isRequired,\n    block: PropTypes.string.isRequired,\n    onAddBlock: PropTypes.func.isRequired,\n    onChangeBlock: PropTypes.func.isRequired,\n    onDeleteBlock: PropTypes.func.isRequired,\n    onInsertBlock: PropTypes.func.isRequired,\n    onMutateBlock: PropTypes.func.isRequired,\n    onFocusPreviousBlock: PropTypes.func.isRequired,\n    onFocusNextBlock: PropTypes.func.isRequired,\n    onSelectBlock: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    detached: false,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      headers: [],\n      rows: {},\n      selected: {\n        row: 0,\n        cell: 0,\n      },\n      isClient: false,\n    };\n    this.schema = getSchema({ intl: props.intl });\n    this.onChange = this.onChange.bind(this);\n    this.onSelectCell = this.onSelectCell.bind(this);\n    this.onInsertRowBefore = this.onInsertRowBefore.bind(this);\n    this.onInsertRowAfter = this.onInsertRowAfter.bind(this);\n    this.onInsertColBefore = this.onInsertColBefore.bind(this);\n    this.onInsertColAfter = this.onInsertColAfter.bind(this);\n    this.onDeleteRow = this.onDeleteRow.bind(this);\n    this.onDeleteCol = this.onDeleteCol.bind(this);\n    this.onChangeCell = this.onChangeCell.bind(this);\n  }\n\n  /**\n   * Component did mount lifecycle method\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    if (!this.props.data.table) {\n      this.props.onChangeBlock(this.props.block, {\n        ...this.props.data,\n        table: initialTable,\n      });\n    }\n    this.setState({ isClient: true });\n  }\n\n  /**\n   * Component will receive props lifecycle method\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (!nextProps.data.table) {\n      this.props.onChangeBlock(nextProps.block, {\n        ...nextProps.data,\n        table: initialTable,\n      });\n    }\n  }\n\n  /**\n   * On change\n   * @method onChange\n   * @param {string} id Id of modified property.\n   * @param {any} value New value of modified property.\n   * @returns {undefined}\n   */\n  onChange(id, value) {\n    const table = this.props.data.table;\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table: {\n        ...table,\n        [id]: value,\n      },\n    });\n  }\n\n  /**\n   * Select cell handler\n   * @method onSelectCell\n   * @param {Number} row Row index.\n   * @param {Number} cell Cell index.\n   * @returns {undefined}\n   */\n  onSelectCell(row, cell) {\n    this.setState({ selected: { row, cell } });\n  }\n\n  /**\n   * Change cell handler\n   * @param {Number} row Row index.\n   * @param {Number} cell Cell index.\n   * @param {Array} slateValue Value of the `SlateEditor` in the cell.\n   * @returns {undefined}\n   */\n  onChangeCell(row, cell, slateValue) {\n    const table = JSON.parse(JSON.stringify(this.props.data.table));\n    table.rows[row].cells[cell] = {\n      ...table.rows[row].cells[cell],\n      value: JSON.parse(JSON.stringify(slateValue)),\n    };\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table,\n    });\n  }\n\n  /**\n   * Insert row before handler. Keeps the selected cell as selected after the\n   * operation is done.\n   * @returns {undefined}\n   */\n  onInsertRowBefore() {\n    const table = this.props.data.table;\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table: {\n        ...table,\n        rows: [\n          ...table.rows.slice(0, this.state.selected.row),\n          emptyRow(table.rows[0].cells),\n          ...table.rows.slice(this.state.selected.row),\n        ],\n      },\n    });\n    this.setState({\n      selected: {\n        row: this.state.selected.row + 1,\n        cell: this.state.selected.cell,\n      },\n    });\n  }\n\n  /**\n   * Insert row after handler\n   * @returns {undefined}\n   */\n  onInsertRowAfter() {\n    const table = this.props.data.table;\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table: {\n        ...table,\n        rows: [\n          ...table.rows.slice(0, this.state.selected.row + 1),\n          emptyRow(table.rows[0].cells),\n          ...table.rows.slice(this.state.selected.row + 1),\n        ],\n      },\n    });\n  }\n\n  /**\n   * Insert column before handler. Keeps the selected cell as selected after the\n   * operation is done.\n   * @returns {undefined}\n   */\n  onInsertColBefore() {\n    const table = this.props.data.table;\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table: {\n        ...table,\n        rows: map(table.rows, (row, index) => ({\n          ...row,\n          cells: [\n            ...row.cells.slice(0, this.state.selected.cell),\n            emptyCell(table.rows[index].cells[this.state.selected.cell].type),\n            ...row.cells.slice(this.state.selected.cell),\n          ],\n        })),\n      },\n    });\n    this.setState({\n      selected: {\n        row: this.state.selected.row,\n        cell: this.state.selected.cell + 1,\n      },\n    });\n  }\n\n  /**\n   * Insert column after handler\n   * @returns {undefined}\n   */\n  onInsertColAfter() {\n    const table = this.props.data.table;\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table: {\n        ...table,\n        rows: map(table.rows, (row, index) => ({\n          ...row,\n          cells: [\n            ...row.cells.slice(0, this.state.selected.cell + 1),\n            emptyCell(table.rows[index].cells[this.state.selected.cell].type),\n            ...row.cells.slice(this.state.selected.cell + 1),\n          ],\n        })),\n      },\n    });\n  }\n\n  /**\n   * Delete column handler. Changes the selected cell if the last table column\n   * is selected.\n   * @returns {undefined}\n   */\n  onDeleteCol() {\n    const table = this.props.data.table;\n\n    if (this.state.selected.cell === table.rows[0].cells.length - 1) {\n      this.setState({\n        selected: {\n          row: this.state.selected.row,\n          cell: this.state.selected.cell - 1,\n        },\n      });\n    }\n\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table: {\n        ...table,\n        rows: map(table.rows, (row) => ({\n          ...row,\n          cells: remove(\n            row.cells,\n            (cell, index) => index !== this.state.selected.cell,\n          ),\n        })),\n      },\n    });\n  }\n\n  /**\n   * Delete row handler. Changes the selected cell if the last table row is\n   * selected.\n   * @method onDeleteRow\n   * @returns {undefined}\n   */\n  onDeleteRow() {\n    const table = this.props.data.table;\n\n    if (this.state.selected.row === table.rows.length - 1) {\n      this.setState({\n        selected: {\n          row: this.state.selected.row - 1,\n          cell: this.state.selected.cell,\n        },\n      });\n    }\n\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table: {\n        ...table,\n        rows: remove(\n          table.rows,\n          (row, index) => index !== this.state.selected.row,\n        ),\n      },\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.selected && !this.props.selected) {\n      this.setState({ selected: null });\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const headers = this.props.data.table?.rows?.[0]?.cells || [];\n    const rows =\n      this.props.data.table?.rows?.filter((_, index) => index > 0) || [];\n\n    return (\n      // TODO: use slate-table instead of table, but first copy the CSS styles\n      // to the new name\n      <div className={cx('block table', { selected: this.props.selected })}>\n        {this.props.selected && (\n          <div className=\"toolbar\">\n            <Button.Group>\n              <Button\n                icon\n                basic\n                onClick={this.onInsertRowBefore}\n                title={this.props.intl.formatMessage(messages.insertRowBefore)}\n                aria-label={this.props.intl.formatMessage(\n                  messages.insertRowBefore,\n                )}\n              >\n                <Icon name={rowBeforeSVG} size=\"24px\" />\n              </Button>\n            </Button.Group>\n            <Button.Group>\n              <Button\n                icon\n                basic\n                onClick={this.onInsertRowAfter}\n                title={this.props.intl.formatMessage(messages.insertRowAfter)}\n                aria-label={this.props.intl.formatMessage(\n                  messages.insertRowAfter,\n                )}\n              >\n                <Icon name={rowAfterSVG} size=\"24px\" />\n              </Button>\n            </Button.Group>\n            <Button.Group>\n              <Button\n                icon\n                basic\n                onClick={this.onDeleteRow}\n                disabled={\n                  this.props.data.table &&\n                  this.props.data.table?.rows?.length === 1\n                }\n                title={this.props.intl.formatMessage(messages.deleteRow)}\n                aria-label={this.props.intl.formatMessage(messages.deleteRow)}\n              >\n                <Icon name={rowDeleteSVG} size=\"24px\" />\n              </Button>\n            </Button.Group>\n            <Button.Group>\n              <Button\n                icon\n                basic\n                onClick={this.onInsertColBefore}\n                title={this.props.intl.formatMessage(messages.insertColBefore)}\n                aria-label={this.props.intl.formatMessage(\n                  messages.insertColBefore,\n                )}\n              >\n                <Icon name={colBeforeSVG} size=\"24px\" />\n              </Button>\n            </Button.Group>\n            <Button.Group>\n              <Button\n                icon\n                basic\n                onClick={this.onInsertColAfter}\n                title={this.props.intl.formatMessage(messages.insertColAfter)}\n                aria-label={this.props.intl.formatMessage(\n                  messages.insertColAfter,\n                )}\n              >\n                <Icon name={colAfterSVG} size=\"24px\" />\n              </Button>\n            </Button.Group>\n            <Button.Group>\n              <Button\n                icon\n                basic\n                onClick={this.onDeleteCol}\n                disabled={\n                  this.props.data.table &&\n                  this.props.data.table?.rows?.[0]?.cells?.length === 1\n                }\n                title={this.props.intl.formatMessage(messages.deleteCol)}\n                aria-label={this.props.intl.formatMessage(messages.deleteCol)}\n              >\n                <Icon name={colDeleteSVG} size=\"24px\" />\n              </Button>\n            </Button.Group>\n          </div>\n        )}\n        {this.props.data.table && (\n          <Table\n            fixed={this.props.data.table?.fixed}\n            compact={this.props.data.table?.compact}\n            basic={this.props.data.table?.basic ? 'very' : false}\n            celled={this.props.data.table?.celled}\n            inverted={this.props.data.table?.inverted}\n            striped={this.props.data.table?.striped}\n            className=\"slate-table-block\"\n          >\n            {!this.props.data.table?.hideHeaders ? (\n              <Table.Header>\n                <Table.Row textAlign=\"center\">\n                  {headers.map((cell, cellIndex) => (\n                    <Table.HeaderCell\n                      key={cell.key}\n                      textAlign=\"center\"\n                      verticalAlign=\"middle\"\n                    >\n                      <Cell\n                        value={cell.value}\n                        row={0}\n                        cell={cellIndex}\n                        onSelectCell={this.onSelectCell}\n                        selected={\n                          this.props.selected &&\n                          this.state.selected &&\n                          0 === this.state.selected.row &&\n                          cellIndex === this.state.selected.cell\n                        }\n                        selectedCell={this.state.selected}\n                        isTableBlockSelected={this.props.selected}\n                        onAddBlock={this.props.onAddBlock}\n                        onSelectBlock={this.props.onSelectBlock}\n                        onChange={this.onChangeCell}\n                        index={this.props.index}\n                      />\n                    </Table.HeaderCell>\n                  ))}\n                </Table.Row>\n              </Table.Header>\n            ) : (\n              ''\n            )}\n            <Table.Body>\n              {map(rows, (row, rowIndex) => (\n                <Table.Row key={row.key}>\n                  {map(row.cells, (cell, cellIndex) => (\n                    <Table.Cell\n                      key={cell.key}\n                      textAlign={this.props.data.table?.textAlign || 'center'}\n                      verticalAlign={\n                        this.props.data.table?.verticalAlign || 'middle'\n                      }\n                      className={\n                        this.props.selected &&\n                        this.state.selected &&\n                        rowIndex + 1 === this.state.selected.row &&\n                        cellIndex === this.state.selected.cell &&\n                        this.props.selected\n                          ? 'selected'\n                          : ''\n                      }\n                    >\n                      <Cell\n                        value={cell.value}\n                        row={rowIndex + 1}\n                        cell={cellIndex}\n                        onSelectCell={this.onSelectCell}\n                        selected={\n                          this.props.selected &&\n                          this.state.selected &&\n                          rowIndex + 1 === this.state.selected.row &&\n                          cellIndex === this.state.selected.cell\n                        }\n                        selectedCell={this.state.selected}\n                        isTableBlockSelected={this.props.selected}\n                        onAddBlock={this.props.onAddBlock}\n                        onSelectBlock={this.props.onSelectBlock}\n                        onChange={this.onChangeCell}\n                        index={this.props.index}\n                      />\n                    </Table.Cell>\n                  ))}\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n        )}\n        <SidebarPortal selected={this.props.selected}>\n          <BlockDataForm\n            block={this.props.block}\n            schema={this.schema}\n            title={this.schema.title}\n            onChangeField={(id, value) => {\n              this.props.onChangeBlock(this.props.block, {\n                ...this.props.data,\n                ...(['variation'].includes(id)\n                  ? { [id]: value }\n                  : {\n                      table: {\n                        ...(this.props.data.table || {}),\n                        [id]: value,\n                      },\n                    }),\n              });\n            }}\n            formData={{ ...(this.props.data.table || {}), ...this.props.data }}\n          />\n        </SidebarPortal>\n      </div>\n    );\n  }\n}\n\nexport default injectIntl(Edit);\n"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,SAAS,MAAM,YAAY;AAElC,SAASC,MAAM,EAAEC,KAAK,QAAQ,mBAAmB;AACjD,OAAOC,EAAE,MAAM,YAAY;AAC3B,SAASC,cAAc,EAAEC,UAAU,QAAQ,YAAY;AACvD,SAASC,IAAI,EAAEC,aAAa,EAAEC,aAAa,QAAQ,yBAAyB;AAE5E,OAAOC,IAAI,MAAM,QAAQ;AAEzB,OAAOC,SAAS,MAAM,UAAU;AAEhC,OAAOC,YAAY,MAAM,mCAAmC;AAC5D,OAAOC,WAAW,MAAM,kCAAkC;AAC1D,OAAOC,YAAY,MAAM,sCAAsC;AAC/D,OAAOC,WAAW,MAAM,qCAAqC;AAC7D,OAAOC,YAAY,MAAM,mCAAmC;AAC5D,OAAOC,YAAY,MAAM,sCAAsC;;AAE/D;AACA;AACA;AACA,MAAMC,KAAK,GAAG,MAAMC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGF,IAAI,CAACG,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC;;AAE5E;AACA;AACA;AACA;AACA,SAASC,iBAAiB,GAAG;EAC3B,OAAO,CAAC;IAAEC,IAAI,EAAE,GAAG;IAAEC,QAAQ,EAAE,CAAC;MAAEC,IAAI,EAAE;IAAG,CAAC;EAAE,CAAC,CAAC;AAClD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,SAAS,GAAG,CAACH,IAAI,GAAG,MAAM,MAAM;EACpCI,GAAG,EAAEX,KAAK,EAAE;EACZO,IAAI,EAAEA,IAAI;EACVK,KAAK,EAAEN,iBAAiB;AAC1B,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA,MAAMO,QAAQ,GAAIC,KAAK,KAAM;EAC3BH,GAAG,EAAEX,KAAK,EAAE;EACZc,KAAK,EAAE,KAAIA,KAAK,EAAE,MAAMJ,SAAS,EAAE;AACrC,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA,MAAMK,YAAY,GAAG;EACnBC,WAAW,EAAE,KAAK;EAClBC,KAAK,EAAE,IAAI;EACXC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE,KAAK;EACZC,MAAM,EAAE,IAAI;EACZC,QAAQ,EAAE,KAAK;EACfC,OAAO,EAAE,KAAK;EACdC,IAAI,EAAE,CACJ;IACEZ,GAAG,EAAEX,KAAK,EAAE;IACZc,KAAK,EAAE,CACL;MACEH,GAAG,EAAEX,KAAK,EAAE;MACZO,IAAI,EAAE,QAAQ;MACdK,KAAK,EAAEN,iBAAiB;IAC1B,CAAC,EACD;MACEK,GAAG,EAAEX,KAAK,EAAE;MACZO,IAAI,EAAE,QAAQ;MACdK,KAAK,EAAEN,iBAAiB;IAC1B,CAAC;EAEL,CAAC,EACD;IACEK,GAAG,EAAEX,KAAK,EAAE;IACZc,KAAK,EAAE,CACL;MACEH,GAAG,EAAEX,KAAK,EAAE;MACZO,IAAI,EAAE,MAAM;MACZK,KAAK,EAAEN,iBAAiB;IAC1B,CAAC,EACD;MACEK,GAAG,EAAEX,KAAK,EAAE;MACZO,IAAI,EAAE,MAAM;MACZK,KAAK,EAAEN,iBAAiB;IAC1B,CAAC;EAEL,CAAC;AAEL,CAAC;AAED,MAAMkB,QAAQ,GAAGrC,cAAc,CAAC;EAC9BsC,eAAe;IAAA;IAAA;EAAA,CAGd;EACDC,cAAc;IAAA;IAAA;EAAA,CAGb;EACDC,SAAS;IAAA;IAAA;EAAA,CAGR;EACDC,eAAe;IAAA;IAAA;EAAA,CAGd;EACDC,cAAc;IAAA;IAAA;EAAA,CAGb;EACDC,SAAS;IAAA;IAAA;EAAA;AAIX,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA,MAAMC,IAAI,SAASjD,SAAS,CAAC;EAC3B;AACF;AACA;AACA;AACA;;EAiBE;AACF;AACA;AACA;AACA;;EAKE;AACF;AACA;AACA;AACA;AACA;EACEkD,WAAW,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IACZ,IAAI,CAACC,KAAK,GAAG;MACXC,OAAO,EAAE,EAAE;MACXZ,IAAI,EAAE,CAAC,CAAC;MACRa,QAAQ,EAAE;QACRC,GAAG,EAAE,CAAC;QACNC,IAAI,EAAE;MACR,CAAC;MACDC,QAAQ,EAAE;IACZ,CAAC;IACD,IAAI,CAACC,MAAM,GAAG/C,SAAS,CAAC;MAAEgD,IAAI,EAAER,KAAK,CAACQ;IAAK,CAAC,CAAC;IAC7C,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACC,IAAI,CAAC,IAAI,CAAC;IACxC,IAAI,CAACC,YAAY,GAAG,IAAI,CAACA,YAAY,CAACD,IAAI,CAAC,IAAI,CAAC;IAChD,IAAI,CAACE,iBAAiB,GAAG,IAAI,CAACA,iBAAiB,CAACF,IAAI,CAAC,IAAI,CAAC;IAC1D,IAAI,CAACG,gBAAgB,GAAG,IAAI,CAACA,gBAAgB,CAACH,IAAI,CAAC,IAAI,CAAC;IACxD,IAAI,CAACI,iBAAiB,GAAG,IAAI,CAACA,iBAAiB,CAACJ,IAAI,CAAC,IAAI,CAAC;IAC1D,IAAI,CAACK,gBAAgB,GAAG,IAAI,CAACA,gBAAgB,CAACL,IAAI,CAAC,IAAI,CAAC;IACxD,IAAI,CAACM,WAAW,GAAG,IAAI,CAACA,WAAW,CAACN,IAAI,CAAC,IAAI,CAAC;IAC9C,IAAI,CAACO,WAAW,GAAG,IAAI,CAACA,WAAW,CAACP,IAAI,CAAC,IAAI,CAAC;IAC9C,IAAI,CAACQ,YAAY,GAAG,IAAI,CAACA,YAAY,CAACR,IAAI,CAAC,IAAI,CAAC;EAClD;;EAEA;AACF;AACA;AACA;AACA;EACES,iBAAiB,GAAG;IAClB,IAAI,CAAC,IAAI,CAACnB,KAAK,CAACoB,IAAI,CAACC,KAAK,EAAE;MAC1B,IAAI,CAACrB,KAAK,CAACsB,aAAa,CAAC,IAAI,CAACtB,KAAK,CAACuB,KAAK,kCACpC,IAAI,CAACvB,KAAK,CAACoB,IAAI;QAClBC,KAAK,EAAEvC;MAAY,GACnB;IACJ;IACA,IAAI,CAAC0C,QAAQ,CAAC;MAAElB,QAAQ,EAAE;IAAK,CAAC,CAAC;EACnC;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEmB,gCAAgC,CAACC,SAAS,EAAE;IAC1C,IAAI,CAACA,SAAS,CAACN,IAAI,CAACC,KAAK,EAAE;MACzB,IAAI,CAACrB,KAAK,CAACsB,aAAa,CAACI,SAAS,CAACH,KAAK,kCACnCG,SAAS,CAACN,IAAI;QACjBC,KAAK,EAAEvC;MAAY,GACnB;IACJ;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACE2B,QAAQ,CAACkB,EAAE,EAAEhD,KAAK,EAAE;IAClB,MAAM0C,KAAK,GAAG,IAAI,CAACrB,KAAK,CAACoB,IAAI,CAACC,KAAK;IACnC,IAAI,CAACrB,KAAK,CAACsB,aAAa,CAAC,IAAI,CAACtB,KAAK,CAACuB,KAAK,kCACpC,IAAI,CAACvB,KAAK,CAACoB,IAAI;MAClBC,KAAK,kCACAA,KAAK;QACR,CAACM,EAAE,GAAGhD;MAAK;IACZ,GACD;EACJ;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEgC,YAAY,CAACP,GAAG,EAAEC,IAAI,EAAE;IACtB,IAAI,CAACmB,QAAQ,CAAC;MAAErB,QAAQ,EAAE;QAAEC,GAAG;QAAEC;MAAK;IAAE,CAAC,CAAC;EAC5C;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEa,YAAY,CAACd,GAAG,EAAEC,IAAI,EAAEuB,UAAU,EAAE;IAClC,MAAMP,KAAK,GAAGQ,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAAC,IAAI,CAAC/B,KAAK,CAACoB,IAAI,CAACC,KAAK,CAAC,CAAC;IAC/DA,KAAK,CAAC/B,IAAI,CAACc,GAAG,CAAC,CAACvB,KAAK,CAACwB,IAAI,CAAC,mCACtBgB,KAAK,CAAC/B,IAAI,CAACc,GAAG,CAAC,CAACvB,KAAK,CAACwB,IAAI,CAAC;MAC9B1B,KAAK,EAAEkD,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACH,UAAU,CAAC;IAAC,EAC9C;IACD,IAAI,CAAC5B,KAAK,CAACsB,aAAa,CAAC,IAAI,CAACtB,KAAK,CAACuB,KAAK,kCACpC,IAAI,CAACvB,KAAK,CAACoB,IAAI;MAClBC;IAAK,GACL;EACJ;;EAEA;AACF;AACA;AACA;AACA;EACET,iBAAiB,GAAG;IAClB,MAAMS,KAAK,GAAG,IAAI,CAACrB,KAAK,CAACoB,IAAI,CAACC,KAAK;IACnC,IAAI,CAACrB,KAAK,CAACsB,aAAa,CAAC,IAAI,CAACtB,KAAK,CAACuB,KAAK,kCACpC,IAAI,CAACvB,KAAK,CAACoB,IAAI;MAClBC,KAAK,kCACAA,KAAK;QACR/B,IAAI,EAAE,CACJ,GAAG+B,KAAK,CAAC/B,IAAI,CAAC0C,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC/B,KAAK,CAACE,QAAQ,CAACC,GAAG,CAAC,EAC/CxB,QAAQ,CAACyC,KAAK,CAAC/B,IAAI,CAAC,CAAC,CAAC,CAACT,KAAK,CAAC,EAC7B,GAAGwC,KAAK,CAAC/B,IAAI,CAAC0C,KAAK,CAAC,IAAI,CAAC/B,KAAK,CAACE,QAAQ,CAACC,GAAG,CAAC;MAC7C;IACF,GACD;IACF,IAAI,CAACoB,QAAQ,CAAC;MACZrB,QAAQ,EAAE;QACRC,GAAG,EAAE,IAAI,CAACH,KAAK,CAACE,QAAQ,CAACC,GAAG,GAAG,CAAC;QAChCC,IAAI,EAAE,IAAI,CAACJ,KAAK,CAACE,QAAQ,CAACE;MAC5B;IACF,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;EACEQ,gBAAgB,GAAG;IACjB,MAAMQ,KAAK,GAAG,IAAI,CAACrB,KAAK,CAACoB,IAAI,CAACC,KAAK;IACnC,IAAI,CAACrB,KAAK,CAACsB,aAAa,CAAC,IAAI,CAACtB,KAAK,CAACuB,KAAK,kCACpC,IAAI,CAACvB,KAAK,CAACoB,IAAI;MAClBC,KAAK,kCACAA,KAAK;QACR/B,IAAI,EAAE,CACJ,GAAG+B,KAAK,CAAC/B,IAAI,CAAC0C,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC/B,KAAK,CAACE,QAAQ,CAACC,GAAG,GAAG,CAAC,CAAC,EACnDxB,QAAQ,CAACyC,KAAK,CAAC/B,IAAI,CAAC,CAAC,CAAC,CAACT,KAAK,CAAC,EAC7B,GAAGwC,KAAK,CAAC/B,IAAI,CAAC0C,KAAK,CAAC,IAAI,CAAC/B,KAAK,CAACE,QAAQ,CAACC,GAAG,GAAG,CAAC,CAAC;MACjD;IACF,GACD;EACJ;;EAEA;AACF;AACA;AACA;AACA;EACEU,iBAAiB,GAAG;IAClB,MAAMO,KAAK,GAAG,IAAI,CAACrB,KAAK,CAACoB,IAAI,CAACC,KAAK;IACnC,IAAI,CAACrB,KAAK,CAACsB,aAAa,CAAC,IAAI,CAACtB,KAAK,CAACuB,KAAK,kCACpC,IAAI,CAACvB,KAAK,CAACoB,IAAI;MAClBC,KAAK,kCACAA,KAAK;QACR/B,IAAI,EAAE,KAAI+B,KAAK,CAAC/B,IAAI,EAAE,CAACc,GAAG,EAAE6B,KAAK,qCAC5B7B,GAAG;UACNvB,KAAK,EAAE,CACL,GAAGuB,GAAG,CAACvB,KAAK,CAACmD,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC/B,KAAK,CAACE,QAAQ,CAACE,IAAI,CAAC,EAC/C5B,SAAS,CAAC4C,KAAK,CAAC/B,IAAI,CAAC2C,KAAK,CAAC,CAACpD,KAAK,CAAC,IAAI,CAACoB,KAAK,CAACE,QAAQ,CAACE,IAAI,CAAC,CAAC/B,IAAI,CAAC,EACjE,GAAG8B,GAAG,CAACvB,KAAK,CAACmD,KAAK,CAAC,IAAI,CAAC/B,KAAK,CAACE,QAAQ,CAACE,IAAI,CAAC;QAC7C,EACD;MAAC;IACJ,GACD;IACF,IAAI,CAACmB,QAAQ,CAAC;MACZrB,QAAQ,EAAE;QACRC,GAAG,EAAE,IAAI,CAACH,KAAK,CAACE,QAAQ,CAACC,GAAG;QAC5BC,IAAI,EAAE,IAAI,CAACJ,KAAK,CAACE,QAAQ,CAACE,IAAI,GAAG;MACnC;IACF,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;EACEU,gBAAgB,GAAG;IACjB,MAAMM,KAAK,GAAG,IAAI,CAACrB,KAAK,CAACoB,IAAI,CAACC,KAAK;IACnC,IAAI,CAACrB,KAAK,CAACsB,aAAa,CAAC,IAAI,CAACtB,KAAK,CAACuB,KAAK,kCACpC,IAAI,CAACvB,KAAK,CAACoB,IAAI;MAClBC,KAAK,kCACAA,KAAK;QACR/B,IAAI,EAAE,KAAI+B,KAAK,CAAC/B,IAAI,EAAE,CAACc,GAAG,EAAE6B,KAAK,qCAC5B7B,GAAG;UACNvB,KAAK,EAAE,CACL,GAAGuB,GAAG,CAACvB,KAAK,CAACmD,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC/B,KAAK,CAACE,QAAQ,CAACE,IAAI,GAAG,CAAC,CAAC,EACnD5B,SAAS,CAAC4C,KAAK,CAAC/B,IAAI,CAAC2C,KAAK,CAAC,CAACpD,KAAK,CAAC,IAAI,CAACoB,KAAK,CAACE,QAAQ,CAACE,IAAI,CAAC,CAAC/B,IAAI,CAAC,EACjE,GAAG8B,GAAG,CAACvB,KAAK,CAACmD,KAAK,CAAC,IAAI,CAAC/B,KAAK,CAACE,QAAQ,CAACE,IAAI,GAAG,CAAC,CAAC;QACjD,EACD;MAAC;IACJ,GACD;EACJ;;EAEA;AACF;AACA;AACA;AACA;EACEY,WAAW,GAAG;IACZ,MAAMI,KAAK,GAAG,IAAI,CAACrB,KAAK,CAACoB,IAAI,CAACC,KAAK;IAEnC,IAAI,IAAI,CAACpB,KAAK,CAACE,QAAQ,CAACE,IAAI,KAAKgB,KAAK,CAAC/B,IAAI,CAAC,CAAC,CAAC,CAACT,KAAK,CAACqD,MAAM,GAAG,CAAC,EAAE;MAC/D,IAAI,CAACV,QAAQ,CAAC;QACZrB,QAAQ,EAAE;UACRC,GAAG,EAAE,IAAI,CAACH,KAAK,CAACE,QAAQ,CAACC,GAAG;UAC5BC,IAAI,EAAE,IAAI,CAACJ,KAAK,CAACE,QAAQ,CAACE,IAAI,GAAG;QACnC;MACF,CAAC,CAAC;IACJ;IAEA,IAAI,CAACL,KAAK,CAACsB,aAAa,CAAC,IAAI,CAACtB,KAAK,CAACuB,KAAK,kCACpC,IAAI,CAACvB,KAAK,CAACoB,IAAI;MAClBC,KAAK,kCACAA,KAAK;QACR/B,IAAI,EAAE,KAAI+B,KAAK,CAAC/B,IAAI,EAAGc,GAAG,oCACrBA,GAAG;UACNvB,KAAK,EAAE,QACLuB,GAAG,CAACvB,KAAK,EACT,CAACwB,IAAI,EAAE4B,KAAK,KAAKA,KAAK,KAAK,IAAI,CAAChC,KAAK,CAACE,QAAQ,CAACE,IAAI;QACpD,EACD;MAAC;IACJ,GACD;EACJ;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEW,WAAW,GAAG;IACZ,MAAMK,KAAK,GAAG,IAAI,CAACrB,KAAK,CAACoB,IAAI,CAACC,KAAK;IAEnC,IAAI,IAAI,CAACpB,KAAK,CAACE,QAAQ,CAACC,GAAG,KAAKiB,KAAK,CAAC/B,IAAI,CAAC4C,MAAM,GAAG,CAAC,EAAE;MACrD,IAAI,CAACV,QAAQ,CAAC;QACZrB,QAAQ,EAAE;UACRC,GAAG,EAAE,IAAI,CAACH,KAAK,CAACE,QAAQ,CAACC,GAAG,GAAG,CAAC;UAChCC,IAAI,EAAE,IAAI,CAACJ,KAAK,CAACE,QAAQ,CAACE;QAC5B;MACF,CAAC,CAAC;IACJ;IAEA,IAAI,CAACL,KAAK,CAACsB,aAAa,CAAC,IAAI,CAACtB,KAAK,CAACuB,KAAK,kCACpC,IAAI,CAACvB,KAAK,CAACoB,IAAI;MAClBC,KAAK,kCACAA,KAAK;QACR/B,IAAI,EAAE,QACJ+B,KAAK,CAAC/B,IAAI,EACV,CAACc,GAAG,EAAE6B,KAAK,KAAKA,KAAK,KAAK,IAAI,CAAChC,KAAK,CAACE,QAAQ,CAACC,GAAG;MAClD;IACF,GACD;EACJ;EAEA+B,kBAAkB,CAACC,SAAS,EAAE;IAC5B,IAAIA,SAAS,CAACjC,QAAQ,IAAI,CAAC,IAAI,CAACH,KAAK,CAACG,QAAQ,EAAE;MAC9C,IAAI,CAACqB,QAAQ,CAAC;QAAErB,QAAQ,EAAE;MAAK,CAAC,CAAC;IACnC;EACF;;EAEA;AACF;AACA;AACA;AACA;EACEkC,MAAM,GAAG;IAAA;IACP,MAAMnC,OAAO,GAAG,8BAAI,CAACF,KAAK,CAACoB,IAAI,CAACC,KAAK,oFAArB,sBAAuB/B,IAAI,qFAA3B,uBAA8B,CAAC,CAAC,2DAAhC,uBAAkCT,KAAK,KAAI,EAAE;IAC7D,MAAMS,IAAI,GACR,+BAAI,CAACU,KAAK,CAACoB,IAAI,CAACC,KAAK,qFAArB,uBAAuB/B,IAAI,2DAA3B,uBAA6BgD,MAAM,CAAC,CAACC,CAAC,EAAEN,KAAK,KAAKA,KAAK,GAAG,CAAC,CAAC,KAAI,EAAE;IAEpE;MACE;MACA;MACA;QAAK,SAAS,EAAEhF,EAAE,CAAC,aAAa,EAAE;UAAEkD,QAAQ,EAAE,IAAI,CAACH,KAAK,CAACG;QAAS,CAAC,CAAE;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAClE,IAAI,CAACH,KAAK,CAACG,QAAQ,IAClB;QAAK,SAAS,EAAC,SAAS;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GACtB,MAAC,MAAM,CAAC,KAAK;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GACX,MAAC,MAAM;QACL,IAAI;QACJ,KAAK;QACL,OAAO,EAAE,IAAI,CAACS,iBAAkB;QAChC,KAAK,EAAE,IAAI,CAACZ,KAAK,CAACQ,IAAI,CAACgC,aAAa,CAACjD,QAAQ,CAACC,eAAe,CAAE;QAC/D,cAAY,IAAI,CAACQ,KAAK,CAACQ,IAAI,CAACgC,aAAa,CACvCjD,QAAQ,CAACC,eAAe,CACxB;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAEF,MAAC,IAAI;QAAC,IAAI,EAAE/B,YAAa;QAAC,IAAI,EAAC,MAAM;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAAG,CACjC,CACI,EACf,MAAC,MAAM,CAAC,KAAK;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GACX,MAAC,MAAM;QACL,IAAI;QACJ,KAAK;QACL,OAAO,EAAE,IAAI,CAACoD,gBAAiB;QAC/B,KAAK,EAAE,IAAI,CAACb,KAAK,CAACQ,IAAI,CAACgC,aAAa,CAACjD,QAAQ,CAACE,cAAc,CAAE;QAC9D,cAAY,IAAI,CAACO,KAAK,CAACQ,IAAI,CAACgC,aAAa,CACvCjD,QAAQ,CAACE,cAAc,CACvB;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAEF,MAAC,IAAI;QAAC,IAAI,EAAE/B,WAAY;QAAC,IAAI,EAAC,MAAM;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAAG,CAChC,CACI,EACf,MAAC,MAAM,CAAC,KAAK;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GACX,MAAC,MAAM;QACL,IAAI;QACJ,KAAK;QACL,OAAO,EAAE,IAAI,CAACsD,WAAY;QAC1B,QAAQ,EACN,IAAI,CAAChB,KAAK,CAACoB,IAAI,CAACC,KAAK,IACrB,+BAAI,CAACrB,KAAK,CAACoB,IAAI,CAACC,KAAK,qFAArB,uBAAuB/B,IAAI,2DAA3B,uBAA6B4C,MAAM,MAAK,CACzC;QACD,KAAK,EAAE,IAAI,CAAClC,KAAK,CAACQ,IAAI,CAACgC,aAAa,CAACjD,QAAQ,CAACG,SAAS,CAAE;QACzD,cAAY,IAAI,CAACM,KAAK,CAACQ,IAAI,CAACgC,aAAa,CAACjD,QAAQ,CAACG,SAAS,CAAE;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAE9D,MAAC,IAAI;QAAC,IAAI,EAAE7B,YAAa;QAAC,IAAI,EAAC,MAAM;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAAG,CACjC,CACI,EACf,MAAC,MAAM,CAAC,KAAK;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GACX,MAAC,MAAM;QACL,IAAI;QACJ,KAAK;QACL,OAAO,EAAE,IAAI,CAACiD,iBAAkB;QAChC,KAAK,EAAE,IAAI,CAACd,KAAK,CAACQ,IAAI,CAACgC,aAAa,CAACjD,QAAQ,CAACI,eAAe,CAAE;QAC/D,cAAY,IAAI,CAACK,KAAK,CAACQ,IAAI,CAACgC,aAAa,CACvCjD,QAAQ,CAACI,eAAe,CACxB;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAEF,MAAC,IAAI;QAAC,IAAI,EAAEhC,YAAa;QAAC,IAAI,EAAC,MAAM;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAAG,CACjC,CACI,EACf,MAAC,MAAM,CAAC,KAAK;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GACX,MAAC,MAAM;QACL,IAAI;QACJ,KAAK;QACL,OAAO,EAAE,IAAI,CAACoD,gBAAiB;QAC/B,KAAK,EAAE,IAAI,CAACf,KAAK,CAACQ,IAAI,CAACgC,aAAa,CAACjD,QAAQ,CAACK,cAAc,CAAE;QAC9D,cAAY,IAAI,CAACI,KAAK,CAACQ,IAAI,CAACgC,aAAa,CACvCjD,QAAQ,CAACK,cAAc,CACvB;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAEF,MAAC,IAAI;QAAC,IAAI,EAAEhC,WAAY;QAAC,IAAI,EAAC,MAAM;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAAG,CAChC,CACI,EACf,MAAC,MAAM,CAAC,KAAK;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GACX,MAAC,MAAM;QACL,IAAI;QACJ,KAAK;QACL,OAAO,EAAE,IAAI,CAACqD,WAAY;QAC1B,QAAQ,EACN,IAAI,CAACjB,KAAK,CAACoB,IAAI,CAACC,KAAK,IACrB,+BAAI,CAACrB,KAAK,CAACoB,IAAI,CAACC,KAAK,qFAArB,uBAAuB/B,IAAI,sFAA3B,uBAA8B,CAAC,CAAC,uFAAhC,wBAAkCT,KAAK,4DAAvC,wBAAyCqD,MAAM,MAAK,CACrD;QACD,KAAK,EAAE,IAAI,CAAClC,KAAK,CAACQ,IAAI,CAACgC,aAAa,CAACjD,QAAQ,CAACM,SAAS,CAAE;QACzD,cAAY,IAAI,CAACG,KAAK,CAACQ,IAAI,CAACgC,aAAa,CAACjD,QAAQ,CAACM,SAAS,CAAE;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAE9D,MAAC,IAAI;QAAC,IAAI,EAAE/B,YAAa;QAAC,IAAI,EAAC,MAAM;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAAG,CACjC,CACI,CAElB,EACA,IAAI,CAACkC,KAAK,CAACoB,IAAI,CAACC,KAAK,IACpB,MAAC,KAAK;QACJ,KAAK,6BAAE,IAAI,CAACrB,KAAK,CAACoB,IAAI,CAACC,KAAK,4DAArB,wBAAuBrC,KAAM;QACpC,OAAO,6BAAE,IAAI,CAACgB,KAAK,CAACoB,IAAI,CAACC,KAAK,4DAArB,wBAAuBpC,OAAQ;QACxC,KAAK,EAAE,+BAAI,CAACe,KAAK,CAACoB,IAAI,CAACC,KAAK,oDAArB,wBAAuBnC,KAAK,GAAG,MAAM,GAAG,KAAM;QACrD,MAAM,6BAAE,IAAI,CAACc,KAAK,CAACoB,IAAI,CAACC,KAAK,4DAArB,wBAAuBlC,MAAO;QACtC,QAAQ,6BAAE,IAAI,CAACa,KAAK,CAACoB,IAAI,CAACC,KAAK,4DAArB,wBAAuBjC,QAAS;QAC1C,OAAO,6BAAE,IAAI,CAACY,KAAK,CAACoB,IAAI,CAACC,KAAK,4DAArB,wBAAuBhC,OAAQ;QACxC,SAAS,EAAC,mBAAmB;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAE5B,6BAAC,IAAI,CAACW,KAAK,CAACoB,IAAI,CAACC,KAAK,oDAArB,wBAAuBtC,WAAW,IAClC,MAAC,KAAK,CAAC,MAAM;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GACX,MAAC,KAAK,CAAC,GAAG;QAAC,SAAS,EAAC,QAAQ;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAC1BmB,OAAO,CAACuC,GAAG,CAAC,CAACpC,IAAI,EAAEqC,SAAS,KAC3B,MAAC,KAAK,CAAC,UAAU;QACf,GAAG,EAAErC,IAAI,CAAC3B,GAAI;QACd,SAAS,EAAC,QAAQ;QAClB,aAAa,EAAC,QAAQ;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAEtB,MAAC,IAAI;QACH,KAAK,EAAE2B,IAAI,CAAC1B,KAAM;QAClB,GAAG,EAAE,CAAE;QACP,IAAI,EAAE+D,SAAU;QAChB,YAAY,EAAE,IAAI,CAAC/B,YAAa;QAChC,QAAQ,EACN,IAAI,CAACX,KAAK,CAACG,QAAQ,IACnB,IAAI,CAACF,KAAK,CAACE,QAAQ,IACnB,CAAC,KAAK,IAAI,CAACF,KAAK,CAACE,QAAQ,CAACC,GAAG,IAC7BsC,SAAS,KAAK,IAAI,CAACzC,KAAK,CAACE,QAAQ,CAACE,IACnC;QACD,YAAY,EAAE,IAAI,CAACJ,KAAK,CAACE,QAAS;QAClC,oBAAoB,EAAE,IAAI,CAACH,KAAK,CAACG,QAAS;QAC1C,UAAU,EAAE,IAAI,CAACH,KAAK,CAAC2C,UAAW;QAClC,aAAa,EAAE,IAAI,CAAC3C,KAAK,CAAC4C,aAAc;QACxC,QAAQ,EAAE,IAAI,CAAC1B,YAAa;QAC5B,KAAK,EAAE,IAAI,CAAClB,KAAK,CAACiC,KAAM;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EACxB,CAEL,CAAC,CACQ,CACC,GAEf,EACD,EACD,MAAC,KAAK,CAAC,IAAI;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GACR,KAAI3C,IAAI,EAAE,CAACc,GAAG,EAAEyC,QAAQ,KACvB,MAAC,KAAK,CAAC,GAAG;QAAC,GAAG,EAAEzC,GAAG,CAAC1B,GAAI;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GACrB,KAAI0B,GAAG,CAACvB,KAAK,EAAE,CAACwB,IAAI,EAAEqC,SAAS;QAAA;QAAA,OAC9B,MAAC,KAAK,CAAC,IAAI;UACT,GAAG,EAAErC,IAAI,CAAC3B,GAAI;UACd,SAAS,EAAE,gCAAI,CAACsB,KAAK,CAACoB,IAAI,CAACC,KAAK,4DAArB,wBAAuByB,SAAS,KAAI,QAAS;UACxD,aAAa,EACX,gCAAI,CAAC9C,KAAK,CAACoB,IAAI,CAACC,KAAK,4DAArB,wBAAuB0B,aAAa,KAAI,QACzC;UACD,SAAS,EACP,IAAI,CAAC/C,KAAK,CAACG,QAAQ,IACnB,IAAI,CAACF,KAAK,CAACE,QAAQ,IACnB0C,QAAQ,GAAG,CAAC,KAAK,IAAI,CAAC5C,KAAK,CAACE,QAAQ,CAACC,GAAG,IACxCsC,SAAS,KAAK,IAAI,CAACzC,KAAK,CAACE,QAAQ,CAACE,IAAI,IACtC,IAAI,CAACL,KAAK,CAACG,QAAQ,GACf,UAAU,GACV,EACL;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,GAED,MAAC,IAAI;UACH,KAAK,EAAEE,IAAI,CAAC1B,KAAM;UAClB,GAAG,EAAEkE,QAAQ,GAAG,CAAE;UAClB,IAAI,EAAEH,SAAU;UAChB,YAAY,EAAE,IAAI,CAAC/B,YAAa;UAChC,QAAQ,EACN,IAAI,CAACX,KAAK,CAACG,QAAQ,IACnB,IAAI,CAACF,KAAK,CAACE,QAAQ,IACnB0C,QAAQ,GAAG,CAAC,KAAK,IAAI,CAAC5C,KAAK,CAACE,QAAQ,CAACC,GAAG,IACxCsC,SAAS,KAAK,IAAI,CAACzC,KAAK,CAACE,QAAQ,CAACE,IACnC;UACD,YAAY,EAAE,IAAI,CAACJ,KAAK,CAACE,QAAS;UAClC,oBAAoB,EAAE,IAAI,CAACH,KAAK,CAACG,QAAS;UAC1C,UAAU,EAAE,IAAI,CAACH,KAAK,CAAC2C,UAAW;UAClC,aAAa,EAAE,IAAI,CAAC3C,KAAK,CAAC4C,aAAc;UACxC,QAAQ,EAAE,IAAI,CAAC1B,YAAa;UAC5B,KAAK,EAAE,IAAI,CAAClB,KAAK,CAACiC,KAAM;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,EACxB,CACS;MAAA,CACd,CAAC,CAEL,CAAC,CACS,CAEhB,EACD,MAAC,aAAa;QAAC,QAAQ,EAAE,IAAI,CAACjC,KAAK,CAACG,QAAS;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAC3C,MAAC,aAAa;QACZ,KAAK,EAAE,IAAI,CAACH,KAAK,CAACuB,KAAM;QACxB,MAAM,EAAE,IAAI,CAAChB,MAAO;QACpB,KAAK,EAAE,IAAI,CAACA,MAAM,CAACyC,KAAM;QACzB,aAAa,EAAE,CAACrB,EAAE,EAAEhD,KAAK,KAAK;UAC5B,IAAI,CAACqB,KAAK,CAACsB,aAAa,CAAC,IAAI,CAACtB,KAAK,CAACuB,KAAK,kCACpC,IAAI,CAACvB,KAAK,CAACoB,IAAI,GACd,CAAC,WAAW,CAAC,CAAC6B,QAAQ,CAACtB,EAAE,CAAC,GAC1B;YAAE,CAACA,EAAE,GAAGhD;UAAM,CAAC,GACf;YACE0C,KAAK,kCACC,IAAI,CAACrB,KAAK,CAACoB,IAAI,CAACC,KAAK,IAAI,CAAC,CAAC;cAC/B,CAACM,EAAE,GAAGhD;YAAK;UAEf,CAAC,EACL;QACJ,CAAE;QACF,QAAQ,kCAAQ,IAAI,CAACqB,KAAK,CAACoB,IAAI,CAACC,KAAK,IAAI,CAAC,CAAC,GAAM,IAAI,CAACrB,KAAK,CAACoB,IAAI,CAAG;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EACnE,CACY;IACZ;EAEV;AACF;AAAC,gBAngBKtB,IAAI,eAMW;EACjBsB,IAAI,EAAEtE,SAAS,CAACoG,QAAQ,CAACpG,SAAS,CAACqG,GAAG,CAAC,CAACC,UAAU;EAClDC,QAAQ,EAAEvG,SAAS,CAACwG,IAAI;EACxBrB,KAAK,EAAEnF,SAAS,CAACyG,MAAM,CAACH,UAAU;EAClCjD,QAAQ,EAAErD,SAAS,CAACwG,IAAI,CAACF,UAAU;EACnC7B,KAAK,EAAEzE,SAAS,CAAC0G,MAAM,CAACJ,UAAU;EAClCT,UAAU,EAAE7F,SAAS,CAAC2G,IAAI,CAACL,UAAU;EACrC9B,aAAa,EAAExE,SAAS,CAAC2G,IAAI,CAACL,UAAU;EACxCM,aAAa,EAAE5G,SAAS,CAAC2G,IAAI,CAACL,UAAU;EACxCO,aAAa,EAAE7G,SAAS,CAAC2G,IAAI,CAACL,UAAU;EACxCQ,aAAa,EAAE9G,SAAS,CAAC2G,IAAI,CAACL,UAAU;EACxCS,oBAAoB,EAAE/G,SAAS,CAAC2G,IAAI,CAACL,UAAU;EAC/CU,gBAAgB,EAAEhH,SAAS,CAAC2G,IAAI,CAACL,UAAU;EAC3CR,aAAa,EAAE9F,SAAS,CAAC2G,IAAI,CAACL;AAChC,CAAC;AAAA,gBApBGtD,IAAI,kBA2Bc;EACpBuD,QAAQ,EAAE;AACZ,CAAC;AAweH,eAAelG,UAAU,CAAC2C,IAAI,CAAC"},"metadata":{"react-intl":{"messages":[{"id":"Insert row before","defaultMessage":"Insert row before"},{"id":"Insert row after","defaultMessage":"Insert row after"},{"id":"Delete row","defaultMessage":"Delete row"},{"id":"Insert col before","defaultMessage":"Insert col before"},{"id":"Insert col after","defaultMessage":"Insert col after"},{"id":"Delete col","defaultMessage":"Delete col"}]}},"sourceType":"module","externalDependencies":[]}