{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-metadata-block/src/components/manage/Blocks/MetadataSection/EditMetadataSection.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport React from 'react';\nimport cx from 'classnames';\nimport { useSelector } from 'react-redux';\nimport { BlockDataForm, Field, SidebarPortal } from '@plone/volto/components';\nimport MetadataSectionSchema from './schema';\nimport '@eeacms/volto-metadata-block/less/editor.less';\nconst EditMetadataSectionBlock = props => {\n  var _data$fields;\n  const {\n    selected,\n    block,\n    data,\n    onChangeBlock,\n    properties,\n    metadata,\n    onChangeField\n  } = props;\n  const schema = useSelector(state => {\n    var _state$schema;\n    return (state === null || state === void 0 ? void 0 : (_state$schema = state.schema) === null || _state$schema === void 0 ? void 0 : _state$schema.schema) || {};\n  });\n  let metadata_element = {};\n  metadata ? metadata_element = _objectSpread({}, metadata) : metadata_element = _objectSpread({}, properties);\n  return __jsx(\"div\", {\n    className: cx('block metadata-section', {\n      selected: selected\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, __jsx(SidebarPortal, {\n    selected: selected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, !(data !== null && data !== void 0 && data.readOnlySettings) && __jsx(BlockDataForm, {\n    schema: MetadataSectionSchema,\n    title: MetadataSectionSchema.title,\n    onChangeField: (id, value) => {\n      onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n        [id]: value\n      }));\n    },\n    formData: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 11\n    }\n  })), __jsx(\"fieldset\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, __jsx(\"legend\", {\n    \"aria-hidden\": \"true\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, data.title || 'Metadata section'), (_data$fields = data.fields) !== null && _data$fields !== void 0 && _data$fields.length ? data.fields.map(value => {\n    var _schema$required;\n    const {\n      id: metadata_id\n    } = (value === null || value === void 0 ? void 0 : value.field) || {};\n    if (!metadata_id) return '';\n    const field = schema.properties ? schema.properties[metadata_id] : null;\n    const required = schema === null || schema === void 0 ? void 0 : (_schema$required = schema.required) === null || _schema$required === void 0 ? void 0 : _schema$required.includes(metadata_id);\n    return __jsx(Field, _extends({}, field, {\n      id: metadata_id,\n      value: metadata_element[metadata_id],\n      required: required,\n      onChange: (id, value) => {\n        onChangeField(id, value);\n      },\n      key: metadata_id,\n      block: block,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }\n    }));\n  }) : 'No fields selected'));\n};\nexport default EditMetadataSectionBlock;","map":{"version":3,"names":["React","cx","useSelector","BlockDataForm","Field","SidebarPortal","MetadataSectionSchema","EditMetadataSectionBlock","props","selected","block","data","onChangeBlock","properties","metadata","onChangeField","schema","state","metadata_element","readOnlySettings","title","id","value","fields","length","map","metadata_id","field","required","includes"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-metadata-block/src/components/manage/Blocks/MetadataSection/EditMetadataSection.jsx"],"sourcesContent":["import React from 'react';\nimport cx from 'classnames';\nimport { useSelector } from 'react-redux';\nimport { BlockDataForm, Field, SidebarPortal } from '@plone/volto/components';\nimport MetadataSectionSchema from './schema';\nimport '@eeacms/volto-metadata-block/less/editor.less';\n\nconst EditMetadataSectionBlock = (props) => {\n  const {\n    selected,\n    block,\n    data,\n    onChangeBlock,\n    properties,\n    metadata,\n    onChangeField,\n  } = props;\n  const schema = useSelector((state) => state?.schema?.schema || {});\n  let metadata_element = {};\n  metadata\n    ? (metadata_element = { ...metadata })\n    : (metadata_element = { ...properties });\n\n  return (\n    <div className={cx('block metadata-section', { selected: selected })}>\n      <SidebarPortal selected={selected}>\n        {!data?.readOnlySettings && (\n          <BlockDataForm\n            schema={MetadataSectionSchema}\n            title={MetadataSectionSchema.title}\n            onChangeField={(id, value) => {\n              onChangeBlock(block, {\n                ...data,\n                [id]: value,\n              });\n            }}\n            formData={data}\n          />\n        )}\n      </SidebarPortal>\n\n      <fieldset>\n        <legend aria-hidden=\"true\">{data.title || 'Metadata section'}</legend>\n        {data.fields?.length\n          ? data.fields.map((value) => {\n              const { id: metadata_id } = value?.field || {};\n              if (!metadata_id) return '';\n              const field = schema.properties\n                ? schema.properties[metadata_id]\n                : null;\n              const required = schema?.required?.includes(metadata_id);\n              return (\n                <Field\n                  {...field}\n                  id={metadata_id}\n                  value={metadata_element[metadata_id]}\n                  required={required}\n                  onChange={(id, value) => {\n                    onChangeField(id, value);\n                  }}\n                  key={metadata_id}\n                  block={block}\n                />\n              );\n            })\n          : 'No fields selected'}\n      </fieldset>\n    </div>\n  );\n};\n\nexport default EditMetadataSectionBlock;\n"],"mappings":";;;;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,EAAE,MAAM,YAAY;AAC3B,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,aAAa,EAAEC,KAAK,EAAEC,aAAa,QAAQ,yBAAyB;AAC7E,OAAOC,qBAAqB,MAAM,UAAU;AAC5C,OAAO,+CAA+C;AAEtD,MAAMC,wBAAwB,GAAIC,KAAK,IAAK;EAAA;EAC1C,MAAM;IACJC,QAAQ;IACRC,KAAK;IACLC,IAAI;IACJC,aAAa;IACbC,UAAU;IACVC,QAAQ;IACRC;EACF,CAAC,GAAGP,KAAK;EACT,MAAMQ,MAAM,GAAGd,WAAW,CAAEe,KAAK;IAAA;IAAA,OAAK,CAAAA,KAAK,aAALA,KAAK,wCAALA,KAAK,CAAED,MAAM,kDAAb,cAAeA,MAAM,KAAI,CAAC,CAAC;EAAA,EAAC;EAClE,IAAIE,gBAAgB,GAAG,CAAC,CAAC;EACzBJ,QAAQ,GACHI,gBAAgB,qBAAQJ,QAAQ,CAAE,GAClCI,gBAAgB,qBAAQL,UAAU,CAAG;EAE1C,OACE;IAAK,SAAS,EAAEZ,EAAE,CAAC,wBAAwB,EAAE;MAAEQ,QAAQ,EAAEA;IAAS,CAAC,CAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACnE,MAAC,aAAa;IAAC,QAAQ,EAAEA,QAAS;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAC/B,EAACE,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEQ,gBAAgB,KACtB,MAAC,aAAa;IACZ,MAAM,EAAEb,qBAAsB;IAC9B,KAAK,EAAEA,qBAAqB,CAACc,KAAM;IACnC,aAAa,EAAE,CAACC,EAAE,EAAEC,KAAK,KAAK;MAC5BV,aAAa,CAACF,KAAK,kCACdC,IAAI;QACP,CAACU,EAAE,GAAGC;MAAK,GACX;IACJ,CAAE;IACF,QAAQ,EAAEX,IAAK;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAElB,CACa,EAEhB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACE;IAAQ,eAAY,MAAM;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAEA,IAAI,CAACS,KAAK,IAAI,kBAAkB,CAAU,EACrE,gBAAAT,IAAI,CAACY,MAAM,yCAAX,aAAaC,MAAM,GAChBb,IAAI,CAACY,MAAM,CAACE,GAAG,CAAEH,KAAK,IAAK;IAAA;IACzB,MAAM;MAAED,EAAE,EAAEK;IAAY,CAAC,GAAG,CAAAJ,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEK,KAAK,KAAI,CAAC,CAAC;IAC9C,IAAI,CAACD,WAAW,EAAE,OAAO,EAAE;IAC3B,MAAMC,KAAK,GAAGX,MAAM,CAACH,UAAU,GAC3BG,MAAM,CAACH,UAAU,CAACa,WAAW,CAAC,GAC9B,IAAI;IACR,MAAME,QAAQ,GAAGZ,MAAM,aAANA,MAAM,2CAANA,MAAM,CAAEY,QAAQ,qDAAhB,iBAAkBC,QAAQ,CAACH,WAAW,CAAC;IACxD,OACE,MAAC,KAAK,eACAC,KAAK;MACT,EAAE,EAAED,WAAY;MAChB,KAAK,EAAER,gBAAgB,CAACQ,WAAW,CAAE;MACrC,QAAQ,EAAEE,QAAS;MACnB,QAAQ,EAAE,CAACP,EAAE,EAAEC,KAAK,KAAK;QACvBP,aAAa,CAACM,EAAE,EAAEC,KAAK,CAAC;MAC1B,CAAE;MACF,GAAG,EAAEI,WAAY;MACjB,KAAK,EAAEhB,KAAM;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACb;EAEN,CAAC,CAAC,GACF,oBAAoB,CACf,CACP;AAEV,CAAC;AAED,eAAeH,wBAAwB"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}