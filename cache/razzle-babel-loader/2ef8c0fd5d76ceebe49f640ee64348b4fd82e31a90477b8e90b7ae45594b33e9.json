{"ast":null,"code":"import _cloneDeep from \"lodash/cloneDeep\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Blocks/Search/SearchBlockEdit.jsx\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport React from 'react';\nimport useDeepCompareEffect from 'use-deep-compare-effect';\nimport { defineMessages } from 'react-intl';\nimport { compose } from 'redux';\nimport { SidebarPortal, BlockDataForm } from '@plone/volto/components';\nimport { addExtensionFieldToSchema } from '@plone/volto/helpers/Extensions/withBlockSchemaEnhancer';\nimport { getBaseUrl } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\nimport { SearchBlockViewComponent } from './SearchBlockView';\nimport Schema from './schema';\nimport { withSearch, withQueryString } from './hocs';\nconst messages = defineMessages({\n  template: {\n    \"id\": \"Results template\",\n    \"defaultMessage\": \"Results template\"\n  }\n});\nconst SearchBlockEdit = props => {\n  var _config$blocks$blocks, _config$blocks$blocks2;\n  const {\n    block,\n    onChangeBlock,\n    data,\n    selected,\n    intl,\n    onTriggerSearch,\n    querystring = {}\n  } = props;\n  const {\n    sortable_indexes = {}\n  } = querystring;\n  let schema = Schema({\n    data,\n    intl\n  });\n  schema = addExtensionFieldToSchema({\n    schema,\n    name: 'listingBodyTemplate',\n    items: config.blocks.blocksConfig.listing.variations,\n    intl,\n    title: {\n      id: intl.formatMessage(messages.template)\n    }\n  });\n  const listingVariations = (_config$blocks$blocks = config.blocks.blocksConfig) === null || _config$blocks$blocks === void 0 ? void 0 : (_config$blocks$blocks2 = _config$blocks$blocks.listing) === null || _config$blocks$blocks2 === void 0 ? void 0 : _config$blocks$blocks2.variations;\n  let activeItem = listingVariations.find(item => item.id === data.listingBodyTemplate);\n  const listingSchemaEnhancer = activeItem === null || activeItem === void 0 ? void 0 : activeItem.schemaEnhancer;\n  if (listingSchemaEnhancer) schema = listingSchemaEnhancer({\n    schema: _cloneDeep(schema),\n    data,\n    intl\n  });\n  schema.properties.sortOnOptions.items = {\n    choices: Object.keys(sortable_indexes).map(k => [k, sortable_indexes[k].title])\n  };\n  const {\n    query = {}\n  } = data || {};\n  useDeepCompareEffect(() => {\n    onTriggerSearch();\n  }, [query, onTriggerSearch]);\n  return __jsx(React.Fragment, null, __jsx(SearchBlockViewComponent, _extends({}, props, {\n    path: getBaseUrl(props.pathname),\n    mode: \"edit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  })), __jsx(SidebarPortal, {\n    selected: selected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, __jsx(BlockDataForm, {\n    schema: schema,\n    onChangeField: (id, value) => {\n      onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n        [id]: value\n      }));\n    },\n    formData: data,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  })));\n};\nexport default compose(withQueryString, withSearch())(SearchBlockEdit);","map":{"version":3,"names":["React","useDeepCompareEffect","defineMessages","compose","SidebarPortal","BlockDataForm","addExtensionFieldToSchema","getBaseUrl","config","SearchBlockViewComponent","Schema","withSearch","withQueryString","messages","template","SearchBlockEdit","props","block","onChangeBlock","data","selected","intl","onTriggerSearch","querystring","sortable_indexes","schema","name","items","blocks","blocksConfig","listing","variations","title","id","formatMessage","listingVariations","activeItem","find","item","listingBodyTemplate","listingSchemaEnhancer","schemaEnhancer","properties","sortOnOptions","choices","Object","keys","map","k","query","pathname","value"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Blocks/Search/SearchBlockEdit.jsx"],"sourcesContent":["import React from 'react';\nimport useDeepCompareEffect from 'use-deep-compare-effect';\nimport { defineMessages } from 'react-intl';\nimport { compose } from 'redux';\n\nimport { SidebarPortal, BlockDataForm } from '@plone/volto/components';\nimport { addExtensionFieldToSchema } from '@plone/volto/helpers/Extensions/withBlockSchemaEnhancer';\nimport { getBaseUrl } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\n\nimport { SearchBlockViewComponent } from './SearchBlockView';\nimport Schema from './schema';\nimport { withSearch, withQueryString } from './hocs';\nimport { cloneDeep } from 'lodash';\n\nconst messages = defineMessages({\n  template: {\n    id: 'Results template',\n    defaultMessage: 'Results template',\n  },\n});\n\nconst SearchBlockEdit = (props) => {\n  const {\n    block,\n    onChangeBlock,\n    data,\n    selected,\n    intl,\n    onTriggerSearch,\n    querystring = {},\n  } = props;\n  const { sortable_indexes = {} } = querystring;\n\n  let schema = Schema({ data, intl });\n\n  schema = addExtensionFieldToSchema({\n    schema,\n    name: 'listingBodyTemplate',\n    items: config.blocks.blocksConfig.listing.variations,\n    intl,\n    title: { id: intl.formatMessage(messages.template) },\n  });\n  const listingVariations = config.blocks.blocksConfig?.listing?.variations;\n  let activeItem = listingVariations.find(\n    (item) => item.id === data.listingBodyTemplate,\n  );\n  const listingSchemaEnhancer = activeItem?.schemaEnhancer;\n  if (listingSchemaEnhancer)\n    schema = listingSchemaEnhancer({\n      schema: cloneDeep(schema),\n      data,\n      intl,\n    });\n  schema.properties.sortOnOptions.items = {\n    choices: Object.keys(sortable_indexes).map((k) => [\n      k,\n      sortable_indexes[k].title,\n    ]),\n  };\n\n  const { query = {} } = data || {};\n  useDeepCompareEffect(() => {\n    onTriggerSearch();\n  }, [query, onTriggerSearch]);\n\n  return (\n    <>\n      <SearchBlockViewComponent\n        {...props}\n        path={getBaseUrl(props.pathname)}\n        mode=\"edit\"\n      />\n      <SidebarPortal selected={selected}>\n        <BlockDataForm\n          schema={schema}\n          onChangeField={(id, value) => {\n            onChangeBlock(block, {\n              ...data,\n              [id]: value,\n            });\n          }}\n          formData={data}\n        />\n      </SidebarPortal>\n    </>\n  );\n};\n\nexport default compose(withQueryString, withSearch())(SearchBlockEdit);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Results template","defaultMessage":"Results template"}]}},"sourceType":"module","externalDependencies":[]}