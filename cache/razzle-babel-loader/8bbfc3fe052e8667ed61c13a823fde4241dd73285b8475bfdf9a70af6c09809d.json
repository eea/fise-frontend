{"ast":null,"code":"import _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { TABS_BLOCK } from '@eeacms/volto-tabs-block/constants';\nexport var schema = function schema(config) {\n  var _templateSchema$field, _templateSchema$field2;\n  var templateSchema = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var templatesConfig = config.blocks.blocksConfig[TABS_BLOCK].templates;\n  var templates = Object.keys(templatesConfig).map(function (template) {\n    return [template, templatesConfig[template].title || template];\n  });\n  var defaultFieldset = templateSchema === null || templateSchema === void 0 ? void 0 : (_templateSchema$field = templateSchema.fieldsets) === null || _templateSchema$field === void 0 ? void 0 : _templateSchema$field.filter(function (fieldset) {\n    return fieldset.id === 'default';\n  })[0];\n  return {\n    title: (templateSchema === null || templateSchema === void 0 ? void 0 : templateSchema.title) || 'Tabs block',\n    fieldsets: [{\n      id: 'default',\n      title: 'Default',\n      fields: ['data', 'title', 'template', 'verticalAlign'].concat(_toConsumableArray((defaultFieldset === null || defaultFieldset === void 0 ? void 0 : defaultFieldset.fields) || []))\n    }].concat(_toConsumableArray((templateSchema === null || templateSchema === void 0 ? void 0 : (_templateSchema$field2 = templateSchema.fieldsets) === null || _templateSchema$field2 === void 0 ? void 0 : _templateSchema$field2.filter(function (fieldset) {\n      return fieldset.id !== 'default';\n    })) || [])),\n    properties: _objectSpread({\n      data: {\n        title: 'Tabs',\n        type: 'tabs'\n      },\n      title: {\n        title: 'Title'\n      },\n      template: {\n        title: 'Template',\n        type: 'array',\n        choices: _toConsumableArray(templates),\n        \"default\": 'default'\n      },\n      verticalAlign: {\n        title: 'Vertical align',\n        type: 'array',\n        choices: [['flex-start', 'Top'], ['center', 'Middle'], ['flex-end', 'Bottom']],\n        \"default\": 'flex-start'\n      }\n    }, (templateSchema === null || templateSchema === void 0 ? void 0 : templateSchema.properties) || {}),\n    required: _toConsumableArray((templateSchema === null || templateSchema === void 0 ? void 0 : templateSchema.required) || [])\n  };\n};","map":{"version":3,"names":["TABS_BLOCK","schema","config","templateSchema","templatesConfig","blocks","blocksConfig","templates","Object","keys","map","template","title","defaultFieldset","fieldsets","filter","fieldset","id","fields","properties","data","type","choices","verticalAlign","required"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-tabs-block/src/components/schema.js"],"sourcesContent":["import { TABS_BLOCK } from '@eeacms/volto-tabs-block/constants';\n\nexport const schema = (config, templateSchema = {}) => {\n  const templatesConfig = config.blocks.blocksConfig[TABS_BLOCK].templates;\n  const templates = Object.keys(templatesConfig).map((template) => [\n    template,\n    templatesConfig[template].title || template,\n  ]);\n\n  const defaultFieldset = templateSchema?.fieldsets?.filter(\n    (fieldset) => fieldset.id === 'default',\n  )[0];\n\n  return {\n    title: templateSchema?.title || 'Tabs block',\n    fieldsets: [\n      {\n        id: 'default',\n        title: 'Default',\n        fields: [\n          'data',\n          'title',\n          'template',\n          'verticalAlign',\n          ...(defaultFieldset?.fields || []),\n        ],\n      },\n      ...(templateSchema?.fieldsets?.filter(\n        (fieldset) => fieldset.id !== 'default',\n      ) || []),\n    ],\n    properties: {\n      data: {\n        title: 'Tabs',\n        type: 'tabs',\n      },\n      title: {\n        title: 'Title',\n      },\n      template: {\n        title: 'Template',\n        type: 'array',\n        choices: [...templates],\n        default: 'default',\n      },\n      verticalAlign: {\n        title: 'Vertical align',\n        type: 'array',\n        choices: [\n          ['flex-start', 'Top'],\n          ['center', 'Middle'],\n          ['flex-end', 'Bottom'],\n        ],\n        default: 'flex-start',\n      },\n      ...(templateSchema?.properties || {}),\n    },\n    required: [...(templateSchema?.required || [])],\n  };\n};\n"],"mappings":";;AAAA,SAASA,UAAU,QAAQ,oCAAoC;AAE/D,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAM,CAAIC,MAAM,EAA0B;EAAA;EAAA,IAAxBC,cAAc,uEAAG,CAAC,CAAC;EAChD,IAAMC,eAAe,GAAGF,MAAM,CAACG,MAAM,CAACC,YAAY,CAACN,UAAU,CAAC,CAACO,SAAS;EACxE,IAAMA,SAAS,GAAGC,MAAM,CAACC,IAAI,CAACL,eAAe,CAAC,CAACM,GAAG,CAAC,UAACC,QAAQ;IAAA,OAAK,CAC/DA,QAAQ,EACRP,eAAe,CAACO,QAAQ,CAAC,CAACC,KAAK,IAAID,QAAQ,CAC5C;EAAA,EAAC;EAEF,IAAME,eAAe,GAAGV,cAAc,aAAdA,cAAc,gDAAdA,cAAc,CAAEW,SAAS,0DAAzB,sBAA2BC,MAAM,CACvD,UAACC,QAAQ;IAAA,OAAKA,QAAQ,CAACC,EAAE,KAAK,SAAS;EAAA,EACxC,CAAC,CAAC,CAAC;EAEJ,OAAO;IACLL,KAAK,EAAE,CAAAT,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAES,KAAK,KAAI,YAAY;IAC5CE,SAAS,GACP;MACEG,EAAE,EAAE,SAAS;MACbL,KAAK,EAAE,SAAS;MAChBM,MAAM,GACJ,MAAM,EACN,OAAO,EACP,UAAU,EACV,eAAe,4BACX,CAAAL,eAAe,aAAfA,eAAe,uBAAfA,eAAe,CAAEK,MAAM,KAAI,EAAE;IAErC,CAAC,4BACG,CAAAf,cAAc,aAAdA,cAAc,iDAAdA,cAAc,CAAEW,SAAS,2DAAzB,uBAA2BC,MAAM,CACnC,UAACC,QAAQ;MAAA,OAAKA,QAAQ,CAACC,EAAE,KAAK,SAAS;IAAA,EACxC,KAAI,EAAE,EACR;IACDE,UAAU;MACRC,IAAI,EAAE;QACJR,KAAK,EAAE,MAAM;QACbS,IAAI,EAAE;MACR,CAAC;MACDT,KAAK,EAAE;QACLA,KAAK,EAAE;MACT,CAAC;MACDD,QAAQ,EAAE;QACRC,KAAK,EAAE,UAAU;QACjBS,IAAI,EAAE,OAAO;QACbC,OAAO,qBAAMf,SAAS,CAAC;QACvB,WAAS;MACX,CAAC;MACDgB,aAAa,EAAE;QACbX,KAAK,EAAE,gBAAgB;QACvBS,IAAI,EAAE,OAAO;QACbC,OAAO,EAAE,CACP,CAAC,YAAY,EAAE,KAAK,CAAC,EACrB,CAAC,QAAQ,EAAE,QAAQ,CAAC,EACpB,CAAC,UAAU,EAAE,QAAQ,CAAC,CACvB;QACD,WAAS;MACX;IAAC,GACG,CAAAnB,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEgB,UAAU,KAAI,CAAC,CAAC,CACrC;IACDK,QAAQ,qBAAO,CAAArB,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEqB,QAAQ,KAAI,EAAE;EAC/C,CAAC;AACH,CAAC"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}