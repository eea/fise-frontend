{"ast":null,"code":"import _extends from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/extends.js\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Widgets/NumberWidget.jsx\",\n  _this = this;\nvar __jsx = React.createElement;\n/**\n * NumberWidget component.\n * @module components/manage/Widgets/PassswordWidget\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Input } from 'semantic-ui-react';\nimport { FormFieldWrapper } from '@plone/volto/components';\nimport { injectIntl } from 'react-intl';\n\n/**\n * NumberWidget component class.\n *\n * To use it, in schema properties, declare a field like:\n *\n * ```jsx\n * {\n *  title: \"Number\",\n *  type: 'number',\n * }\n * ```\n */\nvar NumberWidget = function NumberWidget(props) {\n  var id = props.id,\n    value = props.value,\n    _onChange = props.onChange,\n    _onBlur = props.onBlur,\n    _onClick = props.onClick,\n    defaultValue = props.defaultValue,\n    isDisabled = props.isDisabled,\n    maximum = props.maximum,\n    minimum = props.minimum,\n    placeholder = props.placeholder;\n  return __jsx(FormFieldWrapper, _extends({}, props, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }), __jsx(Input, {\n    id: \"field-\".concat(id),\n    name: id,\n    type: \"number\",\n    disabled: isDisabled,\n    min: minimum || null,\n    max: maximum || null,\n    value: value !== null && value !== void 0 ? value : defaultValue,\n    placeholder: placeholder,\n    onChange: function onChange(_ref) {\n      var target = _ref.target;\n      return _onChange(id, target.value === '' ? undefined : target.value);\n    },\n    onBlur: function onBlur(_ref2) {\n      var target = _ref2.target;\n      return _onBlur(id, target.value === '' ? undefined : target.value);\n    },\n    onClick: function onClick() {\n      return _onClick();\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }));\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\n_c = NumberWidget;\nNumberWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  required: PropTypes.bool,\n  error: PropTypes.arrayOf(PropTypes.string),\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  onChange: PropTypes.func.isRequired,\n  wrapped: PropTypes.bool,\n  maximum: PropTypes.number,\n  minimum: PropTypes.number,\n  placeholder: PropTypes.string\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nNumberWidget.defaultProps = {\n  description: null,\n  required: false,\n  error: [],\n  value: null,\n  onChange: function onChange() {},\n  onBlur: function onBlur() {},\n  onClick: function onClick() {}\n};\nexport default _c2 = injectIntl(NumberWidget);\nvar _c, _c2;\n$RefreshReg$(_c, \"NumberWidget\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","PropTypes","Input","FormFieldWrapper","injectIntl","NumberWidget","props","id","value","onChange","onBlur","onClick","defaultValue","isDisabled","maximum","minimum","placeholder","target","undefined","propTypes","string","isRequired","title","description","required","bool","error","arrayOf","oneOfType","number","func","wrapped","defaultProps"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Widgets/NumberWidget.jsx"],"sourcesContent":["/**\n * NumberWidget component.\n * @module components/manage/Widgets/PassswordWidget\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Input } from 'semantic-ui-react';\nimport { FormFieldWrapper } from '@plone/volto/components';\nimport { injectIntl } from 'react-intl';\n\n/**\n * NumberWidget component class.\n *\n * To use it, in schema properties, declare a field like:\n *\n * ```jsx\n * {\n *  title: \"Number\",\n *  type: 'number',\n * }\n * ```\n */\nconst NumberWidget = (props) => {\n  const {\n    id,\n    value,\n    onChange,\n    onBlur,\n    onClick,\n    defaultValue,\n    isDisabled,\n    maximum,\n    minimum,\n    placeholder,\n  } = props;\n\n  return (\n    <FormFieldWrapper {...props}>\n      <Input\n        id={`field-${id}`}\n        name={id}\n        type=\"number\"\n        disabled={isDisabled}\n        min={minimum || null}\n        max={maximum || null}\n        value={value ?? defaultValue}\n        placeholder={placeholder}\n        onChange={({ target }) =>\n          onChange(id, target.value === '' ? undefined : target.value)\n        }\n        onBlur={({ target }) =>\n          onBlur(id, target.value === '' ? undefined : target.value)\n        }\n        onClick={() => onClick()}\n      />\n    </FormFieldWrapper>\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nNumberWidget.propTypes = {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  required: PropTypes.bool,\n  error: PropTypes.arrayOf(PropTypes.string),\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  onChange: PropTypes.func.isRequired,\n  wrapped: PropTypes.bool,\n  maximum: PropTypes.number,\n  minimum: PropTypes.number,\n  placeholder: PropTypes.string,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nNumberWidget.defaultProps = {\n  description: null,\n  required: false,\n  error: [],\n  value: null,\n  onChange: () => {},\n  onBlur: () => {},\n  onClick: () => {},\n};\n\nexport default injectIntl(NumberWidget);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}