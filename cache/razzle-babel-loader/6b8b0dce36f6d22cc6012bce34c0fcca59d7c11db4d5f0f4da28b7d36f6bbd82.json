{"ast":null,"code":"import _isEqual from \"lodash/isEqual\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-columns-block/src/Widgets/LayoutSelectWidget.jsx\";\nvar __jsx = React.createElement;\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n/**\n * LayoutSelectWidget component.\n * @module volto-columns-block/Widgets/LayoutSelectWidget\n */\n\nimport React, { Component } from 'react';\nimport { compose } from 'redux';\nimport { injectIntl } from 'react-intl';\nimport loadable from '@loadable/component';\nimport { FormFieldWrapper, Icon } from '@plone/volto/components';\nimport { DropdownIndicator, selectTheme, customSelectStyles } from '@plone/volto/components/manage/Widgets/SelectStyling';\nimport config from '@plone/volto/registry';\nimport { COLUMNSBLOCK } from '@eeacms/volto-columns-block/constants';\nimport checkSVG from '@plone/volto/icons/check.svg';\nconst ReactSelectLib = loadable.lib({\n  resolved: {},\n  chunkName() {\n    return \"react-select\";\n  },\n  isReady(props) {\n    var key = this.resolve(props);\n    if (this.resolved[key] !== true) {\n      return false;\n    }\n    if (typeof __webpack_modules__ !== 'undefined') {\n      return !!__webpack_modules__[key];\n    }\n    return false;\n  },\n  importAsync: () => import( /* webpackChunkName: \"react-select\" */'react-select'),\n  requireAsync(props) {\n    var _this = this;\n    var key = this.resolve(props);\n    this.resolved[key] = false;\n    return this.importAsync(props).then(function (resolved) {\n      _this.resolved[key] = true;\n      return resolved;\n    });\n  },\n  requireSync(props) {\n    var id = this.resolve(props);\n    if (typeof __webpack_require__ !== 'undefined') {\n      return __webpack_require__(id);\n    }\n    return eval('module.require')(id);\n  },\n  resolve() {\n    if (require.resolveWeak) {\n      return require.resolveWeak(\"react-select\");\n    }\n    return eval('require.resolve')(\"react-select\");\n  }\n});\nconst gridColsAreEqual = (gridCols1, gridCols2) => {\n  return _isEqual(gridCols1, gridCols2);\n};\nconst variantToGridCols = v => {\n  return v.defaultData.gridCols;\n};\nexport const Option = props => {\n  var _config$blocks$blocks, _config$blocks$blocks2;\n  const variants = ((_config$blocks$blocks = config.blocks.blocksConfig) === null || _config$blocks$blocks === void 0 ? void 0 : (_config$blocks$blocks2 = _config$blocks$blocks[COLUMNSBLOCK]) === null || _config$blocks$blocks2 === void 0 ? void 0 : _config$blocks$blocks2.variants) || [];\n  return __jsx(ReactSelectLib, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, ({\n    components\n  }) => {\n    return __jsx(components.Option, _extends({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }\n    }), __jsx(Icon, {\n      name: variants.find(v => gridColsAreEqual(variantToGridCols(v), props.value)).icon,\n      size: \"24px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }\n    }), __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }\n    }, props.label), props.isFocused && !props.isSelected && __jsx(Icon, {\n      name: checkSVG,\n      size: \"24px\",\n      color: \"#b8c6c8\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 15\n      }\n    }), props.isSelected && __jsx(Icon, {\n      name: checkSVG,\n      size: \"24px\",\n      color: \"#007bc1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 15\n      }\n    }));\n  });\n};\nconst SingleValue = props => {\n  var _config$blocks$blocks3, _config$blocks$blocks4;\n  const {\n    children,\n    className,\n    cx,\n    getStyles,\n    isDisabled,\n    innerProps\n  } = props;\n  const variants = ((_config$blocks$blocks3 = config.blocks.blocksConfig) === null || _config$blocks$blocks3 === void 0 ? void 0 : (_config$blocks$blocks4 = _config$blocks$blocks3[COLUMNSBLOCK]) === null || _config$blocks$blocks4 === void 0 ? void 0 : _config$blocks$blocks4.variants) || [];\n  const variant = variants.find(v => gridColsAreEqual(variantToGridCols(v), props.data.value));\n  const icon = variant === null || variant === void 0 ? void 0 : variant.icon;\n  return __jsx(\"div\", _extends({\n    style: getStyles('singleValue', props),\n    className: cx({\n      'single-value': true,\n      'single-value--is-disabled': isDisabled\n    }, className)\n  }, innerProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  }), icon && __jsx(Icon, {\n    name: icon,\n    size: \"24px\",\n    className: \"layout-select-widget-selection-icon\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }), children);\n};\n\n/**\n * LayoutSelectWidget component class.\n * @function LayoutSelectWidget\n * @returns {string} Markup of the component.\n */\nexport class LayoutSelectWidget extends Component {\n  constructor(...args) {\n    super(...args);\n    _defineProperty(this, \"state\", {\n      selectedOption: null\n    });\n    _defineProperty(this, \"updateSelectedOption\", () => {\n      var _this$props$choices$f;\n      this.setState({\n        selectedOption: {\n          value: this.props.value,\n          label: (_this$props$choices$f = this.props.choices.find(x => _isEqual(x[0], this.props.value))) === null || _this$props$choices$f === void 0 ? void 0 : _this$props$choices$f[1]\n        }\n      });\n    });\n  }\n  componentDidMount() {\n    this.updateSelectedOption();\n  }\n  componentDidUpdate(prevProps) {\n    if (!_isEqual(prevProps.value, this.props.value)) {\n      this.updateSelectedOption();\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const {\n      id,\n      choices,\n      onChange\n    } = this.props;\n    return __jsx(FormFieldWrapper, _extends({}, this.props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 7\n      }\n    }), __jsx(ReactSelectLib, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }\n    }, ({\n      default: Select\n    }) => {\n      return __jsx(Select, {\n        id: `field-${id}`,\n        key: this.props.choices,\n        name: id,\n        value: this.state.selectedOption,\n        isDisabled: this.props.isDisabled,\n        className: \"react-select-container\",\n        classNamePrefix: \"react-select\",\n        options: choices.map(x => {\n          return {\n            value: x[0],\n            label: x[1]\n          };\n        }),\n        styles: customSelectStyles,\n        theme: selectTheme,\n        components: {\n          DropdownIndicator,\n          Option,\n          SingleValue\n        },\n        onChange: data => {\n          this.setState({\n            selectedOption: data\n          });\n          return onChange === null || onChange === void 0 ? void 0 : onChange(id, data.value);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 15\n        }\n      });\n    }));\n  }\n}\nexport default compose(injectIntl)(LayoutSelectWidget);","map":{"version":3,"names":["React","Component","compose","injectIntl","loadable","FormFieldWrapper","Icon","DropdownIndicator","selectTheme","customSelectStyles","config","COLUMNSBLOCK","checkSVG","ReactSelectLib","lib","gridColsAreEqual","gridCols1","gridCols2","variantToGridCols","v","defaultData","gridCols","Option","props","variants","blocks","blocksConfig","components","find","value","icon","label","isFocused","isSelected","SingleValue","children","className","cx","getStyles","isDisabled","innerProps","variant","data","LayoutSelectWidget","selectedOption","setState","choices","x","componentDidMount","updateSelectedOption","componentDidUpdate","prevProps","render","id","onChange","default","Select","state","map"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-columns-block/src/Widgets/LayoutSelectWidget.jsx"],"sourcesContent":["/**\n * LayoutSelectWidget component.\n * @module volto-columns-block/Widgets/LayoutSelectWidget\n */\n\nimport React, { Component } from 'react';\nimport { compose } from 'redux';\nimport { injectIntl } from 'react-intl';\nimport loadable from '@loadable/component';\nimport { isEqual } from 'lodash';\n\nimport { FormFieldWrapper, Icon } from '@plone/volto/components';\nimport {\n  DropdownIndicator,\n  selectTheme,\n  customSelectStyles,\n} from '@plone/volto/components/manage/Widgets/SelectStyling';\nimport config from '@plone/volto/registry';\n\nimport { COLUMNSBLOCK } from '@eeacms/volto-columns-block/constants';\n\nimport checkSVG from '@plone/volto/icons/check.svg';\n\nconst ReactSelectLib = loadable.lib(() => import('react-select'));\n\nconst gridColsAreEqual = (gridCols1, gridCols2) => {\n  return isEqual(gridCols1, gridCols2);\n};\n\nconst variantToGridCols = (v) => {\n  return v.defaultData.gridCols;\n};\n\nexport const Option = (props) => {\n  const variants = config.blocks.blocksConfig?.[COLUMNSBLOCK]?.variants || [];\n  return (\n    <ReactSelectLib>\n      {({ components }) => {\n        return (\n          <components.Option {...props}>\n            <Icon\n              name={\n                variants.find((v) =>\n                  gridColsAreEqual(variantToGridCols(v), props.value),\n                ).icon\n              }\n              size=\"24px\"\n            />\n            <div>{props.label}</div>\n            {props.isFocused && !props.isSelected && (\n              <Icon name={checkSVG} size=\"24px\" color=\"#b8c6c8\" />\n            )}\n            {props.isSelected && (\n              <Icon name={checkSVG} size=\"24px\" color=\"#007bc1\" />\n            )}\n          </components.Option>\n        );\n      }}\n    </ReactSelectLib>\n  );\n};\n\nconst SingleValue = (props) => {\n  const { children, className, cx, getStyles, isDisabled, innerProps } = props;\n  const variants = config.blocks.blocksConfig?.[COLUMNSBLOCK]?.variants || [];\n\n  const variant = variants.find((v) =>\n    gridColsAreEqual(variantToGridCols(v), props.data.value),\n  );\n\n  const icon = variant?.icon;\n\n  return (\n    <div\n      style={getStyles('singleValue', props)}\n      className={cx(\n        {\n          'single-value': true,\n          'single-value--is-disabled': isDisabled,\n        },\n        className,\n      )}\n      {...innerProps}\n    >\n      {icon && (\n        <Icon\n          name={icon}\n          size=\"24px\"\n          className=\"layout-select-widget-selection-icon\"\n        />\n      )}\n      {children}\n    </div>\n  );\n};\n\n/**\n * LayoutSelectWidget component class.\n * @function LayoutSelectWidget\n * @returns {string} Markup of the component.\n */\nexport class LayoutSelectWidget extends Component {\n  state = {\n    selectedOption: null,\n  };\n\n  updateSelectedOption = () => {\n    this.setState({\n      selectedOption: {\n        value: this.props.value,\n        label: this.props.choices.find((x) =>\n          isEqual(x[0], this.props.value),\n        )?.[1],\n      },\n    });\n  };\n\n  componentDidMount() {\n    this.updateSelectedOption();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!isEqual(prevProps.value, this.props.value)) {\n      this.updateSelectedOption();\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { id, choices, onChange } = this.props;\n\n    return (\n      <FormFieldWrapper {...this.props}>\n        <ReactSelectLib>\n          {({ default: Select }) => {\n            return (\n              <Select\n                id={`field-${id}`}\n                key={this.props.choices}\n                name={id}\n                value={this.state.selectedOption}\n                isDisabled={this.props.isDisabled}\n                className=\"react-select-container\"\n                classNamePrefix=\"react-select\"\n                options={choices.map((x) => {\n                  return { value: x[0], label: x[1] };\n                })}\n                styles={customSelectStyles}\n                theme={selectTheme}\n                components={{ DropdownIndicator, Option, SingleValue }}\n                onChange={(data) => {\n                  this.setState({ selectedOption: data });\n                  return onChange?.(id, data.value);\n                }}\n              />\n            );\n          }}\n        </ReactSelectLib>\n      </FormFieldWrapper>\n    );\n  }\n}\n\nexport default compose(injectIntl)(LayoutSelectWidget);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}