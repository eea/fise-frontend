{"ast":null,"code":"import _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _createForOfIteratorHelper from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\n// The default behavior is to allow images to be copy/pasted inside the editor\n// The TextBlockEdit extensions will come and then split the images into\n// separate dedicated Volto image blocks.\n\nimport { IMAGE } from 'volto-slate/constants';\nimport { jsx } from 'slate-hyperscript';\nexport var deserializeImageTag = function deserializeImageTag(editor, el) {\n  var attrs = {\n    type: IMAGE\n  };\n\n  // TODO: not all of these attributes should be stored in the DB\n  var _iterator = _createForOfIteratorHelper(el.getAttributeNames()),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var name = _step.value;\n      attrs[name] = el.getAttribute(name);\n    }\n\n    // TODO: recognize more unsupported protocols\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  if (typeof attrs.src === 'undefined' || attrs.src.startsWith('file:///')) {\n    return null;\n  }\n  attrs.url = attrs.src;\n  delete attrs.src;\n  return [jsx('element', attrs, [{\n    text: ''\n  }])];\n};\n\n/**\n * Allows for pasting images from clipboard.\n * Not yet: dragging and dropping images, selecting them through a file system dialog.\n * @param typeImg\n */\nexport var withImage = function withImage(editor) {\n  var isVoid = editor.isVoid,\n    isInline = editor.isInline;\n  editor.isVoid = function (element) {\n    return element.type === IMAGE ? true : isVoid(element);\n  };\n\n  // If it's not marked as inline, Slate will strip the {type:'img\"} nodes when\n  // it finds them next to {text: ''} nodes\n  editor.isInline = function (element) {\n    return element && element.type === IMAGE ? true : isInline(element);\n  };\n  editor.htmlTagsToSlate = _objectSpread(_objectSpread({}, editor.htmlTagsToSlate), {}, {\n    IMG: deserializeImageTag\n  });\n  return editor;\n};","map":{"version":3,"names":["IMAGE","jsx","deserializeImageTag","editor","el","attrs","type","getAttributeNames","name","getAttribute","src","startsWith","url","text","withImage","isVoid","isInline","element","htmlTagsToSlate","IMG"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/volto-slate/src/editor/plugins/Image/extensions.js"],"sourcesContent":["// The default behavior is to allow images to be copy/pasted inside the editor\n// The TextBlockEdit extensions will come and then split the images into\n// separate dedicated Volto image blocks.\n\nimport { IMAGE } from 'volto-slate/constants';\nimport { jsx } from 'slate-hyperscript';\n\nexport const deserializeImageTag = (editor, el) => {\n  const attrs = { type: IMAGE };\n\n  // TODO: not all of these attributes should be stored in the DB\n  for (const name of el.getAttributeNames()) {\n    attrs[name] = el.getAttribute(name);\n  }\n\n  // TODO: recognize more unsupported protocols\n  if (typeof attrs.src === 'undefined' || attrs.src.startsWith('file:///')) {\n    return null;\n  }\n\n  attrs.url = attrs.src;\n  delete attrs.src;\n\n  return [jsx('element', attrs, [{ text: '' }])];\n};\n\n/**\n * Allows for pasting images from clipboard.\n * Not yet: dragging and dropping images, selecting them through a file system dialog.\n * @param typeImg\n */\nexport const withImage = (editor) => {\n  const { isVoid, isInline } = editor;\n\n  editor.isVoid = (element) => {\n    return element.type === IMAGE ? true : isVoid(element);\n  };\n\n  // If it's not marked as inline, Slate will strip the {type:'img\"} nodes when\n  // it finds them next to {text: ''} nodes\n  editor.isInline = (element) => {\n    return element && element.type === IMAGE ? true : isInline(element);\n  };\n\n  editor.htmlTagsToSlate = {\n    ...editor.htmlTagsToSlate,\n    IMG: deserializeImageTag,\n  };\n\n  return editor;\n};\n"],"mappings":";;AAAA;AACA;AACA;;AAEA,SAASA,KAAK,QAAQ,uBAAuB;AAC7C,SAASC,GAAG,QAAQ,mBAAmB;AAEvC,OAAO,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAmB,CAAIC,MAAM,EAAEC,EAAE,EAAK;EACjD,IAAMC,KAAK,GAAG;IAAEC,IAAI,EAAEN;EAAM,CAAC;;EAE7B;EAAA,2CACmBI,EAAE,CAACG,iBAAiB,EAAE;IAAA;EAAA;IAAzC,oDAA2C;MAAA,IAAhCC,IAAI;MACbH,KAAK,CAACG,IAAI,CAAC,GAAGJ,EAAE,CAACK,YAAY,CAACD,IAAI,CAAC;IACrC;;IAEA;EAAA;IAAA;EAAA;IAAA;EAAA;EACA,IAAI,OAAOH,KAAK,CAACK,GAAG,KAAK,WAAW,IAAIL,KAAK,CAACK,GAAG,CAACC,UAAU,CAAC,UAAU,CAAC,EAAE;IACxE,OAAO,IAAI;EACb;EAEAN,KAAK,CAACO,GAAG,GAAGP,KAAK,CAACK,GAAG;EACrB,OAAOL,KAAK,CAACK,GAAG;EAEhB,OAAO,CAACT,GAAG,CAAC,SAAS,EAAEI,KAAK,EAAE,CAAC;IAAEQ,IAAI,EAAE;EAAG,CAAC,CAAC,CAAC,CAAC;AAChD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAS,CAAIX,MAAM,EAAK;EACnC,IAAQY,MAAM,GAAeZ,MAAM,CAA3BY,MAAM;IAAEC,QAAQ,GAAKb,MAAM,CAAnBa,QAAQ;EAExBb,MAAM,CAACY,MAAM,GAAG,UAACE,OAAO,EAAK;IAC3B,OAAOA,OAAO,CAACX,IAAI,KAAKN,KAAK,GAAG,IAAI,GAAGe,MAAM,CAACE,OAAO,CAAC;EACxD,CAAC;;EAED;EACA;EACAd,MAAM,CAACa,QAAQ,GAAG,UAACC,OAAO,EAAK;IAC7B,OAAOA,OAAO,IAAIA,OAAO,CAACX,IAAI,KAAKN,KAAK,GAAG,IAAI,GAAGgB,QAAQ,CAACC,OAAO,CAAC;EACrE,CAAC;EAEDd,MAAM,CAACe,eAAe,mCACjBf,MAAM,CAACe,eAAe;IACzBC,GAAG,EAAEjB;EAAmB,EACzB;EAED,OAAOC,MAAM;AACf,CAAC"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}