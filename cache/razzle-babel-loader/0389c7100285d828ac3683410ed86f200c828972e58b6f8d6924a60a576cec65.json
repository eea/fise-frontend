{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport EditTaxonomy from './ControlPanel/EditTaxonomy';\nimport Taxonomies from './ControlPanel/Taxonomies';\nimport { taxonomy } from './reducers';\nconst applyConfig = config => {\n  config.addonRoutes = [{\n    path: '/controlpanel/taxonomies/:id',\n    component: EditTaxonomy\n  }, {\n    path: '/controlpanel/taxonomies',\n    component: Taxonomies\n  }, ...(config.addonRoutes || [])];\n  config.addonReducers = _objectSpread(_objectSpread({}, config.addonReducers), {}, {\n    taxonomy\n  });\n  return config;\n};\nexport default applyConfig;","map":{"version":3,"names":["EditTaxonomy","Taxonomies","taxonomy","applyConfig","config","addonRoutes","path","component","addonReducers"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-taxonomy/src/index.js"],"sourcesContent":["import EditTaxonomy from './ControlPanel/EditTaxonomy';\nimport Taxonomies from './ControlPanel/Taxonomies';\nimport { taxonomy } from './reducers';\n\nconst applyConfig = (config) => {\n  config.addonRoutes = [\n    {\n      path: '/controlpanel/taxonomies/:id',\n      component: EditTaxonomy,\n    },\n    {\n      path: '/controlpanel/taxonomies',\n      component: Taxonomies,\n    },\n    ...(config.addonRoutes || []),\n  ];\n\n  config.addonReducers = {\n    ...config.addonReducers,\n    taxonomy,\n  };\n\n  return config;\n};\n\nexport default applyConfig;\n"],"mappings":";;;AAAA,OAAOA,YAAY,MAAM,6BAA6B;AACtD,OAAOC,UAAU,MAAM,2BAA2B;AAClD,SAASC,QAAQ,QAAQ,YAAY;AAErC,MAAMC,WAAW,GAAIC,MAAM,IAAK;EAC9BA,MAAM,CAACC,WAAW,GAAG,CACnB;IACEC,IAAI,EAAE,8BAA8B;IACpCC,SAAS,EAAEP;EACb,CAAC,EACD;IACEM,IAAI,EAAE,0BAA0B;IAChCC,SAAS,EAAEN;EACb,CAAC,EACD,IAAIG,MAAM,CAACC,WAAW,IAAI,EAAE,CAAC,CAC9B;EAEDD,MAAM,CAACI,aAAa,mCACfJ,MAAM,CAACI,aAAa;IACvBN;EAAQ,EACT;EAED,OAAOE,MAAM;AACf,CAAC;AAED,eAAeD,WAAW"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}