{"ast":null,"code":"import { v4 as uuid } from 'uuid';\nimport { Editor, Transforms } from 'slate';\nimport { IMAGE } from '@plone/volto-slate/constants';\nexport function syncCreateImageBlock(url) {\n  const id = uuid();\n  const block = {\n    '@type': 'image',\n    url\n  };\n  return [id, block];\n}\n\n// This function is used by deconstructToVoltoBlocks, so not directly by the\n// <SlateEditor>. File exists here because there's no \"blocks/Image\" folder\nexport const extractImages = (editor, pathRef) => {\n  const imageNodes = Array.from(Editor.nodes(editor, {\n    at: pathRef.current,\n    match: node => node.type === IMAGE\n  }));\n  const images = imageNodes.map(([el, path]) => el);\n  Transforms.removeNodes(editor, {\n    at: pathRef.current,\n    match: node => node.type === IMAGE\n  });\n  return images.map(el => syncCreateImageBlock(el.url));\n};","map":{"version":3,"names":["v4","uuid","Editor","Transforms","IMAGE","syncCreateImageBlock","url","id","block","extractImages","editor","pathRef","imageNodes","Array","from","nodes","at","current","match","node","type","images","map","el","path","removeNodes"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/packages/volto-slate/src/editor/plugins/Image/deconstruct.js"],"sourcesContent":["import { v4 as uuid } from 'uuid';\nimport { Editor, Transforms } from 'slate';\nimport { IMAGE } from '@plone/volto-slate/constants';\n\nexport function syncCreateImageBlock(url) {\n  const id = uuid();\n  const block = {\n    '@type': 'image',\n    url,\n  };\n  return [id, block];\n}\n\n// This function is used by deconstructToVoltoBlocks, so not directly by the\n// <SlateEditor>. File exists here because there's no \"blocks/Image\" folder\nexport const extractImages = (editor, pathRef) => {\n  const imageNodes = Array.from(\n    Editor.nodes(editor, {\n      at: pathRef.current,\n      match: (node) => node.type === IMAGE,\n    }),\n  );\n  const images = imageNodes.map(([el, path]) => el);\n  Transforms.removeNodes(editor, {\n    at: pathRef.current,\n    match: (node) => node.type === IMAGE,\n  });\n\n  return images.map((el) => syncCreateImageBlock(el.url));\n};\n"],"mappings":"AAAA,SAASA,EAAE,IAAIC,IAAI,QAAQ,MAAM;AACjC,SAASC,MAAM,EAAEC,UAAU,QAAQ,OAAO;AAC1C,SAASC,KAAK,QAAQ,8BAA8B;AAEpD,OAAO,SAASC,oBAAoB,CAACC,GAAG,EAAE;EACxC,MAAMC,EAAE,GAAGN,IAAI,EAAE;EACjB,MAAMO,KAAK,GAAG;IACZ,OAAO,EAAE,OAAO;IAChBF;EACF,CAAC;EACD,OAAO,CAACC,EAAE,EAAEC,KAAK,CAAC;AACpB;;AAEA;AACA;AACA,OAAO,MAAMC,aAAa,GAAG,CAACC,MAAM,EAAEC,OAAO,KAAK;EAChD,MAAMC,UAAU,GAAGC,KAAK,CAACC,IAAI,CAC3BZ,MAAM,CAACa,KAAK,CAACL,MAAM,EAAE;IACnBM,EAAE,EAAEL,OAAO,CAACM,OAAO;IACnBC,KAAK,EAAGC,IAAI,IAAKA,IAAI,CAACC,IAAI,KAAKhB;EACjC,CAAC,CAAC,CACH;EACD,MAAMiB,MAAM,GAAGT,UAAU,CAACU,GAAG,CAAC,CAAC,CAACC,EAAE,EAAEC,IAAI,CAAC,KAAKD,EAAE,CAAC;EACjDpB,UAAU,CAACsB,WAAW,CAACf,MAAM,EAAE;IAC7BM,EAAE,EAAEL,OAAO,CAACM,OAAO;IACnBC,KAAK,EAAGC,IAAI,IAAKA,IAAI,CAACC,IAAI,KAAKhB;EACjC,CAAC,CAAC;EAEF,OAAOiB,MAAM,CAACC,GAAG,CAAEC,EAAE,IAAKlB,oBAAoB,CAACkB,EAAE,CAACjB,GAAG,CAAC,CAAC;AACzD,CAAC"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}