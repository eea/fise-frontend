{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-slate/src/editor/plugins/Table/index.js\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport React from 'react';\nimport { withTable } from './extensions';\nimport TableButton from './TableButton';\nimport { tableElements } from './render';\nimport './less/public.less';\nimport clearSVG from '@plone/volto/icons/delete.svg';\nimport rowBeforeSVG from '@plone/volto/icons/row-before.svg';\nimport rowAfterSVG from '@plone/volto/icons/row-after.svg';\nimport colBeforeSVG from '@plone/volto/icons/column-before.svg';\nimport colAfterSVG from '@plone/volto/icons/column-after.svg';\nimport rowDeleteSVG from '@plone/volto/icons/row-delete.svg';\nimport colDeleteSVG from '@plone/volto/icons/column-delete.svg';\nimport { ToolbarButton } from 'volto-slate/editor/ui';\nimport { Range, Transforms, Editor, Path } from 'slate';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { TABLE, TR, P, TD, TH } from 'volto-slate/constants';\nconst messages = defineMessages({\n  deleteTable: {\n    \"id\": \"Delete table\",\n    \"defaultMessage\": \"Delete table\"\n  },\n  insertRowBefore: {\n    \"id\": \"Insert row before\",\n    \"defaultMessage\": \"Insert row before\"\n  },\n  insertRowAfter: {\n    \"id\": \"Insert row after\",\n    \"defaultMessage\": \"Insert row after\"\n  },\n  deleteRow: {\n    \"id\": \"Delete row\",\n    \"defaultMessage\": \"Delete row\"\n  },\n  insertColBefore: {\n    \"id\": \"Insert col before\",\n    \"defaultMessage\": \"Insert col before\"\n  },\n  insertColAfter: {\n    \"id\": \"Insert col after\",\n    \"defaultMessage\": \"Insert col after\"\n  },\n  deleteCol: {\n    \"id\": \"Delete col\",\n    \"defaultMessage\": \"Delete col\"\n  }\n});\nconst unhangRange = (editor, options = {}) => {\n  const {\n    at = editor.selection,\n    voids,\n    unhang = true\n  } = options;\n  if (Range.isRange(at) && unhang) {\n    options.at = Editor.unhangRange(editor, at, {\n      voids\n    });\n  }\n};\nconst getNodes = (editor, options = {}) => {\n  unhangRange(editor, options);\n  return Editor.nodes(editor, options);\n};\nconst findNode = (editor, options = {}) => {\n  try {\n    const nodeEntries = getNodes(editor, {\n      at: editor.selection || editor.getSavedSelection() || []\n    });\n    for (const [node, path] of nodeEntries) {\n      return [node, path];\n    }\n  } catch (error) {\n    return undefined;\n  }\n};\nconst someNode = (editor, options) => {\n  return !!findNode(editor, options);\n};\nconst getEmptyCellNode = (editor, {\n  header\n}) => {\n  return {\n    type: header ? TH : TD,\n    children: [{\n      type: P,\n      children: [{\n        text: ''\n      }]\n    }]\n  };\n};\nconst getEmptyRowNode = (editor, {\n  header,\n  colCount\n}) => {\n  return {\n    type: TR,\n    children: Array(colCount).fill(colCount).map(() => getEmptyCellNode(editor, {\n      header\n    }))\n  };\n};\nconst addRowBefore = (editor, {\n  header\n} = {}) => {\n  if (someNode(editor, {\n    match: n => n.type === TABLE\n  })) {\n    const currentRowItem = Editor.above(editor, {\n      match: n => n.type === TR\n    });\n    if (currentRowItem) {\n      const [currentRowElem, currentRowPath] = currentRowItem;\n      Transforms.insertNodes(editor, getEmptyRowNode(editor, {\n        header,\n        colCount: currentRowElem.children.length\n      }), {\n        at: currentRowPath,\n        select: true // TODO: this and similar lines in the Table plugin do nothing currently, why?\n      });\n    }\n  }\n};\n\nconst addRowAfter = (editor, {\n  header\n} = {}) => {\n  if (someNode(editor, {\n    match: n => n.type === TABLE\n  })) {\n    const currentRowItem = Editor.above(editor, {\n      match: n => n.type === TR\n    });\n    if (currentRowItem) {\n      const [currentRowElem, currentRowPath] = currentRowItem;\n      Transforms.insertNodes(editor, getEmptyRowNode(editor, {\n        header,\n        colCount: currentRowElem.children.length\n      }), {\n        at: Path.next(currentRowPath),\n        select: true\n      });\n    }\n  }\n};\nconst deleteRow = editor => {\n  if (someNode(editor, {\n    match: n => n.type === TABLE\n  })) {\n    const currentTableItem = Editor.above(editor, {\n      match: n => n.type === TABLE\n    });\n    const currentRowItem = Editor.above(editor, {\n      match: n => n.type === TR\n    });\n    if (currentRowItem && currentTableItem &&\n    // Cannot delete the last row\n    // TODO: handle tfoot and thead Element types here:\n    currentTableItem[0].children[0].children.length > 1) {\n      Transforms.removeNodes(editor, {\n        at: currentRowItem[1]\n      });\n    }\n  }\n};\nconst addColBefore = (editor, {\n  header\n} = {}) => {\n  if (someNode(editor, {\n    match: n => n.type === TABLE\n  })) {\n    const currentCellItem = Editor.above(editor, {\n      match: n => n.type === TH || n.type === TD\n    });\n    const currentTableItem = Editor.above(editor, {\n      match: n => n.type === TABLE\n    });\n    if (currentCellItem && currentTableItem) {\n      const nextCellPath = currentCellItem[1];\n      const newCellPath = nextCellPath.slice();\n      const replacePathPos = newCellPath.length - 2;\n      const currentRowIdx = nextCellPath[replacePathPos];\n\n      // TODO: handle tfoot and thead too:\n      currentTableItem[0].children[0].children.forEach((row, rowIdx) => {\n        newCellPath[replacePathPos] = rowIdx;\n        const isHeaderRow = header === undefined ? row.children[0].type === TH : header;\n        Transforms.insertNodes(editor, getEmptyCellNode(editor, {\n          header: isHeaderRow\n        }), {\n          at: newCellPath,\n          select: rowIdx === currentRowIdx\n        });\n      });\n    }\n  }\n};\nconst addColAfter = (editor, {\n  header\n} = {}) => {\n  if (someNode(editor, {\n    match: n => n.type === TABLE\n  })) {\n    const currentCellItem = Editor.above(editor, {\n      match: n => n.type === TH || n.type === TD\n    });\n    const currentTableItem = Editor.above(editor, {\n      match: n => n.type === TABLE\n    });\n    if (currentCellItem && currentTableItem) {\n      const nextCellPath = Path.next(currentCellItem[1]);\n      const newCellPath = nextCellPath.slice();\n      const replacePathPos = newCellPath.length - 2;\n      const currentRowIdx = nextCellPath[replacePathPos];\n\n      // TODO: handle tfoot and thead too:\n      currentTableItem[0].children[0].children.forEach((row, rowIdx) => {\n        newCellPath[replacePathPos] = rowIdx;\n        const isHeaderRow = header === undefined ? row.children[0].type === TH : header;\n        Transforms.insertNodes(editor, getEmptyCellNode(editor, {\n          header: isHeaderRow\n        }), {\n          at: newCellPath,\n          select: rowIdx === currentRowIdx\n        });\n      });\n    }\n  }\n};\nconst deleteCol = editor => {\n  if (someNode(editor, {\n    match: n => n.type === TABLE\n  })) {\n    const currentCellItem = Editor.above(editor, {\n      match: n => n.type === TD || n.type === TH\n    });\n    const currentRowItem = Editor.above(editor, {\n      match: n => n.type === TR\n    });\n    const currentTableItem = Editor.above(editor, {\n      match: n => n.type === TABLE\n    });\n    if (currentCellItem && currentRowItem && currentTableItem &&\n    // Cannot delete the last cell\n    currentRowItem[0].children.length > 1) {\n      const currentCellPath = currentCellItem[1];\n      const pathToDelete = currentCellPath.slice();\n      const replacePathPos = pathToDelete.length - 2;\n\n      // TODO: handle tfoot and thead too:\n      currentTableItem[0].children[0].children.forEach((row, rowIdx) => {\n        pathToDelete[replacePathPos] = rowIdx;\n        Transforms.removeNodes(editor, {\n          at: pathToDelete\n        });\n      });\n    }\n  }\n};\nexport default function install(config) {\n  const {\n    slate\n  } = config.settings;\n  slate.extensions = [...(slate.extensions || []), withTable];\n  slate.elements = _objectSpread(_objectSpread({}, slate.elements), tableElements);\n  slate.elementToolbarButtons[TABLE] = [({\n    editor\n  }) => {\n    const intl = useIntl();\n    return __jsx(ToolbarButton, {\n      title: intl.formatMessage(messages.deleteTable),\n      icon: clearSVG,\n      \"aria-label\": intl.formatMessage(messages.deleteTable),\n      onMouseDown: () => {\n        Transforms.removeNodes(editor, {\n          at: editor.selection || editor.getSavedSelection(),\n          match: n => n.type === TABLE\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }\n    });\n  }, ({\n    editor\n  }) => {\n    const intl = useIntl();\n    return __jsx(ToolbarButton, {\n      title: intl.formatMessage(messages.insertRowBefore),\n      icon: rowBeforeSVG,\n      \"aria-label\": intl.formatMessage(messages.insertRowBefore),\n      onMouseDown: () => {\n        addRowBefore(editor);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }\n    });\n  }, ({\n    editor\n  }) => {\n    const intl = useIntl();\n    return __jsx(ToolbarButton, {\n      title: intl.formatMessage(messages.insertRowAfter),\n      icon: rowAfterSVG,\n      \"aria-label\": intl.formatMessage(messages.insertRowAfter),\n      onMouseDown: () => {\n        addRowAfter(editor, {\n          header: false\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 9\n      }\n    });\n  }, ({\n    editor\n  }) => {\n    const intl = useIntl();\n    return __jsx(ToolbarButton, {\n      title: intl.formatMessage(messages.deleteRow),\n      icon: rowDeleteSVG,\n      \"aria-label\": intl.formatMessage(messages.deleteRow),\n      onMouseDown: () => {\n        deleteRow(editor);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 9\n      }\n    });\n  }, ({\n    editor\n  }) => {\n    const intl = useIntl();\n    return __jsx(ToolbarButton, {\n      title: intl.formatMessage(messages.insertColBefore),\n      icon: colBeforeSVG,\n      \"aria-label\": intl.formatMessage(messages.insertColBefore),\n      onMouseDown: () => {\n        addColBefore(editor);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 9\n      }\n    });\n  }, ({\n    editor\n  }) => {\n    const intl = useIntl();\n    return __jsx(ToolbarButton, {\n      title: intl.formatMessage(messages.insertColAfter),\n      icon: colAfterSVG,\n      \"aria-label\": intl.formatMessage(messages.insertColAfter),\n      onMouseDown: () => {\n        addColAfter(editor);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 9\n      }\n    });\n  }, ({\n    editor\n  }) => {\n    const intl = useIntl();\n    return __jsx(ToolbarButton, {\n      title: intl.formatMessage(messages.deleteCol),\n      icon: colDeleteSVG,\n      \"aria-label\": intl.formatMessage(messages.deleteCol),\n      onMouseDown: () => {\n        deleteCol(editor);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 9\n      }\n    });\n  }];\n  return config;\n}\nexport const installTableButton = config => {\n  const {\n    slate\n  } = config.settings;\n  slate.buttons.table = props => __jsx(TableButton, _extends({}, props, {\n    title: \"Table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 383,\n      columnNumber: 36\n    }\n  }));\n  slate.toolbarButtons = [...(slate.toolbarButtons || []), 'table'];\n  slate.expandedToolbarButtons = [...(slate.expandedToolbarButtons || []), 'table'];\n  return config;\n};","map":{"version":3,"names":["React","withTable","TableButton","tableElements","clearSVG","rowBeforeSVG","rowAfterSVG","colBeforeSVG","colAfterSVG","rowDeleteSVG","colDeleteSVG","ToolbarButton","Range","Transforms","Editor","Path","defineMessages","useIntl","TABLE","TR","P","TD","TH","messages","deleteTable","insertRowBefore","insertRowAfter","deleteRow","insertColBefore","insertColAfter","deleteCol","unhangRange","editor","options","at","selection","voids","unhang","isRange","getNodes","nodes","findNode","nodeEntries","getSavedSelection","node","path","error","undefined","someNode","getEmptyCellNode","header","type","children","text","getEmptyRowNode","colCount","Array","fill","map","addRowBefore","match","n","currentRowItem","above","currentRowElem","currentRowPath","insertNodes","length","select","addRowAfter","next","currentTableItem","removeNodes","addColBefore","currentCellItem","nextCellPath","newCellPath","slice","replacePathPos","currentRowIdx","forEach","row","rowIdx","isHeaderRow","addColAfter","currentCellPath","pathToDelete","install","config","slate","settings","extensions","elements","elementToolbarButtons","intl","formatMessage","installTableButton","buttons","table","props","toolbarButtons","expandedToolbarButtons"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-slate/src/editor/plugins/Table/index.js"],"sourcesContent":["import React from 'react';\nimport { withTable } from './extensions';\nimport TableButton from './TableButton';\nimport { tableElements } from './render';\nimport './less/public.less';\n\nimport clearSVG from '@plone/volto/icons/delete.svg';\nimport rowBeforeSVG from '@plone/volto/icons/row-before.svg';\nimport rowAfterSVG from '@plone/volto/icons/row-after.svg';\nimport colBeforeSVG from '@plone/volto/icons/column-before.svg';\nimport colAfterSVG from '@plone/volto/icons/column-after.svg';\nimport rowDeleteSVG from '@plone/volto/icons/row-delete.svg';\nimport colDeleteSVG from '@plone/volto/icons/column-delete.svg';\n\nimport { ToolbarButton } from 'volto-slate/editor/ui';\nimport { Range, Transforms, Editor, Path } from 'slate';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { TABLE, TR, P, TD, TH } from 'volto-slate/constants';\n\nconst messages = defineMessages({\n  deleteTable: {\n    id: 'Delete table',\n    defaultMessage: 'Delete table',\n  },\n  insertRowBefore: {\n    id: 'Insert row before',\n    defaultMessage: 'Insert row before',\n  },\n  insertRowAfter: {\n    id: 'Insert row after',\n    defaultMessage: 'Insert row after',\n  },\n  deleteRow: {\n    id: 'Delete row',\n    defaultMessage: 'Delete row',\n  },\n  insertColBefore: {\n    id: 'Insert col before',\n    defaultMessage: 'Insert col before',\n  },\n  insertColAfter: {\n    id: 'Insert col after',\n    defaultMessage: 'Insert col after',\n  },\n  deleteCol: {\n    id: 'Delete col',\n    defaultMessage: 'Delete col',\n  },\n});\n\nconst unhangRange = (editor, options = {}) => {\n  const { at = editor.selection, voids, unhang = true } = options;\n\n  if (Range.isRange(at) && unhang) {\n    options.at = Editor.unhangRange(editor, at, { voids });\n  }\n};\n\nconst getNodes = (editor, options = {}) => {\n  unhangRange(editor, options);\n\n  return Editor.nodes(editor, options);\n};\n\nconst findNode = (editor, options = {}) => {\n  try {\n    const nodeEntries = getNodes(editor, {\n      at: editor.selection || editor.getSavedSelection() || [],\n    });\n\n    for (const [node, path] of nodeEntries) {\n      return [node, path];\n    }\n  } catch (error) {\n    return undefined;\n  }\n};\n\nconst someNode = (editor, options) => {\n  return !!findNode(editor, options);\n};\n\nconst getEmptyCellNode = (editor, { header }) => {\n  return {\n    type: header ? TH : TD,\n    children: [{ type: P, children: [{ text: '' }] }],\n  };\n};\n\nconst getEmptyRowNode = (editor, { header, colCount }) => {\n  return {\n    type: TR,\n    children: Array(colCount)\n      .fill(colCount)\n      .map(() => getEmptyCellNode(editor, { header })),\n  };\n};\n\nconst addRowBefore = (editor, { header } = {}) => {\n  if (someNode(editor, { match: (n) => n.type === TABLE })) {\n    const currentRowItem = Editor.above(editor, {\n      match: (n) => n.type === TR,\n    });\n    if (currentRowItem) {\n      const [currentRowElem, currentRowPath] = currentRowItem;\n      Transforms.insertNodes(\n        editor,\n        getEmptyRowNode(editor, {\n          header,\n          colCount: currentRowElem.children.length,\n        }),\n        {\n          at: currentRowPath,\n          select: true, // TODO: this and similar lines in the Table plugin do nothing currently, why?\n        },\n      );\n    }\n  }\n};\n\nconst addRowAfter = (editor, { header } = {}) => {\n  if (someNode(editor, { match: (n) => n.type === TABLE })) {\n    const currentRowItem = Editor.above(editor, {\n      match: (n) => n.type === TR,\n    });\n    if (currentRowItem) {\n      const [currentRowElem, currentRowPath] = currentRowItem;\n      Transforms.insertNodes(\n        editor,\n        getEmptyRowNode(editor, {\n          header,\n          colCount: currentRowElem.children.length,\n        }),\n        {\n          at: Path.next(currentRowPath),\n          select: true,\n        },\n      );\n    }\n  }\n};\n\nconst deleteRow = (editor) => {\n  if (someNode(editor, { match: (n) => n.type === TABLE })) {\n    const currentTableItem = Editor.above(editor, {\n      match: (n) => n.type === TABLE,\n    });\n    const currentRowItem = Editor.above(editor, {\n      match: (n) => n.type === TR,\n    });\n    if (\n      currentRowItem &&\n      currentTableItem &&\n      // Cannot delete the last row\n      // TODO: handle tfoot and thead Element types here:\n      currentTableItem[0].children[0].children.length > 1\n    ) {\n      Transforms.removeNodes(editor, { at: currentRowItem[1] });\n    }\n  }\n};\n\nconst addColBefore = (editor, { header } = {}) => {\n  if (someNode(editor, { match: (n) => n.type === TABLE })) {\n    const currentCellItem = Editor.above(editor, {\n      match: (n) => n.type === TH || n.type === TD,\n    });\n    const currentTableItem = Editor.above(editor, {\n      match: (n) => n.type === TABLE,\n    });\n\n    if (currentCellItem && currentTableItem) {\n      const nextCellPath = currentCellItem[1];\n      const newCellPath = nextCellPath.slice();\n      const replacePathPos = newCellPath.length - 2;\n      const currentRowIdx = nextCellPath[replacePathPos];\n\n      // TODO: handle tfoot and thead too:\n      currentTableItem[0].children[0].children.forEach((row, rowIdx) => {\n        newCellPath[replacePathPos] = rowIdx;\n        const isHeaderRow =\n          header === undefined ? row.children[0].type === TH : header;\n\n        Transforms.insertNodes(\n          editor,\n          getEmptyCellNode(editor, { header: isHeaderRow }),\n          {\n            at: newCellPath,\n            select: rowIdx === currentRowIdx,\n          },\n        );\n      });\n    }\n  }\n};\n\nconst addColAfter = (editor, { header } = {}) => {\n  if (someNode(editor, { match: (n) => n.type === TABLE })) {\n    const currentCellItem = Editor.above(editor, {\n      match: (n) => n.type === TH || n.type === TD,\n    });\n    const currentTableItem = Editor.above(editor, {\n      match: (n) => n.type === TABLE,\n    });\n\n    if (currentCellItem && currentTableItem) {\n      const nextCellPath = Path.next(currentCellItem[1]);\n      const newCellPath = nextCellPath.slice();\n      const replacePathPos = newCellPath.length - 2;\n      const currentRowIdx = nextCellPath[replacePathPos];\n\n      // TODO: handle tfoot and thead too:\n      currentTableItem[0].children[0].children.forEach((row, rowIdx) => {\n        newCellPath[replacePathPos] = rowIdx;\n        const isHeaderRow =\n          header === undefined ? row.children[0].type === TH : header;\n\n        Transforms.insertNodes(\n          editor,\n          getEmptyCellNode(editor, { header: isHeaderRow }),\n          {\n            at: newCellPath,\n            select: rowIdx === currentRowIdx,\n          },\n        );\n      });\n    }\n  }\n};\n\nconst deleteCol = (editor) => {\n  if (someNode(editor, { match: (n) => n.type === TABLE })) {\n    const currentCellItem = Editor.above(editor, {\n      match: (n) => n.type === TD || n.type === TH,\n    });\n    const currentRowItem = Editor.above(editor, {\n      match: (n) => n.type === TR,\n    });\n    const currentTableItem = Editor.above(editor, {\n      match: (n) => n.type === TABLE,\n    });\n\n    if (\n      currentCellItem &&\n      currentRowItem &&\n      currentTableItem &&\n      // Cannot delete the last cell\n      currentRowItem[0].children.length > 1\n    ) {\n      const currentCellPath = currentCellItem[1];\n      const pathToDelete = currentCellPath.slice();\n      const replacePathPos = pathToDelete.length - 2;\n\n      // TODO: handle tfoot and thead too:\n      currentTableItem[0].children[0].children.forEach((row, rowIdx) => {\n        pathToDelete[replacePathPos] = rowIdx;\n\n        Transforms.removeNodes(editor, {\n          at: pathToDelete,\n        });\n      });\n    }\n  }\n};\n\nexport default function install(config) {\n  const { slate } = config.settings;\n\n  slate.extensions = [...(slate.extensions || []), withTable];\n  slate.elements = {\n    ...slate.elements,\n    ...tableElements,\n  };\n  slate.elementToolbarButtons[TABLE] = [\n    ({ editor }) => {\n      const intl = useIntl();\n\n      return (\n        <ToolbarButton\n          title={intl.formatMessage(messages.deleteTable)}\n          icon={clearSVG}\n          aria-label={intl.formatMessage(messages.deleteTable)}\n          onMouseDown={() => {\n            Transforms.removeNodes(editor, {\n              at: editor.selection || editor.getSavedSelection(),\n              match: (n) => n.type === TABLE,\n            });\n          }}\n        />\n      );\n    },\n    ({ editor }) => {\n      const intl = useIntl();\n\n      return (\n        <ToolbarButton\n          title={intl.formatMessage(messages.insertRowBefore)}\n          icon={rowBeforeSVG}\n          aria-label={intl.formatMessage(messages.insertRowBefore)}\n          onMouseDown={() => {\n            addRowBefore(editor);\n          }}\n        />\n      );\n    },\n    ({ editor }) => {\n      const intl = useIntl();\n\n      return (\n        <ToolbarButton\n          title={intl.formatMessage(messages.insertRowAfter)}\n          icon={rowAfterSVG}\n          aria-label={intl.formatMessage(messages.insertRowAfter)}\n          onMouseDown={() => {\n            addRowAfter(editor, { header: false });\n          }}\n        />\n      );\n    },\n    ({ editor }) => {\n      const intl = useIntl();\n\n      return (\n        <ToolbarButton\n          title={intl.formatMessage(messages.deleteRow)}\n          icon={rowDeleteSVG}\n          aria-label={intl.formatMessage(messages.deleteRow)}\n          onMouseDown={() => {\n            deleteRow(editor);\n          }}\n        />\n      );\n    },\n    ({ editor }) => {\n      const intl = useIntl();\n\n      return (\n        <ToolbarButton\n          title={intl.formatMessage(messages.insertColBefore)}\n          icon={colBeforeSVG}\n          aria-label={intl.formatMessage(messages.insertColBefore)}\n          onMouseDown={() => {\n            addColBefore(editor);\n          }}\n        />\n      );\n    },\n    ({ editor }) => {\n      const intl = useIntl();\n\n      return (\n        <ToolbarButton\n          title={intl.formatMessage(messages.insertColAfter)}\n          icon={colAfterSVG}\n          aria-label={intl.formatMessage(messages.insertColAfter)}\n          onMouseDown={() => {\n            addColAfter(editor);\n          }}\n        />\n      );\n    },\n    ({ editor }) => {\n      const intl = useIntl();\n\n      return (\n        <ToolbarButton\n          title={intl.formatMessage(messages.deleteCol)}\n          icon={colDeleteSVG}\n          aria-label={intl.formatMessage(messages.deleteCol)}\n          onMouseDown={() => {\n            deleteCol(editor);\n          }}\n        />\n      );\n    },\n  ];\n\n  return config;\n}\n\nexport const installTableButton = (config) => {\n  const { slate } = config.settings;\n  slate.buttons.table = (props) => <TableButton {...props} title=\"Table\" />;\n  slate.toolbarButtons = [...(slate.toolbarButtons || []), 'table'];\n  slate.expandedToolbarButtons = [\n    ...(slate.expandedToolbarButtons || []),\n    'table',\n  ];\n  return config;\n};\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Delete table","defaultMessage":"Delete table"},{"id":"Insert row before","defaultMessage":"Insert row before"},{"id":"Insert row after","defaultMessage":"Insert row after"},{"id":"Delete row","defaultMessage":"Delete row"},{"id":"Insert col before","defaultMessage":"Insert col before"},{"id":"Insert col after","defaultMessage":"Insert col after"},{"id":"Delete col","defaultMessage":"Delete col"}]}},"sourceType":"module","externalDependencies":[]}