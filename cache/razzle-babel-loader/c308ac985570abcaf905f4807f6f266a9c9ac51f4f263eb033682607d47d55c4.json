{"ast":null,"code":"import { toDate } from '@plone/volto/helpers/Utils/Date';\nexport class BasicModel {\n  constructor(record) {\n    const basic = {\n      _original: record\n    };\n    return new Proxy(basic, this);\n  }\n  get(target, name) {\n    if (target.hasOwnProperty(name)) {\n      return target[name];\n    }\n    const proto = Object.getPrototypeOf(this);\n    const descriptors = Object.getOwnPropertyDescriptors(proto);\n    if (descriptors[name] && descriptors[name].get) {\n      const value = descriptors[name].get.bind(target).apply();\n      delete target[name];\n      target[name] = value;\n      return target[name];\n    } else {\n      return target._original[name];\n    }\n  }\n}\n\n// One day in milliseconds\nconst oneDay = 1000 * 60 * 60 * 24;\nconst diffDates = (start, end) => Math.round((end.getTime() - start.getTime()) / oneDay);\nconst daysSinceIssued = item => {\n  const raw = item['EffectiveDate'];\n  if (!raw || raw === 'None') return Infinity;\n  const res = diffDates(toDate(raw), new Date());\n  return res;\n};\nexport class Item extends BasicModel {\n  get daysSinceIssued() {\n    return daysSinceIssued(this._original);\n  }\n  get isNew() {\n    const days = daysSinceIssued(this._original);\n    return days < 30;\n  }\n  get issued() {\n    const raw = this._original['EffectiveDate'];\n    return raw && raw !== 'None' ? toDate(raw) : null;\n  }\n  get expires() {\n    const raw = this._original['ExpirationDate'];\n    return raw && raw !== 'None' ? toDate(raw) : null;\n  }\n  get isExpired() {\n    const raw = this._original['ExpirationDate'];\n    if (!raw || raw === 'None') return null;\n    const date = toDate(raw);\n    return date < new Date();\n  }\n}","map":{"version":3,"names":["toDate","BasicModel","constructor","record","basic","_original","Proxy","get","target","name","hasOwnProperty","proto","Object","getPrototypeOf","descriptors","getOwnPropertyDescriptors","value","bind","apply","oneDay","diffDates","start","end","Math","round","getTime","daysSinceIssued","item","raw","Infinity","res","Date","Item","isNew","days","issued","expires","isExpired","date"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-listing-block/src/components/UniversalCard/model.js"],"sourcesContent":["import { toDate } from '@plone/volto/helpers/Utils/Date';\n\nexport class BasicModel {\n  constructor(record) {\n    const basic = {\n      _original: record,\n    };\n\n    return new Proxy(basic, this);\n  }\n\n  get(target, name) {\n    if (target.hasOwnProperty(name)) {\n      return target[name];\n    }\n\n    const proto = Object.getPrototypeOf(this);\n    const descriptors = Object.getOwnPropertyDescriptors(proto);\n\n    if (descriptors[name] && descriptors[name].get) {\n      const value = descriptors[name].get.bind(target).apply();\n      delete target[name];\n      target[name] = value;\n      return target[name];\n    } else {\n      return target._original[name];\n    }\n  }\n}\n\n// One day in milliseconds\nconst oneDay = 1000 * 60 * 60 * 24;\n\nconst diffDates = (start, end) =>\n  Math.round((end.getTime() - start.getTime()) / oneDay);\n\nconst daysSinceIssued = (item) => {\n  const raw = item['EffectiveDate'];\n  if (!raw || raw === 'None') return Infinity;\n\n  const res = diffDates(toDate(raw), new Date());\n\n  return res;\n};\n\nexport class Item extends BasicModel {\n  get daysSinceIssued() {\n    return daysSinceIssued(this._original);\n  }\n\n  get isNew() {\n    const days = daysSinceIssued(this._original);\n    return days < 30;\n  }\n\n  get issued() {\n    const raw = this._original['EffectiveDate'];\n    return raw && raw !== 'None' ? toDate(raw) : null;\n  }\n\n  get expires() {\n    const raw = this._original['ExpirationDate'];\n    return raw && raw !== 'None' ? toDate(raw) : null;\n  }\n  get isExpired() {\n    const raw = this._original['ExpirationDate'];\n    if (!raw || raw === 'None') return null;\n\n    const date = toDate(raw);\n    return date < new Date();\n  }\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,iCAAiC;AAExD,OAAO,MAAMC,UAAU,CAAC;EACtBC,WAAW,CAACC,MAAM,EAAE;IAClB,MAAMC,KAAK,GAAG;MACZC,SAAS,EAAEF;IACb,CAAC;IAED,OAAO,IAAIG,KAAK,CAACF,KAAK,EAAE,IAAI,CAAC;EAC/B;EAEAG,GAAG,CAACC,MAAM,EAAEC,IAAI,EAAE;IAChB,IAAID,MAAM,CAACE,cAAc,CAACD,IAAI,CAAC,EAAE;MAC/B,OAAOD,MAAM,CAACC,IAAI,CAAC;IACrB;IAEA,MAAME,KAAK,GAAGC,MAAM,CAACC,cAAc,CAAC,IAAI,CAAC;IACzC,MAAMC,WAAW,GAAGF,MAAM,CAACG,yBAAyB,CAACJ,KAAK,CAAC;IAE3D,IAAIG,WAAW,CAACL,IAAI,CAAC,IAAIK,WAAW,CAACL,IAAI,CAAC,CAACF,GAAG,EAAE;MAC9C,MAAMS,KAAK,GAAGF,WAAW,CAACL,IAAI,CAAC,CAACF,GAAG,CAACU,IAAI,CAACT,MAAM,CAAC,CAACU,KAAK,EAAE;MACxD,OAAOV,MAAM,CAACC,IAAI,CAAC;MACnBD,MAAM,CAACC,IAAI,CAAC,GAAGO,KAAK;MACpB,OAAOR,MAAM,CAACC,IAAI,CAAC;IACrB,CAAC,MAAM;MACL,OAAOD,MAAM,CAACH,SAAS,CAACI,IAAI,CAAC;IAC/B;EACF;AACF;;AAEA;AACA,MAAMU,MAAM,GAAG,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE;AAElC,MAAMC,SAAS,GAAG,CAACC,KAAK,EAAEC,GAAG,KAC3BC,IAAI,CAACC,KAAK,CAAC,CAACF,GAAG,CAACG,OAAO,EAAE,GAAGJ,KAAK,CAACI,OAAO,EAAE,IAAIN,MAAM,CAAC;AAExD,MAAMO,eAAe,GAAIC,IAAI,IAAK;EAChC,MAAMC,GAAG,GAAGD,IAAI,CAAC,eAAe,CAAC;EACjC,IAAI,CAACC,GAAG,IAAIA,GAAG,KAAK,MAAM,EAAE,OAAOC,QAAQ;EAE3C,MAAMC,GAAG,GAAGV,SAAS,CAACpB,MAAM,CAAC4B,GAAG,CAAC,EAAE,IAAIG,IAAI,EAAE,CAAC;EAE9C,OAAOD,GAAG;AACZ,CAAC;AAED,OAAO,MAAME,IAAI,SAAS/B,UAAU,CAAC;EACnC,IAAIyB,eAAe,GAAG;IACpB,OAAOA,eAAe,CAAC,IAAI,CAACrB,SAAS,CAAC;EACxC;EAEA,IAAI4B,KAAK,GAAG;IACV,MAAMC,IAAI,GAAGR,eAAe,CAAC,IAAI,CAACrB,SAAS,CAAC;IAC5C,OAAO6B,IAAI,GAAG,EAAE;EAClB;EAEA,IAAIC,MAAM,GAAG;IACX,MAAMP,GAAG,GAAG,IAAI,CAACvB,SAAS,CAAC,eAAe,CAAC;IAC3C,OAAOuB,GAAG,IAAIA,GAAG,KAAK,MAAM,GAAG5B,MAAM,CAAC4B,GAAG,CAAC,GAAG,IAAI;EACnD;EAEA,IAAIQ,OAAO,GAAG;IACZ,MAAMR,GAAG,GAAG,IAAI,CAACvB,SAAS,CAAC,gBAAgB,CAAC;IAC5C,OAAOuB,GAAG,IAAIA,GAAG,KAAK,MAAM,GAAG5B,MAAM,CAAC4B,GAAG,CAAC,GAAG,IAAI;EACnD;EACA,IAAIS,SAAS,GAAG;IACd,MAAMT,GAAG,GAAG,IAAI,CAACvB,SAAS,CAAC,gBAAgB,CAAC;IAC5C,IAAI,CAACuB,GAAG,IAAIA,GAAG,KAAK,MAAM,EAAE,OAAO,IAAI;IAEvC,MAAMU,IAAI,GAAGtC,MAAM,CAAC4B,GAAG,CAAC;IACxB,OAAOU,IAAI,GAAG,IAAIP,IAAI,EAAE;EAC1B;AACF"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}