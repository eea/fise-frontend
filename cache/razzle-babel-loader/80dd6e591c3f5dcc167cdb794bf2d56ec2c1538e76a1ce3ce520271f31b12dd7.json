{"ast":null,"code":"import _isEqual from \"lodash/isEqual\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/packages/volto-slate/src/elementEditor/PluginEditor.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { ReactEditor } from 'slate-react';\nimport { Icon as VoltoIcon, BlockDataForm } from '@plone/volto/components';\nimport { setPluginOptions } from '@plone/volto-slate/actions';\nimport BaseSchemaProvider from './SchemaProvider';\nimport briefcaseSVG from '@plone/volto/icons/briefcase.svg';\nimport checkSVG from '@plone/volto/icons/check.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nconst PluginEditor = props => {\n  const {\n    editor,\n    schemaProvider,\n    pluginId,\n    getActiveElement,\n    isActiveElement,\n    insertElement,\n    unwrapElement,\n    hasValue,\n    onChangeValues\n  } = props;\n  const dispatch = useDispatch();\n  const [formData, setFormData] = React.useState({});\n  const active = getActiveElement(editor);\n  if (!active) {\n    console.error('Active element not found, this will crash');\n  }\n  const [elementNode] = active;\n  const isElement = isActiveElement(editor);\n\n  // Update the form data based on the current element\n  const elRef = React.useRef(null);\n  if (isElement && !_isEqual(elementNode, elRef.current)) {\n    elRef.current = elementNode;\n    setFormData(elementNode.data || {});\n  } else if (!isElement) {\n    elRef.current = null;\n  }\n  const saveDataToEditor = React.useCallback(formData => {\n    if (hasValue(formData)) {\n      // hasValue(formData) = !!formData.footnote\n      insertElement(editor, formData);\n    } else {\n      unwrapElement(editor);\n    }\n  }, [editor, insertElement, unwrapElement, hasValue]);\n  const checkForCancel = () => {\n    if (!hasValue(elementNode.data)) {\n      unwrapElement(editor);\n    }\n  };\n  const SchemaProvider = schemaProvider ? schemaProvider : BaseSchemaProvider;\n  const pid = `${editor.uid}-${pluginId}`;\n  return __jsx(SchemaProvider, _extends({}, props, {\n    data: formData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }), schema => __jsx(BlockDataForm, {\n    schema: schema,\n    title: schema.title,\n    icon: __jsx(VoltoIcon, {\n      size: \"24px\",\n      name: briefcaseSVG,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }\n    }),\n    onChangeField: (id, value) => {\n      if (!onChangeValues) {\n        return setFormData(_objectSpread(_objectSpread({}, formData), {}, {\n          [id]: value\n        }));\n      }\n      return onChangeValues(id, value, formData, setFormData);\n    },\n    formData: formData,\n    headerActions: __jsx(React.Fragment, null, __jsx(\"button\", {\n      onClick: () => {\n        saveDataToEditor(formData);\n        dispatch(setPluginOptions(pid, {\n          show_sidebar_editor: false\n        }));\n        ReactEditor.focus(editor);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 15\n      }\n    }, __jsx(VoltoIcon, {\n      size: \"24px\",\n      name: checkSVG,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }\n    })), __jsx(\"button\", {\n      onClick: () => {\n        checkForCancel();\n        dispatch(setPluginOptions(pid, {\n          show_sidebar_editor: false\n        }));\n        setFormData({});\n        ReactEditor.focus(editor);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 15\n      }\n    }, __jsx(VoltoIcon, {\n      size: \"24px\",\n      name: clearSVG,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }\n    }))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }));\n};\nexport default PluginEditor;","map":{"version":3,"names":["React","useDispatch","ReactEditor","Icon","VoltoIcon","BlockDataForm","setPluginOptions","BaseSchemaProvider","briefcaseSVG","checkSVG","clearSVG","PluginEditor","props","editor","schemaProvider","pluginId","getActiveElement","isActiveElement","insertElement","unwrapElement","hasValue","onChangeValues","dispatch","formData","setFormData","useState","active","console","error","elementNode","isElement","elRef","useRef","current","data","saveDataToEditor","useCallback","checkForCancel","SchemaProvider","pid","uid","schema","title","id","value","show_sidebar_editor","focus"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/packages/volto-slate/src/elementEditor/PluginEditor.jsx"],"sourcesContent":["/* eslint no-console: [\"error\", { allow: [\"error\"] }] */\nimport { isEqual } from 'lodash';\nimport React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { ReactEditor } from 'slate-react';\nimport { Icon as VoltoIcon, BlockDataForm } from '@plone/volto/components';\nimport { setPluginOptions } from '@plone/volto-slate/actions';\nimport BaseSchemaProvider from './SchemaProvider';\n\nimport briefcaseSVG from '@plone/volto/icons/briefcase.svg';\nimport checkSVG from '@plone/volto/icons/check.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\n\nconst PluginEditor = (props) => {\n  const {\n    editor,\n    schemaProvider,\n    pluginId,\n    getActiveElement,\n    isActiveElement,\n    insertElement,\n    unwrapElement,\n    hasValue,\n    onChangeValues,\n  } = props;\n\n  const dispatch = useDispatch();\n  const [formData, setFormData] = React.useState({});\n\n  const active = getActiveElement(editor);\n\n  if (!active) {\n    console.error('Active element not found, this will crash');\n  }\n  const [elementNode] = active;\n  const isElement = isActiveElement(editor);\n\n  // Update the form data based on the current element\n  const elRef = React.useRef(null);\n\n  if (isElement && !isEqual(elementNode, elRef.current)) {\n    elRef.current = elementNode;\n    setFormData(elementNode.data || {});\n  } else if (!isElement) {\n    elRef.current = null;\n  }\n\n  const saveDataToEditor = React.useCallback(\n    (formData) => {\n      if (hasValue(formData)) {\n        // hasValue(formData) = !!formData.footnote\n        insertElement(editor, formData);\n      } else {\n        unwrapElement(editor);\n      }\n    },\n    [editor, insertElement, unwrapElement, hasValue],\n  );\n\n  const checkForCancel = () => {\n    if (!hasValue(elementNode.data)) {\n      unwrapElement(editor);\n    }\n  };\n\n  const SchemaProvider = schemaProvider ? schemaProvider : BaseSchemaProvider;\n\n  const pid = `${editor.uid}-${pluginId}`;\n  return (\n    <SchemaProvider {...props} data={formData}>\n      {(schema) => (\n        <BlockDataForm\n          schema={schema}\n          title={schema.title}\n          icon={<VoltoIcon size=\"24px\" name={briefcaseSVG} />}\n          onChangeField={(id, value) => {\n            if (!onChangeValues) {\n              return setFormData({\n                ...formData,\n                [id]: value,\n              });\n            }\n            return onChangeValues(id, value, formData, setFormData);\n          }}\n          formData={formData}\n          headerActions={\n            <>\n              <button\n                onClick={() => {\n                  saveDataToEditor(formData);\n                  dispatch(\n                    setPluginOptions(pid, {\n                      show_sidebar_editor: false,\n                    }),\n                  );\n                  ReactEditor.focus(editor);\n                }}\n              >\n                <VoltoIcon size=\"24px\" name={checkSVG} />\n              </button>\n              <button\n                onClick={() => {\n                  checkForCancel();\n                  dispatch(\n                    setPluginOptions(pid, {\n                      show_sidebar_editor: false,\n                    }),\n                  );\n                  setFormData({});\n                  ReactEditor.focus(editor);\n                }}\n              >\n                <VoltoIcon size=\"24px\" name={clearSVG} />\n              </button>\n            </>\n          }\n        />\n      )}\n    </SchemaProvider>\n  );\n};\n\nexport default PluginEditor;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}