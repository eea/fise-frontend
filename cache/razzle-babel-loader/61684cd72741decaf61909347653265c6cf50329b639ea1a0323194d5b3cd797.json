{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Controlpanels/Controlpanel.jsx\";\nvar __jsx = React.createElement;\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n/**\n * Controlpanel component.\n * @module components/manage/Controlpanels/Controlpanel\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { withRouter } from 'react-router-dom';\nimport { Helmet } from '@plone/volto/helpers';\nimport { Portal } from 'react-portal';\nimport { Button, Container } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { toast } from 'react-toastify';\nimport { Form, Icon, Toolbar, Toast } from '@plone/volto/components';\nimport { updateControlpanel, getControlpanel } from '@plone/volto/actions';\nimport saveSVG from '@plone/volto/icons/save.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nconst messages = defineMessages({\n  changesSaved: {\n    \"id\": \"Changes saved.\",\n    \"defaultMessage\": \"Changes saved.\"\n  },\n  back: {\n    \"id\": \"Back\",\n    \"defaultMessage\": \"Back\"\n  },\n  save: {\n    \"id\": \"Save\",\n    \"defaultMessage\": \"Save\"\n  },\n  cancel: {\n    \"id\": \"Cancel\",\n    \"defaultMessage\": \"Cancel\"\n  },\n  info: {\n    \"id\": \"Info\",\n    \"defaultMessage\": \"Info\"\n  }\n});\n\n/**\n * Controlpanel class.\n * @class Controlpanel\n * @extends Component\n */\nclass Controlpanel extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Controlpanel\n   */\n  constructor(props) {\n    super(props);\n    _defineProperty(this, \"form\", /*#__PURE__*/React.createRef());\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = {\n      isClient: false\n    };\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.getControlpanel(this.props.id);\n    this.setState({\n      isClient: true\n    });\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.updateRequest.loading && nextProps.updateRequest.loaded) {\n      toast.info(__jsx(Toast, {\n        info: true,\n        title: this.props.intl.formatMessage(messages.info),\n        content: this.props.intl.formatMessage(messages.changesSaved),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 9\n        }\n      }));\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    this.props.updateControlpanel(this.props.controlpanel['@id'], data);\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.props.history.goBack();\n  }\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    if (this.props.controlpanel) {\n      return __jsx(\"div\", {\n        id: \"page-controlpanel\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 9\n        }\n      }, __jsx(Helmet, {\n        title: this.props.controlpanel.title,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }\n      }), __jsx(Container, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }\n      }, __jsx(Form, {\n        ref: this.form,\n        title: this.props.controlpanel.title,\n        schema: this.props.controlpanel.schema,\n        formData: this.props.controlpanel.data,\n        onSubmit: this.onSubmit,\n        onCancel: this.onCancel,\n        hideActions: true,\n        loading: this.props.updateRequest.loading,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }\n      })), this.state.isClient && __jsx(Portal, {\n        node: document.getElementById('toolbar'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 13\n        }\n      }, __jsx(Toolbar, {\n        pathname: this.props.pathname,\n        hideDefaultViewButtons: true,\n        inner: __jsx(React.Fragment, null, __jsx(Button, {\n          id: \"toolbar-save\",\n          className: \"save\",\n          \"aria-label\": this.props.intl.formatMessage(messages.save),\n          onClick: () => this.form.current.onSubmit(),\n          disabled: this.props.updateRequest.loading,\n          loading: this.props.updateRequest.loading,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 21\n          }\n        }, __jsx(Icon, {\n          name: saveSVG,\n          className: \"circled\",\n          size: \"30px\",\n          title: this.props.intl.formatMessage(messages.save),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 23\n          }\n        })), __jsx(Button, {\n          className: \"cancel\",\n          \"aria-label\": this.props.intl.formatMessage(messages.cancel),\n          onClick: () => this.onCancel(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 21\n          }\n        }, __jsx(Icon, {\n          name: clearSVG,\n          className: \"circled\",\n          size: \"30px\",\n          title: this.props.intl.formatMessage(messages.cancel),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 23\n          }\n        }))),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 15\n        }\n      })));\n    }\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 12\n      }\n    });\n  }\n}\n_defineProperty(Controlpanel, \"propTypes\", {\n  updateControlpanel: PropTypes.func.isRequired,\n  getControlpanel: PropTypes.func.isRequired,\n  id: PropTypes.string.isRequired,\n  updateRequest: PropTypes.shape({\n    loading: PropTypes.bool,\n    loaded: PropTypes.bool\n  }).isRequired,\n  controlpanel: PropTypes.shape({\n    '@id': PropTypes.string,\n    data: PropTypes.object,\n    schema: PropTypes.object,\n    title: PropTypes.string\n  }),\n  pathname: PropTypes.string.isRequired\n});\n_defineProperty(Controlpanel, \"defaultProps\", {\n  controlpanel: null\n});\nexport default compose(injectIntl, connect((state, props) => ({\n  controlpanel: state.controlpanels.controlpanel,\n  updateRequest: state.controlpanels.update,\n  id: props.match.params.id,\n  pathname: props.location.pathname\n}), {\n  updateControlpanel,\n  getControlpanel\n}), withRouter)(Controlpanel);","map":{"version":3,"names":["React","Component","PropTypes","connect","compose","withRouter","Helmet","Portal","Button","Container","defineMessages","injectIntl","toast","Form","Icon","Toolbar","Toast","updateControlpanel","getControlpanel","saveSVG","clearSVG","messages","changesSaved","back","save","cancel","info","Controlpanel","constructor","props","createRef","onCancel","bind","onSubmit","state","isClient","componentDidMount","id","setState","UNSAFE_componentWillReceiveProps","nextProps","updateRequest","loading","loaded","intl","formatMessage","data","controlpanel","history","goBack","render","title","form","schema","document","getElementById","pathname","current","func","isRequired","string","shape","bool","object","controlpanels","update","match","params","location"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Controlpanels/Controlpanel.jsx"],"sourcesContent":["/**\n * Controlpanel component.\n * @module components/manage/Controlpanels/Controlpanel\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { withRouter } from 'react-router-dom';\nimport { Helmet } from '@plone/volto/helpers';\nimport { Portal } from 'react-portal';\nimport { Button, Container } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { toast } from 'react-toastify';\n\nimport { Form, Icon, Toolbar, Toast } from '@plone/volto/components';\nimport { updateControlpanel, getControlpanel } from '@plone/volto/actions';\n\nimport saveSVG from '@plone/volto/icons/save.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\n\nconst messages = defineMessages({\n  changesSaved: {\n    id: 'Changes saved.',\n    defaultMessage: 'Changes saved.',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  save: {\n    id: 'Save',\n    defaultMessage: 'Save',\n  },\n  cancel: {\n    id: 'Cancel',\n    defaultMessage: 'Cancel',\n  },\n  info: {\n    id: 'Info',\n    defaultMessage: 'Info',\n  },\n});\n\n/**\n * Controlpanel class.\n * @class Controlpanel\n * @extends Component\n */\nclass Controlpanel extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    updateControlpanel: PropTypes.func.isRequired,\n    getControlpanel: PropTypes.func.isRequired,\n    id: PropTypes.string.isRequired,\n    updateRequest: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    controlpanel: PropTypes.shape({\n      '@id': PropTypes.string,\n      data: PropTypes.object,\n      schema: PropTypes.object,\n      title: PropTypes.string,\n    }),\n    pathname: PropTypes.string.isRequired,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    controlpanel: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Controlpanel\n   */\n  constructor(props) {\n    super(props);\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = { isClient: false };\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.getControlpanel(this.props.id);\n    this.setState({ isClient: true });\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.updateRequest.loading && nextProps.updateRequest.loaded) {\n      toast.info(\n        <Toast\n          info\n          title={this.props.intl.formatMessage(messages.info)}\n          content={this.props.intl.formatMessage(messages.changesSaved)}\n        />,\n      );\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    this.props.updateControlpanel(this.props.controlpanel['@id'], data);\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.props.history.goBack();\n  }\n  form = React.createRef();\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    if (this.props.controlpanel) {\n      return (\n        <div id=\"page-controlpanel\">\n          <Helmet title={this.props.controlpanel.title} />\n          <Container>\n            <Form\n              ref={this.form}\n              title={this.props.controlpanel.title}\n              schema={this.props.controlpanel.schema}\n              formData={this.props.controlpanel.data}\n              onSubmit={this.onSubmit}\n              onCancel={this.onCancel}\n              hideActions\n              loading={this.props.updateRequest.loading}\n            />\n          </Container>\n          {this.state.isClient && (\n            <Portal node={document.getElementById('toolbar')}>\n              <Toolbar\n                pathname={this.props.pathname}\n                hideDefaultViewButtons\n                inner={\n                  <>\n                    <Button\n                      id=\"toolbar-save\"\n                      className=\"save\"\n                      aria-label={this.props.intl.formatMessage(messages.save)}\n                      onClick={() => this.form.current.onSubmit()}\n                      disabled={this.props.updateRequest.loading}\n                      loading={this.props.updateRequest.loading}\n                    >\n                      <Icon\n                        name={saveSVG}\n                        className=\"circled\"\n                        size=\"30px\"\n                        title={this.props.intl.formatMessage(messages.save)}\n                      />\n                    </Button>\n                    <Button\n                      className=\"cancel\"\n                      aria-label={this.props.intl.formatMessage(\n                        messages.cancel,\n                      )}\n                      onClick={() => this.onCancel()}\n                    >\n                      <Icon\n                        name={clearSVG}\n                        className=\"circled\"\n                        size=\"30px\"\n                        title={this.props.intl.formatMessage(messages.cancel)}\n                      />\n                    </Button>\n                  </>\n                }\n              />\n            </Portal>\n          )}\n        </div>\n      );\n    }\n    return <div />;\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      controlpanel: state.controlpanels.controlpanel,\n      updateRequest: state.controlpanels.update,\n      id: props.match.params.id,\n      pathname: props.location.pathname,\n    }),\n    { updateControlpanel, getControlpanel },\n  ),\n  withRouter,\n)(Controlpanel);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Changes saved.","defaultMessage":"Changes saved."},{"id":"Back","defaultMessage":"Back"},{"id":"Save","defaultMessage":"Save"},{"id":"Cancel","defaultMessage":"Cancel"},{"id":"Info","defaultMessage":"Info"}]}},"sourceType":"module","externalDependencies":[]}