{"ast":null,"code":"import _slicedToArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n/* eslint no-console: [\"error\", { allow: [\"warn\", \"error\"] }] */\nimport { Editor, Transforms } from 'slate';\nimport config from '@plone/volto/registry';\nimport { isBlockActive } from 'volto-slate/utils';\n\n/**\n * Toggles a style (e.g. in the StyleMenu plugin).\n * @param {Editor} editor\n * @param {object} options\n * @param {boolean} options.isRequested Whether the given style is requested by\n * the user. The style is only applied if it is requested and only removed if it\n * is not requested.\n */\nexport var toggleStyle = function toggleStyle(editor, _ref) {\n  var cssClass = _ref.cssClass,\n    isBlock = _ref.isBlock,\n    isRequested = _ref.isRequested;\n  if (isBlock) {\n    toggleBlockStyle(editor, cssClass);\n  } else {\n    toggleInlineStyle(editor, cssClass);\n  }\n};\nexport var toggleBlockStyle = function toggleBlockStyle(editor, style) {\n  // We have 6 boolean variables which need to be accounted for.\n  // See https://docs.google.com/spreadsheets/d/1mVeMuqSTMABV2BhoHPrPAFjn7zUksbNgZ9AQK_dcd3U/edit?usp=sharing\n  var slate = config.settings.slate;\n  var isListItem = isBlockActive(editor, slate.listItemType);\n  var isActive = isBlockStyleActive(editor, style);\n  var wantsList = false;\n  if (isListItem && !wantsList) {\n    toggleBlockStyleAsListItem(editor, style);\n  } else if (isListItem && wantsList && !isActive) {\n    // switchListType(editor, format); // this will deconstruct to Volto blocks\n  } else if (!isListItem && wantsList) {\n    // changeBlockToList(editor, format);\n  } else if (!isListItem && !wantsList) {\n    internalToggleBlockStyle(editor, style);\n  } else {\n    console.warn('toggleBlockStyle case not covered, please examine:', {\n      wantsList: wantsList,\n      isActive: isActive,\n      isListItem: isListItem\n    });\n  }\n};\nexport var toggleInlineStyle = function toggleInlineStyle(editor, style) {\n  // We have 6 boolean variables which need to be accounted for.\n  // See https://docs.google.com/spreadsheets/d/1mVeMuqSTMABV2BhoHPrPAFjn7zUksbNgZ9AQK_dcd3U/edit?usp=sharing\n  var slate = config.settings.slate;\n  var isListItem = isBlockActive(editor, slate.listItemType);\n  var isActive = isInlineStyleActive(editor, style);\n  var wantsList = false;\n  if (isListItem && !wantsList) {\n    toggleInlineStyleAsListItem(editor, style);\n  } else if (isListItem && wantsList && !isActive) {\n    // switchListType(editor, format); // this will deconstruct to Volto blocks\n  } else if (!isListItem && wantsList) {\n    // changeBlockToList(editor, format);\n  } else if (!isListItem && !wantsList) {\n    internalToggleInlineStyle(editor, style);\n  } else {\n    console.warn('toggleInlineStyle case not covered, please examine:', {\n      wantsList: wantsList,\n      isActive: isActive,\n      isListItem: isListItem\n    });\n  }\n};\nexport var isBlockStyleActive = function isBlockStyleActive(editor, style) {\n  var sn = Array.from(Editor.nodes(editor, {\n    match: function match(n) {\n      return !Editor.isEditor(n) && typeof n.styleName === 'string';\n    },\n    mode: 'highest'\n  }));\n  for (var _i = 0, _sn = sn; _i < _sn.length; _i++) {\n    var _sn$_i = _slicedToArray(_sn[_i], 1),\n      n = _sn$_i[0];\n    if (n.styleName.split(' ').filter(function (x) {\n      return x === style;\n    }).length > 0) {\n      return true;\n    }\n  }\n  return false;\n};\nexport var isInlineStyleActive = function isInlineStyleActive(editor, style) {\n  var m = Editor.marks(editor);\n  var keyName = \"style-\".concat(style);\n  if (m && m[keyName]) {\n    return true;\n  }\n  return false;\n};\nexport var internalToggleBlockStyle = function internalToggleBlockStyle(editor, style) {\n  toggleBlockStyleInSelection(editor, style);\n};\nexport var internalToggleInlineStyle = function internalToggleInlineStyle(editor, style) {\n  toggleInlineStyleInSelection(editor, style);\n};\n\n/*\n * Applies a block format unto a list item. Will split the list and deconstruct the\n * block\n */\nexport var toggleBlockStyleAsListItem = function toggleBlockStyleAsListItem(editor, style) {\n  toggleBlockStyleInSelection(editor, style);\n};\n\n/*\n * Applies an inline style unto a list item.\n */\nexport var toggleInlineStyleAsListItem = function toggleInlineStyleAsListItem(editor, style) {\n  toggleInlineStyleInSelection(editor, style);\n};\nfunction toggleInlineStyleInSelection(editor, style) {\n  var m = Editor.marks(editor);\n  var keyName = 'style-' + style;\n  if (m && m[keyName]) {\n    Editor.removeMark(editor, keyName);\n  } else {\n    Editor.addMark(editor, keyName, true);\n  }\n}\nfunction toggleBlockStyleInSelection(editor, style) {\n  var sn = Array.from(Editor.nodes(editor, {\n    mode: 'highest',\n    match: function match(n) {\n      return !Editor.isEditor(n);\n    }\n  }));\n  for (var _i2 = 0, _sn2 = sn; _i2 < _sn2.length; _i2++) {\n    var _sn2$_i = _slicedToArray(_sn2[_i2], 2),\n      n = _sn2$_i[0],\n      p = _sn2$_i[1];\n    var cn = n.styleName;\n    if (typeof n.styleName !== 'string') {\n      cn = style;\n    } else if (n.styleName.split(' ').filter(function (x) {\n      return x === style;\n    }).length > 0) {\n      cn = cn.split(' ').filter(function (x) {\n        return x !== style;\n      }).join(' ');\n    } else {\n      // the style is not set but other styles are set\n      cn = cn.split(' ').concat(style).join(' ');\n    }\n    Transforms.setNodes(editor, {\n      styleName: cn\n    }, {\n      at: p\n    });\n  }\n}","map":{"version":3,"names":["Editor","Transforms","config","isBlockActive","toggleStyle","editor","cssClass","isBlock","isRequested","toggleBlockStyle","toggleInlineStyle","style","slate","settings","isListItem","listItemType","isActive","isBlockStyleActive","wantsList","toggleBlockStyleAsListItem","internalToggleBlockStyle","console","warn","isInlineStyleActive","toggleInlineStyleAsListItem","internalToggleInlineStyle","sn","Array","from","nodes","match","n","isEditor","styleName","mode","split","filter","x","length","m","marks","keyName","toggleBlockStyleInSelection","toggleInlineStyleInSelection","removeMark","addMark","p","cn","join","concat","setNodes","at"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-slate/src/editor/plugins/StyleMenu/utils.js"],"sourcesContent":["/* eslint no-console: [\"error\", { allow: [\"warn\", \"error\"] }] */\nimport { Editor, Transforms } from 'slate';\nimport config from '@plone/volto/registry';\nimport { isBlockActive } from 'volto-slate/utils';\n\n/**\n * Toggles a style (e.g. in the StyleMenu plugin).\n * @param {Editor} editor\n * @param {object} options\n * @param {boolean} options.isRequested Whether the given style is requested by\n * the user. The style is only applied if it is requested and only removed if it\n * is not requested.\n */\nexport const toggleStyle = (editor, { cssClass, isBlock, isRequested }) => {\n  if (isBlock) {\n    toggleBlockStyle(editor, cssClass);\n  } else {\n    toggleInlineStyle(editor, cssClass);\n  }\n};\n\nexport const toggleBlockStyle = (editor, style) => {\n  // We have 6 boolean variables which need to be accounted for.\n  // See https://docs.google.com/spreadsheets/d/1mVeMuqSTMABV2BhoHPrPAFjn7zUksbNgZ9AQK_dcd3U/edit?usp=sharing\n  const { slate } = config.settings;\n\n  const isListItem = isBlockActive(editor, slate.listItemType);\n  const isActive = isBlockStyleActive(editor, style);\n  const wantsList = false;\n\n  if (isListItem && !wantsList) {\n    toggleBlockStyleAsListItem(editor, style);\n  } else if (isListItem && wantsList && !isActive) {\n    // switchListType(editor, format); // this will deconstruct to Volto blocks\n  } else if (!isListItem && wantsList) {\n    // changeBlockToList(editor, format);\n  } else if (!isListItem && !wantsList) {\n    internalToggleBlockStyle(editor, style);\n  } else {\n    console.warn('toggleBlockStyle case not covered, please examine:', {\n      wantsList,\n      isActive,\n      isListItem,\n    });\n  }\n};\n\nexport const toggleInlineStyle = (editor, style) => {\n  // We have 6 boolean variables which need to be accounted for.\n  // See https://docs.google.com/spreadsheets/d/1mVeMuqSTMABV2BhoHPrPAFjn7zUksbNgZ9AQK_dcd3U/edit?usp=sharing\n  const { slate } = config.settings;\n\n  const isListItem = isBlockActive(editor, slate.listItemType);\n  const isActive = isInlineStyleActive(editor, style);\n  const wantsList = false;\n\n  if (isListItem && !wantsList) {\n    toggleInlineStyleAsListItem(editor, style);\n  } else if (isListItem && wantsList && !isActive) {\n    // switchListType(editor, format); // this will deconstruct to Volto blocks\n  } else if (!isListItem && wantsList) {\n    // changeBlockToList(editor, format);\n  } else if (!isListItem && !wantsList) {\n    internalToggleInlineStyle(editor, style);\n  } else {\n    console.warn('toggleInlineStyle case not covered, please examine:', {\n      wantsList,\n      isActive,\n      isListItem,\n    });\n  }\n};\n\nexport const isBlockStyleActive = (editor, style) => {\n  const sn = Array.from(\n    Editor.nodes(editor, {\n      match: (n) => !Editor.isEditor(n) && typeof n.styleName === 'string',\n      mode: 'highest',\n    }),\n  );\n\n  for (const [n] of sn) {\n    if (n.styleName.split(' ').filter((x) => x === style).length > 0) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nexport const isInlineStyleActive = (editor, style) => {\n  const m = Editor.marks(editor);\n  const keyName = `style-${style}`;\n  if (m && m[keyName]) {\n    return true;\n  }\n  return false;\n};\n\nexport const internalToggleBlockStyle = (editor, style) => {\n  toggleBlockStyleInSelection(editor, style);\n};\n\nexport const internalToggleInlineStyle = (editor, style) => {\n  toggleInlineStyleInSelection(editor, style);\n};\n\n/*\n * Applies a block format unto a list item. Will split the list and deconstruct the\n * block\n */\nexport const toggleBlockStyleAsListItem = (editor, style) => {\n  toggleBlockStyleInSelection(editor, style);\n};\n\n/*\n * Applies an inline style unto a list item.\n */\nexport const toggleInlineStyleAsListItem = (editor, style) => {\n  toggleInlineStyleInSelection(editor, style);\n};\n\nfunction toggleInlineStyleInSelection(editor, style) {\n  const m = Editor.marks(editor);\n  const keyName = 'style-' + style;\n\n  if (m && m[keyName]) {\n    Editor.removeMark(editor, keyName);\n  } else {\n    Editor.addMark(editor, keyName, true);\n  }\n}\n\nfunction toggleBlockStyleInSelection(editor, style) {\n  const sn = Array.from(\n    Editor.nodes(editor, {\n      mode: 'highest',\n      match: (n) => {\n        return !Editor.isEditor(n);\n      },\n    }),\n  );\n\n  for (const [n, p] of sn) {\n    let cn = n.styleName;\n    if (typeof n.styleName !== 'string') {\n      cn = style;\n    } else if (n.styleName.split(' ').filter((x) => x === style).length > 0) {\n      cn = cn\n        .split(' ')\n        .filter((x) => x !== style)\n        .join(' ');\n    } else {\n      // the style is not set but other styles are set\n      cn = cn.split(' ').concat(style).join(' ');\n    }\n    Transforms.setNodes(editor, { styleName: cn }, { at: p });\n  }\n}\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}