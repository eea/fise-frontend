{"ast":null,"code":"import _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n/**\n * Workflow reducer.\n * @module reducers/workflow/workflow\n */\n\nimport { TRANSITION_WORKFLOW, GET_WORKFLOW, GET_WORKFLOW_MULTIPLE } from '@plone/volto/constants/ActionTypes';\nvar initialState = {\n  get: {\n    loaded: false,\n    loading: false,\n    error: null\n  },\n  transition: {\n    loaded: false,\n    loading: false,\n    error: null\n  },\n  currentState: {},\n  history: [],\n  transitions: [],\n  multiple: []\n};\n\n/**\n * Get request key\n * @function getRequestKey\n * @param {string} actionType Action type.\n * @returns {string} Request key.\n */\nfunction getRequestKey(actionType) {\n  return actionType.split('_')[0].toLowerCase();\n}\n\n/**\n * Content reducer.\n * @function content\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function content() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  switch (action.type) {\n    case \"\".concat(GET_WORKFLOW, \"_PENDING\"):\n    case \"\".concat(GET_WORKFLOW_MULTIPLE, \"_PENDING\"):\n    case \"\".concat(TRANSITION_WORKFLOW, \"_PENDING\"):\n      return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, getRequestKey(action.type), {\n        loading: true,\n        loaded: false,\n        error: null\n      }));\n    case \"\".concat(GET_WORKFLOW, \"_SUCCESS\"):\n    case \"\".concat(TRANSITION_WORKFLOW, \"_SUCCESS\"):\n      return _objectSpread(_objectSpread({}, state), {}, _defineProperty({\n        currentState: action.result.state || state.currentState,\n        history: action.result.history ? action.result.history : state.history,\n        transitions: action.result.transitions ? action.result.transitions : state.transitions\n      }, getRequestKey(action.type), {\n        loading: false,\n        loaded: true,\n        error: null\n      }));\n    case \"\".concat(GET_WORKFLOW_MULTIPLE, \"_SUCCESS\"):\n      return _objectSpread(_objectSpread({}, state), {}, _defineProperty({\n        multiple: action.result\n      }, getRequestKey(action.type), {\n        loading: false,\n        loaded: true,\n        error: null\n      }));\n    case \"\".concat(GET_WORKFLOW, \"_FAIL\"):\n    case \"\".concat(TRANSITION_WORKFLOW, \"_FAIL\"):\n      return _objectSpread(_objectSpread({}, state), {}, _defineProperty({\n        currentState: {},\n        history: [],\n        transitions: []\n      }, getRequestKey(action.type), {\n        loading: false,\n        loaded: false,\n        error: action.error\n      }));\n    case \"\".concat(GET_WORKFLOW_MULTIPLE, \"_FAIL\"):\n      return _objectSpread(_objectSpread({}, state), {}, _defineProperty({\n        multiple: []\n      }, getRequestKey(action.type), {\n        loading: false,\n        loaded: false,\n        error: action.error\n      }));\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["TRANSITION_WORKFLOW","GET_WORKFLOW","GET_WORKFLOW_MULTIPLE","initialState","get","loaded","loading","error","transition","currentState","history","transitions","multiple","getRequestKey","actionType","split","toLowerCase","content","state","action","type","result"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/reducers/workflow/workflow.js"],"sourcesContent":["/**\n * Workflow reducer.\n * @module reducers/workflow/workflow\n */\n\nimport {\n  TRANSITION_WORKFLOW,\n  GET_WORKFLOW,\n  GET_WORKFLOW_MULTIPLE,\n} from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {\n  get: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  transition: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  currentState: {},\n  history: [],\n  transitions: [],\n  multiple: [],\n};\n\n/**\n * Get request key\n * @function getRequestKey\n * @param {string} actionType Action type.\n * @returns {string} Request key.\n */\nfunction getRequestKey(actionType) {\n  return actionType.split('_')[0].toLowerCase();\n}\n\n/**\n * Content reducer.\n * @function content\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function content(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${GET_WORKFLOW}_PENDING`:\n    case `${GET_WORKFLOW_MULTIPLE}_PENDING`:\n    case `${TRANSITION_WORKFLOW}_PENDING`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: true,\n          loaded: false,\n          error: null,\n        },\n      };\n    case `${GET_WORKFLOW}_SUCCESS`:\n    case `${TRANSITION_WORKFLOW}_SUCCESS`:\n      return {\n        ...state,\n        currentState: action.result.state || state.currentState,\n        history: action.result.history ? action.result.history : state.history,\n        transitions: action.result.transitions\n          ? action.result.transitions\n          : state.transitions,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${GET_WORKFLOW_MULTIPLE}_SUCCESS`:\n      return {\n        ...state,\n        multiple: action.result,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${GET_WORKFLOW}_FAIL`:\n    case `${TRANSITION_WORKFLOW}_FAIL`:\n      return {\n        ...state,\n        currentState: {},\n        history: [],\n        transitions: [],\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    case `${GET_WORKFLOW_MULTIPLE}_FAIL`:\n      return {\n        ...state,\n        multiple: [],\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    default:\n      return state;\n  }\n}\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA,SACEA,mBAAmB,EACnBC,YAAY,EACZC,qBAAqB,QAChB,oCAAoC;AAE3C,IAAMC,YAAY,GAAG;EACnBC,GAAG,EAAE;IACHC,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE,KAAK;IACdC,KAAK,EAAE;EACT,CAAC;EACDC,UAAU,EAAE;IACVH,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE,KAAK;IACdC,KAAK,EAAE;EACT,CAAC;EACDE,YAAY,EAAE,CAAC,CAAC;EAChBC,OAAO,EAAE,EAAE;EACXC,WAAW,EAAE,EAAE;EACfC,QAAQ,EAAE;AACZ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,aAAa,CAACC,UAAU,EAAE;EACjC,OAAOA,UAAU,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACC,WAAW,EAAE;AAC/C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,OAAO,GAAoC;EAAA,IAAnCC,KAAK,uEAAGf,YAAY;EAAA,IAAEgB,MAAM,uEAAG,CAAC,CAAC;EAC/D,QAAQA,MAAM,CAACC,IAAI;IACjB,eAAQnB,YAAY;IACpB,eAAQC,qBAAqB;IAC7B,eAAQF,mBAAmB;MACzB,uCACKkB,KAAK,2BACPL,aAAa,CAACM,MAAM,CAACC,IAAI,CAAC,EAAG;QAC5Bd,OAAO,EAAE,IAAI;QACbD,MAAM,EAAE,KAAK;QACbE,KAAK,EAAE;MACT,CAAC;IAEL,eAAQN,YAAY;IACpB,eAAQD,mBAAmB;MACzB,uCACKkB,KAAK;QACRT,YAAY,EAAEU,MAAM,CAACE,MAAM,CAACH,KAAK,IAAIA,KAAK,CAACT,YAAY;QACvDC,OAAO,EAAES,MAAM,CAACE,MAAM,CAACX,OAAO,GAAGS,MAAM,CAACE,MAAM,CAACX,OAAO,GAAGQ,KAAK,CAACR,OAAO;QACtEC,WAAW,EAAEQ,MAAM,CAACE,MAAM,CAACV,WAAW,GAClCQ,MAAM,CAACE,MAAM,CAACV,WAAW,GACzBO,KAAK,CAACP;MAAW,GACpBE,aAAa,CAACM,MAAM,CAACC,IAAI,CAAC,EAAG;QAC5Bd,OAAO,EAAE,KAAK;QACdD,MAAM,EAAE,IAAI;QACZE,KAAK,EAAE;MACT,CAAC;IAEL,eAAQL,qBAAqB;MAC3B,uCACKgB,KAAK;QACRN,QAAQ,EAAEO,MAAM,CAACE;MAAM,GACtBR,aAAa,CAACM,MAAM,CAACC,IAAI,CAAC,EAAG;QAC5Bd,OAAO,EAAE,KAAK;QACdD,MAAM,EAAE,IAAI;QACZE,KAAK,EAAE;MACT,CAAC;IAEL,eAAQN,YAAY;IACpB,eAAQD,mBAAmB;MACzB,uCACKkB,KAAK;QACRT,YAAY,EAAE,CAAC,CAAC;QAChBC,OAAO,EAAE,EAAE;QACXC,WAAW,EAAE;MAAE,GACdE,aAAa,CAACM,MAAM,CAACC,IAAI,CAAC,EAAG;QAC5Bd,OAAO,EAAE,KAAK;QACdD,MAAM,EAAE,KAAK;QACbE,KAAK,EAAEY,MAAM,CAACZ;MAChB,CAAC;IAEL,eAAQL,qBAAqB;MAC3B,uCACKgB,KAAK;QACRN,QAAQ,EAAE;MAAE,GACXC,aAAa,CAACM,MAAM,CAACC,IAAI,CAAC,EAAG;QAC5Bd,OAAO,EAAE,KAAK;QACdD,MAAM,EAAE,KAAK;QACbE,KAAK,EAAEY,MAAM,CAACZ;MAChB,CAAC;IAEL;MACE,OAAOW,KAAK;EAAC;AAEnB"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}