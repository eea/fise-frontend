{"ast":null,"code":"import _keys from \"lodash/keys\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/server.jsx\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n/* eslint no-console: 0 */\nimport '@plone/volto/config'; // This is the bootstrap for the global config - server side\nimport { existsSync, lstatSync, readFileSync } from 'fs';\nimport React from 'react';\nimport { StaticRouter } from 'react-router-dom';\nimport { Provider } from 'react-intl-redux';\nimport express from 'express';\nimport { renderToString } from 'react-dom/server';\nimport { createMemoryHistory } from 'history';\nimport { parse as parseUrl } from 'url';\nimport locale from 'locale';\nimport { detect } from 'detect-browser';\nimport path from 'path';\nimport { ChunkExtractor, ChunkExtractorManager } from '@loadable/server';\nimport { resetServerContext } from 'react-beautiful-dnd';\nimport { CookiesProvider } from 'react-cookie';\nimport cookiesMiddleware from 'universal-cookie-express';\nimport debug from 'debug';\nimport routes from '@root/routes';\nimport config from '@plone/volto/registry';\nimport { flattenToAppURL, Html, Api, persistAuthToken, normalizeLanguageName, toLangUnderscoreRegion } from '@plone/volto/helpers';\nimport { changeLanguage } from '@plone/volto/actions';\nimport userSession from '@plone/volto/reducers/userSession/userSession';\nimport ErrorPage from '@plone/volto/error';\nimport languages from '@plone/volto/constants/Languages';\nimport configureStore from '@plone/volto/store';\nimport { ReduxAsyncConnect, loadOnServer } from './helpers/AsyncConnect';\nlet locales = {};\nif (config.settings) {\n  config.settings.supportedLanguages.forEach(lang => {\n    const langFileName = normalizeLanguageName(lang);\n    import('@root/../locales/' + langFileName + '.json').then(locale => {\n      locales = _objectSpread(_objectSpread({}, locales), {}, {\n        [lang]: locale.default\n      });\n    });\n  });\n}\nfunction reactIntlErrorHandler(error) {\n  debug('i18n')(error);\n}\nconst supported = new locale.Locales(_keys(languages), 'en');\nconst server = express().disable('x-powered-by').use(express.static(process.env.BUILD_DIR ? path.join(process.env.BUILD_DIR, 'public') : process.env.RAZZLE_PUBLIC_DIR)).head('/*', function (req, res) {\n  // Support for HEAD requests. Required by start-test utility in CI.\n  res.send('');\n}).use(cookiesMiddleware());\nconst middleware = (config.settings.expressMiddleware || []).filter(m => m);\nserver.all('*', setupServer);\nif (middleware.length) server.use('/', middleware);\nserver.use(function (err, req, res, next) {\n  if (err) {\n    const {\n      store\n    } = res.locals;\n    const errorPage = __jsx(Provider, {\n      store: store,\n      onError: reactIntlErrorHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 7\n      }\n    }, __jsx(StaticRouter, {\n      context: {},\n      location: req.url,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }\n    }, __jsx(ErrorPage, {\n      message: err.message,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }\n    })));\n    res.set({\n      'Cache-Control': 'public, max-age=60, no-transform'\n    });\n\n    /* Displays error in console\n     * TODO:\n     * - get ignored codes from Plone error_log\n     */\n    const ignoredErrors = [301, 302, 401, 404];\n    if (!ignoredErrors.includes(err.status)) console.error(err);\n    res.status(err.status || 500) // If error happens in Volto code itself error status is undefined\n    .send(`<!doctype html> ${renderToString(errorPage)}`);\n  }\n});\nfunction setupServer(req, res, next) {\n  const api = new Api(req);\n  const lang = new locale.Locales(req.universalCookies.get('I18N_LANGUAGE') || config.settings.defaultLanguage || req.headers['accept-language']).best(supported).toString();\n\n  // Minimum initial state for the fake Redux store instance\n  const initialState = {\n    intl: {\n      defaultLocale: 'en',\n      locale: lang,\n      messages: locales[lang]\n    }\n  };\n  const history = createMemoryHistory({\n    initialEntries: [req.url]\n  });\n\n  // Create a fake Redux store instance for the `errorHandler` to render\n  // and for being used by the rest of the middlewares, if required\n  const store = configureStore(initialState, history, api);\n  function errorHandler(error) {\n    const errorPage = __jsx(Provider, {\n      store: store,\n      onError: reactIntlErrorHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 7\n      }\n    }, __jsx(StaticRouter, {\n      context: {},\n      location: req.url,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }\n    }, __jsx(ErrorPage, {\n      message: error.message,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }\n    })));\n    res.set({\n      'Cache-Control': 'public, max-age=60, no-transform'\n    });\n\n    /* Displays error in console\n     * TODO:\n     * - get ignored codes from Plone error_log\n     */\n    const ignoredErrors = [301, 302, 401, 404];\n    if (!ignoredErrors.includes(error.status)) console.error(error);\n    res.status(error.status || 500) // If error happens in Volto code itself error status is undefined\n    .send(`<!doctype html> ${renderToString(errorPage)}`);\n  }\n  if (!process.env.RAZZLE_API_PATH && req.headers.host) {\n    res.locals.detectedHost = `${req.headers['x-forwarded-proto'] || req.protocol}://${req.headers.host}`;\n    config.settings.apiPath = res.locals.detectedHost;\n    config.settings.publicURL = res.locals.detectedHost;\n  }\n  res.locals = _objectSpread(_objectSpread({}, res.locals), {}, {\n    store,\n    api,\n    errorHandler\n  });\n  next();\n}\nserver.get('/*', (req, res) => {\n  const {\n    errorHandler\n  } = res.locals;\n  const api = new Api(req);\n  const browserdetect = detect(req.headers['user-agent']);\n  const lang = new locale.Locales(req.universalCookies.get('I18N_LANGUAGE') || config.settings.defaultLanguage || req.headers['accept-language']).best(supported).toString();\n  const authToken = req.universalCookies.get('auth_token');\n  const initialState = {\n    userSession: _objectSpread(_objectSpread({}, userSession()), {}, {\n      token: authToken\n    }),\n    form: req.body,\n    intl: {\n      defaultLocale: 'en',\n      locale: lang,\n      messages: locales[lang]\n    },\n    browserdetect\n  };\n  const history = createMemoryHistory({\n    initialEntries: [req.url]\n  });\n\n  // Create a new Redux store instance\n  const store = configureStore(initialState, history, api);\n  persistAuthToken(store, req);\n\n  // @loadable/server extractor\n  const buildDir = process.env.BUILD_DIR || 'build';\n  const extractor = new ChunkExtractor({\n    statsFile: path.resolve(path.join(buildDir, 'loadable-stats.json')),\n    entrypoints: ['client']\n  });\n  const url = req.originalUrl || req.url;\n  const location = parseUrl(url);\n  loadOnServer({\n    store,\n    location,\n    routes,\n    api\n  }).then(() => {\n    var _store$getState$conte, _store$getState$conte2;\n    // The content info is in the store at this point thanks to the asynconnect\n    // features, then we can force the current language info into the store when\n    // coming from an SSR request\n    const contentLang = ((_store$getState$conte = store.getState().content.data) === null || _store$getState$conte === void 0 ? void 0 : (_store$getState$conte2 = _store$getState$conte.language) === null || _store$getState$conte2 === void 0 ? void 0 : _store$getState$conte2.token) || config.settings.defaultLanguage;\n    const cookie_lang = req.universalCookies.get('I18N_LANGUAGE') || config.settings.defaultLanguage || req.headers['accept-language'];\n    if (cookie_lang !== contentLang) {\n      const newLocale = toLangUnderscoreRegion(new locale.Locales(contentLang).best(supported).toString());\n      store.dispatch(changeLanguage(newLocale, locales[newLocale], req));\n    }\n    const context = {};\n    resetServerContext();\n    const markup = renderToString(__jsx(ChunkExtractorManager, {\n      extractor: extractor,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }\n    }, __jsx(CookiesProvider, {\n      cookies: req.universalCookies,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 11\n      }\n    }, __jsx(Provider, {\n      store: store,\n      onError: reactIntlErrorHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 13\n      }\n    }, __jsx(StaticRouter, {\n      context: context,\n      location: req.url,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 15\n      }\n    }, __jsx(ReduxAsyncConnect, {\n      routes: routes,\n      helpers: api,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 17\n      }\n    }))))));\n    const readCriticalCss = config.settings.serverConfig.readCriticalCss || defaultReadCriticalCss;\n    if (context.url) {\n      res.redirect(flattenToAppURL(context.url));\n    } else if (context.error_code) {\n      var _config$settings$serv;\n      res.set({\n        'Cache-Control': 'no-cache'\n      });\n      res.status(context.error_code).send(`<!doctype html>\n              ${renderToString(__jsx(Html, {\n        extractor: extractor,\n        markup: markup,\n        store: store,\n        extractScripts: ((_config$settings$serv = config.settings.serverConfig.extractScripts) === null || _config$settings$serv === void 0 ? void 0 : _config$settings$serv.errorPages) || true,\n        criticalCss: readCriticalCss(req),\n        apiPath: res.locals.detectedHost || config.settings.apiPath,\n        publicURL: res.locals.detectedHost || config.settings.publicURL,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 17\n        }\n      }))}\n            `);\n    } else {\n      res.status(200).send(`<!doctype html>\n              ${renderToString(__jsx(Html, {\n        extractor: extractor,\n        markup: markup,\n        store: store,\n        criticalCss: readCriticalCss(req),\n        apiPath: res.locals.detectedHost || config.settings.apiPath,\n        publicURL: res.locals.detectedHost || config.settings.publicURL,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 17\n        }\n      }))}\n            `);\n    }\n  }, errorHandler).catch(errorHandler);\n});\nexport const defaultReadCriticalCss = () => {\n  const {\n    criticalCssPath\n  } = config.settings.serverConfig;\n  const e = existsSync(criticalCssPath);\n  if (!e) return;\n  const f = lstatSync(criticalCssPath);\n  if (!f.isFile()) return;\n  return readFileSync(criticalCssPath, {\n    encoding: 'utf-8'\n  });\n};\n\n// Exposed for the console bootstrap info messages\nserver.apiPath = config.settings.apiPath;\nserver.devProxyToApiPath = config.settings.devProxyToApiPath;\nserver.publicURL = config.settings.publicURL;\nexport default server;","map":{"version":3,"names":["existsSync","lstatSync","readFileSync","React","StaticRouter","Provider","express","renderToString","createMemoryHistory","parse","parseUrl","locale","detect","path","ChunkExtractor","ChunkExtractorManager","resetServerContext","CookiesProvider","cookiesMiddleware","debug","routes","config","flattenToAppURL","Html","Api","persistAuthToken","normalizeLanguageName","toLangUnderscoreRegion","changeLanguage","userSession","ErrorPage","languages","configureStore","ReduxAsyncConnect","loadOnServer","locales","settings","supportedLanguages","forEach","lang","langFileName","then","default","reactIntlErrorHandler","error","supported","Locales","server","disable","use","static","process","env","BUILD_DIR","join","RAZZLE_PUBLIC_DIR","head","req","res","send","middleware","expressMiddleware","filter","m","all","setupServer","length","err","next","store","locals","errorPage","url","message","set","ignoredErrors","includes","status","console","api","universalCookies","get","defaultLanguage","headers","best","toString","initialState","intl","defaultLocale","messages","history","initialEntries","errorHandler","RAZZLE_API_PATH","host","detectedHost","protocol","apiPath","publicURL","browserdetect","authToken","token","form","body","buildDir","extractor","statsFile","resolve","entrypoints","originalUrl","location","contentLang","getState","content","data","language","cookie_lang","newLocale","dispatch","context","markup","readCriticalCss","serverConfig","defaultReadCriticalCss","redirect","error_code","extractScripts","errorPages","catch","criticalCssPath","e","f","isFile","encoding","devProxyToApiPath"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/server.jsx"],"sourcesContent":["/* eslint no-console: 0 */\nimport '@plone/volto/config'; // This is the bootstrap for the global config - server side\nimport { existsSync, lstatSync, readFileSync } from 'fs';\nimport React from 'react';\nimport { StaticRouter } from 'react-router-dom';\nimport { Provider } from 'react-intl-redux';\nimport express from 'express';\nimport { renderToString } from 'react-dom/server';\nimport { createMemoryHistory } from 'history';\nimport { parse as parseUrl } from 'url';\nimport { keys } from 'lodash';\nimport locale from 'locale';\nimport { detect } from 'detect-browser';\nimport path from 'path';\nimport { ChunkExtractor, ChunkExtractorManager } from '@loadable/server';\nimport { resetServerContext } from 'react-beautiful-dnd';\nimport { CookiesProvider } from 'react-cookie';\nimport cookiesMiddleware from 'universal-cookie-express';\nimport debug from 'debug';\n\nimport routes from '@root/routes';\nimport config from '@plone/volto/registry';\n\nimport {\n  flattenToAppURL,\n  Html,\n  Api,\n  persistAuthToken,\n  normalizeLanguageName,\n  toLangUnderscoreRegion,\n} from '@plone/volto/helpers';\nimport { changeLanguage } from '@plone/volto/actions';\n\nimport userSession from '@plone/volto/reducers/userSession/userSession';\n\nimport ErrorPage from '@plone/volto/error';\n\nimport languages from '@plone/volto/constants/Languages';\n\nimport configureStore from '@plone/volto/store';\nimport { ReduxAsyncConnect, loadOnServer } from './helpers/AsyncConnect';\n\nlet locales = {};\n\nif (config.settings) {\n  config.settings.supportedLanguages.forEach((lang) => {\n    const langFileName = normalizeLanguageName(lang);\n    import('@root/../locales/' + langFileName + '.json').then((locale) => {\n      locales = { ...locales, [lang]: locale.default };\n    });\n  });\n}\n\nfunction reactIntlErrorHandler(error) {\n  debug('i18n')(error);\n}\n\nconst supported = new locale.Locales(keys(languages), 'en');\n\nconst server = express()\n  .disable('x-powered-by')\n  .use(\n    express.static(\n      process.env.BUILD_DIR\n        ? path.join(process.env.BUILD_DIR, 'public')\n        : process.env.RAZZLE_PUBLIC_DIR,\n    ),\n  )\n  .head('/*', function (req, res) {\n    // Support for HEAD requests. Required by start-test utility in CI.\n    res.send('');\n  })\n  .use(cookiesMiddleware());\n\nconst middleware = (config.settings.expressMiddleware || []).filter((m) => m);\n\nserver.all('*', setupServer);\nif (middleware.length) server.use('/', middleware);\n\nserver.use(function (err, req, res, next) {\n  if (err) {\n    const { store } = res.locals;\n    const errorPage = (\n      <Provider store={store} onError={reactIntlErrorHandler}>\n        <StaticRouter context={{}} location={req.url}>\n          <ErrorPage message={err.message} />\n        </StaticRouter>\n      </Provider>\n    );\n\n    res.set({\n      'Cache-Control': 'public, max-age=60, no-transform',\n    });\n\n    /* Displays error in console\n     * TODO:\n     * - get ignored codes from Plone error_log\n     */\n    const ignoredErrors = [301, 302, 401, 404];\n    if (!ignoredErrors.includes(err.status)) console.error(err);\n\n    res\n      .status(err.status || 500) // If error happens in Volto code itself error status is undefined\n      .send(`<!doctype html> ${renderToString(errorPage)}`);\n  }\n});\n\nfunction setupServer(req, res, next) {\n  const api = new Api(req);\n\n  const lang = new locale.Locales(\n    req.universalCookies.get('I18N_LANGUAGE') ||\n      config.settings.defaultLanguage ||\n      req.headers['accept-language'],\n  )\n    .best(supported)\n    .toString();\n\n  // Minimum initial state for the fake Redux store instance\n  const initialState = {\n    intl: {\n      defaultLocale: 'en',\n      locale: lang,\n      messages: locales[lang],\n    },\n  };\n\n  const history = createMemoryHistory({\n    initialEntries: [req.url],\n  });\n\n  // Create a fake Redux store instance for the `errorHandler` to render\n  // and for being used by the rest of the middlewares, if required\n  const store = configureStore(initialState, history, api);\n\n  function errorHandler(error) {\n    const errorPage = (\n      <Provider store={store} onError={reactIntlErrorHandler}>\n        <StaticRouter context={{}} location={req.url}>\n          <ErrorPage message={error.message} />\n        </StaticRouter>\n      </Provider>\n    );\n\n    res.set({\n      'Cache-Control': 'public, max-age=60, no-transform',\n    });\n\n    /* Displays error in console\n     * TODO:\n     * - get ignored codes from Plone error_log\n     */\n    const ignoredErrors = [301, 302, 401, 404];\n    if (!ignoredErrors.includes(error.status)) console.error(error);\n\n    res\n      .status(error.status || 500) // If error happens in Volto code itself error status is undefined\n      .send(`<!doctype html> ${renderToString(errorPage)}`);\n  }\n\n  if (!process.env.RAZZLE_API_PATH && req.headers.host) {\n    res.locals.detectedHost = `${\n      req.headers['x-forwarded-proto'] || req.protocol\n    }://${req.headers.host}`;\n    config.settings.apiPath = res.locals.detectedHost;\n    config.settings.publicURL = res.locals.detectedHost;\n  }\n\n  res.locals = {\n    ...res.locals,\n    store,\n    api,\n    errorHandler,\n  };\n\n  next();\n}\n\nserver.get('/*', (req, res) => {\n  const { errorHandler } = res.locals;\n\n  const api = new Api(req);\n\n  const browserdetect = detect(req.headers['user-agent']);\n\n  const lang = new locale.Locales(\n    req.universalCookies.get('I18N_LANGUAGE') ||\n      config.settings.defaultLanguage ||\n      req.headers['accept-language'],\n  )\n    .best(supported)\n    .toString();\n\n  const authToken = req.universalCookies.get('auth_token');\n  const initialState = {\n    userSession: { ...userSession(), token: authToken },\n    form: req.body,\n    intl: {\n      defaultLocale: 'en',\n      locale: lang,\n      messages: locales[lang],\n    },\n    browserdetect,\n  };\n\n  const history = createMemoryHistory({\n    initialEntries: [req.url],\n  });\n\n  // Create a new Redux store instance\n  const store = configureStore(initialState, history, api);\n\n  persistAuthToken(store, req);\n\n  // @loadable/server extractor\n  const buildDir = process.env.BUILD_DIR || 'build';\n  const extractor = new ChunkExtractor({\n    statsFile: path.resolve(path.join(buildDir, 'loadable-stats.json')),\n    entrypoints: ['client'],\n  });\n\n  const url = req.originalUrl || req.url;\n  const location = parseUrl(url);\n\n  loadOnServer({ store, location, routes, api })\n    .then(() => {\n      // The content info is in the store at this point thanks to the asynconnect\n      // features, then we can force the current language info into the store when\n      // coming from an SSR request\n      const contentLang =\n        store.getState().content.data?.language?.token ||\n        config.settings.defaultLanguage;\n\n      const cookie_lang =\n        req.universalCookies.get('I18N_LANGUAGE') ||\n        config.settings.defaultLanguage ||\n        req.headers['accept-language'];\n\n      if (cookie_lang !== contentLang) {\n        const newLocale = toLangUnderscoreRegion(\n          new locale.Locales(contentLang).best(supported).toString(),\n        );\n        store.dispatch(changeLanguage(newLocale, locales[newLocale], req));\n      }\n\n      const context = {};\n      resetServerContext();\n      const markup = renderToString(\n        <ChunkExtractorManager extractor={extractor}>\n          <CookiesProvider cookies={req.universalCookies}>\n            <Provider store={store} onError={reactIntlErrorHandler}>\n              <StaticRouter context={context} location={req.url}>\n                <ReduxAsyncConnect routes={routes} helpers={api} />\n              </StaticRouter>\n            </Provider>\n          </CookiesProvider>\n        </ChunkExtractorManager>,\n      );\n\n      const readCriticalCss =\n        config.settings.serverConfig.readCriticalCss || defaultReadCriticalCss;\n\n      if (context.url) {\n        res.redirect(flattenToAppURL(context.url));\n      } else if (context.error_code) {\n        res.set({\n          'Cache-Control': 'no-cache',\n        });\n\n        res.status(context.error_code).send(\n          `<!doctype html>\n              ${renderToString(\n                <Html\n                  extractor={extractor}\n                  markup={markup}\n                  store={store}\n                  extractScripts={\n                    config.settings.serverConfig.extractScripts?.errorPages ||\n                    process.env.NODE_ENV !== 'production'\n                  }\n                  criticalCss={readCriticalCss(req)}\n                  apiPath={res.locals.detectedHost || config.settings.apiPath}\n                  publicURL={\n                    res.locals.detectedHost || config.settings.publicURL\n                  }\n                />,\n              )}\n            `,\n        );\n      } else {\n        res.status(200).send(\n          `<!doctype html>\n              ${renderToString(\n                <Html\n                  extractor={extractor}\n                  markup={markup}\n                  store={store}\n                  criticalCss={readCriticalCss(req)}\n                  apiPath={res.locals.detectedHost || config.settings.apiPath}\n                  publicURL={\n                    res.locals.detectedHost || config.settings.publicURL\n                  }\n                />,\n              )}\n            `,\n        );\n      }\n    }, errorHandler)\n    .catch(errorHandler);\n});\n\nexport const defaultReadCriticalCss = () => {\n  const { criticalCssPath } = config.settings.serverConfig;\n\n  const e = existsSync(criticalCssPath);\n  if (!e) return;\n\n  const f = lstatSync(criticalCssPath);\n  if (!f.isFile()) return;\n\n  return readFileSync(criticalCssPath, { encoding: 'utf-8' });\n};\n\n// Exposed for the console bootstrap info messages\nserver.apiPath = config.settings.apiPath;\nserver.devProxyToApiPath = config.settings.devProxyToApiPath;\nserver.publicURL = config.settings.publicURL;\n\nexport default server;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}