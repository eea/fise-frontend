{"ast":null,"code":"import _extends from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/extends.js\";\nimport _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _isEmpty from \"lodash/isEmpty\";\nimport _isEqual from \"lodash/isEqual\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-slate-footnote/src/editor/FootnoteEditor.jsx\",\n  _this = this,\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ReactEditor } from 'slate-react';\nimport { setPluginOptions } from '@plone/volto-slate/actions';\nimport { Icon as VoltoIcon, InlineForm } from '@plone/volto/components';\nimport briefcaseSVG from '@plone/volto/icons/briefcase.svg';\nimport checkSVG from '@plone/volto/icons/check.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport { Node } from 'slate';\nimport { getAllBlocksAndSlateFields } from '@eeacms/volto-slate-footnote/editor/utils';\nimport config from '@plone/volto/registry';\nvar FootnoteEditor = function FootnoteEditor(props) {\n  _s();\n  var editor = props.editor,\n    schemaProvider = props.schemaProvider,\n    pluginId = props.pluginId,\n    getActiveElement = props.getActiveElement,\n    isActiveElement = props.isActiveElement,\n    insertElement = props.insertElement,\n    unwrapElement = props.unwrapElement,\n    hasValue = props.hasValue,\n    onChangeValues = props.onChangeValues;\n  var dispatch = useDispatch();\n  var pid = \"\".concat(editor.uid, \"-\").concat(pluginId);\n  var _React$useState = React.useState({}),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    formData = _React$useState2[0],\n    setFormData = _React$useState2[1];\n  var active = getActiveElement(editor);\n  var initialFormData = useSelector(function (state) {\n    var _state$content;\n    return (state === null || state === void 0 ? void 0 : (_state$content = state.content) === null || _state$content === void 0 ? void 0 : _state$content.data) || {};\n  });\n  if (!active) {\n    /* eslint no-console: 0 */\n    console.error('Active element not found, this will crash');\n  }\n  var _active = _slicedToArray(active, 1),\n    elementNode = _active[0];\n  var isElement = isActiveElement(editor);\n  var blockProps = editor !== null && editor !== void 0 && editor.getBlockProps ? editor.getBlockProps() : {};\n  var metadata = blockProps.metadata || blockProps.properties || {};\n  var metadataBlocks = getAllBlocksAndSlateFields(metadata);\n  var storeBlocks = getAllBlocksAndSlateFields(initialFormData);\n  var uniqueFootnoteBlocks = [];\n  var flatAllBlocks = _isEmpty(metadata) ? storeBlocks : metadataBlocks;\n  /**\n   * Will add only the items that are unique by text\n   * @param {Object[]} uniqueFootnoteBlocks\n   * @param {Object} itemToManage\n   */\n  var manageAddBlockToUniqueBlocks = function manageAddBlockToUniqueBlocks(uniqueFootnoteBlocks, itemToManage) {\n    if (!uniqueFootnoteBlocks.find(function (item) {\n      return item.title === itemToManage.footnote;\n    })) {\n      uniqueFootnoteBlocks.push(_objectSpread(_objectSpread({}, itemToManage), {}, {\n        title: itemToManage.footnote || itemToManage.value,\n        label: itemToManage.footnote || itemToManage.value,\n        value: itemToManage.footnote || itemToManage.value\n      }));\n    }\n  };\n  // make a list of filtered footnotes that have unique title\n  // to be used as choices for the multi search widget\n  // add label and value for the multi search widget\n  // flatten blocks to add all extra in the list\n  flatAllBlocks.filter(function (b) {\n    return b['@type'] in config.settings.blocksWithFootnotesSupport;\n  }).forEach(function (element) {\n    var mapping = config.settings.blocksWithFootnotesSupport[element['@type']] || ['value'];\n    mapping.forEach(function (key) {\n      var value = element[key];\n      if (!value) return;\n      value.forEach(function (item) {\n        Array.from(Node.elements(item)).forEach(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 1),\n            block = _ref2[0];\n          block.children.forEach(function (node) {\n            if (node.data && node.type === 'footnote') {\n              manageAddBlockToUniqueBlocks(uniqueFootnoteBlocks, node.data);\n              (node.data.extra || []).forEach(function (ftitem) {\n                manageAddBlockToUniqueBlocks(uniqueFootnoteBlocks, ftitem);\n              });\n            }\n          });\n        });\n      });\n    });\n  });\n\n  // Update the form data based on the current element\n  var elRef = React.useRef(null);\n\n  // add label and value for the multi search widget to be able to show/filter current data\n  if (isElement && !_isEqual(elementNode, elRef.current)) {\n    elRef.current = elementNode;\n    setFormData({\n      footnote: _objectSpread(_objectSpread({}, elementNode.data), {}, {\n        label: elementNode.data.footnote,\n        value: elementNode.data.footnote\n      })\n    });\n  } else if (!isElement) {\n    elRef.current = null;\n  }\n  useEffect(function () {\n    if (isElement) {\n      elRef.current = elementNode;\n      setFormData({\n        footnote: _objectSpread(_objectSpread({}, elementNode.data), {}, {\n          label: elementNode.data.footnote,\n          value: elementNode.data.footnote\n        })\n      });\n    } else if (!isElement) {\n      elRef.current = null;\n    }\n  }, [isElement, elRef, elementNode]); // eslint-disable-line\n\n  var saveDataToEditor = React.useCallback(function (formData) {\n    if (hasValue(formData.footnote)) {\n      insertElement(editor, formData.footnote);\n    } else {\n      unwrapElement(editor);\n    }\n  }, [editor, insertElement, unwrapElement, hasValue]);\n  var checkForCancel = function checkForCancel() {\n    if (!hasValue(elementNode.data)) {\n      unwrapElement(editor);\n    }\n  };\n  var SchemaProvider = schemaProvider;\n  return __jsx(SchemaProvider, _extends({}, props, {\n    data: formData,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 5\n    }\n  }), function (schema) {\n    var schemaWithUpdatedChoices = _objectSpread(_objectSpread({}, schema), {}, {\n      properties: _objectSpread(_objectSpread({}, schema.properties), {}, {\n        footnote: _objectSpread(_objectSpread({}, schema.properties.footnote), {}, {\n          choices: uniqueFootnoteBlocks\n        })\n      })\n    });\n    return __jsx(InlineForm, {\n      schema: schemaWithUpdatedChoices,\n      title: schema.title,\n      icon: __jsx(VoltoIcon, {\n        size: \"24px\",\n        name: briefcaseSVG,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 19\n        }\n      }),\n      onChangeField: function onChangeField(value) {\n        if (!onChangeValues) {\n          return setFormData(value);\n        }\n        return onChangeValues('footnote', value, formData, setFormData);\n      },\n      formData: formData,\n      dataBoss: formData,\n      source: uniqueFootnoteBlocks,\n      headerActions: __jsx(React.Fragment, null, __jsx(\"button\", {\n        onClick: function onClick() {\n          saveDataToEditor(formData);\n          dispatch(setPluginOptions(pid, {\n            show_sidebar_editor: false\n          }));\n          ReactEditor.focus(editor);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 17\n        }\n      }, __jsx(VoltoIcon, {\n        size: \"24px\",\n        name: checkSVG,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 19\n        }\n      })), __jsx(\"button\", {\n        onClick: function onClick() {\n          checkForCancel();\n          dispatch(setPluginOptions(pid, {\n            show_sidebar_editor: false\n          }));\n          setFormData({});\n          ReactEditor.focus(editor);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 17\n        }\n      }, __jsx(VoltoIcon, {\n        size: \"24px\",\n        name: clearSVG,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 19\n        }\n      }))),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }\n    });\n  });\n};\n_s(FootnoteEditor, \"10BltT49xvAE4d4xFoml1OAKBPE=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = FootnoteEditor;\nexport default FootnoteEditor;\nvar _c;\n$RefreshReg$(_c, \"FootnoteEditor\");","map":{"version":3,"names":["React","useEffect","useDispatch","useSelector","ReactEditor","setPluginOptions","Icon","VoltoIcon","InlineForm","briefcaseSVG","checkSVG","clearSVG","Node","getAllBlocksAndSlateFields","config","FootnoteEditor","props","editor","schemaProvider","pluginId","getActiveElement","isActiveElement","insertElement","unwrapElement","hasValue","onChangeValues","dispatch","pid","uid","useState","formData","setFormData","active","initialFormData","state","content","data","console","error","elementNode","isElement","blockProps","getBlockProps","metadata","properties","metadataBlocks","storeBlocks","uniqueFootnoteBlocks","flatAllBlocks","manageAddBlockToUniqueBlocks","itemToManage","find","item","title","footnote","push","value","label","filter","b","settings","blocksWithFootnotesSupport","forEach","element","mapping","key","Array","from","elements","block","children","node","type","extra","ftitem","elRef","useRef","current","saveDataToEditor","useCallback","checkForCancel","SchemaProvider","schema","schemaWithUpdatedChoices","choices","show_sidebar_editor","focus"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-slate-footnote/src/editor/FootnoteEditor.jsx"],"sourcesContent":["import { isEqual, isEmpty } from 'lodash';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ReactEditor } from 'slate-react';\nimport { setPluginOptions } from '@plone/volto-slate/actions';\nimport { Icon as VoltoIcon, InlineForm } from '@plone/volto/components';\nimport briefcaseSVG from '@plone/volto/icons/briefcase.svg';\nimport checkSVG from '@plone/volto/icons/check.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport { Node } from 'slate';\nimport { getAllBlocksAndSlateFields } from '@eeacms/volto-slate-footnote/editor/utils';\nimport config from '@plone/volto/registry';\n\nconst FootnoteEditor = (props) => {\n  const {\n    editor,\n    schemaProvider,\n    pluginId,\n    getActiveElement,\n    isActiveElement,\n    insertElement,\n    unwrapElement,\n    hasValue,\n    onChangeValues,\n  } = props;\n  const dispatch = useDispatch();\n  const pid = `${editor.uid}-${pluginId}`;\n  const [formData, setFormData] = React.useState({});\n  const active = getActiveElement(editor);\n  const initialFormData = useSelector((state) => state?.content?.data || {});\n\n  if (!active) {\n    /* eslint no-console: 0 */\n    console.error('Active element not found, this will crash');\n  }\n  const [elementNode] = active;\n  const isElement = isActiveElement(editor);\n\n  const blockProps = editor?.getBlockProps ? editor.getBlockProps() : {};\n  const metadata = blockProps.metadata || blockProps.properties || {};\n  const metadataBlocks = getAllBlocksAndSlateFields(metadata);\n  const storeBlocks = getAllBlocksAndSlateFields(initialFormData);\n  const uniqueFootnoteBlocks = [];\n\n  const flatAllBlocks = isEmpty(metadata) ? storeBlocks : metadataBlocks;\n  /**\n   * Will add only the items that are unique by text\n   * @param {Object[]} uniqueFootnoteBlocks\n   * @param {Object} itemToManage\n   */\n  const manageAddBlockToUniqueBlocks = (uniqueFootnoteBlocks, itemToManage) => {\n    if (\n      !uniqueFootnoteBlocks.find((item) => item.title === itemToManage.footnote)\n    ) {\n      uniqueFootnoteBlocks.push({\n        ...itemToManage,\n        title: itemToManage.footnote || itemToManage.value,\n        label: itemToManage.footnote || itemToManage.value,\n        value: itemToManage.footnote || itemToManage.value,\n      });\n    }\n  };\n  // make a list of filtered footnotes that have unique title\n  // to be used as choices for the multi search widget\n  // add label and value for the multi search widget\n  // flatten blocks to add all extra in the list\n  flatAllBlocks\n    .filter((b) => b['@type'] in config.settings.blocksWithFootnotesSupport)\n    .forEach((element) => {\n      const mapping = config.settings.blocksWithFootnotesSupport[\n        element['@type']\n      ] || ['value'];\n\n      mapping.forEach((key) => {\n        const value = element[key];\n        if (!value) return;\n\n        value.forEach((item) => {\n          Array.from(Node.elements(item)).forEach(([block]) => {\n            block.children.forEach((node) => {\n              if (node.data && node.type === 'footnote') {\n                manageAddBlockToUniqueBlocks(uniqueFootnoteBlocks, node.data);\n                (node.data.extra || []).forEach((ftitem) => {\n                  manageAddBlockToUniqueBlocks(uniqueFootnoteBlocks, ftitem);\n                });\n              }\n            });\n          });\n        });\n      });\n    });\n\n  // Update the form data based on the current element\n  const elRef = React.useRef(null);\n\n  // add label and value for the multi search widget to be able to show/filter current data\n  if (isElement && !isEqual(elementNode, elRef.current)) {\n    elRef.current = elementNode;\n    setFormData({\n      footnote: {\n        ...elementNode.data,\n        label: elementNode.data.footnote,\n        value: elementNode.data.footnote,\n      },\n    });\n  } else if (!isElement) {\n    elRef.current = null;\n  }\n\n  useEffect(() => {\n    if (isElement) {\n      elRef.current = elementNode;\n      setFormData({\n        footnote: {\n          ...elementNode.data,\n          label: elementNode.data.footnote,\n          value: elementNode.data.footnote,\n        },\n      });\n    } else if (!isElement) {\n      elRef.current = null;\n    }\n  }, [isElement, elRef, elementNode]); // eslint-disable-line\n\n  const saveDataToEditor = React.useCallback(\n    (formData) => {\n      if (hasValue(formData.footnote)) {\n        insertElement(editor, formData.footnote);\n      } else {\n        unwrapElement(editor);\n      }\n    },\n    [editor, insertElement, unwrapElement, hasValue],\n  );\n\n  const checkForCancel = () => {\n    if (!hasValue(elementNode.data)) {\n      unwrapElement(editor);\n    }\n  };\n\n  const SchemaProvider = schemaProvider;\n  return (\n    <SchemaProvider {...props} data={formData}>\n      {(schema) => {\n        const schemaWithUpdatedChoices = {\n          ...schema,\n          properties: {\n            ...schema.properties,\n            footnote: {\n              ...schema.properties.footnote,\n              choices: uniqueFootnoteBlocks,\n            },\n          },\n        };\n\n        return (\n          <InlineForm\n            schema={schemaWithUpdatedChoices}\n            title={schema.title}\n            icon={<VoltoIcon size=\"24px\" name={briefcaseSVG} />}\n            onChangeField={(value) => {\n              if (!onChangeValues) {\n                return setFormData(value);\n              }\n              return onChangeValues('footnote', value, formData, setFormData);\n            }}\n            formData={formData}\n            dataBoss={formData}\n            source={uniqueFootnoteBlocks}\n            headerActions={\n              <>\n                <button\n                  onClick={() => {\n                    saveDataToEditor(formData);\n                    dispatch(\n                      setPluginOptions(pid, {\n                        show_sidebar_editor: false,\n                      }),\n                    );\n                    ReactEditor.focus(editor);\n                  }}\n                >\n                  <VoltoIcon size=\"24px\" name={checkSVG} />\n                </button>\n                <button\n                  onClick={() => {\n                    checkForCancel();\n                    dispatch(\n                      setPluginOptions(pid, {\n                        show_sidebar_editor: false,\n                      }),\n                    );\n                    setFormData({});\n                    ReactEditor.focus(editor);\n                  }}\n                >\n                  <VoltoIcon size=\"24px\" name={clearSVG} />\n                </button>\n              </>\n            }\n          />\n        );\n      }}\n    </SchemaProvider>\n  );\n};\n\nexport default FootnoteEditor;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}