{"ast":null,"code":"/* eslint no-console: [\"error\", { allow: [\"warn\", \"log\"] }] */\nexport const updateSystemInfo = config => {\n  var fetch = require('node-fetch');\n  const internalApi = config.settings.internalApiPath || config.settings.devProxyToApiPath;\n  const version = config.settings.frontendVersion;\n\n  // Nothing to do\n  if (!version || !internalApi) {\n    return config;\n  }\n\n  // Backend @system update via PATCH is allowed only via internal API\n  if (!(internalApi.startsWith('http://localhost') || internalApi.startsWith('http://backend'))) {\n    return config;\n  }\n\n  // Persist FRONTEND_VERSION on backend registry\n  const url = `${internalApi}/@system`;\n  fetch(url, {\n    method: 'PATCH',\n    body: JSON.stringify({\n      'eea.kitkat.interfaces.IEEAVersionsFrontend.version': version\n    }),\n    headers: {\n      Accept: 'application/json'\n    }\n  }).then(response => response.text()).then(text => {\n    if (text) {\n      console.log(`Updating FRONTEND_VERSION on backend registry: ${text}`);\n    } else {\n      console.log(`FRONTEND_VERSION already up-to-date on backend registry: ${version}`);\n    }\n  }).catch(err => console.warn(`Could NOT update FRONTEND_VERSION on backend: ${err}`));\n  return config;\n};","map":{"version":3,"names":["updateSystemInfo","config","fetch","require","internalApi","settings","internalApiPath","devProxyToApiPath","version","frontendVersion","startsWith","url","method","body","JSON","stringify","headers","Accept","then","response","text","console","log","catch","err","warn"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-eea-kitkat/src/system.js"],"sourcesContent":["/* eslint no-console: [\"error\", { allow: [\"warn\", \"log\"] }] */\nexport const updateSystemInfo = (config) => {\n  var fetch = require('node-fetch');\n  const internalApi =\n    config.settings.internalApiPath || config.settings.devProxyToApiPath;\n  const version = config.settings.frontendVersion;\n\n  // Nothing to do\n  if (!version || !internalApi) {\n    return config;\n  }\n\n  // Backend @system update via PATCH is allowed only via internal API\n  if (\n    !(\n      internalApi.startsWith('http://localhost') ||\n      internalApi.startsWith('http://backend')\n    )\n  ) {\n    return config;\n  }\n\n  // Persist FRONTEND_VERSION on backend registry\n  const url = `${internalApi}/@system`;\n  fetch(url, {\n    method: 'PATCH',\n    body: JSON.stringify({\n      'eea.kitkat.interfaces.IEEAVersionsFrontend.version': version,\n    }),\n    headers: {\n      Accept: 'application/json',\n    },\n  })\n    .then((response) => response.text())\n    .then((text) => {\n      if (text) {\n        console.log(`Updating FRONTEND_VERSION on backend registry: ${text}`);\n      } else {\n        console.log(\n          `FRONTEND_VERSION already up-to-date on backend registry: ${version}`,\n        );\n      }\n    })\n    .catch((err) =>\n      console.warn(`Could NOT update FRONTEND_VERSION on backend: ${err}`),\n    );\n\n  return config;\n};\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,gBAAgB,GAAIC,MAAM,IAAK;EAC1C,IAAIC,KAAK,GAAGC,OAAO,CAAC,YAAY,CAAC;EACjC,MAAMC,WAAW,GACfH,MAAM,CAACI,QAAQ,CAACC,eAAe,IAAIL,MAAM,CAACI,QAAQ,CAACE,iBAAiB;EACtE,MAAMC,OAAO,GAAGP,MAAM,CAACI,QAAQ,CAACI,eAAe;;EAE/C;EACA,IAAI,CAACD,OAAO,IAAI,CAACJ,WAAW,EAAE;IAC5B,OAAOH,MAAM;EACf;;EAEA;EACA,IACE,EACEG,WAAW,CAACM,UAAU,CAAC,kBAAkB,CAAC,IAC1CN,WAAW,CAACM,UAAU,CAAC,gBAAgB,CAAC,CACzC,EACD;IACA,OAAOT,MAAM;EACf;;EAEA;EACA,MAAMU,GAAG,GAAI,GAAEP,WAAY,UAAS;EACpCF,KAAK,CAACS,GAAG,EAAE;IACTC,MAAM,EAAE,OAAO;IACfC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MACnB,oDAAoD,EAAEP;IACxD,CAAC,CAAC;IACFQ,OAAO,EAAE;MACPC,MAAM,EAAE;IACV;EACF,CAAC,CAAC,CACCC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACnCF,IAAI,CAAEE,IAAI,IAAK;IACd,IAAIA,IAAI,EAAE;MACRC,OAAO,CAACC,GAAG,CAAE,kDAAiDF,IAAK,EAAC,CAAC;IACvE,CAAC,MAAM;MACLC,OAAO,CAACC,GAAG,CACR,4DAA2Dd,OAAQ,EAAC,CACtE;IACH;EACF,CAAC,CAAC,CACDe,KAAK,CAAEC,GAAG,IACTH,OAAO,CAACI,IAAI,CAAE,iDAAgDD,GAAI,EAAC,CAAC,CACrE;EAEH,OAAOvB,MAAM;AACf,CAAC"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}