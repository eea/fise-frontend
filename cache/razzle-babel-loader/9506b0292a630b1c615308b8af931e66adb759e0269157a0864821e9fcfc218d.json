{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-slate-footnote/src/Blocks/Footnote/FootnotesBlockView.jsx\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport { openAccordionIfContainsFootnoteReference, getAllBlocksAndSlateFields, makeFootnoteListOfUniqueItems, makeFootnote } from '@eeacms/volto-slate-footnote/editor/utils';\nimport './less/public.less';\nconst alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\n/**\n * @summary The React component that displays the list of footnotes inserted\n * before in the current page.\n * Will show an indice for the footnote/citation but also numbers to indicate each\n * text that has same reference\n * @param {Object} props Contains the properties `data` and `properties` as\n * received from the Volto form.\n */\nconst FootnotesBlockView = props => {\n  const {\n    data,\n    properties\n  } = props;\n  const {\n    title,\n    global,\n    placeholder = 'Footnotes'\n  } = data;\n  const {\n    0: notesObj,\n    1: setNodesObjs\n  } = useState(null);\n  const metadata = props.metadata ? props.metadata : properties;\n  useEffect(() => {\n    if (properties) {\n      const globalMetadata = global ? metadata : properties;\n      const blocks = getAllBlocksAndSlateFields(globalMetadata);\n      const notesObjResult = makeFootnoteListOfUniqueItems(blocks);\n      setNodesObjs(notesObjResult);\n    }\n  }, [properties]); // eslint-disable-line\n\n  return __jsx(\"div\", {\n    className: \"footnotes-listing-block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }, __jsx(\"h3\", {\n    title: placeholder,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }\n  }, title), notesObj && __jsx(\"ol\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, Object.keys(notesObj).map(noteId => {\n    const note = notesObj[noteId];\n    const {\n      uid,\n      footnote,\n      zoteroId,\n      parentUid\n    } = note;\n    const {\n      refs\n    } = note;\n    const refsList = refs ? Object.keys(refs) : null;\n    return __jsx(\"li\", {\n      key: `footnote-${zoteroId || uid}`,\n      id: `footnote-${zoteroId || uid}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 15\n      }\n    }, __jsx(\"div\", {\n      dangerouslySetInnerHTML: {\n        __html: makeFootnote(footnote)\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }\n    }), refsList ? __jsx(React.Fragment, null, __jsx(\"sup\", {\n      id: `cite_ref-${refsList[0]}`,\n      key: `indice-${refsList[0]}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }\n    }, __jsx(\"a\", {\n      href: `#ref-${parentUid || uid}`,\n      \"aria-label\": \"Back to content\",\n      onClick: () => openAccordionIfContainsFootnoteReference(`#ref-${parentUid || uid}`),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 23\n      }\n    }, alphabet[0]), ' '), refsList.slice(1).map((ref, index) => __jsx(\"sup\", {\n      id: `cite_ref-${ref}`,\n      key: `indice-${ref}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 23\n      }\n    }, __jsx(\"a\", {\n      href: `#ref-${ref}`,\n      \"aria-label\": \"Back to content\",\n      onClick: () => openAccordionIfContainsFootnoteReference(`#ref-${ref}`),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 25\n      }\n    }, alphabet[index + 1]), ' '))) : __jsx(\"sup\", {\n      id: `cite_ref-${uid}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 19\n      }\n    }, __jsx(\"a\", {\n      href: `#ref-${parentUid || uid}`,\n      \"aria-label\": \"Back to content\",\n      onClick: () => openAccordionIfContainsFootnoteReference(`#ref-${parentUid || uid}`),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 21\n      }\n    }, \"\\u21B5\"), ' '));\n  })));\n};\nexport default FootnotesBlockView;","map":{"version":3,"names":["React","useEffect","useState","openAccordionIfContainsFootnoteReference","getAllBlocksAndSlateFields","makeFootnoteListOfUniqueItems","makeFootnote","alphabet","FootnotesBlockView","props","data","properties","title","global","placeholder","notesObj","setNodesObjs","metadata","globalMetadata","blocks","notesObjResult","Object","keys","map","noteId","note","uid","footnote","zoteroId","parentUid","refs","refsList","__html","slice","ref","index"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-slate-footnote/src/Blocks/Footnote/FootnotesBlockView.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport {\n  openAccordionIfContainsFootnoteReference,\n  getAllBlocksAndSlateFields,\n  makeFootnoteListOfUniqueItems,\n  makeFootnote,\n} from '@eeacms/volto-slate-footnote/editor/utils';\nimport './less/public.less';\n\nconst alphabet = 'abcdefghijklmnopqrstuvwxyz';\n\n/**\n * @summary The React component that displays the list of footnotes inserted\n * before in the current page.\n * Will show an indice for the footnote/citation but also numbers to indicate each\n * text that has same reference\n * @param {Object} props Contains the properties `data` and `properties` as\n * received from the Volto form.\n */\nconst FootnotesBlockView = (props) => {\n  const { data, properties } = props;\n  const { title, global, placeholder = 'Footnotes' } = data;\n  const [notesObj, setNodesObjs] = useState(null);\n  const metadata = props.metadata ? props.metadata : properties;\n\n  useEffect(() => {\n    if (properties) {\n      const globalMetadata = global ? metadata : properties;\n      const blocks = getAllBlocksAndSlateFields(globalMetadata);\n      const notesObjResult = makeFootnoteListOfUniqueItems(blocks);\n\n      setNodesObjs(notesObjResult);\n    }\n  }, [properties]); // eslint-disable-line\n\n  return (\n    <div className=\"footnotes-listing-block\">\n      <h3 title={placeholder}>{title}</h3>\n      {notesObj && (\n        <ol>\n          {Object.keys(notesObj).map((noteId) => {\n            const note = notesObj[noteId];\n            const { uid, footnote, zoteroId, parentUid } = note;\n            const { refs } = note;\n            const refsList = refs ? Object.keys(refs) : null;\n\n            return (\n              <li\n                key={`footnote-${zoteroId || uid}`}\n                id={`footnote-${zoteroId || uid}`}\n              >\n                <div\n                  dangerouslySetInnerHTML={{\n                    __html: makeFootnote(footnote),\n                  }}\n                />\n                {refsList ? (\n                  <>\n                    {/** some footnotes are never parent so we need the parent to reference */}\n                    {/** in this case the first from refs has reference to the parent*/}\n                    <sup\n                      id={`cite_ref-${refsList[0]}`}\n                      key={`indice-${refsList[0]}`}\n                    >\n                      <a\n                        href={`#ref-${parentUid || uid}`}\n                        aria-label=\"Back to content\"\n                        onClick={() =>\n                          openAccordionIfContainsFootnoteReference(\n                            `#ref-${parentUid || uid}`,\n                          )\n                        }\n                      >\n                        {alphabet[0]}\n                      </a>{' '}\n                    </sup>\n                    {/** following refs will have the uid of the one that references it*/}\n                    {refsList.slice(1).map((ref, index) => (\n                      <sup id={`cite_ref-${ref}`} key={`indice-${ref}`}>\n                        <a\n                          href={`#ref-${ref}`}\n                          aria-label=\"Back to content\"\n                          onClick={() =>\n                            openAccordionIfContainsFootnoteReference(\n                              `#ref-${ref}`,\n                            )\n                          }\n                        >\n                          {alphabet[index + 1]}\n                        </a>{' '}\n                      </sup>\n                    ))}\n                  </>\n                ) : (\n                  <sup id={`cite_ref-${uid}`}>\n                    {/** some footnotes are never parent so we need the parent to reference */}\n                    <a\n                      href={`#ref-${parentUid || uid}`}\n                      aria-label=\"Back to content\"\n                      onClick={() =>\n                        openAccordionIfContainsFootnoteReference(\n                          `#ref-${parentUid || uid}`,\n                        )\n                      }\n                    >\n                      â†µ\n                    </a>{' '}\n                  </sup>\n                )}\n              </li>\n            );\n          })}\n        </ol>\n      )}\n    </div>\n  );\n};\n\nexport default FootnotesBlockView;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}