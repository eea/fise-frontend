{"ast":null,"code":"/**\n * Comments actions.\n * @module actions/comments/comments\n */\n\nimport { ADD_COMMENT, DELETE_COMMENT, LIST_COMMENTS, LIST_MORE_COMMENTS, UPDATE_COMMENT } from '@plone/volto/constants/ActionTypes';\n\n/**\n * Add comment function.\n * @function addComment\n * @param {string} url Content url.\n * @param {string} text Body of the comment.\n * @returns {Object} Add comment action.\n */\nexport function addComment(url, text, commentId) {\n  const path = commentId ? `${url}/@comments/${commentId}` : `${url}/@comments`;\n  return {\n    type: ADD_COMMENT,\n    request: {\n      op: 'post',\n      path,\n      data: {\n        text\n      }\n    }\n  };\n}\n\n/**\n * List comments function\n * @function listComments\n * @param {string} url Content url\n * @returns {Object} List comment action\n */\nexport function listComments(url) {\n  return {\n    type: LIST_COMMENTS,\n    request: {\n      op: 'get',\n      path: `${url}/@comments`\n    }\n  };\n}\nexport function listMoreComments(url) {\n  return {\n    type: LIST_MORE_COMMENTS,\n    request: {\n      op: 'get',\n      path: `${url}`\n    }\n  };\n}\n\n/**\n * Delete comment function.\n * @function deleteComment\n * @param {string} url Content url.\n * @returns {Object} Delete comment action.\n */\nexport function deleteComment(url) {\n  return {\n    type: DELETE_COMMENT,\n    request: {\n      op: 'del',\n      path: url\n    }\n  };\n}\n\n/**\n * Update comment function.\n * @function updateComment\n * @param {string} url Content url(s).\n * @param {string} text Body of the comment.\n * @returns {Object} Update content action.\n */\nexport function updateComment(url, text) {\n  return {\n    type: UPDATE_COMMENT,\n    request: {\n      op: 'patch',\n      path: url,\n      data: {\n        text\n      }\n    }\n  };\n}","map":{"version":3,"names":["ADD_COMMENT","DELETE_COMMENT","LIST_COMMENTS","LIST_MORE_COMMENTS","UPDATE_COMMENT","addComment","url","text","commentId","path","type","request","op","data","listComments","listMoreComments","deleteComment","updateComment"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/actions/comments/comments.js"],"sourcesContent":["/**\n * Comments actions.\n * @module actions/comments/comments\n */\n\nimport {\n  ADD_COMMENT,\n  DELETE_COMMENT,\n  LIST_COMMENTS,\n  LIST_MORE_COMMENTS,\n  UPDATE_COMMENT,\n} from '@plone/volto/constants/ActionTypes';\n\n/**\n * Add comment function.\n * @function addComment\n * @param {string} url Content url.\n * @param {string} text Body of the comment.\n * @returns {Object} Add comment action.\n */\nexport function addComment(url, text, commentId) {\n  const path = commentId ? `${url}/@comments/${commentId}` : `${url}/@comments`;\n\n  return {\n    type: ADD_COMMENT,\n    request: {\n      op: 'post',\n      path,\n      data: { text },\n    },\n  };\n}\n\n/**\n * List comments function\n * @function listComments\n * @param {string} url Content url\n * @returns {Object} List comment action\n */\nexport function listComments(url) {\n  return {\n    type: LIST_COMMENTS,\n    request: {\n      op: 'get',\n      path: `${url}/@comments`,\n    },\n  };\n}\n\nexport function listMoreComments(url) {\n  return {\n    type: LIST_MORE_COMMENTS,\n    request: {\n      op: 'get',\n      path: `${url}`,\n    },\n  };\n}\n\n/**\n * Delete comment function.\n * @function deleteComment\n * @param {string} url Content url.\n * @returns {Object} Delete comment action.\n */\nexport function deleteComment(url) {\n  return {\n    type: DELETE_COMMENT,\n    request: {\n      op: 'del',\n      path: url,\n    },\n  };\n}\n\n/**\n * Update comment function.\n * @function updateComment\n * @param {string} url Content url(s).\n * @param {string} text Body of the comment.\n * @returns {Object} Update content action.\n */\nexport function updateComment(url, text) {\n  return {\n    type: UPDATE_COMMENT,\n    request: {\n      op: 'patch',\n      path: url,\n      data: { text },\n    },\n  };\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,SACEA,WAAW,EACXC,cAAc,EACdC,aAAa,EACbC,kBAAkB,EAClBC,cAAc,QACT,oCAAoC;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,UAAU,CAACC,GAAG,EAAEC,IAAI,EAAEC,SAAS,EAAE;EAC/C,MAAMC,IAAI,GAAGD,SAAS,GAAI,GAAEF,GAAI,cAAaE,SAAU,EAAC,GAAI,GAAEF,GAAI,YAAW;EAE7E,OAAO;IACLI,IAAI,EAAEV,WAAW;IACjBW,OAAO,EAAE;MACPC,EAAE,EAAE,MAAM;MACVH,IAAI;MACJI,IAAI,EAAE;QAAEN;MAAK;IACf;EACF,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASO,YAAY,CAACR,GAAG,EAAE;EAChC,OAAO;IACLI,IAAI,EAAER,aAAa;IACnBS,OAAO,EAAE;MACPC,EAAE,EAAE,KAAK;MACTH,IAAI,EAAG,GAAEH,GAAI;IACf;EACF,CAAC;AACH;AAEA,OAAO,SAASS,gBAAgB,CAACT,GAAG,EAAE;EACpC,OAAO;IACLI,IAAI,EAAEP,kBAAkB;IACxBQ,OAAO,EAAE;MACPC,EAAE,EAAE,KAAK;MACTH,IAAI,EAAG,GAAEH,GAAI;IACf;EACF,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASU,aAAa,CAACV,GAAG,EAAE;EACjC,OAAO;IACLI,IAAI,EAAET,cAAc;IACpBU,OAAO,EAAE;MACPC,EAAE,EAAE,KAAK;MACTH,IAAI,EAAEH;IACR;EACF,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASW,aAAa,CAACX,GAAG,EAAEC,IAAI,EAAE;EACvC,OAAO;IACLG,IAAI,EAAEN,cAAc;IACpBO,OAAO,EAAE;MACPC,EAAE,EAAE,OAAO;MACXH,IAAI,EAAEH,GAAG;MACTO,IAAI,EAAE;QAAEN;MAAK;IACf;EACF,CAAC;AACH"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}