{"ast":null,"code":"import _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _map from \"lodash/map\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-forests-theme/src/customizations/volto/components/theme/View/DefaultView.jsx\",\n  _this = this;\nvar __jsx = React.createElement;\n/**\n * Document view component.\n * @module components/theme/View/DefaultView\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl } from 'react-intl'; // defineMessages,\nimport { Grid } from 'semantic-ui-react';\nimport { Container, Image } from 'semantic-ui-react';\nimport config from '@plone/volto/registry';\nimport { getBlocksFieldname, getBlocksLayoutFieldname, hasBlocksData, getBaseUrl } from '@plone/volto/helpers';\nimport renderPortletManager from '@eeacms/volto-addons-forest/Portlets/utils';\n\n// const messages = defineMessages({\n//   unknownBlock: {\n//     id: 'Unknown Block',\n//     defaultMessage: 'Unknown Block {block}',\n//   },\n// });\n\n/**\n * Component to display the default view.\n * @function DefaultView\n * @param {Object} content Content object.\n * @returns {string} Markup of the component.\n */\nvar DefaultView = function DefaultView(props) {\n  var content = props.content,\n    location = props.location;\n  var blocksFieldname = getBlocksFieldname(content);\n  var blocksLayoutFieldname = getBlocksLayoutFieldname(content);\n  return __jsx(Grid, {\n    columns: \"equal\",\n    className: \"zero-margin\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, renderPortletManager('plone.leftcolumn', 2, _objectSpread({}, props)), __jsx(Grid.Column, {\n    style: {\n      position: 'static'\n    },\n    tablet: 12,\n    largeScreen: 6,\n    widescreen: 6,\n    computer: 8,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }, hasBlocksData(content) ? __jsx(\"div\", {\n    id: \"page-document\",\n    className: \"ui container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }, _map(content[blocksLayoutFieldname].items, function (block) {\n    var _config$blocks$blocks, _content$blocksFieldn, _content$blocksFieldn2;\n    var Block = ((_config$blocks$blocks = config.blocks.blocksConfig[(_content$blocksFieldn = content[blocksFieldname]) === null || _content$blocksFieldn === void 0 ? void 0 : (_content$blocksFieldn2 = _content$blocksFieldn[block]) === null || _content$blocksFieldn2 === void 0 ? void 0 : _content$blocksFieldn2['@type']]) === null || _config$blocks$blocks === void 0 ? void 0 : _config$blocks$blocks['view']) || null;\n    return Block !== null && content[blocksFieldname][block]['@type'] !== 'title' ? __jsx(Block, {\n      key: block,\n      id: block,\n      properties: content,\n      data: content[blocksFieldname][block],\n      path: getBaseUrl((location === null || location === void 0 ? void 0 : location.pathname) || ''),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }\n    }) :\n    //   <div key={block}>\n    //     {intl.formatMessage(messages.unknownBlock, {\n    //       block: content[blocksFieldname]?.[block]?.['@type'],\n    //     })}\n    //   </div>\n    '';\n  }), __jsx(\"div\", {\n    id: \"forest-metadata-slot\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, '')) : __jsx(Container, {\n    id: \"page-document\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }, content.image && __jsx(Image, {\n    className: \"document-image\",\n    src: content.image.scales.thumb.download,\n    floated: \"right\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 15\n    }\n  }), content.remoteUrl && __jsx(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 15\n    }\n  }, \"The link address is:\", __jsx(\"a\", {\n    href: content.remoteUrl,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 17\n    }\n  }, content.remoteUrl)), content.text && __jsx(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: content.text.data.replace(/a href=\"([^\"]*\\.[^\"]*)\"/g, \"a href=\\\"\".concat(config.settings.apiPath, \"$1/download/file\\\"\"))\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 15\n    }\n  }), __jsx(\"div\", {\n    id: \"forest-metadata-slot\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }, ''))), renderPortletManager('plone.rightcolumn', 3, _objectSpread({}, props)));\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\n_c = DefaultView;\nDefaultView.propTypes = {\n  /**\n   * Content of the object\n   */\n  content: PropTypes.shape({\n    /**\n     * Title of the object\n     */\n    title: PropTypes.string,\n    /**\n     * Description of the object\n     */\n    description: PropTypes.string,\n    /**\n     * Text of the object\n     */\n    text: PropTypes.shape({\n      /**\n       * Data of the text of the object\n       */\n      data: PropTypes.string\n    })\n  }).isRequired\n};\nexport default _c2 = injectIntl(DefaultView);\nvar _c, _c2;\n$RefreshReg$(_c, \"DefaultView\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","PropTypes","injectIntl","Grid","Container","Image","config","getBlocksFieldname","getBlocksLayoutFieldname","hasBlocksData","getBaseUrl","renderPortletManager","DefaultView","props","content","location","blocksFieldname","blocksLayoutFieldname","position","items","block","Block","blocks","blocksConfig","pathname","image","scales","thumb","download","remoteUrl","text","__html","data","replace","settings","apiPath","propTypes","shape","title","string","description","isRequired"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-forests-theme/src/customizations/volto/components/theme/View/DefaultView.jsx"],"sourcesContent":["/**\n * Document view component.\n * @module components/theme/View/DefaultView\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl } from 'react-intl'; // defineMessages,\nimport { Grid } from 'semantic-ui-react';\n\nimport { Container, Image } from 'semantic-ui-react';\nimport { map } from 'lodash';\nimport config from '@plone/volto/registry';\n\nimport {\n  getBlocksFieldname,\n  getBlocksLayoutFieldname,\n  hasBlocksData,\n  getBaseUrl,\n} from '@plone/volto/helpers';\n\nimport renderPortletManager from '@eeacms/volto-addons-forest/Portlets/utils';\n\n// const messages = defineMessages({\n//   unknownBlock: {\n//     id: 'Unknown Block',\n//     defaultMessage: 'Unknown Block {block}',\n//   },\n// });\n\n/**\n * Component to display the default view.\n * @function DefaultView\n * @param {Object} content Content object.\n * @returns {string} Markup of the component.\n */\nconst DefaultView = (props) => {\n  const { content, location } = props;\n  const blocksFieldname = getBlocksFieldname(content);\n  const blocksLayoutFieldname = getBlocksLayoutFieldname(content);\n\n  return (\n    <Grid columns=\"equal\" className=\"zero-margin\">\n      {renderPortletManager('plone.leftcolumn', 2, { ...props })}\n      <Grid.Column\n        style={{ position: 'static' }}\n        tablet={12}\n        largeScreen={6}\n        widescreen={6}\n        computer={8}\n      >\n        {hasBlocksData(content) ? (\n          <div id=\"page-document\" className=\"ui container\">\n            {map(content[blocksLayoutFieldname].items, (block) => {\n              const Block =\n                config.blocks.blocksConfig[\n                  content[blocksFieldname]?.[block]?.['@type']\n                ]?.['view'] || null;\n              return Block !== null &&\n                content[blocksFieldname][block]['@type'] !== 'title' ? (\n                <Block\n                  key={block}\n                  id={block}\n                  properties={content}\n                  data={content[blocksFieldname][block]}\n                  path={getBaseUrl(location?.pathname || '')}\n                />\n              ) : (\n                //   <div key={block}>\n                //     {intl.formatMessage(messages.unknownBlock, {\n                //       block: content[blocksFieldname]?.[block]?.['@type'],\n                //     })}\n                //   </div>\n                ''\n              );\n            })}\n            <div id=\"forest-metadata-slot\">{''}</div>\n          </div>\n        ) : (\n          <Container id=\"page-document\">\n            {content.image && (\n              <Image\n                className=\"document-image\"\n                src={content.image.scales.thumb.download}\n                floated=\"right\"\n              />\n            )}\n            {content.remoteUrl && (\n              <span>\n                The link address is:\n                <a href={content.remoteUrl}>{content.remoteUrl}</a>\n              </span>\n            )}\n            {content.text && (\n              <div\n                dangerouslySetInnerHTML={{\n                  __html: content.text.data.replace(\n                    /a href=\"([^\"]*\\.[^\"]*)\"/g,\n                    `a href=\"${config.settings.apiPath}$1/download/file\"`,\n                  ),\n                }}\n              />\n            )}\n            <div id=\"forest-metadata-slot\">{''}</div>\n          </Container>\n        )}\n      </Grid.Column>\n\n      {renderPortletManager('plone.rightcolumn', 3, { ...props })}\n    </Grid>\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nDefaultView.propTypes = {\n  /**\n   * Content of the object\n   */\n  content: PropTypes.shape({\n    /**\n     * Title of the object\n     */\n    title: PropTypes.string,\n    /**\n     * Description of the object\n     */\n    description: PropTypes.string,\n    /**\n     * Text of the object\n     */\n    text: PropTypes.shape({\n      /**\n       * Data of the text of the object\n       */\n      data: PropTypes.string,\n    }),\n  }).isRequired,\n};\n\nexport default injectIntl(DefaultView);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}