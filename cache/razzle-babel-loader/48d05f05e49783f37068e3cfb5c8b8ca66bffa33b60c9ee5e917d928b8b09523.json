{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport React from 'react';\nimport cx from 'classnames';\nimport { buildStyleClassNamesFromData } from '@plone/volto/helpers';\nconst StyleWrapper = props => {\n  const {\n    children,\n    data = {}\n  } = props;\n  const styles = buildStyleClassNamesFromData(data.styles);\n  const rewrittenChildren = React.Children.map(children, child => {\n    if ( /*#__PURE__*/React.isValidElement(child)) {\n      const childProps = _objectSpread(_objectSpread({}, props), {}, {\n        className: cx([child.props.className, ...styles])\n      });\n      return /*#__PURE__*/React.cloneElement(child, childProps);\n    }\n    return child;\n  });\n  return rewrittenChildren;\n};\nexport default StyleWrapper;","map":{"version":3,"names":["React","cx","buildStyleClassNamesFromData","StyleWrapper","props","children","data","styles","rewrittenChildren","Children","map","child","isValidElement","childProps","className","cloneElement"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-forests-theme/src/customizations/volto/components/manage/Blocks/Block/StyleWrapper.jsx"],"sourcesContent":["import React from 'react';\nimport cx from 'classnames';\nimport { buildStyleClassNamesFromData } from '@plone/volto/helpers';\n\nconst StyleWrapper = (props) => {\n  const { children, data = {} } = props;\n  const styles = buildStyleClassNamesFromData(data.styles);\n  const rewrittenChildren = React.Children.map(children, (child) => {\n    if (React.isValidElement(child)) {\n      const childProps = {\n        ...props,\n        className: cx([child.props.className, ...styles]),\n      };\n      return React.cloneElement(child, childProps);\n    }\n    return child;\n  });\n\n  return rewrittenChildren;\n};\n\nexport default StyleWrapper;\n"],"mappings":";;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,EAAE,MAAM,YAAY;AAC3B,SAASC,4BAA4B,QAAQ,sBAAsB;AAEnE,MAAMC,YAAY,GAAIC,KAAK,IAAK;EAC9B,MAAM;IAAEC,QAAQ;IAAEC,IAAI,GAAG,CAAC;EAAE,CAAC,GAAGF,KAAK;EACrC,MAAMG,MAAM,GAAGL,4BAA4B,CAACI,IAAI,CAACC,MAAM,CAAC;EACxD,MAAMC,iBAAiB,GAAGR,KAAK,CAACS,QAAQ,CAACC,GAAG,CAACL,QAAQ,EAAGM,KAAK,IAAK;IAChE,kBAAIX,KAAK,CAACY,cAAc,CAACD,KAAK,CAAC,EAAE;MAC/B,MAAME,UAAU,mCACXT,KAAK;QACRU,SAAS,EAAEb,EAAE,CAAC,CAACU,KAAK,CAACP,KAAK,CAACU,SAAS,EAAE,GAAGP,MAAM,CAAC;MAAC,EAClD;MACD,oBAAOP,KAAK,CAACe,YAAY,CAACJ,KAAK,EAAEE,UAAU,CAAC;IAC9C;IACA,OAAOF,KAAK;EACd,CAAC,CAAC;EAEF,OAAOH,iBAAiB;AAC1B,CAAC;AAED,eAAeL,YAAY"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}