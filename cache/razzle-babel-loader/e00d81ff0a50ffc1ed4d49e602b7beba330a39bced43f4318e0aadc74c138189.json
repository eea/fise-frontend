{"ast":null,"code":"import { SIMPLELINK } from 'volto-slate/constants';\nimport { jsx } from 'slate-hyperscript';\nimport { deserialize } from 'volto-slate/editor/deserialize';\nexport const withSimpleLink = editor => {\n  // const { insertData, insertText, isInline } = editor;\n\n  const {\n    isInline\n  } = editor;\n  editor.isInline = element => {\n    return element && element.type === SIMPLELINK ? true : isInline(element);\n  };\n\n  // editor.insertText = (text) => {\n  //   if (text && isUrl(text)) {\n  //     wrapLink(editor, text);\n  //   } else {\n  //     insertText(text);\n  //   }\n  // };\n  //\n  // editor.insertData = (data) => {\n  //   const text = data.getData('text/plain');\n  //\n  //   if (text && isUrl(text)) {\n  //     wrapLink(editor, text);\n  //   } else {\n  //     insertData(data);\n  //   }\n  // };\n  return editor;\n};\nexport const simpleLinkDeserializer = (editor, el) => {\n  let parent = el;\n  let children = Array.from(parent.childNodes).map(el => deserialize(editor, el)).flat();\n  if (!children.length) children = [{\n    text: ''\n  }];\n  const attrs = {\n    type: SIMPLELINK,\n    data: {\n      url: el.getAttribute('href')\n    }\n  };\n  return jsx('element', attrs, children);\n};\nsimpleLinkDeserializer.id = 'simpleLinkDeserializer';","map":{"version":3,"names":["SIMPLELINK","jsx","deserialize","withSimpleLink","editor","isInline","element","type","simpleLinkDeserializer","el","parent","children","Array","from","childNodes","map","flat","length","text","attrs","data","url","getAttribute","id"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/volto-slate/src/editor/plugins/SimpleLink/extensions.js"],"sourcesContent":["import { SIMPLELINK } from 'volto-slate/constants';\nimport { jsx } from 'slate-hyperscript';\nimport { deserialize } from 'volto-slate/editor/deserialize';\n\nexport const withSimpleLink = (editor) => {\n  // const { insertData, insertText, isInline } = editor;\n\n  const { isInline } = editor;\n\n  editor.isInline = (element) => {\n    return element && element.type === SIMPLELINK ? true : isInline(element);\n  };\n\n  // editor.insertText = (text) => {\n  //   if (text && isUrl(text)) {\n  //     wrapLink(editor, text);\n  //   } else {\n  //     insertText(text);\n  //   }\n  // };\n  //\n  // editor.insertData = (data) => {\n  //   const text = data.getData('text/plain');\n  //\n  //   if (text && isUrl(text)) {\n  //     wrapLink(editor, text);\n  //   } else {\n  //     insertData(data);\n  //   }\n  // };\n  return editor;\n};\n\nexport const simpleLinkDeserializer = (editor, el) => {\n  let parent = el;\n\n  let children = Array.from(parent.childNodes)\n    .map((el) => deserialize(editor, el))\n    .flat();\n\n  if (!children.length) children = [{ text: '' }];\n\n  const attrs = {\n    type: SIMPLELINK,\n    data: {\n      url: el.getAttribute('href'),\n    },\n  };\n\n  return jsx('element', attrs, children);\n};\n\nsimpleLinkDeserializer.id = 'simpleLinkDeserializer';\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,uBAAuB;AAClD,SAASC,GAAG,QAAQ,mBAAmB;AACvC,SAASC,WAAW,QAAQ,gCAAgC;AAE5D,OAAO,MAAMC,cAAc,GAAIC,MAAM,IAAK;EACxC;;EAEA,MAAM;IAAEC;EAAS,CAAC,GAAGD,MAAM;EAE3BA,MAAM,CAACC,QAAQ,GAAIC,OAAO,IAAK;IAC7B,OAAOA,OAAO,IAAIA,OAAO,CAACC,IAAI,KAAKP,UAAU,GAAG,IAAI,GAAGK,QAAQ,CAACC,OAAO,CAAC;EAC1E,CAAC;;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,OAAOF,MAAM;AACf,CAAC;AAED,OAAO,MAAMI,sBAAsB,GAAG,CAACJ,MAAM,EAAEK,EAAE,KAAK;EACpD,IAAIC,MAAM,GAAGD,EAAE;EAEf,IAAIE,QAAQ,GAAGC,KAAK,CAACC,IAAI,CAACH,MAAM,CAACI,UAAU,CAAC,CACzCC,GAAG,CAAEN,EAAE,IAAKP,WAAW,CAACE,MAAM,EAAEK,EAAE,CAAC,CAAC,CACpCO,IAAI,EAAE;EAET,IAAI,CAACL,QAAQ,CAACM,MAAM,EAAEN,QAAQ,GAAG,CAAC;IAAEO,IAAI,EAAE;EAAG,CAAC,CAAC;EAE/C,MAAMC,KAAK,GAAG;IACZZ,IAAI,EAAEP,UAAU;IAChBoB,IAAI,EAAE;MACJC,GAAG,EAAEZ,EAAE,CAACa,YAAY,CAAC,MAAM;IAC7B;EACF,CAAC;EAED,OAAOrB,GAAG,CAAC,SAAS,EAAEkB,KAAK,EAAER,QAAQ,CAAC;AACxC,CAAC;AAEDH,sBAAsB,CAACe,EAAE,GAAG,wBAAwB"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}