{"ast":null,"code":"import _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { GET_CONTENT_RULES_EVENTS } from '@plone/volto/constants/ActionTypes';\nvar initialState = {\n  get: {\n    loaded: false,\n    loading: false,\n    error: null\n  },\n  items: []\n};\n\n/**\n * Get request key\n * @function getRequestKey\n * @param {string} actionType Action type.\n * @returns {string} Request key.\n */\nfunction getRequestKey(actionType) {\n  return actionType.split('_')[0].toLowerCase();\n}\n\n/**\n * Rules reducer.\n * @function rules\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function contentrulesevents() {\n  var _action$result;\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  switch (action.type) {\n    case \"\".concat(GET_CONTENT_RULES_EVENTS, \"_PENDING\"):\n      return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, getRequestKey(action.type), {\n        loading: true,\n        loaded: false,\n        error: null\n      }));\n    case \"\".concat(GET_CONTENT_RULES_EVENTS, \"_SUCCESS\"):\n      return _objectSpread(_objectSpread({}, state), {}, _defineProperty({\n        items: (_action$result = action.result) === null || _action$result === void 0 ? void 0 : _action$result.items\n      }, getRequestKey(action.type), {\n        loading: false,\n        loaded: true,\n        error: null\n      }));\n    case \"\".concat(GET_CONTENT_RULES_EVENTS, \"_FAIL\"):\n      return _objectSpread(_objectSpread({}, state), {}, _defineProperty({}, getRequestKey(action.type), {\n        loading: false,\n        loaded: false,\n        error: action.error\n      }));\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["GET_CONTENT_RULES_EVENTS","initialState","get","loaded","loading","error","items","getRequestKey","actionType","split","toLowerCase","contentrulesevents","state","action","type","result"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/reducers/contentRulesEvents/contentRulesEvents.js"],"sourcesContent":["import { GET_CONTENT_RULES_EVENTS } from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {\n  get: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  items: [],\n};\n\n/**\n * Get request key\n * @function getRequestKey\n * @param {string} actionType Action type.\n * @returns {string} Request key.\n */\nfunction getRequestKey(actionType) {\n  return actionType.split('_')[0].toLowerCase();\n}\n\n/**\n * Rules reducer.\n * @function rules\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function contentrulesevents(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${GET_CONTENT_RULES_EVENTS}_PENDING`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: true,\n          loaded: false,\n          error: null,\n        },\n      };\n    case `${GET_CONTENT_RULES_EVENTS}_SUCCESS`:\n      return {\n        ...state,\n        items: action.result?.items,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n    case `${GET_CONTENT_RULES_EVENTS}_FAIL`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    default:\n      return state;\n  }\n}\n"],"mappings":";;AAAA,SAASA,wBAAwB,QAAQ,oCAAoC;AAE7E,IAAMC,YAAY,GAAG;EACnBC,GAAG,EAAE;IACHC,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE,KAAK;IACdC,KAAK,EAAE;EACT,CAAC;EACDC,KAAK,EAAE;AACT,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,aAAa,CAACC,UAAU,EAAE;EACjC,OAAOA,UAAU,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAACC,WAAW,EAAE;AAC/C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,kBAAkB,GAAoC;EAAA;EAAA,IAAnCC,KAAK,uEAAGX,YAAY;EAAA,IAAEY,MAAM,uEAAG,CAAC,CAAC;EAC1E,QAAQA,MAAM,CAACC,IAAI;IACjB,eAAQd,wBAAwB;MAC9B,uCACKY,KAAK,2BACPL,aAAa,CAACM,MAAM,CAACC,IAAI,CAAC,EAAG;QAC5BV,OAAO,EAAE,IAAI;QACbD,MAAM,EAAE,KAAK;QACbE,KAAK,EAAE;MACT,CAAC;IAEL,eAAQL,wBAAwB;MAC9B,uCACKY,KAAK;QACRN,KAAK,oBAAEO,MAAM,CAACE,MAAM,mDAAb,eAAeT;MAAK,GAC1BC,aAAa,CAACM,MAAM,CAACC,IAAI,CAAC,EAAG;QAC5BV,OAAO,EAAE,KAAK;QACdD,MAAM,EAAE,IAAI;QACZE,KAAK,EAAE;MACT,CAAC;IAEL,eAAQL,wBAAwB;MAC9B,uCACKY,KAAK,2BACPL,aAAa,CAACM,MAAM,CAACC,IAAI,CAAC,EAAG;QAC5BV,OAAO,EAAE,KAAK;QACdD,MAAM,EAAE,KAAK;QACbE,KAAK,EAAEQ,MAAM,CAACR;MAChB,CAAC;IAEL;MACE,OAAOO,KAAK;EAAC;AAEnB"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}