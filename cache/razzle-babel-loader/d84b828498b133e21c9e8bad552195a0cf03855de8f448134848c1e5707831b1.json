{"ast":null,"code":"/**\n * Clipboard actions.\n * @module actions/clipboard/clipboard\n */\n\nimport { COPY_CONTENT, MOVE_CONTENT, COPY, CUT } from '@plone/volto/constants/ActionTypes';\n\n/**\n * Copy content function.\n * @function copyContent\n * @param {array} source Source urls.\n * @param {string} target Target url.\n * @returns {Object} Copy content action.\n */\nexport function copyContent(source, target) {\n  return {\n    type: COPY_CONTENT,\n    request: {\n      op: 'post',\n      path: \"\".concat(target, \"/@copy\"),\n      data: {\n        source: source\n      }\n    }\n  };\n}\n\n/**\n * Move content function.\n * @function moveContent\n * @param {array} source Source urls.\n * @param {string} target Target url.\n * @returns {Object} Move content action.\n */\nexport function moveContent(source, target) {\n  return {\n    type: MOVE_CONTENT,\n    request: {\n      op: 'post',\n      path: \"\".concat(target, \"/@move\"),\n      data: {\n        source: source\n      }\n    }\n  };\n}\n\n/**\n * Copy function.\n * @function copy\n * @param {array} urls Source urls.\n * @returns {Object} Copy action.\n */\nexport function copy(urls) {\n  return {\n    type: COPY,\n    source: urls\n  };\n}\n\n/**\n * Cut function.\n * @function cut\n * @param {array} urls Source urls.\n * @returns {Object} Cut action.\n */\nexport function cut(urls) {\n  return {\n    type: CUT,\n    source: urls\n  };\n}","map":{"version":3,"names":["COPY_CONTENT","MOVE_CONTENT","COPY","CUT","copyContent","source","target","type","request","op","path","data","moveContent","copy","urls","cut"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/actions/clipboard/clipboard.js"],"sourcesContent":["/**\n * Clipboard actions.\n * @module actions/clipboard/clipboard\n */\n\nimport {\n  COPY_CONTENT,\n  MOVE_CONTENT,\n  COPY,\n  CUT,\n} from '@plone/volto/constants/ActionTypes';\n\n/**\n * Copy content function.\n * @function copyContent\n * @param {array} source Source urls.\n * @param {string} target Target url.\n * @returns {Object} Copy content action.\n */\nexport function copyContent(source, target) {\n  return {\n    type: COPY_CONTENT,\n    request: {\n      op: 'post',\n      path: `${target}/@copy`,\n      data: { source },\n    },\n  };\n}\n\n/**\n * Move content function.\n * @function moveContent\n * @param {array} source Source urls.\n * @param {string} target Target url.\n * @returns {Object} Move content action.\n */\nexport function moveContent(source, target) {\n  return {\n    type: MOVE_CONTENT,\n    request: {\n      op: 'post',\n      path: `${target}/@move`,\n      data: { source },\n    },\n  };\n}\n\n/**\n * Copy function.\n * @function copy\n * @param {array} urls Source urls.\n * @returns {Object} Copy action.\n */\nexport function copy(urls) {\n  return {\n    type: COPY,\n    source: urls,\n  };\n}\n\n/**\n * Cut function.\n * @function cut\n * @param {array} urls Source urls.\n * @returns {Object} Cut action.\n */\nexport function cut(urls) {\n  return {\n    type: CUT,\n    source: urls,\n  };\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,SACEA,YAAY,EACZC,YAAY,EACZC,IAAI,EACJC,GAAG,QACE,oCAAoC;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAW,CAACC,MAAM,EAAEC,MAAM,EAAE;EAC1C,OAAO;IACLC,IAAI,EAAEP,YAAY;IAClBQ,OAAO,EAAE;MACPC,EAAE,EAAE,MAAM;MACVC,IAAI,YAAKJ,MAAM,WAAQ;MACvBK,IAAI,EAAE;QAAEN,MAAM,EAANA;MAAO;IACjB;EACF,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASO,WAAW,CAACP,MAAM,EAAEC,MAAM,EAAE;EAC1C,OAAO;IACLC,IAAI,EAAEN,YAAY;IAClBO,OAAO,EAAE;MACPC,EAAE,EAAE,MAAM;MACVC,IAAI,YAAKJ,MAAM,WAAQ;MACvBK,IAAI,EAAE;QAAEN,MAAM,EAANA;MAAO;IACjB;EACF,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASQ,IAAI,CAACC,IAAI,EAAE;EACzB,OAAO;IACLP,IAAI,EAAEL,IAAI;IACVG,MAAM,EAAES;EACV,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,GAAG,CAACD,IAAI,EAAE;EACxB,OAAO;IACLP,IAAI,EAAEJ,GAAG;IACTE,MAAM,EAAES;EACV,CAAC;AACH"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}