{"ast":null,"code":"import _extends from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/extends.js\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/packages/volto-slate/src/elementEditor/SidebarEditor.jsx\",\n  _this = this,\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\n/**\n * A small wrapper around PluginEditor. Its purpose it to allow for clearer\n * code, otherwise it would mix too many hooks and it's not possible to render\n * a variable number of hooks in a component\n */\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { SidebarPopup } from '@plone/volto/components';\nimport { setPluginOptions } from '@plone/volto-slate/actions';\nvar SidebarEditor = function SidebarEditor(props) {\n  _s();\n  var editor = props.editor,\n    pluginId = props.pluginId,\n    getActiveElement = props.getActiveElement,\n    pluginEditor = props.pluginEditor;\n  var pid = \"\".concat(editor.uid, \"-\").concat(pluginId);\n  var PluginEditor = pluginEditor;\n  var showEditor = useSelector(function (state) {\n    var _state$slate_plugins, _state$slate_plugins$;\n    return (_state$slate_plugins = state['slate_plugins']) === null || _state$slate_plugins === void 0 ? void 0 : (_state$slate_plugins$ = _state$slate_plugins[pid]) === null || _state$slate_plugins$ === void 0 ? void 0 : _state$slate_plugins$.show_sidebar_editor;\n  });\n  var dispatch = useDispatch();\n  var active;\n  try {\n    active = getActiveElement(editor);\n  } catch (error) {\n    // eslint-disable-next-line\n    console.warn('Error in getting active element', error);\n  }\n\n  // Hide the editor when switching to another text element\n  React.useEffect(function () {\n    if (!active) dispatch(setPluginOptions(pid, {\n      show_sidebar_editor: false\n    }));\n  }, [active, dispatch, pluginId, pid]);\n  editor.isSidebarOpen = showEditor && active;\n  return editor.isSidebarOpen ? __jsx(SidebarPopup, {\n    open: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, __jsx(PluginEditor, _extends({}, props, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }))) : '';\n};\n_s(SidebarEditor, \"w+dobYG5G9hu/6B1J66tRyl6yYE=\", false, function () {\n  return [useSelector, useDispatch];\n});\n_c = SidebarEditor;\nexport default SidebarEditor;\nvar _c;\n$RefreshReg$(_c, \"SidebarEditor\");","map":{"version":3,"names":["React","useSelector","useDispatch","SidebarPopup","setPluginOptions","SidebarEditor","props","editor","pluginId","getActiveElement","pluginEditor","pid","uid","PluginEditor","showEditor","state","show_sidebar_editor","dispatch","active","error","console","warn","useEffect","isSidebarOpen"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/packages/volto-slate/src/elementEditor/SidebarEditor.jsx"],"sourcesContent":["/**\n * A small wrapper around PluginEditor. Its purpose it to allow for clearer\n * code, otherwise it would mix too many hooks and it's not possible to render\n * a variable number of hooks in a component\n */\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { SidebarPopup } from '@plone/volto/components';\nimport { setPluginOptions } from '@plone/volto-slate/actions';\n\nconst SidebarEditor = (props) => {\n  const { editor, pluginId, getActiveElement, pluginEditor } = props;\n  const pid = `${editor.uid}-${pluginId}`;\n  const PluginEditor = pluginEditor;\n  const showEditor = useSelector((state) => {\n    return state['slate_plugins']?.[pid]?.show_sidebar_editor;\n  });\n\n  const dispatch = useDispatch();\n\n  let active;\n  try {\n    active = getActiveElement(editor);\n  } catch (error) {\n    // eslint-disable-next-line\n    console.warn('Error in getting active element', error);\n  }\n\n  // Hide the editor when switching to another text element\n  React.useEffect(() => {\n    if (!active)\n      dispatch(setPluginOptions(pid, { show_sidebar_editor: false }));\n  }, [active, dispatch, pluginId, pid]);\n\n  editor.isSidebarOpen = showEditor && active;\n\n  return editor.isSidebarOpen ? (\n    <SidebarPopup open={true}>\n      <PluginEditor {...props} />\n    </SidebarPopup>\n  ) : (\n    ''\n  );\n};\n\nexport default SidebarEditor;\n"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,YAAY,QAAQ,yBAAyB;AACtD,SAASC,gBAAgB,QAAQ,4BAA4B;AAE7D,IAAMC,aAAa,GAAG,SAAhBA,aAAa,CAAIC,KAAK,EAAK;EAAA;EAC/B,IAAQC,MAAM,GAA+CD,KAAK,CAA1DC,MAAM;IAAEC,QAAQ,GAAqCF,KAAK,CAAlDE,QAAQ;IAAEC,gBAAgB,GAAmBH,KAAK,CAAxCG,gBAAgB;IAAEC,YAAY,GAAKJ,KAAK,CAAtBI,YAAY;EACxD,IAAMC,GAAG,aAAMJ,MAAM,CAACK,GAAG,cAAIJ,QAAQ,CAAE;EACvC,IAAMK,YAAY,GAAGH,YAAY;EACjC,IAAMI,UAAU,GAAGb,WAAW,CAAC,UAACc,KAAK,EAAK;IAAA;IACxC,+BAAOA,KAAK,CAAC,eAAe,CAAC,kFAAtB,qBAAyBJ,GAAG,CAAC,0DAA7B,sBAA+BK,mBAAmB;EAC3D,CAAC,CAAC;EAEF,IAAMC,QAAQ,GAAGf,WAAW,EAAE;EAE9B,IAAIgB,MAAM;EACV,IAAI;IACFA,MAAM,GAAGT,gBAAgB,CAACF,MAAM,CAAC;EACnC,CAAC,CAAC,OAAOY,KAAK,EAAE;IACd;IACAC,OAAO,CAACC,IAAI,CAAC,iCAAiC,EAAEF,KAAK,CAAC;EACxD;;EAEA;EACAnB,KAAK,CAACsB,SAAS,CAAC,YAAM;IACpB,IAAI,CAACJ,MAAM,EACTD,QAAQ,CAACb,gBAAgB,CAACO,GAAG,EAAE;MAAEK,mBAAmB,EAAE;IAAM,CAAC,CAAC,CAAC;EACnE,CAAC,EAAE,CAACE,MAAM,EAAED,QAAQ,EAAET,QAAQ,EAAEG,GAAG,CAAC,CAAC;EAErCJ,MAAM,CAACgB,aAAa,GAAGT,UAAU,IAAII,MAAM;EAE3C,OAAOX,MAAM,CAACgB,aAAa,GACzB,MAAC,YAAY;IAAC,IAAI,EAAE,IAAK;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACvB,MAAC,YAAY,eAAKjB,KAAK;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAI,CACd,GAEf,EACD;AACH,CAAC;AAAC,GAjCID,aAAa;EAAA,QAIEJ,WAAW,EAIbC,WAAW;AAAA;AAAA,KARxBG,aAAa;AAmCnB,eAAeA,aAAa;AAAC;AAAA"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}