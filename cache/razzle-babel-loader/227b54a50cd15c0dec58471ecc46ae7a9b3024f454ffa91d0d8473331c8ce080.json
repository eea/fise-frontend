{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Blocks/Image/View.jsx\";\nvar __jsx = React.createElement;\n/**\n * View image block.\n * @module components/manage/Blocks/Image/View\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { UniversalLink } from '@plone/volto/components';\nimport cx from 'classnames';\nimport { withBlockExtensions } from '@plone/volto/helpers';\nimport { flattenToAppURL, isInternalURL } from '@plone/volto/helpers';\n\n/**\n * View image block class.\n * @class View\n * @extends Component\n */\nexport const View = ({\n  data,\n  detached\n}) => {\n  var _data$href, _data$href$;\n  const href = (data === null || data === void 0 ? void 0 : (_data$href = data.href) === null || _data$href === void 0 ? void 0 : (_data$href$ = _data$href[0]) === null || _data$href$ === void 0 ? void 0 : _data$href$['@id']) || '';\n  return __jsx(\"p\", {\n    className: cx('block image align', {\n      center: !Boolean(data.align),\n      detached\n    }, data.align),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 5\n    }\n  }, data.url && __jsx(React.Fragment, null, (() => {\n    const image = __jsx(\"img\", {\n      className: cx({\n        'full-width': data.align === 'full',\n        large: data.size === 'l',\n        medium: data.size === 'm',\n        small: data.size === 's'\n      }),\n      src: isInternalURL(data.url) ?\n      // Backwards compat in the case that the block is storing the full server URL\n      (() => {\n        if (data.size === 'l') return `${flattenToAppURL(data.url)}/@@images/image`;\n        if (data.size === 'm') return `${flattenToAppURL(data.url)}/@@images/image/preview`;\n        if (data.size === 's') return `${flattenToAppURL(data.url)}/@@images/image/mini`;\n        return `${flattenToAppURL(data.url)}/@@images/image`;\n      })() : data.url,\n      alt: data.alt || '',\n      loading: \"lazy\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 15\n      }\n    });\n    if (href) {\n      return __jsx(UniversalLink, {\n        href: href,\n        openLinkInNewTab: data.openLinkInNewTab,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 17\n        }\n      }, image);\n    } else {\n      return image;\n    }\n  })()));\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nView.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired\n};\nexport default withBlockExtensions(View);","map":{"version":3,"names":["React","PropTypes","UniversalLink","cx","withBlockExtensions","flattenToAppURL","isInternalURL","View","data","detached","href","center","Boolean","align","url","image","large","size","medium","small","alt","openLinkInNewTab","propTypes","objectOf","any","isRequired"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Blocks/Image/View.jsx"],"sourcesContent":["/**\n * View image block.\n * @module components/manage/Blocks/Image/View\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { UniversalLink } from '@plone/volto/components';\nimport cx from 'classnames';\nimport { withBlockExtensions } from '@plone/volto/helpers';\nimport { flattenToAppURL, isInternalURL } from '@plone/volto/helpers';\n\n/**\n * View image block class.\n * @class View\n * @extends Component\n */\nexport const View = ({ data, detached }) => {\n  const href = data?.href?.[0]?.['@id'] || '';\n  return (\n    <p\n      className={cx(\n        'block image align',\n        {\n          center: !Boolean(data.align),\n          detached,\n        },\n        data.align,\n      )}\n    >\n      {data.url && (\n        <>\n          {(() => {\n            const image = (\n              <img\n                className={cx({\n                  'full-width': data.align === 'full',\n                  large: data.size === 'l',\n                  medium: data.size === 'm',\n                  small: data.size === 's',\n                })}\n                src={\n                  isInternalURL(data.url)\n                    ? // Backwards compat in the case that the block is storing the full server URL\n                      (() => {\n                        if (data.size === 'l')\n                          return `${flattenToAppURL(data.url)}/@@images/image`;\n                        if (data.size === 'm')\n                          return `${flattenToAppURL(\n                            data.url,\n                          )}/@@images/image/preview`;\n                        if (data.size === 's')\n                          return `${flattenToAppURL(\n                            data.url,\n                          )}/@@images/image/mini`;\n                        return `${flattenToAppURL(data.url)}/@@images/image`;\n                      })()\n                    : data.url\n                }\n                alt={data.alt || ''}\n                loading=\"lazy\"\n              />\n            );\n            if (href) {\n              return (\n                <UniversalLink\n                  href={href}\n                  openLinkInNewTab={data.openLinkInNewTab}\n                >\n                  {image}\n                </UniversalLink>\n              );\n            } else {\n              return image;\n            }\n          })()}\n        </>\n      )}\n    </p>\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nView.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default withBlockExtensions(View);\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,aAAa,QAAQ,yBAAyB;AACvD,OAAOC,EAAE,MAAM,YAAY;AAC3B,SAASC,mBAAmB,QAAQ,sBAAsB;AAC1D,SAASC,eAAe,EAAEC,aAAa,QAAQ,sBAAsB;;AAErE;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,IAAI,GAAG,CAAC;EAAEC,IAAI;EAAEC;AAAS,CAAC,KAAK;EAAA;EAC1C,MAAMC,IAAI,GAAG,CAAAF,IAAI,aAAJA,IAAI,qCAAJA,IAAI,CAAEE,IAAI,8DAAV,WAAa,CAAC,CAAC,gDAAf,YAAkB,KAAK,CAAC,KAAI,EAAE;EAC3C,OACE;IACE,SAAS,EAAEP,EAAE,CACX,mBAAmB,EACnB;MACEQ,MAAM,EAAE,CAACC,OAAO,CAACJ,IAAI,CAACK,KAAK,CAAC;MAC5BJ;IACF,CAAC,EACDD,IAAI,CAACK,KAAK,CACV;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAEDL,IAAI,CAACM,GAAG,IACP,4BACG,CAAC,MAAM;IACN,MAAMC,KAAK,GACT;MACE,SAAS,EAAEZ,EAAE,CAAC;QACZ,YAAY,EAAEK,IAAI,CAACK,KAAK,KAAK,MAAM;QACnCG,KAAK,EAAER,IAAI,CAACS,IAAI,KAAK,GAAG;QACxBC,MAAM,EAAEV,IAAI,CAACS,IAAI,KAAK,GAAG;QACzBE,KAAK,EAAEX,IAAI,CAACS,IAAI,KAAK;MACvB,CAAC,CAAE;MACH,GAAG,EACDX,aAAa,CAACE,IAAI,CAACM,GAAG,CAAC;MACnB;MACA,CAAC,MAAM;QACL,IAAIN,IAAI,CAACS,IAAI,KAAK,GAAG,EACnB,OAAQ,GAAEZ,eAAe,CAACG,IAAI,CAACM,GAAG,CAAE,iBAAgB;QACtD,IAAIN,IAAI,CAACS,IAAI,KAAK,GAAG,EACnB,OAAQ,GAAEZ,eAAe,CACvBG,IAAI,CAACM,GAAG,CACR,yBAAwB;QAC5B,IAAIN,IAAI,CAACS,IAAI,KAAK,GAAG,EACnB,OAAQ,GAAEZ,eAAe,CACvBG,IAAI,CAACM,GAAG,CACR,sBAAqB;QACzB,OAAQ,GAAET,eAAe,CAACG,IAAI,CAACM,GAAG,CAAE,iBAAgB;MACtD,CAAC,GAAG,GACJN,IAAI,CAACM,GACV;MACD,GAAG,EAAEN,IAAI,CAACY,GAAG,IAAI,EAAG;MACpB,OAAO,EAAC,MAAM;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAEjB;IACD,IAAIV,IAAI,EAAE;MACR,OACE,MAAC,aAAa;QACZ,IAAI,EAAEA,IAAK;QACX,gBAAgB,EAAEF,IAAI,CAACa,gBAAiB;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GAEvCN,KAAK,CACQ;IAEpB,CAAC,MAAM;MACL,OAAOA,KAAK;IACd;EACF,CAAC,GAAG,CAEP,CACC;AAER,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAR,IAAI,CAACe,SAAS,GAAG;EACfd,IAAI,EAAEP,SAAS,CAACsB,QAAQ,CAACtB,SAAS,CAACuB,GAAG,CAAC,CAACC;AAC1C,CAAC;AAED,eAAerB,mBAAmB,CAACG,IAAI,CAAC"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}