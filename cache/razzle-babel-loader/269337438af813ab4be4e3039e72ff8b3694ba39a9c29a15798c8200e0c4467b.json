{"ast":null,"code":"import _omit from \"lodash/omit\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-slate/src/components/ElementEditor/makeInlineElementPlugin.js\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport React from 'react';\nimport SidebarEditor from './SidebarEditor';\nimport makeContextButtons from './ContextButtons';\nimport PluginEditor from './PluginEditor';\nimport { _insertElement, _unwrapElement, _isActiveElement, _getActiveElement } from './utils';\nimport messages from './messages';\nimport ToolbarButton from './ToolbarButton';\nimport tagSVG from '@plone/volto/icons/tag.svg';\nimport SchemaProvider from './SchemaProvider';\nexport const makeInlineElementPlugin = options => {\n  const {\n    elementType,\n    isInlineElement,\n    pluginId,\n    title = 'Element'\n  } = options;\n  const omittedProps = ['pluginEditor', 'getActiveElement', 'unwrapElement', 'schemaProvider', 'hasValue', 'elementType', 'isInlineElement', 'editSchema', 'element', 'persistentHelper'];\n  const pluginOptions = _objectSpread({\n    pluginEditor: PluginEditor,\n    insertElement: _insertElement(elementType),\n    getActiveElement: _getActiveElement(elementType),\n    isActiveElement: _isActiveElement(elementType),\n    unwrapElement: _unwrapElement(elementType),\n    messages,\n    toolbarButtonIcon: tagSVG,\n    title,\n    extensions: [],\n    // a component that should provide a schema as a render prop\n    schemaProvider: SchemaProvider,\n    // schema that can be used to create the edit form for this component\n    // editSchema,\n\n    // A generic \"validation\" method, just finds that a \"positive\" value\n    // exists.  Plugin authors should overwrite it in options\n    // If it returns true, the value is saved in the editor, othwerwise the\n    // element type is removed from the editor\n    hasValue: data => Object.values(data).findIndex(v => !!v) > -1\n  }, options);\n  const PersistentHelper = props => __jsx(SidebarEditor, _extends({}, props, pluginOptions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }));\n  PersistentHelper.id = pluginId;\n  const ElementContextButtons = makeContextButtons(pluginOptions);\n  ElementContextButtons.id = pluginId;\n  const install = config => {\n    const {\n      slate\n    } = config.settings;\n    if (isInlineElement) {\n      slate.inlineElements[elementType] = true;\n    }\n    slate.buttons[pluginId] = props => __jsx(ToolbarButton, _extends({}, props, {\n      title: title\n    }, _omit(pluginOptions, omittedProps), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }\n    }));\n    slate.contextToolbarButtons.push(ElementContextButtons);\n    slate.persistentHelpers.push(options.persistentHelper ? options.persistentHelper(pluginOptions) : PersistentHelper);\n    slate.extensions = [...(slate.extensions || []), ...pluginOptions.extensions];\n    slate.elements[elementType] = options.element;\n    slate.nodeTypesToHighlight.push(elementType);\n\n    // The plugin authors should manually add the button to the relevant toolbars\n    // slate.toolbarButtons = [...(slate.toolbarButtons || []), pluginId];\n    // slate.expandedToolbarButtons = [...(slate.expandedToolbarButtons || []), pluginId];\n\n    return config;\n  };\n  return [install, ElementContextButtons, PersistentHelper, pluginOptions];\n};","map":{"version":3,"names":["React","SidebarEditor","makeContextButtons","PluginEditor","_insertElement","_unwrapElement","_isActiveElement","_getActiveElement","messages","ToolbarButton","tagSVG","SchemaProvider","makeInlineElementPlugin","options","elementType","isInlineElement","pluginId","title","omittedProps","pluginOptions","pluginEditor","insertElement","getActiveElement","isActiveElement","unwrapElement","toolbarButtonIcon","extensions","schemaProvider","hasValue","data","Object","values","findIndex","v","PersistentHelper","props","id","ElementContextButtons","install","config","slate","settings","inlineElements","buttons","contextToolbarButtons","push","persistentHelpers","persistentHelper","elements","element","nodeTypesToHighlight"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-slate/src/components/ElementEditor/makeInlineElementPlugin.js"],"sourcesContent":["import React from 'react';\nimport SidebarEditor from './SidebarEditor';\nimport makeContextButtons from './ContextButtons';\nimport PluginEditor from './PluginEditor';\nimport {\n  _insertElement,\n  _unwrapElement,\n  _isActiveElement,\n  _getActiveElement,\n} from './utils';\nimport messages from './messages';\nimport ToolbarButton from './ToolbarButton';\nimport tagSVG from '@plone/volto/icons/tag.svg';\nimport SchemaProvider from './SchemaProvider';\nimport { omit } from 'lodash';\n\nexport const makeInlineElementPlugin = (options) => {\n  const { elementType, isInlineElement, pluginId, title = 'Element' } = options;\n  const omittedProps = [\n    'pluginEditor',\n    'getActiveElement',\n    'unwrapElement',\n    'schemaProvider',\n    'hasValue',\n    'elementType',\n    'isInlineElement',\n    'editSchema',\n    'element',\n    'persistentHelper',\n  ];\n\n  const pluginOptions = {\n    pluginEditor: PluginEditor,\n    insertElement: _insertElement(elementType),\n    getActiveElement: _getActiveElement(elementType),\n    isActiveElement: _isActiveElement(elementType),\n    unwrapElement: _unwrapElement(elementType),\n    messages,\n    toolbarButtonIcon: tagSVG,\n    title,\n    extensions: [],\n\n    // a component that should provide a schema as a render prop\n    schemaProvider: SchemaProvider,\n    // schema that can be used to create the edit form for this component\n    // editSchema,\n\n    // A generic \"validation\" method, just finds that a \"positive\" value\n    // exists.  Plugin authors should overwrite it in options\n    // If it returns true, the value is saved in the editor, othwerwise the\n    // element type is removed from the editor\n    hasValue: (data) => Object.values(data).findIndex((v) => !!v) > -1,\n\n    ...options,\n  };\n\n  const PersistentHelper = (props) => (\n    <SidebarEditor {...props} {...pluginOptions} />\n  );\n  PersistentHelper.id = pluginId;\n\n  const ElementContextButtons = makeContextButtons(pluginOptions);\n  ElementContextButtons.id = pluginId;\n\n  const install = (config) => {\n    const { slate } = config.settings;\n    if (isInlineElement) {\n      slate.inlineElements[elementType] = true;\n    }\n\n    slate.buttons[pluginId] = (props) => (\n      <ToolbarButton\n        {...props}\n        title={title}\n        {...omit(pluginOptions, omittedProps)}\n      />\n    );\n    slate.contextToolbarButtons.push(ElementContextButtons);\n    slate.persistentHelpers.push(\n      options.persistentHelper\n        ? options.persistentHelper(pluginOptions)\n        : PersistentHelper,\n    );\n    slate.extensions = [\n      ...(slate.extensions || []),\n      ...pluginOptions.extensions,\n    ];\n    slate.elements[elementType] = options.element;\n    slate.nodeTypesToHighlight.push(elementType);\n\n    // The plugin authors should manually add the button to the relevant toolbars\n    // slate.toolbarButtons = [...(slate.toolbarButtons || []), pluginId];\n    // slate.expandedToolbarButtons = [...(slate.expandedToolbarButtons || []), pluginId];\n\n    return config;\n  };\n\n  return [install, ElementContextButtons, PersistentHelper, pluginOptions];\n};\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}