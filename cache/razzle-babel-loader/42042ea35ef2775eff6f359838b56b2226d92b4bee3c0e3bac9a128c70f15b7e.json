{"ast":null,"code":"import _classCallCheck from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _map from \"lodash/map\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Controlpanels/UndoControlpanel.jsx\";\nvar __jsx = React.createElement;\n/**\n * Users controlpanel container.\n * @module components/manage/Controlpanels/UndoControlpanel\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { Portal } from 'react-portal';\nimport { Container, Segment, Table, Menu, Input } from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport { Icon, Toolbar, Form, Toast } from '@plone/volto/components';\nimport backSVG from '@plone/volto/icons/back.svg';\nimport { Helmet } from '@plone/volto/helpers';\nimport nextIcon from '@plone/volto/icons/right-key.svg';\nimport prevIcon from '@plone/volto/icons/left-key.svg';\nimport undoSVG from '@plone/volto/icons/undo.svg';\nimport { getTransactions, revertTransactions } from '@plone/volto/actions';\nimport { toast } from 'react-toastify';\nvar messages = defineMessages({\n  success: {\n    \"id\": \"Success\",\n    \"defaultMessage\": \"Success\"\n  },\n  error: {\n    \"id\": \"Error\",\n    \"defaultMessage\": \"Error\"\n  },\n  undo: {\n    \"id\": \"Undo\",\n    \"defaultMessage\": \"Undo\"\n  },\n  back: {\n    \"id\": \"Back\",\n    \"defaultMessage\": \"Back\"\n  },\n  \"default\": {\n    \"id\": \"Default\",\n    \"defaultMessage\": \"Default\"\n  },\n  sortBy: {\n    \"id\": \"Sort By\",\n    \"defaultMessage\": \"Sort by\"\n  },\n  sorted: {\n    \"id\": \"Sorted\",\n    \"defaultMessage\": \"Sorted\"\n  },\n  unsorted: {\n    \"id\": \"Unsorted\",\n    \"defaultMessage\": \"Unsorted\"\n  },\n  sortByDescription: {\n    \"id\": \"Sort transactions by User-Name, Path or Date\",\n    \"defaultMessage\": \"Sort transactions by User-Name, Path or Date\"\n  },\n  failedToUndoTransactions: {\n    \"id\": \"Failed To Undo Transactions\",\n    \"defaultMessage\": \"Failed to undo transactions\"\n  },\n  successfullyUndoneTransactions: {\n    \"id\": \"Successfully Undone Transactions\",\n    \"defaultMessage\": \"Successfully undone transactions\"\n  },\n  transactionsHaveBeenSorted: {\n    \"id\": \"Transactions Have Been Sorted\",\n    \"defaultMessage\": \"Transactions have been sorted\"\n  },\n  transactionsHaveBeenUnsorted: {\n    \"id\": \"Transactions Have Been Unsorted\",\n    \"defaultMessage\": \"Transactions have been unsorted\"\n  },\n  noTransactionsSelected: {\n    \"id\": \"No Transactions Selected\",\n    \"defaultMessage\": \"No transactions selected\"\n  },\n  noTransactionsSelectedToDoUndo: {\n    \"id\": \"No Transactions Selected To Do Undo\",\n    \"defaultMessage\": \"No transactions selected to do undo\"\n  }\n});\n\n/**\n * UndoControlpanel class.\n * @class UndoControlpanel\n * @extends Component\n */\nvar UndoControlpanel = /*#__PURE__*/function (_Component) {\n  _inherits(UndoControlpanel, _Component);\n  var _super = _createSuper(UndoControlpanel);\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs UndoControlpanel\n   */\n  function UndoControlpanel(props) {\n    var _this;\n    _classCallCheck(this, UndoControlpanel);\n    _this = _super.call(this, props);\n    _this.state = {\n      isClient: false,\n      sortType: 'no value',\n      lowerIndex: 0,\n      upperIndex: 20,\n      defaultTransactionsLenInTable: 20,\n      isSortingTypeSelected: false,\n      sortedTransactions: [],\n      isEmptyInputForSorting: false,\n      isTransactionsNotFound: false,\n      isClickedOnUndoButton: false,\n      showPrevButton: false,\n      showNextButton: false\n    };\n    _this.onCancel = _this.onCancel.bind(_assertThisInitialized(_this));\n    _this.onSort = _this.onSort.bind(_assertThisInitialized(_this));\n    _this.onSelect = _this.onSelect.bind(_assertThisInitialized(_this));\n    _this.onPrev = _this.onPrev.bind(_assertThisInitialized(_this));\n    _this.onNext = _this.onNext.bind(_assertThisInitialized(_this));\n    _this.onUndo = _this.onUndo.bind(_assertThisInitialized(_this));\n    _this.handleTableVisiblity = _this.handleTableVisiblity.bind(_assertThisInitialized(_this));\n    _this.handleNotSortedNextPrevButtons = _this.handleNotSortedNextPrevButtons.bind(_assertThisInitialized(_this));\n    _this.handleSortedNextPrevButtons = _this.handleSortedNextPrevButtons.bind(_assertThisInitialized(_this));\n    _this.checkTransactionsUndoneStatus = _this.checkTransactionsUndoneStatus.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  _createClass(UndoControlpanel, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        isClient: true\n      });\n      this.props.getTransactions();\n    }\n\n    /**\n     * Component will receive props\n     * @method componentWillReceiveProps\n     * @param {Object} nextProps Next properties\n     * @returns {undefined}\n     */\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      if (this.props.revertRequest.loading && nextProps.revertRequest.loaded) {\n        this.props.getTransactions();\n      }\n    }\n  }, {\n    key: \"setSortedTransactions\",\n    value: function setSortedTransactions(sortedTransactions) {\n      if (sortedTransactions.length > 0) {\n        this.setState({\n          lowerIndex: 0,\n          upperIndex: this.state.defaultTransactionsLenInTable,\n          sortedTransactions: sortedTransactions,\n          isEmptyInputForSorting: false,\n          isTransactionsNotFound: false\n        });\n      } else {\n        this.setState({\n          isTransactionsNotFound: true\n        });\n      }\n    }\n\n    /**\n     * On Cancel\n     * @method onCancel\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onCancel\",\n    value: function onCancel() {\n      if (this.state.sortedTransactions.length > 0) {\n        toast.info(__jsx(Toast, {\n          info: true,\n          title: this.props.intl.formatMessage(messages.unsorted),\n          content: this.props.intl.formatMessage(messages.transactionsHaveBeenUnsorted),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 9\n          }\n        }));\n      }\n      this.setState({\n        isSortingTypeSelected: false,\n        isTransactionsNotFound: false,\n        isEmptyInputForSorting: false,\n        sortType: 'no value',\n        sortedTransactions: [],\n        lowerIndex: 0,\n        upperIndex: this.state.defaultTransactionsLenInTable\n      });\n    }\n\n    /**\n     * On Select\n     * @method onSelect\n     * @param {object} data\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onSelect\",\n    value: function onSelect(data) {\n      if (data !== null && data.sortingTypes !== null && this.state.sortType.toLowerCase() === data.sortingTypes.toLowerCase()) {\n        return;\n      }\n      var sortType = data !== null && data.sortingTypes || 'no value';\n      if (sortType.toLowerCase() !== 'no value') {\n        this.setState({\n          isSortingTypeSelected: true\n        });\n        sortType.toLowerCase() === 'user name' && this.setState({\n          sortType: 'user name'\n        });\n        sortType.toLowerCase() === 'date' && this.setState({\n          sortType: 'date'\n        });\n        sortType.toLowerCase() === 'path' && this.setState({\n          sortType: 'path'\n        });\n      } else {\n        this.onCancel();\n      }\n    }\n\n    /**\n     * On Sort\n     * @method onSort\n     * @param {object} data\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onSort\",\n    value: function onSort(data) {\n      var sortType = data.sortingTypes || 'no value';\n      var value;\n      sortType.toLowerCase() === 'user name' && (value = data.sortByUsername) || sortType.toLowerCase() === 'path' && (value = data.sortByPath) || sortType.toLowerCase() === 'date' && (value = data.sortByDate) || (value = undefined);\n      if (sortType.toLowerCase() !== 'no value' && value !== undefined) {\n        var sortedTransactions = [];\n        if (sortType.toLowerCase() === 'user name') {\n          this.props.transactions.forEach(function (element) {\n            if (value.trim().toLowerCase() === 'zope' && !element.username) {\n              sortedTransactions.push(element);\n            } else if (element.username.trim().toLowerCase().includes(value.trim().toLowerCase())) {\n              sortedTransactions.push(element);\n            }\n          });\n          this.setSortedTransactions(sortedTransactions);\n        } else if (sortType.toLowerCase() === 'path') {\n          this.props.transactions.forEach(function (element) {\n            if (element.id.trim().toLowerCase().includes(value.trim().toLowerCase())) {\n              sortedTransactions.push(element);\n            }\n          });\n          this.setSortedTransactions(sortedTransactions);\n        } else {\n          // MS is Milli Seconds\n          var MSInADay = 86400000;\n          var sortingTimeInMS = Date.parse(value);\n          var endTimeOfSortingDateInMS = sortingTimeInMS - sortingTimeInMS % MSInADay + MSInADay - 1;\n          var startTimeOfSortingDateInMS = sortingTimeInMS - sortingTimeInMS % MSInADay;\n          this.props.transactions.forEach(function (element) {\n            if (endTimeOfSortingDateInMS >= Date.parse(element.time) && Date.parse(element.time) >= startTimeOfSortingDateInMS) {\n              sortedTransactions.push(element);\n            }\n          });\n          this.setSortedTransactions(sortedTransactions);\n        }\n        toast.info(__jsx(Toast, {\n          info: true,\n          title: this.props.intl.formatMessage(messages.sorted),\n          content: this.props.intl.formatMessage(messages.transactionsHaveBeenSorted),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 9\n          }\n        }));\n      } else {\n        this.setState({\n          isEmptyInputForSorting: true\n        });\n      }\n    }\n\n    /**\n     * On Undo\n     * @method onUndo\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onUndo\",\n    value: function onUndo() {\n      var transactionsSelected = false;\n      var undoTransactionsIds = _map(this.props.transactions.slice(0, this.props.transactions.length), function (transaction) {\n        if (document.getElementById(transaction.id) !== null && document.getElementById(transaction.id).firstElementChild.firstElementChild.firstElementChild.checked) {\n          transactionsSelected = true;\n          return transaction.id;\n        }\n        return '';\n      });\n      if (transactionsSelected) {\n        this.setState({\n          isClickedOnUndoButton: true\n        });\n        this.props.revertTransactions(undoTransactionsIds);\n      } else {\n        toast.error(__jsx(Toast, {\n          error: true,\n          title: this.props.intl.formatMessage(messages.noTransactionsSelected),\n          content: this.props.intl.formatMessage(messages.noTransactionsSelectedToDoUndo),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 9\n          }\n        }));\n      }\n      Array.from(document.getElementsByClassName('transactions-checkboxes')).forEach(function (element) {\n        element.firstElementChild.checked = false;\n      });\n    }\n\n    /**\n     * On Prev\n     * @method onPrev\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onPrev\",\n    value: function onPrev() {\n      0 < this.state.lowerIndex && this.setState({\n        upperIndex: this.state.lowerIndex,\n        lowerIndex: this.state.lowerIndex - this.state.defaultTransactionsLenInTable\n      });\n    }\n\n    /**\n     * On Next\n     * @method onNext\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onNext\",\n    value: function onNext() {\n      this.props.transactions.length > this.state.upperIndex && this.setState({\n        lowerIndex: this.state.upperIndex,\n        upperIndex: this.state.upperIndex + this.state.defaultTransactionsLenInTable\n      });\n    }\n\n    /**\n     * Handle next and prev buttons visiblity when transactions are sorted\n     * @method handleSortedNextPrevButtons\n     * @returns {undefined}\n     */\n  }, {\n    key: \"handleSortedNextPrevButtons\",\n    value: function handleSortedNextPrevButtons() {\n      this.state.upperIndex >= this.state.sortedTransactions.length && this.state.showNextButton && this.setState({\n        showNextButton: false\n      });\n      this.state.upperIndex < this.state.sortedTransactions.length && !this.state.showNextButton && this.setState({\n        showNextButton: true\n      });\n      this.state.lowerIndex <= 0 && this.state.showPrevButton && this.setState({\n        showPrevButton: false\n      });\n      this.state.lowerIndex > 0 && !this.state.showPrevButton && this.setState({\n        showPrevButton: true\n      });\n    }\n\n    /**\n     * Handle next and prev buttons visiblity when transactions are not sorted\n     * @method handleNotSortedNextPrevButtons\n     * @returns {undefined}\n     */\n  }, {\n    key: \"handleNotSortedNextPrevButtons\",\n    value: function handleNotSortedNextPrevButtons() {\n      var _this$props$transacti, _this$props$transacti2;\n      this.state.upperIndex >= ((_this$props$transacti = this.props.transactions) === null || _this$props$transacti === void 0 ? void 0 : _this$props$transacti.length) && this.state.showNextButton && this.setState({\n        showNextButton: false\n      });\n      this.state.upperIndex < ((_this$props$transacti2 = this.props.transactions) === null || _this$props$transacti2 === void 0 ? void 0 : _this$props$transacti2.length) && !this.state.showNextButton && this.setState({\n        showNextButton: true\n      });\n      this.state.lowerIndex <= 0 && this.state.showPrevButton && this.setState({\n        showPrevButton: false\n      });\n      this.state.lowerIndex > 0 && !this.state.showPrevButton && this.setState({\n        showPrevButton: true\n      });\n    }\n\n    /**\n     * Handle next, prev buttons and table visiblity\n     * @method handleTableVisiblity\n     * @returns {undefined}\n     */\n  }, {\n    key: \"handleTableVisiblity\",\n    value: function handleTableVisiblity() {\n      if (this.state.sortedTransactions.length > 0) {\n        this.handleSortedNextPrevButtons();\n      } else if (!this.state.isSortingTypeSelected) {\n        var _this$props$transacti3, _this$props$transacti4;\n        ((_this$props$transacti3 = this.props.transactions) === null || _this$props$transacti3 === void 0 ? void 0 : _this$props$transacti3.length) > 0 && this.state.isTransactionsNotFound && this.setState({\n          isTransactionsNotFound: false\n        });\n        ((_this$props$transacti4 = this.props.transactions) === null || _this$props$transacti4 === void 0 ? void 0 : _this$props$transacti4.length) <= 0 && !this.state.isTransactionsNotFound && this.setState({\n          isTransactionsNotFound: true\n        });\n        this.handleNotSortedNextPrevButtons();\n      } else {\n        this.handleNotSortedNextPrevButtons();\n      }\n    }\n\n    /**\n     * Check transactions undone status\n     * @method checkTransactionsUndoneStatus\n     * @returns {undefined}\n     */\n  }, {\n    key: \"checkTransactionsUndoneStatus\",\n    value: function checkTransactionsUndoneStatus() {\n      if (this.props.revertRequest.error && this.props.revertRequest.error !== null && this.state.isClickedOnUndoButton) {\n        this.setState({\n          isClickedOnUndoButton: false\n        });\n        toast.error(__jsx(Toast, {\n          error: true,\n          title: this.props.intl.formatMessage(messages.error),\n          content: this.props.intl.formatMessage(messages.failedToUndoTransactions),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 477,\n            columnNumber: 9\n          }\n        }));\n      } else if (this.props.revertRequest.error === null && this.state.isClickedOnUndoButton) {\n        this.setState({\n          isClickedOnUndoButton: false\n        });\n        toast.success(__jsx(Toast, {\n          success: true,\n          title: this.props.intl.formatMessage(messages.success),\n          content: this.props.intl.formatMessage(messages.successfullyUndoneTransactions),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 493,\n            columnNumber: 9\n          }\n        }));\n      }\n    }\n\n    /**\n     * Render method.\n     * @method render\n     * @returns {string} Markup for the component.\n     */\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props$transacti5,\n        _this$props$transacti6,\n        _this2 = this;\n      var transactionsRange = this.state.sortedTransactions.length > 0 && this.state.sortedTransactions.slice(this.state.lowerIndex, this.state.upperIndex) || ((_this$props$transacti5 = this.props.transactions) === null || _this$props$transacti5 === void 0 ? void 0 : _this$props$transacti5.slice(this.state.lowerIndex, this.state.upperIndex));\n      this.handleTableVisiblity();\n      this.checkTransactionsUndoneStatus();\n      return __jsx(Container, {\n        id: \"page-undo\",\n        className: \"controlpanel-undo\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 524,\n          columnNumber: 7\n        }\n      }, __jsx(Helmet, {\n        title: \"Undo\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 525,\n          columnNumber: 9\n        }\n      }), __jsx(Segment.Group, {\n        raised: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 9\n        }\n      }, __jsx(Segment, {\n        className: \"primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 11\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"Undo Controlpanel\",\n        defaultMessage: \"Undo Controlpanel\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 528,\n          columnNumber: 13\n        }\n      })), __jsx(Segment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 11\n        }\n      }, ((_this$props$transacti6 = this.props.transactions) === null || _this$props$transacti6 === void 0 ? void 0 : _this$props$transacti6.length) > 0 && __jsx(Form, {\n        schema: {\n          fieldsets: [{\n            id: 'default',\n            title: this.props.intl.formatMessage(messages[\"default\"]),\n            fields: this.state.isSortingTypeSelected ? ['sortingTypes', this.state.sortType.toLowerCase() === 'user name' && 'sortByUsername' || this.state.sortType.toLowerCase() === 'path' && 'sortByPath' || this.state.sortType.toLowerCase() === 'date' && 'sortByDate'] : ['sortingTypes']\n          }],\n          properties: {\n            sortingTypes: {\n              title: this.props.intl.formatMessage(messages.sortBy),\n              description: this.props.intl.formatMessage(messages.sortByDescription),\n              type: 'string',\n              choices: _map(['User Name', 'Path', 'Date'], function (type) {\n                return [type, type];\n              })\n            },\n            sortByUsername: {\n              title: \"Enter Username\",\n              type: 'string'\n            },\n            sortByPath: {\n              title: \"Enter Path\",\n              type: 'string'\n            },\n            sortByDate: {\n              title: \"Enter Date and Time\",\n              type: 'date'\n            }\n          },\n          required: []\n        },\n        error: this.state.isEmptyInputForSorting ? {\n          message: 'Please enter any input to perform sorting'\n        } : undefined,\n        onChangeFormData: this.onSelect,\n        onSubmit: this.state.isSortingTypeSelected ? this.onSort : undefined,\n        onCancel: this.state.isSortingTypeSelected ? this.onCancel : undefined,\n        resetOnCancel: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 15\n        }\n      })), __jsx(Segment.Group, {\n        raised: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 598,\n          columnNumber: 11\n        }\n      }, __jsx(Segment, {\n        className: \"primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 599,\n          columnNumber: 13\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"Transactions\",\n        defaultMessage: \"Transactions\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 600,\n          columnNumber: 15\n        }\n      })), this.state.isTransactionsNotFound ? __jsx(Segment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 606,\n          columnNumber: 15\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"No Transactions Found\",\n        defaultMessage: \"No transactions found\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 607,\n          columnNumber: 17\n        }\n      })) : __jsx(Table, {\n        selectable: true,\n        fixed: true,\n        celled: true,\n        compact: true,\n        singleLine: true,\n        attached: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 613,\n          columnNumber: 15\n        }\n      }, __jsx(Table.Header, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 614,\n          columnNumber: 17\n        }\n      }, __jsx(Table.Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 615,\n          columnNumber: 19\n        }\n      }, __jsx(Table.HeaderCell, {\n        width: 1,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 616,\n          columnNumber: 21\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"Transactions Checkbox\",\n        defaultMessage: \"#\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 617,\n          columnNumber: 23\n        }\n      })), __jsx(Table.HeaderCell, {\n        width: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 622,\n          columnNumber: 21\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"What\",\n        defaultMessage: \"What\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 623,\n          columnNumber: 23\n        }\n      })), __jsx(Table.HeaderCell, {\n        width: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 625,\n          columnNumber: 21\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"Who\",\n        defaultMessage: \"Who\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 626,\n          columnNumber: 23\n        }\n      })), __jsx(Table.HeaderCell, {\n        width: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 628,\n          columnNumber: 21\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"When\",\n        defaultMessage: \"When\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 629,\n          columnNumber: 23\n        }\n      })), __jsx(Table.HeaderCell, {\n        width: 3,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 631,\n          columnNumber: 21\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"Note\",\n        defaultMessage: \"Note\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 632,\n          columnNumber: 23\n        }\n      })), __jsx(Table.HeaderCell, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 634,\n          columnNumber: 21\n        }\n      }))), __jsx(Table.Body, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 637,\n          columnNumber: 17\n        }\n      }, _map(transactionsRange, function (transaction) {\n        return __jsx(Table.Row, {\n          id: transaction.id,\n          key: transaction.id,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 639,\n            columnNumber: 21\n          }\n        }, __jsx(Table.Cell, {\n          width: 1,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 640,\n            columnNumber: 23\n          }\n        }, __jsx(Input, {\n          type: \"checkbox\",\n          className: \"transactions-checkboxes\",\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 641,\n            columnNumber: 25\n          }\n        })), __jsx(Table.Cell, {\n          width: 3,\n          title: [transaction.description].join(' '),\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 646,\n            columnNumber: 23\n          }\n        }, transaction.description), __jsx(Table.Cell, {\n          width: 3,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 652,\n            columnNumber: 23\n          }\n        }, transaction.username ? transaction.username : 'Zope'), __jsx(Table.Cell, {\n          width: 3,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 655,\n            columnNumber: 23\n          }\n        }, transaction.time), __jsx(Table.Cell, {\n          width: 3,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 656,\n            columnNumber: 23\n          }\n        }, transaction.description.includes('Undo') ? 'Undone' : ''));\n      })), __jsx(Table.Footer, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 664,\n          columnNumber: 17\n        }\n      }, __jsx(Table.Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 665,\n          columnNumber: 19\n        }\n      }, __jsx(Table.HeaderCell, {\n        textAlign: \"center\",\n        colSpan: \"6\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 666,\n          columnNumber: 21\n        }\n      }, __jsx(Menu, {\n        pagination: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 667,\n          columnNumber: 23\n        }\n      }, __jsx(Menu.Item, {\n        as: \"a\",\n        id: \"prev-button\",\n        icon: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 668,\n          columnNumber: 25\n        }\n      }, this.state.showPrevButton ? __jsx(Icon, {\n        onClick: this.onPrev,\n        name: prevIcon,\n        title: \"Prev\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 670,\n          columnNumber: 29\n        }\n      }) : __jsx(\"div\", {\n        style: {\n          width: '36px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 676,\n          columnNumber: 29\n        }\n      })), __jsx(Menu.Item, {\n        as: \"a\",\n        icon: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 679,\n          columnNumber: 25\n        }\n      }, __jsx(Icon, {\n        name: undoSVG,\n        id: \"undo-button\",\n        className: \"circled\",\n        size: \"30px\",\n        title: this.props.intl.formatMessage(messages.undo),\n        onClick: this.onUndo,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 680,\n          columnNumber: 27\n        }\n      })), __jsx(Menu.Item, {\n        as: \"a\",\n        id: \"next-button\",\n        icon: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 689,\n          columnNumber: 25\n        }\n      }, this.state.showNextButton ? __jsx(Icon, {\n        onClick: this.onNext,\n        name: nextIcon,\n        title: \"Next\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 691,\n          columnNumber: 29\n        }\n      }) : __jsx(\"div\", {\n        style: {\n          width: '36px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 697,\n          columnNumber: 29\n        }\n      }))))))))), this.state.isClient && __jsx(Portal, {\n        node: document.getElementById('toolbar'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 709,\n          columnNumber: 11\n        }\n      }, __jsx(Toolbar, {\n        pathname: this.props.pathname,\n        hideDefaultViewButtons: true,\n        inner: __jsx(React.Fragment, null, __jsx(Link, {\n          to: \"/controlpanel\",\n          className: \"item\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 715,\n            columnNumber: 19\n          }\n        }, __jsx(Icon, {\n          name: backSVG,\n          \"aria-label\": this.props.intl.formatMessage(messages.back),\n          className: \"contents circled\",\n          size: \"30px\",\n          title: this.props.intl.formatMessage(messages.back),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 716,\n            columnNumber: 21\n          }\n        }))),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 710,\n          columnNumber: 13\n        }\n      })));\n    }\n  }]);\n  return UndoControlpanel;\n}(Component);\n_defineProperty(UndoControlpanel, \"propTypes\", {\n  getTransactions: PropTypes.func.isRequired,\n  revertTransactions: PropTypes.func.isRequired,\n  transactions: PropTypes.arrayOf(PropTypes.shape({\n    description: PropTypes.string,\n    id: PropTypes.string,\n    size: PropTypes.number,\n    time: PropTypes.string,\n    username: PropTypes.string\n  })),\n  revertRequest: PropTypes.shape({\n    loaded: PropTypes.bool,\n    loading: PropTypes.bool\n  }).isRequired\n});\nexport default compose(injectIntl, connect(function (state, props) {\n  return {\n    pathname: props.location.pathname,\n    transactions: state.transactions.transactions_recieved,\n    revertRequest: state.transactions.revert\n  };\n}, {\n  getTransactions: getTransactions,\n  revertTransactions: revertTransactions\n}))(UndoControlpanel);","map":{"version":3,"names":["React","Component","PropTypes","connect","compose","Link","Portal","Container","Segment","Table","Menu","Input","FormattedMessage","defineMessages","injectIntl","Icon","Toolbar","Form","Toast","backSVG","Helmet","nextIcon","prevIcon","undoSVG","getTransactions","revertTransactions","toast","messages","success","error","undo","back","sortBy","sorted","unsorted","sortByDescription","failedToUndoTransactions","successfullyUndoneTransactions","transactionsHaveBeenSorted","transactionsHaveBeenUnsorted","noTransactionsSelected","noTransactionsSelectedToDoUndo","UndoControlpanel","props","state","isClient","sortType","lowerIndex","upperIndex","defaultTransactionsLenInTable","isSortingTypeSelected","sortedTransactions","isEmptyInputForSorting","isTransactionsNotFound","isClickedOnUndoButton","showPrevButton","showNextButton","onCancel","bind","onSort","onSelect","onPrev","onNext","onUndo","handleTableVisiblity","handleNotSortedNextPrevButtons","handleSortedNextPrevButtons","checkTransactionsUndoneStatus","setState","nextProps","revertRequest","loading","loaded","length","info","intl","formatMessage","data","sortingTypes","toLowerCase","value","sortByUsername","sortByPath","sortByDate","undefined","transactions","forEach","element","trim","username","push","includes","setSortedTransactions","id","MSInADay","sortingTimeInMS","Date","parse","endTimeOfSortingDateInMS","startTimeOfSortingDateInMS","time","transactionsSelected","undoTransactionsIds","slice","transaction","document","getElementById","firstElementChild","checked","Array","from","getElementsByClassName","transactionsRange","fieldsets","title","fields","properties","description","type","choices","required","message","join","width","pathname","func","isRequired","arrayOf","shape","string","size","number","bool","location","transactions_recieved","revert"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Controlpanels/UndoControlpanel.jsx"],"sourcesContent":["/**\n * Users controlpanel container.\n * @module components/manage/Controlpanels/UndoControlpanel\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { Portal } from 'react-portal';\nimport { Container, Segment, Table, Menu, Input } from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport { Icon, Toolbar, Form, Toast } from '@plone/volto/components';\nimport backSVG from '@plone/volto/icons/back.svg';\nimport { map } from 'lodash';\nimport { Helmet } from '@plone/volto/helpers';\nimport nextIcon from '@plone/volto/icons/right-key.svg';\nimport prevIcon from '@plone/volto/icons/left-key.svg';\nimport undoSVG from '@plone/volto/icons/undo.svg';\nimport { getTransactions, revertTransactions } from '@plone/volto/actions';\nimport { toast } from 'react-toastify';\n\nconst messages = defineMessages({\n  success: {\n    id: 'Success',\n    defaultMessage: 'Success',\n  },\n  error: {\n    id: 'Error',\n    defaultMessage: 'Error',\n  },\n  undo: {\n    id: 'Undo',\n    defaultMessage: 'Undo',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  sortBy: {\n    id: 'Sort By',\n    defaultMessage: 'Sort by',\n  },\n  sorted: {\n    id: 'Sorted',\n    defaultMessage: 'Sorted',\n  },\n  unsorted: {\n    id: 'Unsorted',\n    defaultMessage: 'Unsorted',\n  },\n  sortByDescription: {\n    id: 'Sort transactions by User-Name, Path or Date',\n    defaultMessage: 'Sort transactions by User-Name, Path or Date',\n  },\n  failedToUndoTransactions: {\n    id: 'Failed To Undo Transactions',\n    defaultMessage: 'Failed to undo transactions',\n  },\n  successfullyUndoneTransactions: {\n    id: 'Successfully Undone Transactions',\n    defaultMessage: 'Successfully undone transactions',\n  },\n  transactionsHaveBeenSorted: {\n    id: 'Transactions Have Been Sorted',\n    defaultMessage: 'Transactions have been sorted',\n  },\n  transactionsHaveBeenUnsorted: {\n    id: 'Transactions Have Been Unsorted',\n    defaultMessage: 'Transactions have been unsorted',\n  },\n  noTransactionsSelected: {\n    id: 'No Transactions Selected',\n    defaultMessage: 'No transactions selected',\n  },\n  noTransactionsSelectedToDoUndo: {\n    id: 'No Transactions Selected To Do Undo',\n    defaultMessage: 'No transactions selected to do undo',\n  },\n});\n\n/**\n * UndoControlpanel class.\n * @class UndoControlpanel\n * @extends Component\n */\nclass UndoControlpanel extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    getTransactions: PropTypes.func.isRequired,\n    revertTransactions: PropTypes.func.isRequired,\n    transactions: PropTypes.arrayOf(\n      PropTypes.shape({\n        description: PropTypes.string,\n        id: PropTypes.string,\n        size: PropTypes.number,\n        time: PropTypes.string,\n        username: PropTypes.string,\n      }),\n    ),\n    revertRequest: PropTypes.shape({\n      loaded: PropTypes.bool,\n      loading: PropTypes.bool,\n    }).isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs UndoControlpanel\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      isClient: false,\n      sortType: 'no value',\n      lowerIndex: 0,\n      upperIndex: 20,\n      defaultTransactionsLenInTable: 20,\n      isSortingTypeSelected: false,\n      sortedTransactions: [],\n      isEmptyInputForSorting: false,\n      isTransactionsNotFound: false,\n      isClickedOnUndoButton: false,\n      showPrevButton: false,\n      showNextButton: false,\n    };\n    this.onCancel = this.onCancel.bind(this);\n    this.onSort = this.onSort.bind(this);\n    this.onSelect = this.onSelect.bind(this);\n    this.onPrev = this.onPrev.bind(this);\n    this.onNext = this.onNext.bind(this);\n    this.onUndo = this.onUndo.bind(this);\n    this.handleTableVisiblity = this.handleTableVisiblity.bind(this);\n    this.handleNotSortedNextPrevButtons = this.handleNotSortedNextPrevButtons.bind(\n      this,\n    );\n    this.handleSortedNextPrevButtons = this.handleSortedNextPrevButtons.bind(\n      this,\n    );\n    this.checkTransactionsUndoneStatus = this.checkTransactionsUndoneStatus.bind(\n      this,\n    );\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.setState({\n      isClient: true,\n    });\n    this.props.getTransactions();\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.revertRequest.loading && nextProps.revertRequest.loaded) {\n      this.props.getTransactions();\n    }\n  }\n\n  setSortedTransactions(sortedTransactions) {\n    if (sortedTransactions.length > 0) {\n      this.setState({\n        lowerIndex: 0,\n        upperIndex: this.state.defaultTransactionsLenInTable,\n        sortedTransactions: sortedTransactions,\n        isEmptyInputForSorting: false,\n        isTransactionsNotFound: false,\n      });\n    } else {\n      this.setState({ isTransactionsNotFound: true });\n    }\n  }\n\n  /**\n   * On Cancel\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    if (this.state.sortedTransactions.length > 0) {\n      toast.info(\n        <Toast\n          info\n          title={this.props.intl.formatMessage(messages.unsorted)}\n          content={this.props.intl.formatMessage(\n            messages.transactionsHaveBeenUnsorted,\n          )}\n        />,\n      );\n    }\n    this.setState({\n      isSortingTypeSelected: false,\n      isTransactionsNotFound: false,\n      isEmptyInputForSorting: false,\n      sortType: 'no value',\n      sortedTransactions: [],\n      lowerIndex: 0,\n      upperIndex: this.state.defaultTransactionsLenInTable,\n    });\n  }\n\n  /**\n   * On Select\n   * @method onSelect\n   * @param {object} data\n   * @returns {undefined}\n   */\n  onSelect(data) {\n    if (\n      data !== null &&\n      data.sortingTypes !== null &&\n      this.state.sortType.toLowerCase() === data.sortingTypes.toLowerCase()\n    ) {\n      return;\n    }\n    let sortType = (data !== null && data.sortingTypes) || 'no value';\n\n    if (sortType.toLowerCase() !== 'no value') {\n      this.setState({ isSortingTypeSelected: true });\n      sortType.toLowerCase() === 'user name' &&\n        this.setState({ sortType: 'user name' });\n      sortType.toLowerCase() === 'date' && this.setState({ sortType: 'date' });\n      sortType.toLowerCase() === 'path' && this.setState({ sortType: 'path' });\n    } else {\n      this.onCancel();\n    }\n  }\n\n  /**\n   * On Sort\n   * @method onSort\n   * @param {object} data\n   * @returns {undefined}\n   */\n  onSort(data) {\n    let sortType = data.sortingTypes || 'no value';\n    let value;\n    (sortType.toLowerCase() === 'user name' && (value = data.sortByUsername)) ||\n      (sortType.toLowerCase() === 'path' && (value = data.sortByPath)) ||\n      (sortType.toLowerCase() === 'date' && (value = data.sortByDate)) ||\n      (value = undefined);\n\n    if (sortType.toLowerCase() !== 'no value' && value !== undefined) {\n      let sortedTransactions = [];\n      if (sortType.toLowerCase() === 'user name') {\n        this.props.transactions.forEach((element) => {\n          if (value.trim().toLowerCase() === 'zope' && !element.username) {\n            sortedTransactions.push(element);\n          } else if (\n            element.username\n              .trim()\n              .toLowerCase()\n              .includes(value.trim().toLowerCase())\n          ) {\n            sortedTransactions.push(element);\n          }\n        });\n        this.setSortedTransactions(sortedTransactions);\n      } else if (sortType.toLowerCase() === 'path') {\n        this.props.transactions.forEach((element) => {\n          if (\n            element.id.trim().toLowerCase().includes(value.trim().toLowerCase())\n          ) {\n            sortedTransactions.push(element);\n          }\n        });\n        this.setSortedTransactions(sortedTransactions);\n      } else {\n        // MS is Milli Seconds\n        let MSInADay = 86400000;\n        let sortingTimeInMS = Date.parse(value);\n        let endTimeOfSortingDateInMS =\n          sortingTimeInMS - (sortingTimeInMS % MSInADay) + MSInADay - 1;\n        let startTimeOfSortingDateInMS =\n          sortingTimeInMS - (sortingTimeInMS % MSInADay);\n\n        this.props.transactions.forEach((element) => {\n          if (\n            endTimeOfSortingDateInMS >= Date.parse(element.time) &&\n            Date.parse(element.time) >= startTimeOfSortingDateInMS\n          ) {\n            sortedTransactions.push(element);\n          }\n        });\n        this.setSortedTransactions(sortedTransactions);\n      }\n      toast.info(\n        <Toast\n          info\n          title={this.props.intl.formatMessage(messages.sorted)}\n          content={this.props.intl.formatMessage(\n            messages.transactionsHaveBeenSorted,\n          )}\n        />,\n      );\n    } else {\n      this.setState({ isEmptyInputForSorting: true });\n    }\n  }\n\n  /**\n   * On Undo\n   * @method onUndo\n   * @returns {undefined}\n   */\n  onUndo() {\n    let transactionsSelected = false;\n    let undoTransactionsIds = map(\n      this.props.transactions.slice(0, this.props.transactions.length),\n      (transaction) => {\n        if (\n          document.getElementById(transaction.id) !== null &&\n          document.getElementById(transaction.id).firstElementChild\n            .firstElementChild.firstElementChild.checked\n        ) {\n          transactionsSelected = true;\n          return transaction.id;\n        }\n        return '';\n      },\n    );\n    if (transactionsSelected) {\n      this.setState({\n        isClickedOnUndoButton: true,\n      });\n      this.props.revertTransactions(undoTransactionsIds);\n    } else {\n      toast.error(\n        <Toast\n          error\n          title={this.props.intl.formatMessage(messages.noTransactionsSelected)}\n          content={this.props.intl.formatMessage(\n            messages.noTransactionsSelectedToDoUndo,\n          )}\n        />,\n      );\n    }\n\n    Array.from(\n      document.getElementsByClassName('transactions-checkboxes'),\n    ).forEach((element) => {\n      element.firstElementChild.checked = false;\n    });\n  }\n\n  /**\n   * On Prev\n   * @method onPrev\n   * @returns {undefined}\n   */\n  onPrev() {\n    0 < this.state.lowerIndex &&\n      this.setState({\n        upperIndex: this.state.lowerIndex,\n        lowerIndex:\n          this.state.lowerIndex - this.state.defaultTransactionsLenInTable,\n      });\n  }\n\n  /**\n   * On Next\n   * @method onNext\n   * @returns {undefined}\n   */\n  onNext() {\n    this.props.transactions.length > this.state.upperIndex &&\n      this.setState({\n        lowerIndex: this.state.upperIndex,\n        upperIndex:\n          this.state.upperIndex + this.state.defaultTransactionsLenInTable,\n      });\n  }\n\n  /**\n   * Handle next and prev buttons visiblity when transactions are sorted\n   * @method handleSortedNextPrevButtons\n   * @returns {undefined}\n   */\n  handleSortedNextPrevButtons() {\n    this.state.upperIndex >= this.state.sortedTransactions.length &&\n      this.state.showNextButton &&\n      this.setState({ showNextButton: false });\n\n    this.state.upperIndex < this.state.sortedTransactions.length &&\n      !this.state.showNextButton &&\n      this.setState({ showNextButton: true });\n\n    this.state.lowerIndex <= 0 &&\n      this.state.showPrevButton &&\n      this.setState({ showPrevButton: false });\n\n    this.state.lowerIndex > 0 &&\n      !this.state.showPrevButton &&\n      this.setState({ showPrevButton: true });\n  }\n\n  /**\n   * Handle next and prev buttons visiblity when transactions are not sorted\n   * @method handleNotSortedNextPrevButtons\n   * @returns {undefined}\n   */\n  handleNotSortedNextPrevButtons() {\n    this.state.upperIndex >= this.props.transactions?.length &&\n      this.state.showNextButton &&\n      this.setState({ showNextButton: false });\n\n    this.state.upperIndex < this.props.transactions?.length &&\n      !this.state.showNextButton &&\n      this.setState({ showNextButton: true });\n\n    this.state.lowerIndex <= 0 &&\n      this.state.showPrevButton &&\n      this.setState({ showPrevButton: false });\n\n    this.state.lowerIndex > 0 &&\n      !this.state.showPrevButton &&\n      this.setState({ showPrevButton: true });\n  }\n\n  /**\n   * Handle next, prev buttons and table visiblity\n   * @method handleTableVisiblity\n   * @returns {undefined}\n   */\n  handleTableVisiblity() {\n    if (this.state.sortedTransactions.length > 0) {\n      this.handleSortedNextPrevButtons();\n    } else if (!this.state.isSortingTypeSelected) {\n      this.props.transactions?.length > 0 &&\n        this.state.isTransactionsNotFound &&\n        this.setState({ isTransactionsNotFound: false });\n\n      this.props.transactions?.length <= 0 &&\n        !this.state.isTransactionsNotFound &&\n        this.setState({ isTransactionsNotFound: true });\n\n      this.handleNotSortedNextPrevButtons();\n    } else {\n      this.handleNotSortedNextPrevButtons();\n    }\n  }\n\n  /**\n   * Check transactions undone status\n   * @method checkTransactionsUndoneStatus\n   * @returns {undefined}\n   */\n  checkTransactionsUndoneStatus() {\n    if (\n      this.props.revertRequest.error &&\n      this.props.revertRequest.error !== null &&\n      this.state.isClickedOnUndoButton\n    ) {\n      this.setState({\n        isClickedOnUndoButton: false,\n      });\n      toast.error(\n        <Toast\n          error\n          title={this.props.intl.formatMessage(messages.error)}\n          content={this.props.intl.formatMessage(\n            messages.failedToUndoTransactions,\n          )}\n        />,\n      );\n    } else if (\n      this.props.revertRequest.error === null &&\n      this.state.isClickedOnUndoButton\n    ) {\n      this.setState({\n        isClickedOnUndoButton: false,\n      });\n      toast.success(\n        <Toast\n          success\n          title={this.props.intl.formatMessage(messages.success)}\n          content={this.props.intl.formatMessage(\n            messages.successfullyUndoneTransactions,\n          )}\n        />,\n      );\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const transactionsRange =\n      (this.state.sortedTransactions.length > 0 &&\n        this.state.sortedTransactions.slice(\n          this.state.lowerIndex,\n          this.state.upperIndex,\n        )) ||\n      this.props.transactions?.slice(\n        this.state.lowerIndex,\n        this.state.upperIndex,\n      );\n    this.handleTableVisiblity();\n    this.checkTransactionsUndoneStatus();\n\n    return (\n      <Container id=\"page-undo\" className=\"controlpanel-undo\">\n        <Helmet title=\"Undo\" />\n        <Segment.Group raised>\n          <Segment className=\"primary\">\n            <FormattedMessage\n              id=\"Undo Controlpanel\"\n              defaultMessage=\"Undo Controlpanel\"\n            />\n          </Segment>\n          <Segment>\n            {this.props.transactions?.length > 0 && (\n              <Form\n                schema={{\n                  fieldsets: [\n                    {\n                      id: 'default',\n                      title: this.props.intl.formatMessage(messages.default),\n                      fields: this.state.isSortingTypeSelected\n                        ? [\n                            'sortingTypes',\n                            (this.state.sortType.toLowerCase() ===\n                              'user name' &&\n                              'sortByUsername') ||\n                              (this.state.sortType.toLowerCase() === 'path' &&\n                                'sortByPath') ||\n                              (this.state.sortType.toLowerCase() === 'date' &&\n                                'sortByDate'),\n                          ]\n                        : ['sortingTypes'],\n                    },\n                  ],\n                  properties: {\n                    sortingTypes: {\n                      title: this.props.intl.formatMessage(messages.sortBy),\n                      description: this.props.intl.formatMessage(\n                        messages.sortByDescription,\n                      ),\n                      type: 'string',\n                      choices: map(['User Name', 'Path', 'Date'], (type) => [\n                        type,\n                        type,\n                      ]),\n                    },\n                    sortByUsername: {\n                      title: `Enter Username`,\n                      type: 'string',\n                    },\n                    sortByPath: {\n                      title: `Enter Path`,\n                      type: 'string',\n                    },\n                    sortByDate: {\n                      title: `Enter Date and Time`,\n                      type: 'date',\n                    },\n                  },\n                  required: [],\n                }}\n                error={\n                  this.state.isEmptyInputForSorting\n                    ? { message: 'Please enter any input to perform sorting' }\n                    : undefined\n                }\n                onChangeFormData={this.onSelect}\n                onSubmit={\n                  this.state.isSortingTypeSelected ? this.onSort : undefined\n                }\n                onCancel={\n                  this.state.isSortingTypeSelected ? this.onCancel : undefined\n                }\n                resetOnCancel={true}\n              />\n            )}\n          </Segment>\n          <Segment.Group raised>\n            <Segment className=\"primary\">\n              <FormattedMessage\n                id=\"Transactions\"\n                defaultMessage=\"Transactions\"\n              />\n            </Segment>\n            {this.state.isTransactionsNotFound ? (\n              <Segment>\n                <FormattedMessage\n                  id=\"No Transactions Found\"\n                  defaultMessage=\"No transactions found\"\n                />\n              </Segment>\n            ) : (\n              <Table selectable fixed celled compact singleLine attached>\n                <Table.Header>\n                  <Table.Row>\n                    <Table.HeaderCell width={1}>\n                      <FormattedMessage\n                        id=\"Transactions Checkbox\"\n                        defaultMessage=\"#\"\n                      />\n                    </Table.HeaderCell>\n                    <Table.HeaderCell width={3}>\n                      <FormattedMessage id=\"What\" defaultMessage=\"What\" />\n                    </Table.HeaderCell>\n                    <Table.HeaderCell width={3}>\n                      <FormattedMessage id=\"Who\" defaultMessage=\"Who\" />\n                    </Table.HeaderCell>\n                    <Table.HeaderCell width={3}>\n                      <FormattedMessage id=\"When\" defaultMessage=\"When\" />\n                    </Table.HeaderCell>\n                    <Table.HeaderCell width={3}>\n                      <FormattedMessage id=\"Note\" defaultMessage=\"Note\" />\n                    </Table.HeaderCell>\n                    <Table.HeaderCell />\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                  {map(transactionsRange, (transaction) => (\n                    <Table.Row id={transaction.id} key={transaction.id}>\n                      <Table.Cell width={1}>\n                        <Input\n                          type=\"checkbox\"\n                          className=\"transactions-checkboxes\"\n                        />\n                      </Table.Cell>\n                      <Table.Cell\n                        width={3}\n                        title={[transaction.description].join(' ')}\n                      >\n                        {transaction.description}\n                      </Table.Cell>\n                      <Table.Cell width={3}>\n                        {transaction.username ? transaction.username : 'Zope'}\n                      </Table.Cell>\n                      <Table.Cell width={3}>{transaction.time}</Table.Cell>\n                      <Table.Cell width={3}>\n                        {transaction.description.includes('Undo')\n                          ? 'Undone'\n                          : ''}\n                      </Table.Cell>\n                    </Table.Row>\n                  ))}\n                </Table.Body>\n                <Table.Footer>\n                  <Table.Row>\n                    <Table.HeaderCell textAlign=\"center\" colSpan=\"6\">\n                      <Menu pagination>\n                        <Menu.Item as=\"a\" id=\"prev-button\" icon>\n                          {this.state.showPrevButton ? (\n                            <Icon\n                              onClick={this.onPrev}\n                              name={prevIcon}\n                              title=\"Prev\"\n                            />\n                          ) : (\n                            <div style={{ width: '36px' }}></div>\n                          )}\n                        </Menu.Item>\n                        <Menu.Item as=\"a\" icon>\n                          <Icon\n                            name={undoSVG}\n                            id=\"undo-button\"\n                            className=\"circled\"\n                            size=\"30px\"\n                            title={this.props.intl.formatMessage(messages.undo)}\n                            onClick={this.onUndo}\n                          />\n                        </Menu.Item>\n                        <Menu.Item as=\"a\" id=\"next-button\" icon>\n                          {this.state.showNextButton ? (\n                            <Icon\n                              onClick={this.onNext}\n                              name={nextIcon}\n                              title=\"Next\"\n                            />\n                          ) : (\n                            <div style={{ width: '36px' }}></div>\n                          )}\n                        </Menu.Item>\n                      </Menu>\n                    </Table.HeaderCell>\n                  </Table.Row>\n                </Table.Footer>\n              </Table>\n            )}\n          </Segment.Group>\n        </Segment.Group>\n        {this.state.isClient && (\n          <Portal node={document.getElementById('toolbar')}>\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={\n                <>\n                  <Link to=\"/controlpanel\" className=\"item\">\n                    <Icon\n                      name={backSVG}\n                      aria-label={this.props.intl.formatMessage(messages.back)}\n                      className=\"contents circled\"\n                      size=\"30px\"\n                      title={this.props.intl.formatMessage(messages.back)}\n                    />\n                  </Link>\n                </>\n              }\n            />\n          </Portal>\n        )}\n      </Container>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      pathname: props.location.pathname,\n      transactions: state.transactions.transactions_recieved,\n      revertRequest: state.transactions.revert,\n    }),\n    { getTransactions, revertTransactions },\n  ),\n)(UndoControlpanel);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Success","defaultMessage":"Success"},{"id":"Error","defaultMessage":"Error"},{"id":"Undo","defaultMessage":"Undo"},{"id":"Back","defaultMessage":"Back"},{"id":"Default","defaultMessage":"Default"},{"id":"Sort By","defaultMessage":"Sort by"},{"id":"Sorted","defaultMessage":"Sorted"},{"id":"Unsorted","defaultMessage":"Unsorted"},{"id":"Sort transactions by User-Name, Path or Date","defaultMessage":"Sort transactions by User-Name, Path or Date"},{"id":"Failed To Undo Transactions","defaultMessage":"Failed to undo transactions"},{"id":"Successfully Undone Transactions","defaultMessage":"Successfully undone transactions"},{"id":"Transactions Have Been Sorted","defaultMessage":"Transactions have been sorted"},{"id":"Transactions Have Been Unsorted","defaultMessage":"Transactions have been unsorted"},{"id":"No Transactions Selected","defaultMessage":"No transactions selected"},{"id":"No Transactions Selected To Do Undo","defaultMessage":"No transactions selected to do undo"},{"id":"Undo Controlpanel","defaultMessage":"Undo Controlpanel"},{"id":"Transactions","defaultMessage":"Transactions"},{"id":"No Transactions Found","defaultMessage":"No transactions found"},{"id":"Transactions Checkbox","defaultMessage":"#"},{"id":"What","defaultMessage":"What"},{"id":"Who","defaultMessage":"Who"},{"id":"When","defaultMessage":"When"},{"id":"Note","defaultMessage":"Note"}]}},"sourceType":"module","externalDependencies":[]}