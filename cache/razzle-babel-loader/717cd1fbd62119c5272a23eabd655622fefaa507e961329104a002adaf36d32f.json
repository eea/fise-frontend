{"ast":null,"code":"import _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-resize-helper/src/ScreenSize/ScreenSize.jsx\";\nvar __jsx = React.createElement;\n/* eslint-disable no-extend-native */\nimport React from 'react';\nimport cs from 'classnames';\nimport config from '@plone/volto/registry';\nimport { BodyClass } from '@plone/volto/helpers';\nimport { updateScreen as _updateScreen } from '../actions';\nimport { detectTouchScreen } from '../utils';\nNumber.prototype.toPixel = function toPixel() {\n  return \"\".concat(this, \"px\");\n};\nvar debounce = function debounce(func) {\n  var timer;\n  return function (event) {\n    if (timer) clearTimeout(timer);\n    timer = setTimeout(func, config.settings.resizeDebounce, event);\n  };\n};\nvar ScreenSize = /*#__PURE__*/function (_React$Component) {\n  _inherits(ScreenSize, _React$Component);\n  var _super = _createSuper(ScreenSize);\n  function ScreenSize(props) {\n    var _this;\n    _classCallCheck(this, ScreenSize);\n    _this = _super.call(this, props);\n    _this.updateScreen = _this.updateScreen.bind(_assertThisInitialized(_this));\n    _this.state = {\n      withScrollbar: false\n    };\n    return _this;\n  }\n  _createClass(ScreenSize, [{\n    key: \"updateScreen\",\n    value: function updateScreen() {\n      var _document$querySelect;\n      var initialState = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var screen = {\n        height: window.screen.availHeight || 0,\n        width: window.screen.availWidth || 0\n      };\n      var page = {\n        height: window.innerHeight || 0,\n        width: window.innerWidth || 0\n      };\n      var newScreen = _objectSpread(_objectSpread(_objectSpread({}, initialState), screen), {}, {\n        page: page,\n        content: {\n          offsetTop: ((_document$querySelect = document.querySelector('div.content-area')) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.offsetTop) || null\n        }\n      });\n      if (document.body.scrollHeight > document.body.clientHeight && !this.state.withScrollbar) {\n        this.setState({\n          withScrollbar: true\n        });\n      } else if (document.body.scrollHeight <= document.body.clientHeight && this.state.withScrollbar) {\n        this.setState({\n          withScrollbar: false\n        });\n      }\n      this.props.dispatch(_updateScreen(newScreen));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (__SERVER__) return;\n      this.updateScreen({\n        hasTouchScreen: detectTouchScreen(),\n        browserToolbarHeight: window.outerHeight - window.innerHeight\n      });\n      window.addEventListener('resize', debounce(this.updateScreen));\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (__SERVER__) return;\n      window.removeEventListener('resize', debounce(this.updateScreen));\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props$content, _prevProps$content;\n      if (__SERVER__) return;\n      if (((_this$props$content = this.props.content) === null || _this$props$content === void 0 ? void 0 : _this$props$content['@id']) !== ((_prevProps$content = prevProps.content) === null || _prevProps$content === void 0 ? void 0 : _prevProps$content['@id'])) {\n        this.updateScreen();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(BodyClass, {\n        className: cs({\n          'with-scrollbar': this.state.withScrollbar\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 7\n        }\n      });\n    }\n  }]);\n  return ScreenSize;\n}(React.Component);\nexport default ScreenSize;","map":{"version":3,"names":["React","cs","config","BodyClass","updateScreen","detectTouchScreen","Number","prototype","toPixel","debounce","func","timer","event","clearTimeout","setTimeout","settings","resizeDebounce","ScreenSize","props","bind","state","withScrollbar","initialState","screen","height","window","availHeight","width","availWidth","page","innerHeight","innerWidth","newScreen","content","offsetTop","document","querySelector","body","scrollHeight","clientHeight","setState","dispatch","__SERVER__","hasTouchScreen","browserToolbarHeight","outerHeight","addEventListener","removeEventListener","prevProps","Component"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-resize-helper/src/ScreenSize/ScreenSize.jsx"],"sourcesContent":["/* eslint-disable no-extend-native */\nimport React from 'react';\nimport cs from 'classnames';\nimport config from '@plone/volto/registry';\nimport { BodyClass } from '@plone/volto/helpers';\nimport { updateScreen } from '../actions';\nimport { detectTouchScreen } from '../utils';\n\nNumber.prototype.toPixel = function toPixel() {\n  return `${this}px`;\n};\n\nconst debounce = (func) => {\n  let timer;\n  return (event) => {\n    if (timer) clearTimeout(timer);\n    timer = setTimeout(func, config.settings.resizeDebounce, event);\n  };\n};\n\nclass ScreenSize extends React.Component {\n  constructor(props) {\n    super(props);\n    this.updateScreen = this.updateScreen.bind(this);\n    this.state = {\n      withScrollbar: false,\n    };\n  }\n\n  updateScreen(initialState = {}) {\n    const screen = {\n      height: window.screen.availHeight || 0,\n      width: window.screen.availWidth || 0,\n    };\n\n    const page = {\n      height: window.innerHeight || 0,\n      width: window.innerWidth || 0,\n    };\n\n    const newScreen = {\n      ...initialState,\n      ...screen,\n      page,\n      content: {\n        offsetTop:\n          document.querySelector('div.content-area')?.offsetTop || null,\n      },\n    };\n\n    if (\n      document.body.scrollHeight > document.body.clientHeight &&\n      !this.state.withScrollbar\n    ) {\n      this.setState({ withScrollbar: true });\n    } else if (\n      document.body.scrollHeight <= document.body.clientHeight &&\n      this.state.withScrollbar\n    ) {\n      this.setState({ withScrollbar: false });\n    }\n\n    this.props.dispatch(updateScreen(newScreen));\n  }\n\n  componentDidMount() {\n    if (__SERVER__) return;\n    this.updateScreen({\n      hasTouchScreen: detectTouchScreen(),\n      browserToolbarHeight: window.outerHeight - window.innerHeight,\n    });\n    window.addEventListener('resize', debounce(this.updateScreen));\n  }\n\n  componentWillUnmount() {\n    if (__SERVER__) return;\n    window.removeEventListener('resize', debounce(this.updateScreen));\n  }\n\n  componentDidUpdate(prevProps) {\n    if (__SERVER__) return;\n    if (this.props.content?.['@id'] !== prevProps.content?.['@id']) {\n      this.updateScreen();\n    }\n  }\n\n  render() {\n    return (\n      <BodyClass\n        className={cs({ 'with-scrollbar': this.state.withScrollbar })}\n      />\n    );\n  }\n}\n\nexport default ScreenSize;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}