{"ast":null,"code":"import _map from \"lodash/map\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport { flattenToAppURL } from '@plone/volto/helpers';\nimport { GET_NAVIGATION } from '@plone/volto/constants/ActionTypes';\nconst initialState = {\n  error: null,\n  items: [],\n  loaded: false,\n  loading: false\n};\n\n/**\n * Recursive function that process the items returned by the navigation\n * endpoint\n * @function getRecursiveItems\n * @param {array} items The items inside a navigation response.\n * @returns {*} The navigation items object (recursive)\n */\nfunction getRecursiveItems(items) {\n  return _map(items, item => _objectSpread({\n    title: item.title,\n    description: item.description,\n    url: flattenToAppURL(item['@id'])\n  }, item.items && {\n    items: getRecursiveItems(item.items)\n  }));\n}\n\n/**\n * Navigation reducer.\n * @function navigation\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function navigation(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${GET_NAVIGATION}_PENDING`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: null,\n        loaded: false,\n        loading: true\n      });\n    case `${GET_NAVIGATION}_SUCCESS`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: null,\n        items: getRecursiveItems(action.result.items),\n        loaded: true,\n        loading: false\n      });\n    case `${GET_NAVIGATION}_FAIL`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.error,\n        items: [],\n        loaded: false,\n        loading: false\n      });\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["flattenToAppURL","GET_NAVIGATION","initialState","error","items","loaded","loading","getRecursiveItems","item","title","description","url","navigation","state","action","type","result"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/reducers/navigation/navigation.js"],"sourcesContent":["/**\n * Navigation reducer.\n * @module reducers/navigation/navigation\n */\n\nimport { map } from 'lodash';\nimport { flattenToAppURL } from '@plone/volto/helpers';\n\nimport { GET_NAVIGATION } from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {\n  error: null,\n  items: [],\n  loaded: false,\n  loading: false,\n};\n\n/**\n * Recursive function that process the items returned by the navigation\n * endpoint\n * @function getRecursiveItems\n * @param {array} items The items inside a navigation response.\n * @returns {*} The navigation items object (recursive)\n */\nfunction getRecursiveItems(items) {\n  return map(items, (item) => ({\n    title: item.title,\n    description: item.description,\n    url: flattenToAppURL(item['@id']),\n    ...(item.items && { items: getRecursiveItems(item.items) }),\n  }));\n}\n\n/**\n * Navigation reducer.\n * @function navigation\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function navigation(state = initialState, action = {}) {\n  switch (action.type) {\n    case `${GET_NAVIGATION}_PENDING`:\n      return {\n        ...state,\n        error: null,\n        loaded: false,\n        loading: true,\n      };\n    case `${GET_NAVIGATION}_SUCCESS`:\n      return {\n        ...state,\n        error: null,\n        items: getRecursiveItems(action.result.items),\n        loaded: true,\n        loading: false,\n      };\n    case `${GET_NAVIGATION}_FAIL`:\n      return {\n        ...state,\n        error: action.error,\n        items: [],\n        loaded: false,\n        loading: false,\n      };\n    default:\n      return state;\n  }\n}\n"],"mappings":";;;;AAMA,SAASA,eAAe,QAAQ,sBAAsB;AAEtD,SAASC,cAAc,QAAQ,oCAAoC;AAEnE,MAAMC,YAAY,GAAG;EACnBC,KAAK,EAAE,IAAI;EACXC,KAAK,EAAE,EAAE;EACTC,MAAM,EAAE,KAAK;EACbC,OAAO,EAAE;AACX,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,iBAAiB,CAACH,KAAK,EAAE;EAChC,OAAO,KAAIA,KAAK,EAAGI,IAAI;IACrBC,KAAK,EAAED,IAAI,CAACC,KAAK;IACjBC,WAAW,EAAEF,IAAI,CAACE,WAAW;IAC7BC,GAAG,EAAEX,eAAe,CAACQ,IAAI,CAAC,KAAK,CAAC;EAAC,GAC7BA,IAAI,CAACJ,KAAK,IAAI;IAAEA,KAAK,EAAEG,iBAAiB,CAACC,IAAI,CAACJ,KAAK;EAAE,CAAC,CAC1D,CAAC;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAASQ,UAAU,CAACC,KAAK,GAAGX,YAAY,EAAEY,MAAM,GAAG,CAAC,CAAC,EAAE;EACpE,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAM,GAAEd,cAAe,UAAS;MAC9B,uCACKY,KAAK;QACRV,KAAK,EAAE,IAAI;QACXE,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;MAAI;IAEjB,KAAM,GAAEL,cAAe,UAAS;MAC9B,uCACKY,KAAK;QACRV,KAAK,EAAE,IAAI;QACXC,KAAK,EAAEG,iBAAiB,CAACO,MAAM,CAACE,MAAM,CAACZ,KAAK,CAAC;QAC7CC,MAAM,EAAE,IAAI;QACZC,OAAO,EAAE;MAAK;IAElB,KAAM,GAAEL,cAAe,OAAM;MAC3B,uCACKY,KAAK;QACRV,KAAK,EAAEW,MAAM,CAACX,KAAK;QACnBC,KAAK,EAAE,EAAE;QACTC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;MAAK;IAElB;MACE,OAAOO,KAAK;EAAC;AAEnB"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}