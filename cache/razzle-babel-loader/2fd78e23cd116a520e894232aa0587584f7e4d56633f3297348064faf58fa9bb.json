{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Widgets/RecurrenceWidget/Occurences.jsx\";\nvar __jsx = React.createElement;\n/**\n * Occurences component.\n * @module components/manage/Widgets/RecurrenceWidget/Occurences\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport cx from 'classnames';\nimport { List, Button, Header, Label } from 'semantic-ui-react';\nimport { Icon } from '@plone/volto/components';\nimport addSVG from '@plone/volto/icons/circle-plus.svg';\nimport trashSVG from '@plone/volto/icons/delete.svg';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport { useSelector } from 'react-redux';\nimport { toISOString } from './Utils';\nconst messages = defineMessages({\n  selected_dates: {\n    \"id\": \"Selected dates\",\n    \"defaultMessage\": \"Selected dates\"\n  },\n  start_of_recurrence: {\n    \"id\": \"Start of the recurrence\",\n    \"defaultMessage\": \"Start of the recurrence\"\n  },\n  additional_date: {\n    \"id\": \"Additional date\",\n    \"defaultMessage\": \"Additional date\"\n  },\n  other_items: {\n    \"id\": \"others\",\n    \"defaultMessage\": \"others\"\n  },\n  no_occurences: {\n    \"id\": \"No occurences set\",\n    \"defaultMessage\": \"No occurences set\"\n  },\n  exclude: {\n    \"id\": \"Exclude this occurence\",\n    \"defaultMessage\": \"Exclude this occurence\"\n  },\n  include: {\n    \"id\": \"Include this occurence\",\n    \"defaultMessage\": \"Include this occurence\"\n  }\n});\nconst formatDate = (d, moment) => {\n  const m = moment(d);\n  return m.format('dddd') + ', ' + m.format('LL');\n};\n\n/**\n * Occurences component class.\n * @function Occurences\n * @returns {string} Markup of the component.\n */\nconst Occurences_ = ({\n  rruleSet,\n  exclude,\n  undoExclude,\n  intl,\n  showTitle,\n  editOccurences,\n  moment: momentlib\n}) => {\n  const moment = momentlib.default;\n  const lang = useSelector(state => state.intl.locale);\n  moment.locale(lang);\n  let all = [];\n  const isExcluded = date => {\n    var dateISO = toISOString(date);\n    var excluded = false;\n    rruleSet.exdates().forEach(ex => {\n      var exISO = toISOString(ex);\n      if (exISO === dateISO) {\n        excluded = true;\n      }\n    });\n    return excluded;\n  };\n  const isAdditional = date => {\n    var dateISO = toISOString(date);\n    var additional = false;\n    rruleSet.rdates().forEach(d => {\n      var dd = toISOString(d);\n      if (dd === dateISO) {\n        additional = true;\n      }\n    });\n    return additional;\n  };\n  if (rruleSet) {\n    all = rruleSet.all();\n    rruleSet.exdates().forEach(date => {\n      if (all.indexOf(date) < 0) {\n        all.push(date);\n      }\n    });\n    all.sort((a, b) => {\n      return a > b ? 1 : -1;\n    });\n  }\n  const others = all.splice(100);\n  return __jsx(\"div\", {\n    className: \"occurences\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }\n  }, all.length === 0 && __jsx(React.Fragment, null, intl.formatMessage(messages.no_occurences)), showTitle && __jsx(Header, {\n    as: \"h2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, intl.formatMessage(messages.selected_dates)), __jsx(List, {\n    divided: true,\n    verticalAlign: \"middle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }\n  }, all.map((date, index) => {\n    const excluded = isExcluded(date);\n    return __jsx(List.Item, {\n      key: date.toString(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }\n    }, editOccurences && __jsx(List.Content, {\n      floated: \"right\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }\n    }, index > 0 ? __jsx(React.Fragment, null, !excluded && __jsx(Button, {\n      basic: true,\n      icon: true,\n      className: \"exclude-button\",\n      onClick: () => {\n        exclude(date);\n      },\n      \"aria-label\": intl.formatMessage(messages.exclude),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 25\n      }\n    }, __jsx(Icon, {\n      name: trashSVG,\n      size: \"18px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 27\n      }\n    })), excluded && __jsx(Button, {\n      basic: true,\n      icon: true,\n      className: \"include-button\",\n      onClick: () => {\n        undoExclude(date);\n      },\n      \"aria-label\": intl.formatMessage(messages.include),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 25\n      }\n    }, __jsx(Icon, {\n      name: addSVG,\n      size: \"24px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 27\n      }\n    }))) : intl.formatMessage(messages.start_of_recurrence)), __jsx(List.Content, {\n      className: cx({\n        excluded: excluded\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 15\n      }\n    }, formatDate(date, moment), isAdditional(date) && __jsx(Label, {\n      pointing: \"left\",\n      size: \"small\",\n      color: excluded ? 'grey' : 'green',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 19\n      }\n    }, intl.formatMessage(messages.additional_date))));\n  }), others.length > 0 && __jsx(List.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 11\n    }\n  }, __jsx(List.Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 13\n    }\n  }, `... ${intl.formatMessage(messages.other_items)} ${others.length}`))));\n};\nexport const Occurences = injectLazyLibs(['moment'])(Occurences_);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nOccurences.propTypes = {\n  rruleSet: PropTypes.any,\n  showTitle: PropTypes.bool,\n  editOccurences: PropTypes.bool\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nOccurences.defaultProps = {\n  rruleSet: null,\n  showTitle: true,\n  editOccurences: true\n};\nexport default injectIntl(Occurences);","map":{"version":3,"names":["React","PropTypes","defineMessages","injectIntl","cx","List","Button","Header","Label","Icon","addSVG","trashSVG","injectLazyLibs","useSelector","toISOString","messages","selected_dates","start_of_recurrence","additional_date","other_items","no_occurences","exclude","include","formatDate","d","moment","m","format","Occurences_","rruleSet","undoExclude","intl","showTitle","editOccurences","momentlib","default","lang","state","locale","all","isExcluded","date","dateISO","excluded","exdates","forEach","ex","exISO","isAdditional","additional","rdates","dd","indexOf","push","sort","a","b","others","splice","length","formatMessage","map","index","toString","Occurences","propTypes","any","bool","defaultProps"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Widgets/RecurrenceWidget/Occurences.jsx"],"sourcesContent":["/**\n * Occurences component.\n * @module components/manage/Widgets/RecurrenceWidget/Occurences\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport cx from 'classnames';\nimport { List, Button, Header, Label } from 'semantic-ui-react';\nimport { Icon } from '@plone/volto/components';\nimport addSVG from '@plone/volto/icons/circle-plus.svg';\nimport trashSVG from '@plone/volto/icons/delete.svg';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\n\nimport { useSelector } from 'react-redux';\nimport { toISOString } from './Utils';\n\nconst messages = defineMessages({\n  selected_dates: {\n    id: 'Selected dates',\n    defaultMessage: 'Selected dates',\n  },\n  start_of_recurrence: {\n    id: 'Start of the recurrence',\n    defaultMessage: 'Start of the recurrence',\n  },\n  additional_date: {\n    id: 'Additional date',\n    defaultMessage: 'Additional date',\n  },\n  other_items: {\n    id: 'others',\n    defaultMessage: 'others',\n  },\n  no_occurences: {\n    id: 'No occurences set',\n    defaultMessage: 'No occurences set',\n  },\n  exclude: {\n    id: 'Exclude this occurence',\n    defaultMessage: 'Exclude this occurence',\n  },\n  include: {\n    id: 'Include this occurence',\n    defaultMessage: 'Include this occurence',\n  },\n});\n\nconst formatDate = (d, moment) => {\n  const m = moment(d);\n  return m.format('dddd') + ', ' + m.format('LL');\n};\n\n/**\n * Occurences component class.\n * @function Occurences\n * @returns {string} Markup of the component.\n */\nconst Occurences_ = ({\n  rruleSet,\n  exclude,\n  undoExclude,\n  intl,\n  showTitle,\n  editOccurences,\n  moment: momentlib,\n}) => {\n  const moment = momentlib.default;\n  const lang = useSelector((state) => state.intl.locale);\n  moment.locale(lang);\n  let all = [];\n  const isExcluded = (date) => {\n    var dateISO = toISOString(date);\n    var excluded = false;\n    rruleSet.exdates().forEach((ex) => {\n      var exISO = toISOString(ex);\n      if (exISO === dateISO) {\n        excluded = true;\n      }\n    });\n    return excluded;\n  };\n\n  const isAdditional = (date) => {\n    var dateISO = toISOString(date);\n    var additional = false;\n    rruleSet.rdates().forEach((d) => {\n      var dd = toISOString(d);\n      if (dd === dateISO) {\n        additional = true;\n      }\n    });\n    return additional;\n  };\n\n  if (rruleSet) {\n    all = rruleSet.all();\n\n    rruleSet.exdates().forEach((date) => {\n      if (all.indexOf(date) < 0) {\n        all.push(date);\n      }\n    });\n    all.sort((a, b) => {\n      return a > b ? 1 : -1;\n    });\n  }\n\n  const others = all.splice(100);\n\n  return (\n    <div className=\"occurences\">\n      {all.length === 0 && <>{intl.formatMessage(messages.no_occurences)}</>}\n      {showTitle && (\n        <Header as=\"h2\">{intl.formatMessage(messages.selected_dates)}</Header>\n      )}\n\n      <List divided verticalAlign=\"middle\">\n        {all.map((date, index) => {\n          const excluded = isExcluded(date);\n          return (\n            <List.Item key={date.toString()}>\n              {editOccurences && (\n                <List.Content floated=\"right\">\n                  {index > 0 ? (\n                    <>\n                      {!excluded && (\n                        <Button\n                          basic\n                          icon\n                          className=\"exclude-button\"\n                          onClick={() => {\n                            exclude(date);\n                          }}\n                          aria-label={intl.formatMessage(messages.exclude)}\n                        >\n                          <Icon name={trashSVG} size=\"18px\" />\n                        </Button>\n                      )}\n                      {excluded && (\n                        <Button\n                          basic\n                          icon\n                          className=\"include-button\"\n                          onClick={() => {\n                            undoExclude(date);\n                          }}\n                          aria-label={intl.formatMessage(messages.include)}\n                        >\n                          <Icon name={addSVG} size=\"24px\" />\n                        </Button>\n                      )}\n                    </>\n                  ) : (\n                    intl.formatMessage(messages.start_of_recurrence)\n                  )}\n                </List.Content>\n              )}\n              <List.Content className={cx({ excluded: excluded })}>\n                {formatDate(date, moment)}\n                {isAdditional(date) && (\n                  <Label\n                    pointing=\"left\"\n                    size=\"small\"\n                    color={excluded ? 'grey' : 'green'}\n                  >\n                    {intl.formatMessage(messages.additional_date)}\n                  </Label>\n                )}\n              </List.Content>\n            </List.Item>\n          );\n        })}\n        {others.length > 0 && (\n          <List.Item>\n            <List.Content>\n              {`... ${intl.formatMessage(messages.other_items)} ${\n                others.length\n              }`}\n            </List.Content>\n          </List.Item>\n        )}\n      </List>\n    </div>\n  );\n};\n\nexport const Occurences = injectLazyLibs(['moment'])(Occurences_);\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nOccurences.propTypes = {\n  rruleSet: PropTypes.any,\n  showTitle: PropTypes.bool,\n  editOccurences: PropTypes.bool,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nOccurences.defaultProps = {\n  rruleSet: null,\n  showTitle: true,\n  editOccurences: true,\n};\n\nexport default injectIntl(Occurences);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Selected dates","defaultMessage":"Selected dates"},{"id":"Start of the recurrence","defaultMessage":"Start of the recurrence"},{"id":"Additional date","defaultMessage":"Additional date"},{"id":"others","defaultMessage":"others"},{"id":"No occurences set","defaultMessage":"No occurences set"},{"id":"Exclude this occurence","defaultMessage":"Exclude this occurence"},{"id":"Include this occurence","defaultMessage":"Include this occurence"}]}},"sourceType":"module","externalDependencies":[]}