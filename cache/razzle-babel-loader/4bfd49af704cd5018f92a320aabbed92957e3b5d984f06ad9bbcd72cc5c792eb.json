{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/theme/Comments/CommentEditModal.jsx\";\nvar __jsx = React.createElement;\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n/**\n * Comment edit modal.\n * @module components/theme/Comments/CommentEditModal\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { updateComment } from '@plone/volto/actions';\nimport { ModalForm } from '@plone/volto/components';\nconst messages = defineMessages({\n  editComment: {\n    \"id\": \"Edit comment\",\n    \"defaultMessage\": \"Edit comment\"\n  },\n  default: {\n    \"id\": \"Default\",\n    \"defaultMessage\": \"Default\"\n  },\n  comment: {\n    \"id\": \"Comment\",\n    \"defaultMessage\": \"Comment\"\n  }\n});\n\n/**\n * CommentEditModal class.\n * @class CommentEditModal\n * @extends Component\n */\nclass CommentEditModal extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs CommentEditModal\n   */\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.request.loading && nextProps.request.loaded) {\n      this.props.onOk();\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {Object} data Form data\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    this.props.updateComment(this.props.id, data.text);\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return this.props.open && __jsx(ModalForm, {\n      open: this.props.open,\n      onSubmit: this.onSubmit,\n      onCancel: this.props.onCancel,\n      formData: {\n        text: this.props.text\n      },\n      title: this.props.intl.formatMessage(messages.editComment),\n      schema: {\n        fieldsets: [{\n          id: 'default',\n          title: this.props.intl.formatMessage(messages.default),\n          fields: ['text']\n        }],\n        properties: {\n          text: {\n            title: this.props.intl.formatMessage(messages.comment),\n            type: 'string',\n            description: ''\n          }\n        },\n        required: ['text']\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }\n    });\n  }\n}\n_defineProperty(CommentEditModal, \"propTypes\", {\n  updateComment: PropTypes.func.isRequired,\n  id: PropTypes.string,\n  text: PropTypes.string,\n  request: PropTypes.shape({\n    loading: PropTypes.bool,\n    loaded: PropTypes.bool\n  }).isRequired,\n  open: PropTypes.bool.isRequired,\n  onOk: PropTypes.func.isRequired,\n  onCancel: PropTypes.func.isRequired\n});\n_defineProperty(CommentEditModal, \"defaultProps\", {\n  id: '',\n  text: ''\n});\nexport default compose(injectIntl, connect(state => ({\n  request: state.comments.update\n}), {\n  updateComment\n}))(CommentEditModal);","map":{"version":3,"names":["React","Component","PropTypes","connect","compose","defineMessages","injectIntl","updateComment","ModalForm","messages","editComment","default","comment","CommentEditModal","constructor","props","onSubmit","bind","UNSAFE_componentWillReceiveProps","nextProps","request","loading","loaded","onOk","data","id","text","render","open","onCancel","intl","formatMessage","fieldsets","title","fields","properties","type","description","required","func","isRequired","string","shape","bool","state","comments","update"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/theme/Comments/CommentEditModal.jsx"],"sourcesContent":["/**\n * Comment edit modal.\n * @module components/theme/Comments/CommentEditModal\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { defineMessages, injectIntl } from 'react-intl';\n\nimport { updateComment } from '@plone/volto/actions';\nimport { ModalForm } from '@plone/volto/components';\n\nconst messages = defineMessages({\n  editComment: {\n    id: 'Edit comment',\n    defaultMessage: 'Edit comment',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  comment: {\n    id: 'Comment',\n    defaultMessage: 'Comment',\n  },\n});\n\n/**\n * CommentEditModal class.\n * @class CommentEditModal\n * @extends Component\n */\nclass CommentEditModal extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    updateComment: PropTypes.func.isRequired,\n    id: PropTypes.string,\n    text: PropTypes.string,\n    request: PropTypes.shape({\n      loading: PropTypes.bool,\n      loaded: PropTypes.bool,\n    }).isRequired,\n    open: PropTypes.bool.isRequired,\n    onOk: PropTypes.func.isRequired,\n    onCancel: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    id: '',\n    text: '',\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs CommentEditModal\n   */\n  constructor(props) {\n    super(props);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.request.loading && nextProps.request.loaded) {\n      this.props.onOk();\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {Object} data Form data\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    this.props.updateComment(this.props.id, data.text);\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      this.props.open && (\n        <ModalForm\n          open={this.props.open}\n          onSubmit={this.onSubmit}\n          onCancel={this.props.onCancel}\n          formData={{ text: this.props.text }}\n          title={this.props.intl.formatMessage(messages.editComment)}\n          schema={{\n            fieldsets: [\n              {\n                id: 'default',\n                title: this.props.intl.formatMessage(messages.default),\n                fields: ['text'],\n              },\n            ],\n            properties: {\n              text: {\n                title: this.props.intl.formatMessage(messages.comment),\n                type: 'string',\n                description: '',\n              },\n            },\n            required: ['text'],\n          }}\n        />\n      )\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state) => ({\n      request: state.comments.update,\n    }),\n    { updateComment },\n  ),\n)(CommentEditModal);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Edit comment","defaultMessage":"Edit comment"},{"id":"Default","defaultMessage":"Default"},{"id":"Comment","defaultMessage":"Comment"}]}},"sourceType":"module","externalDependencies":[]}