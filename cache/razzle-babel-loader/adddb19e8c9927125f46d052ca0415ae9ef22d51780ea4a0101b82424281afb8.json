{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport BlockSettingsSchema from '@plone/volto/components/manage/Blocks/Block/Schema';\nconst Schema = _objectSpread(_objectSpread({}, BlockSettingsSchema), {}, {\n  fieldsets: [_objectSpread({}, BlockSettingsSchema.fieldsets[0])],\n  properties: _objectSpread({}, BlockSettingsSchema.properties)\n});\nexport default Schema;","map":{"version":3,"names":["BlockSettingsSchema","Schema","fieldsets","properties"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Blocks/Text/Schema.jsx"],"sourcesContent":["import BlockSettingsSchema from '@plone/volto/components/manage/Blocks/Block/Schema';\n\nconst Schema = {\n  ...BlockSettingsSchema,\n  fieldsets: [\n    {\n      ...BlockSettingsSchema.fieldsets[0],\n      // fields: [\n      //   ...BlockSettingsSchema.fieldsets[0].fields,\n      //   'minLength',\n      //   'maxLength',\n      // ],\n    },\n  ],\n  properties: {\n    ...BlockSettingsSchema.properties,\n    /* TODO Enable when we have block validation inplace */\n    // minLength: {\n    //   title: 'Min length',\n    //   description: 'Minimum number of characters',\n    //   type: 'integer',\n    // },\n    // maxLength: {\n    //   title: 'Max length',\n    //   description: 'Maximum number of characters',\n    //   type: 'integer',\n    // },\n  },\n};\n\nexport default Schema;\n"],"mappings":";;;AAAA,OAAOA,mBAAmB,MAAM,oDAAoD;AAEpF,MAAMC,MAAM,mCACPD,mBAAmB;EACtBE,SAAS,EAAE,mBAEJF,mBAAmB,CAACE,SAAS,CAAC,CAAC,CAAC,EAOtC;EACDC,UAAU,oBACLH,mBAAmB,CAACG,UAAU;AAYlC,EACF;AAED,eAAeF,MAAM"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}