{"ast":null,"code":"import _isEqual from \"lodash/isEqual\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Blocks/Listing/Edit.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { withBlockExtensions } from '@plone/volto/helpers';\nimport { SidebarPortal, ListingBlockBody as ListingBody } from '@plone/volto/components';\nimport ListingData from './ListingData';\nimport { getBaseUrl } from '@plone/volto/helpers';\nconst messages = defineMessages({\n  results: {\n    \"id\": \"Results preview\",\n    \"defaultMessage\": \"Results preview\"\n  },\n  items: {\n    \"id\": \"Contained items\",\n    \"defaultMessage\": \"Contained items\"\n  }\n});\nconst Edit = /*#__PURE__*/React.memo(props => {\n  var _data$querystring, _data$querystring$que;\n  const {\n    data,\n    onChangeBlock,\n    block,\n    selected,\n    pathname\n  } = props;\n  const intl = useIntl();\n\n  // componentDidMount\n  React.useEffect(() => {\n    if (!data.query) {\n      onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n        query: [],\n        block\n      }));\n    }\n    /* eslint-disable react-hooks/exhaustive-deps */\n  }, []);\n  const placeholder = data.placeholder || (data !== null && data !== void 0 && (_data$querystring = data.querystring) !== null && _data$querystring !== void 0 && (_data$querystring$que = _data$querystring.query) !== null && _data$querystring$que !== void 0 && _data$querystring$que.length ? intl.formatMessage(messages.results) : intl.formatMessage(messages.items));\n  const HeadlineTag = data.headlineTag || 'h2';\n  return __jsx(React.Fragment, null, __jsx(\"p\", {\n    className: \"items-preview\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, placeholder), data.headline && __jsx(HeadlineTag, {\n    className: \"headline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 11\n    }\n  }, data.headline), __jsx(ListingBody, _extends({}, props, {\n    path: getBaseUrl(pathname),\n    isEditMode: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  })), __jsx(SidebarPortal, {\n    selected: selected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, __jsx(ListingData, _extends({\n    key: block\n  }, props, {\n    data: data,\n    block: block,\n    onChangeBlock: onChangeBlock,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }))));\n}, function areEquals(prevProps, nextProps) {\n  return !(nextProps.selected !== prevProps.selected || !_isEqual(prevProps.data, nextProps.data));\n});\nEdit.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  index: PropTypes.number.isRequired,\n  selected: PropTypes.bool.isRequired,\n  block: PropTypes.string.isRequired,\n  onSelectBlock: PropTypes.func.isRequired,\n  items: PropTypes.arrayOf(PropTypes.any),\n  properties: PropTypes.objectOf(PropTypes.any).isRequired,\n  pathname: PropTypes.string.isRequired\n};\nexport default withBlockExtensions(Edit);","map":{"version":3,"names":["React","PropTypes","defineMessages","useIntl","withBlockExtensions","SidebarPortal","ListingBlockBody","ListingBody","ListingData","getBaseUrl","messages","results","items","Edit","memo","props","data","onChangeBlock","block","selected","pathname","intl","useEffect","query","placeholder","querystring","length","formatMessage","HeadlineTag","headlineTag","headline","areEquals","prevProps","nextProps","propTypes","objectOf","any","isRequired","index","number","bool","string","onSelectBlock","func","arrayOf","properties"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Blocks/Listing/Edit.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { isEqual } from 'lodash';\nimport { withBlockExtensions } from '@plone/volto/helpers';\n\nimport {\n  SidebarPortal,\n  ListingBlockBody as ListingBody,\n} from '@plone/volto/components';\nimport ListingData from './ListingData';\n\nimport { getBaseUrl } from '@plone/volto/helpers';\n\nconst messages = defineMessages({\n  results: {\n    id: 'Results preview',\n    defaultMessage: 'Results preview',\n  },\n  items: {\n    id: 'Contained items',\n    defaultMessage: 'Contained items',\n  },\n});\n\nconst Edit = React.memo(\n  (props) => {\n    const { data, onChangeBlock, block, selected, pathname } = props;\n\n    const intl = useIntl();\n\n    // componentDidMount\n    React.useEffect(() => {\n      if (!data.query) {\n        onChangeBlock(block, {\n          ...data,\n          query: [],\n          block,\n        });\n      }\n      /* eslint-disable react-hooks/exhaustive-deps */\n    }, []);\n\n    const placeholder =\n      data.placeholder ||\n      (data?.querystring?.query?.length\n        ? intl.formatMessage(messages.results)\n        : intl.formatMessage(messages.items));\n\n    const HeadlineTag = data.headlineTag || 'h2';\n\n    return (\n      <>\n        <p className=\"items-preview\">{placeholder}</p>\n        {data.headline && (\n          <HeadlineTag className=\"headline\">{data.headline}</HeadlineTag>\n        )}\n        <ListingBody {...props} path={getBaseUrl(pathname)} isEditMode />\n        <SidebarPortal selected={selected}>\n          <ListingData\n            key={block}\n            {...props}\n            data={data}\n            block={block}\n            onChangeBlock={onChangeBlock}\n          />\n        </SidebarPortal>\n      </>\n    );\n  },\n  function areEquals(prevProps, nextProps) {\n    return !(\n      nextProps.selected !== prevProps.selected ||\n      !isEqual(prevProps.data, nextProps.data)\n    );\n  },\n);\n\nEdit.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  index: PropTypes.number.isRequired,\n  selected: PropTypes.bool.isRequired,\n  block: PropTypes.string.isRequired,\n  onSelectBlock: PropTypes.func.isRequired,\n  items: PropTypes.arrayOf(PropTypes.any),\n  properties: PropTypes.objectOf(PropTypes.any).isRequired,\n  pathname: PropTypes.string.isRequired,\n};\n\nexport default withBlockExtensions(Edit);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Results preview","defaultMessage":"Results preview"},{"id":"Contained items","defaultMessage":"Contained items"}]}},"sourceType":"module","externalDependencies":[]}