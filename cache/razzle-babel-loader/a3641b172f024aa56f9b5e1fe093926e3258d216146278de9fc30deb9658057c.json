{"ast":null,"code":"import _without from \"lodash/without\";\nimport _slice from \"lodash/slice\";\nimport _omit from \"lodash/omit\";\nimport _map from \"lodash/map\";\nimport _isString from \"lodash/isString\";\nimport _findIndex from \"lodash/findIndex\";\nimport _concat from \"lodash/concat\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Widgets/SchemaWidget.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n/**\n * SchemaWidget component.\n * @module components/manage/Widgets/SchemaWidget\n */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport PropTypes from 'prop-types';\nimport move from 'lodash-move';\nimport { Confirm, Form, Grid, Icon, Message, Segment } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport { slugify } from '@plone/volto/helpers/Utils/Utils';\nimport { Field, ModalForm, SchemaWidgetFieldset } from '@plone/volto/components';\nconst messages = defineMessages({\n  add: {\n    \"id\": \"Add\",\n    \"defaultMessage\": \"Add\"\n  },\n  addField: {\n    \"id\": \"Add field\",\n    \"defaultMessage\": \"Add field\"\n  },\n  addFieldset: {\n    \"id\": \"Add fieldset\",\n    \"defaultMessage\": \"Add fieldset\"\n  },\n  parentFieldSet: {\n    \"id\": \"Parent fieldset\",\n    \"defaultMessage\": \"Parent fieldset\"\n  },\n  editField: {\n    \"id\": \"Edit field\",\n    \"defaultMessage\": \"Edit field\"\n  },\n  editFieldset: {\n    \"id\": \"Edit fieldset\",\n    \"defaultMessage\": \"Edit fieldset\"\n  },\n  default: {\n    \"id\": \"Default\",\n    \"defaultMessage\": \"Default\"\n  },\n  idTitle: {\n    \"id\": \"Short Name\",\n    \"defaultMessage\": \"Short Name\"\n  },\n  idDescription: {\n    \"id\": \"Used for programmatic access to the fieldset.\",\n    \"defaultMessage\": \"Used for programmatic access to the fieldset.\"\n  },\n  choices: {\n    \"id\": \"Possible values\",\n    \"defaultMessage\": \"Possible values (Enter allowed choices one per line).\"\n  },\n  string: {\n    \"id\": \"String\",\n    \"defaultMessage\": \"String\"\n  },\n  text: {\n    \"id\": \"Text\",\n    \"defaultMessage\": \"Text\"\n  },\n  richtext: {\n    \"id\": \"Richtext\",\n    \"defaultMessage\": \"Richtext\"\n  },\n  checkbox: {\n    \"id\": \"Checkbox\",\n    \"defaultMessage\": \"Checkbox\"\n  },\n  selection: {\n    \"id\": \"Selection\",\n    \"defaultMessage\": \"Selection\"\n  },\n  type: {\n    \"id\": \"Type\",\n    \"defaultMessage\": \"Type\"\n  },\n  title: {\n    \"id\": \"Title\",\n    \"defaultMessage\": \"Title\"\n  },\n  description: {\n    \"id\": \"Description\",\n    \"defaultMessage\": \"Description\"\n  },\n  required: {\n    \"id\": \"Required\",\n    \"defaultMessage\": \"Required\"\n  },\n  minLength: {\n    \"id\": \"minLength\",\n    \"defaultMessage\": \"Minimum Length\"\n  },\n  maxLength: {\n    \"id\": \"maxLength\",\n    \"defaultMessage\": \"Maximum Length\"\n  },\n  minimum: {\n    \"id\": \"minimum\",\n    \"defaultMessage\": \"Start of the range\"\n  },\n  maximum: {\n    \"id\": \"maximum\",\n    \"defaultMessage\": \"End of the range (including the value itself)\"\n  },\n  deleteFieldset: {\n    \"id\": \"Are you sure you want to delete this fieldset including all fields?\",\n    \"defaultMessage\": \"Are you sure you want to delete this fieldset including all fields?\"\n  },\n  deleteField: {\n    \"id\": \"Are you sure you want to delete this field?\",\n    \"defaultMessage\": \"Are you sure you want to delete this field?\"\n  },\n  error: {\n    \"id\": \"Error\",\n    \"defaultMessage\": \"Error\"\n  }\n});\n\n/**\n * Makes a list of fieldset types formatted for select widget\n * @param {Object[]} listOfTypes array of strings\n * @param {*} intl\n * @returns {Object[]} example [['default', 'default']]\n */\nconst makeFieldsetList = (listOfFieldsets, intl) => {\n  const result = listOfFieldsets.map(type => [type.id, type.title]);\n  return result;\n};\n\n/**\n * schemaField used for modal form, when editing a field\n * - based on the factory a set of fields is presented\n * - fields can be moved to another fieldset\n * @param {string} factory - the kind of field\n * @param {Object} intl\n * @param {*} fieldsets\n * @return {Object} - schema\n */\nconst schemaField = (factory, intl, fieldsets) => ({\n  fieldsets: [{\n    id: 'default',\n    title: 'default',\n    fields: [...['title', 'description', 'parentFieldSet'], ...(factory => {\n      switch (factory) {\n        case 'Rich Text':\n          return ['maxLength'];\n        case 'URL':\n        case 'Password':\n        case 'label_password_field':\n        case 'Email':\n        case 'label_email':\n          return ['minLength', 'maxLength'];\n        case 'Integer':\n        case 'label_integer_field':\n          return ['minimum', 'maximum'];\n        case 'Floating-point number':\n        case 'label_float_field':\n        case 'Date/Time':\n        case 'label_datetime_field':\n        case 'Date':\n        case 'label_date_field':\n        case 'File':\n        case 'File Upload':\n        case 'Image':\n        case 'Yes/No':\n        case 'label_boolean_field':\n        case 'JSONField':\n        case 'Relation Choice':\n        case 'Relation List':\n          return [];\n        case 'Multiple Choice':\n        case 'label_multi_choice_field':\n        case 'Choice':\n        case 'label_choice_field':\n          return ['values'];\n        default:\n          return ['minLength', 'maxLength'];\n      }\n    })(factory), ...['required']]\n  }],\n  properties: _objectSpread({\n    title: {\n      type: 'string',\n      title: intl.formatMessage(messages.title)\n    },\n    description: {\n      type: 'string',\n      widget: 'textarea',\n      title: intl.formatMessage(messages.description)\n    },\n    parentFieldSet: {\n      type: 'string',\n      title: intl.formatMessage(messages.parentFieldSet),\n      choices: makeFieldsetList(fieldsets)\n    },\n    required: {\n      type: 'boolean',\n      title: intl.formatMessage(messages.required)\n    }\n  }, (factory => {\n    switch (factory) {\n      case 'Rich Text':\n        return {\n          maxLength: {\n            type: 'integer',\n            title: intl.formatMessage(messages.maxLength)\n          }\n        };\n      case 'URL':\n      case 'Password':\n      case 'label_password_field':\n      case 'Email':\n      case 'label_email':\n        return {\n          minLength: {\n            type: 'integer',\n            title: intl.formatMessage(messages.minLength)\n          },\n          maxLength: {\n            type: 'integer',\n            title: intl.formatMessage(messages.maxLength)\n          }\n        };\n      case 'Integer':\n      case 'label_integer_field':\n        return {\n          minimum: {\n            type: 'integer',\n            title: intl.formatMessage(messages.minimum)\n          },\n          maximum: {\n            type: 'integer',\n            title: intl.formatMessage(messages.maximum)\n          }\n        };\n      case 'Floating-point number':\n      case 'label_float_field':\n      case 'Date/Time':\n      case 'label_datetime_field':\n      case 'Date':\n      case 'label_date_field':\n      case 'File':\n      case 'File Upload':\n      case 'Image':\n      case 'Yes/No':\n      case 'label_boolean_field':\n      case 'JSONField':\n      case 'Relation Choice':\n      case 'Relation List':\n        return {};\n      case 'Multiple Choice':\n      case 'label_multi_choice_field':\n      case 'Choice':\n      case 'label_choice_field':\n        return {\n          values: {\n            type: 'string',\n            title: intl.formatMessage(messages.choices),\n            widget: 'textarea'\n          }\n        };\n      default:\n        return {\n          minLength: {\n            type: 'integer',\n            title: intl.formatMessage(messages.minLength)\n          },\n          maxLength: {\n            type: 'integer',\n            title: intl.formatMessage(messages.maxLength)\n          }\n        };\n    }\n  })(factory)),\n  required: ['type', 'title']\n});\n\n/**\n * schema for adding a new field\n * @param {Object} intl\n */\nconst fieldsetSchema = intl => ({\n  fieldsets: [{\n    id: 'default',\n    title: intl.formatMessage(messages.default),\n    fields: ['title', 'id']\n  }],\n  properties: {\n    id: {\n      type: 'string',\n      title: intl.formatMessage(messages.idTitle),\n      description: intl.formatMessage(messages.idDescription)\n    },\n    title: {\n      type: 'string',\n      title: intl.formatMessage(messages.title)\n    }\n  },\n  required: ['id', 'title']\n});\n\n/**\n * 'plone.dexterity.schema.generated' is considered user created\n * @param {Object} field\n */\nconst isEditable = field => !field.behavior || field.behavior.includes('generated');\nconst getItemStyle = (isDragging, draggableStyle) => _objectSpread({\n  // some basic styles to make the items look a bit nicer\n  userSelect: 'none',\n  // change background colour if dragging\n  background: isDragging ? 'white' : 'transparent'\n}, draggableStyle);\nconst getTabStyle = isDraggingOver => ({\n  background: isDraggingOver ? '#f4f4f4' : 'transparent',\n  display: 'flex',\n  flexDirection: 'row',\n  flexWrap: 'wrap'\n});\nconst getFieldStyle = isDraggingOver => ({\n  background: isDraggingOver ? '#f4f4f4' : 'transparent'\n});\n\n/**\n * will transform a string with new lines in an array for each item on a line\n * @param {string} textarea - has '\\r\\n' characters\n */\nconst formatTextareaToArray = textarea => {\n  const values = textarea && textarea ? textarea.split(/(\\r\\n|\\n|\\r)/gm).map(elem => elem.trim()).filter(elem => elem !== '') : null;\n  return values ? {\n    values\n  } : {};\n};\nconst formatArrayToTextarea = props => {\n  var _props$items;\n  if (props !== null && props !== void 0 && props.values) {\n    return props.values.join('\\n');\n  }\n  if (props !== null && props !== void 0 && props.choices) {\n    return props.choices.map(elem => elem[0]).join('\\n');\n  }\n  if (props !== null && props !== void 0 && (_props$items = props.items) !== null && _props$items !== void 0 && _props$items.choices) {\n    return props.items.choices.map(elem => elem[0]).join('\\n');\n  }\n  return '';\n};\nconst formatTextareaToChoices = (textarea, multiple) => {\n  const choices = textarea && textarea ? textarea.split(/(\\r\\n|\\n|\\r)/gm).map(elem => elem.trim()).filter(elem => elem !== '').map(elem => [elem, elem]) : null;\n  if (!multiple) {\n    return choices ? {\n      choices\n    } : {};\n  }\n  const items = choices ? {\n    choices: choices\n  } : {};\n  return items ? {\n    items\n  } : {};\n};\n\n/**\n * SchemaWidget component class.\n * @class SchemaWidget\n * @extends Component\n */\nclass SchemaWidget extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.onChange = this.onChange.bind(this);\n    this.onChangeDefaultValue = this.onChangeDefaultValue.bind(this);\n    this.onAddField = this.onAddField.bind(this);\n    this.onAddFieldset = this.onAddFieldset.bind(this);\n    this.onEditField = this.onEditField.bind(this);\n    this.onEditFieldset = this.onEditFieldset.bind(this);\n    this.onDeleteFieldset = this.onDeleteFieldset.bind(this);\n    this.onDeleteField = this.onDeleteField.bind(this);\n    this.onShowAddField = this.onShowAddField.bind(this);\n    this.onShowAddFieldset = this.onShowAddFieldset.bind(this);\n    this.onShowEditFieldset = this.onShowEditFieldset.bind(this);\n    this.onShowEditField = this.onShowEditField.bind(this);\n    this.onShowDeleteFieldset = this.onShowDeleteFieldset.bind(this);\n    this.onShowDeleteField = this.onShowDeleteField.bind(this);\n    this.onSetCurrentFieldset = this.onSetCurrentFieldset.bind(this);\n    this.onOrderField = this.onOrderField.bind(this);\n    this.onOrderFieldset = this.onOrderFieldset.bind(this);\n    this.onCancel = this.onCancel.bind(this);\n    this.onDragEnd = this.onDragEnd.bind(this);\n    this.state = {\n      addField: null,\n      addFieldset: null,\n      editFieldset: null,\n      editField: null,\n      deleteFieldset: null,\n      deleteField: null,\n      currentFieldset: 0\n    };\n  }\n\n  /**\n   * Add field handler\n   * @method onAddField\n   * @param {Object} values Form values\n   * @returns {undefined}\n   */\n  onAddField(values) {\n    const fieldId = slugify(values.title);\n    const currentFieldsetFields = this.props.value.fieldsets[this.state.currentFieldset].fields;\n    const hasChangeNote = currentFieldsetFields.indexOf('changeNote') > -1;\n    const newFieldsetFields = hasChangeNote ? [...currentFieldsetFields.slice(0, currentFieldsetFields.length - 1), fieldId, currentFieldsetFields[currentFieldsetFields.length - 1]] : [...currentFieldsetFields, fieldId];\n    this.onChange(_objectSpread(_objectSpread({}, this.props.value), {}, {\n      fieldsets: [..._slice(this.props.value.fieldsets, 0, this.state.currentFieldset), _objectSpread(_objectSpread({}, this.props.value.fieldsets[this.state.currentFieldset]), {}, {\n        fields: newFieldsetFields\n      }), ..._slice(this.props.value.fieldsets, this.state.currentFieldset + 1)],\n      properties: _objectSpread(_objectSpread({}, this.props.value.properties), {}, {\n        [fieldId]: _objectSpread({\n          title: values.title,\n          description: values.description,\n          id: fieldId\n        }, (factory => {\n          switch (factory) {\n            case 'Date/Time':\n            case 'label_datetime_field':\n              return {\n                type: 'string',\n                widget: 'datetime',\n                factory\n              };\n            case 'Date':\n            case 'label_date_field':\n              return {\n                type: 'string',\n                widget: 'date',\n                factory\n              };\n            case 'Email':\n            case 'label_email':\n              return {\n                type: 'string',\n                widget: 'email',\n                factory\n              };\n            case 'File':\n            case 'File Upload':\n              return {\n                type: 'object',\n                factory\n              };\n            case 'Floating-point number':\n            case 'label_float_field':\n              return {\n                type: 'number',\n                factory\n              };\n            case 'Integer':\n            case 'label_integer_field':\n              return {\n                type: 'integer',\n                factory\n              };\n            case 'Image':\n              return {\n                type: 'object',\n                factory\n              };\n            case 'JSONField':\n              return {\n                type: 'dict',\n                widget: 'json',\n                factory\n              };\n            case 'Multiple Choice':\n            case 'label_multi_choice_field':\n              return {\n                type: 'array',\n                factory\n              };\n            case 'Relation List':\n              return {\n                type: 'array',\n                factory\n              };\n            case 'Choice':\n            case 'label_choice_field':\n              return {\n                type: 'string',\n                choices: [],\n                factory\n              };\n            case 'Relation Choice':\n              return {\n                type: 'string',\n                factory\n              };\n            case 'Password':\n            case 'label_password_field':\n              return {\n                type: 'string',\n                widget: 'password',\n                factory\n              };\n            case 'Rich Text':\n              return {\n                type: 'string',\n                widget: 'richtext',\n                factory\n              };\n            case 'URL':\n              return {\n                type: 'string',\n                widget: 'url',\n                factory\n              };\n            case 'Yes/No':\n            case 'label_boolean_field':\n              return {\n                type: 'boolean',\n                factory\n              };\n            default:\n              return {\n                type: 'string',\n                factory\n              };\n          }\n        })(values.factory))\n      }),\n      required: values.required ? [...this.props.value.required, fieldId] : this.props.value.required\n    }));\n    this.onCancel();\n  }\n\n  /**\n   * Add fieldset handler\n   * @method onAddFieldset\n   * @param {Object} values Form values\n   * @returns {undefined}\n   */\n  onAddFieldset(values) {\n    this.onChange(_objectSpread(_objectSpread({}, this.props.value), {}, {\n      fieldsets: [...this.props.value.fieldsets, _objectSpread(_objectSpread({}, values), {}, {\n        fields: []\n      })]\n    }));\n    this.onCancel();\n  }\n\n  /**\n   * Edit fieldset handler\n   * @method onEditFieldset\n   * @param {Object} values Form values\n   * @returns {undefined}\n   */\n  onEditFieldset(values) {\n    var _this$props$value$fie;\n    values.fields = values.fields || ((_this$props$value$fie = this.props.value.fieldsets[this.state.editFieldset]) === null || _this$props$value$fie === void 0 ? void 0 : _this$props$value$fie.fields) || [];\n    this.onChange(_objectSpread(_objectSpread({}, this.props.value), {}, {\n      fieldsets: [..._slice(this.props.value.fieldsets, 0, this.state.editFieldset), values, ..._slice(this.props.value.fieldsets, this.state.editFieldset + 1)]\n    }));\n    this.onCancel();\n  }\n\n  /**\n   * Recreates the fieldset structure\n   * will move change name of the field if needed and\n   * change fieldset if changed\n   * @param {Object[]} fieldsets\n   * @param {string} parentFieldSet - id\n   * @param {number} currentFieldset - index\n   * @param {Object} oldfieldId\n   * @param {Object} newfieldId\n   * @returns {Object[]} fieldsets\n   */\n  editFieldset(fieldsets, parentFieldSet, currentFieldset, oldfieldId, newfieldId) {\n    const moveToFieldsetWithNewName = () => {\n      const newParentFieldsetIndex = fieldsets.findIndex(field => field.id === parentFieldSet);\n      const indexOfChangeNote = fieldsets[newParentFieldsetIndex].fields.indexOf('changeNote');\n      // remove from current fieldset\n      const fieldsetsWithoutField = [..._slice(fieldsets, 0, currentFieldset), _objectSpread(_objectSpread({}, fieldsets[currentFieldset]), {}, {\n        fields: fieldsets[currentFieldset].fields.filter(fieldId => fieldId !== oldfieldId)\n      }), ..._slice(fieldsets, currentFieldset + 1)];\n      const fieldsOfNewFieldset = indexOfChangeNote > -1 ? [...fieldsetsWithoutField[newParentFieldsetIndex].fields.slice(0, indexOfChangeNote + 1), oldfieldId, fieldsetsWithoutField[newParentFieldsetIndex].fields[indexOfChangeNote]] : [...fieldsetsWithoutField[newParentFieldsetIndex].fields, oldfieldId];\n\n      // add to new fieldset\n      const fieldsetsWithField = [..._slice(fieldsetsWithoutField, 0, newParentFieldsetIndex), _objectSpread(_objectSpread({}, fieldsetsWithoutField[newParentFieldsetIndex]), {}, {\n        fields: fieldsOfNewFieldset\n      }), ..._slice(fieldsetsWithoutField, newParentFieldsetIndex + 1)];\n      return fieldsetsWithField;\n    };\n    const changeNameInFieldset = () => {\n      return [..._slice(fieldsets, 0, currentFieldset), _objectSpread(_objectSpread({}, fieldsets[currentFieldset]), {}, {\n        fields: _map(fieldsets[currentFieldset].fields, field => field === oldfieldId ? newfieldId : field)\n      }), ..._slice(fieldsets, currentFieldset + 1)];\n    };\n    const result = parentFieldSet !== fieldsets[currentFieldset].id ? moveToFieldsetWithNewName() : changeNameInFieldset();\n    return result;\n  }\n\n  /**\n   * Edit field handler\n   * recreates the schema based on field changes (properties, name, fieldset)\n   * @method onEditField\n   * @param {Object} values Field values\n   * @returns {undefined}\n   */\n  onEditField(values) {\n    var _this$props$value$pro, _this$props$value$pro2;\n    let formattedValues = _objectSpread({}, values);\n    const listOfProp = ['minLength', 'maxLength', 'minimum', 'maximum'];\n    listOfProp.forEach(prop => {\n      formattedValues = _objectSpread(_objectSpread({}, formattedValues), {\n        [prop]: values[prop] ? parseFloat(values[prop]) : null\n      });\n    });\n    const multiple = ((_this$props$value$pro = this.props.value.properties[this.state.editField.id]) === null || _this$props$value$pro === void 0 ? void 0 : _this$props$value$pro.factory) === 'Multiple Choice' || ((_this$props$value$pro2 = this.props.value.properties[this.state.editField.id]) === null || _this$props$value$pro2 === void 0 ? void 0 : _this$props$value$pro2.factory) === 'label_multi_choice_field';\n    const result = _objectSpread(_objectSpread({}, this.props.value), {}, {\n      fieldsets: formattedValues.parentFieldSet ? this.editFieldset(this.props.value.fieldsets, formattedValues.parentFieldSet, this.state.currentFieldset, this.state.editField.id, formattedValues.id) : this.props.value.fieldsets,\n      properties: _objectSpread(_objectSpread({}, _omit(this.props.value.properties, [this.state.editField.id])), {}, {\n        [formattedValues.id]: _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, this.props.value.properties[this.state.editField.id]), _omit(formattedValues, ['id', 'parentFieldSet'])), formatTextareaToArray(formattedValues.values)), formatTextareaToChoices(formattedValues.values, multiple))\n      }),\n      required: formattedValues.required ? _concat(_without(this.props.value.required, this.state.editField.id), [formattedValues.id]) : _without(this.props.value.required, this.state.editField.id)\n    });\n    this.onChange(result);\n    this.onCancel();\n  }\n\n  /**\n   * Delete fieldset handler\n   * @method onDeleteFieldset\n   * @returns {undefined}\n   */\n  onDeleteFieldset() {\n    if (this.state.currentFieldset > this.props.value.fieldsets.length - 2) {\n      this.setState({\n        currentFieldset: this.state.currentFieldset - 1\n      });\n    }\n    this.onChange(_objectSpread(_objectSpread({}, this.props.value), {}, {\n      fieldsets: [..._slice(this.props.value.fieldsets, 0, this.state.deleteFieldset), ..._slice(this.props.value.fieldsets, this.state.deleteFieldset + 1)],\n      properties: _omit(this.props.value.properties, this.props.value.fieldsets[this.state.deleteFieldset].fields)\n    }));\n    this.onCancel();\n  }\n\n  /**\n   * Delete field handler\n   * @method onDeleteField\n   * @returns {undefined}\n   */\n  onDeleteField() {\n    this.onChange(_objectSpread(_objectSpread({}, this.props.value), {}, {\n      fieldsets: [..._slice(this.props.value.fieldsets, 0, this.state.currentFieldset), _objectSpread(_objectSpread({}, this.props.value.fieldsets[this.state.currentFieldset]), {}, {\n        fields: _without(this.props.value.fieldsets[this.state.currentFieldset].fields, this.state.deleteField)\n      }), ..._slice(this.props.value.fieldsets, this.state.currentFieldset + 1)],\n      properties: _omit(this.props.value.properties, [this.state.deleteField])\n    }));\n    this.onCancel();\n  }\n\n  /**\n   * Change handler\n   * @method onChange\n   * @param {Object} value New schema\n   * @returns {undefined}\n   */\n  onChange(value) {\n    this.props.onChange(this.props.id, value);\n  }\n\n  /**\n   * Change default value handler\n   * @method onChangeDefaultValue\n   * @param {string} fieldId\n   * @param {string} fieldValue\n   */\n  onChangeDefaultValue(fieldId, fieldValue) {\n    // Default values can have irreversible consequence, thus skip it for now.\n    // const value = { default: fieldValue }\n    const value = {};\n    const fieldMerge = _objectSpread(_objectSpread({}, this.props.value.properties[fieldId]), value);\n    const propsMerge = _objectSpread(_objectSpread({}, this.props.value.properties), {\n      [fieldId]: fieldMerge\n    });\n    this.onChange(_objectSpread(_objectSpread({}, this.props.value), {}, {\n      properties: propsMerge\n    }));\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.setState({\n      addField: null,\n      addFieldset: null,\n      editFieldset: null,\n      editField: null,\n      deleteFieldset: null,\n      deleteField: null\n    });\n  }\n\n  /**\n   * Show add field handler\n   * @method onShowAddField\n   * @returns {undefined}\n   */\n  onShowAddField(event) {\n    this.setState({\n      addField: true\n    });\n    event.preventDefault();\n  }\n\n  /**\n   * Show add fieldset handler\n   * @method onShowAddFieldset\n   * @returns {undefined}\n   */\n  onShowAddFieldset(event) {\n    this.setState({\n      addFieldset: true\n    });\n    event.preventDefault();\n  }\n\n  /**\n   * Show edit fieldset handler\n   * @method onShowEditFieldset\n   * @param {Number} index Index of fieldset\n   * @returns {undefined}\n   */\n  onShowEditFieldset(index) {\n    this.setState({\n      editFieldset: index\n    });\n  }\n\n  /**\n   * Show edit field handler\n   * @method onShowEditField\n   * @param {string} id Id of field\n   * @param {Object} schema Schema of the field\n   * @returns {undefined}\n   */\n  onShowEditField(id, schema) {\n    return this.setState({\n      editField: {\n        id\n      }\n    });\n  }\n\n  /**\n   * Show delete fieldset handler\n   * @method onShowDeleteFieldset\n   * @param {Number} index Index of fieldset\n   * @param {Object} event Event object\n   * @returns {undefined}\n   */\n  onShowDeleteFieldset(index) {\n    this.setState({\n      deleteFieldset: index\n    });\n  }\n\n  /**\n   * Show delete field handler\n   * @method onShowDeleteField\n   * @param {String} field Field to delete\n   * @param {Object} event Event object\n   * @returns {undefined}\n   */\n  onShowDeleteField(field) {\n    this.setState({\n      deleteField: field\n    });\n  }\n\n  /**\n   * Set current fieldset handler\n   * @method onSetCurrentFieldset\n   * @param {Number} index Index of fieldset\n   * @returns {undefined}\n   */\n  onSetCurrentFieldset(index) {\n    this.setState({\n      currentFieldset: index\n    });\n  }\n\n  /**\n   * On order fieldset\n   * @method onOrderField\n   * @param {number} index Index\n   * @param {number} delta Delta\n   * @returns {undefined}\n   */\n  onOrderField(index, delta) {\n    this.onChange(_objectSpread(_objectSpread({}, this.props.value), {}, {\n      fieldsets: [..._slice(this.props.value.fieldsets, 0, this.state.currentFieldset), _objectSpread(_objectSpread({}, this.props.value.fieldsets[this.state.currentFieldset]), {}, {\n        fields: move(this.props.value.fieldsets[this.state.currentFieldset].fields, index, delta)\n      }), ..._slice(this.props.value.fieldsets, this.state.currentFieldset + 1)]\n    }));\n  }\n\n  /**\n   * On order fieldset\n   * @method onOrderFieldset\n   * @param {number} index Index\n   * @param {number} delta Delta\n   * @returns {undefined}\n   */\n  onOrderFieldset(index, delta) {\n    const schema = _objectSpread(_objectSpread({}, this.props.value), {}, {\n      fieldsets: move(this.props.value.fieldsets, index, delta)\n    });\n    this.setState({\n      currentFieldset: _findIndex(schema.fieldsets, {\n        id: schema.fieldsets[this.state.currentFieldset].id\n      })\n    });\n    this.onChange(schema);\n  }\n\n  /**\n   * Set current fieldset handler\n   * @method onDragEnd\n   * @param {Number} index Index of fieldset\n   * @returns {undefined}\n   */\n  onDragEnd(result) {\n    if (result.destination && result.destination.droppableId === 'fields-schema-edit') {\n      this.onOrderField(result.source.index, result.destination.index);\n    }\n    if (result.destination && result.destination.droppableId === 'tabs-schema-edit') {\n      this.onOrderFieldset(result.source.index, result.destination.index);\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const {\n      error,\n      reactBeautifulDnd\n    } = this.props;\n    const {\n      Draggable,\n      DragDropContext,\n      Droppable\n    } = reactBeautifulDnd;\n    if (!this.props.value) {\n      return '';\n    }\n    const nonUserCreatedFields = this.props.value.fieldsets[this.state.currentFieldset].fields.filter(fieldId => !isEditable(this.props.value.properties[fieldId]) && fieldId !== 'changeNote');\n    const hasChangeNote = this.props.value.fieldsets[this.state.currentFieldset].fields.indexOf('changeNote') > -1;\n    const userCreatedFieldsStartingIndex = nonUserCreatedFields.length;\n    const lastUserCreatedFieldsIndex = hasChangeNote ? this.props.value.fieldsets[this.state.currentFieldset].fields.length - 1 : this.props.value.fieldsets[this.state.currentFieldset].fields.length;\n    // fields that were not created by the user, but are part of a behavior\n    const makeNonUserFields = () => _map(this.props.value.fieldsets[this.state.currentFieldset].fields.slice(0, userCreatedFieldsStartingIndex), (field, index) => __jsx(\"div\", {\n      style: {\n        background: '#c7d5d859'\n      },\n      key: `${field}-${this.state.currentFieldset}-${index}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1110,\n        columnNumber: 11\n      }\n    }, __jsx(Field, _extends({}, this.props.value.properties[field], {\n      id: field,\n      required: this.props.value.required.indexOf(field) !== -1,\n      onEdit: this.onShowEditField,\n      draggable: false,\n      isDisabled: true,\n      order: index,\n      onDelete: this.onShowDeleteField,\n      onChange: this.onChangeDefaultValue,\n      value: this.props.value.properties[field].default,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1114,\n        columnNumber: 13\n      }\n    }))));\n    // fields created by the user\n    const makeUserFields = () => _map(this.props.value.fieldsets[this.state.currentFieldset].fields.slice(userCreatedFieldsStartingIndex, lastUserCreatedFieldsIndex), (field, index) => __jsx(Draggable, {\n      draggableId: field,\n      index: userCreatedFieldsStartingIndex + index,\n      key: `${field}-${this.state.currentFieldset}-${index}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1137,\n        columnNumber: 11\n      }\n    }, (provided, snapshot) => __jsx(\"div\", _extends({\n      ref: provided.innerRef\n    }, provided.draggableProps, provided.dragHandleProps, {\n      style: getItemStyle(snapshot.isDragging, provided.draggableProps.style),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1143,\n        columnNumber: 15\n      }\n    }), __jsx(Field, _extends({}, this.props.value.properties[field], {\n      id: field,\n      required: this.props.value.required.indexOf(field) !== -1,\n      onEdit: this.onShowEditField,\n      draggable: true,\n      isDisabled: false,\n      order: index,\n      onDelete: this.onShowDeleteField,\n      onChange: this.onChangeDefaultValue,\n      key: `${field}-${this.state.currentFieldset}-${index}`,\n      value: this.props.value.properties[field].default,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1152,\n        columnNumber: 17\n      }\n    })))));\n    const canAddFields = this.state.currentFieldset === 0 || !this.props.value.fieldsets[this.state.currentFieldset].behavior || this.props.value.fieldsets[this.state.currentFieldset].behavior.includes('generated');\n    return __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1179,\n        columnNumber: 7\n      }\n    }, __jsx(Segment.Group, {\n      style: {\n        margin: '-1rem'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1180,\n        columnNumber: 9\n      }\n    }, error.length > 0 && _map(error, (err, index) => __jsx(Message, {\n      icon: \"warning\",\n      key: `${err}-${index}`,\n      negative: true,\n      attached: true,\n      header: this.props.intl.formatMessage(messages.error),\n      content: err,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1187,\n        columnNumber: 15\n      }\n    })), __jsx(DragDropContext, {\n      onDragEnd: this.onDragEnd,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1196,\n        columnNumber: 11\n      }\n    }, __jsx(Droppable, {\n      droppableId: \"tabs-schema-edit\",\n      direction: \"horizontal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1197,\n        columnNumber: 13\n      }\n    }, (provided, snapshot) => __jsx(\"div\", _extends({\n      role: \"tablist\",\n      className: \"ui pointing secondary attached tabular menu\",\n      ref: provided.innerRef\n    }, provided.draggableProps, {\n      style: getTabStyle(snapshot.isDraggingOver),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1199,\n        columnNumber: 17\n      }\n    }), _map(this.props.value.fieldsets, (fieldset, index) => __jsx(SchemaWidgetFieldset, {\n      key: `${fieldset.id}-${this.state.currentFieldset}-${index}`,\n      title: fieldset.title,\n      order: index,\n      active: index === this.state.currentFieldset,\n      onClick: this.onSetCurrentFieldset,\n      onShowEditFieldset: this.onShowEditFieldset,\n      onShowDeleteFieldset: this.onShowDeleteFieldset,\n      onOrderFieldset: this.onOrderFieldset,\n      getItemStyle: getItemStyle,\n      isDraggable: true,\n      isDisabled: fieldset.behavior ? !fieldset.behavior.includes('generated') : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1207,\n        columnNumber: 21\n      }\n    })), __jsx(\"div\", {\n      className: \"item item-add\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1225,\n        columnNumber: 19\n      }\n    }, __jsx(\"button\", {\n      \"aria-label\": this.props.intl.formatMessage(messages.add),\n      className: \"item ui noborder button\",\n      onClick: this.onShowAddFieldset,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1226,\n        columnNumber: 21\n      }\n    }, __jsx(Icon, {\n      name: \"plus\",\n      size: \"large\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1231,\n        columnNumber: 23\n      }\n    }))), provided.placeholder)), makeNonUserFields(), __jsx(Droppable, {\n      droppableId: \"fields-schema-edit\",\n      direction: \"vertical\",\n      type: \"fixed\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1242,\n        columnNumber: 13\n      }\n    }, (provided, snapshot) => __jsx(\"div\", _extends({\n      ref: provided.innerRef\n    }, provided.draggableProps, {\n      style: getFieldStyle(snapshot.isDraggingOver),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1248,\n        columnNumber: 17\n      }\n    }), makeUserFields(), provided.placeholder))), hasChangeNote ? __jsx(\"div\", {\n      style: {\n        background: '#c7d5d859'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1262,\n        columnNumber: 13\n      }\n    }, __jsx(Field, _extends({}, this.props.value.properties.changeNote, {\n      id: 'changeNote',\n      required: this.props.value.required.indexOf('changeNote') !== -1,\n      onEdit: this.onShowEditField,\n      draggable: false,\n      isDisabled: true,\n      order: this.props.value.fieldsets[this.state.currentFieldset].length - 1,\n      onDelete: this.onShowDeleteField,\n      onChange: this.onChangeDefaultValue,\n      key: 'changeNote',\n      value: this.props.value.properties.changeNote.default,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1263,\n        columnNumber: 15\n      }\n    }))) : null, canAddFields && __jsx(Form.Field, {\n      inline: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1285,\n        columnNumber: 13\n      }\n    }, __jsx(Grid, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1286,\n        columnNumber: 15\n      }\n    }, __jsx(Grid.Row, {\n      stretched: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1287,\n        columnNumber: 17\n      }\n    }, __jsx(Grid.Column, {\n      width: \"12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1288,\n        columnNumber: 19\n      }\n    }, __jsx(\"div\", {\n      className: \"wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1289,\n        columnNumber: 21\n      }\n    }, __jsx(\"label\", {\n      htmlFor: \"addfield\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1290,\n        columnNumber: 23\n      }\n    }, this.props.intl.formatMessage(messages.addField))), __jsx(\"div\", {\n      className: \"toolbar\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1294,\n        columnNumber: 21\n      }\n    }, __jsx(\"button\", {\n      \"aria-label\": this.props.intl.formatMessage(messages.add),\n      id: \"addfield\",\n      className: \"item ui noborder button\",\n      onClick: this.onShowAddField,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1295,\n        columnNumber: 23\n      }\n    }, __jsx(Icon, {\n      name: \"plus\",\n      color: \"blue\",\n      size: \"large\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1301,\n        columnNumber: 25\n      }\n    })))))))), this.state.addField !== null && __jsx(ModalForm, {\n      onSubmit: this.onAddField,\n      onCancel: this.onCancel,\n      title: this.props.intl.formatMessage(messages.addField),\n      formData: {\n        type: '',\n        id: '',\n        title: ''\n      },\n      schema: {\n        fieldsets: [{\n          id: 'default',\n          title: this.props.intl.formatMessage(messages.default),\n          fields: ['factory', 'title', 'description', 'required']\n        }],\n        properties: {\n          factory: {\n            type: 'string',\n            factory: 'Choice',\n            title: this.props.intl.formatMessage(messages.type),\n            vocabulary: {\n              '@id': `Fields`\n            }\n          },\n          title: {\n            type: 'string',\n            title: this.props.intl.formatMessage(messages.title)\n          },\n          description: {\n            type: 'string',\n            widget: 'textarea',\n            title: this.props.intl.formatMessage(messages.description)\n          },\n          required: {\n            type: 'boolean',\n            title: this.props.intl.formatMessage(messages.required)\n          }\n        },\n        required: ['type', 'title']\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1311,\n        columnNumber: 11\n      }\n    }), this.state.editField !== null && __jsx(ModalForm, {\n      onSubmit: this.onEditField,\n      onCancel: this.onCancel,\n      title: this.props.intl.formatMessage(messages.editField),\n      formData: _objectSpread(_objectSpread({}, this.props.value.properties[this.state.editField.id]), {}, {\n        id: this.state.editField.id,\n        required: this.props.value.required.indexOf(this.state.editField.id) !== -1,\n        parentFieldSet: this.props.value.fieldsets[this.state.currentFieldset].id,\n        values: formatArrayToTextarea(this.props.value.properties[this.state.editField.id])\n      }),\n      schema: schemaField(this.props.value.properties[this.state.editField.id].factory, this.props.intl, this.props.value.fieldsets.filter(fieldset => !fieldset.behavior || fieldset.id === 'default' || fieldset.behavior.includes('generated'))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1356,\n        columnNumber: 11\n      }\n    }), this.state.addFieldset !== null && __jsx(ModalForm, {\n      onSubmit: this.onAddFieldset,\n      onCancel: this.onCancel,\n      title: this.props.intl.formatMessage(messages.addFieldset),\n      formData: {\n        id: '',\n        title: ''\n      },\n      schema: fieldsetSchema(this.props.intl),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1386,\n        columnNumber: 11\n      }\n    }), this.state.editFieldset !== null && __jsx(ModalForm, {\n      onSubmit: this.onEditFieldset,\n      onCancel: this.onCancel,\n      title: this.props.intl.formatMessage(messages.editFieldset),\n      formData: {\n        id: this.props.value.fieldsets[this.state.editFieldset].id,\n        title: this.props.value.fieldsets[this.state.editFieldset].title\n      },\n      schema: fieldsetSchema(this.props.intl),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1398,\n        columnNumber: 11\n      }\n    }), this.state.deleteFieldset !== null && __jsx(Confirm, {\n      open: true,\n      content: this.props.intl.formatMessage(messages.deleteFieldset),\n      onCancel: this.onCancel,\n      onConfirm: this.onDeleteFieldset,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1410,\n        columnNumber: 11\n      }\n    }), this.state.deleteField !== null && __jsx(Confirm, {\n      open: true,\n      content: this.props.intl.formatMessage(messages.deleteField),\n      onCancel: this.onCancel,\n      onConfirm: this.onDeleteField,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 1418,\n        columnNumber: 11\n      }\n    }));\n  }\n}\n_defineProperty(SchemaWidget, \"propTypes\", {\n  /**\n   * Id of the field\n   */\n  id: PropTypes.string.isRequired,\n  /**\n   * Title of the field\n   */\n  required: PropTypes.bool,\n  /**\n   * Value of the field\n   */\n  value: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  /**\n   * List of error messages\n   */\n  error: PropTypes.arrayOf(PropTypes.string),\n  /**\n   * On change handler\n   */\n  onChange: PropTypes.func.isRequired\n  /**\n   * Intl object\n   */\n});\n_defineProperty(SchemaWidget, \"defaultProps\", {\n  required: false,\n  value: {},\n  error: []\n});\nexport default compose(injectIntl, injectLazyLibs(['reactBeautifulDnd']), connect((state, props) => ({\n  value: _isString(props.value) ? JSON.parse(props.value) : props.value\n}), {}))(SchemaWidget);","map":{"version":3,"names":["React","Component","connect","compose","PropTypes","move","Confirm","Form","Grid","Icon","Message","Segment","defineMessages","injectIntl","injectLazyLibs","slugify","Field","ModalForm","SchemaWidgetFieldset","messages","add","addField","addFieldset","parentFieldSet","editField","editFieldset","default","idTitle","idDescription","choices","string","text","richtext","checkbox","selection","type","title","description","required","minLength","maxLength","minimum","maximum","deleteFieldset","deleteField","error","makeFieldsetList","listOfFieldsets","intl","result","map","id","schemaField","factory","fieldsets","fields","properties","formatMessage","widget","values","fieldsetSchema","isEditable","field","behavior","includes","getItemStyle","isDragging","draggableStyle","userSelect","background","getTabStyle","isDraggingOver","display","flexDirection","flexWrap","getFieldStyle","formatTextareaToArray","textarea","split","elem","trim","filter","formatArrayToTextarea","props","join","items","formatTextareaToChoices","multiple","SchemaWidget","constructor","onChange","bind","onChangeDefaultValue","onAddField","onAddFieldset","onEditField","onEditFieldset","onDeleteFieldset","onDeleteField","onShowAddField","onShowAddFieldset","onShowEditFieldset","onShowEditField","onShowDeleteFieldset","onShowDeleteField","onSetCurrentFieldset","onOrderField","onOrderFieldset","onCancel","onDragEnd","state","currentFieldset","fieldId","currentFieldsetFields","value","hasChangeNote","indexOf","newFieldsetFields","slice","length","oldfieldId","newfieldId","moveToFieldsetWithNewName","newParentFieldsetIndex","findIndex","indexOfChangeNote","fieldsetsWithoutField","fieldsOfNewFieldset","fieldsetsWithField","changeNameInFieldset","formattedValues","listOfProp","forEach","prop","parseFloat","setState","fieldValue","fieldMerge","propsMerge","event","preventDefault","index","schema","delta","destination","droppableId","source","render","reactBeautifulDnd","Draggable","DragDropContext","Droppable","nonUserCreatedFields","userCreatedFieldsStartingIndex","lastUserCreatedFieldsIndex","makeNonUserFields","makeUserFields","provided","snapshot","innerRef","draggableProps","dragHandleProps","style","canAddFields","margin","err","fieldset","placeholder","changeNote","vocabulary","isRequired","bool","oneOfType","object","arrayOf","func","JSON","parse"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Widgets/SchemaWidget.jsx"],"sourcesContent":["/**\n * SchemaWidget component.\n * @module components/manage/Widgets/SchemaWidget\n */\n\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport PropTypes from 'prop-types';\nimport { concat, findIndex, isString, map, omit, slice, without } from 'lodash';\nimport move from 'lodash-move';\nimport { Confirm, Form, Grid, Icon, Message, Segment } from 'semantic-ui-react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport { slugify } from '@plone/volto/helpers/Utils/Utils';\n\nimport {\n  Field,\n  ModalForm,\n  SchemaWidgetFieldset,\n} from '@plone/volto/components';\n\nconst messages = defineMessages({\n  add: {\n    id: 'Add',\n    defaultMessage: 'Add',\n  },\n  addField: {\n    id: 'Add field',\n    defaultMessage: 'Add field',\n  },\n  addFieldset: {\n    id: 'Add fieldset',\n    defaultMessage: 'Add fieldset',\n  },\n  parentFieldSet: {\n    id: 'Parent fieldset',\n    defaultMessage: 'Parent fieldset',\n  },\n  editField: {\n    id: 'Edit field',\n    defaultMessage: 'Edit field',\n  },\n  editFieldset: {\n    id: 'Edit fieldset',\n    defaultMessage: 'Edit fieldset',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  idTitle: {\n    id: 'Short Name',\n    defaultMessage: 'Short Name',\n  },\n  idDescription: {\n    id: 'Used for programmatic access to the fieldset.',\n    defaultMessage: 'Used for programmatic access to the fieldset.',\n  },\n  choices: {\n    id: 'Possible values',\n    defaultMessage: 'Possible values (Enter allowed choices one per line).',\n  },\n  string: {\n    id: 'String',\n    defaultMessage: 'String',\n  },\n  text: {\n    id: 'Text',\n    defaultMessage: 'Text',\n  },\n  richtext: {\n    id: 'Richtext',\n    defaultMessage: 'Richtext',\n  },\n  checkbox: {\n    id: 'Checkbox',\n    defaultMessage: 'Checkbox',\n  },\n  selection: {\n    id: 'Selection',\n    defaultMessage: 'Selection',\n  },\n  type: {\n    id: 'Type',\n    defaultMessage: 'Type',\n  },\n  title: {\n    id: 'Title',\n    defaultMessage: 'Title',\n  },\n  description: {\n    id: 'Description',\n    defaultMessage: 'Description',\n  },\n  required: {\n    id: 'Required',\n    defaultMessage: 'Required',\n  },\n  minLength: {\n    id: 'minLength',\n    defaultMessage: 'Minimum Length',\n  },\n  maxLength: {\n    id: 'maxLength',\n    defaultMessage: 'Maximum Length',\n  },\n  minimum: {\n    id: 'minimum',\n    defaultMessage: 'Start of the range',\n  },\n  maximum: {\n    id: 'maximum',\n    defaultMessage: 'End of the range (including the value itself)',\n  },\n  deleteFieldset: {\n    id: 'Are you sure you want to delete this fieldset including all fields?',\n    defaultMessage:\n      'Are you sure you want to delete this fieldset including all fields?',\n  },\n  deleteField: {\n    id: 'Are you sure you want to delete this field?',\n    defaultMessage: 'Are you sure you want to delete this field?',\n  },\n  error: {\n    id: 'Error',\n    defaultMessage: 'Error',\n  },\n});\n\n/**\n * Makes a list of fieldset types formatted for select widget\n * @param {Object[]} listOfTypes array of strings\n * @param {*} intl\n * @returns {Object[]} example [['default', 'default']]\n */\nconst makeFieldsetList = (listOfFieldsets, intl) => {\n  const result = listOfFieldsets.map((type) => [type.id, type.title]);\n  return result;\n};\n\n/**\n * schemaField used for modal form, when editing a field\n * - based on the factory a set of fields is presented\n * - fields can be moved to another fieldset\n * @param {string} factory - the kind of field\n * @param {Object} intl\n * @param {*} fieldsets\n * @return {Object} - schema\n */\nconst schemaField = (factory, intl, fieldsets) => ({\n  fieldsets: [\n    {\n      id: 'default',\n      title: 'default',\n      fields: [\n        ...['title', 'description', 'parentFieldSet'],\n        ...((factory) => {\n          switch (factory) {\n            case 'Rich Text':\n              return ['maxLength'];\n            case 'URL':\n            case 'Password':\n            case 'label_password_field':\n            case 'Email':\n            case 'label_email':\n              return ['minLength', 'maxLength'];\n            case 'Integer':\n            case 'label_integer_field':\n              return ['minimum', 'maximum'];\n            case 'Floating-point number':\n            case 'label_float_field':\n            case 'Date/Time':\n            case 'label_datetime_field':\n            case 'Date':\n            case 'label_date_field':\n            case 'File':\n            case 'File Upload':\n            case 'Image':\n            case 'Yes/No':\n            case 'label_boolean_field':\n            case 'JSONField':\n            case 'Relation Choice':\n            case 'Relation List':\n              return [];\n            case 'Multiple Choice':\n            case 'label_multi_choice_field':\n            case 'Choice':\n            case 'label_choice_field':\n              return ['values'];\n            default:\n              return ['minLength', 'maxLength'];\n          }\n        })(factory),\n        ...['required'],\n      ],\n    },\n  ],\n  properties: {\n    title: {\n      type: 'string',\n      title: intl.formatMessage(messages.title),\n    },\n    description: {\n      type: 'string',\n      widget: 'textarea',\n      title: intl.formatMessage(messages.description),\n    },\n    parentFieldSet: {\n      type: 'string',\n      title: intl.formatMessage(messages.parentFieldSet),\n      choices: makeFieldsetList(fieldsets),\n    },\n    required: {\n      type: 'boolean',\n      title: intl.formatMessage(messages.required),\n    },\n    ...((factory) => {\n      switch (factory) {\n        case 'Rich Text':\n          return {\n            maxLength: {\n              type: 'integer',\n              title: intl.formatMessage(messages.maxLength),\n            },\n          };\n        case 'URL':\n        case 'Password':\n        case 'label_password_field':\n        case 'Email':\n        case 'label_email':\n          return {\n            minLength: {\n              type: 'integer',\n              title: intl.formatMessage(messages.minLength),\n            },\n            maxLength: {\n              type: 'integer',\n              title: intl.formatMessage(messages.maxLength),\n            },\n          };\n        case 'Integer':\n        case 'label_integer_field':\n          return {\n            minimum: {\n              type: 'integer',\n              title: intl.formatMessage(messages.minimum),\n            },\n            maximum: {\n              type: 'integer',\n              title: intl.formatMessage(messages.maximum),\n            },\n          };\n        case 'Floating-point number':\n        case 'label_float_field':\n        case 'Date/Time':\n        case 'label_datetime_field':\n        case 'Date':\n        case 'label_date_field':\n        case 'File':\n        case 'File Upload':\n        case 'Image':\n        case 'Yes/No':\n        case 'label_boolean_field':\n        case 'JSONField':\n        case 'Relation Choice':\n        case 'Relation List':\n          return {};\n        case 'Multiple Choice':\n        case 'label_multi_choice_field':\n        case 'Choice':\n        case 'label_choice_field':\n          return {\n            values: {\n              type: 'string',\n              title: intl.formatMessage(messages.choices),\n              widget: 'textarea',\n            },\n          };\n        default:\n          return {\n            minLength: {\n              type: 'integer',\n              title: intl.formatMessage(messages.minLength),\n            },\n            maxLength: {\n              type: 'integer',\n              title: intl.formatMessage(messages.maxLength),\n            },\n          };\n      }\n    })(factory),\n  },\n  required: ['type', 'title'],\n});\n\n/**\n * schema for adding a new field\n * @param {Object} intl\n */\nconst fieldsetSchema = (intl) => ({\n  fieldsets: [\n    {\n      id: 'default',\n      title: intl.formatMessage(messages.default),\n      fields: ['title', 'id'],\n    },\n  ],\n  properties: {\n    id: {\n      type: 'string',\n      title: intl.formatMessage(messages.idTitle),\n      description: intl.formatMessage(messages.idDescription),\n    },\n    title: {\n      type: 'string',\n      title: intl.formatMessage(messages.title),\n    },\n  },\n  required: ['id', 'title'],\n});\n\n/**\n * 'plone.dexterity.schema.generated' is considered user created\n * @param {Object} field\n */\nconst isEditable = (field) =>\n  !field.behavior || field.behavior.includes('generated');\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: 'none',\n\n  // change background colour if dragging\n  background: isDragging ? 'white' : 'transparent',\n\n  // styles we need to apply on draggable\n  ...draggableStyle,\n});\n\nconst getTabStyle = (isDraggingOver) => ({\n  background: isDraggingOver ? '#f4f4f4' : 'transparent',\n  display: 'flex',\n  flexDirection: 'row',\n  flexWrap: 'wrap',\n});\n\nconst getFieldStyle = (isDraggingOver) => ({\n  background: isDraggingOver ? '#f4f4f4' : 'transparent',\n});\n\n/**\n * will transform a string with new lines in an array for each item on a line\n * @param {string} textarea - has '\\r\\n' characters\n */\nconst formatTextareaToArray = (textarea) => {\n  const values =\n    textarea && textarea\n      ? textarea\n          .split(/(\\r\\n|\\n|\\r)/gm)\n          .map((elem) => elem.trim())\n          .filter((elem) => elem !== '')\n      : null;\n\n  return values ? { values } : {};\n};\n\nconst formatArrayToTextarea = (props) => {\n  if (props?.values) {\n    return props.values.join('\\n');\n  }\n  if (props?.choices) {\n    return props.choices.map((elem) => elem[0]).join('\\n');\n  }\n  if (props?.items?.choices) {\n    return props.items.choices.map((elem) => elem[0]).join('\\n');\n  }\n  return '';\n};\n\nconst formatTextareaToChoices = (textarea, multiple) => {\n  const choices =\n    textarea && textarea\n      ? textarea\n          .split(/(\\r\\n|\\n|\\r)/gm)\n          .map((elem) => elem.trim())\n          .filter((elem) => elem !== '')\n          .map((elem) => [elem, elem])\n      : null;\n\n  if (!multiple) {\n    return choices ? { choices } : {};\n  }\n\n  const items = choices ? { choices: choices } : {};\n  return items ? { items } : {};\n};\n\n/**\n * SchemaWidget component class.\n * @class SchemaWidget\n * @extends Component\n */\nclass SchemaWidget extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    /**\n     * Id of the field\n     */\n    id: PropTypes.string.isRequired,\n    /**\n     * Title of the field\n     */\n    required: PropTypes.bool,\n    /**\n     * Value of the field\n     */\n    value: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n    /**\n     * List of error messages\n     */\n    error: PropTypes.arrayOf(PropTypes.string),\n    /**\n     * On change handler\n     */\n    onChange: PropTypes.func.isRequired,\n    /**\n     * Intl object\n     */\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    required: false,\n    value: {},\n    error: [],\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.onChange = this.onChange.bind(this);\n    this.onChangeDefaultValue = this.onChangeDefaultValue.bind(this);\n    this.onAddField = this.onAddField.bind(this);\n    this.onAddFieldset = this.onAddFieldset.bind(this);\n    this.onEditField = this.onEditField.bind(this);\n    this.onEditFieldset = this.onEditFieldset.bind(this);\n    this.onDeleteFieldset = this.onDeleteFieldset.bind(this);\n    this.onDeleteField = this.onDeleteField.bind(this);\n    this.onShowAddField = this.onShowAddField.bind(this);\n    this.onShowAddFieldset = this.onShowAddFieldset.bind(this);\n    this.onShowEditFieldset = this.onShowEditFieldset.bind(this);\n    this.onShowEditField = this.onShowEditField.bind(this);\n    this.onShowDeleteFieldset = this.onShowDeleteFieldset.bind(this);\n    this.onShowDeleteField = this.onShowDeleteField.bind(this);\n    this.onSetCurrentFieldset = this.onSetCurrentFieldset.bind(this);\n    this.onOrderField = this.onOrderField.bind(this);\n    this.onOrderFieldset = this.onOrderFieldset.bind(this);\n    this.onCancel = this.onCancel.bind(this);\n    this.onDragEnd = this.onDragEnd.bind(this);\n    this.state = {\n      addField: null,\n      addFieldset: null,\n      editFieldset: null,\n      editField: null,\n      deleteFieldset: null,\n      deleteField: null,\n      currentFieldset: 0,\n    };\n  }\n\n  /**\n   * Add field handler\n   * @method onAddField\n   * @param {Object} values Form values\n   * @returns {undefined}\n   */\n  onAddField(values) {\n    const fieldId = slugify(values.title);\n    const currentFieldsetFields = this.props.value.fieldsets[\n      this.state.currentFieldset\n    ].fields;\n    const hasChangeNote = currentFieldsetFields.indexOf('changeNote') > -1;\n    const newFieldsetFields = hasChangeNote\n      ? [\n          ...currentFieldsetFields.slice(0, currentFieldsetFields.length - 1),\n          fieldId,\n          currentFieldsetFields[currentFieldsetFields.length - 1],\n        ]\n      : [...currentFieldsetFields, fieldId];\n\n    this.onChange({\n      ...this.props.value,\n      fieldsets: [\n        ...slice(this.props.value.fieldsets, 0, this.state.currentFieldset),\n        {\n          ...this.props.value.fieldsets[this.state.currentFieldset],\n          fields: newFieldsetFields,\n        },\n        ...slice(this.props.value.fieldsets, this.state.currentFieldset + 1),\n      ],\n      properties: {\n        ...this.props.value.properties,\n        [fieldId]: {\n          title: values.title,\n          description: values.description,\n          id: fieldId,\n          ...((factory) => {\n            switch (factory) {\n              case 'Date/Time':\n              case 'label_datetime_field':\n                return {\n                  type: 'string',\n                  widget: 'datetime',\n                  factory,\n                };\n              case 'Date':\n              case 'label_date_field':\n                return {\n                  type: 'string',\n                  widget: 'date',\n                  factory,\n                };\n              case 'Email':\n              case 'label_email':\n                return {\n                  type: 'string',\n                  widget: 'email',\n                  factory,\n                };\n              case 'File':\n              case 'File Upload':\n                return {\n                  type: 'object',\n                  factory,\n                };\n              case 'Floating-point number':\n              case 'label_float_field':\n                return {\n                  type: 'number',\n                  factory,\n                };\n              case 'Integer':\n              case 'label_integer_field':\n                return {\n                  type: 'integer',\n                  factory,\n                };\n              case 'Image':\n                return {\n                  type: 'object',\n                  factory,\n                };\n              case 'JSONField':\n                return {\n                  type: 'dict',\n                  widget: 'json',\n                  factory,\n                };\n              case 'Multiple Choice':\n              case 'label_multi_choice_field':\n                return {\n                  type: 'array',\n                  factory,\n                };\n              case 'Relation List':\n                return {\n                  type: 'array',\n                  factory,\n                };\n              case 'Choice':\n              case 'label_choice_field':\n                return {\n                  type: 'string',\n                  choices: [],\n                  factory,\n                };\n              case 'Relation Choice':\n                return {\n                  type: 'string',\n                  factory,\n                };\n              case 'Password':\n              case 'label_password_field':\n                return {\n                  type: 'string',\n                  widget: 'password',\n                  factory,\n                };\n              case 'Rich Text':\n                return {\n                  type: 'string',\n                  widget: 'richtext',\n                  factory,\n                };\n              case 'URL':\n                return {\n                  type: 'string',\n                  widget: 'url',\n                  factory,\n                };\n              case 'Yes/No':\n              case 'label_boolean_field':\n                return {\n                  type: 'boolean',\n                  factory,\n                };\n              default:\n                return {\n                  type: 'string',\n                  factory,\n                };\n            }\n          })(values.factory),\n        },\n      },\n      required: values.required\n        ? [...this.props.value.required, fieldId]\n        : this.props.value.required,\n    });\n    this.onCancel();\n  }\n\n  /**\n   * Add fieldset handler\n   * @method onAddFieldset\n   * @param {Object} values Form values\n   * @returns {undefined}\n   */\n  onAddFieldset(values) {\n    this.onChange({\n      ...this.props.value,\n      fieldsets: [\n        ...this.props.value.fieldsets,\n        {\n          ...values,\n          fields: [],\n        },\n      ],\n    });\n    this.onCancel();\n  }\n\n  /**\n   * Edit fieldset handler\n   * @method onEditFieldset\n   * @param {Object} values Form values\n   * @returns {undefined}\n   */\n  onEditFieldset(values) {\n    values.fields =\n      values.fields ||\n      this.props.value.fieldsets[this.state.editFieldset]?.fields ||\n      [];\n    this.onChange({\n      ...this.props.value,\n      fieldsets: [\n        ...slice(this.props.value.fieldsets, 0, this.state.editFieldset),\n        values,\n        ...slice(this.props.value.fieldsets, this.state.editFieldset + 1),\n      ],\n    });\n    this.onCancel();\n  }\n\n  /**\n   * Recreates the fieldset structure\n   * will move change name of the field if needed and\n   * change fieldset if changed\n   * @param {Object[]} fieldsets\n   * @param {string} parentFieldSet - id\n   * @param {number} currentFieldset - index\n   * @param {Object} oldfieldId\n   * @param {Object} newfieldId\n   * @returns {Object[]} fieldsets\n   */\n  editFieldset(\n    fieldsets,\n    parentFieldSet,\n    currentFieldset,\n    oldfieldId,\n    newfieldId,\n  ) {\n    const moveToFieldsetWithNewName = () => {\n      const newParentFieldsetIndex = fieldsets.findIndex(\n        (field) => field.id === parentFieldSet,\n      );\n      const indexOfChangeNote = fieldsets[\n        newParentFieldsetIndex\n      ].fields.indexOf('changeNote');\n      // remove from current fieldset\n      const fieldsetsWithoutField = [\n        ...slice(fieldsets, 0, currentFieldset),\n        {\n          ...fieldsets[currentFieldset],\n          fields: fieldsets[currentFieldset].fields.filter(\n            (fieldId) => fieldId !== oldfieldId,\n          ),\n        },\n        ...slice(fieldsets, currentFieldset + 1),\n      ];\n\n      const fieldsOfNewFieldset =\n        indexOfChangeNote > -1\n          ? [\n              ...fieldsetsWithoutField[newParentFieldsetIndex].fields.slice(\n                0,\n                indexOfChangeNote + 1,\n              ),\n              oldfieldId,\n              fieldsetsWithoutField[newParentFieldsetIndex].fields[\n                indexOfChangeNote\n              ],\n            ]\n          : [\n              ...fieldsetsWithoutField[newParentFieldsetIndex].fields,\n              oldfieldId,\n            ];\n\n      // add to new fieldset\n      const fieldsetsWithField = [\n        ...slice(fieldsetsWithoutField, 0, newParentFieldsetIndex),\n        {\n          ...fieldsetsWithoutField[newParentFieldsetIndex],\n          fields: fieldsOfNewFieldset,\n        },\n        ...slice(fieldsetsWithoutField, newParentFieldsetIndex + 1),\n      ];\n      return fieldsetsWithField;\n    };\n\n    const changeNameInFieldset = () => {\n      return [\n        ...slice(fieldsets, 0, currentFieldset),\n        {\n          ...fieldsets[currentFieldset],\n          fields: map(fieldsets[currentFieldset].fields, (field) =>\n            field === oldfieldId ? newfieldId : field,\n          ),\n        },\n        ...slice(fieldsets, currentFieldset + 1),\n      ];\n    };\n\n    const result =\n      parentFieldSet !== fieldsets[currentFieldset].id\n        ? moveToFieldsetWithNewName()\n        : changeNameInFieldset();\n    return result;\n  }\n\n  /**\n   * Edit field handler\n   * recreates the schema based on field changes (properties, name, fieldset)\n   * @method onEditField\n   * @param {Object} values Field values\n   * @returns {undefined}\n   */\n  onEditField(values) {\n    let formattedValues = { ...values };\n\n    const listOfProp = ['minLength', 'maxLength', 'minimum', 'maximum'];\n    listOfProp.forEach((prop) => {\n      formattedValues = {\n        ...formattedValues,\n        ...{ [prop]: values[prop] ? parseFloat(values[prop]) : null },\n      };\n    });\n\n    const multiple =\n      this.props.value.properties[this.state.editField.id]?.factory ===\n        'Multiple Choice' ||\n      this.props.value.properties[this.state.editField.id]?.factory ===\n        'label_multi_choice_field';\n    const result = {\n      ...this.props.value,\n      fieldsets: formattedValues.parentFieldSet\n        ? this.editFieldset(\n            this.props.value.fieldsets,\n            formattedValues.parentFieldSet,\n            this.state.currentFieldset,\n            this.state.editField.id,\n            formattedValues.id,\n          )\n        : this.props.value.fieldsets,\n      properties: {\n        ...omit(this.props.value.properties, [this.state.editField.id]),\n        [formattedValues.id]: {\n          ...this.props.value.properties[this.state.editField.id],\n          ...omit(formattedValues, ['id', 'parentFieldSet']),\n          ...formatTextareaToArray(formattedValues.values),\n          ...formatTextareaToChoices(formattedValues.values, multiple),\n        },\n      },\n      required: formattedValues.required\n        ? concat(without(this.props.value.required, this.state.editField.id), [\n            formattedValues.id,\n          ])\n        : without(this.props.value.required, this.state.editField.id),\n    };\n\n    this.onChange(result);\n\n    this.onCancel();\n  }\n\n  /**\n   * Delete fieldset handler\n   * @method onDeleteFieldset\n   * @returns {undefined}\n   */\n  onDeleteFieldset() {\n    if (this.state.currentFieldset > this.props.value.fieldsets.length - 2) {\n      this.setState({\n        currentFieldset: this.state.currentFieldset - 1,\n      });\n    }\n    this.onChange({\n      ...this.props.value,\n      fieldsets: [\n        ...slice(this.props.value.fieldsets, 0, this.state.deleteFieldset),\n        ...slice(this.props.value.fieldsets, this.state.deleteFieldset + 1),\n      ],\n      properties: omit(\n        this.props.value.properties,\n        this.props.value.fieldsets[this.state.deleteFieldset].fields,\n      ),\n    });\n    this.onCancel();\n  }\n\n  /**\n   * Delete field handler\n   * @method onDeleteField\n   * @returns {undefined}\n   */\n  onDeleteField() {\n    this.onChange({\n      ...this.props.value,\n      fieldsets: [\n        ...slice(this.props.value.fieldsets, 0, this.state.currentFieldset),\n        {\n          ...this.props.value.fieldsets[this.state.currentFieldset],\n          fields: without(\n            this.props.value.fieldsets[this.state.currentFieldset].fields,\n            this.state.deleteField,\n          ),\n        },\n        ...slice(this.props.value.fieldsets, this.state.currentFieldset + 1),\n      ],\n      properties: omit(this.props.value.properties, [this.state.deleteField]),\n    });\n    this.onCancel();\n  }\n\n  /**\n   * Change handler\n   * @method onChange\n   * @param {Object} value New schema\n   * @returns {undefined}\n   */\n  onChange(value) {\n    this.props.onChange(this.props.id, value);\n  }\n\n  /**\n   * Change default value handler\n   * @method onChangeDefaultValue\n   * @param {string} fieldId\n   * @param {string} fieldValue\n   */\n  onChangeDefaultValue(fieldId, fieldValue) {\n    // Default values can have irreversible consequence, thus skip it for now.\n    // const value = { default: fieldValue }\n    const value = {};\n\n    const fieldMerge = {\n      ...this.props.value.properties[fieldId],\n      ...value,\n    };\n    const propsMerge = {\n      ...this.props.value.properties,\n      ...{ [fieldId]: fieldMerge },\n    };\n\n    this.onChange({\n      ...this.props.value,\n      properties: propsMerge,\n    });\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.setState({\n      addField: null,\n      addFieldset: null,\n      editFieldset: null,\n      editField: null,\n      deleteFieldset: null,\n      deleteField: null,\n    });\n  }\n\n  /**\n   * Show add field handler\n   * @method onShowAddField\n   * @returns {undefined}\n   */\n  onShowAddField(event) {\n    this.setState({\n      addField: true,\n    });\n    event.preventDefault();\n  }\n\n  /**\n   * Show add fieldset handler\n   * @method onShowAddFieldset\n   * @returns {undefined}\n   */\n  onShowAddFieldset(event) {\n    this.setState({\n      addFieldset: true,\n    });\n    event.preventDefault();\n  }\n\n  /**\n   * Show edit fieldset handler\n   * @method onShowEditFieldset\n   * @param {Number} index Index of fieldset\n   * @returns {undefined}\n   */\n  onShowEditFieldset(index) {\n    this.setState({\n      editFieldset: index,\n    });\n  }\n\n  /**\n   * Show edit field handler\n   * @method onShowEditField\n   * @param {string} id Id of field\n   * @param {Object} schema Schema of the field\n   * @returns {undefined}\n   */\n  onShowEditField(id, schema) {\n    return this.setState({\n      editField: {\n        id,\n      },\n    });\n  }\n\n  /**\n   * Show delete fieldset handler\n   * @method onShowDeleteFieldset\n   * @param {Number} index Index of fieldset\n   * @param {Object} event Event object\n   * @returns {undefined}\n   */\n  onShowDeleteFieldset(index) {\n    this.setState({\n      deleteFieldset: index,\n    });\n  }\n\n  /**\n   * Show delete field handler\n   * @method onShowDeleteField\n   * @param {String} field Field to delete\n   * @param {Object} event Event object\n   * @returns {undefined}\n   */\n  onShowDeleteField(field) {\n    this.setState({\n      deleteField: field,\n    });\n  }\n\n  /**\n   * Set current fieldset handler\n   * @method onSetCurrentFieldset\n   * @param {Number} index Index of fieldset\n   * @returns {undefined}\n   */\n  onSetCurrentFieldset(index) {\n    this.setState({\n      currentFieldset: index,\n    });\n  }\n\n  /**\n   * On order fieldset\n   * @method onOrderField\n   * @param {number} index Index\n   * @param {number} delta Delta\n   * @returns {undefined}\n   */\n  onOrderField(index, delta) {\n    this.onChange({\n      ...this.props.value,\n      fieldsets: [\n        ...slice(this.props.value.fieldsets, 0, this.state.currentFieldset),\n        {\n          ...this.props.value.fieldsets[this.state.currentFieldset],\n          fields: move(\n            this.props.value.fieldsets[this.state.currentFieldset].fields,\n            index,\n            delta,\n          ),\n        },\n        ...slice(this.props.value.fieldsets, this.state.currentFieldset + 1),\n      ],\n    });\n  }\n\n  /**\n   * On order fieldset\n   * @method onOrderFieldset\n   * @param {number} index Index\n   * @param {number} delta Delta\n   * @returns {undefined}\n   */\n  onOrderFieldset(index, delta) {\n    const schema = {\n      ...this.props.value,\n      fieldsets: move(this.props.value.fieldsets, index, delta),\n    };\n    this.setState({\n      currentFieldset: findIndex(schema.fieldsets, {\n        id: schema.fieldsets[this.state.currentFieldset].id,\n      }),\n    });\n    this.onChange(schema);\n  }\n\n  /**\n   * Set current fieldset handler\n   * @method onDragEnd\n   * @param {Number} index Index of fieldset\n   * @returns {undefined}\n   */\n  onDragEnd(result) {\n    if (\n      result.destination &&\n      result.destination.droppableId === 'fields-schema-edit'\n    ) {\n      this.onOrderField(result.source.index, result.destination.index);\n    }\n    if (\n      result.destination &&\n      result.destination.droppableId === 'tabs-schema-edit'\n    ) {\n      this.onOrderFieldset(result.source.index, result.destination.index);\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { error, reactBeautifulDnd } = this.props;\n    const { Draggable, DragDropContext, Droppable } = reactBeautifulDnd;\n    if (!this.props.value) {\n      return '';\n    }\n    const nonUserCreatedFields = this.props.value.fieldsets[\n      this.state.currentFieldset\n    ].fields.filter(\n      (fieldId) =>\n        !isEditable(this.props.value.properties[fieldId]) &&\n        fieldId !== 'changeNote',\n    );\n    const hasChangeNote =\n      this.props.value.fieldsets[this.state.currentFieldset].fields.indexOf(\n        'changeNote',\n      ) > -1;\n    const userCreatedFieldsStartingIndex = nonUserCreatedFields.length;\n    const lastUserCreatedFieldsIndex = hasChangeNote\n      ? this.props.value.fieldsets[this.state.currentFieldset].fields.length - 1\n      : this.props.value.fieldsets[this.state.currentFieldset].fields.length;\n    // fields that were not created by the user, but are part of a behavior\n    const makeNonUserFields = () =>\n      map(\n        this.props.value.fieldsets[this.state.currentFieldset].fields.slice(\n          0,\n          userCreatedFieldsStartingIndex,\n        ),\n        (field, index) => (\n          <div\n            style={{ background: '#c7d5d859' }}\n            key={`${field}-${this.state.currentFieldset}-${index}`}\n          >\n            <Field\n              {...this.props.value.properties[field]}\n              id={field}\n              required={this.props.value.required.indexOf(field) !== -1}\n              onEdit={this.onShowEditField}\n              draggable={false}\n              isDisabled={true}\n              order={index}\n              onDelete={this.onShowDeleteField}\n              onChange={this.onChangeDefaultValue}\n              value={this.props.value.properties[field].default}\n            />\n          </div>\n        ),\n      );\n    // fields created by the user\n    const makeUserFields = () =>\n      map(\n        this.props.value.fieldsets[this.state.currentFieldset].fields.slice(\n          userCreatedFieldsStartingIndex,\n          lastUserCreatedFieldsIndex,\n        ),\n        (field, index) => (\n          <Draggable\n            draggableId={field}\n            index={userCreatedFieldsStartingIndex + index}\n            key={`${field}-${this.state.currentFieldset}-${index}`}\n          >\n            {(provided, snapshot) => (\n              <div\n                ref={provided.innerRef}\n                {...provided.draggableProps}\n                {...provided.dragHandleProps}\n                style={getItemStyle(\n                  snapshot.isDragging,\n                  provided.draggableProps.style,\n                )}\n              >\n                <Field\n                  {...this.props.value.properties[field]}\n                  id={field}\n                  required={this.props.value.required.indexOf(field) !== -1}\n                  onEdit={this.onShowEditField}\n                  draggable={true}\n                  isDisabled={false}\n                  order={index}\n                  onDelete={this.onShowDeleteField}\n                  onChange={this.onChangeDefaultValue}\n                  key={`${field}-${this.state.currentFieldset}-${index}`}\n                  value={this.props.value.properties[field].default}\n                />\n              </div>\n            )}\n          </Draggable>\n        ),\n      );\n\n    const canAddFields =\n      this.state.currentFieldset === 0 ||\n      !this.props.value.fieldsets[this.state.currentFieldset].behavior ||\n      this.props.value.fieldsets[this.state.currentFieldset].behavior.includes(\n        'generated',\n      );\n\n    return (\n      <div>\n        <Segment.Group\n          style={{\n            margin: '-1rem',\n          }}\n        >\n          {error.length > 0 &&\n            map(error, (err, index) => (\n              <Message\n                icon=\"warning\"\n                key={`${err}-${index}`}\n                negative\n                attached\n                header={this.props.intl.formatMessage(messages.error)}\n                content={err}\n              />\n            ))}\n          <DragDropContext onDragEnd={this.onDragEnd}>\n            <Droppable droppableId=\"tabs-schema-edit\" direction=\"horizontal\">\n              {(provided, snapshot) => (\n                <div\n                  role=\"tablist\"\n                  className=\"ui pointing secondary attached tabular menu\"\n                  ref={provided.innerRef}\n                  {...provided.draggableProps}\n                  style={getTabStyle(snapshot.isDraggingOver)}\n                >\n                  {map(this.props.value.fieldsets, (fieldset, index) => (\n                    <SchemaWidgetFieldset\n                      key={`${fieldset.id}-${this.state.currentFieldset}-${index}`}\n                      title={fieldset.title}\n                      order={index}\n                      active={index === this.state.currentFieldset}\n                      onClick={this.onSetCurrentFieldset}\n                      onShowEditFieldset={this.onShowEditFieldset}\n                      onShowDeleteFieldset={this.onShowDeleteFieldset}\n                      onOrderFieldset={this.onOrderFieldset}\n                      getItemStyle={getItemStyle}\n                      isDraggable={true}\n                      isDisabled={\n                        fieldset.behavior\n                          ? !fieldset.behavior.includes('generated')\n                          : false\n                      }\n                    />\n                  ))}\n                  <div className=\"item item-add\">\n                    <button\n                      aria-label={this.props.intl.formatMessage(messages.add)}\n                      className=\"item ui noborder button\"\n                      onClick={this.onShowAddFieldset}\n                    >\n                      <Icon name=\"plus\" size=\"large\" />\n                    </button>\n                  </div>\n\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n\n            {makeNonUserFields()}\n\n            <Droppable\n              droppableId=\"fields-schema-edit\"\n              direction=\"vertical\"\n              type=\"fixed\"\n            >\n              {(provided, snapshot) => (\n                <div\n                  ref={provided.innerRef}\n                  {...provided.draggableProps}\n                  style={getFieldStyle(snapshot.isDraggingOver)}\n                >\n                  {makeUserFields()}\n\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          </DragDropContext>\n\n          {hasChangeNote ? (\n            <div style={{ background: '#c7d5d859' }}>\n              <Field\n                {...this.props.value.properties.changeNote}\n                id={'changeNote'}\n                required={\n                  this.props.value.required.indexOf('changeNote') !== -1\n                }\n                onEdit={this.onShowEditField}\n                draggable={false}\n                isDisabled={true}\n                order={\n                  this.props.value.fieldsets[this.state.currentFieldset]\n                    .length - 1\n                }\n                onDelete={this.onShowDeleteField}\n                onChange={this.onChangeDefaultValue}\n                key={'changeNote'}\n                value={this.props.value.properties.changeNote.default}\n              />\n            </div>\n          ) : null}\n\n          {canAddFields && (\n            <Form.Field inline>\n              <Grid>\n                <Grid.Row stretched>\n                  <Grid.Column width=\"12\">\n                    <div className=\"wrapper\">\n                      <label htmlFor=\"addfield\">\n                        {this.props.intl.formatMessage(messages.addField)}\n                      </label>\n                    </div>\n                    <div className=\"toolbar\">\n                      <button\n                        aria-label={this.props.intl.formatMessage(messages.add)}\n                        id=\"addfield\"\n                        className=\"item ui noborder button\"\n                        onClick={this.onShowAddField}\n                      >\n                        <Icon name=\"plus\" color=\"blue\" size=\"large\" />\n                      </button>\n                    </div>\n                  </Grid.Column>\n                </Grid.Row>\n              </Grid>\n            </Form.Field>\n          )}\n        </Segment.Group>\n        {this.state.addField !== null && (\n          <ModalForm\n            onSubmit={this.onAddField}\n            onCancel={this.onCancel}\n            title={this.props.intl.formatMessage(messages.addField)}\n            formData={{\n              type: '',\n              id: '',\n              title: '',\n            }}\n            schema={{\n              fieldsets: [\n                {\n                  id: 'default',\n                  title: this.props.intl.formatMessage(messages.default),\n                  fields: ['factory', 'title', 'description', 'required'],\n                },\n              ],\n              properties: {\n                factory: {\n                  type: 'string',\n                  factory: 'Choice',\n                  title: this.props.intl.formatMessage(messages.type),\n                  vocabulary: {\n                    '@id': `Fields`,\n                  },\n                },\n                title: {\n                  type: 'string',\n                  title: this.props.intl.formatMessage(messages.title),\n                },\n                description: {\n                  type: 'string',\n                  widget: 'textarea',\n                  title: this.props.intl.formatMessage(messages.description),\n                },\n                required: {\n                  type: 'boolean',\n                  title: this.props.intl.formatMessage(messages.required),\n                },\n              },\n              required: ['type', 'title'],\n            }}\n          />\n        )}\n        {this.state.editField !== null && (\n          <ModalForm\n            onSubmit={this.onEditField}\n            onCancel={this.onCancel}\n            title={this.props.intl.formatMessage(messages.editField)}\n            formData={{\n              ...this.props.value.properties[this.state.editField.id],\n              id: this.state.editField.id,\n              required:\n                this.props.value.required.indexOf(this.state.editField.id) !==\n                -1,\n              parentFieldSet: this.props.value.fieldsets[\n                this.state.currentFieldset\n              ].id,\n              values: formatArrayToTextarea(\n                this.props.value.properties[this.state.editField.id],\n              ),\n            }}\n            schema={schemaField(\n              this.props.value.properties[this.state.editField.id].factory,\n              this.props.intl,\n              this.props.value.fieldsets.filter(\n                (fieldset) =>\n                  !fieldset.behavior ||\n                  fieldset.id === 'default' ||\n                  fieldset.behavior.includes('generated'),\n              ),\n            )}\n          />\n        )}\n        {this.state.addFieldset !== null && (\n          <ModalForm\n            onSubmit={this.onAddFieldset}\n            onCancel={this.onCancel}\n            title={this.props.intl.formatMessage(messages.addFieldset)}\n            formData={{\n              id: '',\n              title: '',\n            }}\n            schema={fieldsetSchema(this.props.intl)}\n          />\n        )}\n        {this.state.editFieldset !== null && (\n          <ModalForm\n            onSubmit={this.onEditFieldset}\n            onCancel={this.onCancel}\n            title={this.props.intl.formatMessage(messages.editFieldset)}\n            formData={{\n              id: this.props.value.fieldsets[this.state.editFieldset].id,\n              title: this.props.value.fieldsets[this.state.editFieldset].title,\n            }}\n            schema={fieldsetSchema(this.props.intl)}\n          />\n        )}\n        {this.state.deleteFieldset !== null && (\n          <Confirm\n            open\n            content={this.props.intl.formatMessage(messages.deleteFieldset)}\n            onCancel={this.onCancel}\n            onConfirm={this.onDeleteFieldset}\n          />\n        )}\n        {this.state.deleteField !== null && (\n          <Confirm\n            open\n            content={this.props.intl.formatMessage(messages.deleteField)}\n            onCancel={this.onCancel}\n            onConfirm={this.onDeleteField}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  injectLazyLibs(['reactBeautifulDnd']),\n  connect(\n    (state, props) => ({\n      value: isString(props.value) ? JSON.parse(props.value) : props.value,\n    }),\n    {},\n  ),\n)(SchemaWidget);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Add","defaultMessage":"Add"},{"id":"Add field","defaultMessage":"Add field"},{"id":"Add fieldset","defaultMessage":"Add fieldset"},{"id":"Parent fieldset","defaultMessage":"Parent fieldset"},{"id":"Edit field","defaultMessage":"Edit field"},{"id":"Edit fieldset","defaultMessage":"Edit fieldset"},{"id":"Default","defaultMessage":"Default"},{"id":"Short Name","defaultMessage":"Short Name"},{"id":"Used for programmatic access to the fieldset.","defaultMessage":"Used for programmatic access to the fieldset."},{"id":"Possible values","defaultMessage":"Possible values (Enter allowed choices one per line)."},{"id":"String","defaultMessage":"String"},{"id":"Text","defaultMessage":"Text"},{"id":"Richtext","defaultMessage":"Richtext"},{"id":"Checkbox","defaultMessage":"Checkbox"},{"id":"Selection","defaultMessage":"Selection"},{"id":"Type","defaultMessage":"Type"},{"id":"Title","defaultMessage":"Title"},{"id":"Description","defaultMessage":"Description"},{"id":"Required","defaultMessage":"Required"},{"id":"minLength","defaultMessage":"Minimum Length"},{"id":"maxLength","defaultMessage":"Maximum Length"},{"id":"minimum","defaultMessage":"Start of the range"},{"id":"maximum","defaultMessage":"End of the range (including the value itself)"},{"id":"Are you sure you want to delete this fieldset including all fields?","defaultMessage":"Are you sure you want to delete this fieldset including all fields?"},{"id":"Are you sure you want to delete this field?","defaultMessage":"Are you sure you want to delete this field?"},{"id":"Error","defaultMessage":"Error"}]}},"sourceType":"module","externalDependencies":[]}