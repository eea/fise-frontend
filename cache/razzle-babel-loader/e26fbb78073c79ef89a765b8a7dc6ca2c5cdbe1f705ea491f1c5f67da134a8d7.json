{"ast":null,"code":"import _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n/**\n * Users actions.\n * @module actions/users/users\n */\n\nimport { stringify } from 'query-string';\nimport { CREATE_USER, DELETE_USER, GET_USER, INITIAL_PASSWORD, LIST_USERS, RESET_PASSWORD, UPDATE_PASSWORD, UPDATE_USER } from '@plone/volto/constants/ActionTypes';\n\n/**\n * Create user function.\n * @function createUser\n * @param {Object|Array} content User data.\n * @returns {Object} Create user action.\n */\nexport function createUser(content) {\n  var sendPasswordReset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return {\n    type: CREATE_USER,\n    request: {\n      op: 'post',\n      path: '/@users',\n      data: sendPasswordReset ? _objectSpread(_objectSpread({}, content), {}, {\n        sendPasswordReset: sendPasswordReset\n      }) : content\n    }\n  };\n}\n\n/**\n * Delete user function.\n * @function deleteUser\n * @param {string} id User id\n * @returns {Object} Delete user action.\n */\nexport function deleteUser(id) {\n  return {\n    type: DELETE_USER,\n    request: {\n      op: 'del',\n      path: \"/@users/\".concat(id)\n    }\n  };\n}\n\n/**\n * Get user function\n * @function getUser\n * @param {string} id User id\n * @returns {Object} Get user action\n */\nexport function getUser(id) {\n  return {\n    type: GET_USER,\n    request: {\n      op: 'get',\n      path: \"/@users/\".concat(id)\n    }\n  };\n}\n\n/**\n * List users function\n * 'query' and 'search' are mutually exclusive parameters. 'search' wins.\n * Query either for username or search for username, fullname, email.\n * @function listUsers\n * @param {string} query for username\n * @param {string} search for  username, fullname, email.\n * @param {list} groups_filter restrict to group membership\n * @param {int} limit\n * @returns {Object} List users action\n */\nexport function listUsers() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _options$query = options.query,\n    query = _options$query === void 0 ? '' : _options$query,\n    _options$search = options.search,\n    search = _options$search === void 0 ? '' : _options$search,\n    _options$groups_filte = options.groups_filter,\n    groups_filter = _options$groups_filte === void 0 ? [] : _options$groups_filte,\n    _options$limit = options.limit,\n    limit = _options$limit === void 0 ? null : _options$limit;\n  var path = '/@users';\n  var searchParams = new URLSearchParams();\n  if (query) {\n    searchParams.append('query', query);\n  }\n  if (search) {\n    searchParams.append('search', search);\n  }\n  limit && searchParams.append('limit', limit);\n  var searchParamsToString = searchParams.toString();\n  var filterarg = groups_filter.length > 0 ? stringify({\n    'groups-filter': groups_filter\n  }, {\n    arrayFormat: 'colon-list-separator'\n  }) : '';\n  if (searchParamsToString) {\n    path += \"?\".concat(searchParamsToString);\n  }\n  if (filterarg) {\n    path += searchParamsToString ? '&' : '?';\n    path += filterarg;\n  }\n  return {\n    type: LIST_USERS,\n    request: {\n      op: 'get',\n      path: path\n    }\n  };\n}\n\n/**\n * Update user function\n * @function updateUser\n * @param {string} id User id\n * @param {Object} user User data.\n * @returns {Object} Update user action.\n */\nexport function updateUser(id, user) {\n  return {\n    type: UPDATE_USER,\n    request: {\n      op: 'patch',\n      path: \"/@users/\".concat(id),\n      data: user\n    }\n  };\n}\n\n/**\n * Update password function\n * @function updatePassword\n * @param {string} id User id\n * @param {string} oldPassword Old password.\n * @param {string} newPassword New password.\n * @returns {Object} Update password action.\n */\nexport function updatePassword(id, oldPassword, newPassword) {\n  return {\n    type: UPDATE_PASSWORD,\n    request: {\n      op: 'post',\n      path: \"/@users/\".concat(id, \"/reset-password\"),\n      data: {\n        old_password: oldPassword,\n        new_password: newPassword\n      }\n    }\n  };\n}\n\n/**\n * Set initial password function\n * @function setInitialPassword\n * @param {string} id User id\n * @param {string} token One time user token.\n * @param {string} newPassword New password.\n * @returns {Object} Set initial password action.\n */\nexport function setInitialPassword(id, token, newPassword) {\n  return {\n    type: INITIAL_PASSWORD,\n    request: {\n      op: 'post',\n      path: \"/@users/\".concat(id, \"/reset-password\"),\n      data: {\n        reset_token: token,\n        new_password: newPassword\n      }\n    }\n  };\n}\n\n/**\n * Reset password function\n * @function resetPassword\n * @param {string} id User id\n * @returns {Object} Reset password action.\n */\nexport function resetPassword(id) {\n  return {\n    type: RESET_PASSWORD,\n    request: {\n      op: 'post',\n      path: \"/@users/\".concat(id, \"/reset-password\")\n    }\n  };\n}","map":{"version":3,"names":["stringify","CREATE_USER","DELETE_USER","GET_USER","INITIAL_PASSWORD","LIST_USERS","RESET_PASSWORD","UPDATE_PASSWORD","UPDATE_USER","createUser","content","sendPasswordReset","type","request","op","path","data","deleteUser","id","getUser","listUsers","options","query","search","groups_filter","limit","searchParams","URLSearchParams","append","searchParamsToString","toString","filterarg","length","arrayFormat","updateUser","user","updatePassword","oldPassword","newPassword","old_password","new_password","setInitialPassword","token","reset_token","resetPassword"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/actions/users/users.js"],"sourcesContent":["/**\n * Users actions.\n * @module actions/users/users\n */\n\nimport { stringify } from 'query-string';\n\nimport {\n  CREATE_USER,\n  DELETE_USER,\n  GET_USER,\n  INITIAL_PASSWORD,\n  LIST_USERS,\n  RESET_PASSWORD,\n  UPDATE_PASSWORD,\n  UPDATE_USER,\n} from '@plone/volto/constants/ActionTypes';\n\n/**\n * Create user function.\n * @function createUser\n * @param {Object|Array} content User data.\n * @returns {Object} Create user action.\n */\nexport function createUser(content, sendPasswordReset = null) {\n  return {\n    type: CREATE_USER,\n    request: {\n      op: 'post',\n      path: '/@users',\n      data: sendPasswordReset ? { ...content, sendPasswordReset } : content,\n    },\n  };\n}\n\n/**\n * Delete user function.\n * @function deleteUser\n * @param {string} id User id\n * @returns {Object} Delete user action.\n */\nexport function deleteUser(id) {\n  return {\n    type: DELETE_USER,\n    request: {\n      op: 'del',\n      path: `/@users/${id}`,\n    },\n  };\n}\n\n/**\n * Get user function\n * @function getUser\n * @param {string} id User id\n * @returns {Object} Get user action\n */\nexport function getUser(id) {\n  return {\n    type: GET_USER,\n    request: {\n      op: 'get',\n      path: `/@users/${id}`,\n    },\n  };\n}\n\n/**\n * List users function\n * 'query' and 'search' are mutually exclusive parameters. 'search' wins.\n * Query either for username or search for username, fullname, email.\n * @function listUsers\n * @param {string} query for username\n * @param {string} search for  username, fullname, email.\n * @param {list} groups_filter restrict to group membership\n * @param {int} limit\n * @returns {Object} List users action\n */\nexport function listUsers(options = {}) {\n  const { query = '', search = '', groups_filter = [], limit = null } = options;\n  let path = '/@users';\n\n  var searchParams = new URLSearchParams();\n  if (query) {\n    searchParams.append('query', query);\n  }\n  if (search) {\n    searchParams.append('search', search);\n  }\n  limit && searchParams.append('limit', limit);\n  const searchParamsToString = searchParams.toString();\n\n  let filterarg =\n    groups_filter.length > 0\n      ? stringify(\n          { 'groups-filter': groups_filter },\n          { arrayFormat: 'colon-list-separator' },\n        )\n      : '';\n\n  if (searchParamsToString) {\n    path += `?${searchParamsToString}`;\n  }\n  if (filterarg) {\n    path += searchParamsToString ? '&' : '?';\n    path += filterarg;\n  }\n  return {\n    type: LIST_USERS,\n    request: {\n      op: 'get',\n      path: path,\n    },\n  };\n}\n\n/**\n * Update user function\n * @function updateUser\n * @param {string} id User id\n * @param {Object} user User data.\n * @returns {Object} Update user action.\n */\nexport function updateUser(id, user) {\n  return {\n    type: UPDATE_USER,\n    request: { op: 'patch', path: `/@users/${id}`, data: user },\n  };\n}\n\n/**\n * Update password function\n * @function updatePassword\n * @param {string} id User id\n * @param {string} oldPassword Old password.\n * @param {string} newPassword New password.\n * @returns {Object} Update password action.\n */\nexport function updatePassword(id, oldPassword, newPassword) {\n  return {\n    type: UPDATE_PASSWORD,\n    request: {\n      op: 'post',\n      path: `/@users/${id}/reset-password`,\n      data: {\n        old_password: oldPassword,\n        new_password: newPassword,\n      },\n    },\n  };\n}\n\n/**\n * Set initial password function\n * @function setInitialPassword\n * @param {string} id User id\n * @param {string} token One time user token.\n * @param {string} newPassword New password.\n * @returns {Object} Set initial password action.\n */\nexport function setInitialPassword(id, token, newPassword) {\n  return {\n    type: INITIAL_PASSWORD,\n    request: {\n      op: 'post',\n      path: `/@users/${id}/reset-password`,\n      data: {\n        reset_token: token,\n        new_password: newPassword,\n      },\n    },\n  };\n}\n\n/**\n * Reset password function\n * @function resetPassword\n * @param {string} id User id\n * @returns {Object} Reset password action.\n */\nexport function resetPassword(id) {\n  return {\n    type: RESET_PASSWORD,\n    request: {\n      op: 'post',\n      path: `/@users/${id}/reset-password`,\n    },\n  };\n}\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}