{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-eea-map/src/components/widgets/LayerSelectWidget.jsx\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport React from 'react';\nimport { Icon } from '@plone/volto/components';\nimport { Input, Select, Button, Grid, Checkbox } from 'semantic-ui-react';\nimport { QueryBuilder } from 'react-querybuilder';\nimport 'react-querybuilder/dist/query-builder.css';\nimport RichTextWidget from 'volto-slate/widgets/RichTextWidget';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { getContent } from '@plone/volto/actions';\nimport checkSVG from '@plone/volto/icons/check.svg';\nimport closeSVG from '@plone/volto/icons/clear.svg';\nimport aheadSVG from '@plone/volto/icons/ahead.svg';\nimport resetSVG from '@plone/volto/icons/reset.svg';\nimport { fetchArcGISData } from '../../utils';\nconst LayerSelectWidget = props => {\n  const {\n    onChange,\n    id,\n    data_query\n  } = props;\n  const value = React.useMemo(() => props.value || {}, [props.value]);\n  const {\n    available_layers,\n    map_data,\n    map_service_url,\n    layer,\n    fields = [],\n    query = '',\n    description = '',\n    hide = false\n  } = value;\n  const [mapData, setMapData] = React.useState(map_data);\n  const [checkColor, setCheckColor] = React.useState('');\n  const [serviceUrlError, setServiceUrlError] = React.useState('');\n  const [serviceUrl, setServiceUrl] = React.useState(map_service_url);\n  const [selectedLayer, setSelectedLayer] = React.useState(layer);\n  const [availableLayers, setAvailableLayers] = React.useState(available_layers);\n  const [builtQuery, setBuiltQuery] = React.useState(query);\n  const handleServiceUrlCheck = async () => {\n    // fetch url, save it, populate layers options\n    try {\n      let mapData = await fetchArcGISData(serviceUrl);\n      setCheckColor('green');\n      setMapData(mapData);\n      setServiceUrlError('');\n      if (mapData.layers && mapData.layers.length > 0) {\n        const mappedLayers = mapData.layers.filter(layer => layer && layer.type && layer.type !== 'Group Layer').map((layer, i) => {\n          return {\n            key: layer.id,\n            value: layer,\n            text: `${layer.name} (${layer.type})`\n          };\n        });\n        setAvailableLayers(mappedLayers);\n      }\n      onChange(id, _objectSpread(_objectSpread({}, value), {}, {\n        layer: selectedLayer,\n        map_service_url: serviceUrl,\n        available_layers: availableLayers,\n        map_data: mapData,\n        description,\n        hide\n      }));\n    } catch (e) {\n      setCheckColor('youtube');\n      setServiceUrlError({\n        error: e.message,\n        status: e.status\n      });\n    }\n  };\n  React.useEffect(() => {\n    props.getContent('', null, id);\n    //    eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  React.useEffect(() => {\n    if (query && !builtQuery) {\n      setBuiltQuery(query);\n    }\n  }, [query, builtQuery]);\n  React.useEffect(() => {\n    //detect existing queries in block content. If it exists. Apply matching queries to layer on fresh layer load\n    if (map_service_url && layer && !query && data_query && data_query.length > 0) {\n      let autoQuery = {\n        combinator: 'or',\n        rules: []\n      };\n      data_query.forEach((param, i) => {\n        if (fields && fields.length > 0 && fields.filter((field, j) => field.name === param.alias || field.name === param.i).length > 0) {\n          autoQuery.rules = [...autoQuery.rules, {\n            field: param.alias || param.i,\n            operator: '=',\n            value: param.v[0]\n          }];\n        }\n      });\n      if (autoQuery.rules.length > 0) {\n        onChange(id, _objectSpread(_objectSpread({}, value), {}, {\n          query: autoQuery\n        }));\n        setBuiltQuery(autoQuery);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [map_service_url, layer, query, data_query, fields]);\n  const handleLayerFetch = async (service_url, id) => {\n    try {\n      let fullLayer = await fetchArcGISData(`${service_url}/${id}`);\n      return fullLayer;\n    } catch (e) {}\n  };\n  const handleSelectLayer = async layer => {\n    const fullLayer = await handleLayerFetch(serviceUrl, layer.id);\n    setSelectedLayer(layer);\n    onChange(id, _objectSpread(_objectSpread({}, value), {}, {\n      layer,\n      fullLayer,\n      fields: fullLayer.fields,\n      map_service_url: serviceUrl,\n      available_layers: availableLayers,\n      map_data: mapData,\n      query: ''\n    }));\n    setBuiltQuery('');\n  };\n  const handleQueryLayer = () => {\n    if (builtQuery) {\n      onChange(id, _objectSpread(_objectSpread({}, value), {}, {\n        query: builtQuery\n      }));\n    }\n  };\n  const handleChangeDescription = val => {\n    if (val) {\n      onChange(id, _objectSpread(_objectSpread({}, value), {}, {\n        description: val\n      }));\n    }\n  };\n  const handleOpacityChange = val => {\n    onChange(id, _objectSpread(_objectSpread({}, value), {}, {\n      opacity: val\n    }));\n  };\n  const handleChangeServiceUrl = value => {\n    setServiceUrlError('');\n    setCheckColor('');\n    setAvailableLayers('');\n    setBuiltQuery('');\n    setSelectedLayer('');\n    setMapData('');\n    setServiceUrl(value);\n  };\n  const handleReset = () => {\n    setServiceUrlError('');\n    setServiceUrl(map_service_url);\n    setCheckColor('');\n    setAvailableLayers(available_layers);\n    setBuiltQuery('');\n    setSelectedLayer(layer);\n    setMapData(map_data);\n  };\n  const handleHideInLegend = v => {\n    onChange(id, _objectSpread(_objectSpread({}, value), {}, {\n      hide: v\n    }));\n  };\n  return __jsx(\"div\", {\n    style: {\n      padding: '0 5px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 5\n    }\n  }, __jsx(Grid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"spaced-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 9\n    }\n  }, __jsx(Grid.Row, {\n    stretched: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 11\n    }\n  }, __jsx(\"h5\", {\n    style: {\n      padding: '0',\n      margin: '15px 0px 5px 0px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 13\n    }\n  }, \"Service URL\")), __jsx(Grid.Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 11\n    }\n  }, __jsx(Input, {\n    type: \"text\",\n    onChange: (e, {\n      value\n    }) => handleChangeServiceUrl(value),\n    style: {\n      width: '100%'\n    },\n    error: serviceUrlError,\n    value: serviceUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 13\n    }\n  }), __jsx(\"span\", {\n    style: {\n      fontSize: '12px',\n      color: 'darkred'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 13\n    }\n  }, serviceUrlError.error)), serviceUrl && __jsx(Grid.Row, {\n    style: {\n      display: 'flex'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 13\n    }\n  }, serviceUrl !== map_service_url && __jsx(Button, {\n    size: \"small\",\n    compact: true,\n    className: \"layer-reset-button\",\n    onClick: handleReset,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 17\n    }\n  }, __jsx(Icon, {\n    name: resetSVG,\n    title: \"Reset\",\n    size: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 19\n    }\n  })), __jsx(Button, {\n    size: \"small\",\n    color: checkColor,\n    compact: true,\n    className: \"layer-check-button\",\n    onClick: handleServiceUrlCheck,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 15\n    }\n  }, __jsx(Icon, {\n    name: serviceUrlError ? closeSVG : checkSVG,\n    title: \"Submit\",\n    size: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 17\n    }\n  })))), mapData && mapData.mapName && __jsx(\"div\", {\n    className: \"spaced-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 11\n    }\n  }, __jsx(Grid.Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 13\n    }\n  }, __jsx(\"h5\", {\n    style: {\n      padding: '0',\n      margin: '15px 0px 5px 0px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 15\n    }\n  }, \"Map name:\"), __jsx(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 15\n    }\n  }, mapData.mapName))), availableLayers && availableLayers.length > 0 && __jsx(\"div\", {\n    className: \"spaced-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 11\n    }\n  }, __jsx(Grid.Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 13\n    }\n  }, __jsx(\"h5\", {\n    style: {\n      padding: '0',\n      margin: '15px 0px 5px 0px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 15\n    }\n  }, \"Layer\")), __jsx(Grid.Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 13\n    }\n  }, __jsx(Select, {\n    onChange: (e, {\n      value\n    }) => handleSelectLayer(value),\n    options: availableLayers,\n    style: {\n      width: '100%'\n    },\n    placeholder: \"Select layer\",\n    value: selectedLayer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 15\n    }\n  }))), availableLayers && availableLayers.length > 0 && selectedLayer && __jsx(\"div\", {\n    className: \"spaced-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 11\n    }\n  }, __jsx(Grid.Row, {\n    stretched: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 13\n    }\n  }, __jsx(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 296,\n      columnNumber: 15\n    }\n  }, \"Opacity:\"), __jsx(\"input\", {\n    className: \"map-number-input\",\n    type: \"number\",\n    min: 0,\n    max: 1,\n    step: 0.1,\n    value: value !== null && value !== void 0 && value.opacity ? value === null || value === void 0 ? void 0 : value.opacity : 1,\n    onChange: e => handleOpacityChange(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 15\n    }\n  }), __jsx(\"input\", {\n    className: \"map-range-input\",\n    type: \"range\",\n    min: 0,\n    max: 1,\n    step: 0.1,\n    value: value !== null && value !== void 0 && value.opacity ? value === null || value === void 0 ? void 0 : value.opacity : 1,\n    onChange: e => handleOpacityChange(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 15\n    }\n  })), __jsx(Grid.Row, {\n    stretched: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 13\n    }\n  }, __jsx(\"h5\", {\n    style: {\n      padding: '0',\n      margin: '15px 0px 5px 0px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 15\n    }\n  }, \"Description\")), __jsx(Grid.Row, {\n    stretched: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    className: \"map-layer-description-field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 15\n    }\n  }, __jsx(RichTextWidget, {\n    title: \"description\",\n    onChange: (name, value) => {\n      handleChangeDescription(value);\n    },\n    value: value.description,\n    placeholder: \"Set Description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 17\n    }\n  }))), __jsx(Grid.Row, {\n    stretched: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 333,\n      columnNumber: 13\n    }\n  }, __jsx(\"h5\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 15\n    }\n  }, \"Hide in legend:\"), ' ', __jsx(Checkbox, {\n    label: \"Layer will be hidden in legend\",\n    checked: hide,\n    onChange: (e, {\n      checked\n    }) => handleHideInLegend(checked),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 15\n    }\n  }))), availableLayers && fields && fields.length > 0 && __jsx(\"div\", {\n    className: \"spaced-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 11\n    }\n  }, __jsx(\"h5\", {\n    style: {\n      padding: '0',\n      margin: '15px 0px 5px 0px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 13\n    }\n  }, \"Query Layer\"), __jsx(Grid.Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 348,\n      columnNumber: 13\n    }\n  }, __jsx(QueryBuilder, {\n    fields: fields.map((fi, i) => {\n      return {\n        name: fi.name,\n        label: fi.name\n      };\n    }),\n    query: builtQuery,\n    onQueryChange: q => setBuiltQuery(q),\n    enableDragAndDrop: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 15\n    }\n  })), builtQuery && __jsx(Grid.Row, {\n    style: {\n      display: 'flex'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 15\n    }\n  }, __jsx(Button, {\n    type: \"submit\",\n    size: \"tiny\",\n    compact: true,\n    className: \"layer-submit-button \",\n    color: 'green',\n    onClick: handleQueryLayer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 17\n    }\n  }, __jsx(Icon, {\n    name: aheadSVG,\n    title: \"Check Url\",\n    size: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 19\n    }\n  }))), __jsx(Grid.Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 13\n    }\n  }, __jsx(\"p\", {\n    style: {\n      fontSize: '13px',\n      fontWeight: 'bold',\n      color: 'darkgray'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 15\n    }\n  }, \"Available Fields:\")), fields.map((field, id) => __jsx(\"p\", {\n    style: {\n      fontSize: '12px',\n      padding: '0 5px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 15\n    }\n  }, __jsx(\"strong\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 17\n    }\n  }, field.alias), \" (\", field.type, \")\")))));\n};\nexport default compose(connect((state, props) => ({\n  content: state.content.data,\n  data_query: state.content.data.data_query\n}), {\n  getContent\n}))(LayerSelectWidget);","map":{"version":3,"names":["React","Icon","Input","Select","Button","Grid","Checkbox","QueryBuilder","RichTextWidget","connect","compose","getContent","checkSVG","closeSVG","aheadSVG","resetSVG","fetchArcGISData","LayerSelectWidget","props","onChange","id","data_query","value","useMemo","available_layers","map_data","map_service_url","layer","fields","query","description","hide","mapData","setMapData","useState","checkColor","setCheckColor","serviceUrlError","setServiceUrlError","serviceUrl","setServiceUrl","selectedLayer","setSelectedLayer","availableLayers","setAvailableLayers","builtQuery","setBuiltQuery","handleServiceUrlCheck","layers","length","mappedLayers","filter","type","map","i","key","text","name","e","error","message","status","useEffect","autoQuery","combinator","rules","forEach","param","field","j","alias","operator","v","handleLayerFetch","service_url","fullLayer","handleSelectLayer","handleQueryLayer","handleChangeDescription","val","handleOpacityChange","opacity","handleChangeServiceUrl","handleReset","handleHideInLegend","padding","margin","width","fontSize","color","display","mapName","target","checked","fi","label","q","fontWeight","state","content","data"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-eea-map/src/components/widgets/LayerSelectWidget.jsx"],"sourcesContent":["import React from 'react';\nimport { Icon } from '@plone/volto/components';\nimport { Input, Select, Button, Grid, Checkbox } from 'semantic-ui-react';\nimport { QueryBuilder } from 'react-querybuilder';\nimport 'react-querybuilder/dist/query-builder.css';\n\nimport RichTextWidget from 'volto-slate/widgets/RichTextWidget';\n\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\n\nimport { getContent } from '@plone/volto/actions';\n\nimport checkSVG from '@plone/volto/icons/check.svg';\nimport closeSVG from '@plone/volto/icons/clear.svg';\nimport aheadSVG from '@plone/volto/icons/ahead.svg';\nimport resetSVG from '@plone/volto/icons/reset.svg';\n\nimport { fetchArcGISData } from '../../utils';\n\nconst LayerSelectWidget = (props) => {\n  const { onChange, id, data_query } = props;\n\n  const value = React.useMemo(() => props.value || {}, [props.value]);\n\n  const {\n    available_layers,\n    map_data,\n    map_service_url,\n    layer,\n    fields = [],\n    query = '',\n    description = '',\n    hide = false,\n  } = value;\n\n  const [mapData, setMapData] = React.useState(map_data);\n  const [checkColor, setCheckColor] = React.useState('');\n  const [serviceUrlError, setServiceUrlError] = React.useState('');\n  const [serviceUrl, setServiceUrl] = React.useState(map_service_url);\n  const [selectedLayer, setSelectedLayer] = React.useState(layer);\n\n  const [availableLayers, setAvailableLayers] = React.useState(\n    available_layers,\n  );\n\n  const [builtQuery, setBuiltQuery] = React.useState(query);\n\n  const handleServiceUrlCheck = async () => {\n    // fetch url, save it, populate layers options\n    try {\n      let mapData = await fetchArcGISData(serviceUrl);\n      setCheckColor('green');\n      setMapData(mapData);\n      setServiceUrlError('');\n      if (mapData.layers && mapData.layers.length > 0) {\n        const mappedLayers = mapData.layers\n          .filter(\n            (layer) => layer && layer.type && layer.type !== 'Group Layer',\n          )\n          .map((layer, i) => {\n            return {\n              key: layer.id,\n              value: layer,\n              text: `${layer.name} (${layer.type})`,\n            };\n          });\n        setAvailableLayers(mappedLayers);\n      }\n      onChange(id, {\n        ...value,\n        layer: selectedLayer,\n        map_service_url: serviceUrl,\n        available_layers: availableLayers,\n        map_data: mapData,\n        description,\n        hide,\n      });\n    } catch (e) {\n      setCheckColor('youtube');\n      setServiceUrlError({ error: e.message, status: e.status });\n    }\n  };\n\n  React.useEffect(() => {\n    props.getContent('', null, id);\n    //    eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  React.useEffect(() => {\n    if (query && !builtQuery) {\n      setBuiltQuery(query);\n    }\n  }, [query, builtQuery]);\n\n  React.useEffect(() => {\n    //detect existing queries in block content. If it exists. Apply matching queries to layer on fresh layer load\n    if (\n      map_service_url &&\n      layer &&\n      !query &&\n      data_query &&\n      data_query.length > 0\n    ) {\n      let autoQuery = {\n        combinator: 'or',\n        rules: [],\n      };\n      data_query.forEach((param, i) => {\n        if (\n          fields &&\n          fields.length > 0 &&\n          fields.filter(\n            (field, j) => field.name === param.alias || field.name === param.i,\n          ).length > 0\n        ) {\n          autoQuery.rules = [\n            ...autoQuery.rules,\n            { field: param.alias || param.i, operator: '=', value: param.v[0] },\n          ];\n        }\n      });\n      if (autoQuery.rules.length > 0) {\n        onChange(id, {\n          ...value,\n          query: autoQuery,\n        });\n        setBuiltQuery(autoQuery);\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [map_service_url, layer, query, data_query, fields]);\n\n  const handleLayerFetch = async (service_url, id) => {\n    try {\n      let fullLayer = await fetchArcGISData(`${service_url}/${id}`);\n      return fullLayer;\n    } catch (e) {}\n  };\n\n  const handleSelectLayer = async (layer) => {\n    const fullLayer = await handleLayerFetch(serviceUrl, layer.id);\n    setSelectedLayer(layer);\n    onChange(id, {\n      ...value,\n      layer,\n      fullLayer,\n      fields: fullLayer.fields,\n      map_service_url: serviceUrl,\n      available_layers: availableLayers,\n      map_data: mapData,\n      query: '',\n    });\n    setBuiltQuery('');\n  };\n\n  const handleQueryLayer = () => {\n    if (builtQuery) {\n      onChange(id, {\n        ...value,\n        query: builtQuery,\n      });\n    }\n  };\n\n  const handleChangeDescription = (val) => {\n    if (val) {\n      onChange(id, {\n        ...value,\n        description: val,\n      });\n    }\n  };\n\n  const handleOpacityChange = (val) => {\n    onChange(id, {\n      ...value,\n      opacity: val,\n    });\n  };\n\n  const handleChangeServiceUrl = (value) => {\n    setServiceUrlError('');\n    setCheckColor('');\n    setAvailableLayers('');\n    setBuiltQuery('');\n    setSelectedLayer('');\n    setMapData('');\n\n    setServiceUrl(value);\n  };\n\n  const handleReset = () => {\n    setServiceUrlError('');\n    setServiceUrl(map_service_url);\n    setCheckColor('');\n    setAvailableLayers(available_layers);\n    setBuiltQuery('');\n    setSelectedLayer(layer);\n    setMapData(map_data);\n  };\n\n  const handleHideInLegend = (v) => {\n    onChange(id, {\n      ...value,\n      hide: v,\n    });\n  };\n\n  return (\n    <div\n      style={{\n        padding: '0 5px',\n      }}\n    >\n      <Grid>\n        <div className=\"spaced-row\">\n          <Grid.Row stretched>\n            <h5 style={{ padding: '0', margin: '15px 0px 5px 0px' }}>\n              Service URL\n            </h5>\n          </Grid.Row>\n\n          <Grid.Row>\n            <Input\n              type=\"text\"\n              onChange={(e, { value }) => handleChangeServiceUrl(value)}\n              style={{ width: '100%' }}\n              error={serviceUrlError}\n              value={serviceUrl}\n            ></Input>\n\n            <span style={{ fontSize: '12px', color: 'darkred' }}>\n              {serviceUrlError.error}\n            </span>\n          </Grid.Row>\n          {serviceUrl && (\n            <Grid.Row style={{ display: 'flex' }}>\n              {serviceUrl !== map_service_url && (\n                <Button\n                  size=\"small\"\n                  compact\n                  className=\"layer-reset-button\"\n                  onClick={handleReset}\n                >\n                  <Icon name={resetSVG} title=\"Reset\" size=\"20px\" />\n                </Button>\n              )}\n              <Button\n                size=\"small\"\n                color={checkColor}\n                compact\n                className=\"layer-check-button\"\n                onClick={handleServiceUrlCheck}\n              >\n                <Icon\n                  name={serviceUrlError ? closeSVG : checkSVG}\n                  title=\"Submit\"\n                  size=\"20px\"\n                />\n              </Button>\n            </Grid.Row>\n          )}\n        </div>\n        {mapData && mapData.mapName && (\n          <div className=\"spaced-row\">\n            <Grid.Row>\n              <h5 style={{ padding: '0', margin: '15px 0px 5px 0px' }}>\n                Map name:\n              </h5>\n              <p>{mapData.mapName}</p>\n            </Grid.Row>\n          </div>\n        )}\n        {availableLayers && availableLayers.length > 0 && (\n          <div className=\"spaced-row\">\n            <Grid.Row>\n              <h5 style={{ padding: '0', margin: '15px 0px 5px 0px' }}>\n                Layer\n              </h5>\n            </Grid.Row>\n            <Grid.Row>\n              <Select\n                onChange={(e, { value }) => handleSelectLayer(value)}\n                options={availableLayers}\n                style={{ width: '100%' }}\n                placeholder=\"Select layer\"\n                value={selectedLayer}\n              />\n            </Grid.Row>\n          </div>\n        )}\n        {availableLayers && availableLayers.length > 0 && selectedLayer && (\n          <div className=\"spaced-row\">\n            <Grid.Row stretched>\n              <h5>Opacity:</h5>\n              <input\n                className=\"map-number-input\"\n                type=\"number\"\n                min={0}\n                max={1}\n                step={0.1}\n                value={value?.opacity ? value?.opacity : 1}\n                onChange={(e) => handleOpacityChange(e.target.value)}\n              />\n              <input\n                className=\"map-range-input\"\n                type=\"range\"\n                min={0}\n                max={1}\n                step={0.1}\n                value={value?.opacity ? value?.opacity : 1}\n                onChange={(e) => handleOpacityChange(e.target.value)}\n              />\n            </Grid.Row>\n            <Grid.Row stretched>\n              <h5 style={{ padding: '0', margin: '15px 0px 5px 0px' }}>\n                Description\n              </h5>\n            </Grid.Row>\n            <Grid.Row stretched>\n              <div className=\"map-layer-description-field\">\n                <RichTextWidget\n                  title=\"description\"\n                  onChange={(name, value) => {\n                    handleChangeDescription(value);\n                  }}\n                  value={value.description}\n                  placeholder=\"Set Description\"\n                />\n              </div>\n            </Grid.Row>\n            <Grid.Row stretched>\n              <h5>Hide in legend:</h5>{' '}\n              <Checkbox\n                label=\"Layer will be hidden in legend\"\n                checked={hide}\n                onChange={(e, { checked }) => handleHideInLegend(checked)}\n              />\n            </Grid.Row>\n          </div>\n        )}\n        {availableLayers && fields && fields.length > 0 && (\n          <div className=\"spaced-row\">\n            <h5 style={{ padding: '0', margin: '15px 0px 5px 0px' }}>\n              Query Layer\n            </h5>\n            <Grid.Row>\n              <QueryBuilder\n                fields={fields.map((fi, i) => {\n                  return { name: fi.name, label: fi.name };\n                })}\n                query={builtQuery}\n                onQueryChange={(q) => setBuiltQuery(q)}\n                enableDragAndDrop={false}\n              />\n            </Grid.Row>\n            {builtQuery && (\n              <Grid.Row style={{ display: 'flex' }}>\n                <Button\n                  type=\"submit\"\n                  size=\"tiny\"\n                  compact\n                  className=\"layer-submit-button \"\n                  color={'green'}\n                  onClick={handleQueryLayer}\n                >\n                  <Icon name={aheadSVG} title=\"Check Url\" size=\"20px\" />\n                </Button>\n              </Grid.Row>\n            )}\n            <Grid.Row>\n              <p\n                style={{\n                  fontSize: '13px',\n                  fontWeight: 'bold',\n                  color: 'darkgray',\n                }}\n              >\n                Available Fields:\n              </p>\n            </Grid.Row>\n            {fields.map((field, id) => (\n              <p style={{ fontSize: '12px', padding: '0 5px' }}>\n                <strong>{field.alias}</strong> ({field.type})\n              </p>\n            ))}\n          </div>\n        )}\n      </Grid>\n    </div>\n  );\n};\n\nexport default compose(\n  connect(\n    (state, props) => ({\n      content: state.content.data,\n      data_query: state.content.data.data_query,\n    }),\n    {\n      getContent,\n    },\n  ),\n)(LayerSelectWidget);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}