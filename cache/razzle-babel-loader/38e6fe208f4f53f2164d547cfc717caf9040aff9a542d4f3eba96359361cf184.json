{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/AnchorPlugin/components/LinkButton/index.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport EditorUtils from '../../utils/EditorUtils';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport AddLinkForm from '@plone/volto/components/manage/AnchorPlugin/components/LinkButton/AddLinkForm';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\nimport linkSVG from '@plone/volto/icons/link.svg';\nimport unlinkSVG from '@plone/volto/icons/unlink.svg';\n\n// import unionClassNames from 'union-class-names';\n//import EditorUtils from 'draft-js-plugins-utils';\n\n/**\n * Add link form class.\n * @class LinkButton\n * @extends Component\n */\nclass LinkButton extends Component {\n  constructor(_props) {\n    super(_props);\n    _defineProperty(this, \"onMouseDown\", event => {\n      event.preventDefault();\n    });\n    _defineProperty(this, \"onAddLinkClick\", e => {\n      var _this$EditorUtils$get, _this$EditorUtils$get2;\n      e.preventDefault();\n      e.stopPropagation();\n      const {\n        ownTheme,\n        placeholder,\n        onOverrideContent\n      } = this.props;\n      const link = (_this$EditorUtils$get = this.EditorUtils.getCurrentEntity(this.props.getEditorState())) === null || _this$EditorUtils$get === void 0 ? void 0 : (_this$EditorUtils$get2 = _this$EditorUtils$get.getData()) === null || _this$EditorUtils$get2 === void 0 ? void 0 : _this$EditorUtils$get2.url;\n      const content = props => __jsx(AddLinkForm, _extends({}, props, {\n        placeholder: placeholder,\n        theme: ownTheme,\n        block: \"draft-js\",\n        data: {\n          url: link || ''\n        },\n        onChangeBlock: () => {},\n        onClear: () => {\n          this.props.setEditorState(this.DraftEditorUtils.removeLinkAtSelection(this.props.getEditorState()));\n        },\n        onChangeValue: url => {\n          this.props.setEditorState(this.DraftEditorUtils.createLinkAtSelection(this.props.getEditorState(), url));\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 7\n        }\n      }));\n      onOverrideContent(content);\n    });\n    this.DraftEditorUtils = _props.draftJsPluginsUtils.default;\n    this.EditorUtils = EditorUtils(_props);\n  }\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const {\n      theme\n    } = this.props;\n    const hasLinkSelected = this.EditorUtils.hasEntity(this.props.getEditorState(), 'LINK');\n    const className = hasLinkSelected ? cx(theme.button, theme.active) : theme.button;\n    return __jsx(\"div\", {\n      className: theme.buttonWrapper,\n      onMouseDown: this.onMouseDown,\n      role: \"presentation\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }\n    }, __jsx(\"button\", {\n      className: className,\n      onClick: this.onAddLinkClick\n      // hasLinkSelected\n      //   ? () =>\n      //       onRemoveLinkAtSelection(\n      //         this.props.setEditorState,\n      //         this.props.getEditorState,\n      //       )\n      //   : this.onAddLinkClick\n      ,\n\n      type: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }\n    }, !hasLinkSelected ? __jsx(Icon, {\n      name: linkSVG,\n      size: \"24px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }\n    }) : __jsx(Icon, {\n      name: unlinkSVG,\n      size: \"24px\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }\n    })));\n  }\n}\n_defineProperty(LinkButton, \"propTypes\", {\n  placeholder: PropTypes.string,\n  theme: PropTypes.shape({}).isRequired,\n  ownTheme: PropTypes.shape({}).isRequired,\n  onRemoveLinkAtSelection: PropTypes.func.isRequired,\n  onOverrideContent: PropTypes.func.isRequired\n});\n_defineProperty(LinkButton, \"defaultProps\", {\n  placeholder: ''\n});\nexport default injectLazyLibs(['draftJs', 'draftJsPluginsUtils'])(LinkButton);","map":{"version":3,"names":["React","Component","PropTypes","cx","EditorUtils","injectLazyLibs","AddLinkForm","Icon","linkSVG","unlinkSVG","LinkButton","constructor","props","event","preventDefault","e","stopPropagation","ownTheme","placeholder","onOverrideContent","link","getCurrentEntity","getEditorState","getData","url","content","setEditorState","DraftEditorUtils","removeLinkAtSelection","createLinkAtSelection","draftJsPluginsUtils","default","render","theme","hasLinkSelected","hasEntity","className","button","active","buttonWrapper","onMouseDown","onAddLinkClick","string","shape","isRequired","onRemoveLinkAtSelection","func"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/AnchorPlugin/components/LinkButton/index.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport EditorUtils from '../../utils/EditorUtils';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nimport AddLinkForm from '@plone/volto/components/manage/AnchorPlugin/components/LinkButton/AddLinkForm';\nimport Icon from '@plone/volto/components/theme/Icon/Icon';\n\nimport linkSVG from '@plone/volto/icons/link.svg';\nimport unlinkSVG from '@plone/volto/icons/unlink.svg';\n\n// import unionClassNames from 'union-class-names';\n//import EditorUtils from 'draft-js-plugins-utils';\n\n/**\n * Add link form class.\n * @class LinkButton\n * @extends Component\n */\nclass LinkButton extends Component {\n  static propTypes = {\n    placeholder: PropTypes.string,\n    theme: PropTypes.shape({}).isRequired,\n    ownTheme: PropTypes.shape({}).isRequired,\n    onRemoveLinkAtSelection: PropTypes.func.isRequired,\n    onOverrideContent: PropTypes.func.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.DraftEditorUtils = props.draftJsPluginsUtils.default;\n    this.EditorUtils = EditorUtils(props);\n  }\n\n  static defaultProps = {\n    placeholder: '',\n  };\n\n  onMouseDown = (event) => {\n    event.preventDefault();\n  };\n\n  onAddLinkClick = (e) => {\n    e.preventDefault();\n    e.stopPropagation();\n    const { ownTheme, placeholder, onOverrideContent } = this.props;\n    const link = this.EditorUtils.getCurrentEntity(\n      this.props.getEditorState(),\n    )?.getData()?.url;\n\n    const content = (props) => (\n      <AddLinkForm\n        {...props}\n        placeholder={placeholder}\n        theme={ownTheme}\n        block=\"draft-js\"\n        data={{ url: link || '' }}\n        onChangeBlock={() => {}}\n        onClear={() => {\n          this.props.setEditorState(\n            this.DraftEditorUtils.removeLinkAtSelection(\n              this.props.getEditorState(),\n            ),\n          );\n        }}\n        onChangeValue={(url) => {\n          this.props.setEditorState(\n            this.DraftEditorUtils.createLinkAtSelection(\n              this.props.getEditorState(),\n              url,\n            ),\n          );\n        }}\n      />\n    );\n    onOverrideContent(content);\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { theme } = this.props;\n    const hasLinkSelected = this.EditorUtils.hasEntity(\n      this.props.getEditorState(),\n      'LINK',\n    );\n    const className = hasLinkSelected\n      ? cx(theme.button, theme.active)\n      : theme.button;\n\n    return (\n      <div\n        className={theme.buttonWrapper}\n        onMouseDown={this.onMouseDown}\n        role=\"presentation\"\n      >\n        <button\n          className={className}\n          onClick={\n            this.onAddLinkClick\n            // hasLinkSelected\n            //   ? () =>\n            //       onRemoveLinkAtSelection(\n            //         this.props.setEditorState,\n            //         this.props.getEditorState,\n            //       )\n            //   : this.onAddLinkClick\n          }\n          type=\"button\"\n        >\n          {!hasLinkSelected ? (\n            <Icon name={linkSVG} size=\"24px\" />\n          ) : (\n            <Icon name={unlinkSVG} size=\"24px\" />\n          )}\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default injectLazyLibs(['draftJs', 'draftJsPluginsUtils'])(LinkButton);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}