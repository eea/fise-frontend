{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-block-divider/src/components/Divider/Edit.jsx\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport React from 'react';\nimport { SidebarPortal, BlockDataForm } from '@plone/volto/components';\nimport { defineMessages } from 'react-intl';\nimport { DividerEditSchema } from './Schema';\nimport View from './View';\nimport './divider.less';\nconst messages = defineMessages({\n  Type: {\n    \"id\": \"Divider\",\n    \"defaultMessage\": \"Divider\"\n  }\n});\nexport default (props => {\n  const {\n    data,\n    block,\n    onChangeBlock,\n    selected,\n    intl\n  } = props;\n  const schema = DividerEditSchema({\n    intl\n  });\n  return __jsx(React.Fragment, null, __jsx(\"fieldset\", {\n    className: \"divider-block\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }, __jsx(\"legend\", {\n    \"aria-hidden\": \"true\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }, data.title || intl.formatMessage(messages.Type)), __jsx(View, _extends({}, props, {\n    isEditMode: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }))), __jsx(SidebarPortal, {\n    selected: selected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, __jsx(BlockDataForm, {\n    schema: schema,\n    title: intl.formatMessage(messages.Type),\n    onChangeField: (id, value) => {\n      onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n        [id]: value\n      }));\n    },\n    formData: data,\n    fieldIndex: data.index,\n    block: block,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  })));\n});","map":{"version":3,"names":["React","SidebarPortal","BlockDataForm","defineMessages","DividerEditSchema","View","messages","Type","props","data","block","onChangeBlock","selected","intl","schema","title","formatMessage","id","value","index"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-block-divider/src/components/Divider/Edit.jsx"],"sourcesContent":["import React from 'react';\nimport { SidebarPortal, BlockDataForm } from '@plone/volto/components';\nimport { defineMessages } from 'react-intl';\nimport { DividerEditSchema } from './Schema';\nimport View from './View';\nimport './divider.less';\n\nconst messages = defineMessages({\n  Type: {\n    id: 'Divider',\n    defaultMessage: 'Divider',\n  },\n});\n\nexport default (props) => {\n  const { data, block, onChangeBlock, selected, intl } = props;\n  const schema = DividerEditSchema({ intl });\n  return (\n    <>\n      <fieldset className=\"divider-block\">\n        <legend aria-hidden=\"true\">\n          {data.title || intl.formatMessage(messages.Type)}\n        </legend>\n        <View {...props} isEditMode />\n      </fieldset>\n      <SidebarPortal selected={selected}>\n        <BlockDataForm\n          schema={schema}\n          title={intl.formatMessage(messages.Type)}\n          onChangeField={(id, value) => {\n            onChangeBlock(block, {\n              ...data,\n              [id]: value,\n            });\n          }}\n          formData={data}\n          fieldIndex={data.index}\n          block={block}\n        />\n      </SidebarPortal>\n    </>\n  );\n};\n"],"mappings":";;;;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,EAAEC,aAAa,QAAQ,yBAAyB;AACtE,SAASC,cAAc,QAAQ,YAAY;AAC3C,SAASC,iBAAiB,QAAQ,UAAU;AAC5C,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAO,gBAAgB;AAEvB,MAAMC,QAAQ,GAAGH,cAAc,CAAC;EAC9BI,IAAI;IAAA;IAAA;EAAA;AAIN,CAAC,CAAC;AAEF,gBAAgBC,KAAK,IAAK;EACxB,MAAM;IAAEC,IAAI;IAAEC,KAAK;IAAEC,aAAa;IAAEC,QAAQ;IAAEC;EAAK,CAAC,GAAGL,KAAK;EAC5D,MAAMM,MAAM,GAAGV,iBAAiB,CAAC;IAAES;EAAK,CAAC,CAAC;EAC1C,OACE,4BACE;IAAU,SAAS,EAAC,eAAe;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACjC;IAAQ,eAAY,MAAM;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACvBJ,IAAI,CAACM,KAAK,IAAIF,IAAI,CAACG,aAAa,CAACV,QAAQ,CAACC,IAAI,CAAC,CACzC,EACT,MAAC,IAAI,eAAKC,KAAK;IAAE,UAAU;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAG,CACrB,EACX,MAAC,aAAa;IAAC,QAAQ,EAAEI,QAAS;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAChC,MAAC,aAAa;IACZ,MAAM,EAAEE,MAAO;IACf,KAAK,EAAED,IAAI,CAACG,aAAa,CAACV,QAAQ,CAACC,IAAI,CAAE;IACzC,aAAa,EAAE,CAACU,EAAE,EAAEC,KAAK,KAAK;MAC5BP,aAAa,CAACD,KAAK,kCACdD,IAAI;QACP,CAACQ,EAAE,GAAGC;MAAK,GACX;IACJ,CAAE;IACF,QAAQ,EAAET,IAAK;IACf,UAAU,EAAEA,IAAI,CAACU,KAAM;IACvB,KAAK,EAAET,KAAM;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EACb,CACY,CACf;AAEP,CAAC"},"metadata":{"react-intl":{"messages":[{"id":"Divider","defaultMessage":"Divider"}]}},"sourceType":"module","externalDependencies":[]}