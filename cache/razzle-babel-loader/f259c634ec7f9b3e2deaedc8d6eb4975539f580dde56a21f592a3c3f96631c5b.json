{"ast":null,"code":"import _extends from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/extends.js\";\nimport _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _objectWithoutProperties from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _omit from \"lodash/omit\";\nvar _excluded = [\"data\", \"isEditMode\"];\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-listing-block/src/blocks/Teaser/Card.jsx\",\n  _this = this,\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Message } from 'semantic-ui-react';\nimport { defineMessages, useIntl } from 'react-intl';\nimport UniversalCard from '@eeacms/volto-listing-block/components/UniversalCard/UniversalCard';\nimport imageBlockSVG from '@plone/volto/components/manage/Blocks/Image/block-image.svg';\nimport { CardStylingSchemaEnhancer } from '../Listing/schema';\nvar messages = defineMessages({\n  PleaseChooseContent: {\n    \"id\": \"Please choose an existing content as source for this element\",\n    \"defaultMessage\": \"Please choose an existing content as source for this element\"\n  }\n});\nvar TeaserCardTemplate = function TeaserCardTemplate(props) {\n  _s();\n  var _data$href;\n  var data = props.data,\n    isEditMode = props.isEditMode,\n    rest = _objectWithoutProperties(props, _excluded);\n  var intl = useIntl();\n  var item = (_data$href = data.href) === null || _data$href === void 0 ? void 0 : _data$href[0];\n  return item ? __jsx(UniversalCard, _extends({\n    isEditMode: isEditMode\n  }, rest, data, {\n    item: _objectSpread(_objectSpread({}, item || {}), _omit(data, ['@type'])),\n    itemModel: data.itemModel || {},\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  })) : isEditMode ? __jsx(Message, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"grid-teaser-item placeholder\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }\n  }, __jsx(\"img\", {\n    src: imageBlockSVG,\n    alt: \"\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }\n  }), __jsx(\"p\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, intl.formatMessage(messages.PleaseChooseContent)))) : null;\n};\n_s(TeaserCardTemplate, \"rlSgSjbewJ1PrR/Ile8g/kr050o=\", false, function () {\n  return [useIntl];\n});\n_c = TeaserCardTemplate;\nTeaserCardTemplate.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  isEditMode: PropTypes.bool\n};\nTeaserCardTemplate.styleSchemaEnhancer = function (schema) {\n  return CardStylingSchemaEnhancer({\n    schema: schema\n  });\n};\nexport default TeaserCardTemplate;\n\n// const CardImage = (props) => {\n//   const { data } = props;\n//   const href = data.href?.[0];\n//   const image = data.preview_image?.[0];\n//   return href.hasPreviewImage || href.image_field || image ? (\n//     <div className=\"image\">\n//       <img src={flattenToAppURL(getTeaserImageURL(href, image))} alt=\"a\" />\n//     </div>\n//   ) : null;\n// };\n//\n// const CardHeadTitle = ({ data }) =>\n//   data?.head_title ? <div className=\"meta\">{data?.head_title}</div> : null;\n//\n// const CardDescription = ({ data }) =>\n//   !data.hide_description ? (\n//     <p className=\"description\">{data?.description}</p>\n//   ) : null;\n//\n// const CardTitle = ({ data }) => <div className=\"header\">{data?.title}</div>;\n//<MaybeWrap\n//  condition={!isEditMode}\n//  as={UniversalLink}\n//  href={href['@id']}\n//  target={data.openLinkInNewTab ? '_blank' : null}\n//>\n//  <div\n//    className={cx(\n//      'ui fluid card',\n//      data?.styles?.theme,\n//      data?.styles?.rounded ? 'rounded big' : '',\n//    )}\n//  >\n//    <CardImage {...props} />\n//    <div className=\"content\">\n//      <CardHeadTitle {...props} />\n//      <CardTitle {...props} />\n//      <CardDescription {...props} />\n//    </div>\n//  </div>\n//</MaybeWrap>\n// import { flattenToAppURL } from '@plone/volto/helpers';\n// import { getTeaserImageURL } from './utils';\n// import { MaybeWrap } from '@plone/volto/components';\n// import { UniversalLink } from '@plone/volto/components';\n// import cx from 'classnames';\nvar _c;\n$RefreshReg$(_c, \"TeaserCardTemplate\");","map":{"version":3,"names":["React","PropTypes","Message","defineMessages","useIntl","UniversalCard","imageBlockSVG","CardStylingSchemaEnhancer","messages","PleaseChooseContent","TeaserCardTemplate","props","data","isEditMode","rest","intl","item","href","itemModel","formatMessage","propTypes","objectOf","any","isRequired","bool","styleSchemaEnhancer","schema"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-listing-block/src/blocks/Teaser/Card.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { omit } from 'lodash';\nimport { Message } from 'semantic-ui-react';\nimport { defineMessages, useIntl } from 'react-intl';\n\nimport UniversalCard from '@eeacms/volto-listing-block/components/UniversalCard/UniversalCard';\n\nimport imageBlockSVG from '@plone/volto/components/manage/Blocks/Image/block-image.svg';\nimport { CardStylingSchemaEnhancer } from '../Listing/schema';\n\nconst messages = defineMessages({\n  PleaseChooseContent: {\n    id: 'Please choose an existing content as source for this element',\n    defaultMessage:\n      'Please choose an existing content as source for this element',\n  },\n});\n\nconst TeaserCardTemplate = (props) => {\n  const { data, isEditMode, ...rest } = props;\n  const intl = useIntl();\n  const item = data.href?.[0];\n\n  return item ? (\n    <UniversalCard\n      isEditMode={isEditMode}\n      {...rest}\n      {...data}\n      item={{ ...(item || {}), ...omit(data, ['@type']) }}\n      itemModel={data.itemModel || {}}\n    />\n  ) : isEditMode ? (\n    <Message>\n      <div className=\"grid-teaser-item placeholder\">\n        <img src={imageBlockSVG} alt=\"\" />\n        <p>{intl.formatMessage(messages.PleaseChooseContent)}</p>\n      </div>\n    </Message>\n  ) : null;\n};\n\nTeaserCardTemplate.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  isEditMode: PropTypes.bool,\n};\n\nTeaserCardTemplate.styleSchemaEnhancer = (schema) => {\n  return CardStylingSchemaEnhancer({ schema });\n};\n\nexport default TeaserCardTemplate;\n\n// const CardImage = (props) => {\n//   const { data } = props;\n//   const href = data.href?.[0];\n//   const image = data.preview_image?.[0];\n//   return href.hasPreviewImage || href.image_field || image ? (\n//     <div className=\"image\">\n//       <img src={flattenToAppURL(getTeaserImageURL(href, image))} alt=\"a\" />\n//     </div>\n//   ) : null;\n// };\n//\n// const CardHeadTitle = ({ data }) =>\n//   data?.head_title ? <div className=\"meta\">{data?.head_title}</div> : null;\n//\n// const CardDescription = ({ data }) =>\n//   !data.hide_description ? (\n//     <p className=\"description\">{data?.description}</p>\n//   ) : null;\n//\n// const CardTitle = ({ data }) => <div className=\"header\">{data?.title}</div>;\n//<MaybeWrap\n//  condition={!isEditMode}\n//  as={UniversalLink}\n//  href={href['@id']}\n//  target={data.openLinkInNewTab ? '_blank' : null}\n//>\n//  <div\n//    className={cx(\n//      'ui fluid card',\n//      data?.styles?.theme,\n//      data?.styles?.rounded ? 'rounded big' : '',\n//    )}\n//  >\n//    <CardImage {...props} />\n//    <div className=\"content\">\n//      <CardHeadTitle {...props} />\n//      <CardTitle {...props} />\n//      <CardDescription {...props} />\n//    </div>\n//  </div>\n//</MaybeWrap>\n// import { flattenToAppURL } from '@plone/volto/helpers';\n// import { getTeaserImageURL } from './utils';\n// import { MaybeWrap } from '@plone/volto/components';\n// import { UniversalLink } from '@plone/volto/components';\n// import cx from 'classnames';\n"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAElC,SAASC,OAAO,QAAQ,mBAAmB;AAC3C,SAASC,cAAc,EAAEC,OAAO,QAAQ,YAAY;AAEpD,OAAOC,aAAa,MAAM,oEAAoE;AAE9F,OAAOC,aAAa,MAAM,6DAA6D;AACvF,SAASC,yBAAyB,QAAQ,mBAAmB;AAE7D,IAAMC,QAAQ,GAAGL,cAAc,CAAC;EAC9BM,mBAAmB;IAAA;IAAA;EAAA;AAKrB,CAAC,CAAC;AAEF,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkB,CAAIC,KAAK,EAAK;EAAA;EAAA;EACpC,IAAQC,IAAI,GAA0BD,KAAK,CAAnCC,IAAI;IAAEC,UAAU,GAAcF,KAAK,CAA7BE,UAAU;IAAKC,IAAI,4BAAKH,KAAK;EAC3C,IAAMI,IAAI,GAAGX,OAAO,EAAE;EACtB,IAAMY,IAAI,iBAAGJ,IAAI,CAACK,IAAI,+CAAT,WAAY,CAAC,CAAC;EAE3B,OAAOD,IAAI,GACT,MAAC,aAAa;IACZ,UAAU,EAAEH;EAAW,GACnBC,IAAI,EACJF,IAAI;IACR,IAAI,kCAAQI,IAAI,IAAI,CAAC,CAAC,GAAM,MAAKJ,IAAI,EAAE,CAAC,OAAO,CAAC,CAAC,CAAG;IACpD,SAAS,EAAEA,IAAI,CAACM,SAAS,IAAI,CAAC,CAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAChC,GACAL,UAAU,GACZ,MAAC,OAAO;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACN;IAAK,SAAS,EAAC,8BAA8B;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAC3C;IAAK,GAAG,EAAEP,aAAc;IAAC,GAAG,EAAC,EAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAG,EAClC;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAIS,IAAI,CAACI,aAAa,CAACX,QAAQ,CAACC,mBAAmB,CAAC,CAAK,CACrD,CACE,GACR,IAAI;AACV,CAAC;AAAC,GArBIC,kBAAkB;EAAA,QAETN,OAAO;AAAA;AAAA,KAFhBM,kBAAkB;AAuBxBA,kBAAkB,CAACU,SAAS,GAAG;EAC7BR,IAAI,EAAEX,SAAS,CAACoB,QAAQ,CAACpB,SAAS,CAACqB,GAAG,CAAC,CAACC,UAAU;EAClDV,UAAU,EAAEZ,SAAS,CAACuB;AACxB,CAAC;AAEDd,kBAAkB,CAACe,mBAAmB,GAAG,UAACC,MAAM,EAAK;EACnD,OAAOnB,yBAAyB,CAAC;IAAEmB,MAAM,EAANA;EAAO,CAAC,CAAC;AAC9C,CAAC;AAED,eAAehB,kBAAkB;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA"},"metadata":{"react-intl":{"messages":[{"id":"Please choose an existing content as source for this element","defaultMessage":"Please choose an existing content as source for this element"}]}},"sourceType":"module","externalDependencies":[]}