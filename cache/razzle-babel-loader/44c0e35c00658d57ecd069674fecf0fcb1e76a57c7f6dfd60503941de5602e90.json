{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Blocks/Listing/ListingData.jsx\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { BlockDataForm } from '@plone/volto/components';\nimport { schemaListing } from './schema';\nconst ListingData = props => {\n  const {\n    data,\n    block,\n    onChangeBlock\n  } = props;\n  const intl = useIntl();\n  const schema = schemaListing(_objectSpread(_objectSpread({}, props), {}, {\n    intl\n  }));\n  return __jsx(BlockDataForm, {\n    schema: schema,\n    title: schema.title,\n    onChangeField: (id, value) => {\n      onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n        [id]: value\n      }));\n    },\n    formData: data,\n    block: block,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 5\n    }\n  });\n};\nListingData.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  block: PropTypes.string.isRequired,\n  onChangeBlock: PropTypes.func.isRequired\n};\nexport default ListingData;","map":{"version":3,"names":["React","PropTypes","useIntl","BlockDataForm","schemaListing","ListingData","props","data","block","onChangeBlock","intl","schema","title","id","value","propTypes","objectOf","any","isRequired","string","func"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Blocks/Listing/ListingData.jsx"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useIntl } from 'react-intl';\nimport { BlockDataForm } from '@plone/volto/components';\nimport { schemaListing } from './schema';\n\nconst ListingData = (props) => {\n  const { data, block, onChangeBlock } = props;\n  const intl = useIntl();\n  const schema = schemaListing({ ...props, intl });\n\n  return (\n    <BlockDataForm\n      schema={schema}\n      title={schema.title}\n      onChangeField={(id, value) => {\n        onChangeBlock(block, {\n          ...data,\n          [id]: value,\n        });\n      }}\n      formData={data}\n      block={block}\n    />\n  );\n};\n\nListingData.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  block: PropTypes.string.isRequired,\n  onChangeBlock: PropTypes.func.isRequired,\n};\n\nexport default ListingData;\n"],"mappings":";;;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,OAAO,QAAQ,YAAY;AACpC,SAASC,aAAa,QAAQ,yBAAyB;AACvD,SAASC,aAAa,QAAQ,UAAU;AAExC,MAAMC,WAAW,GAAIC,KAAK,IAAK;EAC7B,MAAM;IAAEC,IAAI;IAAEC,KAAK;IAAEC;EAAc,CAAC,GAAGH,KAAK;EAC5C,MAAMI,IAAI,GAAGR,OAAO,EAAE;EACtB,MAAMS,MAAM,GAAGP,aAAa,iCAAME,KAAK;IAAEI;EAAI,GAAG;EAEhD,OACE,MAAC,aAAa;IACZ,MAAM,EAAEC,MAAO;IACf,KAAK,EAAEA,MAAM,CAACC,KAAM;IACpB,aAAa,EAAE,CAACC,EAAE,EAAEC,KAAK,KAAK;MAC5BL,aAAa,CAACD,KAAK,kCACdD,IAAI;QACP,CAACM,EAAE,GAAGC;MAAK,GACX;IACJ,CAAE;IACF,QAAQ,EAAEP,IAAK;IACf,KAAK,EAAEC,KAAM;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EACb;AAEN,CAAC;AAEDH,WAAW,CAACU,SAAS,GAAG;EACtBR,IAAI,EAAEN,SAAS,CAACe,QAAQ,CAACf,SAAS,CAACgB,GAAG,CAAC,CAACC,UAAU;EAClDV,KAAK,EAAEP,SAAS,CAACkB,MAAM,CAACD,UAAU;EAClCT,aAAa,EAAER,SAAS,CAACmB,IAAI,CAACF;AAChC,CAAC;AAED,eAAeb,WAAW"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}