{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-datablocks/src/components/manage/Blocks/DottedTableChart/View.jsx\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport React from 'react';\nimport { compose } from 'redux';\nimport { Popup, Table } from 'semantic-ui-react';\nimport { connectToProviderData } from '@eeacms/volto-datablocks/hocs';\nimport { DEFAULT_MAX_DOT_COUNT } from './constants';\nimport { serializeNodes } from '@eeacms/volto-datablocks/serialize';\nimport { FormattedValue } from '@eeacms/volto-datablocks/Utils';\nimport './styles.less';\nconst DottedTableChartView = props => {\n  const {\n    data,\n    provider_data = {}\n  } = props;\n  const {\n    description,\n    column_data,\n    row_data,\n    size_data,\n    row_colors = {},\n    max_dot_count = DEFAULT_MAX_DOT_COUNT,\n    text_template,\n    specifier\n  } = data;\n  const possible_columns = Array.from(new Set(provider_data === null || provider_data === void 0 ? void 0 : provider_data[column_data])).sort();\n  const possible_rows = Array.from(new Set(provider_data === null || provider_data === void 0 ? void 0 : provider_data[row_data])).sort();\n  const data_tree = React.useMemo(() => {\n    const res = {};\n    ((provider_data === null || provider_data === void 0 ? void 0 : provider_data[column_data]) || []).forEach((cv, i) => {\n      var _provider_data$row_da, _provider_data$size_d;\n      res[cv] = _objectSpread(_objectSpread({}, res[cv]), {}, {\n        [provider_data === null || provider_data === void 0 ? void 0 : (_provider_data$row_da = provider_data[row_data]) === null || _provider_data$row_da === void 0 ? void 0 : _provider_data$row_da[i]]: provider_data === null || provider_data === void 0 ? void 0 : (_provider_data$size_d = provider_data[size_data]) === null || _provider_data$size_d === void 0 ? void 0 : _provider_data$size_d[i]\n      });\n    });\n    return res;\n  }, [column_data, provider_data, row_data, size_data]);\n  const size_column_data = (provider_data === null || provider_data === void 0 ? void 0 : provider_data[size_data]) || [];\n  // TODO: use sums to find the biggest value for a column?\n  const maxValue = React.useMemo(() => {\n    const numbers = size_column_data.map(s => typeof s === 'string' ? parseFloat(s) : s);\n    return Math.max(...numbers);\n  }, [size_column_data]);\n  const dotSize = Math.ceil(maxValue / max_dot_count);\n  const renderDots = (value, color) => {\n    const arraySize = Math.floor(value / dotSize);\n    return __jsx(\"div\", {\n      className: \"dot-cells\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 7\n      }\n    }, arraySize && dotSize ? new Array(arraySize).fill(1).map((_, i) => __jsx(\"div\", {\n      key: i,\n      style: {\n        backgroundColor: color\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }\n    })) : '');\n  };\n  return __jsx(\"div\", {\n    className: \"dotted-table-chart\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: `${data.underline ? 'with-border' : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, description ? serializeNodes(description) : ''), __jsx(\"div\", {\n    className: \"inner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, !!provider_data && column_data && row_data && size_data ? __jsx(Table, {\n    textAlign: \"left\",\n    striped: data.striped,\n    className: `unstackable ${data.bordered ? 'no-borders' : ''}\n    ${data.compact_table ? 'compact-table' : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }, __jsx(Table.Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, __jsx(Table.Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 15\n    }\n  }, __jsx(Table.Cell, {\n    key: \"first-cell\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }\n  }), possible_columns.map((v, y) => __jsx(Table.HeaderCell, {\n    key: `${v}-${y}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 19\n    }\n  }, v)))), __jsx(Table.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }\n  }, possible_rows.map((row, i) => __jsx(Table.Row, {\n    key: `${row}-${i}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 17\n    }\n  }, __jsx(Table.HeaderCell, {\n    key: \"first-cell\",\n    style: {\n      color: row_colors === null || row_colors === void 0 ? void 0 : row_colors[row]\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 19\n    }\n  }, row), possible_columns.map((col, y) => __jsx(Table.Cell, {\n    verticalAlign: \"top\",\n    key: `${col}-${y}`,\n    style: {\n      // hack from https://stackoverflow.com/a/3542470/258462\n      height: '1px',\n      padding: '0'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 21\n    }\n  }, __jsx(Popup, {\n    content:\n    // it might happen that the FormattedValue component returns empty string because of the input data\n    __jsx(React.Fragment, null, \"Value:\", ' ', __jsx(FormattedValue, {\n      textTemplate: text_template,\n      value: data_tree[col][row],\n      specifier: specifier,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 29\n      }\n    })),\n    trigger: __jsx(\"div\", {\n      style: {\n        // hack from https://stackoverflow.com/a/3542470/258462\n        height: '100%',\n        padding: '0.78571429em' // value taken from SUIR's collections/table.less (possibly needs to be changed if compact table style is implemented in DottedTableChartView)\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 27\n      }\n    }, renderDots(data_tree[col][row], row_colors === null || row_colors === void 0 ? void 0 : row_colors[row])),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 23\n    }\n  }))))))) : ''));\n};\nexport default compose(connectToProviderData(props => ({\n  provider_url: props.data.url || props.data.provider_url\n})))(DottedTableChartView);","map":{"version":3,"names":["React","compose","Popup","Table","connectToProviderData","DEFAULT_MAX_DOT_COUNT","serializeNodes","FormattedValue","DottedTableChartView","props","data","provider_data","description","column_data","row_data","size_data","row_colors","max_dot_count","text_template","specifier","possible_columns","Array","from","Set","sort","possible_rows","data_tree","useMemo","res","forEach","cv","i","size_column_data","maxValue","numbers","map","s","parseFloat","Math","max","dotSize","ceil","renderDots","value","color","arraySize","floor","fill","_","backgroundColor","underline","striped","bordered","compact_table","v","y","row","col","height","padding","provider_url","url"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-datablocks/src/components/manage/Blocks/DottedTableChart/View.jsx"],"sourcesContent":["import React from 'react';\nimport { compose } from 'redux';\nimport { Popup, Table } from 'semantic-ui-react';\nimport { connectToProviderData } from '@eeacms/volto-datablocks/hocs';\nimport { DEFAULT_MAX_DOT_COUNT } from './constants';\nimport { serializeNodes } from '@eeacms/volto-datablocks/serialize';\nimport { FormattedValue } from '@eeacms/volto-datablocks/Utils';\n\nimport './styles.less';\n\nconst DottedTableChartView = (props) => {\n  const { data, provider_data = {} } = props;\n\n  const {\n    description,\n    column_data,\n    row_data,\n    size_data,\n    row_colors = {},\n    max_dot_count = DEFAULT_MAX_DOT_COUNT,\n    text_template,\n    specifier,\n  } = data;\n\n  const possible_columns = Array.from(\n    new Set(provider_data?.[column_data]),\n  ).sort();\n  const possible_rows = Array.from(new Set(provider_data?.[row_data])).sort();\n\n  const data_tree = React.useMemo(() => {\n    const res = {};\n    (provider_data?.[column_data] || []).forEach((cv, i) => {\n      res[cv] = {\n        ...res[cv],\n        [provider_data?.[row_data]?.[i]]: provider_data?.[size_data]?.[i],\n      };\n    });\n    return res;\n  }, [column_data, provider_data, row_data, size_data]);\n\n  const size_column_data = provider_data?.[size_data] || [];\n  // TODO: use sums to find the biggest value for a column?\n  const maxValue = React.useMemo(() => {\n    const numbers = size_column_data.map((s) =>\n      typeof s === 'string' ? parseFloat(s) : s,\n    );\n    return Math.max(...numbers);\n  }, [size_column_data]);\n\n  const dotSize = Math.ceil(maxValue / max_dot_count);\n\n  const renderDots = (value, color) => {\n    const arraySize = Math.floor(value / dotSize);\n    return (\n      <div className=\"dot-cells\">\n        {arraySize && dotSize\n          ? new Array(arraySize)\n              .fill(1)\n              .map((_, i) => (\n                <div key={i} style={{ backgroundColor: color }}></div>\n              ))\n          : ''}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"dotted-table-chart\">\n      <div className={`${data.underline ? 'with-border' : ''}`}>\n        {description ? serializeNodes(description) : ''}\n      </div>\n      <div className=\"inner\">\n        {!!provider_data && column_data && row_data && size_data ? (\n          <Table\n            textAlign=\"left\"\n            striped={data.striped}\n            className={`unstackable ${data.bordered ? 'no-borders' : ''}\n    ${data.compact_table ? 'compact-table' : ''}`}\n          >\n            <Table.Header>\n              <Table.Row>\n                <Table.Cell key=\"first-cell\"></Table.Cell>\n                {possible_columns.map((v, y) => (\n                  <Table.HeaderCell key={`${v}-${y}`}>{v}</Table.HeaderCell>\n                ))}\n              </Table.Row>\n            </Table.Header>\n            <Table.Body>\n              {possible_rows.map((row, i) => (\n                <Table.Row key={`${row}-${i}`}>\n                  <Table.HeaderCell\n                    key=\"first-cell\"\n                    style={{ color: row_colors?.[row] }}\n                  >\n                    {row}\n                  </Table.HeaderCell>\n                  {possible_columns.map((col, y) => (\n                    <Table.Cell\n                      verticalAlign=\"top\"\n                      key={`${col}-${y}`}\n                      style={{\n                        // hack from https://stackoverflow.com/a/3542470/258462\n                        height: '1px',\n\n                        padding: '0',\n                      }}\n                    >\n                      <Popup\n                        content={\n                          // it might happen that the FormattedValue component returns empty string because of the input data\n                          <>\n                            Value:{' '}\n                            <FormattedValue\n                              textTemplate={text_template}\n                              value={data_tree[col][row]}\n                              specifier={specifier}\n                            />\n                          </>\n                        }\n                        trigger={\n                          <div\n                            style={{\n                              // hack from https://stackoverflow.com/a/3542470/258462\n                              height: '100%',\n\n                              padding: '0.78571429em', // value taken from SUIR's collections/table.less (possibly needs to be changed if compact table style is implemented in DottedTableChartView)\n                            }}\n                          >\n                            {renderDots(data_tree[col][row], row_colors?.[row])}\n                          </div>\n                        }\n                      />\n                    </Table.Cell>\n                  ))}\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n        ) : (\n          ''\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default compose(\n  connectToProviderData((props) => ({\n    provider_url: props.data.url || props.data.provider_url,\n  })),\n)(DottedTableChartView);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}