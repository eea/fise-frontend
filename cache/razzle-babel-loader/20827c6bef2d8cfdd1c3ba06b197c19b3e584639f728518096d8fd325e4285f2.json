{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-slate-metadata-mentions/src/plugins/Mentions/render.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport config from '@plone/volto/registry';\nimport { wrapInlineMarkupText } from '@plone/volto-slate/utils';\nimport { Popup, PopupContent } from 'semantic-ui-react';\nimport { useEditorContext } from '@plone/volto-slate/hooks';\nimport ErrorBoundary from './ErrorBoundary';\nexport const MentionElement = ({\n  attributes,\n  children,\n  element,\n  mode,\n  extras = {}\n}) => {\n  const {\n    views\n  } = config.widgets;\n  const {\n    data = {}\n  } = element;\n  const initialFormData = useSelector(state => {\n    var _state$content;\n    return (state === null || state === void 0 ? void 0 : (_state$content = state.content) === null || _state$content === void 0 ? void 0 : _state$content.data) || {};\n  });\n  let metadata = _objectSpread({}, (extras === null || extras === void 0 ? void 0 : extras.metadata) || initialFormData);\n  const id = (data === null || data === void 0 ? void 0 : data.metadata) || (data === null || data === void 0 ? void 0 : data.id);\n\n  // Get data from the editor, if it exists. The editor has up to date block\n  // props\n  const editor = useEditorContext();\n  if (editor !== null && editor !== void 0 && editor.getBlockProps) {\n    const blockProps = editor.getBlockProps();\n    metadata = blockProps.metadata || blockProps.properties || {};\n  }\n  let output = metadata[id];\n  let Widget = views.getWidget(data);\n  let className = 'metadata mention ' + id;\n\n  // If edit mode and output is empty render it's id\n  if (editor && !output) {\n    className += ' empty';\n    output = id;\n    Widget = views.getWidget({\n      widget: 'default'\n    });\n  }\n  return __jsx(React.Fragment, null, mode === 'view' ? __jsx(ErrorBoundary, {\n    name: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, __jsx(Widget, {\n    value: output,\n    className: className,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  }, child => wrapInlineMarkupText(children, c => child))) : __jsx(Popup, {\n    wide: \"very\",\n    position: \"right center\",\n    trigger: __jsx(\"span\", _extends({}, attributes, {\n      className: \"metadata mention edit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }\n    }), children),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, __jsx(PopupContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 11\n    }\n  }, __jsx(ErrorBoundary, {\n    name: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, __jsx(Widget, {\n    value: output,\n    className: className,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 15\n    }\n  })))));\n};","map":{"version":3,"names":["React","useSelector","config","wrapInlineMarkupText","Popup","PopupContent","useEditorContext","ErrorBoundary","MentionElement","attributes","children","element","mode","extras","views","widgets","data","initialFormData","state","content","metadata","id","editor","getBlockProps","blockProps","properties","output","Widget","getWidget","className","widget","child","c"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-slate-metadata-mentions/src/plugins/Mentions/render.jsx"],"sourcesContent":["import React from 'react';\nimport { useSelector } from 'react-redux';\nimport config from '@plone/volto/registry';\nimport { wrapInlineMarkupText } from '@plone/volto-slate/utils';\nimport { Popup, PopupContent } from 'semantic-ui-react';\nimport { useEditorContext } from '@plone/volto-slate/hooks';\nimport ErrorBoundary from './ErrorBoundary';\n\nexport const MentionElement = ({\n  attributes,\n  children,\n  element,\n  mode,\n  extras = {},\n}) => {\n  const { views } = config.widgets;\n  const { data = {} } = element;\n  const initialFormData = useSelector((state) => state?.content?.data || {});\n  let metadata = { ...(extras?.metadata || initialFormData) };\n  const id = data?.metadata || data?.id;\n\n  // Get data from the editor, if it exists. The editor has up to date block\n  // props\n  const editor = useEditorContext();\n\n  if (editor?.getBlockProps) {\n    const blockProps = editor.getBlockProps();\n    metadata = blockProps.metadata || blockProps.properties || {};\n  }\n\n  let output = metadata[id];\n  let Widget = views.getWidget(data);\n  let className = 'metadata mention ' + id;\n\n  // If edit mode and output is empty render it's id\n  if (editor && !output) {\n    className += ' empty';\n    output = id;\n    Widget = views.getWidget({ widget: 'default' });\n  }\n\n  return (\n    <>\n      {mode === 'view' ? (\n        <ErrorBoundary name={id}>\n          <Widget value={output} className={className}>\n            {(child) => wrapInlineMarkupText(children, (c) => child)}\n          </Widget>\n        </ErrorBoundary>\n      ) : (\n        <Popup\n          wide=\"very\"\n          position=\"right center\"\n          trigger={\n            <span {...attributes} className=\"metadata mention edit\">\n              {children}\n            </span>\n          }\n        >\n          <PopupContent>\n            <ErrorBoundary name={id}>\n              <Widget value={output} className={className} />\n            </ErrorBoundary>\n          </PopupContent>\n        </Popup>\n      )}\n    </>\n  );\n};\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}