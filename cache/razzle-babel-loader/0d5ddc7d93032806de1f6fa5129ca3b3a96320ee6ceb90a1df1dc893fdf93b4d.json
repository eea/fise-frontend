{"ast":null,"code":"import _memoize from \"lodash/memoize\";\nimport _last from \"lodash/last\";\nimport { urlRegex, telRegex, mailRegex } from './urlRegex';\nimport prependHttp from 'prepend-http';\nimport config from '@plone/volto/registry';\n\n/**\n * Get base url.\n * @function getBaseUrl\n * @param {string} url Url to be parsed.\n * @return {string} Base url of content object.\n */\nexport const getBaseUrl = _memoize(url => {\n  const {\n    settings\n  } = config;\n  if (url === undefined) return;\n\n  // We allow settings.nonContentRoutes to have strings (that are supposed to match\n  // ending strings of pathnames, so we are converting them to RegEx to match also\n  const normalized_nonContentRoutes = settings.nonContentRoutes.map(item => {\n    if (item.test) {\n      return item;\n    } else {\n      return new RegExp(item + '$');\n    }\n  });\n  let adjustedUrl = normalized_nonContentRoutes.reduce((acc, item) => acc.replace(item, ''), url);\n  adjustedUrl = adjustedUrl || '/';\n  return adjustedUrl === '/' ? '' : adjustedUrl;\n});\n\n/**\n * Get parent url.\n * @function getParentUrl\n * @param {string} url Url to be parsed.\n * @return {string} Parent url of content object.\n */\nexport const getParentUrl = _memoize(url => {\n  return url.substring(0, url.lastIndexOf('/'));\n});\n\n/**\n * Get id from url.\n * @function getId\n * @param {string} url Url to be parsed.\n * @return {string} Id of content object.\n */\nexport function getId(url) {\n  return _last(url.replace(/\\?.*$/, '').split('/'));\n}\n\n/**\n * Get view of an url.\n * @function getView\n * @param {string} url Url to be parsed.\n * @return {string} View of content object.\n */\nexport function getView(url) {\n  const view = _last(url.replace(/\\?.*$/, '').split('/'));\n  if (['add', 'layout', 'contents', 'edit', 'delete', 'diff', 'history', 'sharing', 'controlpanel'].indexOf(view) === -1) {\n    return 'view';\n  }\n  return view === 'layout' ? 'edit' : view;\n}\n\n/**\n * Flatten to app server URL - Given a URL if it starts with the API server URL\n * this method flattens it (removes) the server part\n * TODO: Update it when implementing non-root based app location (on a\n * directory other than /, eg. /myapp)\n * @method flattenToAppURL\n * @param {string} url URL of the object\n * @returns {string} Flattened URL to the app server\n */\nexport function flattenToAppURL(url) {\n  const {\n    settings\n  } = config;\n  return url && url.replace(settings.internalApiPath, '').replace(settings.apiPath, '').replace(settings.publicURL, '');\n}\n/**\n * Given a URL it remove the querystring from the URL.\n * @method stripQuerystring\n * @param {string} url URL of the object\n * @returns {string} URL without querystring\n */\nexport function stripQuerystring(url) {\n  return url.replace(/\\?.*$/, '');\n}\n\n/**\n * Given a URL if it starts with the API server URL\n * this method removes the /api or the /Plone part.\n * @method toPublicURL\n * @param {string} url URL of the object\n * @returns {string} public URL\n */\nexport function toPublicURL(url) {\n  const {\n    settings\n  } = config;\n  return settings.publicURL.concat(flattenToAppURL(url));\n}\n\n/**\n * Returns true if the current view is a cms ui view\n * @method isCmsUi\n * @param {string} currentPathname pathname of the current view\n * @returns {boolean} true if the current view is a cms ui view\n */\nexport const isCmsUi = _memoize(currentPathname => {\n  const {\n    settings\n  } = config;\n  const fullPath = currentPathname.replace(/\\?.*$/, '');\n  // WARNING:\n  // not working properly for paths like /editors or similar\n  // because the regexp test does not take that into account\n  // https://github.com/plone/volto/issues/870\n  return settings.nonContentRoutes.reduce((acc, route) => acc || new RegExp(route).test(`/${fullPath}`), false);\n});\n\n/**\n * Flatten to app server HTML - Given a text if it contains some urls that starts\n * with the API server URL this method flattens it (removes) the server part.\n * TODO: Update it when implementing non-root based app location (on a\n * directory other than /, eg. /myapp)\n * @method flattenHTMLToAppURL\n * @param {string} html Some html snippet\n * @returns {string} Same HTML with Flattened URLs to the app server\n */\nexport function flattenHTMLToAppURL(html) {\n  const {\n    settings\n  } = config;\n  return settings.internalApiPath ? html.replace(new RegExp(settings.internalApiPath, 'g'), '').replace(new RegExp(settings.apiPath, 'g'), '') : html.replace(new RegExp(settings.apiPath, 'g'), '');\n}\n\n/**\n * Add the app url\n * @method addAppURL\n * @param {string} url URL of the object\n * @returns {string} New URL with app\n */\nexport function addAppURL(url) {\n  const {\n    settings\n  } = config;\n  return url.indexOf(settings.apiPath) === 0 ? url : `${settings.apiPath}${url}`;\n}\n\n/**\n * Given a URL expands it to the backend URL\n * Useful when you have to actually call the backend from the\n * frontend code (eg. ICS calendar download)\n * It is seamless mode aware\n * @method expandToBackendURL\n * @param {string} url URL or path of the object\n * @returns {string} New URL with the backend URL\n */\nexport function expandToBackendURL(path) {\n  const {\n    settings\n  } = config;\n  const APISUFIX = settings.legacyTraverse ? '' : '/++api++';\n  let adjustedPath;\n  if (path.startsWith('http://') || path.startsWith('https://')) {\n    // flattenToAppURL first if we get a full URL\n    adjustedPath = flattenToAppURL(path);\n  } else {\n    // Next adds a / in front if not a full URL to make sure it's a valid relative path\n    adjustedPath = path[0] !== '/' ? `/${path}` : path;\n  }\n  let apiPath = '';\n  if (settings.internalApiPath && __SERVER__) {\n    apiPath = settings.internalApiPath;\n  } else if (settings.apiPath) {\n    apiPath = settings.apiPath;\n  }\n  return `${apiPath}${APISUFIX}${adjustedPath}`;\n}\n\n/**\n * Check if internal url\n * @method isInternalURL\n * @param {string} url URL of the object\n * @returns {boolean} True if internal url\n */\nexport function isInternalURL(url) {\n  const {\n    settings\n  } = config;\n  return url && (url.indexOf(settings.publicURL) !== -1 || settings.internalApiPath && url.indexOf(settings.internalApiPath) !== -1 || url.indexOf(settings.apiPath) !== -1 || url.charAt(0) === '/' || url.charAt(0) === '.' || url.startsWith('#'));\n}\n\n/**\n * Check if it's a valid url\n * @method isUrl\n * @param {string} url URL of the object\n * @returns {boolean} True if is a valid url\n */\nexport function isUrl(url) {\n  return urlRegex().test(url);\n}\n\n/**\n * Normalize URL, adds protocol (if required eg. user has not entered the protocol)\n * @method normalizeUrl\n * @param {string} url URL of the object\n * @returns {boolean} URL with the protocol\n */\nexport function normalizeUrl(url) {\n  return prependHttp(url);\n}\n\n/**\n * Removes protocol from URL (for display)\n * @method removeProtocol\n * @param {string} url URL of the object\n * @returns {string} URL without the protocol part\n */\nexport function removeProtocol(url) {\n  return url.replace('https://', '').replace('http://', '');\n}\nexport function isMail(text) {\n  return mailRegex().test(text);\n}\nexport function isTelephone(text) {\n  return telRegex().test(text);\n}\nexport function normaliseMail(email) {\n  if (email.toLowerCase().startsWith('mailto:')) {\n    return email;\n  }\n  return `mailto:${email}`;\n}\nexport function normalizeTelephone(tel) {\n  if (tel.toLowerCase().startsWith('tel:')) {\n    return tel;\n  }\n  return `tel:${tel}`;\n}\nexport function checkAndNormalizeUrl(url) {\n  let res = {\n    isMail: false,\n    isTelephone: false,\n    url: url,\n    isValid: true\n  };\n  if (URLUtils.isMail(URLUtils.normaliseMail(url))) {\n    //Mail\n    res.isMail = true;\n    res.url = URLUtils.normaliseMail(url);\n  } else if (URLUtils.isTelephone(url)) {\n    //Phone\n    res.isTelephone = true;\n    res.url = URLUtils.normalizeTelephone(url);\n  } else {\n    //url\n    if (!res.url.startsWith('/') && !res.url.startsWith('#')) {\n      res.url = URLUtils.normalizeUrl(url);\n      if (!URLUtils.isUrl(res.url)) {\n        res.isValid = false;\n      }\n    }\n  }\n  return res;\n}\nexport const URLUtils = {\n  normalizeTelephone,\n  normaliseMail,\n  normalizeUrl,\n  isTelephone,\n  isMail,\n  isUrl,\n  checkAndNormalizeUrl\n};","map":{"version":3,"names":["urlRegex","telRegex","mailRegex","prependHttp","config","getBaseUrl","url","settings","undefined","normalized_nonContentRoutes","nonContentRoutes","map","item","test","RegExp","adjustedUrl","reduce","acc","replace","getParentUrl","substring","lastIndexOf","getId","split","getView","view","indexOf","flattenToAppURL","internalApiPath","apiPath","publicURL","stripQuerystring","toPublicURL","concat","isCmsUi","currentPathname","fullPath","route","flattenHTMLToAppURL","html","addAppURL","expandToBackendURL","path","APISUFIX","legacyTraverse","adjustedPath","startsWith","__SERVER__","isInternalURL","charAt","isUrl","normalizeUrl","removeProtocol","isMail","text","isTelephone","normaliseMail","email","toLowerCase","normalizeTelephone","tel","checkAndNormalizeUrl","res","isValid","URLUtils"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/helpers/Url/Url.js"],"sourcesContent":["/**\n * Url helper.\n * @module helpers/Url\n */\n\nimport { last, memoize } from 'lodash';\nimport { urlRegex, telRegex, mailRegex } from './urlRegex';\nimport prependHttp from 'prepend-http';\nimport config from '@plone/volto/registry';\n\n/**\n * Get base url.\n * @function getBaseUrl\n * @param {string} url Url to be parsed.\n * @return {string} Base url of content object.\n */\nexport const getBaseUrl = memoize((url) => {\n  const { settings } = config;\n  if (url === undefined) return;\n\n  // We allow settings.nonContentRoutes to have strings (that are supposed to match\n  // ending strings of pathnames, so we are converting them to RegEx to match also\n  const normalized_nonContentRoutes = settings.nonContentRoutes.map((item) => {\n    if (item.test) {\n      return item;\n    } else {\n      return new RegExp(item + '$');\n    }\n  });\n\n  let adjustedUrl = normalized_nonContentRoutes.reduce(\n    (acc, item) => acc.replace(item, ''),\n    url,\n  );\n\n  adjustedUrl = adjustedUrl || '/';\n  return adjustedUrl === '/' ? '' : adjustedUrl;\n});\n\n/**\n * Get parent url.\n * @function getParentUrl\n * @param {string} url Url to be parsed.\n * @return {string} Parent url of content object.\n */\nexport const getParentUrl = memoize((url) => {\n  return url.substring(0, url.lastIndexOf('/'));\n});\n\n/**\n * Get id from url.\n * @function getId\n * @param {string} url Url to be parsed.\n * @return {string} Id of content object.\n */\nexport function getId(url) {\n  return last(url.replace(/\\?.*$/, '').split('/'));\n}\n\n/**\n * Get view of an url.\n * @function getView\n * @param {string} url Url to be parsed.\n * @return {string} View of content object.\n */\nexport function getView(url) {\n  const view = last(url.replace(/\\?.*$/, '').split('/'));\n  if (\n    [\n      'add',\n      'layout',\n      'contents',\n      'edit',\n      'delete',\n      'diff',\n      'history',\n      'sharing',\n      'controlpanel',\n    ].indexOf(view) === -1\n  ) {\n    return 'view';\n  }\n  return view === 'layout' ? 'edit' : view;\n}\n\n/**\n * Flatten to app server URL - Given a URL if it starts with the API server URL\n * this method flattens it (removes) the server part\n * TODO: Update it when implementing non-root based app location (on a\n * directory other than /, eg. /myapp)\n * @method flattenToAppURL\n * @param {string} url URL of the object\n * @returns {string} Flattened URL to the app server\n */\nexport function flattenToAppURL(url) {\n  const { settings } = config;\n  return (\n    url &&\n    url\n      .replace(settings.internalApiPath, '')\n      .replace(settings.apiPath, '')\n      .replace(settings.publicURL, '')\n  );\n}\n/**\n * Given a URL it remove the querystring from the URL.\n * @method stripQuerystring\n * @param {string} url URL of the object\n * @returns {string} URL without querystring\n */\nexport function stripQuerystring(url) {\n  return url.replace(/\\?.*$/, '');\n}\n\n/**\n * Given a URL if it starts with the API server URL\n * this method removes the /api or the /Plone part.\n * @method toPublicURL\n * @param {string} url URL of the object\n * @returns {string} public URL\n */\nexport function toPublicURL(url) {\n  const { settings } = config;\n  return settings.publicURL.concat(flattenToAppURL(url));\n}\n\n/**\n * Returns true if the current view is a cms ui view\n * @method isCmsUi\n * @param {string} currentPathname pathname of the current view\n * @returns {boolean} true if the current view is a cms ui view\n */\nexport const isCmsUi = memoize((currentPathname) => {\n  const { settings } = config;\n  const fullPath = currentPathname.replace(/\\?.*$/, '');\n  // WARNING:\n  // not working properly for paths like /editors or similar\n  // because the regexp test does not take that into account\n  // https://github.com/plone/volto/issues/870\n  return settings.nonContentRoutes.reduce(\n    (acc, route) => acc || new RegExp(route).test(`/${fullPath}`),\n    false,\n  );\n});\n\n/**\n * Flatten to app server HTML - Given a text if it contains some urls that starts\n * with the API server URL this method flattens it (removes) the server part.\n * TODO: Update it when implementing non-root based app location (on a\n * directory other than /, eg. /myapp)\n * @method flattenHTMLToAppURL\n * @param {string} html Some html snippet\n * @returns {string} Same HTML with Flattened URLs to the app server\n */\nexport function flattenHTMLToAppURL(html) {\n  const { settings } = config;\n  return settings.internalApiPath\n    ? html\n        .replace(new RegExp(settings.internalApiPath, 'g'), '')\n        .replace(new RegExp(settings.apiPath, 'g'), '')\n    : html.replace(new RegExp(settings.apiPath, 'g'), '');\n}\n\n/**\n * Add the app url\n * @method addAppURL\n * @param {string} url URL of the object\n * @returns {string} New URL with app\n */\nexport function addAppURL(url) {\n  const { settings } = config;\n  return url.indexOf(settings.apiPath) === 0\n    ? url\n    : `${settings.apiPath}${url}`;\n}\n\n/**\n * Given a URL expands it to the backend URL\n * Useful when you have to actually call the backend from the\n * frontend code (eg. ICS calendar download)\n * It is seamless mode aware\n * @method expandToBackendURL\n * @param {string} url URL or path of the object\n * @returns {string} New URL with the backend URL\n */\nexport function expandToBackendURL(path) {\n  const { settings } = config;\n  const APISUFIX = settings.legacyTraverse ? '' : '/++api++';\n  let adjustedPath;\n  if (path.startsWith('http://') || path.startsWith('https://')) {\n    // flattenToAppURL first if we get a full URL\n    adjustedPath = flattenToAppURL(path);\n  } else {\n    // Next adds a / in front if not a full URL to make sure it's a valid relative path\n    adjustedPath = path[0] !== '/' ? `/${path}` : path;\n  }\n\n  let apiPath = '';\n  if (settings.internalApiPath && __SERVER__) {\n    apiPath = settings.internalApiPath;\n  } else if (settings.apiPath) {\n    apiPath = settings.apiPath;\n  }\n\n  return `${apiPath}${APISUFIX}${adjustedPath}`;\n}\n\n/**\n * Check if internal url\n * @method isInternalURL\n * @param {string} url URL of the object\n * @returns {boolean} True if internal url\n */\nexport function isInternalURL(url) {\n  const { settings } = config;\n  return (\n    url &&\n    (url.indexOf(settings.publicURL) !== -1 ||\n      (settings.internalApiPath &&\n        url.indexOf(settings.internalApiPath) !== -1) ||\n      url.indexOf(settings.apiPath) !== -1 ||\n      url.charAt(0) === '/' ||\n      url.charAt(0) === '.' ||\n      url.startsWith('#'))\n  );\n}\n\n/**\n * Check if it's a valid url\n * @method isUrl\n * @param {string} url URL of the object\n * @returns {boolean} True if is a valid url\n */\nexport function isUrl(url) {\n  return urlRegex().test(url);\n}\n\n/**\n * Normalize URL, adds protocol (if required eg. user has not entered the protocol)\n * @method normalizeUrl\n * @param {string} url URL of the object\n * @returns {boolean} URL with the protocol\n */\nexport function normalizeUrl(url) {\n  return prependHttp(url);\n}\n\n/**\n * Removes protocol from URL (for display)\n * @method removeProtocol\n * @param {string} url URL of the object\n * @returns {string} URL without the protocol part\n */\nexport function removeProtocol(url) {\n  return url.replace('https://', '').replace('http://', '');\n}\n\nexport function isMail(text) {\n  return mailRegex().test(text);\n}\n\nexport function isTelephone(text) {\n  return telRegex().test(text);\n}\n\nexport function normaliseMail(email) {\n  if (email.toLowerCase().startsWith('mailto:')) {\n    return email;\n  }\n  return `mailto:${email}`;\n}\n\nexport function normalizeTelephone(tel) {\n  if (tel.toLowerCase().startsWith('tel:')) {\n    return tel;\n  }\n  return `tel:${tel}`;\n}\n\nexport function checkAndNormalizeUrl(url) {\n  let res = {\n    isMail: false,\n    isTelephone: false,\n    url: url,\n    isValid: true,\n  };\n  if (URLUtils.isMail(URLUtils.normaliseMail(url))) {\n    //Mail\n    res.isMail = true;\n    res.url = URLUtils.normaliseMail(url);\n  } else if (URLUtils.isTelephone(url)) {\n    //Phone\n    res.isTelephone = true;\n    res.url = URLUtils.normalizeTelephone(url);\n  } else {\n    //url\n    if (!res.url.startsWith('/') && !res.url.startsWith('#')) {\n      res.url = URLUtils.normalizeUrl(url);\n      if (!URLUtils.isUrl(res.url)) {\n        res.isValid = false;\n      }\n    }\n  }\n  return res;\n}\n\nexport const URLUtils = {\n  normalizeTelephone,\n  normaliseMail,\n  normalizeUrl,\n  isTelephone,\n  isMail,\n  isUrl,\n  checkAndNormalizeUrl,\n};\n"],"mappings":";;AAMA,SAASA,QAAQ,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,YAAY;AAC1D,OAAOC,WAAW,MAAM,cAAc;AACtC,OAAOC,MAAM,MAAM,uBAAuB;;AAE1C;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,UAAU,GAAG,SAASC,GAAG,IAAK;EACzC,MAAM;IAAEC;EAAS,CAAC,GAAGH,MAAM;EAC3B,IAAIE,GAAG,KAAKE,SAAS,EAAE;;EAEvB;EACA;EACA,MAAMC,2BAA2B,GAAGF,QAAQ,CAACG,gBAAgB,CAACC,GAAG,CAAEC,IAAI,IAAK;IAC1E,IAAIA,IAAI,CAACC,IAAI,EAAE;MACb,OAAOD,IAAI;IACb,CAAC,MAAM;MACL,OAAO,IAAIE,MAAM,CAACF,IAAI,GAAG,GAAG,CAAC;IAC/B;EACF,CAAC,CAAC;EAEF,IAAIG,WAAW,GAAGN,2BAA2B,CAACO,MAAM,CAClD,CAACC,GAAG,EAAEL,IAAI,KAAKK,GAAG,CAACC,OAAO,CAACN,IAAI,EAAE,EAAE,CAAC,EACpCN,GAAG,CACJ;EAEDS,WAAW,GAAGA,WAAW,IAAI,GAAG;EAChC,OAAOA,WAAW,KAAK,GAAG,GAAG,EAAE,GAAGA,WAAW;AAC/C,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMI,YAAY,GAAG,SAASb,GAAG,IAAK;EAC3C,OAAOA,GAAG,CAACc,SAAS,CAAC,CAAC,EAAEd,GAAG,CAACe,WAAW,CAAC,GAAG,CAAC,CAAC;AAC/C,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,KAAK,CAAChB,GAAG,EAAE;EACzB,OAAO,MAAKA,GAAG,CAACY,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAACK,KAAK,CAAC,GAAG,CAAC,CAAC;AAClD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,OAAO,CAAClB,GAAG,EAAE;EAC3B,MAAMmB,IAAI,GAAG,MAAKnB,GAAG,CAACY,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC,CAACK,KAAK,CAAC,GAAG,CAAC,CAAC;EACtD,IACE,CACE,KAAK,EACL,QAAQ,EACR,UAAU,EACV,MAAM,EACN,QAAQ,EACR,MAAM,EACN,SAAS,EACT,SAAS,EACT,cAAc,CACf,CAACG,OAAO,CAACD,IAAI,CAAC,KAAK,CAAC,CAAC,EACtB;IACA,OAAO,MAAM;EACf;EACA,OAAOA,IAAI,KAAK,QAAQ,GAAG,MAAM,GAAGA,IAAI;AAC1C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,eAAe,CAACrB,GAAG,EAAE;EACnC,MAAM;IAAEC;EAAS,CAAC,GAAGH,MAAM;EAC3B,OACEE,GAAG,IACHA,GAAG,CACAY,OAAO,CAACX,QAAQ,CAACqB,eAAe,EAAE,EAAE,CAAC,CACrCV,OAAO,CAACX,QAAQ,CAACsB,OAAO,EAAE,EAAE,CAAC,CAC7BX,OAAO,CAACX,QAAQ,CAACuB,SAAS,EAAE,EAAE,CAAC;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,gBAAgB,CAACzB,GAAG,EAAE;EACpC,OAAOA,GAAG,CAACY,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;AACjC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASc,WAAW,CAAC1B,GAAG,EAAE;EAC/B,MAAM;IAAEC;EAAS,CAAC,GAAGH,MAAM;EAC3B,OAAOG,QAAQ,CAACuB,SAAS,CAACG,MAAM,CAACN,eAAe,CAACrB,GAAG,CAAC,CAAC;AACxD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM4B,OAAO,GAAG,SAASC,eAAe,IAAK;EAClD,MAAM;IAAE5B;EAAS,CAAC,GAAGH,MAAM;EAC3B,MAAMgC,QAAQ,GAAGD,eAAe,CAACjB,OAAO,CAAC,OAAO,EAAE,EAAE,CAAC;EACrD;EACA;EACA;EACA;EACA,OAAOX,QAAQ,CAACG,gBAAgB,CAACM,MAAM,CACrC,CAACC,GAAG,EAAEoB,KAAK,KAAKpB,GAAG,IAAI,IAAIH,MAAM,CAACuB,KAAK,CAAC,CAACxB,IAAI,CAAE,IAAGuB,QAAS,EAAC,CAAC,EAC7D,KAAK,CACN;AACH,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,mBAAmB,CAACC,IAAI,EAAE;EACxC,MAAM;IAAEhC;EAAS,CAAC,GAAGH,MAAM;EAC3B,OAAOG,QAAQ,CAACqB,eAAe,GAC3BW,IAAI,CACDrB,OAAO,CAAC,IAAIJ,MAAM,CAACP,QAAQ,CAACqB,eAAe,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CACtDV,OAAO,CAAC,IAAIJ,MAAM,CAACP,QAAQ,CAACsB,OAAO,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,GACjDU,IAAI,CAACrB,OAAO,CAAC,IAAIJ,MAAM,CAACP,QAAQ,CAACsB,OAAO,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC;AACzD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASW,SAAS,CAAClC,GAAG,EAAE;EAC7B,MAAM;IAAEC;EAAS,CAAC,GAAGH,MAAM;EAC3B,OAAOE,GAAG,CAACoB,OAAO,CAACnB,QAAQ,CAACsB,OAAO,CAAC,KAAK,CAAC,GACtCvB,GAAG,GACF,GAAEC,QAAQ,CAACsB,OAAQ,GAAEvB,GAAI,EAAC;AACjC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASmC,kBAAkB,CAACC,IAAI,EAAE;EACvC,MAAM;IAAEnC;EAAS,CAAC,GAAGH,MAAM;EAC3B,MAAMuC,QAAQ,GAAGpC,QAAQ,CAACqC,cAAc,GAAG,EAAE,GAAG,UAAU;EAC1D,IAAIC,YAAY;EAChB,IAAIH,IAAI,CAACI,UAAU,CAAC,SAAS,CAAC,IAAIJ,IAAI,CAACI,UAAU,CAAC,UAAU,CAAC,EAAE;IAC7D;IACAD,YAAY,GAAGlB,eAAe,CAACe,IAAI,CAAC;EACtC,CAAC,MAAM;IACL;IACAG,YAAY,GAAGH,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,GAAI,IAAGA,IAAK,EAAC,GAAGA,IAAI;EACpD;EAEA,IAAIb,OAAO,GAAG,EAAE;EAChB,IAAItB,QAAQ,CAACqB,eAAe,IAAImB,UAAU,EAAE;IAC1ClB,OAAO,GAAGtB,QAAQ,CAACqB,eAAe;EACpC,CAAC,MAAM,IAAIrB,QAAQ,CAACsB,OAAO,EAAE;IAC3BA,OAAO,GAAGtB,QAAQ,CAACsB,OAAO;EAC5B;EAEA,OAAQ,GAAEA,OAAQ,GAAEc,QAAS,GAAEE,YAAa,EAAC;AAC/C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,aAAa,CAAC1C,GAAG,EAAE;EACjC,MAAM;IAAEC;EAAS,CAAC,GAAGH,MAAM;EAC3B,OACEE,GAAG,KACFA,GAAG,CAACoB,OAAO,CAACnB,QAAQ,CAACuB,SAAS,CAAC,KAAK,CAAC,CAAC,IACpCvB,QAAQ,CAACqB,eAAe,IACvBtB,GAAG,CAACoB,OAAO,CAACnB,QAAQ,CAACqB,eAAe,CAAC,KAAK,CAAC,CAAE,IAC/CtB,GAAG,CAACoB,OAAO,CAACnB,QAAQ,CAACsB,OAAO,CAAC,KAAK,CAAC,CAAC,IACpCvB,GAAG,CAAC2C,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,IACrB3C,GAAG,CAAC2C,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,IACrB3C,GAAG,CAACwC,UAAU,CAAC,GAAG,CAAC,CAAC;AAE1B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,KAAK,CAAC5C,GAAG,EAAE;EACzB,OAAON,QAAQ,EAAE,CAACa,IAAI,CAACP,GAAG,CAAC;AAC7B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAAS6C,YAAY,CAAC7C,GAAG,EAAE;EAChC,OAAOH,WAAW,CAACG,GAAG,CAAC;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAAS8C,cAAc,CAAC9C,GAAG,EAAE;EAClC,OAAOA,GAAG,CAACY,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC;AAC3D;AAEA,OAAO,SAASmC,MAAM,CAACC,IAAI,EAAE;EAC3B,OAAOpD,SAAS,EAAE,CAACW,IAAI,CAACyC,IAAI,CAAC;AAC/B;AAEA,OAAO,SAASC,WAAW,CAACD,IAAI,EAAE;EAChC,OAAOrD,QAAQ,EAAE,CAACY,IAAI,CAACyC,IAAI,CAAC;AAC9B;AAEA,OAAO,SAASE,aAAa,CAACC,KAAK,EAAE;EACnC,IAAIA,KAAK,CAACC,WAAW,EAAE,CAACZ,UAAU,CAAC,SAAS,CAAC,EAAE;IAC7C,OAAOW,KAAK;EACd;EACA,OAAQ,UAASA,KAAM,EAAC;AAC1B;AAEA,OAAO,SAASE,kBAAkB,CAACC,GAAG,EAAE;EACtC,IAAIA,GAAG,CAACF,WAAW,EAAE,CAACZ,UAAU,CAAC,MAAM,CAAC,EAAE;IACxC,OAAOc,GAAG;EACZ;EACA,OAAQ,OAAMA,GAAI,EAAC;AACrB;AAEA,OAAO,SAASC,oBAAoB,CAACvD,GAAG,EAAE;EACxC,IAAIwD,GAAG,GAAG;IACRT,MAAM,EAAE,KAAK;IACbE,WAAW,EAAE,KAAK;IAClBjD,GAAG,EAAEA,GAAG;IACRyD,OAAO,EAAE;EACX,CAAC;EACD,IAAIC,QAAQ,CAACX,MAAM,CAACW,QAAQ,CAACR,aAAa,CAAClD,GAAG,CAAC,CAAC,EAAE;IAChD;IACAwD,GAAG,CAACT,MAAM,GAAG,IAAI;IACjBS,GAAG,CAACxD,GAAG,GAAG0D,QAAQ,CAACR,aAAa,CAAClD,GAAG,CAAC;EACvC,CAAC,MAAM,IAAI0D,QAAQ,CAACT,WAAW,CAACjD,GAAG,CAAC,EAAE;IACpC;IACAwD,GAAG,CAACP,WAAW,GAAG,IAAI;IACtBO,GAAG,CAACxD,GAAG,GAAG0D,QAAQ,CAACL,kBAAkB,CAACrD,GAAG,CAAC;EAC5C,CAAC,MAAM;IACL;IACA,IAAI,CAACwD,GAAG,CAACxD,GAAG,CAACwC,UAAU,CAAC,GAAG,CAAC,IAAI,CAACgB,GAAG,CAACxD,GAAG,CAACwC,UAAU,CAAC,GAAG,CAAC,EAAE;MACxDgB,GAAG,CAACxD,GAAG,GAAG0D,QAAQ,CAACb,YAAY,CAAC7C,GAAG,CAAC;MACpC,IAAI,CAAC0D,QAAQ,CAACd,KAAK,CAACY,GAAG,CAACxD,GAAG,CAAC,EAAE;QAC5BwD,GAAG,CAACC,OAAO,GAAG,KAAK;MACrB;IACF;EACF;EACA,OAAOD,GAAG;AACZ;AAEA,OAAO,MAAME,QAAQ,GAAG;EACtBL,kBAAkB;EAClBH,aAAa;EACbL,YAAY;EACZI,WAAW;EACXF,MAAM;EACNH,KAAK;EACLW;AACF,CAAC"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}