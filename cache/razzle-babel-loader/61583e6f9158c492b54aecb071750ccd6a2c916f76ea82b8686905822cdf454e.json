{"ast":null,"code":"import _extends from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/extends.js\";\nimport _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-block-style/src/BlockStyleWrapper/BlockStyleWrapperEdit.jsx\",\n  _this = this,\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { StyleWrapperEdit, StyleWrapperView } from '../StyleWrapper';\nimport { Portal } from 'react-portal';\nimport themeSVG from '@plone/volto/icons/theme.svg';\nimport { Icon } from '@plone/volto/components';\nimport config from '@plone/volto/registry';\n\n// For blocks, store the style data in data.styles, then\n// adapt the data.styles.[align,size,...] info to default data.align, data.size, etc.\n\nvar BlockStyleWrapperEdit = function BlockStyleWrapperEdit(props) {\n  _s();\n  var selected = props.selected,\n    block = props.block,\n    _props$data = props.data,\n    data = _props$data === void 0 ? {} : _props$data,\n    onChangeBlock = props.onChangeBlock,\n    manage = props.manage;\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    isVisible = _React$useState2[0],\n    setIsVisible = _React$useState2[1];\n  var visible = selected && (config.settings.layoutOnlyBlockStyles ? manage : true);\n  var tabsNode = __CLIENT__ && document.querySelector('#sidebar > .sidebar-container > .tabs-wrapper > .formtabs');\n  var triggerButton = __jsx(Portal, {\n    node: tabsNode,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"open-styles-button\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }, __jsx(\"button\", {\n    onClick: function onClick(e) {\n      e.nativeEvent.stopImmediatePropagation();\n      setIsVisible(true);\n    },\n    title: \"\".concat(props.type ? 'Style palette for ' + props.type : 'Style pallete'),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }, __jsx(Icon, {\n    name: themeSVG,\n    size: \"18px\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 11\n    }\n  }))));\n  return __jsx(React.Fragment, null, visible ? triggerButton : '', __jsx(StyleWrapperEdit, _extends({}, props, {\n    isVisible: isVisible,\n    setIsVisible: setIsVisible,\n    data: _objectSpread(_objectSpread(_objectSpread({}, data === null || data === void 0 ? void 0 : data.styles), data.align ? {\n      align: data.align\n    } : {}), data.size ? {\n      size: data.size\n    } : {}),\n    blockData: data,\n    choices: [],\n    onChangeValue: function onChangeValue(id, value) {\n      return onChangeBlock(block, _objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, data), id === 'align' ? {\n        align: value\n      } : {}), id === 'size' ? {\n        size: value\n      } : {}), id === 'customId' ? {\n        id: value\n      } : {}), {}, {\n        styles: _objectSpread(_objectSpread({}, data === null || data === void 0 ? void 0 : data.styles), {}, _defineProperty({}, id, value))\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  })), __jsx(StyleWrapperView, _extends({\n    mode: \"edit\"\n  }, props, {\n    styleData: data.styles || {},\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  })));\n};\n_s(BlockStyleWrapperEdit, \"QjDZesRvLCmcrZLxgN677nXnVLA=\");\n_c = BlockStyleWrapperEdit;\nexport default BlockStyleWrapperEdit;\nvar _c;\n$RefreshReg$(_c, \"BlockStyleWrapperEdit\");","map":{"version":3,"names":["React","StyleWrapperEdit","StyleWrapperView","Portal","themeSVG","Icon","config","BlockStyleWrapperEdit","props","selected","block","data","onChangeBlock","manage","useState","isVisible","setIsVisible","visible","settings","layoutOnlyBlockStyles","tabsNode","__CLIENT__","document","querySelector","triggerButton","e","nativeEvent","stopImmediatePropagation","type","styles","align","size","id","value"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-block-style/src/BlockStyleWrapper/BlockStyleWrapperEdit.jsx"],"sourcesContent":["import React from 'react';\nimport { StyleWrapperEdit, StyleWrapperView } from '../StyleWrapper';\nimport { Portal } from 'react-portal';\nimport themeSVG from '@plone/volto/icons/theme.svg';\nimport { Icon } from '@plone/volto/components';\nimport config from '@plone/volto/registry';\n\n// For blocks, store the style data in data.styles, then\n// adapt the data.styles.[align,size,...] info to default data.align, data.size, etc.\n\nconst BlockStyleWrapperEdit = (props) => {\n  const { selected, block, data = {}, onChangeBlock, manage } = props;\n  const [isVisible, setIsVisible] = React.useState(false);\n  const visible =\n    selected && (config.settings.layoutOnlyBlockStyles ? manage : true);\n\n  const tabsNode =\n    __CLIENT__ &&\n    document.querySelector(\n      '#sidebar > .sidebar-container > .tabs-wrapper > .formtabs',\n    );\n\n  const triggerButton = (\n    <Portal node={tabsNode}>\n      <div className=\"open-styles-button\">\n        <button\n          onClick={(e) => {\n            e.nativeEvent.stopImmediatePropagation();\n            setIsVisible(true);\n          }}\n          title={`${\n            props.type ? 'Style palette for ' + props.type : 'Style pallete'\n          }`}\n        >\n          <Icon name={themeSVG} size=\"18px\" />\n        </button>\n      </div>\n    </Portal>\n  );\n\n  return (\n    <>\n      {visible ? triggerButton : ''}\n      <StyleWrapperEdit\n        {...props}\n        isVisible={isVisible}\n        setIsVisible={setIsVisible}\n        data={{\n          ...data?.styles,\n          ...(data.align ? { align: data.align } : {}),\n          ...(data.size ? { size: data.size } : {}),\n        }}\n        blockData={data}\n        choices={[]}\n        onChangeValue={(id, value) =>\n          onChangeBlock(block, {\n            ...data,\n            ...(id === 'align' ? { align: value } : {}),\n            ...(id === 'size' ? { size: value } : {}),\n            ...(id === 'customId' ? { id: value } : {}),\n            styles: {\n              ...data?.styles,\n              [id]: value,\n            },\n          })\n        }\n      ></StyleWrapperEdit>\n      <StyleWrapperView mode=\"edit\" {...props} styleData={data.styles || {}} />\n    </>\n  );\n};\n\nexport default BlockStyleWrapperEdit;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}