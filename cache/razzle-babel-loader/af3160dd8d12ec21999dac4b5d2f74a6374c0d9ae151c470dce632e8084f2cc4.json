{"ast":null,"code":"import _toConsumableArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _extends from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/extends.js\";\nimport _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _omit from \"lodash/omit\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/volto-slate/src/components/ElementEditor/makeInlineElementPlugin.js\",\n  _this = this;\nvar __jsx = React.createElement;\nimport React from 'react';\nimport SidebarEditor from './SidebarEditor';\nimport makeContextButtons from './ContextButtons';\nimport PluginEditor from './PluginEditor';\nimport { _insertElement, _unwrapElement, _isActiveElement, _getActiveElement } from './utils';\nimport messages from './messages';\nimport ToolbarButton from './ToolbarButton';\nimport tagSVG from '@plone/volto/icons/tag.svg';\nimport SchemaProvider from './SchemaProvider';\nexport var makeInlineElementPlugin = function makeInlineElementPlugin(options) {\n  var elementType = options.elementType,\n    isInlineElement = options.isInlineElement,\n    pluginId = options.pluginId,\n    _options$title = options.title,\n    title = _options$title === void 0 ? 'Element' : _options$title;\n  var omittedProps = ['pluginEditor', 'getActiveElement', 'unwrapElement', 'schemaProvider', 'hasValue', 'elementType', 'isInlineElement', 'editSchema', 'element', 'persistentHelper'];\n  var pluginOptions = _objectSpread({\n    pluginEditor: PluginEditor,\n    insertElement: _insertElement(elementType),\n    getActiveElement: _getActiveElement(elementType),\n    isActiveElement: _isActiveElement(elementType),\n    unwrapElement: _unwrapElement(elementType),\n    messages: messages,\n    toolbarButtonIcon: tagSVG,\n    title: title,\n    extensions: [],\n    // a component that should provide a schema as a render prop\n    schemaProvider: SchemaProvider,\n    // schema that can be used to create the edit form for this component\n    // editSchema,\n\n    // A generic \"validation\" method, just finds that a \"positive\" value\n    // exists.  Plugin authors should overwrite it in options\n    // If it returns true, the value is saved in the editor, othwerwise the\n    // element type is removed from the editor\n    hasValue: function hasValue(data) {\n      return Object.values(data).findIndex(function (v) {\n        return !!v;\n      }) > -1;\n    }\n  }, options);\n  var PersistentHelper = function PersistentHelper(props) {\n    return __jsx(SidebarEditor, _extends({}, props, pluginOptions, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 5\n      }\n    }));\n  };\n  PersistentHelper.id = pluginId;\n  var ElementContextButtons = makeContextButtons(pluginOptions);\n  ElementContextButtons.id = pluginId;\n  var install = function install(config) {\n    var slate = config.settings.slate;\n    if (isInlineElement) {\n      slate.inlineElements[elementType] = true;\n    }\n    slate.buttons[pluginId] = function (props) {\n      return __jsx(ToolbarButton, _extends({}, props, {\n        title: title\n      }, _omit(pluginOptions, omittedProps), {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 7\n        }\n      }));\n    };\n    slate.contextToolbarButtons.push(ElementContextButtons);\n    slate.persistentHelpers.push(options.persistentHelper ? options.persistentHelper(pluginOptions) : PersistentHelper);\n    slate.extensions = [].concat(_toConsumableArray(slate.extensions || []), _toConsumableArray(pluginOptions.extensions));\n    slate.elements[elementType] = options.element;\n    slate.nodeTypesToHighlight.push(elementType);\n\n    // The plugin authors should manually add the button to the relevant toolbars\n    // slate.toolbarButtons = [...(slate.toolbarButtons || []), pluginId];\n    // slate.expandedToolbarButtons = [...(slate.expandedToolbarButtons || []), pluginId];\n\n    return config;\n  };\n  return [install, ElementContextButtons, PersistentHelper, pluginOptions];\n};","map":{"version":3,"names":["React","SidebarEditor","makeContextButtons","PluginEditor","_insertElement","_unwrapElement","_isActiveElement","_getActiveElement","messages","ToolbarButton","tagSVG","SchemaProvider","makeInlineElementPlugin","options","elementType","isInlineElement","pluginId","title","omittedProps","pluginOptions","pluginEditor","insertElement","getActiveElement","isActiveElement","unwrapElement","toolbarButtonIcon","extensions","schemaProvider","hasValue","data","Object","values","findIndex","v","PersistentHelper","props","id","ElementContextButtons","install","config","slate","settings","inlineElements","buttons","contextToolbarButtons","push","persistentHelpers","persistentHelper","elements","element","nodeTypesToHighlight"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/volto-slate/src/components/ElementEditor/makeInlineElementPlugin.js"],"sourcesContent":["import React from 'react';\nimport SidebarEditor from './SidebarEditor';\nimport makeContextButtons from './ContextButtons';\nimport PluginEditor from './PluginEditor';\nimport {\n  _insertElement,\n  _unwrapElement,\n  _isActiveElement,\n  _getActiveElement,\n} from './utils';\nimport messages from './messages';\nimport ToolbarButton from './ToolbarButton';\nimport tagSVG from '@plone/volto/icons/tag.svg';\nimport SchemaProvider from './SchemaProvider';\nimport { omit } from 'lodash';\n\nexport const makeInlineElementPlugin = (options) => {\n  const { elementType, isInlineElement, pluginId, title = 'Element' } = options;\n  const omittedProps = [\n    'pluginEditor',\n    'getActiveElement',\n    'unwrapElement',\n    'schemaProvider',\n    'hasValue',\n    'elementType',\n    'isInlineElement',\n    'editSchema',\n    'element',\n    'persistentHelper',\n  ];\n\n  const pluginOptions = {\n    pluginEditor: PluginEditor,\n    insertElement: _insertElement(elementType),\n    getActiveElement: _getActiveElement(elementType),\n    isActiveElement: _isActiveElement(elementType),\n    unwrapElement: _unwrapElement(elementType),\n    messages,\n    toolbarButtonIcon: tagSVG,\n    title,\n    extensions: [],\n\n    // a component that should provide a schema as a render prop\n    schemaProvider: SchemaProvider,\n    // schema that can be used to create the edit form for this component\n    // editSchema,\n\n    // A generic \"validation\" method, just finds that a \"positive\" value\n    // exists.  Plugin authors should overwrite it in options\n    // If it returns true, the value is saved in the editor, othwerwise the\n    // element type is removed from the editor\n    hasValue: (data) => Object.values(data).findIndex((v) => !!v) > -1,\n\n    ...options,\n  };\n\n  const PersistentHelper = (props) => (\n    <SidebarEditor {...props} {...pluginOptions} />\n  );\n  PersistentHelper.id = pluginId;\n\n  const ElementContextButtons = makeContextButtons(pluginOptions);\n  ElementContextButtons.id = pluginId;\n\n  const install = (config) => {\n    const { slate } = config.settings;\n    if (isInlineElement) {\n      slate.inlineElements[elementType] = true;\n    }\n\n    slate.buttons[pluginId] = (props) => (\n      <ToolbarButton\n        {...props}\n        title={title}\n        {...omit(pluginOptions, omittedProps)}\n      />\n    );\n    slate.contextToolbarButtons.push(ElementContextButtons);\n    slate.persistentHelpers.push(\n      options.persistentHelper\n        ? options.persistentHelper(pluginOptions)\n        : PersistentHelper,\n    );\n    slate.extensions = [\n      ...(slate.extensions || []),\n      ...pluginOptions.extensions,\n    ];\n    slate.elements[elementType] = options.element;\n    slate.nodeTypesToHighlight.push(elementType);\n\n    // The plugin authors should manually add the button to the relevant toolbars\n    // slate.toolbarButtons = [...(slate.toolbarButtons || []), pluginId];\n    // slate.expandedToolbarButtons = [...(slate.expandedToolbarButtons || []), pluginId];\n\n    return config;\n  };\n\n  return [install, ElementContextButtons, PersistentHelper, pluginOptions];\n};\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}