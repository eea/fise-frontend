{"ast":null,"code":"import _map from \"lodash/map\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Controlpanels/UndoControlpanel.jsx\";\nvar __jsx = React.createElement;\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n/**\n * Users controlpanel container.\n * @module components/manage/Controlpanels/UndoControlpanel\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { Portal } from 'react-portal';\nimport { Container, Segment, Table, Menu, Input } from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport { Icon, Toolbar, Form, Toast } from '@plone/volto/components';\nimport backSVG from '@plone/volto/icons/back.svg';\nimport { Helmet } from '@plone/volto/helpers';\nimport nextIcon from '@plone/volto/icons/right-key.svg';\nimport prevIcon from '@plone/volto/icons/left-key.svg';\nimport undoSVG from '@plone/volto/icons/undo.svg';\nimport { getTransactions, revertTransactions } from '@plone/volto/actions';\nimport { toast } from 'react-toastify';\nconst messages = defineMessages({\n  success: {\n    \"id\": \"Success\",\n    \"defaultMessage\": \"Success\"\n  },\n  error: {\n    \"id\": \"Error\",\n    \"defaultMessage\": \"Error\"\n  },\n  undo: {\n    \"id\": \"Undo\",\n    \"defaultMessage\": \"Undo\"\n  },\n  back: {\n    \"id\": \"Back\",\n    \"defaultMessage\": \"Back\"\n  },\n  default: {\n    \"id\": \"Default\",\n    \"defaultMessage\": \"Default\"\n  },\n  sortBy: {\n    \"id\": \"Sort By\",\n    \"defaultMessage\": \"Sort by\"\n  },\n  sorted: {\n    \"id\": \"Sorted\",\n    \"defaultMessage\": \"Sorted\"\n  },\n  unsorted: {\n    \"id\": \"Unsorted\",\n    \"defaultMessage\": \"Unsorted\"\n  },\n  sortByDescription: {\n    \"id\": \"Sort transactions by User-Name, Path or Date\",\n    \"defaultMessage\": \"Sort transactions by User-Name, Path or Date\"\n  },\n  failedToUndoTransactions: {\n    \"id\": \"Failed To Undo Transactions\",\n    \"defaultMessage\": \"Failed to undo transactions\"\n  },\n  successfullyUndoneTransactions: {\n    \"id\": \"Successfully Undone Transactions\",\n    \"defaultMessage\": \"Successfully undone transactions\"\n  },\n  transactionsHaveBeenSorted: {\n    \"id\": \"Transactions Have Been Sorted\",\n    \"defaultMessage\": \"Transactions have been sorted\"\n  },\n  transactionsHaveBeenUnsorted: {\n    \"id\": \"Transactions Have Been Unsorted\",\n    \"defaultMessage\": \"Transactions have been unsorted\"\n  },\n  noTransactionsSelected: {\n    \"id\": \"No Transactions Selected\",\n    \"defaultMessage\": \"No transactions selected\"\n  },\n  noTransactionsSelectedToDoUndo: {\n    \"id\": \"No Transactions Selected To Do Undo\",\n    \"defaultMessage\": \"No transactions selected to do undo\"\n  }\n});\n\n/**\n * UndoControlpanel class.\n * @class UndoControlpanel\n * @extends Component\n */\nclass UndoControlpanel extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs UndoControlpanel\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      isClient: false,\n      sortType: 'no value',\n      lowerIndex: 0,\n      upperIndex: 20,\n      defaultTransactionsLenInTable: 20,\n      isSortingTypeSelected: false,\n      sortedTransactions: [],\n      isEmptyInputForSorting: false,\n      isTransactionsNotFound: false,\n      isClickedOnUndoButton: false,\n      showPrevButton: false,\n      showNextButton: false\n    };\n    this.onCancel = this.onCancel.bind(this);\n    this.onSort = this.onSort.bind(this);\n    this.onSelect = this.onSelect.bind(this);\n    this.onPrev = this.onPrev.bind(this);\n    this.onNext = this.onNext.bind(this);\n    this.onUndo = this.onUndo.bind(this);\n    this.handleTableVisiblity = this.handleTableVisiblity.bind(this);\n    this.handleNotSortedNextPrevButtons = this.handleNotSortedNextPrevButtons.bind(this);\n    this.handleSortedNextPrevButtons = this.handleSortedNextPrevButtons.bind(this);\n    this.checkTransactionsUndoneStatus = this.checkTransactionsUndoneStatus.bind(this);\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.setState({\n      isClient: true\n    });\n    this.props.getTransactions();\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.revertRequest.loading && nextProps.revertRequest.loaded) {\n      this.props.getTransactions();\n    }\n  }\n  setSortedTransactions(sortedTransactions) {\n    if (sortedTransactions.length > 0) {\n      this.setState({\n        lowerIndex: 0,\n        upperIndex: this.state.defaultTransactionsLenInTable,\n        sortedTransactions: sortedTransactions,\n        isEmptyInputForSorting: false,\n        isTransactionsNotFound: false\n      });\n    } else {\n      this.setState({\n        isTransactionsNotFound: true\n      });\n    }\n  }\n\n  /**\n   * On Cancel\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    if (this.state.sortedTransactions.length > 0) {\n      toast.info(__jsx(Toast, {\n        info: true,\n        title: this.props.intl.formatMessage(messages.unsorted),\n        content: this.props.intl.formatMessage(messages.transactionsHaveBeenUnsorted),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 9\n        }\n      }));\n    }\n    this.setState({\n      isSortingTypeSelected: false,\n      isTransactionsNotFound: false,\n      isEmptyInputForSorting: false,\n      sortType: 'no value',\n      sortedTransactions: [],\n      lowerIndex: 0,\n      upperIndex: this.state.defaultTransactionsLenInTable\n    });\n  }\n\n  /**\n   * On Select\n   * @method onSelect\n   * @param {object} data\n   * @returns {undefined}\n   */\n  onSelect(data) {\n    if (data !== null && data.sortingTypes !== null && this.state.sortType.toLowerCase() === data.sortingTypes.toLowerCase()) {\n      return;\n    }\n    let sortType = data !== null && data.sortingTypes || 'no value';\n    if (sortType.toLowerCase() !== 'no value') {\n      this.setState({\n        isSortingTypeSelected: true\n      });\n      sortType.toLowerCase() === 'user name' && this.setState({\n        sortType: 'user name'\n      });\n      sortType.toLowerCase() === 'date' && this.setState({\n        sortType: 'date'\n      });\n      sortType.toLowerCase() === 'path' && this.setState({\n        sortType: 'path'\n      });\n    } else {\n      this.onCancel();\n    }\n  }\n\n  /**\n   * On Sort\n   * @method onSort\n   * @param {object} data\n   * @returns {undefined}\n   */\n  onSort(data) {\n    let sortType = data.sortingTypes || 'no value';\n    let value;\n    sortType.toLowerCase() === 'user name' && (value = data.sortByUsername) || sortType.toLowerCase() === 'path' && (value = data.sortByPath) || sortType.toLowerCase() === 'date' && (value = data.sortByDate) || (value = undefined);\n    if (sortType.toLowerCase() !== 'no value' && value !== undefined) {\n      let sortedTransactions = [];\n      if (sortType.toLowerCase() === 'user name') {\n        this.props.transactions.forEach(element => {\n          if (value.trim().toLowerCase() === 'zope' && !element.username) {\n            sortedTransactions.push(element);\n          } else if (element.username.trim().toLowerCase().includes(value.trim().toLowerCase())) {\n            sortedTransactions.push(element);\n          }\n        });\n        this.setSortedTransactions(sortedTransactions);\n      } else if (sortType.toLowerCase() === 'path') {\n        this.props.transactions.forEach(element => {\n          if (element.id.trim().toLowerCase().includes(value.trim().toLowerCase())) {\n            sortedTransactions.push(element);\n          }\n        });\n        this.setSortedTransactions(sortedTransactions);\n      } else {\n        // MS is Milli Seconds\n        let MSInADay = 86400000;\n        let sortingTimeInMS = Date.parse(value);\n        let endTimeOfSortingDateInMS = sortingTimeInMS - sortingTimeInMS % MSInADay + MSInADay - 1;\n        let startTimeOfSortingDateInMS = sortingTimeInMS - sortingTimeInMS % MSInADay;\n        this.props.transactions.forEach(element => {\n          if (endTimeOfSortingDateInMS >= Date.parse(element.time) && Date.parse(element.time) >= startTimeOfSortingDateInMS) {\n            sortedTransactions.push(element);\n          }\n        });\n        this.setSortedTransactions(sortedTransactions);\n      }\n      toast.info(__jsx(Toast, {\n        info: true,\n        title: this.props.intl.formatMessage(messages.sorted),\n        content: this.props.intl.formatMessage(messages.transactionsHaveBeenSorted),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 9\n        }\n      }));\n    } else {\n      this.setState({\n        isEmptyInputForSorting: true\n      });\n    }\n  }\n\n  /**\n   * On Undo\n   * @method onUndo\n   * @returns {undefined}\n   */\n  onUndo() {\n    let transactionsSelected = false;\n    let undoTransactionsIds = _map(this.props.transactions.slice(0, this.props.transactions.length), transaction => {\n      if (document.getElementById(transaction.id) !== null && document.getElementById(transaction.id).firstElementChild.firstElementChild.firstElementChild.checked) {\n        transactionsSelected = true;\n        return transaction.id;\n      }\n      return '';\n    });\n    if (transactionsSelected) {\n      this.setState({\n        isClickedOnUndoButton: true\n      });\n      this.props.revertTransactions(undoTransactionsIds);\n    } else {\n      toast.error(__jsx(Toast, {\n        error: true,\n        title: this.props.intl.formatMessage(messages.noTransactionsSelected),\n        content: this.props.intl.formatMessage(messages.noTransactionsSelectedToDoUndo),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 9\n        }\n      }));\n    }\n    Array.from(document.getElementsByClassName('transactions-checkboxes')).forEach(element => {\n      element.firstElementChild.checked = false;\n    });\n  }\n\n  /**\n   * On Prev\n   * @method onPrev\n   * @returns {undefined}\n   */\n  onPrev() {\n    0 < this.state.lowerIndex && this.setState({\n      upperIndex: this.state.lowerIndex,\n      lowerIndex: this.state.lowerIndex - this.state.defaultTransactionsLenInTable\n    });\n  }\n\n  /**\n   * On Next\n   * @method onNext\n   * @returns {undefined}\n   */\n  onNext() {\n    this.props.transactions.length > this.state.upperIndex && this.setState({\n      lowerIndex: this.state.upperIndex,\n      upperIndex: this.state.upperIndex + this.state.defaultTransactionsLenInTable\n    });\n  }\n\n  /**\n   * Handle next and prev buttons visiblity when transactions are sorted\n   * @method handleSortedNextPrevButtons\n   * @returns {undefined}\n   */\n  handleSortedNextPrevButtons() {\n    this.state.upperIndex >= this.state.sortedTransactions.length && this.state.showNextButton && this.setState({\n      showNextButton: false\n    });\n    this.state.upperIndex < this.state.sortedTransactions.length && !this.state.showNextButton && this.setState({\n      showNextButton: true\n    });\n    this.state.lowerIndex <= 0 && this.state.showPrevButton && this.setState({\n      showPrevButton: false\n    });\n    this.state.lowerIndex > 0 && !this.state.showPrevButton && this.setState({\n      showPrevButton: true\n    });\n  }\n\n  /**\n   * Handle next and prev buttons visiblity when transactions are not sorted\n   * @method handleNotSortedNextPrevButtons\n   * @returns {undefined}\n   */\n  handleNotSortedNextPrevButtons() {\n    var _this$props$transacti, _this$props$transacti2;\n    this.state.upperIndex >= ((_this$props$transacti = this.props.transactions) === null || _this$props$transacti === void 0 ? void 0 : _this$props$transacti.length) && this.state.showNextButton && this.setState({\n      showNextButton: false\n    });\n    this.state.upperIndex < ((_this$props$transacti2 = this.props.transactions) === null || _this$props$transacti2 === void 0 ? void 0 : _this$props$transacti2.length) && !this.state.showNextButton && this.setState({\n      showNextButton: true\n    });\n    this.state.lowerIndex <= 0 && this.state.showPrevButton && this.setState({\n      showPrevButton: false\n    });\n    this.state.lowerIndex > 0 && !this.state.showPrevButton && this.setState({\n      showPrevButton: true\n    });\n  }\n\n  /**\n   * Handle next, prev buttons and table visiblity\n   * @method handleTableVisiblity\n   * @returns {undefined}\n   */\n  handleTableVisiblity() {\n    if (this.state.sortedTransactions.length > 0) {\n      this.handleSortedNextPrevButtons();\n    } else if (!this.state.isSortingTypeSelected) {\n      var _this$props$transacti3, _this$props$transacti4;\n      ((_this$props$transacti3 = this.props.transactions) === null || _this$props$transacti3 === void 0 ? void 0 : _this$props$transacti3.length) > 0 && this.state.isTransactionsNotFound && this.setState({\n        isTransactionsNotFound: false\n      });\n      ((_this$props$transacti4 = this.props.transactions) === null || _this$props$transacti4 === void 0 ? void 0 : _this$props$transacti4.length) <= 0 && !this.state.isTransactionsNotFound && this.setState({\n        isTransactionsNotFound: true\n      });\n      this.handleNotSortedNextPrevButtons();\n    } else {\n      this.handleNotSortedNextPrevButtons();\n    }\n  }\n\n  /**\n   * Check transactions undone status\n   * @method checkTransactionsUndoneStatus\n   * @returns {undefined}\n   */\n  checkTransactionsUndoneStatus() {\n    if (this.props.revertRequest.error && this.props.revertRequest.error !== null && this.state.isClickedOnUndoButton) {\n      this.setState({\n        isClickedOnUndoButton: false\n      });\n      toast.error(__jsx(Toast, {\n        error: true,\n        title: this.props.intl.formatMessage(messages.error),\n        content: this.props.intl.formatMessage(messages.failedToUndoTransactions),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 9\n        }\n      }));\n    } else if (this.props.revertRequest.error === null && this.state.isClickedOnUndoButton) {\n      this.setState({\n        isClickedOnUndoButton: false\n      });\n      toast.success(__jsx(Toast, {\n        success: true,\n        title: this.props.intl.formatMessage(messages.success),\n        content: this.props.intl.formatMessage(messages.successfullyUndoneTransactions),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 493,\n          columnNumber: 9\n        }\n      }));\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    var _this$props$transacti5, _this$props$transacti6;\n    const transactionsRange = this.state.sortedTransactions.length > 0 && this.state.sortedTransactions.slice(this.state.lowerIndex, this.state.upperIndex) || ((_this$props$transacti5 = this.props.transactions) === null || _this$props$transacti5 === void 0 ? void 0 : _this$props$transacti5.slice(this.state.lowerIndex, this.state.upperIndex));\n    this.handleTableVisiblity();\n    this.checkTransactionsUndoneStatus();\n    return __jsx(Container, {\n      id: \"page-undo\",\n      className: \"controlpanel-undo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 7\n      }\n    }, __jsx(Helmet, {\n      title: \"Undo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 9\n      }\n    }), __jsx(Segment.Group, {\n      raised: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 9\n      }\n    }, __jsx(Segment, {\n      className: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 11\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Undo Controlpanel\",\n      defaultMessage: \"Undo Controlpanel\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 13\n      }\n    })), __jsx(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 533,\n        columnNumber: 11\n      }\n    }, ((_this$props$transacti6 = this.props.transactions) === null || _this$props$transacti6 === void 0 ? void 0 : _this$props$transacti6.length) > 0 && __jsx(Form, {\n      schema: {\n        fieldsets: [{\n          id: 'default',\n          title: this.props.intl.formatMessage(messages.default),\n          fields: this.state.isSortingTypeSelected ? ['sortingTypes', this.state.sortType.toLowerCase() === 'user name' && 'sortByUsername' || this.state.sortType.toLowerCase() === 'path' && 'sortByPath' || this.state.sortType.toLowerCase() === 'date' && 'sortByDate'] : ['sortingTypes']\n        }],\n        properties: {\n          sortingTypes: {\n            title: this.props.intl.formatMessage(messages.sortBy),\n            description: this.props.intl.formatMessage(messages.sortByDescription),\n            type: 'string',\n            choices: _map(['User Name', 'Path', 'Date'], type => [type, type])\n          },\n          sortByUsername: {\n            title: `Enter Username`,\n            type: 'string'\n          },\n          sortByPath: {\n            title: `Enter Path`,\n            type: 'string'\n          },\n          sortByDate: {\n            title: `Enter Date and Time`,\n            type: 'date'\n          }\n        },\n        required: []\n      },\n      error: this.state.isEmptyInputForSorting ? {\n        message: 'Please enter any input to perform sorting'\n      } : undefined,\n      onChangeFormData: this.onSelect,\n      onSubmit: this.state.isSortingTypeSelected ? this.onSort : undefined,\n      onCancel: this.state.isSortingTypeSelected ? this.onCancel : undefined,\n      resetOnCancel: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 15\n      }\n    })), __jsx(Segment.Group, {\n      raised: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 598,\n        columnNumber: 11\n      }\n    }, __jsx(Segment, {\n      className: \"primary\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 599,\n        columnNumber: 13\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Transactions\",\n      defaultMessage: \"Transactions\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 600,\n        columnNumber: 15\n      }\n    })), this.state.isTransactionsNotFound ? __jsx(Segment, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 606,\n        columnNumber: 15\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"No Transactions Found\",\n      defaultMessage: \"No transactions found\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 607,\n        columnNumber: 17\n      }\n    })) : __jsx(Table, {\n      selectable: true,\n      fixed: true,\n      celled: true,\n      compact: true,\n      singleLine: true,\n      attached: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 613,\n        columnNumber: 15\n      }\n    }, __jsx(Table.Header, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 614,\n        columnNumber: 17\n      }\n    }, __jsx(Table.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 615,\n        columnNumber: 19\n      }\n    }, __jsx(Table.HeaderCell, {\n      width: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 616,\n        columnNumber: 21\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Transactions Checkbox\",\n      defaultMessage: \"#\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 617,\n        columnNumber: 23\n      }\n    })), __jsx(Table.HeaderCell, {\n      width: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 21\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"What\",\n      defaultMessage: \"What\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 623,\n        columnNumber: 23\n      }\n    })), __jsx(Table.HeaderCell, {\n      width: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 625,\n        columnNumber: 21\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Who\",\n      defaultMessage: \"Who\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 626,\n        columnNumber: 23\n      }\n    })), __jsx(Table.HeaderCell, {\n      width: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 628,\n        columnNumber: 21\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"When\",\n      defaultMessage: \"When\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 629,\n        columnNumber: 23\n      }\n    })), __jsx(Table.HeaderCell, {\n      width: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 631,\n        columnNumber: 21\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Note\",\n      defaultMessage: \"Note\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 632,\n        columnNumber: 23\n      }\n    })), __jsx(Table.HeaderCell, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 634,\n        columnNumber: 21\n      }\n    }))), __jsx(Table.Body, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 637,\n        columnNumber: 17\n      }\n    }, _map(transactionsRange, transaction => __jsx(Table.Row, {\n      id: transaction.id,\n      key: transaction.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 639,\n        columnNumber: 21\n      }\n    }, __jsx(Table.Cell, {\n      width: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 640,\n        columnNumber: 23\n      }\n    }, __jsx(Input, {\n      type: \"checkbox\",\n      className: \"transactions-checkboxes\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 641,\n        columnNumber: 25\n      }\n    })), __jsx(Table.Cell, {\n      width: 3,\n      title: [transaction.description].join(' '),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 646,\n        columnNumber: 23\n      }\n    }, transaction.description), __jsx(Table.Cell, {\n      width: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 652,\n        columnNumber: 23\n      }\n    }, transaction.username ? transaction.username : 'Zope'), __jsx(Table.Cell, {\n      width: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 655,\n        columnNumber: 23\n      }\n    }, transaction.time), __jsx(Table.Cell, {\n      width: 3,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 656,\n        columnNumber: 23\n      }\n    }, transaction.description.includes('Undo') ? 'Undone' : '')))), __jsx(Table.Footer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 664,\n        columnNumber: 17\n      }\n    }, __jsx(Table.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 665,\n        columnNumber: 19\n      }\n    }, __jsx(Table.HeaderCell, {\n      textAlign: \"center\",\n      colSpan: \"6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 666,\n        columnNumber: 21\n      }\n    }, __jsx(Menu, {\n      pagination: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 667,\n        columnNumber: 23\n      }\n    }, __jsx(Menu.Item, {\n      as: \"a\",\n      id: \"prev-button\",\n      icon: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 668,\n        columnNumber: 25\n      }\n    }, this.state.showPrevButton ? __jsx(Icon, {\n      onClick: this.onPrev,\n      name: prevIcon,\n      title: \"Prev\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 670,\n        columnNumber: 29\n      }\n    }) : __jsx(\"div\", {\n      style: {\n        width: '36px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 676,\n        columnNumber: 29\n      }\n    })), __jsx(Menu.Item, {\n      as: \"a\",\n      icon: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 679,\n        columnNumber: 25\n      }\n    }, __jsx(Icon, {\n      name: undoSVG,\n      id: \"undo-button\",\n      className: \"circled\",\n      size: \"30px\",\n      title: this.props.intl.formatMessage(messages.undo),\n      onClick: this.onUndo,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 680,\n        columnNumber: 27\n      }\n    })), __jsx(Menu.Item, {\n      as: \"a\",\n      id: \"next-button\",\n      icon: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 689,\n        columnNumber: 25\n      }\n    }, this.state.showNextButton ? __jsx(Icon, {\n      onClick: this.onNext,\n      name: nextIcon,\n      title: \"Next\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 691,\n        columnNumber: 29\n      }\n    }) : __jsx(\"div\", {\n      style: {\n        width: '36px'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 697,\n        columnNumber: 29\n      }\n    }))))))))), this.state.isClient && __jsx(Portal, {\n      node: document.getElementById('toolbar'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 709,\n        columnNumber: 11\n      }\n    }, __jsx(Toolbar, {\n      pathname: this.props.pathname,\n      hideDefaultViewButtons: true,\n      inner: __jsx(React.Fragment, null, __jsx(Link, {\n        to: \"/controlpanel\",\n        className: \"item\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 715,\n          columnNumber: 19\n        }\n      }, __jsx(Icon, {\n        name: backSVG,\n        \"aria-label\": this.props.intl.formatMessage(messages.back),\n        className: \"contents circled\",\n        size: \"30px\",\n        title: this.props.intl.formatMessage(messages.back),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 716,\n          columnNumber: 21\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 710,\n        columnNumber: 13\n      }\n    })));\n  }\n}\n_defineProperty(UndoControlpanel, \"propTypes\", {\n  getTransactions: PropTypes.func.isRequired,\n  revertTransactions: PropTypes.func.isRequired,\n  transactions: PropTypes.arrayOf(PropTypes.shape({\n    description: PropTypes.string,\n    id: PropTypes.string,\n    size: PropTypes.number,\n    time: PropTypes.string,\n    username: PropTypes.string\n  })),\n  revertRequest: PropTypes.shape({\n    loaded: PropTypes.bool,\n    loading: PropTypes.bool\n  }).isRequired\n});\nexport default compose(injectIntl, connect((state, props) => ({\n  pathname: props.location.pathname,\n  transactions: state.transactions.transactions_recieved,\n  revertRequest: state.transactions.revert\n}), {\n  getTransactions,\n  revertTransactions\n}))(UndoControlpanel);","map":{"version":3,"names":["React","Component","PropTypes","connect","compose","Link","Portal","Container","Segment","Table","Menu","Input","FormattedMessage","defineMessages","injectIntl","Icon","Toolbar","Form","Toast","backSVG","Helmet","nextIcon","prevIcon","undoSVG","getTransactions","revertTransactions","toast","messages","success","error","undo","back","default","sortBy","sorted","unsorted","sortByDescription","failedToUndoTransactions","successfullyUndoneTransactions","transactionsHaveBeenSorted","transactionsHaveBeenUnsorted","noTransactionsSelected","noTransactionsSelectedToDoUndo","UndoControlpanel","constructor","props","state","isClient","sortType","lowerIndex","upperIndex","defaultTransactionsLenInTable","isSortingTypeSelected","sortedTransactions","isEmptyInputForSorting","isTransactionsNotFound","isClickedOnUndoButton","showPrevButton","showNextButton","onCancel","bind","onSort","onSelect","onPrev","onNext","onUndo","handleTableVisiblity","handleNotSortedNextPrevButtons","handleSortedNextPrevButtons","checkTransactionsUndoneStatus","componentDidMount","setState","UNSAFE_componentWillReceiveProps","nextProps","revertRequest","loading","loaded","setSortedTransactions","length","info","intl","formatMessage","data","sortingTypes","toLowerCase","value","sortByUsername","sortByPath","sortByDate","undefined","transactions","forEach","element","trim","username","push","includes","id","MSInADay","sortingTimeInMS","Date","parse","endTimeOfSortingDateInMS","startTimeOfSortingDateInMS","time","transactionsSelected","undoTransactionsIds","slice","transaction","document","getElementById","firstElementChild","checked","Array","from","getElementsByClassName","render","transactionsRange","fieldsets","title","fields","properties","description","type","choices","required","message","join","width","pathname","func","isRequired","arrayOf","shape","string","size","number","bool","location","transactions_recieved","revert"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Controlpanels/UndoControlpanel.jsx"],"sourcesContent":["/**\n * Users controlpanel container.\n * @module components/manage/Controlpanels/UndoControlpanel\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { Portal } from 'react-portal';\nimport { Container, Segment, Table, Menu, Input } from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport { Icon, Toolbar, Form, Toast } from '@plone/volto/components';\nimport backSVG from '@plone/volto/icons/back.svg';\nimport { map } from 'lodash';\nimport { Helmet } from '@plone/volto/helpers';\nimport nextIcon from '@plone/volto/icons/right-key.svg';\nimport prevIcon from '@plone/volto/icons/left-key.svg';\nimport undoSVG from '@plone/volto/icons/undo.svg';\nimport { getTransactions, revertTransactions } from '@plone/volto/actions';\nimport { toast } from 'react-toastify';\n\nconst messages = defineMessages({\n  success: {\n    id: 'Success',\n    defaultMessage: 'Success',\n  },\n  error: {\n    id: 'Error',\n    defaultMessage: 'Error',\n  },\n  undo: {\n    id: 'Undo',\n    defaultMessage: 'Undo',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  sortBy: {\n    id: 'Sort By',\n    defaultMessage: 'Sort by',\n  },\n  sorted: {\n    id: 'Sorted',\n    defaultMessage: 'Sorted',\n  },\n  unsorted: {\n    id: 'Unsorted',\n    defaultMessage: 'Unsorted',\n  },\n  sortByDescription: {\n    id: 'Sort transactions by User-Name, Path or Date',\n    defaultMessage: 'Sort transactions by User-Name, Path or Date',\n  },\n  failedToUndoTransactions: {\n    id: 'Failed To Undo Transactions',\n    defaultMessage: 'Failed to undo transactions',\n  },\n  successfullyUndoneTransactions: {\n    id: 'Successfully Undone Transactions',\n    defaultMessage: 'Successfully undone transactions',\n  },\n  transactionsHaveBeenSorted: {\n    id: 'Transactions Have Been Sorted',\n    defaultMessage: 'Transactions have been sorted',\n  },\n  transactionsHaveBeenUnsorted: {\n    id: 'Transactions Have Been Unsorted',\n    defaultMessage: 'Transactions have been unsorted',\n  },\n  noTransactionsSelected: {\n    id: 'No Transactions Selected',\n    defaultMessage: 'No transactions selected',\n  },\n  noTransactionsSelectedToDoUndo: {\n    id: 'No Transactions Selected To Do Undo',\n    defaultMessage: 'No transactions selected to do undo',\n  },\n});\n\n/**\n * UndoControlpanel class.\n * @class UndoControlpanel\n * @extends Component\n */\nclass UndoControlpanel extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    getTransactions: PropTypes.func.isRequired,\n    revertTransactions: PropTypes.func.isRequired,\n    transactions: PropTypes.arrayOf(\n      PropTypes.shape({\n        description: PropTypes.string,\n        id: PropTypes.string,\n        size: PropTypes.number,\n        time: PropTypes.string,\n        username: PropTypes.string,\n      }),\n    ),\n    revertRequest: PropTypes.shape({\n      loaded: PropTypes.bool,\n      loading: PropTypes.bool,\n    }).isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs UndoControlpanel\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      isClient: false,\n      sortType: 'no value',\n      lowerIndex: 0,\n      upperIndex: 20,\n      defaultTransactionsLenInTable: 20,\n      isSortingTypeSelected: false,\n      sortedTransactions: [],\n      isEmptyInputForSorting: false,\n      isTransactionsNotFound: false,\n      isClickedOnUndoButton: false,\n      showPrevButton: false,\n      showNextButton: false,\n    };\n    this.onCancel = this.onCancel.bind(this);\n    this.onSort = this.onSort.bind(this);\n    this.onSelect = this.onSelect.bind(this);\n    this.onPrev = this.onPrev.bind(this);\n    this.onNext = this.onNext.bind(this);\n    this.onUndo = this.onUndo.bind(this);\n    this.handleTableVisiblity = this.handleTableVisiblity.bind(this);\n    this.handleNotSortedNextPrevButtons = this.handleNotSortedNextPrevButtons.bind(\n      this,\n    );\n    this.handleSortedNextPrevButtons = this.handleSortedNextPrevButtons.bind(\n      this,\n    );\n    this.checkTransactionsUndoneStatus = this.checkTransactionsUndoneStatus.bind(\n      this,\n    );\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.setState({\n      isClient: true,\n    });\n    this.props.getTransactions();\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.revertRequest.loading && nextProps.revertRequest.loaded) {\n      this.props.getTransactions();\n    }\n  }\n\n  setSortedTransactions(sortedTransactions) {\n    if (sortedTransactions.length > 0) {\n      this.setState({\n        lowerIndex: 0,\n        upperIndex: this.state.defaultTransactionsLenInTable,\n        sortedTransactions: sortedTransactions,\n        isEmptyInputForSorting: false,\n        isTransactionsNotFound: false,\n      });\n    } else {\n      this.setState({ isTransactionsNotFound: true });\n    }\n  }\n\n  /**\n   * On Cancel\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    if (this.state.sortedTransactions.length > 0) {\n      toast.info(\n        <Toast\n          info\n          title={this.props.intl.formatMessage(messages.unsorted)}\n          content={this.props.intl.formatMessage(\n            messages.transactionsHaveBeenUnsorted,\n          )}\n        />,\n      );\n    }\n    this.setState({\n      isSortingTypeSelected: false,\n      isTransactionsNotFound: false,\n      isEmptyInputForSorting: false,\n      sortType: 'no value',\n      sortedTransactions: [],\n      lowerIndex: 0,\n      upperIndex: this.state.defaultTransactionsLenInTable,\n    });\n  }\n\n  /**\n   * On Select\n   * @method onSelect\n   * @param {object} data\n   * @returns {undefined}\n   */\n  onSelect(data) {\n    if (\n      data !== null &&\n      data.sortingTypes !== null &&\n      this.state.sortType.toLowerCase() === data.sortingTypes.toLowerCase()\n    ) {\n      return;\n    }\n    let sortType = (data !== null && data.sortingTypes) || 'no value';\n\n    if (sortType.toLowerCase() !== 'no value') {\n      this.setState({ isSortingTypeSelected: true });\n      sortType.toLowerCase() === 'user name' &&\n        this.setState({ sortType: 'user name' });\n      sortType.toLowerCase() === 'date' && this.setState({ sortType: 'date' });\n      sortType.toLowerCase() === 'path' && this.setState({ sortType: 'path' });\n    } else {\n      this.onCancel();\n    }\n  }\n\n  /**\n   * On Sort\n   * @method onSort\n   * @param {object} data\n   * @returns {undefined}\n   */\n  onSort(data) {\n    let sortType = data.sortingTypes || 'no value';\n    let value;\n    (sortType.toLowerCase() === 'user name' && (value = data.sortByUsername)) ||\n      (sortType.toLowerCase() === 'path' && (value = data.sortByPath)) ||\n      (sortType.toLowerCase() === 'date' && (value = data.sortByDate)) ||\n      (value = undefined);\n\n    if (sortType.toLowerCase() !== 'no value' && value !== undefined) {\n      let sortedTransactions = [];\n      if (sortType.toLowerCase() === 'user name') {\n        this.props.transactions.forEach((element) => {\n          if (value.trim().toLowerCase() === 'zope' && !element.username) {\n            sortedTransactions.push(element);\n          } else if (\n            element.username\n              .trim()\n              .toLowerCase()\n              .includes(value.trim().toLowerCase())\n          ) {\n            sortedTransactions.push(element);\n          }\n        });\n        this.setSortedTransactions(sortedTransactions);\n      } else if (sortType.toLowerCase() === 'path') {\n        this.props.transactions.forEach((element) => {\n          if (\n            element.id.trim().toLowerCase().includes(value.trim().toLowerCase())\n          ) {\n            sortedTransactions.push(element);\n          }\n        });\n        this.setSortedTransactions(sortedTransactions);\n      } else {\n        // MS is Milli Seconds\n        let MSInADay = 86400000;\n        let sortingTimeInMS = Date.parse(value);\n        let endTimeOfSortingDateInMS =\n          sortingTimeInMS - (sortingTimeInMS % MSInADay) + MSInADay - 1;\n        let startTimeOfSortingDateInMS =\n          sortingTimeInMS - (sortingTimeInMS % MSInADay);\n\n        this.props.transactions.forEach((element) => {\n          if (\n            endTimeOfSortingDateInMS >= Date.parse(element.time) &&\n            Date.parse(element.time) >= startTimeOfSortingDateInMS\n          ) {\n            sortedTransactions.push(element);\n          }\n        });\n        this.setSortedTransactions(sortedTransactions);\n      }\n      toast.info(\n        <Toast\n          info\n          title={this.props.intl.formatMessage(messages.sorted)}\n          content={this.props.intl.formatMessage(\n            messages.transactionsHaveBeenSorted,\n          )}\n        />,\n      );\n    } else {\n      this.setState({ isEmptyInputForSorting: true });\n    }\n  }\n\n  /**\n   * On Undo\n   * @method onUndo\n   * @returns {undefined}\n   */\n  onUndo() {\n    let transactionsSelected = false;\n    let undoTransactionsIds = map(\n      this.props.transactions.slice(0, this.props.transactions.length),\n      (transaction) => {\n        if (\n          document.getElementById(transaction.id) !== null &&\n          document.getElementById(transaction.id).firstElementChild\n            .firstElementChild.firstElementChild.checked\n        ) {\n          transactionsSelected = true;\n          return transaction.id;\n        }\n        return '';\n      },\n    );\n    if (transactionsSelected) {\n      this.setState({\n        isClickedOnUndoButton: true,\n      });\n      this.props.revertTransactions(undoTransactionsIds);\n    } else {\n      toast.error(\n        <Toast\n          error\n          title={this.props.intl.formatMessage(messages.noTransactionsSelected)}\n          content={this.props.intl.formatMessage(\n            messages.noTransactionsSelectedToDoUndo,\n          )}\n        />,\n      );\n    }\n\n    Array.from(\n      document.getElementsByClassName('transactions-checkboxes'),\n    ).forEach((element) => {\n      element.firstElementChild.checked = false;\n    });\n  }\n\n  /**\n   * On Prev\n   * @method onPrev\n   * @returns {undefined}\n   */\n  onPrev() {\n    0 < this.state.lowerIndex &&\n      this.setState({\n        upperIndex: this.state.lowerIndex,\n        lowerIndex:\n          this.state.lowerIndex - this.state.defaultTransactionsLenInTable,\n      });\n  }\n\n  /**\n   * On Next\n   * @method onNext\n   * @returns {undefined}\n   */\n  onNext() {\n    this.props.transactions.length > this.state.upperIndex &&\n      this.setState({\n        lowerIndex: this.state.upperIndex,\n        upperIndex:\n          this.state.upperIndex + this.state.defaultTransactionsLenInTable,\n      });\n  }\n\n  /**\n   * Handle next and prev buttons visiblity when transactions are sorted\n   * @method handleSortedNextPrevButtons\n   * @returns {undefined}\n   */\n  handleSortedNextPrevButtons() {\n    this.state.upperIndex >= this.state.sortedTransactions.length &&\n      this.state.showNextButton &&\n      this.setState({ showNextButton: false });\n\n    this.state.upperIndex < this.state.sortedTransactions.length &&\n      !this.state.showNextButton &&\n      this.setState({ showNextButton: true });\n\n    this.state.lowerIndex <= 0 &&\n      this.state.showPrevButton &&\n      this.setState({ showPrevButton: false });\n\n    this.state.lowerIndex > 0 &&\n      !this.state.showPrevButton &&\n      this.setState({ showPrevButton: true });\n  }\n\n  /**\n   * Handle next and prev buttons visiblity when transactions are not sorted\n   * @method handleNotSortedNextPrevButtons\n   * @returns {undefined}\n   */\n  handleNotSortedNextPrevButtons() {\n    this.state.upperIndex >= this.props.transactions?.length &&\n      this.state.showNextButton &&\n      this.setState({ showNextButton: false });\n\n    this.state.upperIndex < this.props.transactions?.length &&\n      !this.state.showNextButton &&\n      this.setState({ showNextButton: true });\n\n    this.state.lowerIndex <= 0 &&\n      this.state.showPrevButton &&\n      this.setState({ showPrevButton: false });\n\n    this.state.lowerIndex > 0 &&\n      !this.state.showPrevButton &&\n      this.setState({ showPrevButton: true });\n  }\n\n  /**\n   * Handle next, prev buttons and table visiblity\n   * @method handleTableVisiblity\n   * @returns {undefined}\n   */\n  handleTableVisiblity() {\n    if (this.state.sortedTransactions.length > 0) {\n      this.handleSortedNextPrevButtons();\n    } else if (!this.state.isSortingTypeSelected) {\n      this.props.transactions?.length > 0 &&\n        this.state.isTransactionsNotFound &&\n        this.setState({ isTransactionsNotFound: false });\n\n      this.props.transactions?.length <= 0 &&\n        !this.state.isTransactionsNotFound &&\n        this.setState({ isTransactionsNotFound: true });\n\n      this.handleNotSortedNextPrevButtons();\n    } else {\n      this.handleNotSortedNextPrevButtons();\n    }\n  }\n\n  /**\n   * Check transactions undone status\n   * @method checkTransactionsUndoneStatus\n   * @returns {undefined}\n   */\n  checkTransactionsUndoneStatus() {\n    if (\n      this.props.revertRequest.error &&\n      this.props.revertRequest.error !== null &&\n      this.state.isClickedOnUndoButton\n    ) {\n      this.setState({\n        isClickedOnUndoButton: false,\n      });\n      toast.error(\n        <Toast\n          error\n          title={this.props.intl.formatMessage(messages.error)}\n          content={this.props.intl.formatMessage(\n            messages.failedToUndoTransactions,\n          )}\n        />,\n      );\n    } else if (\n      this.props.revertRequest.error === null &&\n      this.state.isClickedOnUndoButton\n    ) {\n      this.setState({\n        isClickedOnUndoButton: false,\n      });\n      toast.success(\n        <Toast\n          success\n          title={this.props.intl.formatMessage(messages.success)}\n          content={this.props.intl.formatMessage(\n            messages.successfullyUndoneTransactions,\n          )}\n        />,\n      );\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const transactionsRange =\n      (this.state.sortedTransactions.length > 0 &&\n        this.state.sortedTransactions.slice(\n          this.state.lowerIndex,\n          this.state.upperIndex,\n        )) ||\n      this.props.transactions?.slice(\n        this.state.lowerIndex,\n        this.state.upperIndex,\n      );\n    this.handleTableVisiblity();\n    this.checkTransactionsUndoneStatus();\n\n    return (\n      <Container id=\"page-undo\" className=\"controlpanel-undo\">\n        <Helmet title=\"Undo\" />\n        <Segment.Group raised>\n          <Segment className=\"primary\">\n            <FormattedMessage\n              id=\"Undo Controlpanel\"\n              defaultMessage=\"Undo Controlpanel\"\n            />\n          </Segment>\n          <Segment>\n            {this.props.transactions?.length > 0 && (\n              <Form\n                schema={{\n                  fieldsets: [\n                    {\n                      id: 'default',\n                      title: this.props.intl.formatMessage(messages.default),\n                      fields: this.state.isSortingTypeSelected\n                        ? [\n                            'sortingTypes',\n                            (this.state.sortType.toLowerCase() ===\n                              'user name' &&\n                              'sortByUsername') ||\n                              (this.state.sortType.toLowerCase() === 'path' &&\n                                'sortByPath') ||\n                              (this.state.sortType.toLowerCase() === 'date' &&\n                                'sortByDate'),\n                          ]\n                        : ['sortingTypes'],\n                    },\n                  ],\n                  properties: {\n                    sortingTypes: {\n                      title: this.props.intl.formatMessage(messages.sortBy),\n                      description: this.props.intl.formatMessage(\n                        messages.sortByDescription,\n                      ),\n                      type: 'string',\n                      choices: map(['User Name', 'Path', 'Date'], (type) => [\n                        type,\n                        type,\n                      ]),\n                    },\n                    sortByUsername: {\n                      title: `Enter Username`,\n                      type: 'string',\n                    },\n                    sortByPath: {\n                      title: `Enter Path`,\n                      type: 'string',\n                    },\n                    sortByDate: {\n                      title: `Enter Date and Time`,\n                      type: 'date',\n                    },\n                  },\n                  required: [],\n                }}\n                error={\n                  this.state.isEmptyInputForSorting\n                    ? { message: 'Please enter any input to perform sorting' }\n                    : undefined\n                }\n                onChangeFormData={this.onSelect}\n                onSubmit={\n                  this.state.isSortingTypeSelected ? this.onSort : undefined\n                }\n                onCancel={\n                  this.state.isSortingTypeSelected ? this.onCancel : undefined\n                }\n                resetOnCancel={true}\n              />\n            )}\n          </Segment>\n          <Segment.Group raised>\n            <Segment className=\"primary\">\n              <FormattedMessage\n                id=\"Transactions\"\n                defaultMessage=\"Transactions\"\n              />\n            </Segment>\n            {this.state.isTransactionsNotFound ? (\n              <Segment>\n                <FormattedMessage\n                  id=\"No Transactions Found\"\n                  defaultMessage=\"No transactions found\"\n                />\n              </Segment>\n            ) : (\n              <Table selectable fixed celled compact singleLine attached>\n                <Table.Header>\n                  <Table.Row>\n                    <Table.HeaderCell width={1}>\n                      <FormattedMessage\n                        id=\"Transactions Checkbox\"\n                        defaultMessage=\"#\"\n                      />\n                    </Table.HeaderCell>\n                    <Table.HeaderCell width={3}>\n                      <FormattedMessage id=\"What\" defaultMessage=\"What\" />\n                    </Table.HeaderCell>\n                    <Table.HeaderCell width={3}>\n                      <FormattedMessage id=\"Who\" defaultMessage=\"Who\" />\n                    </Table.HeaderCell>\n                    <Table.HeaderCell width={3}>\n                      <FormattedMessage id=\"When\" defaultMessage=\"When\" />\n                    </Table.HeaderCell>\n                    <Table.HeaderCell width={3}>\n                      <FormattedMessage id=\"Note\" defaultMessage=\"Note\" />\n                    </Table.HeaderCell>\n                    <Table.HeaderCell />\n                  </Table.Row>\n                </Table.Header>\n                <Table.Body>\n                  {map(transactionsRange, (transaction) => (\n                    <Table.Row id={transaction.id} key={transaction.id}>\n                      <Table.Cell width={1}>\n                        <Input\n                          type=\"checkbox\"\n                          className=\"transactions-checkboxes\"\n                        />\n                      </Table.Cell>\n                      <Table.Cell\n                        width={3}\n                        title={[transaction.description].join(' ')}\n                      >\n                        {transaction.description}\n                      </Table.Cell>\n                      <Table.Cell width={3}>\n                        {transaction.username ? transaction.username : 'Zope'}\n                      </Table.Cell>\n                      <Table.Cell width={3}>{transaction.time}</Table.Cell>\n                      <Table.Cell width={3}>\n                        {transaction.description.includes('Undo')\n                          ? 'Undone'\n                          : ''}\n                      </Table.Cell>\n                    </Table.Row>\n                  ))}\n                </Table.Body>\n                <Table.Footer>\n                  <Table.Row>\n                    <Table.HeaderCell textAlign=\"center\" colSpan=\"6\">\n                      <Menu pagination>\n                        <Menu.Item as=\"a\" id=\"prev-button\" icon>\n                          {this.state.showPrevButton ? (\n                            <Icon\n                              onClick={this.onPrev}\n                              name={prevIcon}\n                              title=\"Prev\"\n                            />\n                          ) : (\n                            <div style={{ width: '36px' }}></div>\n                          )}\n                        </Menu.Item>\n                        <Menu.Item as=\"a\" icon>\n                          <Icon\n                            name={undoSVG}\n                            id=\"undo-button\"\n                            className=\"circled\"\n                            size=\"30px\"\n                            title={this.props.intl.formatMessage(messages.undo)}\n                            onClick={this.onUndo}\n                          />\n                        </Menu.Item>\n                        <Menu.Item as=\"a\" id=\"next-button\" icon>\n                          {this.state.showNextButton ? (\n                            <Icon\n                              onClick={this.onNext}\n                              name={nextIcon}\n                              title=\"Next\"\n                            />\n                          ) : (\n                            <div style={{ width: '36px' }}></div>\n                          )}\n                        </Menu.Item>\n                      </Menu>\n                    </Table.HeaderCell>\n                  </Table.Row>\n                </Table.Footer>\n              </Table>\n            )}\n          </Segment.Group>\n        </Segment.Group>\n        {this.state.isClient && (\n          <Portal node={document.getElementById('toolbar')}>\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={\n                <>\n                  <Link to=\"/controlpanel\" className=\"item\">\n                    <Icon\n                      name={backSVG}\n                      aria-label={this.props.intl.formatMessage(messages.back)}\n                      className=\"contents circled\"\n                      size=\"30px\"\n                      title={this.props.intl.formatMessage(messages.back)}\n                    />\n                  </Link>\n                </>\n              }\n            />\n          </Portal>\n        )}\n      </Container>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      pathname: props.location.pathname,\n      transactions: state.transactions.transactions_recieved,\n      revertRequest: state.transactions.revert,\n    }),\n    { getTransactions, revertTransactions },\n  ),\n)(UndoControlpanel);\n"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,OAAO,QAAQ,OAAO;AAC/B,SAASC,IAAI,QAAQ,kBAAkB;AACvC,SAASC,MAAM,QAAQ,cAAc;AACrC,SAASC,SAAS,EAAEC,OAAO,EAAEC,KAAK,EAAEC,IAAI,EAAEC,KAAK,QAAQ,mBAAmB;AAC1E,SAASC,gBAAgB,EAAEC,cAAc,EAAEC,UAAU,QAAQ,YAAY;AACzE,SAASC,IAAI,EAAEC,OAAO,EAAEC,IAAI,EAAEC,KAAK,QAAQ,yBAAyB;AACpE,OAAOC,OAAO,MAAM,6BAA6B;AAEjD,SAASC,MAAM,QAAQ,sBAAsB;AAC7C,OAAOC,QAAQ,MAAM,kCAAkC;AACvD,OAAOC,QAAQ,MAAM,iCAAiC;AACtD,OAAOC,OAAO,MAAM,6BAA6B;AACjD,SAASC,eAAe,EAAEC,kBAAkB,QAAQ,sBAAsB;AAC1E,SAASC,KAAK,QAAQ,gBAAgB;AAEtC,MAAMC,QAAQ,GAAGd,cAAc,CAAC;EAC9Be,OAAO;IAAA;IAAA;EAAA,CAGN;EACDC,KAAK;IAAA;IAAA;EAAA,CAGJ;EACDC,IAAI;IAAA;IAAA;EAAA,CAGH;EACDC,IAAI;IAAA;IAAA;EAAA,CAGH;EACDC,OAAO;IAAA;IAAA;EAAA,CAGN;EACDC,MAAM;IAAA;IAAA;EAAA,CAGL;EACDC,MAAM;IAAA;IAAA;EAAA,CAGL;EACDC,QAAQ;IAAA;IAAA;EAAA,CAGP;EACDC,iBAAiB;IAAA;IAAA;EAAA,CAGhB;EACDC,wBAAwB;IAAA;IAAA;EAAA,CAGvB;EACDC,8BAA8B;IAAA;IAAA;EAAA,CAG7B;EACDC,0BAA0B;IAAA;IAAA;EAAA,CAGzB;EACDC,4BAA4B;IAAA;IAAA;EAAA,CAG3B;EACDC,sBAAsB;IAAA;IAAA;EAAA,CAGrB;EACDC,8BAA8B;IAAA;IAAA;EAAA;AAIhC,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,SAAS1C,SAAS,CAAC;EACvC;AACF;AACA;AACA;AACA;;EAmBE;AACF;AACA;AACA;AACA;AACA;EACE2C,WAAW,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IACZ,IAAI,CAACC,KAAK,GAAG;MACXC,QAAQ,EAAE,KAAK;MACfC,QAAQ,EAAE,UAAU;MACpBC,UAAU,EAAE,CAAC;MACbC,UAAU,EAAE,EAAE;MACdC,6BAA6B,EAAE,EAAE;MACjCC,qBAAqB,EAAE,KAAK;MAC5BC,kBAAkB,EAAE,EAAE;MACtBC,sBAAsB,EAAE,KAAK;MAC7BC,sBAAsB,EAAE,KAAK;MAC7BC,qBAAqB,EAAE,KAAK;MAC5BC,cAAc,EAAE,KAAK;MACrBC,cAAc,EAAE;IAClB,CAAC;IACD,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACC,IAAI,CAAC,IAAI,CAAC;IACxC,IAAI,CAACC,MAAM,GAAG,IAAI,CAACA,MAAM,CAACD,IAAI,CAAC,IAAI,CAAC;IACpC,IAAI,CAACE,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACF,IAAI,CAAC,IAAI,CAAC;IACxC,IAAI,CAACG,MAAM,GAAG,IAAI,CAACA,MAAM,CAACH,IAAI,CAAC,IAAI,CAAC;IACpC,IAAI,CAACI,MAAM,GAAG,IAAI,CAACA,MAAM,CAACJ,IAAI,CAAC,IAAI,CAAC;IACpC,IAAI,CAACK,MAAM,GAAG,IAAI,CAACA,MAAM,CAACL,IAAI,CAAC,IAAI,CAAC;IACpC,IAAI,CAACM,oBAAoB,GAAG,IAAI,CAACA,oBAAoB,CAACN,IAAI,CAAC,IAAI,CAAC;IAChE,IAAI,CAACO,8BAA8B,GAAG,IAAI,CAACA,8BAA8B,CAACP,IAAI,CAC5E,IAAI,CACL;IACD,IAAI,CAACQ,2BAA2B,GAAG,IAAI,CAACA,2BAA2B,CAACR,IAAI,CACtE,IAAI,CACL;IACD,IAAI,CAACS,6BAA6B,GAAG,IAAI,CAACA,6BAA6B,CAACT,IAAI,CAC1E,IAAI,CACL;EACH;;EAEA;AACF;AACA;AACA;AACA;EACEU,iBAAiB,GAAG;IAClB,IAAI,CAACC,QAAQ,CAAC;MACZxB,QAAQ,EAAE;IACZ,CAAC,CAAC;IACF,IAAI,CAACF,KAAK,CAACrB,eAAe,EAAE;EAC9B;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEgD,gCAAgC,CAACC,SAAS,EAAE;IAC1C,IAAI,IAAI,CAAC5B,KAAK,CAAC6B,aAAa,CAACC,OAAO,IAAIF,SAAS,CAACC,aAAa,CAACE,MAAM,EAAE;MACtE,IAAI,CAAC/B,KAAK,CAACrB,eAAe,EAAE;IAC9B;EACF;EAEAqD,qBAAqB,CAACxB,kBAAkB,EAAE;IACxC,IAAIA,kBAAkB,CAACyB,MAAM,GAAG,CAAC,EAAE;MACjC,IAAI,CAACP,QAAQ,CAAC;QACZtB,UAAU,EAAE,CAAC;QACbC,UAAU,EAAE,IAAI,CAACJ,KAAK,CAACK,6BAA6B;QACpDE,kBAAkB,EAAEA,kBAAkB;QACtCC,sBAAsB,EAAE,KAAK;QAC7BC,sBAAsB,EAAE;MAC1B,CAAC,CAAC;IACJ,CAAC,MAAM;MACL,IAAI,CAACgB,QAAQ,CAAC;QAAEhB,sBAAsB,EAAE;MAAK,CAAC,CAAC;IACjD;EACF;;EAEA;AACF;AACA;AACA;AACA;EACEI,QAAQ,GAAG;IACT,IAAI,IAAI,CAACb,KAAK,CAACO,kBAAkB,CAACyB,MAAM,GAAG,CAAC,EAAE;MAC5CpD,KAAK,CAACqD,IAAI,CACR,MAAC,KAAK;QACJ,IAAI;QACJ,KAAK,EAAE,IAAI,CAAClC,KAAK,CAACmC,IAAI,CAACC,aAAa,CAACtD,QAAQ,CAACQ,QAAQ,CAAE;QACxD,OAAO,EAAE,IAAI,CAACU,KAAK,CAACmC,IAAI,CAACC,aAAa,CACpCtD,QAAQ,CAACa,4BAA4B,CACrC;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EACF,CACH;IACH;IACA,IAAI,CAAC+B,QAAQ,CAAC;MACZnB,qBAAqB,EAAE,KAAK;MAC5BG,sBAAsB,EAAE,KAAK;MAC7BD,sBAAsB,EAAE,KAAK;MAC7BN,QAAQ,EAAE,UAAU;MACpBK,kBAAkB,EAAE,EAAE;MACtBJ,UAAU,EAAE,CAAC;MACbC,UAAU,EAAE,IAAI,CAACJ,KAAK,CAACK;IACzB,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEW,QAAQ,CAACoB,IAAI,EAAE;IACb,IACEA,IAAI,KAAK,IAAI,IACbA,IAAI,CAACC,YAAY,KAAK,IAAI,IAC1B,IAAI,CAACrC,KAAK,CAACE,QAAQ,CAACoC,WAAW,EAAE,KAAKF,IAAI,CAACC,YAAY,CAACC,WAAW,EAAE,EACrE;MACA;IACF;IACA,IAAIpC,QAAQ,GAAIkC,IAAI,KAAK,IAAI,IAAIA,IAAI,CAACC,YAAY,IAAK,UAAU;IAEjE,IAAInC,QAAQ,CAACoC,WAAW,EAAE,KAAK,UAAU,EAAE;MACzC,IAAI,CAACb,QAAQ,CAAC;QAAEnB,qBAAqB,EAAE;MAAK,CAAC,CAAC;MAC9CJ,QAAQ,CAACoC,WAAW,EAAE,KAAK,WAAW,IACpC,IAAI,CAACb,QAAQ,CAAC;QAAEvB,QAAQ,EAAE;MAAY,CAAC,CAAC;MAC1CA,QAAQ,CAACoC,WAAW,EAAE,KAAK,MAAM,IAAI,IAAI,CAACb,QAAQ,CAAC;QAAEvB,QAAQ,EAAE;MAAO,CAAC,CAAC;MACxEA,QAAQ,CAACoC,WAAW,EAAE,KAAK,MAAM,IAAI,IAAI,CAACb,QAAQ,CAAC;QAAEvB,QAAQ,EAAE;MAAO,CAAC,CAAC;IAC1E,CAAC,MAAM;MACL,IAAI,CAACW,QAAQ,EAAE;IACjB;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEE,MAAM,CAACqB,IAAI,EAAE;IACX,IAAIlC,QAAQ,GAAGkC,IAAI,CAACC,YAAY,IAAI,UAAU;IAC9C,IAAIE,KAAK;IACRrC,QAAQ,CAACoC,WAAW,EAAE,KAAK,WAAW,KAAKC,KAAK,GAAGH,IAAI,CAACI,cAAc,CAAC,IACrEtC,QAAQ,CAACoC,WAAW,EAAE,KAAK,MAAM,KAAKC,KAAK,GAAGH,IAAI,CAACK,UAAU,CAAE,IAC/DvC,QAAQ,CAACoC,WAAW,EAAE,KAAK,MAAM,KAAKC,KAAK,GAAGH,IAAI,CAACM,UAAU,CAAE,KAC/DH,KAAK,GAAGI,SAAS,CAAC;IAErB,IAAIzC,QAAQ,CAACoC,WAAW,EAAE,KAAK,UAAU,IAAIC,KAAK,KAAKI,SAAS,EAAE;MAChE,IAAIpC,kBAAkB,GAAG,EAAE;MAC3B,IAAIL,QAAQ,CAACoC,WAAW,EAAE,KAAK,WAAW,EAAE;QAC1C,IAAI,CAACvC,KAAK,CAAC6C,YAAY,CAACC,OAAO,CAAEC,OAAO,IAAK;UAC3C,IAAIP,KAAK,CAACQ,IAAI,EAAE,CAACT,WAAW,EAAE,KAAK,MAAM,IAAI,CAACQ,OAAO,CAACE,QAAQ,EAAE;YAC9DzC,kBAAkB,CAAC0C,IAAI,CAACH,OAAO,CAAC;UAClC,CAAC,MAAM,IACLA,OAAO,CAACE,QAAQ,CACbD,IAAI,EAAE,CACNT,WAAW,EAAE,CACbY,QAAQ,CAACX,KAAK,CAACQ,IAAI,EAAE,CAACT,WAAW,EAAE,CAAC,EACvC;YACA/B,kBAAkB,CAAC0C,IAAI,CAACH,OAAO,CAAC;UAClC;QACF,CAAC,CAAC;QACF,IAAI,CAACf,qBAAqB,CAACxB,kBAAkB,CAAC;MAChD,CAAC,MAAM,IAAIL,QAAQ,CAACoC,WAAW,EAAE,KAAK,MAAM,EAAE;QAC5C,IAAI,CAACvC,KAAK,CAAC6C,YAAY,CAACC,OAAO,CAAEC,OAAO,IAAK;UAC3C,IACEA,OAAO,CAACK,EAAE,CAACJ,IAAI,EAAE,CAACT,WAAW,EAAE,CAACY,QAAQ,CAACX,KAAK,CAACQ,IAAI,EAAE,CAACT,WAAW,EAAE,CAAC,EACpE;YACA/B,kBAAkB,CAAC0C,IAAI,CAACH,OAAO,CAAC;UAClC;QACF,CAAC,CAAC;QACF,IAAI,CAACf,qBAAqB,CAACxB,kBAAkB,CAAC;MAChD,CAAC,MAAM;QACL;QACA,IAAI6C,QAAQ,GAAG,QAAQ;QACvB,IAAIC,eAAe,GAAGC,IAAI,CAACC,KAAK,CAAChB,KAAK,CAAC;QACvC,IAAIiB,wBAAwB,GAC1BH,eAAe,GAAIA,eAAe,GAAGD,QAAS,GAAGA,QAAQ,GAAG,CAAC;QAC/D,IAAIK,0BAA0B,GAC5BJ,eAAe,GAAIA,eAAe,GAAGD,QAAS;QAEhD,IAAI,CAACrD,KAAK,CAAC6C,YAAY,CAACC,OAAO,CAAEC,OAAO,IAAK;UAC3C,IACEU,wBAAwB,IAAIF,IAAI,CAACC,KAAK,CAACT,OAAO,CAACY,IAAI,CAAC,IACpDJ,IAAI,CAACC,KAAK,CAACT,OAAO,CAACY,IAAI,CAAC,IAAID,0BAA0B,EACtD;YACAlD,kBAAkB,CAAC0C,IAAI,CAACH,OAAO,CAAC;UAClC;QACF,CAAC,CAAC;QACF,IAAI,CAACf,qBAAqB,CAACxB,kBAAkB,CAAC;MAChD;MACA3B,KAAK,CAACqD,IAAI,CACR,MAAC,KAAK;QACJ,IAAI;QACJ,KAAK,EAAE,IAAI,CAAClC,KAAK,CAACmC,IAAI,CAACC,aAAa,CAACtD,QAAQ,CAACO,MAAM,CAAE;QACtD,OAAO,EAAE,IAAI,CAACW,KAAK,CAACmC,IAAI,CAACC,aAAa,CACpCtD,QAAQ,CAACY,0BAA0B,CACnC;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EACF,CACH;IACH,CAAC,MAAM;MACL,IAAI,CAACgC,QAAQ,CAAC;QAAEjB,sBAAsB,EAAE;MAAK,CAAC,CAAC;IACjD;EACF;;EAEA;AACF;AACA;AACA;AACA;EACEW,MAAM,GAAG;IACP,IAAIwC,oBAAoB,GAAG,KAAK;IAChC,IAAIC,mBAAmB,GAAG,KACxB,IAAI,CAAC7D,KAAK,CAAC6C,YAAY,CAACiB,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC9D,KAAK,CAAC6C,YAAY,CAACZ,MAAM,CAAC,EAC/D8B,WAAW,IAAK;MACf,IACEC,QAAQ,CAACC,cAAc,CAACF,WAAW,CAACX,EAAE,CAAC,KAAK,IAAI,IAChDY,QAAQ,CAACC,cAAc,CAACF,WAAW,CAACX,EAAE,CAAC,CAACc,iBAAiB,CACtDA,iBAAiB,CAACA,iBAAiB,CAACC,OAAO,EAC9C;QACAP,oBAAoB,GAAG,IAAI;QAC3B,OAAOG,WAAW,CAACX,EAAE;MACvB;MACA,OAAO,EAAE;IACX,CAAC,CACF;IACD,IAAIQ,oBAAoB,EAAE;MACxB,IAAI,CAAClC,QAAQ,CAAC;QACZf,qBAAqB,EAAE;MACzB,CAAC,CAAC;MACF,IAAI,CAACX,KAAK,CAACpB,kBAAkB,CAACiF,mBAAmB,CAAC;IACpD,CAAC,MAAM;MACLhF,KAAK,CAACG,KAAK,CACT,MAAC,KAAK;QACJ,KAAK;QACL,KAAK,EAAE,IAAI,CAACgB,KAAK,CAACmC,IAAI,CAACC,aAAa,CAACtD,QAAQ,CAACc,sBAAsB,CAAE;QACtE,OAAO,EAAE,IAAI,CAACI,KAAK,CAACmC,IAAI,CAACC,aAAa,CACpCtD,QAAQ,CAACe,8BAA8B,CACvC;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EACF,CACH;IACH;IAEAuE,KAAK,CAACC,IAAI,CACRL,QAAQ,CAACM,sBAAsB,CAAC,yBAAyB,CAAC,CAC3D,CAACxB,OAAO,CAAEC,OAAO,IAAK;MACrBA,OAAO,CAACmB,iBAAiB,CAACC,OAAO,GAAG,KAAK;IAC3C,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;EACEjD,MAAM,GAAG;IACP,CAAC,GAAG,IAAI,CAACjB,KAAK,CAACG,UAAU,IACvB,IAAI,CAACsB,QAAQ,CAAC;MACZrB,UAAU,EAAE,IAAI,CAACJ,KAAK,CAACG,UAAU;MACjCA,UAAU,EACR,IAAI,CAACH,KAAK,CAACG,UAAU,GAAG,IAAI,CAACH,KAAK,CAACK;IACvC,CAAC,CAAC;EACN;;EAEA;AACF;AACA;AACA;AACA;EACEa,MAAM,GAAG;IACP,IAAI,CAACnB,KAAK,CAAC6C,YAAY,CAACZ,MAAM,GAAG,IAAI,CAAChC,KAAK,CAACI,UAAU,IACpD,IAAI,CAACqB,QAAQ,CAAC;MACZtB,UAAU,EAAE,IAAI,CAACH,KAAK,CAACI,UAAU;MACjCA,UAAU,EACR,IAAI,CAACJ,KAAK,CAACI,UAAU,GAAG,IAAI,CAACJ,KAAK,CAACK;IACvC,CAAC,CAAC;EACN;;EAEA;AACF;AACA;AACA;AACA;EACEiB,2BAA2B,GAAG;IAC5B,IAAI,CAACtB,KAAK,CAACI,UAAU,IAAI,IAAI,CAACJ,KAAK,CAACO,kBAAkB,CAACyB,MAAM,IAC3D,IAAI,CAAChC,KAAK,CAACY,cAAc,IACzB,IAAI,CAACa,QAAQ,CAAC;MAAEb,cAAc,EAAE;IAAM,CAAC,CAAC;IAE1C,IAAI,CAACZ,KAAK,CAACI,UAAU,GAAG,IAAI,CAACJ,KAAK,CAACO,kBAAkB,CAACyB,MAAM,IAC1D,CAAC,IAAI,CAAChC,KAAK,CAACY,cAAc,IAC1B,IAAI,CAACa,QAAQ,CAAC;MAAEb,cAAc,EAAE;IAAK,CAAC,CAAC;IAEzC,IAAI,CAACZ,KAAK,CAACG,UAAU,IAAI,CAAC,IACxB,IAAI,CAACH,KAAK,CAACW,cAAc,IACzB,IAAI,CAACc,QAAQ,CAAC;MAAEd,cAAc,EAAE;IAAM,CAAC,CAAC;IAE1C,IAAI,CAACX,KAAK,CAACG,UAAU,GAAG,CAAC,IACvB,CAAC,IAAI,CAACH,KAAK,CAACW,cAAc,IAC1B,IAAI,CAACc,QAAQ,CAAC;MAAEd,cAAc,EAAE;IAAK,CAAC,CAAC;EAC3C;;EAEA;AACF;AACA;AACA;AACA;EACEU,8BAA8B,GAAG;IAAA;IAC/B,IAAI,CAACrB,KAAK,CAACI,UAAU,8BAAI,IAAI,CAACL,KAAK,CAAC6C,YAAY,0DAAvB,sBAAyBZ,MAAM,KACtD,IAAI,CAAChC,KAAK,CAACY,cAAc,IACzB,IAAI,CAACa,QAAQ,CAAC;MAAEb,cAAc,EAAE;IAAM,CAAC,CAAC;IAE1C,IAAI,CAACZ,KAAK,CAACI,UAAU,8BAAG,IAAI,CAACL,KAAK,CAAC6C,YAAY,2DAAvB,uBAAyBZ,MAAM,KACrD,CAAC,IAAI,CAAChC,KAAK,CAACY,cAAc,IAC1B,IAAI,CAACa,QAAQ,CAAC;MAAEb,cAAc,EAAE;IAAK,CAAC,CAAC;IAEzC,IAAI,CAACZ,KAAK,CAACG,UAAU,IAAI,CAAC,IACxB,IAAI,CAACH,KAAK,CAACW,cAAc,IACzB,IAAI,CAACc,QAAQ,CAAC;MAAEd,cAAc,EAAE;IAAM,CAAC,CAAC;IAE1C,IAAI,CAACX,KAAK,CAACG,UAAU,GAAG,CAAC,IACvB,CAAC,IAAI,CAACH,KAAK,CAACW,cAAc,IAC1B,IAAI,CAACc,QAAQ,CAAC;MAAEd,cAAc,EAAE;IAAK,CAAC,CAAC;EAC3C;;EAEA;AACF;AACA;AACA;AACA;EACES,oBAAoB,GAAG;IACrB,IAAI,IAAI,CAACpB,KAAK,CAACO,kBAAkB,CAACyB,MAAM,GAAG,CAAC,EAAE;MAC5C,IAAI,CAACV,2BAA2B,EAAE;IACpC,CAAC,MAAM,IAAI,CAAC,IAAI,CAACtB,KAAK,CAACM,qBAAqB,EAAE;MAAA;MAC5C,+BAAI,CAACP,KAAK,CAAC6C,YAAY,2DAAvB,uBAAyBZ,MAAM,IAAG,CAAC,IACjC,IAAI,CAAChC,KAAK,CAACS,sBAAsB,IACjC,IAAI,CAACgB,QAAQ,CAAC;QAAEhB,sBAAsB,EAAE;MAAM,CAAC,CAAC;MAElD,+BAAI,CAACV,KAAK,CAAC6C,YAAY,2DAAvB,uBAAyBZ,MAAM,KAAI,CAAC,IAClC,CAAC,IAAI,CAAChC,KAAK,CAACS,sBAAsB,IAClC,IAAI,CAACgB,QAAQ,CAAC;QAAEhB,sBAAsB,EAAE;MAAK,CAAC,CAAC;MAEjD,IAAI,CAACY,8BAA8B,EAAE;IACvC,CAAC,MAAM;MACL,IAAI,CAACA,8BAA8B,EAAE;IACvC;EACF;;EAEA;AACF;AACA;AACA;AACA;EACEE,6BAA6B,GAAG;IAC9B,IACE,IAAI,CAACxB,KAAK,CAAC6B,aAAa,CAAC7C,KAAK,IAC9B,IAAI,CAACgB,KAAK,CAAC6B,aAAa,CAAC7C,KAAK,KAAK,IAAI,IACvC,IAAI,CAACiB,KAAK,CAACU,qBAAqB,EAChC;MACA,IAAI,CAACe,QAAQ,CAAC;QACZf,qBAAqB,EAAE;MACzB,CAAC,CAAC;MACF9B,KAAK,CAACG,KAAK,CACT,MAAC,KAAK;QACJ,KAAK;QACL,KAAK,EAAE,IAAI,CAACgB,KAAK,CAACmC,IAAI,CAACC,aAAa,CAACtD,QAAQ,CAACE,KAAK,CAAE;QACrD,OAAO,EAAE,IAAI,CAACgB,KAAK,CAACmC,IAAI,CAACC,aAAa,CACpCtD,QAAQ,CAACU,wBAAwB,CACjC;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EACF,CACH;IACH,CAAC,MAAM,IACL,IAAI,CAACQ,KAAK,CAAC6B,aAAa,CAAC7C,KAAK,KAAK,IAAI,IACvC,IAAI,CAACiB,KAAK,CAACU,qBAAqB,EAChC;MACA,IAAI,CAACe,QAAQ,CAAC;QACZf,qBAAqB,EAAE;MACzB,CAAC,CAAC;MACF9B,KAAK,CAACE,OAAO,CACX,MAAC,KAAK;QACJ,OAAO;QACP,KAAK,EAAE,IAAI,CAACiB,KAAK,CAACmC,IAAI,CAACC,aAAa,CAACtD,QAAQ,CAACC,OAAO,CAAE;QACvD,OAAO,EAAE,IAAI,CAACiB,KAAK,CAACmC,IAAI,CAACC,aAAa,CACpCtD,QAAQ,CAACW,8BAA8B,CACvC;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EACF,CACH;IACH;EACF;;EAEA;AACF;AACA;AACA;AACA;EACE8E,MAAM,GAAG;IAAA;IACP,MAAMC,iBAAiB,GACpB,IAAI,CAACvE,KAAK,CAACO,kBAAkB,CAACyB,MAAM,GAAG,CAAC,IACvC,IAAI,CAAChC,KAAK,CAACO,kBAAkB,CAACsD,KAAK,CACjC,IAAI,CAAC7D,KAAK,CAACG,UAAU,EACrB,IAAI,CAACH,KAAK,CAACI,UAAU,CACtB,+BACH,IAAI,CAACL,KAAK,CAAC6C,YAAY,2DAAvB,uBAAyBiB,KAAK,CAC5B,IAAI,CAAC7D,KAAK,CAACG,UAAU,EACrB,IAAI,CAACH,KAAK,CAACI,UAAU,CACtB;IACH,IAAI,CAACgB,oBAAoB,EAAE;IAC3B,IAAI,CAACG,6BAA6B,EAAE;IAEpC,OACE,MAAC,SAAS;MAAC,EAAE,EAAC,WAAW;MAAC,SAAS,EAAC,mBAAmB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACrD,MAAC,MAAM;MAAC,KAAK,EAAC,MAAM;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAG,EACvB,MAAC,OAAO,CAAC,KAAK;MAAC,MAAM;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACnB,MAAC,OAAO;MAAC,SAAS,EAAC,SAAS;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAC1B,MAAC,gBAAgB;MACf,EAAE,EAAC,mBAAmB;MACtB,cAAc,EAAC,mBAAmB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAClC,CACM,EACV,MAAC,OAAO;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACL,+BAAI,CAACxB,KAAK,CAAC6C,YAAY,2DAAvB,uBAAyBZ,MAAM,IAAG,CAAC,IAClC,MAAC,IAAI;MACH,MAAM,EAAE;QACNwC,SAAS,EAAE,CACT;UACErB,EAAE,EAAE,SAAS;UACbsB,KAAK,EAAE,IAAI,CAAC1E,KAAK,CAACmC,IAAI,CAACC,aAAa,CAACtD,QAAQ,CAACK,OAAO,CAAC;UACtDwF,MAAM,EAAE,IAAI,CAAC1E,KAAK,CAACM,qBAAqB,GACpC,CACE,cAAc,EACb,IAAI,CAACN,KAAK,CAACE,QAAQ,CAACoC,WAAW,EAAE,KAChC,WAAW,IACX,gBAAgB,IACf,IAAI,CAACtC,KAAK,CAACE,QAAQ,CAACoC,WAAW,EAAE,KAAK,MAAM,IAC3C,YAAa,IACd,IAAI,CAACtC,KAAK,CAACE,QAAQ,CAACoC,WAAW,EAAE,KAAK,MAAM,IAC3C,YAAa,CAClB,GACD,CAAC,cAAc;QACrB,CAAC,CACF;QACDqC,UAAU,EAAE;UACVtC,YAAY,EAAE;YACZoC,KAAK,EAAE,IAAI,CAAC1E,KAAK,CAACmC,IAAI,CAACC,aAAa,CAACtD,QAAQ,CAACM,MAAM,CAAC;YACrDyF,WAAW,EAAE,IAAI,CAAC7E,KAAK,CAACmC,IAAI,CAACC,aAAa,CACxCtD,QAAQ,CAACS,iBAAiB,CAC3B;YACDuF,IAAI,EAAE,QAAQ;YACdC,OAAO,EAAE,KAAI,CAAC,WAAW,EAAE,MAAM,EAAE,MAAM,CAAC,EAAGD,IAAI,IAAK,CACpDA,IAAI,EACJA,IAAI,CACL;UACH,CAAC;UACDrC,cAAc,EAAE;YACdiC,KAAK,EAAG,gBAAe;YACvBI,IAAI,EAAE;UACR,CAAC;UACDpC,UAAU,EAAE;YACVgC,KAAK,EAAG,YAAW;YACnBI,IAAI,EAAE;UACR,CAAC;UACDnC,UAAU,EAAE;YACV+B,KAAK,EAAG,qBAAoB;YAC5BI,IAAI,EAAE;UACR;QACF,CAAC;QACDE,QAAQ,EAAE;MACZ,CAAE;MACF,KAAK,EACH,IAAI,CAAC/E,KAAK,CAACQ,sBAAsB,GAC7B;QAAEwE,OAAO,EAAE;MAA4C,CAAC,GACxDrC,SACL;MACD,gBAAgB,EAAE,IAAI,CAAC3B,QAAS;MAChC,QAAQ,EACN,IAAI,CAAChB,KAAK,CAACM,qBAAqB,GAAG,IAAI,CAACS,MAAM,GAAG4B,SAClD;MACD,QAAQ,EACN,IAAI,CAAC3C,KAAK,CAACM,qBAAqB,GAAG,IAAI,CAACO,QAAQ,GAAG8B,SACpD;MACD,aAAa,EAAE,IAAK;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAEvB,CACO,EACV,MAAC,OAAO,CAAC,KAAK;MAAC,MAAM;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACnB,MAAC,OAAO;MAAC,SAAS,EAAC,SAAS;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAC1B,MAAC,gBAAgB;MACf,EAAE,EAAC,cAAc;MACjB,cAAc,EAAC,cAAc;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAC7B,CACM,EACT,IAAI,CAAC3C,KAAK,CAACS,sBAAsB,GAChC,MAAC,OAAO;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACN,MAAC,gBAAgB;MACf,EAAE,EAAC,uBAAuB;MAC1B,cAAc,EAAC,uBAAuB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EACtC,CACM,GAEV,MAAC,KAAK;MAAC,UAAU;MAAC,KAAK;MAAC,MAAM;MAAC,OAAO;MAAC,UAAU;MAAC,QAAQ;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACxD,MAAC,KAAK,CAAC,MAAM;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACX,MAAC,KAAK,CAAC,GAAG;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACR,MAAC,KAAK,CAAC,UAAU;MAAC,KAAK,EAAE,CAAE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACzB,MAAC,gBAAgB;MACf,EAAE,EAAC,uBAAuB;MAC1B,cAAc,EAAC,GAAG;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAClB,CACe,EACnB,MAAC,KAAK,CAAC,UAAU;MAAC,KAAK,EAAE,CAAE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACzB,MAAC,gBAAgB;MAAC,EAAE,EAAC,MAAM;MAAC,cAAc,EAAC,MAAM;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAG,CACnC,EACnB,MAAC,KAAK,CAAC,UAAU;MAAC,KAAK,EAAE,CAAE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACzB,MAAC,gBAAgB;MAAC,EAAE,EAAC,KAAK;MAAC,cAAc,EAAC,KAAK;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAG,CACjC,EACnB,MAAC,KAAK,CAAC,UAAU;MAAC,KAAK,EAAE,CAAE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACzB,MAAC,gBAAgB;MAAC,EAAE,EAAC,MAAM;MAAC,cAAc,EAAC,MAAM;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAG,CACnC,EACnB,MAAC,KAAK,CAAC,UAAU;MAAC,KAAK,EAAE,CAAE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACzB,MAAC,gBAAgB;MAAC,EAAE,EAAC,MAAM;MAAC,cAAc,EAAC,MAAM;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAG,CACnC,EACnB,MAAC,KAAK,CAAC,UAAU;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAG,CACV,CACC,EACf,MAAC,KAAK,CAAC,IAAI;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACR,KAAI8D,iBAAiB,EAAGT,WAAW,IAClC,MAAC,KAAK,CAAC,GAAG;MAAC,EAAE,EAAEA,WAAW,CAACX,EAAG;MAAC,GAAG,EAAEW,WAAW,CAACX,EAAG;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACjD,MAAC,KAAK,CAAC,IAAI;MAAC,KAAK,EAAE,CAAE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACnB,MAAC,KAAK;MACJ,IAAI,EAAC,UAAU;MACf,SAAS,EAAC,yBAAyB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EACnC,CACS,EACb,MAAC,KAAK,CAAC,IAAI;MACT,KAAK,EAAE,CAAE;MACT,KAAK,EAAE,CAACW,WAAW,CAACc,WAAW,CAAC,CAACK,IAAI,CAAC,GAAG,CAAE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAE1CnB,WAAW,CAACc,WAAW,CACb,EACb,MAAC,KAAK,CAAC,IAAI;MAAC,KAAK,EAAE,CAAE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAClBd,WAAW,CAACd,QAAQ,GAAGc,WAAW,CAACd,QAAQ,GAAG,MAAM,CAC1C,EACb,MAAC,KAAK,CAAC,IAAI;MAAC,KAAK,EAAE,CAAE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAEc,WAAW,CAACJ,IAAI,CAAc,EACrD,MAAC,KAAK,CAAC,IAAI;MAAC,KAAK,EAAE,CAAE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAClBI,WAAW,CAACc,WAAW,CAAC1B,QAAQ,CAAC,MAAM,CAAC,GACrC,QAAQ,GACR,EAAE,CACK,CAEhB,CAAC,CACS,EACb,MAAC,KAAK,CAAC,MAAM;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACX,MAAC,KAAK,CAAC,GAAG;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACR,MAAC,KAAK,CAAC,UAAU;MAAC,SAAS,EAAC,QAAQ;MAAC,OAAO,EAAC,GAAG;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAC9C,MAAC,IAAI;MAAC,UAAU;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACd,MAAC,IAAI,CAAC,IAAI;MAAC,EAAE,EAAC,GAAG;MAAC,EAAE,EAAC,aAAa;MAAC,IAAI;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACpC,IAAI,CAAClD,KAAK,CAACW,cAAc,GACxB,MAAC,IAAI;MACH,OAAO,EAAE,IAAI,CAACM,MAAO;MACrB,IAAI,EAAEzC,QAAS;MACf,KAAK,EAAC,MAAM;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EACZ,GAEF;MAAK,KAAK,EAAE;QAAE0G,KAAK,EAAE;MAAO,CAAE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAC/B,CACS,EACZ,MAAC,IAAI,CAAC,IAAI;MAAC,EAAE,EAAC,GAAG;MAAC,IAAI;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACpB,MAAC,IAAI;MACH,IAAI,EAAEzG,OAAQ;MACd,EAAE,EAAC,aAAa;MAChB,SAAS,EAAC,SAAS;MACnB,IAAI,EAAC,MAAM;MACX,KAAK,EAAE,IAAI,CAACsB,KAAK,CAACmC,IAAI,CAACC,aAAa,CAACtD,QAAQ,CAACG,IAAI,CAAE;MACpD,OAAO,EAAE,IAAI,CAACmC,MAAO;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EACrB,CACQ,EACZ,MAAC,IAAI,CAAC,IAAI;MAAC,EAAE,EAAC,GAAG;MAAC,EAAE,EAAC,aAAa;MAAC,IAAI;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACpC,IAAI,CAACnB,KAAK,CAACY,cAAc,GACxB,MAAC,IAAI;MACH,OAAO,EAAE,IAAI,CAACM,MAAO;MACrB,IAAI,EAAE3C,QAAS;MACf,KAAK,EAAC,MAAM;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EACZ,GAEF;MAAK,KAAK,EAAE;QAAE2G,KAAK,EAAE;MAAO,CAAE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAC/B,CACS,CACP,CACU,CACT,CACC,CAElB,CACa,CACF,EACf,IAAI,CAAClF,KAAK,CAACC,QAAQ,IAClB,MAAC,MAAM;MAAC,IAAI,EAAE8D,QAAQ,CAACC,cAAc,CAAC,SAAS,CAAE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAC/C,MAAC,OAAO;MACN,QAAQ,EAAE,IAAI,CAACjE,KAAK,CAACoF,QAAS;MAC9B,sBAAsB;MACtB,KAAK,EACH,4BACE,MAAC,IAAI;QAAC,EAAE,EAAC,eAAe;QAAC,SAAS,EAAC,MAAM;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,GACvC,MAAC,IAAI;QACH,IAAI,EAAE9G,OAAQ;QACd,cAAY,IAAI,CAAC0B,KAAK,CAACmC,IAAI,CAACC,aAAa,CAACtD,QAAQ,CAACI,IAAI,CAAE;QACzD,SAAS,EAAC,kBAAkB;QAC5B,IAAI,EAAC,MAAM;QACX,KAAK,EAAE,IAAI,CAACc,KAAK,CAACmC,IAAI,CAACC,aAAa,CAACtD,QAAQ,CAACI,IAAI,CAAE;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EACpD,CACG,CAEV;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EACD,CAEL,CACS;EAEhB;AACF;AAAC,gBAjoBKY,gBAAgB,eAMD;EACjBnB,eAAe,EAAEtB,SAAS,CAACgI,IAAI,CAACC,UAAU;EAC1C1G,kBAAkB,EAAEvB,SAAS,CAACgI,IAAI,CAACC,UAAU;EAC7CzC,YAAY,EAAExF,SAAS,CAACkI,OAAO,CAC7BlI,SAAS,CAACmI,KAAK,CAAC;IACdX,WAAW,EAAExH,SAAS,CAACoI,MAAM;IAC7BrC,EAAE,EAAE/F,SAAS,CAACoI,MAAM;IACpBC,IAAI,EAAErI,SAAS,CAACsI,MAAM;IACtBhC,IAAI,EAAEtG,SAAS,CAACoI,MAAM;IACtBxC,QAAQ,EAAE5F,SAAS,CAACoI;EACtB,CAAC,CAAC,CACH;EACD5D,aAAa,EAAExE,SAAS,CAACmI,KAAK,CAAC;IAC7BzD,MAAM,EAAE1E,SAAS,CAACuI,IAAI;IACtB9D,OAAO,EAAEzE,SAAS,CAACuI;EACrB,CAAC,CAAC,CAACN;AACL,CAAC;AA6mBH,eAAe/H,OAAO,CACpBU,UAAU,EACVX,OAAO,CACL,CAAC2C,KAAK,EAAED,KAAK,MAAM;EACjBoF,QAAQ,EAAEpF,KAAK,CAAC6F,QAAQ,CAACT,QAAQ;EACjCvC,YAAY,EAAE5C,KAAK,CAAC4C,YAAY,CAACiD,qBAAqB;EACtDjE,aAAa,EAAE5B,KAAK,CAAC4C,YAAY,CAACkD;AACpC,CAAC,CAAC,EACF;EAAEpH,eAAe;EAAEC;AAAmB,CAAC,CACxC,CACF,CAACkB,gBAAgB,CAAC"},"metadata":{"react-intl":{"messages":[{"id":"Success","defaultMessage":"Success"},{"id":"Error","defaultMessage":"Error"},{"id":"Undo","defaultMessage":"Undo"},{"id":"Back","defaultMessage":"Back"},{"id":"Default","defaultMessage":"Default"},{"id":"Sort By","defaultMessage":"Sort by"},{"id":"Sorted","defaultMessage":"Sorted"},{"id":"Unsorted","defaultMessage":"Unsorted"},{"id":"Sort transactions by User-Name, Path or Date","defaultMessage":"Sort transactions by User-Name, Path or Date"},{"id":"Failed To Undo Transactions","defaultMessage":"Failed to undo transactions"},{"id":"Successfully Undone Transactions","defaultMessage":"Successfully undone transactions"},{"id":"Transactions Have Been Sorted","defaultMessage":"Transactions have been sorted"},{"id":"Transactions Have Been Unsorted","defaultMessage":"Transactions have been unsorted"},{"id":"No Transactions Selected","defaultMessage":"No transactions selected"},{"id":"No Transactions Selected To Do Undo","defaultMessage":"No transactions selected to do undo"},{"id":"Undo Controlpanel","defaultMessage":"Undo Controlpanel"},{"id":"Transactions","defaultMessage":"Transactions"},{"id":"No Transactions Found","defaultMessage":"No transactions found"},{"id":"Transactions Checkbox","defaultMessage":"#"},{"id":"What","defaultMessage":"What"},{"id":"Who","defaultMessage":"Who"},{"id":"When","defaultMessage":"When"},{"id":"Note","defaultMessage":"Note"}]}},"sourceType":"module","externalDependencies":[]}