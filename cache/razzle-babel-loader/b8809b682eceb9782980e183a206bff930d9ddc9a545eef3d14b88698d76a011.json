{"ast":null,"code":"import _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _cloneDeep from \"lodash/cloneDeep\";\nimport config from '@plone/volto/registry';\nexport var addTypeSelect = function addTypeSelect(_ref) {\n  var intl = _ref.intl,\n    schema = _ref.schema,\n    extensionName = _ref.extensionName,\n    messages = _ref.messages;\n  schema = _cloneDeep(schema);\n  var field = '@type';\n  var extensions = config.blocks.blocksConfig.listing.extensions;\n  var variations = extensions[extensionName];\n  schema.properties[field] = {\n    title: intl.formatMessage(messages.title),\n    choices: variations.map(function (_ref2) {\n      var id = _ref2.id,\n        title = _ref2.title;\n      return [id, title];\n    }),\n    defaultValue: variations.find(function (_ref3) {\n      var isDefault = _ref3.isDefault;\n      return isDefault;\n    }).id\n  };\n  schema.fieldsets[0].fields.unshift(field);\n  return schema;\n};\n\n// Creates a factory that can trigger schemaEnhancer for a given extension\nexport var schemaEnhancerFactory = function schemaEnhancerFactory(_ref4) {\n  var extensionName = _ref4.extensionName,\n    messages = _ref4.messages,\n    _ref4$blockType = _ref4.blockType,\n    blockType = _ref4$blockType === void 0 ? 'listing' : _ref4$blockType,\n    _ref4$extensionField = _ref4.extensionField,\n    extensionField = _ref4$extensionField === void 0 ? '@type' : _ref4$extensionField;\n  return function (_ref5) {\n    var _formData$itemModel, _activeItem;\n    var originalSchema = _ref5.schema,\n      formData = _ref5.formData,\n      intl = _ref5.intl;\n    //\n    // the attribute name that's stored in the block data\n    // it identifies the type of extension that's\n    // applied. Similar in scope, for example, with the block @type\n\n    var blockConfig = config.blocks.blocksConfig[blockType];\n    var extensions = blockConfig.extensions;\n    var templates = extensions[extensionName];\n    var activeItemName = formData === null || formData === void 0 ? void 0 : (_formData$itemModel = formData.itemModel) === null || _formData$itemModel === void 0 ? void 0 : _formData$itemModel[extensionField]; // TODO: don't hardcode itemModel\n    var activeItem = templates === null || templates === void 0 ? void 0 : templates.find(function (item) {\n      return item.id === activeItemName;\n    });\n    if (!activeItem) activeItem = templates === null || templates === void 0 ? void 0 : templates.find(function (item) {\n      return item.isDefault;\n    });\n    var schemaEnhancer = (_activeItem = activeItem) === null || _activeItem === void 0 ? void 0 : _activeItem['schemaEnhancer'];\n    var schema = schemaEnhancer ? schemaEnhancer({\n      schema: _cloneDeep(originalSchema),\n      formData: formData,\n      intl: intl\n    }) : _cloneDeep(originalSchema);\n    return schema;\n  };\n};\nexport var DefaultCardModelSchema = {\n  title: 'Card Model',\n  fieldsets: [{\n    id: 'default',\n    title: 'Default',\n    fields: []\n  }],\n  properties: {},\n  required: []\n};\nexport var getVoltoStyles = function getVoltoStyles(props) {\n  var styles = props ? props : {};\n  var output = {};\n  for (var _i = 0, _Object$entries = Object.entries(styles); _i < _Object$entries.length; _i++) {\n    var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n      key = _Object$entries$_i[0],\n      value = _Object$entries$_i[1];\n    if (styles[key] === true) {\n      output[key] = key;\n    } else {\n      output[value] = value;\n    }\n  }\n  return output;\n};\nexport function composeSchema() {\n  var enhancers = Array.from(arguments);\n  var composer = function composer(args) {\n    var props = enhancers.reduce(function (acc, enhancer) {\n      return enhancer ? _objectSpread(_objectSpread({}, acc), {}, {\n        schema: enhancer(acc)\n      }) : acc;\n    }, _objectSpread({}, args));\n    return props.schema;\n  };\n  return composer;\n}","map":{"version":3,"names":["config","addTypeSelect","intl","schema","extensionName","messages","field","extensions","blocks","blocksConfig","listing","variations","properties","title","formatMessage","choices","map","id","defaultValue","find","isDefault","fieldsets","fields","unshift","schemaEnhancerFactory","blockType","extensionField","originalSchema","formData","blockConfig","templates","activeItemName","itemModel","activeItem","item","schemaEnhancer","DefaultCardModelSchema","required","getVoltoStyles","props","styles","output","Object","entries","key","value","composeSchema","enhancers","Array","from","arguments","composer","args","reduce","acc","enhancer"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-listing-block/src/schema-utils.js"],"sourcesContent":["import { cloneDeep } from 'lodash';\nimport config from '@plone/volto/registry';\n\nexport const addTypeSelect = ({ intl, schema, extensionName, messages }) => {\n  schema = cloneDeep(schema);\n  const field = '@type';\n  const extensions = config.blocks.blocksConfig.listing.extensions;\n  const variations = extensions[extensionName];\n  schema.properties[field] = {\n    title: intl.formatMessage(messages.title),\n    choices: variations.map(({ id, title }) => [id, title]),\n    defaultValue: variations.find(({ isDefault }) => isDefault).id,\n  };\n  schema.fieldsets[0].fields.unshift(field);\n\n  return schema;\n};\n\n// Creates a factory that can trigger schemaEnhancer for a given extension\nexport const schemaEnhancerFactory = ({\n  extensionName,\n  messages,\n  blockType = 'listing',\n  extensionField = '@type',\n}) => ({ schema: originalSchema, formData, intl }) => {\n  //\n  // the attribute name that's stored in the block data\n  // it identifies the type of extension that's\n  // applied. Similar in scope, for example, with the block @type\n\n  const blockConfig = config.blocks.blocksConfig[blockType];\n  const extensions = blockConfig.extensions;\n  const templates = extensions[extensionName];\n\n  const activeItemName = formData?.itemModel?.[extensionField]; // TODO: don't hardcode itemModel\n  let activeItem = templates?.find((item) => item.id === activeItemName);\n  if (!activeItem) activeItem = templates?.find((item) => item.isDefault);\n\n  const schemaEnhancer = activeItem?.['schemaEnhancer'];\n\n  let schema = schemaEnhancer\n    ? schemaEnhancer({ schema: cloneDeep(originalSchema), formData, intl })\n    : cloneDeep(originalSchema);\n\n  return schema;\n};\n\nexport const DefaultCardModelSchema = {\n  title: 'Card Model',\n  fieldsets: [\n    {\n      id: 'default',\n      title: 'Default',\n      fields: [],\n    },\n  ],\n  properties: {},\n  required: [],\n};\n\nexport const getVoltoStyles = (props) => {\n  const styles = props ? props : {};\n  const output = {};\n  for (const [key, value] of Object.entries(styles)) {\n    if (styles[key] === true) {\n      output[key] = key;\n    } else {\n      output[value] = value;\n    }\n  }\n  return output;\n};\n\nexport function composeSchema() {\n  const enhancers = Array.from(arguments);\n  const composer = (args) => {\n    const props = enhancers.reduce(\n      (acc, enhancer) => (enhancer ? { ...acc, schema: enhancer(acc) } : acc),\n      { ...args },\n    );\n    return props.schema;\n  };\n  return composer;\n}\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}