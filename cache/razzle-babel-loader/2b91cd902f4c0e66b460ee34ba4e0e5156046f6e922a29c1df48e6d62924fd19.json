{"ast":null,"code":"import _classCallCheck from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Preferences/ChangePassword.jsx\";\nvar __jsx = React.createElement;\n/**\n * Change password component.\n * @module components/manage/Preferences/ChangePassword\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from '@plone/volto/helpers';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Portal } from 'react-portal';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { Container } from 'semantic-ui-react';\nimport jwtDecode from 'jwt-decode';\nimport { toast } from 'react-toastify';\nimport { Form, Icon, Toast, Toolbar } from '@plone/volto/components';\nimport { updatePassword } from '@plone/volto/actions';\nimport { getBaseUrl } from '@plone/volto/helpers';\nimport backSVG from '@plone/volto/icons/back.svg';\nvar messages = defineMessages({\n  changePassword: {\n    \"id\": \"Change Password\",\n    \"defaultMessage\": \"Change Password\"\n  },\n  \"default\": {\n    \"id\": \"Default\",\n    \"defaultMessage\": \"Default\"\n  },\n  oldPasswordTitle: {\n    \"id\": \"Current password\",\n    \"defaultMessage\": \"Current password\"\n  },\n  oldPasswordDescription: {\n    \"id\": \"Enter your current password.\",\n    \"defaultMessage\": \"Enter your current password.\"\n  },\n  newPasswordTitle: {\n    \"id\": \"New password\",\n    \"defaultMessage\": \"New password\"\n  },\n  newPasswordDescription: {\n    \"id\": \"Enter your new password. Minimum 5 characters.\",\n    \"defaultMessage\": \"Enter your new password. Minimum 5 characters.\"\n  },\n  newPasswordRepeatTitle: {\n    \"id\": \"Confirm password\",\n    \"defaultMessage\": \"Confirm password\"\n  },\n  newPasswordRepeatDescription: {\n    \"id\": \"Re-enter the password. Make sure the passwords are identical.\",\n    \"defaultMessage\": \"Re-enter the password. Make sure the passwords are identical.\"\n  },\n  saved: {\n    \"id\": \"Changes saved\",\n    \"defaultMessage\": \"Changes saved\"\n  },\n  back: {\n    \"id\": \"Back\",\n    \"defaultMessage\": \"Back\"\n  },\n  success: {\n    \"id\": \"Success\",\n    \"defaultMessage\": \"Success\"\n  }\n});\n\n/**\n * ChangePassword class.\n * @class ChangePassword\n * @extends Component\n */\nvar ChangePassword = /*#__PURE__*/function (_Component) {\n  _inherits(ChangePassword, _Component);\n  var _super = _createSuper(ChangePassword);\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ChangePassword\n   */\n  function ChangePassword(props) {\n    var _this;\n    _classCallCheck(this, ChangePassword);\n    _this = _super.call(this, props);\n    _this.onCancel = _this.onCancel.bind(_assertThisInitialized(_this));\n    _this.onSubmit = _this.onSubmit.bind(_assertThisInitialized(_this));\n    _this.state = {\n      isClient: false\n    };\n    return _this;\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  _createClass(ChangePassword, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        isClient: true\n      });\n    }\n\n    /**\n     * Submit handler\n     * @method onSubmit\n     * @param {object} data Form data.\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(data) {\n      if (data.newPassword === data.newPasswordRepeat) {\n        this.props.updatePassword(this.props.userId, data.oldPassword, data.newPassword);\n        toast.success(__jsx(Toast, {\n          success: true,\n          title: this.props.intl.formatMessage(messages.success),\n          content: this.props.intl.formatMessage(messages.saved),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 9\n          }\n        }));\n      }\n    }\n\n    /**\n     * Cancel handler\n     * @method onCancel\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onCancel\",\n    value: function onCancel() {\n      this.props.history.goBack();\n    }\n\n    /**\n     * Render method.\n     * @method render\n     * @returns {string} Markup for the component.\n     */\n  }, {\n    key: \"render\",\n    value: function render() {\n      return __jsx(Container, {\n        id: \"page-change-password\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 7\n        }\n      }, __jsx(Helmet, {\n        title: this.props.intl.formatMessage(messages.changePassword),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 9\n        }\n      }), __jsx(Form, {\n        schema: {\n          fieldsets: [{\n            id: 'default',\n            title: this.props.intl.formatMessage(messages[\"default\"]),\n            fields: ['oldPassword', 'newPassword', 'newPasswordRepeat']\n          }],\n          properties: {\n            oldPassword: {\n              description: this.props.intl.formatMessage(messages.oldPasswordDescription),\n              title: this.props.intl.formatMessage(messages.oldPasswordTitle),\n              type: 'string',\n              widget: 'password'\n            },\n            newPassword: {\n              description: this.props.intl.formatMessage(messages.newPasswordDescription),\n              title: this.props.intl.formatMessage(messages.newPasswordTitle),\n              type: 'string',\n              widget: 'password'\n            },\n            newPasswordRepeat: {\n              description: this.props.intl.formatMessage(messages.newPasswordRepeatDescription),\n              title: this.props.intl.formatMessage(messages.newPasswordRepeatTitle),\n              type: 'string',\n              widget: 'password'\n            }\n          },\n          required: ['oldPassword', 'newPassword', 'newPasswordRepeat']\n        },\n        onSubmit: this.onSubmit,\n        onCancel: this.onCancel,\n        loading: this.props.loading,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 9\n        }\n      }), this.state.isClient && __jsx(Portal, {\n        node: document.getElementById('toolbar'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 11\n        }\n      }, __jsx(Toolbar, {\n        pathname: this.props.pathname,\n        hideDefaultViewButtons: true,\n        inner: __jsx(Link, {\n          to: \"\".concat(getBaseUrl(this.props.pathname)),\n          className: \"item\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 17\n          }\n        }, __jsx(Icon, {\n          name: backSVG,\n          className: \"contents circled\",\n          size: \"30px\",\n          title: this.props.intl.formatMessage(messages.back),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 19\n          }\n        })),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 13\n        }\n      })));\n    }\n  }]);\n  return ChangePassword;\n}(Component);\n_defineProperty(ChangePassword, \"propTypes\", {\n  userId: PropTypes.string.isRequired,\n  loading: PropTypes.bool.isRequired,\n  updatePassword: PropTypes.func.isRequired,\n  pathname: PropTypes.string.isRequired\n});\nexport default compose(withRouter, injectIntl, connect(function (state, props) {\n  return {\n    userId: state.userSession.token ? jwtDecode(state.userSession.token).sub : '',\n    loading: state.users.update_password.loading,\n    pathname: props.location.pathname\n  };\n}, {\n  updatePassword: updatePassword\n}))(ChangePassword);","map":{"version":3,"names":["React","Component","PropTypes","Helmet","connect","compose","Link","withRouter","Portal","defineMessages","injectIntl","Container","jwtDecode","toast","Form","Icon","Toast","Toolbar","updatePassword","getBaseUrl","backSVG","messages","changePassword","oldPasswordTitle","oldPasswordDescription","newPasswordTitle","newPasswordDescription","newPasswordRepeatTitle","newPasswordRepeatDescription","saved","back","success","ChangePassword","props","onCancel","bind","onSubmit","state","isClient","setState","data","newPassword","newPasswordRepeat","userId","oldPassword","intl","formatMessage","history","goBack","fieldsets","id","title","fields","properties","description","type","widget","required","loading","document","getElementById","pathname","string","isRequired","bool","func","userSession","token","sub","users","update_password","location"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Preferences/ChangePassword.jsx"],"sourcesContent":["/**\n * Change password component.\n * @module components/manage/Preferences/ChangePassword\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from '@plone/volto/helpers';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Portal } from 'react-portal';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { Container } from 'semantic-ui-react';\nimport jwtDecode from 'jwt-decode';\nimport { toast } from 'react-toastify';\n\nimport { Form, Icon, Toast, Toolbar } from '@plone/volto/components';\nimport { updatePassword } from '@plone/volto/actions';\nimport { getBaseUrl } from '@plone/volto/helpers';\n\nimport backSVG from '@plone/volto/icons/back.svg';\n\nconst messages = defineMessages({\n  changePassword: {\n    id: 'Change Password',\n    defaultMessage: 'Change Password',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  oldPasswordTitle: {\n    id: 'Current password',\n    defaultMessage: 'Current password',\n  },\n  oldPasswordDescription: {\n    id: 'Enter your current password.',\n    defaultMessage: 'Enter your current password.',\n  },\n  newPasswordTitle: {\n    id: 'New password',\n    defaultMessage: 'New password',\n  },\n  newPasswordDescription: {\n    id: 'Enter your new password. Minimum 5 characters.',\n    defaultMessage: 'Enter your new password. Minimum 5 characters.',\n  },\n  newPasswordRepeatTitle: {\n    id: 'Confirm password',\n    defaultMessage: 'Confirm password',\n  },\n  newPasswordRepeatDescription: {\n    id: 'Re-enter the password. Make sure the passwords are identical.',\n    defaultMessage:\n      'Re-enter the password. Make sure the passwords are identical.',\n  },\n  saved: {\n    id: 'Changes saved',\n    defaultMessage: 'Changes saved',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  success: {\n    id: 'Success',\n    defaultMessage: 'Success',\n  },\n});\n\n/**\n * ChangePassword class.\n * @class ChangePassword\n * @extends Component\n */\nclass ChangePassword extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    userId: PropTypes.string.isRequired,\n    loading: PropTypes.bool.isRequired,\n    updatePassword: PropTypes.func.isRequired,\n    pathname: PropTypes.string.isRequired,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ChangePassword\n   */\n  constructor(props) {\n    super(props);\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.state = { isClient: false };\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.setState({ isClient: true });\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    if (data.newPassword === data.newPasswordRepeat) {\n      this.props.updatePassword(\n        this.props.userId,\n        data.oldPassword,\n        data.newPassword,\n      );\n      toast.success(\n        <Toast\n          success\n          title={this.props.intl.formatMessage(messages.success)}\n          content={this.props.intl.formatMessage(messages.saved)}\n        />,\n      );\n    }\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.props.history.goBack();\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    return (\n      <Container id=\"page-change-password\">\n        <Helmet\n          title={this.props.intl.formatMessage(messages.changePassword)}\n        />\n        <Form\n          schema={{\n            fieldsets: [\n              {\n                id: 'default',\n                title: this.props.intl.formatMessage(messages.default),\n                fields: ['oldPassword', 'newPassword', 'newPasswordRepeat'],\n              },\n            ],\n            properties: {\n              oldPassword: {\n                description: this.props.intl.formatMessage(\n                  messages.oldPasswordDescription,\n                ),\n                title: this.props.intl.formatMessage(messages.oldPasswordTitle),\n                type: 'string',\n                widget: 'password',\n              },\n              newPassword: {\n                description: this.props.intl.formatMessage(\n                  messages.newPasswordDescription,\n                ),\n                title: this.props.intl.formatMessage(messages.newPasswordTitle),\n                type: 'string',\n                widget: 'password',\n              },\n              newPasswordRepeat: {\n                description: this.props.intl.formatMessage(\n                  messages.newPasswordRepeatDescription,\n                ),\n                title: this.props.intl.formatMessage(\n                  messages.newPasswordRepeatTitle,\n                ),\n                type: 'string',\n                widget: 'password',\n              },\n            },\n            required: ['oldPassword', 'newPassword', 'newPasswordRepeat'],\n          }}\n          onSubmit={this.onSubmit}\n          onCancel={this.onCancel}\n          loading={this.props.loading}\n        />\n        {this.state.isClient && (\n          <Portal node={document.getElementById('toolbar')}>\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={\n                <Link\n                  to={`${getBaseUrl(this.props.pathname)}`}\n                  className=\"item\"\n                >\n                  <Icon\n                    name={backSVG}\n                    className=\"contents circled\"\n                    size=\"30px\"\n                    title={this.props.intl.formatMessage(messages.back)}\n                  />\n                </Link>\n              }\n            />\n          </Portal>\n        )}\n      </Container>\n    );\n  }\n}\n\nexport default compose(\n  withRouter,\n  injectIntl,\n  connect(\n    (state, props) => ({\n      userId: state.userSession.token\n        ? jwtDecode(state.userSession.token).sub\n        : '',\n      loading: state.users.update_password.loading,\n      pathname: props.location.pathname,\n    }),\n    { updatePassword },\n  ),\n)(ChangePassword);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Change Password","defaultMessage":"Change Password"},{"id":"Default","defaultMessage":"Default"},{"id":"Current password","defaultMessage":"Current password"},{"id":"Enter your current password.","defaultMessage":"Enter your current password."},{"id":"New password","defaultMessage":"New password"},{"id":"Enter your new password. Minimum 5 characters.","defaultMessage":"Enter your new password. Minimum 5 characters."},{"id":"Confirm password","defaultMessage":"Confirm password"},{"id":"Re-enter the password. Make sure the passwords are identical.","defaultMessage":"Re-enter the password. Make sure the passwords are identical."},{"id":"Changes saved","defaultMessage":"Changes saved"},{"id":"Back","defaultMessage":"Back"},{"id":"Success","defaultMessage":"Success"}]}},"sourceType":"module","externalDependencies":[]}