{"ast":null,"code":"import _toConsumableArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-block-image-cards/src/ImageCards/displays/Cards.jsx\",\n  _this = this;\nvar __jsx = React.createElement;\nimport DefaultImageSVG from '@plone/volto/components/manage/Blocks/Listing/default-image.svg';\nimport React from 'react';\nimport cx from 'classnames';\nimport { Card, Icon, Message } from 'semantic-ui-react';\nimport { UniversalLink } from '@plone/volto/components';\nimport { serializeNodes } from '@plone/volto-slate/editor/render';\nimport { getScaleUrl, getPath } from '../utils';\nimport '@eeacms/volto-block-image-cards/ImageCards/css/cards.less';\nvar alignmentTypes = {\n  left: 'left',\n  right: 'right',\n  center: 'centered',\n  full: 'left'\n};\nvar Cards = function Cards(props) {\n  var data = props.data,\n    editable = props.editable;\n  var align = data.align,\n    cards = data.cards,\n    image_scale = data.image_scale,\n    _data$gridSize = data.gridSize,\n    gridSize = _data$gridSize === void 0 ? 'one' : _data$gridSize,\n    _data$theme = data.theme,\n    theme = _data$theme === void 0 ? 'default' : _data$theme;\n  var makeImage = function makeImage(item) {\n    var attachedimage = item.attachedimage;\n    return __jsx(\"img\", {\n      src: getScaleUrl(getPath(attachedimage), image_scale || 'preview') || DefaultImageSVG,\n      alt: item.title,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 7\n      }\n    });\n  };\n  var makeTextBody = function makeTextBody(item) {\n    return __jsx(React.Fragment, null, __jsx(Card.Content, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 7\n      }\n    }, __jsx(Card.Header, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }\n    }, item.title ? item.title : item.id), item.meta && __jsx(Card.Meta, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 23\n      }\n    }, serializeNodes(item.meta)), item.text && __jsx(Card.Description, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }\n    }, serializeNodes(item.text))), item.link && __jsx(Card.Content, {\n      extra: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }, __jsx(UniversalLink, {\n      href: item.link,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }\n    }, __jsx(Icon, {\n      name: \"linkify\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }\n    }), item.linkTitle || item.link)));\n  };\n  return cards && cards.length > 0 ? __jsx(\"div\", {\n    className: cx('ui fluid cards', gridSize),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, cards.map(function (item) {\n    return __jsx(Card, {\n      key: item['@id'],\n      className: cx(alignmentTypes[align] || 'left', theme),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }\n    }, makeImage(item), makeTextBody(item));\n  })) : __jsx(React.Fragment, null, editable ? __jsx(Message, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 19\n    }\n  }, \"No image cards\") : '');\n};\n_c = Cards;\nCards.schema = function () {\n  return {\n    title: 'Image Card',\n    fieldsets: [{\n      id: 'default',\n      title: 'Default',\n      fields: ['title', 'meta', 'text', 'attachedimage', 'link', 'linkTitle', 'copyright']\n    }],\n    properties: {\n      title: {\n        type: 'string',\n        title: 'Title'\n      },\n      meta: {\n        widget: 'slate_richtext',\n        title: 'Meta data'\n      },\n      text: {\n        widget: 'slate_richtext',\n        title: 'Text'\n      },\n      link: {\n        widget: 'url',\n        title: 'Link'\n      },\n      linkTitle: {\n        type: 'string',\n        title: 'Link title'\n      },\n      attachedimage: {\n        widget: 'attachedimage',\n        title: 'Image'\n      },\n      copyright: {\n        widget: 'slate_richtext',\n        title: 'Copyright'\n      }\n    },\n    required: ['attachedimage']\n  };\n};\nCards.schemaExtender = function (schema) {\n  return _objectSpread(_objectSpread({}, schema), {}, {\n    fieldsets: [].concat(_toConsumableArray(schema.fieldsets), [{\n      id: 'cards_grid',\n      title: 'Cards grid',\n      fields: ['gridSize', 'theme']\n    }]),\n    properties: _objectSpread(_objectSpread({}, schema.properties), {}, {\n      gridSize: {\n        title: 'Grid Size',\n        choices: [['one', 'One'], ['two', 'Two'], ['three', 'Three'], ['four', 'Four']],\n        factory: 'Choice',\n        type: 'string'\n      },\n      theme: {\n        title: 'Theme',\n        choices: [['default', 'Default'], ['primary', 'Primary'], ['secondary', 'Secondary'], ['tertiary', 'Tertiary']]\n      }\n    })\n  });\n};\nexport default Cards;\nvar _c;\n$RefreshReg$(_c, \"Cards\");","map":{"version":3,"names":["DefaultImageSVG","React","cx","Card","Icon","Message","UniversalLink","serializeNodes","getScaleUrl","getPath","alignmentTypes","left","right","center","full","Cards","props","data","editable","align","cards","image_scale","gridSize","theme","makeImage","item","attachedimage","title","makeTextBody","id","meta","text","link","linkTitle","length","map","schema","fieldsets","fields","properties","type","widget","copyright","required","schemaExtender","choices","factory"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-block-image-cards/src/ImageCards/displays/Cards.jsx"],"sourcesContent":["import DefaultImageSVG from '@plone/volto/components/manage/Blocks/Listing/default-image.svg';\nimport React from 'react';\nimport cx from 'classnames';\nimport { Card, Icon, Message } from 'semantic-ui-react';\nimport { UniversalLink } from '@plone/volto/components';\nimport { serializeNodes } from '@plone/volto-slate/editor/render';\nimport { getScaleUrl, getPath } from '../utils';\n\nimport '@eeacms/volto-block-image-cards/ImageCards/css/cards.less';\n\nconst alignmentTypes = {\n  left: 'left',\n  right: 'right',\n  center: 'centered',\n  full: 'left',\n};\n\nconst Cards = (props) => {\n  const { data, editable } = props;\n  const {\n    align,\n    cards,\n    image_scale,\n    gridSize = 'one',\n    theme = 'default',\n  } = data;\n\n  const makeImage = (item) => {\n    const { attachedimage } = item;\n    return (\n      <img\n        src={\n          getScaleUrl(getPath(attachedimage), image_scale || 'preview') ||\n          DefaultImageSVG\n        }\n        alt={item.title}\n      />\n    );\n  };\n\n  const makeTextBody = (item) => (\n    <>\n      <Card.Content>\n        <Card.Header>{item.title ? item.title : item.id}</Card.Header>\n        {item.meta && <Card.Meta>{serializeNodes(item.meta)}</Card.Meta>}\n        {item.text && (\n          <Card.Description>{serializeNodes(item.text)}</Card.Description>\n        )}\n      </Card.Content>\n      {item.link && (\n        <Card.Content extra>\n          <UniversalLink href={item.link}>\n            <Icon name=\"linkify\" />\n            {item.linkTitle || item.link}\n          </UniversalLink>\n        </Card.Content>\n      )}\n    </>\n  );\n\n  return cards && cards.length > 0 ? (\n    <div className={cx('ui fluid cards', gridSize)}>\n      {cards.map((item) => (\n        <Card\n          key={item['@id']}\n          className={cx(alignmentTypes[align] || 'left', theme)}\n        >\n          {makeImage(item)}\n          {makeTextBody(item)}\n        </Card>\n      ))}\n    </div>\n  ) : (\n    <>{editable ? <Message>No image cards</Message> : ''}</>\n  );\n};\n\nCards.schema = () => ({\n  title: 'Image Card',\n  fieldsets: [\n    {\n      id: 'default',\n      title: 'Default',\n      fields: [\n        'title',\n        'meta',\n        'text',\n        'attachedimage',\n        'link',\n        'linkTitle',\n        'copyright',\n      ],\n    },\n  ],\n\n  properties: {\n    title: {\n      type: 'string',\n      title: 'Title',\n    },\n    meta: {\n      widget: 'slate_richtext',\n      title: 'Meta data',\n    },\n    text: {\n      widget: 'slate_richtext',\n      title: 'Text',\n    },\n    link: {\n      widget: 'url',\n      title: 'Link',\n    },\n    linkTitle: {\n      type: 'string',\n      title: 'Link title',\n    },\n    attachedimage: {\n      widget: 'attachedimage',\n      title: 'Image',\n    },\n    copyright: {\n      widget: 'slate_richtext',\n      title: 'Copyright',\n    },\n  },\n\n  required: ['attachedimage'],\n});\n\nCards.schemaExtender = (schema) => {\n  return {\n    ...schema,\n    fieldsets: [\n      ...schema.fieldsets,\n      {\n        id: 'cards_grid',\n        title: 'Cards grid',\n        fields: ['gridSize', 'theme'],\n      },\n    ],\n    properties: {\n      ...schema.properties,\n      gridSize: {\n        title: 'Grid Size',\n        choices: [\n          ['one', 'One'],\n          ['two', 'Two'],\n          ['three', 'Three'],\n          ['four', 'Four'],\n        ],\n        factory: 'Choice',\n        type: 'string',\n      },\n      theme: {\n        title: 'Theme',\n        choices: [\n          ['default', 'Default'],\n          ['primary', 'Primary'],\n          ['secondary', 'Secondary'],\n          ['tertiary', 'Tertiary'],\n        ],\n      },\n    },\n  };\n};\n\nexport default Cards;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}