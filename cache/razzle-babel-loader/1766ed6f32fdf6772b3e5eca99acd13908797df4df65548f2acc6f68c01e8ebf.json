{"ast":null,"code":"import _keys from \"lodash/keys\";\nimport _values from \"lodash/values\";\nimport _assign from \"lodash/assign\";\nimport countries from 'i18n-iso-countries';\nexport function getCountryCode(countryName = '') {\n  return countries.getAlpha2Code(countryName, 'en');\n}\nexport function makeSearchUrl(data, text, password, countryCode) {\n  const {\n    featureClass,\n    continents = ''\n  } = data;\n  const filterFeature = {\n    country: 'A',\n    stream: 'H',\n    parks: 'L',\n    city: 'P',\n    road: 'R',\n    spot: 'S',\n    mountain: 'T',\n    undersea: 'U',\n    forest: 'V'\n  };\n  if (featureClass) {\n    let url = Object.keys(filterFeature).map(item => {\n      if (featureClass.startsWith(item)) {\n        return `https://secure.geonames.org/searchJSON?q=${text}&country=${countryCode || ''}&featureClass=${filterFeature[item]}&continentCode=${continents}&maxRows=10&username=${password}`;\n      }\n      return undefined;\n    });\n    if (url.every(item => item === undefined)) return `https://secure.geonames.org/searchJSON?q=${text}&country=${countryCode || ''}&continentCode=${continents}&maxRows=10&username=${password}`;\n    return url.find(item => item !== undefined);\n  }\n  return `https://secure.geonames.org/searchJSON?q=${text}&country=${countryCode || ''}&continentCode=${continents}&maxRows=10&username=${password}`;\n}\nexport function getBioTags(biotags = {}) {\n  const bioRegions = Object.keys(biotags).map(item => ({\n    label: biotags[item].title,\n    value: item\n  }));\n  return bioRegions;\n}\nexport function getCountries(geoTags = {}) {\n  let countries = _assign({}, ..._values(geoTags));\n  return _keys(countries).filter(item => item !== 'title').map(item => ({\n    label: countries[item],\n    value: item\n  }));\n}","map":{"version":3,"names":["countries","getCountryCode","countryName","getAlpha2Code","makeSearchUrl","data","text","password","countryCode","featureClass","continents","filterFeature","country","stream","parks","city","road","spot","mountain","undersea","forest","url","Object","keys","map","item","startsWith","undefined","every","find","getBioTags","biotags","bioRegions","label","title","value","getCountries","geoTags","filter"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-widget-geolocation/src/components/manage/Widgets/util.js"],"sourcesContent":["import countries from 'i18n-iso-countries';\nimport { assign, values, keys } from 'lodash';\nexport function getCountryCode(countryName = '') {\n  return countries.getAlpha2Code(countryName, 'en');\n}\n\nexport function makeSearchUrl(data, text, password, countryCode) {\n  const { featureClass, continents = '' } = data;\n  const filterFeature = {\n    country: 'A',\n    stream: 'H',\n    parks: 'L',\n    city: 'P',\n    road: 'R',\n    spot: 'S',\n    mountain: 'T',\n    undersea: 'U',\n    forest: 'V',\n  };\n  if (featureClass) {\n    let url = Object.keys(filterFeature).map((item) => {\n      if (featureClass.startsWith(item)) {\n        return `https://secure.geonames.org/searchJSON?q=${text}&country=${\n          countryCode || ''\n        }&featureClass=${\n          filterFeature[item]\n        }&continentCode=${continents}&maxRows=10&username=${password}`;\n      }\n      return undefined;\n    });\n    if (url.every((item) => item === undefined))\n      return `https://secure.geonames.org/searchJSON?q=${text}&country=${\n        countryCode || ''\n      }&continentCode=${continents}&maxRows=10&username=${password}`;\n    return url.find((item) => item !== undefined);\n  }\n  return `https://secure.geonames.org/searchJSON?q=${text}&country=${\n    countryCode || ''\n  }&continentCode=${continents}&maxRows=10&username=${password}`;\n}\n\nexport function getBioTags(biotags = {}) {\n  const bioRegions = Object.keys(biotags).map((item) => ({\n    label: biotags[item].title,\n    value: item,\n  }));\n  return bioRegions;\n}\n\nexport function getCountries(geoTags = {}) {\n  let countries = assign({}, ...values(geoTags));\n  return keys(countries)\n    .filter((item) => item !== 'title')\n    .map((item) => ({\n      label: countries[item],\n      value: item,\n    }));\n}\n"],"mappings":";;;AAAA,OAAOA,SAAS,MAAM,oBAAoB;AAE1C,OAAO,SAASC,cAAc,CAACC,WAAW,GAAG,EAAE,EAAE;EAC/C,OAAOF,SAAS,CAACG,aAAa,CAACD,WAAW,EAAE,IAAI,CAAC;AACnD;AAEA,OAAO,SAASE,aAAa,CAACC,IAAI,EAAEC,IAAI,EAAEC,QAAQ,EAAEC,WAAW,EAAE;EAC/D,MAAM;IAAEC,YAAY;IAAEC,UAAU,GAAG;EAAG,CAAC,GAAGL,IAAI;EAC9C,MAAMM,aAAa,GAAG;IACpBC,OAAO,EAAE,GAAG;IACZC,MAAM,EAAE,GAAG;IACXC,KAAK,EAAE,GAAG;IACVC,IAAI,EAAE,GAAG;IACTC,IAAI,EAAE,GAAG;IACTC,IAAI,EAAE,GAAG;IACTC,QAAQ,EAAE,GAAG;IACbC,QAAQ,EAAE,GAAG;IACbC,MAAM,EAAE;EACV,CAAC;EACD,IAAIX,YAAY,EAAE;IAChB,IAAIY,GAAG,GAAGC,MAAM,CAACC,IAAI,CAACZ,aAAa,CAAC,CAACa,GAAG,CAAEC,IAAI,IAAK;MACjD,IAAIhB,YAAY,CAACiB,UAAU,CAACD,IAAI,CAAC,EAAE;QACjC,OAAQ,4CAA2CnB,IAAK,YACtDE,WAAW,IAAI,EAChB,iBACCG,aAAa,CAACc,IAAI,CACnB,kBAAiBf,UAAW,wBAAuBH,QAAS,EAAC;MAChE;MACA,OAAOoB,SAAS;IAClB,CAAC,CAAC;IACF,IAAIN,GAAG,CAACO,KAAK,CAAEH,IAAI,IAAKA,IAAI,KAAKE,SAAS,CAAC,EACzC,OAAQ,4CAA2CrB,IAAK,YACtDE,WAAW,IAAI,EAChB,kBAAiBE,UAAW,wBAAuBH,QAAS,EAAC;IAChE,OAAOc,GAAG,CAACQ,IAAI,CAAEJ,IAAI,IAAKA,IAAI,KAAKE,SAAS,CAAC;EAC/C;EACA,OAAQ,4CAA2CrB,IAAK,YACtDE,WAAW,IAAI,EAChB,kBAAiBE,UAAW,wBAAuBH,QAAS,EAAC;AAChE;AAEA,OAAO,SAASuB,UAAU,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;EACvC,MAAMC,UAAU,GAAGV,MAAM,CAACC,IAAI,CAACQ,OAAO,CAAC,CAACP,GAAG,CAAEC,IAAI,KAAM;IACrDQ,KAAK,EAAEF,OAAO,CAACN,IAAI,CAAC,CAACS,KAAK;IAC1BC,KAAK,EAAEV;EACT,CAAC,CAAC,CAAC;EACH,OAAOO,UAAU;AACnB;AAEA,OAAO,SAASI,YAAY,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;EACzC,IAAIrC,SAAS,GAAG,QAAO,CAAC,CAAC,EAAE,GAAG,QAAOqC,OAAO,CAAC,CAAC;EAC9C,OAAO,MAAKrC,SAAS,CAAC,CACnBsC,MAAM,CAAEb,IAAI,IAAKA,IAAI,KAAK,OAAO,CAAC,CAClCD,GAAG,CAAEC,IAAI,KAAM;IACdQ,KAAK,EAAEjC,SAAS,CAACyB,IAAI,CAAC;IACtBU,KAAK,EAAEV;EACT,CAAC,CAAC,CAAC;AACP"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}