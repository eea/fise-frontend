{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-block-style/src/Widgets/TextAlign.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport React from 'react';\nimport { Button } from 'semantic-ui-react';\nimport { FormFieldWrapper, Icon } from '@plone/volto/components';\nimport alignLeftSVG from '@plone/volto/icons/align-left.svg';\nimport alignRightSVG from '@plone/volto/icons/align-right.svg';\nimport alignJustifySVG from '@plone/volto/icons/align-justify.svg';\nimport alignCenterSVG from '@plone/volto/icons/align-center.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport { defineMessages, useIntl } from 'react-intl';\nexport const messages = defineMessages({\n  left: {\n    \"id\": \"Left\",\n    \"defaultMessage\": \"Left\"\n  },\n  right: {\n    \"id\": \"Right\",\n    \"defaultMessage\": \"Right\"\n  },\n  center: {\n    \"id\": \"Center\",\n    \"defaultMessage\": \"Center\"\n  },\n  justify: {\n    \"id\": \"Justify\",\n    \"defaultMessage\": \"Justify\"\n  },\n  '': {\n    \"id\": \"Clear selection\",\n    \"defaultMessage\": \"Clear selection\"\n  }\n});\nconst defaultActionsInfo = ({\n  intl\n}) => ({\n  left: [alignLeftSVG, intl.formatMessage(messages.left)],\n  right: [alignRightSVG, intl.formatMessage(messages.right)],\n  center: [alignCenterSVG, intl.formatMessage(messages.center)],\n  justify: [alignJustifySVG, intl.formatMessage(messages.justify)],\n  '': [clearSVG, intl.formatMessage(messages[''])]\n});\nexport default (props => {\n  const intl = useIntl();\n  const {\n    onChange,\n    id,\n    actions = ['left', 'right', 'center', 'justify'],\n    actionsInfoMap = {},\n    value\n  } = props;\n  // add clear selection button to the actions mapping if it's not already present\n  if (actions[actions.length - 1] !== '') {\n    actions.push('');\n  }\n  const actionsInfo = _objectSpread(_objectSpread({}, defaultActionsInfo({\n    intl\n  })), actionsInfoMap);\n  return __jsx(FormFieldWrapper, _extends({}, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }), __jsx(\"div\", {\n    className: \"align-tools\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, actions.map((action, index) => __jsx(Button.Group, {\n    key: `button-group-${action}-${index}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }, __jsx(Button, {\n    icon: true,\n    basic: true,\n    compact: true,\n    active: value === action,\n    \"aria-label\": actionsInfo[action][1],\n    onClick: () => {\n      onChange(id, action);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, __jsx(Icon, {\n    name: actionsInfo[action][0],\n    title: actionsInfo[action][1] || action,\n    size: \"24px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 15\n    }\n  }))))));\n});","map":{"version":3,"names":["React","Button","FormFieldWrapper","Icon","alignLeftSVG","alignRightSVG","alignJustifySVG","alignCenterSVG","clearSVG","defineMessages","useIntl","messages","left","right","center","justify","defaultActionsInfo","intl","formatMessage","props","onChange","id","actions","actionsInfoMap","value","length","push","actionsInfo","map","action","index"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-block-style/src/Widgets/TextAlign.jsx"],"sourcesContent":["import React from 'react';\nimport { Button } from 'semantic-ui-react';\nimport { FormFieldWrapper, Icon } from '@plone/volto/components';\n\nimport alignLeftSVG from '@plone/volto/icons/align-left.svg';\nimport alignRightSVG from '@plone/volto/icons/align-right.svg';\nimport alignJustifySVG from '@plone/volto/icons/align-justify.svg';\nimport alignCenterSVG from '@plone/volto/icons/align-center.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport { defineMessages, useIntl } from 'react-intl';\n\nexport const messages = defineMessages({\n  left: {\n    id: 'Left',\n    defaultMessage: 'Left',\n  },\n  right: {\n    id: 'Right',\n    defaultMessage: 'Right',\n  },\n  center: {\n    id: 'Center',\n    defaultMessage: 'Center',\n  },\n  justify: {\n    id: 'Justify',\n    defaultMessage: 'Justify',\n  },\n  '': {\n    id: 'Clear selection',\n    defaultMessage: 'Clear selection',\n  },\n});\nconst defaultActionsInfo = ({ intl }) => ({\n  left: [alignLeftSVG, intl.formatMessage(messages.left)],\n  right: [alignRightSVG, intl.formatMessage(messages.right)],\n  center: [alignCenterSVG, intl.formatMessage(messages.center)],\n  justify: [alignJustifySVG, intl.formatMessage(messages.justify)],\n  '': [clearSVG, intl.formatMessage(messages[''])],\n});\n\nexport default (props) => {\n  const intl = useIntl();\n  const {\n    onChange,\n    id,\n    actions = ['left', 'right', 'center', 'justify'],\n    actionsInfoMap = {},\n    value,\n  } = props;\n  // add clear selection button to the actions mapping if it's not already present\n  if (actions[actions.length - 1] !== '') {\n    actions.push('');\n  }\n\n  const actionsInfo = {\n    ...defaultActionsInfo({ intl }),\n    ...actionsInfoMap,\n  };\n\n  return (\n    <FormFieldWrapper {...props}>\n      <div className=\"align-tools\">\n        {actions.map((action, index) => (\n          <Button.Group key={`button-group-${action}-${index}`}>\n            <Button\n              icon\n              basic\n              compact\n              active={value === action}\n              aria-label={actionsInfo[action][1]}\n              onClick={() => {\n                onChange(id, action);\n              }}\n            >\n              <Icon\n                name={actionsInfo[action][0]}\n                title={actionsInfo[action][1] || action}\n                size=\"24px\"\n              />\n            </Button>\n          </Button.Group>\n        ))}\n      </div>\n    </FormFieldWrapper>\n  );\n};\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Left","defaultMessage":"Left"},{"id":"Right","defaultMessage":"Right"},{"id":"Center","defaultMessage":"Center"},{"id":"Justify","defaultMessage":"Justify"},{"id":"Clear selection","defaultMessage":"Clear selection"}]}},"sourceType":"module","externalDependencies":[]}