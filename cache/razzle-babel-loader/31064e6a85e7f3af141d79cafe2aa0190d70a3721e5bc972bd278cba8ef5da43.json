{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-widget-geolocation/src/components/manage/Widgets/SearchWidget.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n/**\n * Search widget component.\n * @module components/theme/SearchWidget/SearchWidget\n */\n\nimport React, { useState } from 'react';\nimport { Form, Input } from 'semantic-ui-react';\nimport { compose } from 'redux';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { FormFieldWrapper } from '@plone/volto/components';\nimport { Icon } from '@plone/volto/components';\nimport { getProxiedExternalContent } from '@eeacms/volto-corsproxy/actions';\nimport { getCountryCode, makeSearchUrl } from './util';\nimport countries from 'i18n-iso-countries';\nimport zoomSVG from '@plone/volto/icons/zoom.svg';\nimport locales from 'i18n-iso-countries/langs/en.json';\ncountries.registerLocale(locales);\nconst messages = defineMessages({\n  search: {\n    \"id\": \"Search\",\n    \"defaultMessage\": \"Search\"\n  },\n  searchSite: {\n    \"id\": \"Search for geoTags\",\n    \"defaultMessage\": \"Search for geoTags\"\n  }\n});\n\n/**\n * SearchWidget component class.\n * @class SearchWidget\n * @extends Component\n */\nconst SearchWidget = props => {\n  const {\n    onChange,\n    data = {}\n  } = props;\n  const {\n    countries\n  } = data;\n  const {\n    0: text,\n    1: setText\n  } = useState('');\n  const dispatch = useDispatch();\n  const password = useSelector(state => {\n    var _state$geolocation, _state$geolocation$ap;\n    return (_state$geolocation = state.geolocation) === null || _state$geolocation === void 0 ? void 0 : (_state$geolocation$ap = _state$geolocation.api) === null || _state$geolocation$ap === void 0 ? void 0 : _state$geolocation$ap.geonames.password;\n  });\n  const onSubmit = async event => {\n    event.preventDefault();\n    let countryCode;\n    if (/\\d/.test(countries)) {\n      let url = `https://secure.geonames.org/getJSON?geonameId=${countries.split('-')[1]}&username=${password}`;\n      let response = await dispatch(getProxiedExternalContent(url, {\n        headers: {\n          Accept: 'application/json'\n        }\n      }));\n      countryCode = response.countryCode;\n    } else {\n      countryCode = getCountryCode(countries);\n    }\n    const searchUrl = makeSearchUrl(data, text, password, countryCode);\n    onChange('searchUrl', searchUrl);\n    await dispatch(getProxiedExternalContent(searchUrl, {\n      headers: {\n        Accept: 'application/json'\n      }\n    }));\n  };\n  return __jsx(Form, {\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, __jsx(FormFieldWrapper, _extends({}, props, {\n    column: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, __jsx(Input, {\n    style: {\n      width: '80%'\n    },\n    \"aria-label\": props.intl.formatMessage(messages.search),\n    onChange: e => setText(e.target.value),\n    name: \"SearchableText\",\n    value: text,\n    autoComplete: \"off\",\n    placeholder: props.intl.formatMessage(messages.searchSite),\n    title: props.intl.formatMessage(messages.search),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }), __jsx(\"button\", {\n    \"aria-label\": props.intl.formatMessage(messages.search),\n    style: {\n      verticalAlign: 'middle'\n    },\n    onClick: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, __jsx(Icon, {\n    name: zoomSVG,\n    size: \"24px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  })))));\n};\nexport default compose(injectIntl)(SearchWidget);","map":{"version":3,"names":["React","useState","Form","Input","compose","useDispatch","useSelector","defineMessages","injectIntl","FormFieldWrapper","Icon","getProxiedExternalContent","getCountryCode","makeSearchUrl","countries","zoomSVG","locales","registerLocale","messages","search","searchSite","SearchWidget","props","onChange","data","text","setText","dispatch","password","state","geolocation","api","geonames","onSubmit","event","preventDefault","countryCode","test","url","split","response","headers","Accept","searchUrl","width","intl","formatMessage","e","target","value","verticalAlign"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-widget-geolocation/src/components/manage/Widgets/SearchWidget.jsx"],"sourcesContent":["/**\n * Search widget component.\n * @module components/theme/SearchWidget/SearchWidget\n */\n\nimport React, { useState } from 'react';\nimport { Form, Input } from 'semantic-ui-react';\nimport { compose } from 'redux';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { FormFieldWrapper } from '@plone/volto/components';\nimport { Icon } from '@plone/volto/components';\nimport { getProxiedExternalContent } from '@eeacms/volto-corsproxy/actions';\nimport { getCountryCode, makeSearchUrl } from './util';\nimport countries from 'i18n-iso-countries';\nimport zoomSVG from '@plone/volto/icons/zoom.svg';\nimport locales from 'i18n-iso-countries/langs/en.json';\n\ncountries.registerLocale(locales);\n\nconst messages = defineMessages({\n  search: {\n    id: 'Search',\n    defaultMessage: 'Search',\n  },\n  searchSite: {\n    id: 'Search for geoTags',\n    defaultMessage: 'Search for geoTags',\n  },\n});\n\n/**\n * SearchWidget component class.\n * @class SearchWidget\n * @extends Component\n */\nconst SearchWidget = (props) => {\n  const { onChange, data = {} } = props;\n  const { countries } = data;\n  const [text, setText] = useState('');\n  const dispatch = useDispatch();\n  const password = useSelector(\n    (state) => state.geolocation?.api?.geonames.password,\n  );\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    let countryCode;\n    if (/\\d/.test(countries)) {\n      let url = `https://secure.geonames.org/getJSON?geonameId=${\n        countries.split('-')[1]\n      }&username=${password}`;\n      let response = await dispatch(\n        getProxiedExternalContent(url, {\n          headers: { Accept: 'application/json' },\n        }),\n      );\n      countryCode = response.countryCode;\n    } else {\n      countryCode = getCountryCode(countries);\n    }\n    const searchUrl = makeSearchUrl(data, text, password, countryCode);\n    onChange('searchUrl', searchUrl);\n    await dispatch(\n      getProxiedExternalContent(searchUrl, {\n        headers: { Accept: 'application/json' },\n      }),\n    );\n  };\n\n  return (\n    <Form onSubmit={onSubmit}>\n      <FormFieldWrapper {...props} column={1}>\n        <div>\n          <Input\n            style={{ width: '80%' }}\n            aria-label={props.intl.formatMessage(messages.search)}\n            onChange={(e) => setText(e.target.value)}\n            name=\"SearchableText\"\n            value={text}\n            autoComplete=\"off\"\n            placeholder={props.intl.formatMessage(messages.searchSite)}\n            title={props.intl.formatMessage(messages.search)}\n          />\n          <button\n            aria-label={props.intl.formatMessage(messages.search)}\n            style={{ verticalAlign: 'middle' }}\n            onClick={onSubmit}\n          >\n            <Icon name={zoomSVG} size=\"24px\" />\n          </button>\n        </div>\n      </FormFieldWrapper>\n    </Form>\n  );\n};\nexport default compose(injectIntl)(SearchWidget);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Search","defaultMessage":"Search"},{"id":"Search for geoTags","defaultMessage":"Search for geoTags"}]}},"sourceType":"module","externalDependencies":[]}