{"ast":null,"code":"import _join from \"lodash/join\";\nimport _nth from \"lodash/nth\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Controlpanels/ContentTypeLayout.jsx\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n/**\n * Content Type component.\n * @module components/manage/Controlpanels/ContentTypeLayout\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport { getParentUrl, hasBlocksData, getBlocksFieldname, getBlocksLayoutFieldname } from '@plone/volto/helpers';\nimport { Portal } from 'react-portal';\nimport { Button, Segment } from 'semantic-ui-react';\nimport { toast } from 'react-toastify';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport { Error, Form, Icon, Toolbar, Sidebar, Toast } from '@plone/volto/components';\nimport { getSchema, updateSchema, getControlpanel, updateControlpanel } from '@plone/volto/actions';\nimport saveSVG from '@plone/volto/icons/save.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport backSVG from '@plone/volto/icons/back.svg';\nconst messages = defineMessages({\n  changesSaved: {\n    \"id\": \"Changes saved.\",\n    \"defaultMessage\": \"Changes saved.\"\n  },\n  back: {\n    \"id\": \"Back\",\n    \"defaultMessage\": \"Back\"\n  },\n  save: {\n    \"id\": \"Save\",\n    \"defaultMessage\": \"Save\"\n  },\n  cancel: {\n    \"id\": \"Cancel\",\n    \"defaultMessage\": \"Cancel\"\n  },\n  info: {\n    \"id\": \"Info\",\n    \"defaultMessage\": \"Info\"\n  },\n  enable: {\n    \"id\": \"Enable editable Blocks\",\n    \"defaultMessage\": \"Enable editable Blocks\"\n  }\n});\n\n/**\n * ContentTypeLayout class.\n * @class ContentTypeLayout\n * @extends Component\n */\nclass ContentTypeLayout extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ContentTypeLayout\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      visual: false,\n      content: null,\n      readOnlyBehavior: null,\n      error: null,\n      isClient: false\n    };\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.onEnableBlocks = this.onEnableBlocks.bind(this);\n    this.onDisableBlocksBehavior = this.onDisableBlocksBehavior.bind(this);\n    this.form = /*#__PURE__*/React.createRef();\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.getControlpanel(_join([this.props.parent, this.props.id], '/'));\n    this.props.getSchema(this.props.id);\n    this.setState({\n      isClient: true\n    });\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    // Control Panel GET\n    if (this.props.cpanelRequest.get.loading && nextProps.cpanelRequest.get.error) {\n      this.setState({\n        error: nextProps.cpanelRequest.get.error\n      });\n    }\n\n    // Schema GET\n    if (this.props.schemaRequest.loading && nextProps.schemaRequest.loaded) {\n      var _nextProps$schema;\n      const properties = ((_nextProps$schema = nextProps.schema) === null || _nextProps$schema === void 0 ? void 0 : _nextProps$schema.properties) || {};\n      const content = {};\n      for (const key in properties) {\n        const value = properties[key].default;\n        if (value) {\n          content[key] = value;\n        }\n      }\n      if (hasBlocksData(properties)) {\n        var _properties$blocksFie, _properties$blocksLay, _properties$blocksFie2;\n        this.setState({\n          visual: true\n        });\n        const blocksFieldName = getBlocksFieldname(properties);\n        const blocksLayoutFieldname = getBlocksLayoutFieldname(properties);\n        content[blocksFieldName] = ((_properties$blocksFie = properties[blocksFieldName]) === null || _properties$blocksFie === void 0 ? void 0 : _properties$blocksFie.default) || {};\n        content[blocksLayoutFieldname] = ((_properties$blocksLay = properties[blocksLayoutFieldname]) === null || _properties$blocksLay === void 0 ? void 0 : _properties$blocksLay.default) || {\n          items: []\n        };\n        const blocksBehavior = ((_properties$blocksFie2 = properties[blocksFieldName]) === null || _properties$blocksFie2 === void 0 ? void 0 : _properties$blocksFie2.behavior) || '';\n        this.setState({\n          readOnlyBehavior: !blocksBehavior.includes('generated') ? blocksBehavior : ''\n        });\n      } else {\n        this.setState({\n          visual: false,\n          readOnlyBehavior: ''\n        });\n      }\n      this.setState({\n        content: content\n      });\n    }\n\n    // Schema updated\n    if (this.props.schemaRequest.update.loading && nextProps.schemaRequest.update.loaded) {\n      this.props.getSchema(this.props.id);\n      toast.info(__jsx(Toast, {\n        info: true,\n        title: this.props.intl.formatMessage(messages.info),\n        content: this.props.intl.formatMessage(messages.changesSaved),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 9\n        }\n      }));\n    }\n\n    // Blocks behavior disabled\n    if (this.props.cpanelRequest.update.loading && nextProps.cpanelRequest.update.loaded) {\n      this.onEnableBlocks();\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    const schema = {\n      properties: {}\n    };\n    Object.keys(data).filter(k => data[k]).forEach(k => schema.properties[k] = {\n      default: data[k]\n    });\n    this.props.updateSchema(this.props.id, schema);\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    const url = getParentUrl(this.props.pathname);\n    this.props.history.push(getParentUrl(url));\n  }\n\n  /**\n   * Enable blocks handler\n   * @method onEnableBlocks\n   * @returns {undefined}\n   */\n  onEnableBlocks() {\n    var _properties$blocksFie3, _properties$blocksLay2;\n    const {\n      properties = {}\n    } = this.props.schema;\n    const blocksFieldName = getBlocksFieldname(properties);\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(properties);\n    const schema = {\n      fieldsets: [{\n        id: 'layout',\n        title: 'Layout',\n        fields: ['blocks', 'blocks_layout']\n      }],\n      properties: {\n        blocks: {\n          title: 'Blocks',\n          type: 'dict',\n          widget: 'json',\n          factory: 'JSONField',\n          default: ((_properties$blocksFie3 = properties[blocksFieldName]) === null || _properties$blocksFie3 === void 0 ? void 0 : _properties$blocksFie3.default) || {}\n        },\n        blocks_layout: {\n          title: 'Blocks Layout',\n          type: 'dict',\n          widget: 'json',\n          factory: 'JSONField',\n          default: ((_properties$blocksLay2 = properties[blocksLayoutFieldname]) === null || _properties$blocksLay2 === void 0 ? void 0 : _properties$blocksLay2.default) || {\n            items: []\n          }\n        }\n      }\n    };\n    this.props.updateSchema(this.props.id, schema);\n  }\n\n  /**\n   * Disable Blocks behavior handler\n   * @method onDisableBlocksBehavior\n   * @returns {undefined}\n   */\n  onDisableBlocksBehavior() {\n    this.props.updateControlpanel(this.props.controlpanel['@id'], {\n      [this.state.readOnlyBehavior]: false\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    var _this$props$schema, _this$props$schema2;\n    // Error\n    if (this.state.error) {\n      return __jsx(Error, {\n        error: this.state.error,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 14\n        }\n      });\n    }\n    if (!this.state.visual) {\n      var _this$props, _this$props$controlpa;\n      // Still loading\n      if (!this.state.content) {\n        return __jsx(\"div\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 16\n          }\n        });\n      }\n\n      // Blocks are not enabled\n      return __jsx(React.Fragment, null, __jsx(Segment, {\n        placeholder: true,\n        id: \"page-controlpanel-layout\",\n        className: \"ui container center aligned\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 11\n        }\n      }, __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 13\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"Can not edit Layout for <strong>{type}</strong> content-type as it doesn't have support for <strong>Volto Blocks</strong> enabled\",\n        defaultMessage: \"Can not edit Layout for <strong>{type}</strong> content-type as it doesn't have support for <strong>Volto Blocks</strong> enabled\",\n        values: {\n          strong: (...chunks) => __jsx(\"strong\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 326,\n              columnNumber: 42\n            }\n          }, chunks),\n          type: ((_this$props = this.props) === null || _this$props === void 0 ? void 0 : (_this$props$controlpa = _this$props.controlpanel) === null || _this$props$controlpa === void 0 ? void 0 : _this$props$controlpa.title) || this.props.id\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 15\n        }\n      })), __jsx(\"div\", {\n        className: \"ui divider\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 13\n        }\n      }), __jsx(Button, {\n        primary: true,\n        onClick: this.onEnableBlocks,\n        content: this.props.intl.formatMessage(messages.enable),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332,\n          columnNumber: 13\n        }\n      })), __jsx(Portal, {\n        node: this.state.isClient && document.getElementById('toolbar'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 11\n        }\n      }, __jsx(Toolbar, {\n        pathname: this.props.pathname,\n        hideDefaultViewButtons: true,\n        inner: __jsx(React.Fragment, null, __jsx(Link, {\n          className: \"item\",\n          to: \"#\",\n          onClick: () => this.onCancel(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 19\n          }\n        }, __jsx(Icon, {\n          name: backSVG,\n          size: \"30px\",\n          className: \"contents circled\",\n          title: this.props.intl.formatMessage(messages.back),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 21\n          }\n        }))),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 13\n        }\n      })));\n    }\n    if (this.state.readOnlyBehavior) {\n      var _this$props2, _this$props2$controlp;\n      return __jsx(React.Fragment, null, __jsx(Segment, {\n        placeholder: true,\n        id: \"page-controlpanel-layout\",\n        className: \"ui container center aligned\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 11\n        }\n      }, __jsx(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 13\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"Can not edit Layout for <strong>{type}</strong> content-type as the <strong>Blocks behavior</strong> is enabled and <strong>read-only</strong>\",\n        defaultMessage: \"Can not edit Layout for <strong>{type}</strong> content-type as the <strong>Blocks behavior</strong> is enabled and <strong>read-only</strong>\",\n        values: {\n          strong: (...chunks) => __jsx(\"strong\", {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 375,\n              columnNumber: 42\n            }\n          }, chunks),\n          type: ((_this$props2 = this.props) === null || _this$props2 === void 0 ? void 0 : (_this$props2$controlp = _this$props2.controlpanel) === null || _this$props2$controlp === void 0 ? void 0 : _this$props2$controlp.title) || this.props.id\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 15\n        }\n      })), __jsx(\"div\", {\n        className: \"ui divider\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 13\n        }\n      }), __jsx(Button, {\n        primary: true,\n        onClick: this.onDisableBlocksBehavior,\n        content: this.props.intl.formatMessage(messages.enable),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 13\n        }\n      })), __jsx(Portal, {\n        node: this.state.isClient && document.getElementById('toolbar'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 387,\n          columnNumber: 11\n        }\n      }, __jsx(Toolbar, {\n        pathname: this.props.pathname,\n        hideDefaultViewButtons: true,\n        inner: __jsx(React.Fragment, null, __jsx(Link, {\n          className: \"item\",\n          to: \"#\",\n          onClick: () => this.onCancel(),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 395,\n            columnNumber: 19\n          }\n        }, __jsx(Icon, {\n          name: backSVG,\n          size: \"30px\",\n          className: \"contents circled\",\n          title: this.props.intl.formatMessage(messages.back),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 396,\n            columnNumber: 21\n          }\n        }))),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 13\n        }\n      })));\n    }\n\n    // Render layout editor\n    const blocksFieldName = getBlocksFieldname(((_this$props$schema = this.props.schema) === null || _this$props$schema === void 0 ? void 0 : _this$props$schema.properties) || {});\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(((_this$props$schema2 = this.props.schema) === null || _this$props$schema2 === void 0 ? void 0 : _this$props$schema2.properties) || {});\n    return __jsx(\"div\", {\n      id: \"page-controlpanel-layout\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 7\n      }\n    }, __jsx(Form, {\n      isAdminForm: true,\n      ref: this.form,\n      schema: {\n        fieldsets: [{\n          id: 'layout',\n          title: 'Layout',\n          fields: [blocksFieldName, blocksLayoutFieldname]\n        }],\n        properties: _objectSpread(_objectSpread({}, this.props.schema.properties[blocksFieldName]), this.props.schema.properties[blocksLayoutFieldname]),\n        required: []\n      },\n      formData: this.state.content,\n      onSubmit: this.onSubmit,\n      onCancel: this.onCancel,\n      pathname: this.props.pathname,\n      visual: this.state.visual,\n      hideActions: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 9\n      }\n    }), __jsx(Portal, {\n      node: this.state.isClient && document.getElementById('sidebar'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 9\n      }\n    }, __jsx(Sidebar, {\n      settingsTab: true,\n      documentTab: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 11\n      }\n    })), __jsx(Portal, {\n      node: this.state.isClient && document.getElementById('toolbar'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 9\n      }\n    }, __jsx(Toolbar, {\n      pathname: this.props.pathname,\n      hideDefaultViewButtons: true,\n      inner: __jsx(React.Fragment, null, __jsx(Button, {\n        id: \"toolbar-save\",\n        className: \"save\",\n        \"aria-label\": this.props.intl.formatMessage(messages.save),\n        onClick: () => this.form.current.onSubmit(),\n        disabled: this.props.schemaRequest.update.loading,\n        loading: this.props.schemaRequest.update.loading,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 17\n        }\n      }, __jsx(Icon, {\n        name: saveSVG,\n        className: \"circled\",\n        size: \"30px\",\n        title: this.props.intl.formatMessage(messages.save),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 19\n        }\n      })), __jsx(Button, {\n        className: \"cancel\",\n        \"aria-label\": this.props.intl.formatMessage(messages.cancel),\n        onClick: () => this.onCancel(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 472,\n          columnNumber: 17\n        }\n      }, __jsx(Icon, {\n        name: clearSVG,\n        className: \"circled\",\n        size: \"30px\",\n        title: this.props.intl.formatMessage(messages.cancel),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 477,\n          columnNumber: 19\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452,\n        columnNumber: 11\n      }\n    })));\n  }\n}\n_defineProperty(ContentTypeLayout, \"propTypes\", {\n  updateControlpanel: PropTypes.func.isRequired,\n  getControlpanel: PropTypes.func.isRequired,\n  getSchema: PropTypes.func.isRequired,\n  updateSchema: PropTypes.func.isRequired,\n  id: PropTypes.string.isRequired,\n  parent: PropTypes.string.isRequired,\n  pathname: PropTypes.string.isRequired,\n  schemaRequest: PropTypes.objectOf(PropTypes.any).isRequired,\n  cpanelRequest: PropTypes.objectOf(PropTypes.any).isRequired,\n  schema: PropTypes.objectOf(PropTypes.any),\n  controlpanel: PropTypes.shape({\n    '@id': PropTypes.string,\n    data: PropTypes.object,\n    schema: PropTypes.object,\n    title: PropTypes.string\n  })\n});\n_defineProperty(ContentTypeLayout, \"defaultProps\", {\n  schema: {},\n  controlpanel: null\n});\nexport default compose(injectIntl, connect((state, props) => ({\n  schema: state.schema.schema,\n  schemaRequest: state.schema,\n  cpanelRequest: state.controlpanels,\n  controlpanel: state.controlpanels.controlpanel,\n  pathname: props.location.pathname,\n  id: _nth(props.location.pathname.split('/'), -2),\n  parent: _nth(props.location.pathname.split('/'), -3)\n}), {\n  getSchema,\n  updateSchema,\n  getControlpanel,\n  updateControlpanel\n}))(ContentTypeLayout);","map":{"version":3,"names":["React","Component","PropTypes","connect","compose","Link","getParentUrl","hasBlocksData","getBlocksFieldname","getBlocksLayoutFieldname","Portal","Button","Segment","toast","defineMessages","injectIntl","FormattedMessage","Error","Form","Icon","Toolbar","Sidebar","Toast","getSchema","updateSchema","getControlpanel","updateControlpanel","saveSVG","clearSVG","backSVG","messages","changesSaved","back","save","cancel","info","enable","ContentTypeLayout","constructor","props","state","visual","content","readOnlyBehavior","error","isClient","onCancel","bind","onSubmit","onEnableBlocks","onDisableBlocksBehavior","form","createRef","componentDidMount","parent","id","setState","UNSAFE_componentWillReceiveProps","nextProps","cpanelRequest","get","loading","schemaRequest","loaded","properties","schema","key","value","default","blocksFieldName","blocksLayoutFieldname","items","blocksBehavior","behavior","includes","update","intl","formatMessage","data","Object","keys","filter","k","forEach","url","pathname","history","push","fieldsets","title","fields","blocks","type","widget","factory","blocks_layout","controlpanel","render","strong","chunks","document","getElementById","required","current","func","isRequired","string","objectOf","any","shape","object","controlpanels","location","split"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Controlpanels/ContentTypeLayout.jsx"],"sourcesContent":["/**\n * Content Type component.\n * @module components/manage/Controlpanels/ContentTypeLayout\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { Link } from 'react-router-dom';\nimport {\n  getParentUrl,\n  hasBlocksData,\n  getBlocksFieldname,\n  getBlocksLayoutFieldname,\n} from '@plone/volto/helpers';\nimport { Portal } from 'react-portal';\nimport { Button, Segment } from 'semantic-ui-react';\nimport { toast } from 'react-toastify';\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\nimport { nth, join } from 'lodash';\nimport {\n  Error,\n  Form,\n  Icon,\n  Toolbar,\n  Sidebar,\n  Toast,\n} from '@plone/volto/components';\nimport {\n  getSchema,\n  updateSchema,\n  getControlpanel,\n  updateControlpanel,\n} from '@plone/volto/actions';\n\nimport saveSVG from '@plone/volto/icons/save.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport backSVG from '@plone/volto/icons/back.svg';\n\nconst messages = defineMessages({\n  changesSaved: {\n    id: 'Changes saved.',\n    defaultMessage: 'Changes saved.',\n  },\n  back: {\n    id: 'Back',\n    defaultMessage: 'Back',\n  },\n  save: {\n    id: 'Save',\n    defaultMessage: 'Save',\n  },\n  cancel: {\n    id: 'Cancel',\n    defaultMessage: 'Cancel',\n  },\n  info: {\n    id: 'Info',\n    defaultMessage: 'Info',\n  },\n  enable: {\n    id: 'Enable editable Blocks',\n    defaultMessage: 'Enable editable Blocks',\n  },\n});\n\n/**\n * ContentTypeLayout class.\n * @class ContentTypeLayout\n * @extends Component\n */\nclass ContentTypeLayout extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    updateControlpanel: PropTypes.func.isRequired,\n    getControlpanel: PropTypes.func.isRequired,\n    getSchema: PropTypes.func.isRequired,\n    updateSchema: PropTypes.func.isRequired,\n    id: PropTypes.string.isRequired,\n    parent: PropTypes.string.isRequired,\n    pathname: PropTypes.string.isRequired,\n    schemaRequest: PropTypes.objectOf(PropTypes.any).isRequired,\n    cpanelRequest: PropTypes.objectOf(PropTypes.any).isRequired,\n    schema: PropTypes.objectOf(PropTypes.any),\n    controlpanel: PropTypes.shape({\n      '@id': PropTypes.string,\n      data: PropTypes.object,\n      schema: PropTypes.object,\n      title: PropTypes.string,\n    }),\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    schema: {},\n    controlpanel: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs ContentTypeLayout\n   */\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      visual: false,\n      content: null,\n      readOnlyBehavior: null,\n      error: null,\n      isClient: false,\n    };\n\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.onEnableBlocks = this.onEnableBlocks.bind(this);\n    this.onDisableBlocksBehavior = this.onDisableBlocksBehavior.bind(this);\n    this.form = React.createRef();\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.props.getControlpanel(join([this.props.parent, this.props.id], '/'));\n    this.props.getSchema(this.props.id);\n    this.setState({ isClient: true });\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    // Control Panel GET\n    if (\n      this.props.cpanelRequest.get.loading &&\n      nextProps.cpanelRequest.get.error\n    ) {\n      this.setState({\n        error: nextProps.cpanelRequest.get.error,\n      });\n    }\n\n    // Schema GET\n    if (this.props.schemaRequest.loading && nextProps.schemaRequest.loaded) {\n      const properties = nextProps.schema?.properties || {};\n      const content = {};\n      for (const key in properties) {\n        const value = properties[key].default;\n        if (value) {\n          content[key] = value;\n        }\n      }\n\n      if (hasBlocksData(properties)) {\n        this.setState({\n          visual: true,\n        });\n\n        const blocksFieldName = getBlocksFieldname(properties);\n        const blocksLayoutFieldname = getBlocksLayoutFieldname(properties);\n        content[blocksFieldName] = properties[blocksFieldName]?.default || {};\n        content[blocksLayoutFieldname] = properties[blocksLayoutFieldname]\n          ?.default || { items: [] };\n\n        const blocksBehavior = properties[blocksFieldName]?.behavior || '';\n        this.setState({\n          readOnlyBehavior: !blocksBehavior.includes('generated')\n            ? blocksBehavior\n            : '',\n        });\n      } else {\n        this.setState({\n          visual: false,\n          readOnlyBehavior: '',\n        });\n      }\n\n      this.setState({\n        content: content,\n      });\n    }\n\n    // Schema updated\n    if (\n      this.props.schemaRequest.update.loading &&\n      nextProps.schemaRequest.update.loaded\n    ) {\n      this.props.getSchema(this.props.id);\n      toast.info(\n        <Toast\n          info\n          title={this.props.intl.formatMessage(messages.info)}\n          content={this.props.intl.formatMessage(messages.changesSaved)}\n        />,\n      );\n    }\n\n    // Blocks behavior disabled\n    if (\n      this.props.cpanelRequest.update.loading &&\n      nextProps.cpanelRequest.update.loaded\n    ) {\n      this.onEnableBlocks();\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    const schema = { properties: {} };\n    Object.keys(data)\n      .filter((k) => data[k])\n      .forEach((k) => (schema.properties[k] = { default: data[k] }));\n    this.props.updateSchema(this.props.id, schema);\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    const url = getParentUrl(this.props.pathname);\n    this.props.history.push(getParentUrl(url));\n  }\n\n  /**\n   * Enable blocks handler\n   * @method onEnableBlocks\n   * @returns {undefined}\n   */\n  onEnableBlocks() {\n    const { properties = {} } = this.props.schema;\n    const blocksFieldName = getBlocksFieldname(properties);\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(properties);\n    const schema = {\n      fieldsets: [\n        {\n          id: 'layout',\n          title: 'Layout',\n          fields: ['blocks', 'blocks_layout'],\n        },\n      ],\n      properties: {\n        blocks: {\n          title: 'Blocks',\n          type: 'dict',\n          widget: 'json',\n          factory: 'JSONField',\n          default: properties[blocksFieldName]?.default || {},\n        },\n        blocks_layout: {\n          title: 'Blocks Layout',\n          type: 'dict',\n          widget: 'json',\n          factory: 'JSONField',\n          default: properties[blocksLayoutFieldname]?.default || { items: [] },\n        },\n      },\n    };\n    this.props.updateSchema(this.props.id, schema);\n  }\n\n  /**\n   * Disable Blocks behavior handler\n   * @method onDisableBlocksBehavior\n   * @returns {undefined}\n   */\n  onDisableBlocksBehavior() {\n    this.props.updateControlpanel(this.props.controlpanel['@id'], {\n      [this.state.readOnlyBehavior]: false,\n    });\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    // Error\n    if (this.state.error) {\n      return <Error error={this.state.error} />;\n    }\n\n    if (!this.state.visual) {\n      // Still loading\n      if (!this.state.content) {\n        return <div />;\n      }\n\n      // Blocks are not enabled\n      return (\n        <>\n          <Segment\n            placeholder\n            id=\"page-controlpanel-layout\"\n            className=\"ui container center aligned\"\n          >\n            <div>\n              <FormattedMessage\n                id=\"Can not edit Layout for <strong>{type}</strong> content-type as it doesn't have support for <strong>Volto Blocks</strong> enabled\"\n                defaultMessage=\"Can not edit Layout for <strong>{type}</strong> content-type as it doesn't have support for <strong>Volto Blocks</strong> enabled\"\n                values={{\n                  strong: (...chunks) => <strong>{chunks}</strong>,\n                  type: this.props?.controlpanel?.title || this.props.id,\n                }}\n              />\n            </div>\n            <div className=\"ui divider\"></div>\n            <Button\n              primary\n              onClick={this.onEnableBlocks}\n              content={this.props.intl.formatMessage(messages.enable)}\n            />\n          </Segment>\n          <Portal\n            node={this.state.isClient && document.getElementById('toolbar')}\n          >\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={\n                <>\n                  <Link className=\"item\" to=\"#\" onClick={() => this.onCancel()}>\n                    <Icon\n                      name={backSVG}\n                      size=\"30px\"\n                      className=\"contents circled\"\n                      title={this.props.intl.formatMessage(messages.back)}\n                    />\n                  </Link>\n                </>\n              }\n            />\n          </Portal>\n        </>\n      );\n    }\n\n    if (this.state.readOnlyBehavior) {\n      return (\n        <>\n          <Segment\n            placeholder\n            id=\"page-controlpanel-layout\"\n            className=\"ui container center aligned\"\n          >\n            <div>\n              <FormattedMessage\n                id=\"Can not edit Layout for <strong>{type}</strong> content-type as the <strong>Blocks behavior</strong> is enabled and <strong>read-only</strong>\"\n                defaultMessage=\"Can not edit Layout for <strong>{type}</strong> content-type as the <strong>Blocks behavior</strong> is enabled and <strong>read-only</strong>\"\n                values={{\n                  strong: (...chunks) => <strong>{chunks}</strong>,\n                  type: this.props?.controlpanel?.title || this.props.id,\n                }}\n              />\n            </div>\n            <div className=\"ui divider\"></div>\n            <Button\n              primary\n              onClick={this.onDisableBlocksBehavior}\n              content={this.props.intl.formatMessage(messages.enable)}\n            />\n          </Segment>\n          <Portal\n            node={this.state.isClient && document.getElementById('toolbar')}\n          >\n            <Toolbar\n              pathname={this.props.pathname}\n              hideDefaultViewButtons\n              inner={\n                <>\n                  <Link className=\"item\" to=\"#\" onClick={() => this.onCancel()}>\n                    <Icon\n                      name={backSVG}\n                      size=\"30px\"\n                      className=\"contents circled\"\n                      title={this.props.intl.formatMessage(messages.back)}\n                    />\n                  </Link>\n                </>\n              }\n            />\n          </Portal>\n        </>\n      );\n    }\n\n    // Render layout editor\n    const blocksFieldName = getBlocksFieldname(\n      this.props.schema?.properties || {},\n    );\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(\n      this.props.schema?.properties || {},\n    );\n    return (\n      <div id=\"page-controlpanel-layout\">\n        <Form\n          isAdminForm\n          ref={this.form}\n          schema={{\n            fieldsets: [\n              {\n                id: 'layout',\n                title: 'Layout',\n                fields: [blocksFieldName, blocksLayoutFieldname],\n              },\n            ],\n            properties: {\n              ...this.props.schema.properties[blocksFieldName],\n              ...this.props.schema.properties[blocksLayoutFieldname],\n            },\n            required: [],\n          }}\n          formData={this.state.content}\n          onSubmit={this.onSubmit}\n          onCancel={this.onCancel}\n          pathname={this.props.pathname}\n          visual={this.state.visual}\n          hideActions\n        />\n        <Portal\n          node={this.state.isClient && document.getElementById('sidebar')}\n        >\n          <Sidebar settingsTab={true} documentTab={false} />\n        </Portal>\n        <Portal\n          node={this.state.isClient && document.getElementById('toolbar')}\n        >\n          <Toolbar\n            pathname={this.props.pathname}\n            hideDefaultViewButtons\n            inner={\n              <>\n                <Button\n                  id=\"toolbar-save\"\n                  className=\"save\"\n                  aria-label={this.props.intl.formatMessage(messages.save)}\n                  onClick={() => this.form.current.onSubmit()}\n                  disabled={this.props.schemaRequest.update.loading}\n                  loading={this.props.schemaRequest.update.loading}\n                >\n                  <Icon\n                    name={saveSVG}\n                    className=\"circled\"\n                    size=\"30px\"\n                    title={this.props.intl.formatMessage(messages.save)}\n                  />\n                </Button>\n                <Button\n                  className=\"cancel\"\n                  aria-label={this.props.intl.formatMessage(messages.cancel)}\n                  onClick={() => this.onCancel()}\n                >\n                  <Icon\n                    name={clearSVG}\n                    className=\"circled\"\n                    size=\"30px\"\n                    title={this.props.intl.formatMessage(messages.cancel)}\n                  />\n                </Button>\n              </>\n            }\n          />\n        </Portal>\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  injectIntl,\n  connect(\n    (state, props) => ({\n      schema: state.schema.schema,\n      schemaRequest: state.schema,\n      cpanelRequest: state.controlpanels,\n      controlpanel: state.controlpanels.controlpanel,\n      pathname: props.location.pathname,\n      id: nth(props.location.pathname.split('/'), -2),\n      parent: nth(props.location.pathname.split('/'), -3),\n    }),\n    { getSchema, updateSchema, getControlpanel, updateControlpanel },\n  ),\n)(ContentTypeLayout);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Changes saved.","defaultMessage":"Changes saved."},{"id":"Back","defaultMessage":"Back"},{"id":"Save","defaultMessage":"Save"},{"id":"Cancel","defaultMessage":"Cancel"},{"id":"Info","defaultMessage":"Info"},{"id":"Enable editable Blocks","defaultMessage":"Enable editable Blocks"},{"id":"Can not edit Layout for <strong>{type}</strong> content-type as it doesn't have support for <strong>Volto Blocks</strong> enabled","defaultMessage":"Can not edit Layout for <strong>{type}</strong> content-type as it doesn't have support for <strong>Volto Blocks</strong> enabled"},{"id":"Can not edit Layout for <strong>{type}</strong> content-type as the <strong>Blocks behavior</strong> is enabled and <strong>read-only</strong>","defaultMessage":"Can not edit Layout for <strong>{type}</strong> content-type as the <strong>Blocks behavior</strong> is enabled and <strong>read-only</strong>"}]}},"sourceType":"module","externalDependencies":[]}