{"ast":null,"code":"import _extends from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/extends.js\";\nimport _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _toConsumableArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _map from \"lodash/map\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Widgets/SelectWidget.jsx\";\nvar __jsx = React.createElement;\n/**\n * SelectWidget component.\n * @module components/manage/Widgets/SelectWidget\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { getVocabFromHint, getVocabFromField, getVocabFromItems } from '@plone/volto/helpers';\nimport { FormFieldWrapper } from '@plone/volto/components';\nimport { getVocabulary, getVocabularyTokenTitle } from '@plone/volto/actions';\nimport { normalizeValue } from '@plone/volto/components/manage/Widgets/SelectUtils';\nimport { customSelectStyles, DropdownIndicator, ClearIndicator, Option, selectTheme, MenuList, MultiValueContainer } from '@plone/volto/components/manage/Widgets/SelectStyling';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nvar messages = defineMessages({\n  \"default\": {\n    \"id\": \"Default\",\n    \"defaultMessage\": \"Default\"\n  },\n  idTitle: {\n    \"id\": \"Short Name\",\n    \"defaultMessage\": \"Short Name\"\n  },\n  idDescription: {\n    \"id\": \"Used for programmatic access to the fieldset.\",\n    \"defaultMessage\": \"Used for programmatic access to the fieldset.\"\n  },\n  title: {\n    \"id\": \"Title\",\n    \"defaultMessage\": \"Title\"\n  },\n  description: {\n    \"id\": \"Description\",\n    \"defaultMessage\": \"Description\"\n  },\n  close: {\n    \"id\": \"Close\",\n    \"defaultMessage\": \"Close\"\n  },\n  choices: {\n    \"id\": \"Choices\",\n    \"defaultMessage\": \"Choices\"\n  },\n  required: {\n    \"id\": \"Required\",\n    \"defaultMessage\": \"Required\"\n  },\n  select: {\n    \"id\": \"Select\\u2026\",\n    \"defaultMessage\": \"Select\\u2026\"\n  },\n  no_value: {\n    \"id\": \"No value\",\n    \"defaultMessage\": \"No value\"\n  },\n  no_options: {\n    \"id\": \"No options\",\n    \"defaultMessage\": \"No options\"\n  }\n});\n\n/**\n * SelectWidget component class.\n * @function SelectWidget\n * @returns {string} Markup of the component.\n */\nvar SelectWidget = /*#__PURE__*/function (_Component) {\n  _inherits(SelectWidget, _Component);\n  var _super = _createSuper(SelectWidget);\n  function SelectWidget() {\n    _classCallCheck(this, SelectWidget);\n    return _super.apply(this, arguments);\n  }\n  _createClass(SelectWidget, [{\n    key: \"componentDidMount\",\n    value:\n    /**\n     * Property types.\n     * @property {Object} propTypes Property types.\n     * @static\n     */\n\n    /**\n     * Default properties\n     * @property {Object} defaultProps Default properties.\n     * @static\n     */\n\n    /**\n     * Component did mount\n     * @method componentDidMount\n     * @returns {undefined}\n     */\n    function componentDidMount() {\n      var _this$props$choices;\n      if ((!this.props.choices || ((_this$props$choices = this.props.choices) === null || _this$props$choices === void 0 ? void 0 : _this$props$choices.length) === 0) && this.props.vocabBaseUrl) {\n        this.props.getVocabulary({\n          vocabNameOrURL: this.props.vocabBaseUrl,\n          size: -1,\n          subrequest: this.props.lang\n        });\n      }\n    }\n\n    /**\n     * Render method.\n     * @method render\n     * @returns {string} Markup for the component.\n     */\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props$placehold;\n      var _this$props = this.props,\n        id = _this$props.id,\n        choices = _this$props.choices,\n        value = _this$props.value,\n        intl = _this$props.intl,\n        _onChange = _this$props.onChange;\n      var normalizedValue = normalizeValue(choices, value, intl);\n      // Make sure that both disabled and isDisabled (from the DX layout feat work)\n      var disabled = this.props.disabled || this.props.isDisabled;\n      var Select = this.props.reactSelect[\"default\"];\n      var options = this.props.vocabBaseUrl ? this.props.choices : [].concat(_toConsumableArray(_map(choices, function (option) {\n        return {\n          value: option[0],\n          label:\n          // Fix \"None\" on the serializer, to remove when fixed in p.restapi\n          option[1] !== 'None' && option[1] ? option[1] : option[0]\n        };\n      })), _toConsumableArray(this.props.noValueOption && !this.props[\"default\"] ? [{\n        label: this.props.intl.formatMessage(messages.no_value),\n        value: 'no-value'\n      }] : []));\n      var isMulti = this.props.isMulti ? this.props.isMulti : id === 'roles' || id === 'groups';\n      return __jsx(FormFieldWrapper, _extends({}, this.props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 7\n        }\n      }), __jsx(Select, {\n        id: \"field-\".concat(id),\n        key: choices,\n        name: id,\n        isDisabled: disabled,\n        isSearchable: true,\n        className: \"react-select-container\",\n        classNamePrefix: \"react-select\",\n        isMulti: isMulti,\n        options: options,\n        styles: customSelectStyles,\n        theme: selectTheme,\n        components: _objectSpread(_objectSpread({}, (options === null || options === void 0 ? void 0 : options.length) > 25 && {\n          MenuList: MenuList\n        }), {}, {\n          MultiValueContainer: MultiValueContainer,\n          DropdownIndicator: DropdownIndicator,\n          ClearIndicator: ClearIndicator,\n          Option: this.props.customOptionStyling || Option\n        }),\n        value: normalizedValue,\n        placeholder: (_this$props$placehold = this.props.placeholder) !== null && _this$props$placehold !== void 0 ? _this$props$placehold : this.props.intl.formatMessage(messages.select),\n        onChange: function onChange(selectedOption) {\n          if (isMulti) {\n            return _onChange(id, selectedOption.map(function (el) {\n              return el.value;\n            }));\n          }\n          return _onChange(id, selectedOption && selectedOption.value !== 'no-value' ? selectedOption.value : undefined);\n        },\n        isClearable: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n  return SelectWidget;\n}(Component);\n_defineProperty(SelectWidget, \"propTypes\", {\n  id: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  required: PropTypes.bool,\n  error: PropTypes.arrayOf(PropTypes.string),\n  getVocabulary: PropTypes.func.isRequired,\n  getVocabularyTokenTitle: PropTypes.func.isRequired,\n  choices: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.object, PropTypes.array])),\n  items: PropTypes.shape({\n    vocabulary: PropTypes.object\n  }),\n  widgetOptions: PropTypes.shape({\n    vocabulary: PropTypes.object\n  }),\n  value: PropTypes.oneOfType([PropTypes.object, PropTypes.string, PropTypes.bool, PropTypes.func, PropTypes.array]),\n  onChange: PropTypes.func.isRequired,\n  onBlur: PropTypes.func,\n  onClick: PropTypes.func,\n  onEdit: PropTypes.func,\n  onDelete: PropTypes.func,\n  wrapped: PropTypes.bool,\n  noValueOption: PropTypes.bool,\n  customOptionStyling: PropTypes.any,\n  isMulti: PropTypes.bool,\n  placeholder: PropTypes.string\n});\n_defineProperty(SelectWidget, \"defaultProps\", {\n  description: null,\n  required: false,\n  items: {\n    vocabulary: null\n  },\n  widgetOptions: {\n    vocabulary: null\n  },\n  error: [],\n  choices: [],\n  value: null,\n  onChange: function onChange() {},\n  onBlur: function onBlur() {},\n  onClick: function onClick() {},\n  onEdit: null,\n  onDelete: null,\n  noValueOption: true,\n  customOptionStyling: null\n});\nexport var SelectWidgetComponent = injectIntl(SelectWidget);\n_c = SelectWidgetComponent;\nexport default compose(injectLazyLibs(['reactSelect']), connect(function (state, props) {\n  var _state$vocabularies, _state$vocabularies$v, _state$vocabularies$v2;\n  var vocabBaseUrl = !props.choices ? getVocabFromHint(props) || getVocabFromField(props) || getVocabFromItems(props) : '';\n  var vocabState = (_state$vocabularies = state.vocabularies) === null || _state$vocabularies === void 0 ? void 0 : (_state$vocabularies$v = _state$vocabularies[vocabBaseUrl]) === null || _state$vocabularies$v === void 0 ? void 0 : (_state$vocabularies$v2 = _state$vocabularies$v.subrequests) === null || _state$vocabularies$v2 === void 0 ? void 0 : _state$vocabularies$v2[state.intl.locale];\n\n  // If the schema already has the choices in it, then do not try to get the vocab,\n  // even if there is one\n  if (props.choices) {\n    return {\n      choices: props.choices,\n      lang: state.intl.locale\n    };\n  } else if (vocabState) {\n    var _vocabState$items;\n    return {\n      vocabBaseUrl: vocabBaseUrl,\n      choices: (_vocabState$items = vocabState === null || vocabState === void 0 ? void 0 : vocabState.items) !== null && _vocabState$items !== void 0 ? _vocabState$items : [],\n      lang: state.intl.locale\n    };\n    // There is a moment that vocabState is not there yet, so we need to pass the\n    // vocabBaseUrl to the component.\n  } else if (vocabBaseUrl) {\n    return {\n      vocabBaseUrl: vocabBaseUrl,\n      lang: state.intl.locale\n    };\n  }\n  return {\n    lang: state.intl.locale\n  };\n}, {\n  getVocabulary: getVocabulary,\n  getVocabularyTokenTitle: getVocabularyTokenTitle\n}))(SelectWidgetComponent);\nvar _c;\n$RefreshReg$(_c, \"SelectWidgetComponent\");","map":{"version":3,"names":["React","Component","PropTypes","connect","compose","defineMessages","injectIntl","getVocabFromHint","getVocabFromField","getVocabFromItems","FormFieldWrapper","getVocabulary","getVocabularyTokenTitle","normalizeValue","customSelectStyles","DropdownIndicator","ClearIndicator","Option","selectTheme","MenuList","MultiValueContainer","injectLazyLibs","messages","idTitle","idDescription","title","description","close","choices","required","select","no_value","no_options","SelectWidget","props","length","vocabBaseUrl","vocabNameOrURL","size","subrequest","lang","id","value","intl","onChange","normalizedValue","disabled","isDisabled","Select","reactSelect","options","option","label","noValueOption","formatMessage","isMulti","customOptionStyling","placeholder","selectedOption","map","el","undefined","string","isRequired","bool","error","arrayOf","func","oneOfType","object","array","items","shape","vocabulary","widgetOptions","onBlur","onClick","onEdit","onDelete","wrapped","any","SelectWidgetComponent","state","vocabState","vocabularies","subrequests","locale"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Widgets/SelectWidget.jsx"],"sourcesContent":["/**\n * SelectWidget component.\n * @module components/manage/Widgets/SelectWidget\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { map } from 'lodash';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport {\n  getVocabFromHint,\n  getVocabFromField,\n  getVocabFromItems,\n} from '@plone/volto/helpers';\nimport { FormFieldWrapper } from '@plone/volto/components';\nimport { getVocabulary, getVocabularyTokenTitle } from '@plone/volto/actions';\nimport { normalizeValue } from '@plone/volto/components/manage/Widgets/SelectUtils';\n\nimport {\n  customSelectStyles,\n  DropdownIndicator,\n  ClearIndicator,\n  Option,\n  selectTheme,\n  MenuList,\n  MultiValueContainer,\n} from '@plone/volto/components/manage/Widgets/SelectStyling';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\n\nconst messages = defineMessages({\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  idTitle: {\n    id: 'Short Name',\n    defaultMessage: 'Short Name',\n  },\n  idDescription: {\n    id: 'Used for programmatic access to the fieldset.',\n    defaultMessage: 'Used for programmatic access to the fieldset.',\n  },\n  title: {\n    id: 'Title',\n    defaultMessage: 'Title',\n  },\n  description: {\n    id: 'Description',\n    defaultMessage: 'Description',\n  },\n  close: {\n    id: 'Close',\n    defaultMessage: 'Close',\n  },\n  choices: {\n    id: 'Choices',\n    defaultMessage: 'Choices',\n  },\n  required: {\n    id: 'Required',\n    defaultMessage: 'Required',\n  },\n  select: {\n    id: 'Select…',\n    defaultMessage: 'Select…',\n  },\n  no_value: {\n    id: 'No value',\n    defaultMessage: 'No value',\n  },\n  no_options: {\n    id: 'No options',\n    defaultMessage: 'No options',\n  },\n});\n\n/**\n * SelectWidget component class.\n * @function SelectWidget\n * @returns {string} Markup of the component.\n */\nclass SelectWidget extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    id: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    description: PropTypes.string,\n    required: PropTypes.bool,\n    error: PropTypes.arrayOf(PropTypes.string),\n    getVocabulary: PropTypes.func.isRequired,\n    getVocabularyTokenTitle: PropTypes.func.isRequired,\n    choices: PropTypes.arrayOf(\n      PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    ),\n    items: PropTypes.shape({\n      vocabulary: PropTypes.object,\n    }),\n    widgetOptions: PropTypes.shape({\n      vocabulary: PropTypes.object,\n    }),\n    value: PropTypes.oneOfType([\n      PropTypes.object,\n      PropTypes.string,\n      PropTypes.bool,\n      PropTypes.func,\n      PropTypes.array,\n    ]),\n    onChange: PropTypes.func.isRequired,\n    onBlur: PropTypes.func,\n    onClick: PropTypes.func,\n    onEdit: PropTypes.func,\n    onDelete: PropTypes.func,\n    wrapped: PropTypes.bool,\n    noValueOption: PropTypes.bool,\n    customOptionStyling: PropTypes.any,\n    isMulti: PropTypes.bool,\n    placeholder: PropTypes.string,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    description: null,\n    required: false,\n    items: {\n      vocabulary: null,\n    },\n    widgetOptions: {\n      vocabulary: null,\n    },\n    error: [],\n    choices: [],\n    value: null,\n    onChange: () => {},\n    onBlur: () => {},\n    onClick: () => {},\n    onEdit: null,\n    onDelete: null,\n    noValueOption: true,\n    customOptionStyling: null,\n  };\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    if (\n      (!this.props.choices || this.props.choices?.length === 0) &&\n      this.props.vocabBaseUrl\n    ) {\n      this.props.getVocabulary({\n        vocabNameOrURL: this.props.vocabBaseUrl,\n        size: -1,\n        subrequest: this.props.lang,\n      });\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { id, choices, value, intl, onChange } = this.props;\n    const normalizedValue = normalizeValue(choices, value, intl);\n    // Make sure that both disabled and isDisabled (from the DX layout feat work)\n    const disabled = this.props.disabled || this.props.isDisabled;\n    const Select = this.props.reactSelect.default;\n\n    let options = this.props.vocabBaseUrl\n      ? this.props.choices\n      : [\n          ...map(choices, (option) => ({\n            value: option[0],\n            label:\n              // Fix \"None\" on the serializer, to remove when fixed in p.restapi\n              option[1] !== 'None' && option[1] ? option[1] : option[0],\n          })),\n          // Only set \"no-value\" option if there's no default in the field\n          // TODO: also if this.props.defaultValue?\n          ...(this.props.noValueOption && !this.props.default\n            ? [\n                {\n                  label: this.props.intl.formatMessage(messages.no_value),\n                  value: 'no-value',\n                },\n              ]\n            : []),\n        ];\n\n    const isMulti = this.props.isMulti\n      ? this.props.isMulti\n      : id === 'roles' || id === 'groups';\n\n    return (\n      <FormFieldWrapper {...this.props}>\n        <Select\n          id={`field-${id}`}\n          key={choices}\n          name={id}\n          isDisabled={disabled}\n          isSearchable={true}\n          className=\"react-select-container\"\n          classNamePrefix=\"react-select\"\n          isMulti={isMulti}\n          options={options}\n          styles={customSelectStyles}\n          theme={selectTheme}\n          components={{\n            ...(options?.length > 25 && {\n              MenuList,\n            }),\n            MultiValueContainer,\n            DropdownIndicator,\n            ClearIndicator,\n            Option: this.props.customOptionStyling || Option,\n          }}\n          value={normalizedValue}\n          placeholder={\n            this.props.placeholder ??\n            this.props.intl.formatMessage(messages.select)\n          }\n          onChange={(selectedOption) => {\n            if (isMulti) {\n              return onChange(\n                id,\n                selectedOption.map((el) => el.value),\n              );\n            }\n            return onChange(\n              id,\n              selectedOption && selectedOption.value !== 'no-value'\n                ? selectedOption.value\n                : undefined,\n            );\n          }}\n          isClearable\n        />\n      </FormFieldWrapper>\n    );\n  }\n}\n\nexport const SelectWidgetComponent = injectIntl(SelectWidget);\n\nexport default compose(\n  injectLazyLibs(['reactSelect']),\n  connect(\n    (state, props) => {\n      const vocabBaseUrl = !props.choices\n        ? getVocabFromHint(props) ||\n          getVocabFromField(props) ||\n          getVocabFromItems(props)\n        : '';\n\n      const vocabState =\n        state.vocabularies?.[vocabBaseUrl]?.subrequests?.[state.intl.locale];\n\n      // If the schema already has the choices in it, then do not try to get the vocab,\n      // even if there is one\n      if (props.choices) {\n        return {\n          choices: props.choices,\n          lang: state.intl.locale,\n        };\n      } else if (vocabState) {\n        return {\n          vocabBaseUrl,\n          choices: vocabState?.items ?? [],\n          lang: state.intl.locale,\n        };\n        // There is a moment that vocabState is not there yet, so we need to pass the\n        // vocabBaseUrl to the component.\n      } else if (vocabBaseUrl) {\n        return {\n          vocabBaseUrl,\n          lang: state.intl.locale,\n        };\n      }\n      return { lang: state.intl.locale };\n    },\n    { getVocabulary, getVocabularyTokenTitle },\n  ),\n)(SelectWidgetComponent);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Default","defaultMessage":"Default"},{"id":"Short Name","defaultMessage":"Short Name"},{"id":"Used for programmatic access to the fieldset.","defaultMessage":"Used for programmatic access to the fieldset."},{"id":"Title","defaultMessage":"Title"},{"id":"Description","defaultMessage":"Description"},{"id":"Close","defaultMessage":"Close"},{"id":"Choices","defaultMessage":"Choices"},{"id":"Required","defaultMessage":"Required"},{"id":"Select…","defaultMessage":"Select…"},{"id":"No value","defaultMessage":"No value"},{"id":"No options","defaultMessage":"No options"}]}},"sourceType":"module","externalDependencies":[]}