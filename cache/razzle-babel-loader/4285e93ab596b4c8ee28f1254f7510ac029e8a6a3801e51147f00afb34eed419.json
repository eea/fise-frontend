{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport TableBlockEdit from './TableBlockEdit';\nimport TableBlockView from './TableBlockView';\nimport { extractTables } from './deconstruct';\nimport { normalizeTable } from './extensions/normalizeTable';\nimport tableSVG from '@plone/volto/icons/table.svg';\n\n/**\n * @summary Called from Volto to configure new or existing Volto block types.\n * @param {object} config The object received from Volto containing the\n * configuration for all the blocks.\n */\nexport default function install(config) {\n  config.settings.slate = _objectSpread(_objectSpread({}, config.settings.slate), {}, {\n    voltoBlockEmiters: [...(config.settings.slate.voltoBlockEmiters || []), extractTables],\n    tableblockExtensions: [\n    // First here gets executed last\n    // withLists,\n    // withSplitBlocksOnBreak,\n    // withDeleteSelectionOnEnter,\n    // withDeserializers,\n    // breakList,\n    normalizeTable]\n  });\n  const tableBlockConfig = {\n    id: 'table',\n    title: 'Table',\n    icon: tableSVG,\n    group: 'common',\n    view: TableBlockView,\n    edit: TableBlockEdit,\n    restricted: false,\n    mostUsed: false,\n    blockHasOwnFocusManagement: true,\n    sidebarTab: 1,\n    security: {\n      addPermission: [],\n      view: []\n    }\n    // blockHasValue: (data) => {\n    //   return true;\n    // },\n  };\n\n  config.blocks.blocksConfig.table.restricted = true;\n  config.blocks.blocksConfig.slateTable = _objectSpread(_objectSpread({}, tableBlockConfig), {}, {\n    id: 'slateTable'\n  });\n  return config;\n}","map":{"version":3,"names":["TableBlockEdit","TableBlockView","extractTables","normalizeTable","tableSVG","install","config","settings","slate","voltoBlockEmiters","tableblockExtensions","tableBlockConfig","id","title","icon","group","view","edit","restricted","mostUsed","blockHasOwnFocusManagement","sidebarTab","security","addPermission","blocks","blocksConfig","table","slateTable"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/packages/volto-slate/src/blocks/Table/index.js"],"sourcesContent":["import TableBlockEdit from './TableBlockEdit';\nimport TableBlockView from './TableBlockView';\nimport { extractTables } from './deconstruct';\nimport { normalizeTable } from './extensions/normalizeTable';\n\nimport tableSVG from '@plone/volto/icons/table.svg';\n\n/**\n * @summary Called from Volto to configure new or existing Volto block types.\n * @param {object} config The object received from Volto containing the\n * configuration for all the blocks.\n */\nexport default function install(config) {\n  config.settings.slate = {\n    ...config.settings.slate,\n    voltoBlockEmiters: [\n      ...(config.settings.slate.voltoBlockEmiters || []),\n      extractTables,\n    ],\n    tableblockExtensions: [\n      // First here gets executed last\n      // withLists,\n      // withSplitBlocksOnBreak,\n      // withDeleteSelectionOnEnter,\n      // withDeserializers,\n      // breakList,\n      normalizeTable,\n    ],\n  };\n\n  const tableBlockConfig = {\n    id: 'table',\n    title: 'Table',\n    icon: tableSVG,\n    group: 'common',\n    view: TableBlockView,\n    edit: TableBlockEdit,\n    restricted: false,\n    mostUsed: false,\n    blockHasOwnFocusManagement: true,\n    sidebarTab: 1,\n    security: {\n      addPermission: [],\n      view: [],\n    },\n    // blockHasValue: (data) => {\n    //   return true;\n    // },\n  };\n\n  config.blocks.blocksConfig.table.restricted = true;\n  config.blocks.blocksConfig.slateTable = {\n    ...tableBlockConfig,\n    id: 'slateTable',\n  };\n\n  return config;\n}\n"],"mappings":";;;AAAA,OAAOA,cAAc,MAAM,kBAAkB;AAC7C,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,SAASC,aAAa,QAAQ,eAAe;AAC7C,SAASC,cAAc,QAAQ,6BAA6B;AAE5D,OAAOC,QAAQ,MAAM,8BAA8B;;AAEnD;AACA;AACA;AACA;AACA;AACA,eAAe,SAASC,OAAO,CAACC,MAAM,EAAE;EACtCA,MAAM,CAACC,QAAQ,CAACC,KAAK,mCAChBF,MAAM,CAACC,QAAQ,CAACC,KAAK;IACxBC,iBAAiB,EAAE,CACjB,IAAIH,MAAM,CAACC,QAAQ,CAACC,KAAK,CAACC,iBAAiB,IAAI,EAAE,CAAC,EAClDP,aAAa,CACd;IACDQ,oBAAoB,EAAE;IACpB;IACA;IACA;IACA;IACA;IACA;IACAP,cAAc;EACf,EACF;EAED,MAAMQ,gBAAgB,GAAG;IACvBC,EAAE,EAAE,OAAO;IACXC,KAAK,EAAE,OAAO;IACdC,IAAI,EAAEV,QAAQ;IACdW,KAAK,EAAE,QAAQ;IACfC,IAAI,EAAEf,cAAc;IACpBgB,IAAI,EAAEjB,cAAc;IACpBkB,UAAU,EAAE,KAAK;IACjBC,QAAQ,EAAE,KAAK;IACfC,0BAA0B,EAAE,IAAI;IAChCC,UAAU,EAAE,CAAC;IACbC,QAAQ,EAAE;MACRC,aAAa,EAAE,EAAE;MACjBP,IAAI,EAAE;IACR;IACA;IACA;IACA;EACF,CAAC;;EAEDV,MAAM,CAACkB,MAAM,CAACC,YAAY,CAACC,KAAK,CAACR,UAAU,GAAG,IAAI;EAClDZ,MAAM,CAACkB,MAAM,CAACC,YAAY,CAACE,UAAU,mCAChChB,gBAAgB;IACnBC,EAAE,EAAE;EAAY,EACjB;EAED,OAAON,MAAM;AACf"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}