{"ast":null,"code":"import _map from \"lodash/map\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-slate/src/components/themes/View/DefaultSlateView.jsx\";\nvar __jsx = React.createElement;\n/**\n * Document view component.\n * @module components/theme/View/DefaultView\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport RichTextWidgetView from 'volto-slate/widgets/RichTextWidgetView';\nimport { Container, Image } from 'semantic-ui-react';\nimport config from '@plone/volto/registry';\nimport { getBlocksFieldname, getBlocksLayoutFieldname, hasBlocksData, getBaseUrl } from '@plone/volto/helpers';\nconst messages = defineMessages({\n  unknownBlock: {\n    \"id\": \"Unknown Block\",\n    \"defaultMessage\": \"Unknown Block {block}\"\n  }\n});\n\n/**\n * Component to display the default view.\n * @function DefaultView\n * @param {Object} content Content object.\n * @returns {string} Markup of the component.\n */\nconst DefaultView = ({\n  content,\n  intl,\n  location\n}) => {\n  var _content$text;\n  const blocksFieldname = getBlocksFieldname(content);\n  const blocksLayoutFieldname = getBlocksLayoutFieldname(content);\n  return hasBlocksData(content) ? __jsx(\"div\", {\n    id: \"page-document\",\n    className: \"ui container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, _map(content[blocksLayoutFieldname].items, block => {\n    var _config$blocks$blocks, _content$blocksFieldn, _content$blocksFieldn2, _content$blocksFieldn3, _content$blocksFieldn4;\n    const Block = ((_config$blocks$blocks = config.blocks.blocksConfig[(_content$blocksFieldn = content[blocksFieldname]) === null || _content$blocksFieldn === void 0 ? void 0 : (_content$blocksFieldn2 = _content$blocksFieldn[block]) === null || _content$blocksFieldn2 === void 0 ? void 0 : _content$blocksFieldn2['@type']]) === null || _config$blocks$blocks === void 0 ? void 0 : _config$blocks$blocks['view']) || null;\n    return Block !== null ? __jsx(Block, {\n      key: block,\n      id: block,\n      properties: content,\n      data: content[blocksFieldname][block],\n      path: getBaseUrl((location === null || location === void 0 ? void 0 : location.pathname) || ''),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }\n    }) : __jsx(\"div\", {\n      key: block,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }\n    }, intl.formatMessage(messages.unknownBlock, {\n      block: (_content$blocksFieldn3 = content[blocksFieldname]) === null || _content$blocksFieldn3 === void 0 ? void 0 : (_content$blocksFieldn4 = _content$blocksFieldn3[block]) === null || _content$blocksFieldn4 === void 0 ? void 0 : _content$blocksFieldn4['@type']\n    }));\n  })) : __jsx(Container, {\n    id: \"page-document\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    className: \"documentFirstHeading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, content.title), content.description && __jsx(\"p\", {\n    className: \"documentDescription\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }\n  }, content.description), content.image && __jsx(Image, {\n    className: \"document-image\",\n    src: content.image.scales.thumb.download,\n    floated: \"right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }), content.remoteUrl && __jsx(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, \"The link address is:\", __jsx(\"a\", {\n    href: content.remoteUrl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }, content.remoteUrl)), ((_content$text = content.text) === null || _content$text === void 0 ? void 0 : _content$text.data) && __jsx(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: content.text.data\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }), content.slate && __jsx(RichTextWidgetView, {\n    value: content.slate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 25\n    }\n  }));\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nDefaultView.propTypes = {\n  /**\n   * Content of the object\n   */\n  content: PropTypes.shape({\n    /**\n     * Title of the object\n     */\n    title: PropTypes.string,\n    /**\n     * Description of the object\n     */\n    description: PropTypes.string,\n    /**\n     * Text of the object\n     */\n    text: PropTypes.shape({\n      /**\n       * Data of the text of the object\n       */\n      data: PropTypes.string\n    })\n  }).isRequired\n};\nexport default injectIntl(DefaultView);","map":{"version":3,"names":["React","PropTypes","defineMessages","injectIntl","RichTextWidgetView","Container","Image","config","getBlocksFieldname","getBlocksLayoutFieldname","hasBlocksData","getBaseUrl","messages","unknownBlock","DefaultView","content","intl","location","blocksFieldname","blocksLayoutFieldname","items","block","Block","blocks","blocksConfig","pathname","formatMessage","title","description","image","scales","thumb","download","remoteUrl","text","data","__html","slate","propTypes","shape","string","isRequired"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-slate/src/components/themes/View/DefaultSlateView.jsx"],"sourcesContent":["/**\n * Document view component.\n * @module components/theme/View/DefaultView\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport RichTextWidgetView from 'volto-slate/widgets/RichTextWidgetView';\nimport { Container, Image } from 'semantic-ui-react';\nimport { map } from 'lodash';\nimport config from '@plone/volto/registry';\n\nimport {\n  getBlocksFieldname,\n  getBlocksLayoutFieldname,\n  hasBlocksData,\n  getBaseUrl,\n} from '@plone/volto/helpers';\n\nconst messages = defineMessages({\n  unknownBlock: {\n    id: 'Unknown Block',\n    defaultMessage: 'Unknown Block {block}',\n  },\n});\n\n/**\n * Component to display the default view.\n * @function DefaultView\n * @param {Object} content Content object.\n * @returns {string} Markup of the component.\n */\nconst DefaultView = ({ content, intl, location }) => {\n  const blocksFieldname = getBlocksFieldname(content);\n  const blocksLayoutFieldname = getBlocksLayoutFieldname(content);\n\n  return hasBlocksData(content) ? (\n    <div id=\"page-document\" className=\"ui container\">\n      {map(content[blocksLayoutFieldname].items, (block) => {\n        const Block =\n          config.blocks.blocksConfig[\n            content[blocksFieldname]?.[block]?.['@type']\n          ]?.['view'] || null;\n        return Block !== null ? (\n          <Block\n            key={block}\n            id={block}\n            properties={content}\n            data={content[blocksFieldname][block]}\n            path={getBaseUrl(location?.pathname || '')}\n          />\n        ) : (\n          <div key={block}>\n            {intl.formatMessage(messages.unknownBlock, {\n              block: content[blocksFieldname]?.[block]?.['@type'],\n            })}\n          </div>\n        );\n      })}\n    </div>\n  ) : (\n    <Container id=\"page-document\">\n      <h1 className=\"documentFirstHeading\">{content.title}</h1>\n      {content.description && (\n        <p className=\"documentDescription\">{content.description}</p>\n      )}\n      {content.image && (\n        <Image\n          className=\"document-image\"\n          src={content.image.scales.thumb.download}\n          floated=\"right\"\n        />\n      )}\n      {content.remoteUrl && (\n        <span>\n          The link address is:\n          <a href={content.remoteUrl}>{content.remoteUrl}</a>\n        </span>\n      )}\n      {content.text?.data && (\n        <div\n          dangerouslySetInnerHTML={{\n            __html: content.text.data,\n          }}\n        />\n      )}\n      {content.slate && <RichTextWidgetView value={content.slate} />}\n    </Container>\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nDefaultView.propTypes = {\n  /**\n   * Content of the object\n   */\n  content: PropTypes.shape({\n    /**\n     * Title of the object\n     */\n    title: PropTypes.string,\n    /**\n     * Description of the object\n     */\n    description: PropTypes.string,\n    /**\n     * Text of the object\n     */\n    text: PropTypes.shape({\n      /**\n       * Data of the text of the object\n       */\n      data: PropTypes.string,\n    }),\n  }).isRequired,\n};\n\nexport default injectIntl(DefaultView);\n"],"mappings":";;;AAAA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,YAAY;AAClC,SAASC,cAAc,EAAEC,UAAU,QAAQ,YAAY;AACvD,OAAOC,kBAAkB,MAAM,wCAAwC;AACvE,SAASC,SAAS,EAAEC,KAAK,QAAQ,mBAAmB;AAEpD,OAAOC,MAAM,MAAM,uBAAuB;AAE1C,SACEC,kBAAkB,EAClBC,wBAAwB,EACxBC,aAAa,EACbC,UAAU,QACL,sBAAsB;AAE7B,MAAMC,QAAQ,GAAGV,cAAc,CAAC;EAC9BW,YAAY;IAAA;IAAA;EAAA;AAId,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,GAAG,CAAC;EAAEC,OAAO;EAAEC,IAAI;EAAEC;AAAS,CAAC,KAAK;EAAA;EACnD,MAAMC,eAAe,GAAGV,kBAAkB,CAACO,OAAO,CAAC;EACnD,MAAMI,qBAAqB,GAAGV,wBAAwB,CAACM,OAAO,CAAC;EAE/D,OAAOL,aAAa,CAACK,OAAO,CAAC,GAC3B;IAAK,EAAE,EAAC,eAAe;IAAC,SAAS,EAAC,cAAc;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAC7C,KAAIA,OAAO,CAACI,qBAAqB,CAAC,CAACC,KAAK,EAAGC,KAAK,IAAK;IAAA;IACpD,MAAMC,KAAK,GACT,0BAAAf,MAAM,CAACgB,MAAM,CAACC,YAAY,0BACxBT,OAAO,CAACG,eAAe,CAAC,oFAAxB,sBAA2BG,KAAK,CAAC,2DAAjC,uBAAoC,OAAO,CAAC,CAC7C,0DAFD,sBAEI,MAAM,CAAC,KAAI,IAAI;IACrB,OAAOC,KAAK,KAAK,IAAI,GACnB,MAAC,KAAK;MACJ,GAAG,EAAED,KAAM;MACX,EAAE,EAAEA,KAAM;MACV,UAAU,EAAEN,OAAQ;MACpB,IAAI,EAAEA,OAAO,CAACG,eAAe,CAAC,CAACG,KAAK,CAAE;MACtC,IAAI,EAAEV,UAAU,CAAC,CAAAM,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEQ,QAAQ,KAAI,EAAE,CAAE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAC3C,GAEF;MAAK,GAAG,EAAEJ,KAAM;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACbL,IAAI,CAACU,aAAa,CAACd,QAAQ,CAACC,YAAY,EAAE;MACzCQ,KAAK,4BAAEN,OAAO,CAACG,eAAe,CAAC,qFAAxB,uBAA2BG,KAAK,CAAC,2DAAjC,uBAAoC,OAAO;IACpD,CAAC,CAAC,CAEL;EACH,CAAC,CAAC,CACE,GAEN,MAAC,SAAS;IAAC,EAAE,EAAC,eAAe;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAC3B;IAAI,SAAS,EAAC,sBAAsB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAEN,OAAO,CAACY,KAAK,CAAM,EACxDZ,OAAO,CAACa,WAAW,IAClB;IAAG,SAAS,EAAC,qBAAqB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAEb,OAAO,CAACa,WAAW,CACxD,EACAb,OAAO,CAACc,KAAK,IACZ,MAAC,KAAK;IACJ,SAAS,EAAC,gBAAgB;IAC1B,GAAG,EAAEd,OAAO,CAACc,KAAK,CAACC,MAAM,CAACC,KAAK,CAACC,QAAS;IACzC,OAAO,EAAC,OAAO;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAElB,EACAjB,OAAO,CAACkB,SAAS,IAChB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,2BAEE;IAAG,IAAI,EAAElB,OAAO,CAACkB,SAAU;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAElB,OAAO,CAACkB,SAAS,CAAK,CAEtD,EACA,kBAAAlB,OAAO,CAACmB,IAAI,kDAAZ,cAAcC,IAAI,KACjB;IACE,uBAAuB,EAAE;MACvBC,MAAM,EAAErB,OAAO,CAACmB,IAAI,CAACC;IACvB,CAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAEL,EACApB,OAAO,CAACsB,KAAK,IAAI,MAAC,kBAAkB;IAAC,KAAK,EAAEtB,OAAO,CAACsB,KAAM;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAG,CAEjE;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAvB,WAAW,CAACwB,SAAS,GAAG;EACtB;AACF;AACA;EACEvB,OAAO,EAAEd,SAAS,CAACsC,KAAK,CAAC;IACvB;AACJ;AACA;IACIZ,KAAK,EAAE1B,SAAS,CAACuC,MAAM;IACvB;AACJ;AACA;IACIZ,WAAW,EAAE3B,SAAS,CAACuC,MAAM;IAC7B;AACJ;AACA;IACIN,IAAI,EAAEjC,SAAS,CAACsC,KAAK,CAAC;MACpB;AACN;AACA;MACMJ,IAAI,EAAElC,SAAS,CAACuC;IAClB,CAAC;EACH,CAAC,CAAC,CAACC;AACL,CAAC;AAED,eAAetC,UAAU,CAACW,WAAW,CAAC"},"metadata":{"react-intl":{"messages":[{"id":"Unknown Block","defaultMessage":"Unknown Block {block}"}]}},"sourceType":"module","externalDependencies":[]}