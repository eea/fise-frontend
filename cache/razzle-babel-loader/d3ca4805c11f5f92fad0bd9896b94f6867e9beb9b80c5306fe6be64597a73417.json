{"ast":null,"code":"import _map from \"lodash/map\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-plotlycharts/src/Widgets/VisualizationWidget.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport React, { Component } from 'react';\nimport { Button, Modal, Grid, Label } from 'semantic-ui-react';\nimport { PickObjectWidget } from '@eeacms/volto-datablocks/components';\nimport { FormFieldWrapper } from '@plone/volto/components';\nimport ConnectedChart from '../ConnectedChart';\nimport ChartEditor from '../ChartEditor';\nimport './style.less';\nclass PlotlyEditorModal extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: props.value\n    };\n  }\n  render() {\n    var _this$state$value;\n    return __jsx(Modal, {\n      open: true,\n      size: \"fullscreen\",\n      className: \"chart-editor-modal\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 7\n      }\n    }, __jsx(Modal.Content, {\n      scrolling: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }\n    }, __jsx(ChartEditor, {\n      value: this.state.value,\n      onChangeValue: value => {\n        this.setState({\n          value\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }\n    })), __jsx(Modal.Actions, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }\n    }, __jsx(Grid, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }\n    }, __jsx(Grid.Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }\n    }, __jsx(Grid.Column, {\n      computer: 8,\n      tablet: 12,\n      verticalAlign: \"middle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 15\n      }\n    }, __jsx(PickObjectWidget, {\n      title: \"Select data source\",\n      id: \"provider-data\",\n      onChange: (_, provider_url) => {\n        this.setState({\n          value: _objectSpread(_objectSpread({}, this.state.value), {}, {\n            provider_url\n          })\n        });\n      },\n      value: (_this$state$value = this.state.value) === null || _this$state$value === void 0 ? void 0 : _this$state$value.provider_url,\n      showReload: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }\n    })), __jsx(Grid.Column, {\n      computer: 4,\n      tablet: 12,\n      verticalAlign: \"middle\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 15\n      }\n    }, __jsx(Button, {\n      primary: true,\n      floated: \"right\",\n      onClick: () => this.props.onChange(this.state.value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }\n    }, \"Apply changes\"), __jsx(Button, {\n      floated: \"right\",\n      onClick: this.props.onClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }\n    }, \"Close\"))))));\n  }\n}\nclass VisualizationWidget extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showChartEditor: false\n    };\n  }\n  handleModalChange(value) {\n    const chartData = _objectSpread(_objectSpread({}, value.chartData), {}, {\n      provider_url: value.provider_url\n    });\n    this.props.onChange(this.props.id, {\n      chartData,\n      provider_url: value.provider_url\n    });\n    this.setState({\n      showChartEditor: false\n    });\n  }\n\n  // This is the structure of value\n  // value = {\n  //   chartData: {\n  //     data: data || [],\n  //     layout: layout || {},\n  //     frames: frames || [],\n  //     provider_url: provider_url || undefined\n  //   }\n  //   provider_url: provider_url\n  // }\n\n  render() {\n    const {\n      id,\n      title,\n      description,\n      error,\n      value\n    } = this.props;\n    if (__SERVER__) return '';\n    return __jsx(FormFieldWrapper, _extends({}, this.props, {\n      columns: 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 7\n      }\n    }), __jsx(\"div\", {\n      className: \"wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }\n    }, __jsx(\"label\", {\n      htmlFor: `field-${id}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }\n    }, title), __jsx(Button, {\n      floated: \"right\",\n      onClick: e => {\n        e.preventDefault();\n        e.stopPropagation();\n        this.setState({\n          showChartEditor: true\n        });\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }\n    }, \"Open Chart Editor\")), description && __jsx(\"p\", {\n      className: \"help\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 25\n      }\n    }, description), __jsx(ConnectedChart, {\n      visualization: value,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }\n    }), this.state.showChartEditor ? __jsx(PlotlyEditorModal, {\n      value: value,\n      onChange: changedValue => this.handleModalChange(changedValue),\n      onClose: () => this.setState({\n        showChartEditor: false\n      }),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }\n    }) : '', _map(error, message => __jsx(Label, {\n      key: message,\n      basic: true,\n      color: \"red\",\n      pointing: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }\n    }, message)));\n  }\n}\nexport default VisualizationWidget;","map":{"version":3,"names":["React","Component","Button","Modal","Grid","Label","PickObjectWidget","FormFieldWrapper","ConnectedChart","ChartEditor","PlotlyEditorModal","constructor","props","state","value","render","setState","_","provider_url","onChange","onClose","VisualizationWidget","showChartEditor","handleModalChange","chartData","id","title","description","error","__SERVER__","e","preventDefault","stopPropagation","changedValue","message"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-plotlycharts/src/Widgets/VisualizationWidget.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport { Button, Modal, Grid, Label } from 'semantic-ui-react';\nimport { map } from 'lodash';\n\nimport { PickObjectWidget } from '@eeacms/volto-datablocks/components';\nimport { FormFieldWrapper } from '@plone/volto/components';\n\nimport ConnectedChart from '../ConnectedChart';\nimport ChartEditor from '../ChartEditor';\n\nimport './style.less';\n\nclass PlotlyEditorModal extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: props.value,\n    };\n  }\n\n  render() {\n    return (\n      <Modal open={true} size=\"fullscreen\" className=\"chart-editor-modal\">\n        <Modal.Content scrolling>\n          <ChartEditor\n            value={this.state.value}\n            onChangeValue={(value) => {\n              this.setState({ value });\n            }}\n          />\n        </Modal.Content>\n        <Modal.Actions>\n          <Grid>\n            <Grid.Row>\n              <Grid.Column computer={8} tablet={12} verticalAlign=\"middle\">\n                <PickObjectWidget\n                  title=\"Select data source\"\n                  id=\"provider-data\"\n                  onChange={(_, provider_url) => {\n                    this.setState({\n                      value: { ...this.state.value, provider_url },\n                    });\n                  }}\n                  value={this.state.value?.provider_url}\n                  showReload={true}\n                />\n              </Grid.Column>\n              <Grid.Column computer={4} tablet={12} verticalAlign=\"middle\">\n                <Button\n                  primary\n                  floated=\"right\"\n                  onClick={() => this.props.onChange(this.state.value)}\n                >\n                  Apply changes\n                </Button>\n                <Button floated=\"right\" onClick={this.props.onClose}>\n                  Close\n                </Button>\n              </Grid.Column>\n            </Grid.Row>\n          </Grid>\n        </Modal.Actions>\n      </Modal>\n    );\n  }\n}\n\nclass VisualizationWidget extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      showChartEditor: false,\n    };\n  }\n\n  handleModalChange(value) {\n    const chartData = {\n      ...value.chartData,\n      provider_url: value.provider_url,\n    };\n    this.props.onChange(this.props.id, {\n      chartData,\n      provider_url: value.provider_url,\n    });\n    this.setState({\n      showChartEditor: false,\n    });\n  }\n\n  // This is the structure of value\n  // value = {\n  //   chartData: {\n  //     data: data || [],\n  //     layout: layout || {},\n  //     frames: frames || [],\n  //     provider_url: provider_url || undefined\n  //   }\n  //   provider_url: provider_url\n  // }\n\n  render() {\n    const { id, title, description, error, value } = this.props;\n\n    if (__SERVER__) return '';\n\n    return (\n      <FormFieldWrapper {...this.props} columns={1}>\n        <div className=\"wrapper\">\n          <label htmlFor={`field-${id}`}>{title}</label>\n          <Button\n            floated=\"right\"\n            onClick={(e) => {\n              e.preventDefault();\n              e.stopPropagation();\n              this.setState({ showChartEditor: true });\n            }}\n          >\n            Open Chart Editor\n          </Button>\n        </div>\n        {description && <p className=\"help\">{description}</p>}\n        <ConnectedChart visualization={value} />\n        {this.state.showChartEditor ? (\n          <PlotlyEditorModal\n            value={value}\n            onChange={(changedValue) => this.handleModalChange(changedValue)}\n            onClose={() =>\n              this.setState({\n                showChartEditor: false,\n              })\n            }\n          />\n        ) : (\n          ''\n        )}\n        {map(error, (message) => (\n          <Label key={message} basic color=\"red\" pointing>\n            {message}\n          </Label>\n        ))}\n      </FormFieldWrapper>\n    );\n  }\n}\n\nexport default VisualizationWidget;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}