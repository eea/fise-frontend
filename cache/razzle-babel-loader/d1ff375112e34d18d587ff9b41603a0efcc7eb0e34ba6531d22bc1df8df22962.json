{"ast":null,"code":"import _extends from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/extends.js\";\nimport _objectWithoutProperties from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _excluded = [\"connectDropTarget\", \"connectDragSource\", \"connectDragPreview\"];\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Form/Field.jsx\",\n  _this = this;\nvar __jsx = React.createElement;\n/**\n * Field component.\n * @module components/manage/Form/Field\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport config from '@plone/volto/registry';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\nvar MODE_HIDDEN = 'hidden'; //hidden mode. If mode is hidden, field is not rendered\n/**\n * Get default widget\n * @method getViewDefault\n * @returns {string} Widget component.\n */\nvar getWidgetDefault = function getWidgetDefault() {\n  return config.widgets[\"default\"];\n};\n\n/**\n * Get widget by field's `id` attribute\n * @method getWidgetById\n * @param {string} id Id\n * @returns {string} Widget component.\n */\nvar getWidgetByFieldId = function getWidgetByFieldId(id) {\n  return config.widgets.id[id] || null;\n};\n\n/**\n * Get widget by factory attribute\n * @method getWidgetByFactory\n * @param {string} id Id\n * @returns {string} Widget component.\n */\nvar getWidgetByFactory = function getWidgetByFactory(factory) {\n  var _config$widgets$facto;\n  return ((_config$widgets$facto = config.widgets.factory) === null || _config$widgets$facto === void 0 ? void 0 : _config$widgets$facto[factory]) || null;\n};\n\n/**\n * Get widget by field's `widget` attribute\n * @method getWidgetByName\n * @param {string} widget Widget\n * @returns {string} Widget component.\n */\nvar getWidgetByName = function getWidgetByName(widget) {\n  return typeof widget === 'string' ? config.widgets.widget[widget] || getWidgetDefault() : null;\n};\n\n/**\n * Get widget by tagged values\n * @param {object} widgetOptions\n * @returns {string} Widget component.\n *\n\ndirectives.widget(\n    'fieldname',\n    frontendOptions={\n        \"widget\": 'specialwidget',\n        \"version\": 'extra'\n    })\n\n */\nvar getWidgetFromTaggedValues = function getWidgetFromTaggedValues(widgetOptions) {\n  var _widgetOptions$fronte;\n  return typeof (widgetOptions === null || widgetOptions === void 0 ? void 0 : (_widgetOptions$fronte = widgetOptions.frontendOptions) === null || _widgetOptions$fronte === void 0 ? void 0 : _widgetOptions$fronte.widget) === 'string' ? config.widgets.widget[widgetOptions.frontendOptions.widget] : null;\n};\n\n/**\n * Get widget props from tagged values\n * @param {object} widgetOptions\n * @returns {string} Widget component.\n *\n\ndirectives.widget(\n    \"fieldname\",\n    frontendOptions={\n        \"widget\": \"specialwidget\",\n        \"widgetProps\": {\"prop1\": \"specialprop\"}\n    })\n\n */\nvar getWidgetPropsFromTaggedValues = function getWidgetPropsFromTaggedValues(widgetOptions) {\n  var _widgetOptions$fronte2;\n  return typeof (widgetOptions === null || widgetOptions === void 0 ? void 0 : (_widgetOptions$fronte2 = widgetOptions.frontendOptions) === null || _widgetOptions$fronte2 === void 0 ? void 0 : _widgetOptions$fronte2.widgetProps) === 'object' ? widgetOptions.frontendOptions.widgetProps : null;\n};\n\n/**\n * Get widget by field's `vocabulary` attribute\n * @method getWidgetByVocabulary\n * @param {string} vocabulary Widget\n * @returns {string} Widget component.\n */\nvar getWidgetByVocabulary = function getWidgetByVocabulary(vocabulary) {\n  return vocabulary && vocabulary['@id'] ? config.widgets.vocabulary[vocabulary['@id'].replace(/^.*\\/@vocabularies\\//, '')] : null;\n};\n\n/**\n * Get widget by field's hints `vocabulary` attribute in widgetOptions\n * @method getWidgetByVocabularyFromHint\n * @param {string} props Widget props\n * @returns {string} Widget component.\n */\nvar getWidgetByVocabularyFromHint = function getWidgetByVocabularyFromHint(props) {\n  return props.widgetOptions && props.widgetOptions.vocabulary ? config.widgets.vocabulary[props.widgetOptions.vocabulary['@id'].replace(/^.*\\/@vocabularies\\//, '')] : null;\n};\n\n/**\n * Get widget by field's `choices` attribute\n * @method getWidgetByChoices\n * @param {string} choices Widget\n * @returns {string} Widget component.\n */\nvar getWidgetByChoices = function getWidgetByChoices(props) {\n  if (props.choices) {\n    return config.widgets.choices;\n  }\n  if (props.vocabulary) {\n    // If vocabulary exists, then it means it's a choice field in disguise with\n    // no widget specified that probably contains a string then we force it\n    // to be a select widget instead\n    return config.widgets.choices;\n  }\n  return null;\n};\n\n/**\n * Get widget by field's `type` attribute\n * @method getWidgetByType\n * @param {string} type Type\n * @returns {string} Widget component.\n */\nvar getWidgetByType = function getWidgetByType(type) {\n  return config.widgets.type[type] || null;\n};\n\n/**\n * Field component class.\n * @function Field\n * @param {Object} props Properties.\n * @returns {string} Markup of the component.\n */\nvar UnconnectedField = function UnconnectedField(props, _ref) {\n  var intl = _ref.intl;\n  var Widget = getWidgetByFieldId(props.id) || getWidgetFromTaggedValues(props.widgetOptions) || getWidgetByName(props.widget) || getWidgetByChoices(props) || getWidgetByVocabulary(props.vocabulary) || getWidgetByVocabularyFromHint(props) || getWidgetByFactory(props.factory) || getWidgetByType(props.type) || getWidgetDefault();\n  if (props.mode === MODE_HIDDEN) {\n    return null;\n  }\n\n  // Adding the widget props from tagged values (if any)\n  var widgetProps = _objectSpread(_objectSpread({}, props), getWidgetPropsFromTaggedValues(props.widgetOptions));\n  if (props.onOrder) {\n    var _props$reactDnd = props.reactDnd,\n      DropTarget = _props$reactDnd.DropTarget,\n      DragSource = _props$reactDnd.DragSource;\n    var WrappedWidget = DropTarget('field', {\n      hover: function hover(properties, monitor) {\n        var dragOrder = monitor.getItem().order;\n        var hoverOrder = properties.order;\n        if (dragOrder === hoverOrder) {\n          return;\n        }\n        properties.onOrder(dragOrder, hoverOrder - dragOrder);\n        monitor.getItem().order = hoverOrder;\n      }\n    }, function (connect) {\n      return {\n        connectDropTarget: connect.dropTarget()\n      };\n    })(DragSource('field', {\n      beginDrag: function beginDrag(properties) {\n        return {\n          id: properties.label,\n          order: properties.order\n        };\n      }\n    }, function (connect, monitor) {\n      return {\n        connectDragSource: connect.dragSource(),\n        connectDragPreview: connect.dragPreview(),\n        isDragging: monitor.isDragging()\n      };\n    })(function (_ref2) {\n      var connectDropTarget = _ref2.connectDropTarget,\n        connectDragSource = _ref2.connectDragSource,\n        connectDragPreview = _ref2.connectDragPreview,\n        rest = _objectWithoutProperties(_ref2, _excluded);\n      return connectDropTarget(connectDragSource(connectDragPreview(__jsx(\"div\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 17\n        }\n      }, __jsx(Widget, _extends({}, rest, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 19\n        }\n      }))))));\n    }));\n    return __jsx(WrappedWidget, _extends({}, widgetProps, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 12\n      }\n    }));\n  }\n  return __jsx(Widget, _extends({}, widgetProps, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 10\n    }\n  }));\n};\n_c = UnconnectedField;\nvar DndConnectedField = injectLazyLibs(['reactDnd'])(UnconnectedField);\n_c2 = DndConnectedField;\nvar Field = function Field(props) {\n  return props.onOrder ? __jsx(DndConnectedField, _extends({}, props, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 5\n    }\n  })) : __jsx(UnconnectedField, _extends({}, props, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 5\n    }\n  }));\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\n_c3 = Field;\nField.propTypes = {\n  widget: PropTypes.string,\n  vocabulary: PropTypes.shape({\n    '@id': PropTypes.string\n  }),\n  choices: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string)),\n  type: PropTypes.string,\n  id: PropTypes.string.isRequired,\n  focus: PropTypes.bool,\n  onOrder: PropTypes.func\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nField.defaultProps = {\n  widget: null,\n  vocabulary: null,\n  choices: null,\n  type: 'string',\n  focus: false,\n  onOrder: null\n};\nexport default _c4 = injectIntl(Field);\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"UnconnectedField\");\n$RefreshReg$(_c2, \"DndConnectedField\");\n$RefreshReg$(_c3, \"Field\");\n$RefreshReg$(_c4, \"%default%\");","map":{"version":3,"names":["React","PropTypes","injectIntl","config","injectLazyLibs","MODE_HIDDEN","getWidgetDefault","widgets","getWidgetByFieldId","id","getWidgetByFactory","factory","getWidgetByName","widget","getWidgetFromTaggedValues","widgetOptions","frontendOptions","getWidgetPropsFromTaggedValues","widgetProps","getWidgetByVocabulary","vocabulary","replace","getWidgetByVocabularyFromHint","props","getWidgetByChoices","choices","getWidgetByType","type","UnconnectedField","intl","Widget","mode","onOrder","reactDnd","DropTarget","DragSource","WrappedWidget","hover","properties","monitor","dragOrder","getItem","order","hoverOrder","connect","connectDropTarget","dropTarget","beginDrag","label","connectDragSource","dragSource","connectDragPreview","dragPreview","isDragging","rest","DndConnectedField","Field","propTypes","string","shape","arrayOf","isRequired","focus","bool","func","defaultProps"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Form/Field.jsx"],"sourcesContent":["/**\n * Field component.\n * @module components/manage/Form/Field\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl } from 'react-intl';\nimport config from '@plone/volto/registry';\nimport { injectLazyLibs } from '@plone/volto/helpers/Loadable/Loadable';\n\nconst MODE_HIDDEN = 'hidden'; //hidden mode. If mode is hidden, field is not rendered\n/**\n * Get default widget\n * @method getViewDefault\n * @returns {string} Widget component.\n */\nconst getWidgetDefault = () => config.widgets.default;\n\n/**\n * Get widget by field's `id` attribute\n * @method getWidgetById\n * @param {string} id Id\n * @returns {string} Widget component.\n */\nconst getWidgetByFieldId = (id) => config.widgets.id[id] || null;\n\n/**\n * Get widget by factory attribute\n * @method getWidgetByFactory\n * @param {string} id Id\n * @returns {string} Widget component.\n */\nconst getWidgetByFactory = (factory) =>\n  config.widgets.factory?.[factory] || null;\n\n/**\n * Get widget by field's `widget` attribute\n * @method getWidgetByName\n * @param {string} widget Widget\n * @returns {string} Widget component.\n */\nconst getWidgetByName = (widget) =>\n  typeof widget === 'string'\n    ? config.widgets.widget[widget] || getWidgetDefault()\n    : null;\n\n/**\n * Get widget by tagged values\n * @param {object} widgetOptions\n * @returns {string} Widget component.\n *\n\ndirectives.widget(\n    'fieldname',\n    frontendOptions={\n        \"widget\": 'specialwidget',\n        \"version\": 'extra'\n    })\n\n */\nconst getWidgetFromTaggedValues = (widgetOptions) =>\n  typeof widgetOptions?.frontendOptions?.widget === 'string'\n    ? config.widgets.widget[widgetOptions.frontendOptions.widget]\n    : null;\n\n/**\n * Get widget props from tagged values\n * @param {object} widgetOptions\n * @returns {string} Widget component.\n *\n\ndirectives.widget(\n    \"fieldname\",\n    frontendOptions={\n        \"widget\": \"specialwidget\",\n        \"widgetProps\": {\"prop1\": \"specialprop\"}\n    })\n\n */\nconst getWidgetPropsFromTaggedValues = (widgetOptions) =>\n  typeof widgetOptions?.frontendOptions?.widgetProps === 'object'\n    ? widgetOptions.frontendOptions.widgetProps\n    : null;\n\n/**\n * Get widget by field's `vocabulary` attribute\n * @method getWidgetByVocabulary\n * @param {string} vocabulary Widget\n * @returns {string} Widget component.\n */\nconst getWidgetByVocabulary = (vocabulary) =>\n  vocabulary && vocabulary['@id']\n    ? config.widgets.vocabulary[\n        vocabulary['@id'].replace(/^.*\\/@vocabularies\\//, '')\n      ]\n    : null;\n\n/**\n * Get widget by field's hints `vocabulary` attribute in widgetOptions\n * @method getWidgetByVocabularyFromHint\n * @param {string} props Widget props\n * @returns {string} Widget component.\n */\nconst getWidgetByVocabularyFromHint = (props) =>\n  props.widgetOptions && props.widgetOptions.vocabulary\n    ? config.widgets.vocabulary[\n        props.widgetOptions.vocabulary['@id'].replace(\n          /^.*\\/@vocabularies\\//,\n          '',\n        )\n      ]\n    : null;\n\n/**\n * Get widget by field's `choices` attribute\n * @method getWidgetByChoices\n * @param {string} choices Widget\n * @returns {string} Widget component.\n */\nconst getWidgetByChoices = (props) => {\n  if (props.choices) {\n    return config.widgets.choices;\n  }\n\n  if (props.vocabulary) {\n    // If vocabulary exists, then it means it's a choice field in disguise with\n    // no widget specified that probably contains a string then we force it\n    // to be a select widget instead\n    return config.widgets.choices;\n  }\n\n  return null;\n};\n\n/**\n * Get widget by field's `type` attribute\n * @method getWidgetByType\n * @param {string} type Type\n * @returns {string} Widget component.\n */\nconst getWidgetByType = (type) => config.widgets.type[type] || null;\n\n/**\n * Field component class.\n * @function Field\n * @param {Object} props Properties.\n * @returns {string} Markup of the component.\n */\nconst UnconnectedField = (props, { intl }) => {\n  const Widget =\n    getWidgetByFieldId(props.id) ||\n    getWidgetFromTaggedValues(props.widgetOptions) ||\n    getWidgetByName(props.widget) ||\n    getWidgetByChoices(props) ||\n    getWidgetByVocabulary(props.vocabulary) ||\n    getWidgetByVocabularyFromHint(props) ||\n    getWidgetByFactory(props.factory) ||\n    getWidgetByType(props.type) ||\n    getWidgetDefault();\n\n  if (props.mode === MODE_HIDDEN) {\n    return null;\n  }\n\n  // Adding the widget props from tagged values (if any)\n  const widgetProps = {\n    ...props,\n    ...getWidgetPropsFromTaggedValues(props.widgetOptions),\n  };\n\n  if (props.onOrder) {\n    const { DropTarget, DragSource } = props.reactDnd;\n    const WrappedWidget = DropTarget(\n      'field',\n      {\n        hover(properties, monitor) {\n          const dragOrder = monitor.getItem().order;\n          const hoverOrder = properties.order;\n\n          if (dragOrder === hoverOrder) {\n            return;\n          }\n          properties.onOrder(dragOrder, hoverOrder - dragOrder);\n\n          monitor.getItem().order = hoverOrder;\n        },\n      },\n      (connect) => ({\n        connectDropTarget: connect.dropTarget(),\n      }),\n    )(\n      DragSource(\n        'field',\n        {\n          beginDrag(properties) {\n            return {\n              id: properties.label,\n              order: properties.order,\n            };\n          },\n        },\n        (connect, monitor) => ({\n          connectDragSource: connect.dragSource(),\n          connectDragPreview: connect.dragPreview(),\n          isDragging: monitor.isDragging(),\n        }),\n      )(\n        ({\n          connectDropTarget,\n          connectDragSource,\n          connectDragPreview,\n          ...rest\n        }) =>\n          connectDropTarget(\n            connectDragSource(\n              connectDragPreview(\n                <div>\n                  <Widget {...rest} />\n                </div>,\n              ),\n            ),\n          ),\n      ),\n    );\n    return <WrappedWidget {...widgetProps} />;\n  }\n  return <Widget {...widgetProps} />;\n};\n\nconst DndConnectedField = injectLazyLibs(['reactDnd'])(UnconnectedField);\n\nconst Field = (props) =>\n  props.onOrder ? (\n    <DndConnectedField {...props} />\n  ) : (\n    <UnconnectedField {...props} />\n  );\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nField.propTypes = {\n  widget: PropTypes.string,\n  vocabulary: PropTypes.shape({ '@id': PropTypes.string }),\n  choices: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.string)),\n  type: PropTypes.string,\n  id: PropTypes.string.isRequired,\n  focus: PropTypes.bool,\n  onOrder: PropTypes.func,\n};\n\n/**\n * Default properties.\n * @property {Object} defaultProps Default properties.\n * @static\n */\nField.defaultProps = {\n  widget: null,\n  vocabulary: null,\n  choices: null,\n  type: 'string',\n  focus: false,\n  onOrder: null,\n};\n\nexport default injectIntl(Field);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}