{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/theme/PasswordReset/RequestPasswordReset.jsx\";\nvar __jsx = React.createElement;\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n/**\n * RequestPasswordReset component.\n * @module components/theme/RequestPasswordReset/RequestPasswordReset\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { withRouter } from 'react-router-dom';\nimport { Helmet } from '@plone/volto/helpers';\nimport { Container } from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport { Form } from '@plone/volto/components';\nimport { resetPassword } from '@plone/volto/actions';\nimport config from '@plone/volto/registry';\nconst messages = defineMessages({\n  title: {\n    \"id\": \"box_forgot_password_option\",\n    \"defaultMessage\": \"Forgot your password?\"\n  },\n  description: {\n    \"id\": \"description_lost_password\",\n    \"defaultMessage\": \"For security reasons, we store your password encrypted, and cannot mail it to you. If you would like to reset your password, fill out the form below and we will send you an email at the address you gave when you registered to start the process of resetting your password.\"\n  },\n  default: {\n    \"id\": \"Default\",\n    \"defaultMessage\": \"Default\"\n  },\n  usernameTitle: {\n    \"id\": \"label_my_username_is\",\n    \"defaultMessage\": \"My username is\"\n  },\n  emailTitle: {\n    \"id\": \"label_my_email_is\",\n    \"defaultMessage\": \"My email is\"\n  },\n  sendEmail: {\n    \"id\": \"Start password reset\",\n    \"defaultMessage\": \"Start password reset\"\n  },\n  usernameRequired: {\n    \"id\": \"Your usernaame is required for reset your password.\",\n    \"defaultMessage\": \"Your username is required for reset your password.\"\n  },\n  emailRequired: {\n    \"id\": \"Your email is required for reset your password.\",\n    \"defaultMessage\": \"Your email is required for reset your password.\"\n  },\n  passwordReset: {\n    \"id\": \"Password reset\",\n    \"defaultMessage\": \"Password reset\"\n  }\n});\n\n/**\n * RequestPasswordReset class.\n * @class RequestPasswordReset\n * @extends Component\n */\nclass RequestPasswordReset extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Controlpanel\n   */\n  constructor(props) {\n    super(props);\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.identifierField = config.settings.useEmailAsLogin ? 'email' : 'username';\n    if (this.identifierField === 'email') {\n      this.identifierTitle = this.props.intl.formatMessage(messages.emailTitle);\n      this.identifierRequiredMessage = this.props.intl.formatMessage(messages.emailRequired);\n    } else {\n      this.identifierTitle = this.props.intl.formatMessage(messages.usernameTitle);\n      this.identifierRequiredMessage = this.props.intl.formatMessage(messages.usernameRequired);\n    }\n    this.state = {\n      error: null,\n      isSuccessful: false\n    };\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.loading && nextProps.loaded) {\n      this.setState({\n        isSuccessful: true\n      });\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @param {object} event Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    if (data[this.identifierField]) {\n      this.props.resetPassword(data[this.identifierField]);\n      this.setState({\n        error: null\n      });\n    } else {\n      this.setState({\n        error: {\n          message: this.identifierRequiredMessage\n        }\n      });\n    }\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.props.history.goBack();\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    if (this.state.isSuccessful) {\n      return __jsx(Container, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 9\n        }\n      }, __jsx(\"h1\", {\n        className: \"documentFirstHeading\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"heading_sent_password\",\n        defaultMessage: \"Password reset confirmation sent\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 13\n        }\n      })), __jsx(\"p\", {\n        className: \"description\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 11\n        }\n      }, __jsx(FormattedMessage, {\n        id: \"description_sent_password\",\n        defaultMessage: \"Your password reset request has been mailed. It should arrive in your mailbox shortly. When you receive the message, visit the address it contains to reset your password.\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }\n      })));\n    }\n    return __jsx(\"div\", {\n      id: \"page-password-reset\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 7\n      }\n    }, __jsx(Helmet, {\n      title: this.props.intl.formatMessage(messages.passwordReset),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }\n    }), __jsx(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }\n    }, __jsx(Form, {\n      title: this.props.intl.formatMessage(messages.title),\n      description: this.props.intl.formatMessage(messages.description),\n      onSubmit: this.onSubmit,\n      onCancel: this.onCancel,\n      error: this.state.error || this.props.error,\n      schema: {\n        fieldsets: [{\n          id: 'default',\n          title: this.props.intl.formatMessage(messages.default),\n          fields: [this.identifierField]\n        }],\n        properties: {\n          [this.identifierField]: {\n            type: 'string',\n            title: this.identifierTitle\n          }\n        },\n        submitLabel: this.props.intl.formatMessage(messages.sendEmail),\n        required: [this.identifierField]\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 11\n      }\n    })));\n  }\n}\n_defineProperty(RequestPasswordReset, \"propTypes\", {\n  loading: PropTypes.bool.isRequired,\n  loaded: PropTypes.bool.isRequired,\n  error: PropTypes.string,\n  resetPassword: PropTypes.func.isRequired\n});\n_defineProperty(RequestPasswordReset, \"defaultProps\", {\n  error: null\n});\nexport default compose(withRouter, injectIntl, connect(state => ({\n  loading: state.users.reset.loading,\n  loaded: state.users.reset.loaded,\n  error: state.users.reset.error\n}), {\n  resetPassword\n}))(RequestPasswordReset);","map":{"version":3,"names":["React","Component","PropTypes","connect","compose","withRouter","Helmet","Container","FormattedMessage","defineMessages","injectIntl","Form","resetPassword","config","messages","title","description","default","usernameTitle","emailTitle","sendEmail","usernameRequired","emailRequired","passwordReset","RequestPasswordReset","constructor","props","onCancel","bind","onSubmit","identifierField","settings","useEmailAsLogin","identifierTitle","intl","formatMessage","identifierRequiredMessage","state","error","isSuccessful","UNSAFE_componentWillReceiveProps","nextProps","loading","loaded","setState","data","message","history","goBack","render","fieldsets","id","fields","properties","type","submitLabel","required","bool","isRequired","string","func","users","reset"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/theme/PasswordReset/RequestPasswordReset.jsx"],"sourcesContent":["/**\n * RequestPasswordReset component.\n * @module components/theme/RequestPasswordReset/RequestPasswordReset\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport { withRouter } from 'react-router-dom';\nimport { Helmet } from '@plone/volto/helpers';\nimport { Container } from 'semantic-ui-react';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\n\nimport { Form } from '@plone/volto/components';\nimport { resetPassword } from '@plone/volto/actions';\nimport config from '@plone/volto/registry';\n\nconst messages = defineMessages({\n  title: {\n    id: 'box_forgot_password_option',\n    defaultMessage: 'Forgot your password?',\n  },\n  description: {\n    id: 'description_lost_password',\n    defaultMessage:\n      'For security reasons, we store your password encrypted, and cannot mail it to you. If you would like to reset your password, fill out the form below and we will send you an email at the address you gave when you registered to start the process of resetting your password.',\n  },\n  default: {\n    id: 'Default',\n    defaultMessage: 'Default',\n  },\n  usernameTitle: {\n    id: 'label_my_username_is',\n    defaultMessage: 'My username is',\n  },\n  emailTitle: {\n    id: 'label_my_email_is',\n    defaultMessage: 'My email is',\n  },\n  sendEmail: {\n    id: 'Start password reset',\n    defaultMessage: 'Start password reset',\n  },\n  usernameRequired: {\n    id: 'Your usernaame is required for reset your password.',\n    defaultMessage: 'Your username is required for reset your password.',\n  },\n  emailRequired: {\n    id: 'Your email is required for reset your password.',\n    defaultMessage: 'Your email is required for reset your password.',\n  },\n  passwordReset: {\n    id: 'Password reset',\n    defaultMessage: 'Password reset',\n  },\n});\n\n/**\n * RequestPasswordReset class.\n * @class RequestPasswordReset\n * @extends Component\n */\nclass RequestPasswordReset extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    loading: PropTypes.bool.isRequired,\n    loaded: PropTypes.bool.isRequired,\n    error: PropTypes.string,\n    resetPassword: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    error: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Controlpanel\n   */\n  constructor(props) {\n    super(props);\n    this.onCancel = this.onCancel.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.identifierField = config.settings.useEmailAsLogin\n      ? 'email'\n      : 'username';\n\n    if (this.identifierField === 'email') {\n      this.identifierTitle = this.props.intl.formatMessage(messages.emailTitle);\n      this.identifierRequiredMessage = this.props.intl.formatMessage(\n        messages.emailRequired,\n      );\n    } else {\n      this.identifierTitle = this.props.intl.formatMessage(\n        messages.usernameTitle,\n      );\n      this.identifierRequiredMessage = this.props.intl.formatMessage(\n        messages.usernameRequired,\n      );\n    }\n\n    this.state = {\n      error: null,\n      isSuccessful: false,\n    };\n  }\n\n  /**\n   * Component will receive props\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.loading && nextProps.loaded) {\n      this.setState({ isSuccessful: true });\n    }\n  }\n\n  /**\n   * Submit handler\n   * @method onSubmit\n   * @param {object} data Form data.\n   * @param {object} event Form data.\n   * @returns {undefined}\n   */\n  onSubmit(data) {\n    if (data[this.identifierField]) {\n      this.props.resetPassword(data[this.identifierField]);\n      this.setState({\n        error: null,\n      });\n    } else {\n      this.setState({\n        error: {\n          message: this.identifierRequiredMessage,\n        },\n      });\n    }\n  }\n\n  /**\n   * Cancel handler\n   * @method onCancel\n   * @returns {undefined}\n   */\n  onCancel() {\n    this.props.history.goBack();\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    if (this.state.isSuccessful) {\n      return (\n        <Container>\n          <h1 className=\"documentFirstHeading\">\n            <FormattedMessage\n              id=\"heading_sent_password\"\n              defaultMessage=\"Password reset confirmation sent\"\n            />\n          </h1>\n          <p className=\"description\">\n            <FormattedMessage\n              id=\"description_sent_password\"\n              defaultMessage=\"Your password reset request has been mailed. It should arrive in your mailbox shortly. When you receive the message, visit the address it contains to reset your password.\"\n            />\n          </p>\n        </Container>\n      );\n    }\n\n    return (\n      <div id=\"page-password-reset\">\n        <Helmet title={this.props.intl.formatMessage(messages.passwordReset)} />\n        <Container>\n          <Form\n            title={this.props.intl.formatMessage(messages.title)}\n            description={this.props.intl.formatMessage(messages.description)}\n            onSubmit={this.onSubmit}\n            onCancel={this.onCancel}\n            error={this.state.error || this.props.error}\n            schema={{\n              fieldsets: [\n                {\n                  id: 'default',\n                  title: this.props.intl.formatMessage(messages.default),\n                  fields: [this.identifierField],\n                },\n              ],\n              properties: {\n                [this.identifierField]: {\n                  type: 'string',\n                  title: this.identifierTitle,\n                },\n              },\n              submitLabel: this.props.intl.formatMessage(messages.sendEmail),\n              required: [this.identifierField],\n            }}\n          />\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default compose(\n  withRouter,\n  injectIntl,\n  connect(\n    (state) => ({\n      loading: state.users.reset.loading,\n      loaded: state.users.reset.loaded,\n      error: state.users.reset.error,\n    }),\n    { resetPassword },\n  ),\n)(RequestPasswordReset);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"box_forgot_password_option","defaultMessage":"Forgot your password?"},{"id":"description_lost_password","defaultMessage":"For security reasons, we store your password encrypted, and cannot mail it to you. If you would like to reset your password, fill out the form below and we will send you an email at the address you gave when you registered to start the process of resetting your password."},{"id":"Default","defaultMessage":"Default"},{"id":"label_my_username_is","defaultMessage":"My username is"},{"id":"label_my_email_is","defaultMessage":"My email is"},{"id":"Start password reset","defaultMessage":"Start password reset"},{"id":"Your usernaame is required for reset your password.","defaultMessage":"Your username is required for reset your password."},{"id":"Your email is required for reset your password.","defaultMessage":"Your email is required for reset your password."},{"id":"Password reset","defaultMessage":"Password reset"},{"id":"heading_sent_password","defaultMessage":"Password reset confirmation sent"},{"id":"description_sent_password","defaultMessage":"Your password reset request has been mailed. It should arrive in your mailbox shortly. When you receive the message, visit the address it contains to reset your password."}]}},"sourceType":"module","externalDependencies":[]}