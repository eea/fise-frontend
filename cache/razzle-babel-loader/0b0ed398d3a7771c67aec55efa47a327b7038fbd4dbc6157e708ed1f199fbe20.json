{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-slate/src/blocks/Text/DefaultTextBlockEditor.jsx\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport ReactDOM from 'react-dom';\nimport React from 'react';\nimport { readAsDataURL } from 'promise-file-reader';\nimport Dropzone from 'react-dropzone';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { useInView } from 'react-intersection-observer';\nimport { Dimmer, Loader, Message, Segment } from 'semantic-ui-react';\nimport { flattenToAppURL, getBaseUrl } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\nimport { BlockDataForm, SidebarPortal, BlockChooserButton } from '@plone/volto/components';\nimport { SlateEditor } from 'volto-slate/editor';\nimport { serializeNodesToText } from 'volto-slate/editor/render';\nimport { createImageBlock, parseDefaultSelection, deconstructToVoltoBlocks } from 'volto-slate/utils';\nimport { Transforms } from 'slate';\nimport PersistentSlashMenu from './SlashMenu';\nimport ShortcutListing from './ShortcutListing';\nimport MarkdownIntroduction from './MarkdownIntroduction';\nimport { handleKey } from './keyboard';\nimport TextBlockSchema from './schema';\nimport imageBlockSVG from '@plone/volto/components/manage/Blocks/Image/block-image.svg';\nimport './css/editor.css';\n\n// TODO: refactor dropzone to separate component wrapper\n\nconst messages = defineMessages({\n  text: {\n    \"id\": \"Type text\\u2026\",\n    \"defaultMessage\": \"Type text\\u2026\"\n  }\n});\nconst DEBUG = false;\nexport const DefaultTextBlockEditor = props => {\n  var _data$instructions, _data$plaintext;\n  const {\n    block,\n    blocksConfig,\n    data,\n    detached = false,\n    index,\n    onChangeBlock,\n    onInsertBlock,\n    onMutateBlock,\n    onSelectBlock,\n    pathname,\n    properties,\n    selected,\n    uploadRequest,\n    uploadContent,\n    uploadedContent,\n    defaultSelection,\n    saveSlateBlockSelection,\n    allowedBlocks,\n    formTitle,\n    formDescription\n  } = props;\n  const {\n    slate\n  } = config.settings;\n  const {\n    textblockExtensions\n  } = slate;\n  const {\n    value\n  } = data;\n\n  // const [addNewBlockOpened, setAddNewBlockOpened] = React.useState();\n  const [showDropzone, setShowDropzone] = React.useState(false);\n  const [uploading, setUploading] = React.useState(false);\n  const [newImageId, setNewImageId] = React.useState(null);\n  const prevReq = React.useRef(null);\n  const withBlockProperties = React.useCallback(editor => {\n    editor.getBlockProps = () => props;\n    return editor;\n  }, [props]);\n  const slateSettings = React.useMemo(() => _objectSpread(_objectSpread({}, config.settings.slate), {}, {\n    persistentHelpers: [...config.settings.slate.persistentHelpers, PersistentSlashMenu]\n  }), []);\n  const onDrop = React.useCallback(files => {\n    // TODO: need to fix setUploading, treat uploading indicator\n    // inteligently, show progress report on uploading files\n    setUploading(true);\n    files.forEach(file => {\n      const [mime] = file.type.split('/');\n      if (mime !== 'image') return;\n      readAsDataURL(file).then(data => {\n        const fields = data.match(/^data:(.*);(.*),(.*)$/);\n        uploadContent(getBaseUrl(pathname), {\n          '@type': 'Image',\n          title: file.name,\n          image: {\n            data: fields[3],\n            encoding: fields[2],\n            'content-type': fields[1],\n            filename: file.name\n          }\n        }, block);\n      });\n    });\n    setShowDropzone(false);\n  }, [pathname, uploadContent, block]);\n  const {\n    loaded,\n    loading\n  } = uploadRequest;\n  const imageId = uploadedContent['@id'];\n  const prevLoaded = prevReq.current;\n  React.useEffect(() => {\n    if (loaded && !loading && !prevLoaded && newImageId !== imageId) {\n      const url = flattenToAppURL(imageId);\n      setNewImageId(imageId);\n      createImageBlock(url, index, props);\n    }\n    prevReq.current = loaded;\n  }, [props, loaded, loading, prevLoaded, imageId, newImageId, index]);\n  const handleUpdate = React.useCallback(editor => {\n    // defaultSelection is used for things such as \"restoring\" the selection\n    // when joining blocks or moving the selection to block start on block\n    // split\n    if (defaultSelection) {\n      const selection = parseDefaultSelection(editor, defaultSelection);\n      if (selection) {\n        setTimeout(() => {\n          Transforms.select(editor, selection);\n          saveSlateBlockSelection(block, null);\n        }, 120);\n        // TODO: use React sync render API\n        // without setTimeout, the join is not correct. Slate uses internally\n        // a 100ms throttle, so setting to a bigger value seems to help\n      }\n    }\n  }, [defaultSelection, block, saveSlateBlockSelection]);\n  const onEditorChange = (value, editor) => {\n    ReactDOM.unstable_batchedUpdates(() => {\n      onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n        value,\n        plaintext: serializeNodesToText(value || [])\n        // TODO: also add html serialized value\n      }));\n\n      deconstructToVoltoBlocks(editor);\n    });\n  };\n\n  // Get editing instructions from block settings or props\n  let instructions = (data === null || data === void 0 ? void 0 : (_data$instructions = data.instructions) === null || _data$instructions === void 0 ? void 0 : _data$instructions.data) || (data === null || data === void 0 ? void 0 : data.instructions);\n  if (!instructions || instructions === '<p><br/></p>') {\n    instructions = formDescription;\n  }\n  const intl = useIntl();\n  const placeholder = data.placeholder || formTitle || intl.formatMessage(messages.text);\n  const schema = TextBlockSchema(data);\n  const disableNewBlocks = (data === null || data === void 0 ? void 0 : data.disableNewBlocks) || detached;\n  const {\n    ref,\n    inView\n  } = useInView({\n    threshold: 0,\n    rootMargin: '0px 0px 200px 0px'\n  });\n  const handleFocus = React.useCallback(() => {\n    if (!selected) {\n      onSelectBlock(block);\n    }\n  }, [onSelectBlock, selected, block]);\n  return __jsx(\"div\", {\n    className: \"text-slate-editor-inner\",\n    ref: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 5\n    }\n  }, __jsx(React.Fragment, null, __jsx(Dropzone, {\n    disableClick: true,\n    onDrop: onDrop,\n    className: \"dropzone\",\n    onDragOver: () => setShowDropzone(true),\n    onDragLeave: () => setShowDropzone(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 9\n    }\n  }, ({\n    getRootProps,\n    getInputProps\n  }) => {\n    return showDropzone ? __jsx(\"div\", {\n      className: \"drop-indicator\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 15\n      }\n    }, uploading ? __jsx(Dimmer, {\n      active: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 19\n      }\n    }, __jsx(Loader, {\n      indeterminate: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 21\n      }\n    }, \"Uploading image\")) : __jsx(Message, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 19\n      }\n    }, __jsx(\"center\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 21\n      }\n    }, __jsx(\"img\", {\n      src: imageBlockSVG,\n      alt: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 23\n      }\n    })))) : __jsx(React.Fragment, null, __jsx(SlateEditor, {\n      index: index,\n      readOnly: !inView,\n      properties: properties,\n      extensions: textblockExtensions,\n      renderExtensions: [withBlockProperties],\n      value: value,\n      block: block /* is this needed? */,\n      defaultSelection: defaultSelection,\n      onUpdate: handleUpdate,\n      debug: DEBUG,\n      onFocus: handleFocus,\n      onChange: (value, editor) => onEditorChange(value, editor),\n      onKeyDown: handleKey,\n      selected: selected,\n      placeholder: placeholder,\n      slateSettings: slateSettings,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 17\n      }\n    }), DEBUG ? __jsx(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 26\n      }\n    }, block) : '');\n  }), selected && !((_data$plaintext = data.plaintext) !== null && _data$plaintext !== void 0 && _data$plaintext.trim()) && !disableNewBlocks && __jsx(BlockChooserButton, {\n    data: data,\n    block: block,\n    onInsertBlock: (id, value) => {\n      onSelectBlock(onInsertBlock(id, value));\n    },\n    onMutateBlock: onMutateBlock,\n    allowedBlocks: allowedBlocks,\n    blocksConfig: blocksConfig,\n    size: \"24px\",\n    className: \"block-add-button\",\n    properties: properties,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 11\n    }\n  }), __jsx(SidebarPortal, {\n    selected: selected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    id: \"slate-plugin-sidebar\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 11\n    }\n  }), instructions ? __jsx(Segment, {\n    attached: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    dangerouslySetInnerHTML: {\n      __html: instructions\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 15\n    }\n  })) : __jsx(React.Fragment, null, __jsx(ShortcutListing, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 15\n    }\n  }), __jsx(MarkdownIntroduction, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 15\n    }\n  }), __jsx(BlockDataForm, {\n    schema: schema,\n    title: schema.title,\n    onChangeField: (id, value) => {\n      onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n        [id]: value\n      }));\n    },\n    formData: data,\n    block: block,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 15\n    }\n  })))));\n};\nexport default DefaultTextBlockEditor;","map":{"version":3,"names":["ReactDOM","React","readAsDataURL","Dropzone","defineMessages","useIntl","useInView","Dimmer","Loader","Message","Segment","flattenToAppURL","getBaseUrl","config","BlockDataForm","SidebarPortal","BlockChooserButton","SlateEditor","serializeNodesToText","createImageBlock","parseDefaultSelection","deconstructToVoltoBlocks","Transforms","PersistentSlashMenu","ShortcutListing","MarkdownIntroduction","handleKey","TextBlockSchema","imageBlockSVG","messages","text","DEBUG","DefaultTextBlockEditor","props","block","blocksConfig","data","detached","index","onChangeBlock","onInsertBlock","onMutateBlock","onSelectBlock","pathname","properties","selected","uploadRequest","uploadContent","uploadedContent","defaultSelection","saveSlateBlockSelection","allowedBlocks","formTitle","formDescription","slate","settings","textblockExtensions","value","showDropzone","setShowDropzone","useState","uploading","setUploading","newImageId","setNewImageId","prevReq","useRef","withBlockProperties","useCallback","editor","getBlockProps","slateSettings","useMemo","persistentHelpers","onDrop","files","forEach","file","mime","type","split","then","fields","match","title","name","image","encoding","filename","loaded","loading","imageId","prevLoaded","current","useEffect","url","handleUpdate","selection","setTimeout","select","onEditorChange","unstable_batchedUpdates","plaintext","instructions","intl","placeholder","formatMessage","schema","disableNewBlocks","ref","inView","threshold","rootMargin","handleFocus","getRootProps","getInputProps","trim","id","__html"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-slate/src/blocks/Text/DefaultTextBlockEditor.jsx"],"sourcesContent":["import ReactDOM from 'react-dom';\nimport React from 'react';\nimport { readAsDataURL } from 'promise-file-reader';\nimport Dropzone from 'react-dropzone';\nimport { defineMessages, useIntl } from 'react-intl';\nimport { useInView } from 'react-intersection-observer';\nimport { Dimmer, Loader, Message, Segment } from 'semantic-ui-react';\n\nimport { flattenToAppURL, getBaseUrl } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\nimport {\n  BlockDataForm,\n  SidebarPortal,\n  BlockChooserButton,\n} from '@plone/volto/components';\n\nimport { SlateEditor } from 'volto-slate/editor';\nimport { serializeNodesToText } from 'volto-slate/editor/render';\nimport {\n  createImageBlock,\n  parseDefaultSelection,\n  deconstructToVoltoBlocks,\n} from 'volto-slate/utils';\nimport { Transforms } from 'slate';\n\nimport PersistentSlashMenu from './SlashMenu';\nimport ShortcutListing from './ShortcutListing';\nimport MarkdownIntroduction from './MarkdownIntroduction';\nimport { handleKey } from './keyboard';\nimport TextBlockSchema from './schema';\n\nimport imageBlockSVG from '@plone/volto/components/manage/Blocks/Image/block-image.svg';\n\nimport './css/editor.css';\n\n// TODO: refactor dropzone to separate component wrapper\n\nconst messages = defineMessages({\n  text: {\n    id: 'Type text…',\n    defaultMessage: 'Type text…',\n  },\n});\n\nconst DEBUG = false;\n\nexport const DefaultTextBlockEditor = (props) => {\n  const {\n    block,\n    blocksConfig,\n    data,\n    detached = false,\n    index,\n    onChangeBlock,\n    onInsertBlock,\n    onMutateBlock,\n    onSelectBlock,\n    pathname,\n    properties,\n    selected,\n    uploadRequest,\n    uploadContent,\n    uploadedContent,\n    defaultSelection,\n    saveSlateBlockSelection,\n    allowedBlocks,\n    formTitle,\n    formDescription,\n  } = props;\n\n  const { slate } = config.settings;\n  const { textblockExtensions } = slate;\n  const { value } = data;\n\n  // const [addNewBlockOpened, setAddNewBlockOpened] = React.useState();\n  const [showDropzone, setShowDropzone] = React.useState(false);\n  const [uploading, setUploading] = React.useState(false);\n  const [newImageId, setNewImageId] = React.useState(null);\n\n  const prevReq = React.useRef(null);\n\n  const withBlockProperties = React.useCallback(\n    (editor) => {\n      editor.getBlockProps = () => props;\n      return editor;\n    },\n    [props],\n  );\n\n  const slateSettings = React.useMemo(\n    () => ({\n      ...config.settings.slate,\n      persistentHelpers: [\n        ...config.settings.slate.persistentHelpers,\n        PersistentSlashMenu,\n      ],\n    }),\n    [],\n  );\n\n  const onDrop = React.useCallback(\n    (files) => {\n      // TODO: need to fix setUploading, treat uploading indicator\n      // inteligently, show progress report on uploading files\n      setUploading(true);\n      files.forEach((file) => {\n        const [mime] = file.type.split('/');\n        if (mime !== 'image') return;\n\n        readAsDataURL(file).then((data) => {\n          const fields = data.match(/^data:(.*);(.*),(.*)$/);\n          uploadContent(\n            getBaseUrl(pathname),\n            {\n              '@type': 'Image',\n              title: file.name,\n              image: {\n                data: fields[3],\n                encoding: fields[2],\n                'content-type': fields[1],\n                filename: file.name,\n              },\n            },\n            block,\n          );\n        });\n      });\n      setShowDropzone(false);\n    },\n    [pathname, uploadContent, block],\n  );\n\n  const { loaded, loading } = uploadRequest;\n  const imageId = uploadedContent['@id'];\n  const prevLoaded = prevReq.current;\n\n  React.useEffect(() => {\n    if (loaded && !loading && !prevLoaded && newImageId !== imageId) {\n      const url = flattenToAppURL(imageId);\n      setNewImageId(imageId);\n\n      createImageBlock(url, index, props);\n    }\n    prevReq.current = loaded;\n  }, [props, loaded, loading, prevLoaded, imageId, newImageId, index]);\n\n  const handleUpdate = React.useCallback(\n    (editor) => {\n      // defaultSelection is used for things such as \"restoring\" the selection\n      // when joining blocks or moving the selection to block start on block\n      // split\n      if (defaultSelection) {\n        const selection = parseDefaultSelection(editor, defaultSelection);\n        if (selection) {\n          setTimeout(() => {\n            Transforms.select(editor, selection);\n            saveSlateBlockSelection(block, null);\n          }, 120);\n          // TODO: use React sync render API\n          // without setTimeout, the join is not correct. Slate uses internally\n          // a 100ms throttle, so setting to a bigger value seems to help\n        }\n      }\n    },\n    [defaultSelection, block, saveSlateBlockSelection],\n  );\n\n  const onEditorChange = (value, editor) => {\n    ReactDOM.unstable_batchedUpdates(() => {\n      onChangeBlock(block, {\n        ...data,\n        value,\n        plaintext: serializeNodesToText(value || []),\n        // TODO: also add html serialized value\n      });\n      deconstructToVoltoBlocks(editor);\n    });\n  };\n\n  // Get editing instructions from block settings or props\n  let instructions = data?.instructions?.data || data?.instructions;\n  if (!instructions || instructions === '<p><br/></p>') {\n    instructions = formDescription;\n  }\n\n  const intl = useIntl();\n  const placeholder =\n    data.placeholder || formTitle || intl.formatMessage(messages.text);\n  const schema = TextBlockSchema(data);\n\n  const disableNewBlocks = data?.disableNewBlocks || detached;\n  const { ref, inView } = useInView({\n    threshold: 0,\n    rootMargin: '0px 0px 200px 0px',\n  });\n\n  const handleFocus = React.useCallback(() => {\n    if (!selected) {\n      onSelectBlock(block);\n    }\n  }, [onSelectBlock, selected, block]);\n\n  return (\n    <div className=\"text-slate-editor-inner\" ref={ref}>\n      <>\n        <Dropzone\n          disableClick\n          onDrop={onDrop}\n          className=\"dropzone\"\n          onDragOver={() => setShowDropzone(true)}\n          onDragLeave={() => setShowDropzone(false)}\n        >\n          {({ getRootProps, getInputProps }) => {\n            return showDropzone ? (\n              <div className=\"drop-indicator\">\n                {uploading ? (\n                  <Dimmer active>\n                    <Loader indeterminate>Uploading image</Loader>\n                  </Dimmer>\n                ) : (\n                  <Message>\n                    <center>\n                      <img src={imageBlockSVG} alt=\"\" />\n                    </center>\n                  </Message>\n                )}\n              </div>\n            ) : (\n              <>\n                <SlateEditor\n                  index={index}\n                  readOnly={!inView}\n                  properties={properties}\n                  extensions={textblockExtensions}\n                  renderExtensions={[withBlockProperties]}\n                  value={value}\n                  block={block /* is this needed? */}\n                  defaultSelection={defaultSelection}\n                  onUpdate={handleUpdate}\n                  debug={DEBUG}\n                  onFocus={handleFocus}\n                  onChange={(value, editor) => onEditorChange(value, editor)}\n                  onKeyDown={handleKey}\n                  selected={selected}\n                  placeholder={placeholder}\n                  slateSettings={slateSettings}\n                />\n                {DEBUG ? <div>{block}</div> : ''}\n              </>\n            );\n          }}\n        </Dropzone>\n\n        {selected && !data.plaintext?.trim() && !disableNewBlocks && (\n          <BlockChooserButton\n            data={data}\n            block={block}\n            onInsertBlock={(id, value) => {\n              onSelectBlock(onInsertBlock(id, value));\n            }}\n            onMutateBlock={onMutateBlock}\n            allowedBlocks={allowedBlocks}\n            blocksConfig={blocksConfig}\n            size=\"24px\"\n            className=\"block-add-button\"\n            properties={properties}\n          />\n        )}\n\n        <SidebarPortal selected={selected}>\n          <div id=\"slate-plugin-sidebar\"></div>\n          {instructions ? (\n            <Segment attached>\n              <div dangerouslySetInnerHTML={{ __html: instructions }} />\n            </Segment>\n          ) : (\n            <>\n              <ShortcutListing />\n              <MarkdownIntroduction />\n              <BlockDataForm\n                schema={schema}\n                title={schema.title}\n                onChangeField={(id, value) => {\n                  onChangeBlock(block, {\n                    ...data,\n                    [id]: value,\n                  });\n                }}\n                formData={data}\n                block={block}\n              />\n            </>\n          )}\n        </SidebarPortal>\n      </>\n    </div>\n  );\n};\n\nexport default DefaultTextBlockEditor;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Type text…","defaultMessage":"Type text…"}]}},"sourceType":"module","externalDependencies":[]}