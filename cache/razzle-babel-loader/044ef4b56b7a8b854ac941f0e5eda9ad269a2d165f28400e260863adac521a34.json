{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-object-widget/src/Widget/MappingWidget.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport React from 'react';\nimport { Segment } from 'semantic-ui-react';\nimport { Field } from '@plone/volto/components';\nconst MappingWidget = props => {\n  const {\n    value,\n    // not checked to not contain unknown fields\n    onChange,\n    errors = {},\n    id,\n    title,\n    options,\n    field_props\n  } = props;\n  const mappingWidgetId = id;\n  return __jsx(\"div\", {\n    className: \"mapping-widget\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 5\n    }\n  }, __jsx(\"header\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }, title), __jsx(Segment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }, options.map(({\n    id,\n    title\n  }, i) => {\n    const fieldId = `${mappingWidgetId}-${id}`;\n    return __jsx(Field, _extends({}, field_props, {\n      title: title,\n      id: fieldId,\n      formData: value,\n      focus: false,\n      value: value === null || value === void 0 ? void 0 : value[id],\n      required: false,\n      onChange: (_id, _value) => {\n        onChange(mappingWidgetId, _objectSpread(_objectSpread({}, value), {}, {\n          [id]: _value\n        }));\n      },\n      key: fieldId,\n      error: errors[fieldId] || [],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 13\n      }\n    }));\n  })));\n};\nexport default MappingWidget;","map":{"version":3,"names":["React","Segment","Field","MappingWidget","props","value","onChange","errors","id","title","options","field_props","mappingWidgetId","map","i","fieldId","_id","_value"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-object-widget/src/Widget/MappingWidget.jsx"],"sourcesContent":["import React from 'react';\nimport { Segment } from 'semantic-ui-react';\nimport { Field } from '@plone/volto/components';\n\nconst MappingWidget = (props) => {\n  const {\n    value, // not checked to not contain unknown fields\n    onChange,\n    errors = {},\n    id,\n    title,\n    options,\n    field_props,\n  } = props;\n  const mappingWidgetId = id;\n\n  return (\n    <div className=\"mapping-widget\">\n      <header>{title}</header>\n      <Segment>\n        {options.map(({ id, title }, i) => {\n          const fieldId = `${mappingWidgetId}-${id}`;\n          return (\n            <Field\n              {...field_props}\n              title={title}\n              id={fieldId}\n              formData={value}\n              focus={false}\n              value={value?.[id]}\n              required={false}\n              onChange={(_id, _value) => {\n                onChange(mappingWidgetId, { ...value, [id]: _value });\n              }}\n              key={fieldId}\n              error={errors[fieldId] || []}\n            />\n          );\n        })}\n      </Segment>\n    </div>\n  );\n};\n\nexport default MappingWidget;\n"],"mappings":";;;;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,mBAAmB;AAC3C,SAASC,KAAK,QAAQ,yBAAyB;AAE/C,MAAMC,aAAa,GAAIC,KAAK,IAAK;EAC/B,MAAM;IACJC,KAAK;IAAE;IACPC,QAAQ;IACRC,MAAM,GAAG,CAAC,CAAC;IACXC,EAAE;IACFC,KAAK;IACLC,OAAO;IACPC;EACF,CAAC,GAAGP,KAAK;EACT,MAAMQ,eAAe,GAAGJ,EAAE;EAE1B,OACE;IAAK,SAAS,EAAC,gBAAgB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAC7B;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAASC,KAAK,CAAU,EACxB,MAAC,OAAO;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACLC,OAAO,CAACG,GAAG,CAAC,CAAC;IAAEL,EAAE;IAAEC;EAAM,CAAC,EAAEK,CAAC,KAAK;IACjC,MAAMC,OAAO,GAAI,GAAEH,eAAgB,IAAGJ,EAAG,EAAC;IAC1C,OACE,MAAC,KAAK,eACAG,WAAW;MACf,KAAK,EAAEF,KAAM;MACb,EAAE,EAAEM,OAAQ;MACZ,QAAQ,EAAEV,KAAM;MAChB,KAAK,EAAE,KAAM;MACb,KAAK,EAAEA,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAGG,EAAE,CAAE;MACnB,QAAQ,EAAE,KAAM;MAChB,QAAQ,EAAE,CAACQ,GAAG,EAAEC,MAAM,KAAK;QACzBX,QAAQ,CAACM,eAAe,kCAAOP,KAAK;UAAE,CAACG,EAAE,GAAGS;QAAM,GAAG;MACvD,CAAE;MACF,GAAG,EAAEF,OAAQ;MACb,KAAK,EAAER,MAAM,CAACQ,OAAO,CAAC,IAAI,EAAG;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAC7B;EAEN,CAAC,CAAC,CACM,CACN;AAEV,CAAC;AAED,eAAeZ,aAAa"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}