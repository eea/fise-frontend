{"ast":null,"code":"import _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _toConsumableArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _without from \"lodash/without\";\n/**\n * Data Providers reducer\n * @module reducers/data_providers\n */\n\nimport { GET_DATA_FROM_PROVIDER } from '../constants';\nvar MAX_DATA_PER_PROVIDER = 10;\nvar initialState = {\n  error: null,\n  data: {},\n  metadata: {},\n  loaded: false,\n  loading: false,\n  pendingConnectors: {},\n  failedConnectors: {},\n  requested: [],\n  tree: {}\n};\nexport default function data_providers() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var pendingConnectors = _objectSpread({}, state.pendingConnectors);\n  var failedConnectors = _objectSpread({}, state.failedConnectors);\n  var tree = _objectSpread({}, state.tree);\n  var providerPath = action.path;\n  var hashValue = action.hashValue;\n  var path = \"\".concat(providerPath).concat(hashValue ? \"#\".concat(hashValue) : '');\n  switch (action.type) {\n    case \"\".concat(GET_DATA_FROM_PROVIDER, \"_PENDING\"):\n      pendingConnectors[path] = true;\n      delete failedConnectors[path];\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: null,\n        loaded: false,\n        loading: true,\n        requested: [].concat(_toConsumableArray(_without(state.requested, action.path)), [action.path]),\n        pendingConnectors: pendingConnectors,\n        failedConnectors: failedConnectors\n      });\n    case \"\".concat(GET_DATA_FROM_PROVIDER, \"_SUCCESS\"):\n      delete pendingConnectors[path];\n      if (!tree[providerPath]) {\n        tree[providerPath] = [];\n      }\n      tree[providerPath].push(hashValue);\n      var providerData = state.data[providerPath] || {};\n      if (tree[providerPath].length > MAX_DATA_PER_PROVIDER) {\n        delete providerData[tree[providerPath].shift()];\n      }\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: null,\n        data: _objectSpread(_objectSpread({}, state.data), {}, _defineProperty({}, providerPath, _objectSpread(_objectSpread({}, providerData), {}, _defineProperty({}, hashValue, action.result.data.results)))),\n        metadata: _objectSpread(_objectSpread({}, state.metadata), {}, _defineProperty({}, providerPath, _objectSpread(_objectSpread({}, providerData), {}, _defineProperty({}, hashValue, action.result.data.metadata)))),\n        loaded: true,\n        loading: false,\n        requested: _toConsumableArray(_without(state.requested, path)),\n        pendingConnectors: pendingConnectors,\n        failedConnectors: failedConnectors,\n        tree: tree\n      });\n    case \"\".concat(GET_DATA_FROM_PROVIDER, \"_FAIL\"):\n      delete pendingConnectors[path];\n      failedConnectors[path] = true;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.error,\n        loaded: false,\n        loading: false,\n        // TODO: retry get?\n        requested: _toConsumableArray(_without(state.requested, path)),\n        pendingConnectors: pendingConnectors,\n        failedConnectors: failedConnectors\n      });\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["GET_DATA_FROM_PROVIDER","MAX_DATA_PER_PROVIDER","initialState","error","data","metadata","loaded","loading","pendingConnectors","failedConnectors","requested","tree","data_providers","state","action","providerPath","path","hashValue","type","push","providerData","length","shift","result","results"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-datablocks/src/reducers/data_providers.js"],"sourcesContent":["/**\n * Data Providers reducer\n * @module reducers/data_providers\n */\n\nimport { GET_DATA_FROM_PROVIDER } from '../constants';\nimport { without } from 'lodash';\n\nconst MAX_DATA_PER_PROVIDER = 10;\n\nconst initialState = {\n  error: null,\n  data: {},\n  metadata: {},\n  loaded: false,\n  loading: false,\n  pendingConnectors: {},\n  failedConnectors: {},\n  requested: [],\n  tree: {},\n};\n\nexport default function data_providers(state = initialState, action = {}) {\n  const pendingConnectors = { ...state.pendingConnectors };\n  const failedConnectors = { ...state.failedConnectors };\n  const tree = { ...state.tree };\n  const providerPath = action.path;\n  const hashValue = action.hashValue;\n\n  const path = `${providerPath}${hashValue ? `#${hashValue}` : ''}`;\n\n  switch (action.type) {\n    case `${GET_DATA_FROM_PROVIDER}_PENDING`:\n      pendingConnectors[path] = true;\n      delete failedConnectors[path];\n\n      return {\n        ...state,\n        error: null,\n        loaded: false,\n        loading: true,\n        requested: [...without(state.requested, action.path), action.path],\n        pendingConnectors,\n        failedConnectors,\n      };\n\n    case `${GET_DATA_FROM_PROVIDER}_SUCCESS`:\n      delete pendingConnectors[path];\n      if (!tree[providerPath]) {\n        tree[providerPath] = [];\n      }\n      tree[providerPath].push(hashValue);\n      const providerData = state.data[providerPath] || {};\n      if (tree[providerPath].length > MAX_DATA_PER_PROVIDER) {\n        delete providerData[tree[providerPath].shift()];\n      }\n      return {\n        ...state,\n        error: null,\n        data: {\n          ...state.data,\n          [providerPath]: {\n            ...providerData,\n            [hashValue]: action.result.data.results,\n          },\n        },\n        metadata: {\n          ...state.metadata,\n          [providerPath]: {\n            ...providerData,\n            [hashValue]: action.result.data.metadata,\n          },\n        },\n        loaded: true,\n        loading: false,\n        requested: [...without(state.requested, path)],\n        pendingConnectors,\n        failedConnectors,\n        tree,\n      };\n\n    case `${GET_DATA_FROM_PROVIDER}_FAIL`:\n      delete pendingConnectors[path];\n      failedConnectors[path] = true;\n\n      return {\n        ...state,\n        error: action.error,\n        loaded: false,\n        loading: false,\n        // TODO: retry get?\n        requested: [...without(state.requested, path)],\n        pendingConnectors,\n        failedConnectors,\n      };\n\n    default:\n      return state;\n  }\n}\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}