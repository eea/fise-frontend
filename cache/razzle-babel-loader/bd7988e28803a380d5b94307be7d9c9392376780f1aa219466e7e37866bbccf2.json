{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-embed/src/Iframe/ViewIframe.jsx\";\nvar __jsx = React.createElement;\n/**\n * View map block.\n * @module components/manage/Blocks/Maps/View\n */\n\nimport React from 'react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { PrivacyProtection } from '../PrivacyProtection';\nconst messages = defineMessages({\n  EmbededGoogleMaps: {\n    \"id\": \"Embeded Google Maps\",\n    \"defaultMessage\": \"Embeded Google Maps\"\n  }\n});\n\n/**\n * View image block class.\n * @class View\n * @extends Component\n */\n\nconst View = ({\n  data,\n  intl,\n  id\n}) => {\n  return __jsx(\"div\", {\n    className: cx('block maps align', {\n      center: !Boolean(data.align)\n    }, data.align),\n    style: data.align === 'full' ? {\n      position: 'static',\n      height: '45vh'\n    } : {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: cx({\n      'full-width-block': data.align === 'full'\n    }),\n    style: {\n      height: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, __jsx(PrivacyProtection, {\n    data: data,\n    id: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, __jsx(\"iframe\", {\n    title: intl.formatMessage(messages.EmbededGoogleMaps),\n    src: data.url,\n    className: \"google-map\",\n    frameBorder: \"0\",\n    allowFullScreen: true,\n    style: {\n      height: '45vh'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  }))));\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nView.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired\n};\nexport default injectIntl(View);","map":{"version":3,"names":["React","defineMessages","injectIntl","PropTypes","cx","PrivacyProtection","messages","EmbededGoogleMaps","View","data","intl","id","center","Boolean","align","position","height","formatMessage","url","propTypes","objectOf","any","isRequired"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-embed/src/Iframe/ViewIframe.jsx"],"sourcesContent":["/**\n * View map block.\n * @module components/manage/Blocks/Maps/View\n */\n\nimport React from 'react';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { PrivacyProtection } from '../PrivacyProtection';\n\nconst messages = defineMessages({\n  EmbededGoogleMaps: {\n    id: 'Embeded Google Maps',\n    defaultMessage: 'Embeded Google Maps',\n  },\n});\n\n/**\n * View image block class.\n * @class View\n * @extends Component\n */\n\nconst View = ({ data, intl, id }) => {\n  return (\n    <div\n      className={cx(\n        'block maps align',\n        {\n          center: !Boolean(data.align),\n        },\n        data.align,\n      )}\n      style={\n        data.align === 'full' ? { position: 'static', height: '45vh' } : {}\n      }\n    >\n      <div\n        className={cx({\n          'full-width-block': data.align === 'full',\n        })}\n        style={{ height: '100%' }}\n      >\n        <PrivacyProtection data={data} id={id}>\n          <iframe\n            title={intl.formatMessage(messages.EmbededGoogleMaps)}\n            src={data.url}\n            className=\"google-map\"\n            frameBorder=\"0\"\n            allowFullScreen\n            style={{ height: '45vh' }}\n          />\n        </PrivacyProtection>\n      </div>\n    </div>\n  );\n};\n\n/**\n * Property types.\n * @property {Object} propTypes Property types.\n * @static\n */\nView.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n};\n\nexport default injectIntl(View);\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,cAAc,EAAEC,UAAU,QAAQ,YAAY;AACvD,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,EAAE,MAAM,YAAY;AAC3B,SAASC,iBAAiB,QAAQ,sBAAsB;AAExD,MAAMC,QAAQ,GAAGL,cAAc,CAAC;EAC9BM,iBAAiB;IAAA;IAAA;EAAA;AAInB,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;;AAEA,MAAMC,IAAI,GAAG,CAAC;EAAEC,IAAI;EAAEC,IAAI;EAAEC;AAAG,CAAC,KAAK;EACnC,OACE;IACE,SAAS,EAAEP,EAAE,CACX,kBAAkB,EAClB;MACEQ,MAAM,EAAE,CAACC,OAAO,CAACJ,IAAI,CAACK,KAAK;IAC7B,CAAC,EACDL,IAAI,CAACK,KAAK,CACV;IACF,KAAK,EACHL,IAAI,CAACK,KAAK,KAAK,MAAM,GAAG;MAAEC,QAAQ,EAAE,QAAQ;MAAEC,MAAM,EAAE;IAAO,CAAC,GAAG,CAAC,CACnE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAED;IACE,SAAS,EAAEZ,EAAE,CAAC;MACZ,kBAAkB,EAAEK,IAAI,CAACK,KAAK,KAAK;IACrC,CAAC,CAAE;IACH,KAAK,EAAE;MAAEE,MAAM,EAAE;IAAO,CAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAE1B,MAAC,iBAAiB;IAAC,IAAI,EAAEP,IAAK;IAAC,EAAE,EAAEE,EAAG;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACpC;IACE,KAAK,EAAED,IAAI,CAACO,aAAa,CAACX,QAAQ,CAACC,iBAAiB,CAAE;IACtD,GAAG,EAAEE,IAAI,CAACS,GAAI;IACd,SAAS,EAAC,YAAY;IACtB,WAAW,EAAC,GAAG;IACf,eAAe;IACf,KAAK,EAAE;MAAEF,MAAM,EAAE;IAAO,CAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAC1B,CACgB,CAChB,CACF;AAEV,CAAC;;AAED;AACA;AACA;AACA;AACA;AACAR,IAAI,CAACW,SAAS,GAAG;EACfV,IAAI,EAAEN,SAAS,CAACiB,QAAQ,CAACjB,SAAS,CAACkB,GAAG,CAAC,CAACC;AAC1C,CAAC;AAED,eAAepB,UAAU,CAACM,IAAI,CAAC"},"metadata":{"react-intl":{"messages":[{"id":"Embeded Google Maps","defaultMessage":"Embeded Google Maps"}]}},"sourceType":"module","externalDependencies":[]}