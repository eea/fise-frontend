{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/theme/ContentMetadataTags/ContentMetadataTags.jsx\",\n  _this = this;\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { toPublicURL, Helmet } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\nvar ContentMetadataTags = function ContentMetadataTags(props) {\n  var _ref;\n  var _props$content = props.content,\n    opengraph_title = _props$content.opengraph_title,\n    opengraph_description = _props$content.opengraph_description,\n    seo_title = _props$content.seo_title,\n    seo_description = _props$content.seo_description,\n    seo_canonical_url = _props$content.seo_canonical_url,\n    seo_noindex = _props$content.seo_noindex,\n    title = _props$content.title,\n    description = _props$content.description;\n  var getContentImageInfo = function getContentImageInfo() {\n    var _opengraph_image$scal, _opengraph_image$scal2, _image$scales, _image$scales$large, _opengraph_image$scal3;\n    var contentMetadataTagsImageField = config.settings.contentMetadataTagsImageField;\n    var image = props.content[contentMetadataTagsImageField];\n    var opengraph_image = props.content.opengraph_image;\n    var contentImageInfo = {\n      contentHasImage: false,\n      url: null,\n      height: null,\n      width: null\n    };\n    contentImageInfo.contentHasImage = (opengraph_image === null || opengraph_image === void 0 ? void 0 : (_opengraph_image$scal = opengraph_image.scales) === null || _opengraph_image$scal === void 0 ? void 0 : (_opengraph_image$scal2 = _opengraph_image$scal.large) === null || _opengraph_image$scal2 === void 0 ? void 0 : _opengraph_image$scal2.download) || (image === null || image === void 0 ? void 0 : (_image$scales = image.scales) === null || _image$scales === void 0 ? void 0 : (_image$scales$large = _image$scales.large) === null || _image$scales$large === void 0 ? void 0 : _image$scales$large.download) || false;\n    if (contentImageInfo.contentHasImage && opengraph_image !== null && opengraph_image !== void 0 && (_opengraph_image$scal3 = opengraph_image.scales) !== null && _opengraph_image$scal3 !== void 0 && _opengraph_image$scal3.large) {\n      contentImageInfo.url = opengraph_image.scales.large.download;\n      contentImageInfo.height = opengraph_image.scales.large.height;\n      contentImageInfo.width = opengraph_image.scales.large.width;\n    } else if (contentImageInfo.contentHasImage) {\n      contentImageInfo.url = image.scales.large.download;\n      contentImageInfo.height = image.scales.large.height;\n      contentImageInfo.width = image.scales.large.width;\n    }\n    return contentImageInfo;\n  };\n  var contentImageInfo = getContentImageInfo();\n  return __jsx(React.Fragment, null, __jsx(Helmet, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, (_ref = seo_title || title) === null || _ref === void 0 ? void 0 : _ref.replace(/\\u00AD/g, '')), __jsx(\"meta\", {\n    name: \"description\",\n    content: seo_description || description,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    property: \"og:title\",\n    content: opengraph_title || seo_title || title,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }), __jsx(\"meta\", {\n    property: \"og:url\",\n    content: seo_canonical_url || toPublicURL(props.content['@id']),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }), seo_noindex && __jsx(\"meta\", {\n    name: \"robots\",\n    content: \"noindex\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 25\n    }\n  }), contentImageInfo.contentHasImage && __jsx(\"meta\", {\n    property: \"og:image\",\n    content: toPublicURL(contentImageInfo.url),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }\n  }), contentImageInfo.contentHasImage && __jsx(\"meta\", {\n    property: \"og:image:width\",\n    content: contentImageInfo.width,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }), contentImageInfo.contentHasImage && __jsx(\"meta\", {\n    property: \"og:image:height\",\n    content: contentImageInfo.height,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 11\n    }\n  }), (opengraph_description || seo_description || description) && __jsx(\"meta\", {\n    property: \"og:description\",\n    content: opengraph_description || seo_description || description,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }), __jsx(\"meta\", {\n    name: \"twitter:card\",\n    content: \"summary_large_image\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  })));\n};\n_c = ContentMetadataTags;\nexport default ContentMetadataTags;\nvar _c;\n$RefreshReg$(_c, \"ContentMetadataTags\");","map":{"version":3,"names":["React","toPublicURL","Helmet","config","ContentMetadataTags","props","content","opengraph_title","opengraph_description","seo_title","seo_description","seo_canonical_url","seo_noindex","title","description","getContentImageInfo","contentMetadataTagsImageField","settings","image","opengraph_image","contentImageInfo","contentHasImage","url","height","width","scales","large","download","replace"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/theme/ContentMetadataTags/ContentMetadataTags.jsx"],"sourcesContent":["import React from 'react';\nimport { toPublicURL, Helmet } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\n\nconst ContentMetadataTags = (props) => {\n  const {\n    opengraph_title,\n    opengraph_description,\n    seo_title,\n    seo_description,\n    seo_canonical_url,\n    seo_noindex,\n    title,\n    description,\n  } = props.content;\n\n  const getContentImageInfo = () => {\n    const { contentMetadataTagsImageField } = config.settings;\n    const image = props.content[contentMetadataTagsImageField];\n    const { opengraph_image } = props.content;\n\n    const contentImageInfo = {\n      contentHasImage: false,\n      url: null,\n      height: null,\n      width: null,\n    };\n    contentImageInfo.contentHasImage =\n      opengraph_image?.scales?.large?.download ||\n      image?.scales?.large?.download ||\n      false;\n\n    if (contentImageInfo.contentHasImage && opengraph_image?.scales?.large) {\n      contentImageInfo.url = opengraph_image.scales.large.download;\n      contentImageInfo.height = opengraph_image.scales.large.height;\n      contentImageInfo.width = opengraph_image.scales.large.width;\n    } else if (contentImageInfo.contentHasImage) {\n      contentImageInfo.url = image.scales.large.download;\n      contentImageInfo.height = image.scales.large.height;\n      contentImageInfo.width = image.scales.large.width;\n    }\n\n    return contentImageInfo;\n  };\n\n  const contentImageInfo = getContentImageInfo();\n\n  return (\n    <>\n      <Helmet>\n        <title>{(seo_title || title)?.replace(/\\u00AD/g, '')}</title>\n        <meta name=\"description\" content={seo_description || description} />\n        <meta\n          property=\"og:title\"\n          content={opengraph_title || seo_title || title}\n        />\n        <meta\n          property=\"og:url\"\n          content={seo_canonical_url || toPublicURL(props.content['@id'])}\n        />\n        {seo_noindex && <meta name=\"robots\" content=\"noindex\" />}\n        {contentImageInfo.contentHasImage && (\n          <meta\n            property=\"og:image\"\n            content={toPublicURL(contentImageInfo.url)}\n          />\n        )}\n        {contentImageInfo.contentHasImage && (\n          <meta property=\"og:image:width\" content={contentImageInfo.width} />\n        )}\n        {contentImageInfo.contentHasImage && (\n          <meta property=\"og:image:height\" content={contentImageInfo.height} />\n        )}\n        {(opengraph_description || seo_description || description) && (\n          <meta\n            property=\"og:description\"\n            content={opengraph_description || seo_description || description}\n          />\n        )}\n        <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      </Helmet>\n    </>\n  );\n};\n\nexport default ContentMetadataTags;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}