{"ast":null,"code":"import _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _extends from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/extends.js\";\nimport _objectWithoutProperties from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nvar _excluded = [\"block\", \"items\", \"gridSize\", \"isEditMode\", \"hasDate\", \"hasDescription\"];\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-listing-block/src/blocks/Listing/layout-templates/Gallery.jsx\",\n  _this = this;\nvar __jsx = React.createElement;\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport UniversalCard from '@eeacms/volto-listing-block/components/UniversalCard/UniversalCard';\nimport config from '@plone/volto/registry';\nvar Gallery = function Gallery(_ref) {\n  var block = _ref.block,\n    items = _ref.items,\n    gridSize = _ref.gridSize,\n    isEditMode = _ref.isEditMode,\n    hasDate = _ref.hasDate,\n    hasDescription = _ref.hasDescription,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  moment.locale(config.settings.dateLocale);\n  return __jsx(React.Fragment, null, items && items.length > 0 && __jsx(\"div\", {\n    className: \"ui fluid \".concat(gridSize || '', \" cards\"),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, items.map(function (item, i) {\n    return __jsx(UniversalCard, _extends({\n      key: i\n    }, rest, {\n      block: block,\n      item: item,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }\n    }));\n  })));\n};\n_c = Gallery;\nGallery.schemaEnhancer = function (_ref2) {\n  var schema = _ref2.schema;\n  // const schema = UniversalCard.schemaEnhancer(args);\n  // schema.fieldsets[0].fields.push('gridSize');\n\n  schema.fieldsets.splice(1, 0, {\n    id: 'cardsGallery',\n    title: 'Gallery',\n    fields: ['gridSize']\n  });\n  schema.properties = _objectSpread(_objectSpread({}, schema.properties), {}, {\n    gridSize: {\n      title: 'Grid Size',\n      choices: [['three', 'Three'], ['four', 'Four']],\n      \"default\": 'three',\n      factory: 'Choice',\n      type: 'string'\n    }\n  });\n  return schema;\n};\nGallery.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.any).isRequired,\n  linkMore: PropTypes.any,\n  isEditMode: PropTypes.bool\n};\nexport default Gallery;\n\n// const makeTextBody = (item) => (\n//   <Card.Content>\n//     <Card.Meta>\n//       {hasDate && item.effective && (\n//         <span className=\"category\">\n//           {moment(item.effective).format('ll')}\n//         </span>\n//       )}\n//     </Card.Meta>\n//     <Card.Header>{item.title ? item.title : item.id}</Card.Header>\n//     {hasDescription && (\n//       <Card.Description>\n//         <p>{item.description}</p>\n//       </Card.Description>\n//     )}\n//   </Card.Content>\n// );\n//\n// const makeImage = (item) => {\n//   return (\n//     <ConditionalLink className=\"image\" item={item} condition={!isEditMode}>\n//       <PreviewImage item={item} alt={item.title} />\n//     </ConditionalLink>\n//   );\n// };\n//\n// <Card key={item['@id']} className={cx('centered', styles?.theme)}>\n//   {makeImage(item)}\n//   {makeTextBody(item)}\n// </Card>\n\n// import PreviewImage from '@eeacms/volto-listing-block/PreviewImage';\n// import { ConditionalLink } from '@plone/volto/components';\n// import { Card } from 'semantic-ui-react';\n// import cx from 'classnames';\n// styles,\n// itemModel,\nvar _c;\n$RefreshReg$(_c, \"Gallery\");","map":{"version":3,"names":["moment","PropTypes","React","UniversalCard","config","Gallery","block","items","gridSize","isEditMode","hasDate","hasDescription","rest","locale","settings","dateLocale","length","map","item","i","schemaEnhancer","schema","fieldsets","splice","id","title","fields","properties","choices","factory","type","propTypes","arrayOf","any","isRequired","linkMore","bool"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-listing-block/src/blocks/Listing/layout-templates/Gallery.jsx"],"sourcesContent":["import moment from 'moment';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport UniversalCard from '@eeacms/volto-listing-block/components/UniversalCard/UniversalCard';\nimport config from '@plone/volto/registry';\n\nconst Gallery = ({\n  block,\n  items,\n  gridSize,\n  isEditMode,\n  hasDate,\n  hasDescription,\n  ...rest\n}) => {\n  moment.locale(config.settings.dateLocale);\n  return (\n    <>\n      {items && items.length > 0 && (\n        <div className={`ui fluid ${gridSize || ''} cards`}>\n          {items.map((item, i) => (\n            <UniversalCard key={i} {...rest} block={block} item={item} />\n          ))}\n        </div>\n      )}\n    </>\n  );\n};\n\nGallery.schemaEnhancer = ({ schema }) => {\n  // const schema = UniversalCard.schemaEnhancer(args);\n  // schema.fieldsets[0].fields.push('gridSize');\n\n  schema.fieldsets.splice(1, 0, {\n    id: 'cardsGallery',\n    title: 'Gallery',\n    fields: ['gridSize'],\n  });\n\n  schema.properties = {\n    ...schema.properties,\n    gridSize: {\n      title: 'Grid Size',\n      choices: [\n        ['three', 'Three'],\n        ['four', 'Four'],\n      ],\n      default: 'three',\n      factory: 'Choice',\n      type: 'string',\n    },\n  };\n  return schema;\n};\n\nGallery.propTypes = {\n  items: PropTypes.arrayOf(PropTypes.any).isRequired,\n  linkMore: PropTypes.any,\n  isEditMode: PropTypes.bool,\n};\n\nexport default Gallery;\n\n// const makeTextBody = (item) => (\n//   <Card.Content>\n//     <Card.Meta>\n//       {hasDate && item.effective && (\n//         <span className=\"category\">\n//           {moment(item.effective).format('ll')}\n//         </span>\n//       )}\n//     </Card.Meta>\n//     <Card.Header>{item.title ? item.title : item.id}</Card.Header>\n//     {hasDescription && (\n//       <Card.Description>\n//         <p>{item.description}</p>\n//       </Card.Description>\n//     )}\n//   </Card.Content>\n// );\n//\n// const makeImage = (item) => {\n//   return (\n//     <ConditionalLink className=\"image\" item={item} condition={!isEditMode}>\n//       <PreviewImage item={item} alt={item.title} />\n//     </ConditionalLink>\n//   );\n// };\n//\n// <Card key={item['@id']} className={cx('centered', styles?.theme)}>\n//   {makeImage(item)}\n//   {makeTextBody(item)}\n// </Card>\n\n// import PreviewImage from '@eeacms/volto-listing-block/PreviewImage';\n// import { ConditionalLink } from '@plone/volto/components';\n// import { Card } from 'semantic-ui-react';\n// import cx from 'classnames';\n// styles,\n// itemModel,\n"],"mappings":";;;;;;;AAAA,OAAOA,MAAM,MAAM,QAAQ;AAC3B,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,MAAM,oEAAoE;AAC9F,OAAOC,MAAM,MAAM,uBAAuB;AAE1C,IAAMC,OAAO,GAAG,SAAVA,OAAO,OAQP;EAAA,IAPJC,KAAK,QAALA,KAAK;IACLC,KAAK,QAALA,KAAK;IACLC,QAAQ,QAARA,QAAQ;IACRC,UAAU,QAAVA,UAAU;IACVC,OAAO,QAAPA,OAAO;IACPC,cAAc,QAAdA,cAAc;IACXC,IAAI;EAEPZ,MAAM,CAACa,MAAM,CAACT,MAAM,CAACU,QAAQ,CAACC,UAAU,CAAC;EACzC,OACE,4BACGR,KAAK,IAAIA,KAAK,CAACS,MAAM,GAAG,CAAC,IACxB;IAAK,SAAS,qBAAcR,QAAQ,IAAI,EAAE,WAAS;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAChDD,KAAK,CAACU,GAAG,CAAC,UAACC,IAAI,EAAEC,CAAC;IAAA,OACjB,MAAC,aAAa;MAAC,GAAG,EAAEA;IAAE,GAAKP,IAAI;MAAE,KAAK,EAAEN,KAAM;MAAC,IAAI,EAAEY,IAAK;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAG;EAAA,CAC9D,CAAC,CAEL,CACA;AAEP,CAAC;AAAC,KArBIb,OAAO;AAuBbA,OAAO,CAACe,cAAc,GAAG,iBAAgB;EAAA,IAAbC,MAAM,SAANA,MAAM;EAChC;EACA;;EAEAA,MAAM,CAACC,SAAS,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE;IAC5BC,EAAE,EAAE,cAAc;IAClBC,KAAK,EAAE,SAAS;IAChBC,MAAM,EAAE,CAAC,UAAU;EACrB,CAAC,CAAC;EAEFL,MAAM,CAACM,UAAU,mCACZN,MAAM,CAACM,UAAU;IACpBnB,QAAQ,EAAE;MACRiB,KAAK,EAAE,WAAW;MAClBG,OAAO,EAAE,CACP,CAAC,OAAO,EAAE,OAAO,CAAC,EAClB,CAAC,MAAM,EAAE,MAAM,CAAC,CACjB;MACD,WAAS,OAAO;MAChBC,OAAO,EAAE,QAAQ;MACjBC,IAAI,EAAE;IACR;EAAC,EACF;EACD,OAAOT,MAAM;AACf,CAAC;AAEDhB,OAAO,CAAC0B,SAAS,GAAG;EAClBxB,KAAK,EAAEN,SAAS,CAAC+B,OAAO,CAAC/B,SAAS,CAACgC,GAAG,CAAC,CAACC,UAAU;EAClDC,QAAQ,EAAElC,SAAS,CAACgC,GAAG;EACvBxB,UAAU,EAAER,SAAS,CAACmC;AACxB,CAAC;AAED,eAAe/B,OAAO;;AAEtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}