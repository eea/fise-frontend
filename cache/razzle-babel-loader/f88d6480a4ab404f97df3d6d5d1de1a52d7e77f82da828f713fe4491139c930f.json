{"ast":null,"code":"import _merge from \"lodash/merge\";\nimport _mapKeys from \"lodash/mapKeys\";\nimport _map from \"lodash/map\";\nimport _isArray from \"lodash/isArray\";\nimport _pickBy from \"lodash/pickBy\";\nimport _keys from \"lodash/keys\";\nimport _flatten from \"lodash/flatten\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport { GET_SCHEMA, POST_SCHEMA, PUT_SCHEMA, UPDATE_SCHEMA } from '@plone/volto/constants/ActionTypes';\nconst initialState = {\n  error: null,\n  loaded: false,\n  loading: false,\n  schema: null,\n  post: {\n    loaded: false,\n    loading: false,\n    error: null\n  },\n  update: {\n    loaded: false,\n    loading: false,\n    error: null\n  },\n  put: {\n    loaded: false,\n    loading: false,\n    error: null\n  }\n};\n\n/**\n * Get request key\n * @function getRequestKey\n * @param {string} actionType Action type.\n * @returns {string} Request key.\n */\nfunction getRequestKey(actionType) {\n  return actionType.split('_')[0].toLowerCase();\n}\n\n/**\n * Schema reducer.\n * @function schema\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function schema(state = initialState, action = {}) {\n  switch (action.type) {\n    /** PENDING */\n    case `${GET_SCHEMA}_PENDING`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: null,\n        loading: true,\n        loaded: false\n      });\n    case `${POST_SCHEMA}_PENDING`:\n    case `${PUT_SCHEMA}_PENDING`:\n    case `${UPDATE_SCHEMA}_PENDING`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [getRequestKey(action.type)]: {\n          loading: true,\n          loaded: false,\n          error: null\n        }\n      });\n\n    /** SUCCESS */\n    case `${GET_SCHEMA}_SUCCESS`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: null,\n        loading: false,\n        loaded: true,\n        schema: _objectSpread(_objectSpread({}, action.result), {}, {\n          required: [...action.result.required, ..._flatten(_map(_keys(_pickBy(action.result.properties, _isArray)), fieldset => _map(action.result.definitions[fieldset].required, required => `${fieldset}.${required}`)))],\n          properties: _objectSpread(_objectSpread({}, action.result.properties), _merge(..._map(_keys(_pickBy(action.result.properties, _isArray)), fieldset => _mapKeys(action.result.definitions[fieldset].properties, (value, key) => `${fieldset}.${key}`))))\n        })\n      });\n    case `${POST_SCHEMA}_SUCCESS`:\n    case `${PUT_SCHEMA}_SUCCESS`:\n    case `${UPDATE_SCHEMA}_SUCCESS`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null\n        }\n      });\n\n    /** FAIL */\n    case `${GET_SCHEMA}_FAIL`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.error,\n        loading: false,\n        loaded: false,\n        schema: null\n      });\n    case `${POST_SCHEMA}_FAIL`:\n    case `${PUT_SCHEMA}_FAIL`:\n    case `${UPDATE_SCHEMA}_FAIL`:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error\n        }\n      });\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["GET_SCHEMA","POST_SCHEMA","PUT_SCHEMA","UPDATE_SCHEMA","initialState","error","loaded","loading","schema","post","update","put","getRequestKey","actionType","split","toLowerCase","state","action","type","result","required","properties","fieldset","definitions","value","key"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/reducers/schema/schema.js"],"sourcesContent":["/**\n * Schema reducer.\n * @module reducers/schema/schema\n */\n\nimport { flatten, keys, pickBy, isArray, map, mapKeys, merge } from 'lodash';\n\nimport {\n  GET_SCHEMA,\n  POST_SCHEMA,\n  PUT_SCHEMA,\n  UPDATE_SCHEMA,\n} from '@plone/volto/constants/ActionTypes';\n\nconst initialState = {\n  error: null,\n  loaded: false,\n  loading: false,\n  schema: null,\n  post: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  update: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n  put: {\n    loaded: false,\n    loading: false,\n    error: null,\n  },\n};\n\n/**\n * Get request key\n * @function getRequestKey\n * @param {string} actionType Action type.\n * @returns {string} Request key.\n */\nfunction getRequestKey(actionType) {\n  return actionType.split('_')[0].toLowerCase();\n}\n\n/**\n * Schema reducer.\n * @function schema\n * @param {Object} state Current state.\n * @param {Object} action Action to be handled.\n * @returns {Object} New state.\n */\nexport default function schema(state = initialState, action = {}) {\n  switch (action.type) {\n    /** PENDING */\n    case `${GET_SCHEMA}_PENDING`:\n      return {\n        ...state,\n        error: null,\n        loading: true,\n        loaded: false,\n      };\n    case `${POST_SCHEMA}_PENDING`:\n    case `${PUT_SCHEMA}_PENDING`:\n    case `${UPDATE_SCHEMA}_PENDING`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: true,\n          loaded: false,\n          error: null,\n        },\n      };\n\n    /** SUCCESS */\n    case `${GET_SCHEMA}_SUCCESS`:\n      return {\n        ...state,\n        error: null,\n        loading: false,\n        loaded: true,\n        schema: {\n          ...action.result,\n          required: [\n            ...action.result.required,\n            ...flatten(\n              map(keys(pickBy(action.result.properties, isArray)), (fieldset) =>\n                map(\n                  action.result.definitions[fieldset].required,\n                  (required) => `${fieldset}.${required}`,\n                ),\n              ),\n            ),\n          ],\n          properties: {\n            ...action.result.properties,\n            ...merge(\n              ...map(\n                keys(pickBy(action.result.properties, isArray)),\n                (fieldset) =>\n                  mapKeys(\n                    action.result.definitions[fieldset].properties,\n                    (value, key) => `${fieldset}.${key}`,\n                  ),\n              ),\n            ),\n          },\n        },\n      };\n    case `${POST_SCHEMA}_SUCCESS`:\n    case `${PUT_SCHEMA}_SUCCESS`:\n    case `${UPDATE_SCHEMA}_SUCCESS`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: true,\n          error: null,\n        },\n      };\n\n    /** FAIL */\n    case `${GET_SCHEMA}_FAIL`:\n      return {\n        ...state,\n        error: action.error,\n        loading: false,\n        loaded: false,\n        schema: null,\n      };\n    case `${POST_SCHEMA}_FAIL`:\n    case `${PUT_SCHEMA}_FAIL`:\n    case `${UPDATE_SCHEMA}_FAIL`:\n      return {\n        ...state,\n        [getRequestKey(action.type)]: {\n          loading: false,\n          loaded: false,\n          error: action.error,\n        },\n      };\n    default:\n      return state;\n  }\n}\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}