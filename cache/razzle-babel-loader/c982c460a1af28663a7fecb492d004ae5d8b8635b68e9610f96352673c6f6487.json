{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Blocks/LeadImage/LeadImageSidebar.jsx\";\nvar __jsx = React.createElement;\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form } from 'semantic-ui-react';\nimport { Accordion, Grid, Segment } from 'semantic-ui-react';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport { CheckboxWidget, Icon, TextWidget } from '@plone/volto/components';\nimport { flattenToAppURL } from '@plone/volto/helpers';\nimport AlignBlock from '@plone/volto/components/manage/Sidebar/AlignBlock';\nimport imageSVG from '@plone/volto/icons/image.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport upSVG from '@plone/volto/icons/up-key.svg';\nimport downSVG from '@plone/volto/icons/down-key.svg';\nimport navTreeSVG from '@plone/volto/icons/nav.svg';\nconst messages = defineMessages({\n  Image: {\n    \"id\": \"Image\",\n    \"defaultMessage\": \"Image\"\n  },\n  Origin: {\n    \"id\": \"Origin\",\n    \"defaultMessage\": \"Origin\"\n  },\n  AltText: {\n    \"id\": \"Alt text\",\n    \"defaultMessage\": \"Alt text\"\n  },\n  Align: {\n    \"id\": \"Alignment\",\n    \"defaultMessage\": \"Alignment\"\n  },\n  LinkTo: {\n    \"id\": \"Link to\",\n    \"defaultMessage\": \"Link to\"\n  },\n  openLinkInNewTab: {\n    \"id\": \"Open in a new tab\",\n    \"defaultMessage\": \"Open in a new tab\"\n  },\n  NoImageSelected: {\n    \"id\": \"No image set in image content field\",\n    \"defaultMessage\": \"No image set in image content field\"\n  },\n  externalURL: {\n    \"id\": \"External URL\",\n    \"defaultMessage\": \"External URL\"\n  }\n});\nconst LeadImageSidebar = ({\n  properties,\n  data,\n  block,\n  onChangeBlock,\n  openObjectBrowser,\n  required = false,\n  onChangeField,\n  intl\n}) => {\n  const {\n    0: activeAccIndex,\n    1: setActiveAccIndex\n  } = useState(0);\n  function handleAccClick(e, titleProps) {\n    const {\n      index\n    } = titleProps;\n    const newIndex = activeAccIndex === index ? -1 : index;\n    setActiveAccIndex(newIndex);\n  }\n  return __jsx(Segment.Group, {\n    raised: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, __jsx(\"header\", {\n    className: \"header pulled\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, __jsx(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"Lead Image\",\n    defaultMessage: \"Lead Image\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }))), !properties.image && __jsx(React.Fragment, null, __jsx(Segment, {\n    className: \"sidebar-metadata-container\",\n    secondary: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"No image set in Lead Image content field\",\n    defaultMessage: \"No image set in Lead Image content field\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }), __jsx(Icon, {\n    name: imageSVG,\n    size: \"100px\",\n    color: \"#b8c6c8\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }))), properties.image && __jsx(React.Fragment, null, __jsx(Segment, {\n    className: \"sidebar-metadata-container\",\n    secondary: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }, properties.image.filename, __jsx(\"img\", {\n    src: properties.image.data ? `data:${properties.image['content-type']};base64,${properties.image.data}` : flattenToAppURL(properties.image.scales.mini.download),\n    alt: properties.image_caption || '',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  })), __jsx(Segment, {\n    className: \"form sidebar-image-data\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }\n  }, __jsx(TextWidget, {\n    id: \"alt\",\n    title: intl.formatMessage(messages.AltText),\n    required: false,\n    value: properties.image_caption,\n    icon: properties.image_caption ? clearSVG : null,\n    iconAction: () => onChangeField('image_caption', ''),\n    onChange: (name, value) => {\n      onChangeField('image_caption', value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }), __jsx(Form.Field, {\n    inline: true,\n    required: required,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 13\n    }\n  }, __jsx(Grid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 15\n    }\n  }, __jsx(Grid.Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 17\n    }\n  }, __jsx(Grid.Column, {\n    width: \"4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 19\n    }\n  }, __jsx(\"div\", {\n    className: \"wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 21\n    }\n  }, __jsx(\"label\", {\n    htmlFor: \"field-align\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 23\n    }\n  }, __jsx(FormattedMessage, {\n    id: \"Alignment\",\n    defaultMessage: \"Alignment\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 25\n    }\n  })))), __jsx(Grid.Column, {\n    width: \"8\",\n    className: \"align-tools\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 19\n    }\n  }, __jsx(AlignBlock, {\n    align: data.align,\n    onChangeBlock: onChangeBlock,\n    data: data,\n    block: block,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 21\n    }\n  })))))), __jsx(Accordion, {\n    fluid: true,\n    styled: true,\n    className: \"form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 11\n    }\n  }, __jsx(Accordion.Title, {\n    active: activeAccIndex === 0,\n    index: 0,\n    onClick: handleAccClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }, \"Link Settings\", activeAccIndex === 0 ? __jsx(Icon, {\n    name: upSVG,\n    size: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 17\n    }\n  }) : __jsx(Icon, {\n    name: downSVG,\n    size: \"20px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 17\n    }\n  })), __jsx(Accordion.Content, {\n    active: activeAccIndex === 0,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 13\n    }\n  }, __jsx(TextWidget, {\n    id: \"link\",\n    title: intl.formatMessage(messages.LinkTo),\n    required: false,\n    value: flattenToAppURL(data.href),\n    icon: data.href ? clearSVG : navTreeSVG,\n    iconAction: data.href ? () => {\n      onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n        href: ''\n      }));\n    } : () => openObjectBrowser({\n      mode: 'link'\n    }),\n    onChange: (name, value) => {\n      onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n        href: flattenToAppURL(value)\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 15\n    }\n  }), __jsx(CheckboxWidget, {\n    id: \"openLinkInNewTab\",\n    title: intl.formatMessage(messages.openLinkInNewTab),\n    value: data.openLinkInNewTab ? data.openLinkInNewTab : false,\n    onChange: (name, value) => {\n      onChangeBlock(block, _objectSpread(_objectSpread({}, data), {}, {\n        openLinkInNewTab: value\n      }));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 15\n    }\n  })))));\n};\nLeadImageSidebar.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  block: PropTypes.string.isRequired,\n  onChangeBlock: PropTypes.func.isRequired,\n  openObjectBrowser: PropTypes.func.isRequired,\n  onChangeField: PropTypes.func.isRequired\n};\nexport default injectIntl(LeadImageSidebar);","map":{"version":3,"names":["React","useState","PropTypes","Form","Accordion","Grid","Segment","defineMessages","FormattedMessage","injectIntl","CheckboxWidget","Icon","TextWidget","flattenToAppURL","AlignBlock","imageSVG","clearSVG","upSVG","downSVG","navTreeSVG","messages","Image","Origin","AltText","Align","LinkTo","openLinkInNewTab","NoImageSelected","externalURL","LeadImageSidebar","properties","data","block","onChangeBlock","openObjectBrowser","required","onChangeField","intl","activeAccIndex","setActiveAccIndex","handleAccClick","e","titleProps","index","newIndex","image","filename","scales","mini","download","image_caption","formatMessage","name","value","align","href","mode","propTypes","objectOf","any","isRequired","string","func"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Blocks/LeadImage/LeadImageSidebar.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form } from 'semantic-ui-react';\nimport { Accordion, Grid, Segment } from 'semantic-ui-react';\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\nimport { CheckboxWidget, Icon, TextWidget } from '@plone/volto/components';\nimport { flattenToAppURL } from '@plone/volto/helpers';\nimport AlignBlock from '@plone/volto/components/manage/Sidebar/AlignBlock';\n\nimport imageSVG from '@plone/volto/icons/image.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport upSVG from '@plone/volto/icons/up-key.svg';\nimport downSVG from '@plone/volto/icons/down-key.svg';\nimport navTreeSVG from '@plone/volto/icons/nav.svg';\n\nconst messages = defineMessages({\n  Image: {\n    id: 'Image',\n    defaultMessage: 'Image',\n  },\n  Origin: {\n    id: 'Origin',\n    defaultMessage: 'Origin',\n  },\n  AltText: {\n    id: 'Alt text',\n    defaultMessage: 'Alt text',\n  },\n  Align: {\n    id: 'Alignment',\n    defaultMessage: 'Alignment',\n  },\n  LinkTo: {\n    id: 'Link to',\n    defaultMessage: 'Link to',\n  },\n  openLinkInNewTab: {\n    id: 'Open in a new tab',\n    defaultMessage: 'Open in a new tab',\n  },\n  NoImageSelected: {\n    id: 'No image set in image content field',\n    defaultMessage: 'No image set in image content field',\n  },\n  externalURL: {\n    id: 'External URL',\n    defaultMessage: 'External URL',\n  },\n});\n\nconst LeadImageSidebar = ({\n  properties,\n  data,\n  block,\n  onChangeBlock,\n  openObjectBrowser,\n  required = false,\n  onChangeField,\n  intl,\n}) => {\n  const [activeAccIndex, setActiveAccIndex] = useState(0);\n\n  function handleAccClick(e, titleProps) {\n    const { index } = titleProps;\n    const newIndex = activeAccIndex === index ? -1 : index;\n\n    setActiveAccIndex(newIndex);\n  }\n\n  return (\n    <Segment.Group raised>\n      <header className=\"header pulled\">\n        <h2>\n          <FormattedMessage id=\"Lead Image\" defaultMessage=\"Lead Image\" />\n        </h2>\n      </header>\n\n      {!properties.image && (\n        <>\n          <Segment className=\"sidebar-metadata-container\" secondary>\n            <FormattedMessage\n              id=\"No image set in Lead Image content field\"\n              defaultMessage=\"No image set in Lead Image content field\"\n            />\n            <Icon name={imageSVG} size=\"100px\" color=\"#b8c6c8\" />\n          </Segment>\n        </>\n      )}\n      {properties.image && (\n        <>\n          <Segment className=\"sidebar-metadata-container\" secondary>\n            {properties.image.filename}\n            <img\n              src={\n                properties.image.data\n                  ? `data:${properties.image['content-type']};base64,${properties.image.data}`\n                  : flattenToAppURL(properties.image.scales.mini.download)\n              }\n              alt={properties.image_caption || ''}\n            />\n          </Segment>\n          <Segment className=\"form sidebar-image-data\">\n            <TextWidget\n              id=\"alt\"\n              title={intl.formatMessage(messages.AltText)}\n              required={false}\n              value={properties.image_caption}\n              icon={properties.image_caption ? clearSVG : null}\n              iconAction={() => onChangeField('image_caption', '')}\n              onChange={(name, value) => {\n                onChangeField('image_caption', value);\n              }}\n            />\n            <Form.Field inline required={required}>\n              <Grid>\n                <Grid.Row>\n                  <Grid.Column width=\"4\">\n                    <div className=\"wrapper\">\n                      <label htmlFor=\"field-align\">\n                        <FormattedMessage\n                          id=\"Alignment\"\n                          defaultMessage=\"Alignment\"\n                        />\n                      </label>\n                    </div>\n                  </Grid.Column>\n                  <Grid.Column width=\"8\" className=\"align-tools\">\n                    <AlignBlock\n                      align={data.align}\n                      onChangeBlock={onChangeBlock}\n                      data={data}\n                      block={block}\n                    />\n                  </Grid.Column>\n                </Grid.Row>\n              </Grid>\n            </Form.Field>\n          </Segment>\n          <Accordion fluid styled className=\"form\">\n            <Accordion.Title\n              active={activeAccIndex === 0}\n              index={0}\n              onClick={handleAccClick}\n            >\n              Link Settings\n              {activeAccIndex === 0 ? (\n                <Icon name={upSVG} size=\"20px\" />\n              ) : (\n                <Icon name={downSVG} size=\"20px\" />\n              )}\n            </Accordion.Title>\n            <Accordion.Content active={activeAccIndex === 0}>\n              <TextWidget\n                id=\"link\"\n                title={intl.formatMessage(messages.LinkTo)}\n                required={false}\n                value={flattenToAppURL(data.href)}\n                icon={data.href ? clearSVG : navTreeSVG}\n                iconAction={\n                  data.href\n                    ? () => {\n                        onChangeBlock(block, {\n                          ...data,\n                          href: '',\n                        });\n                      }\n                    : () => openObjectBrowser({ mode: 'link' })\n                }\n                onChange={(name, value) => {\n                  onChangeBlock(block, {\n                    ...data,\n                    href: flattenToAppURL(value),\n                  });\n                }}\n              />\n              <CheckboxWidget\n                id=\"openLinkInNewTab\"\n                title={intl.formatMessage(messages.openLinkInNewTab)}\n                value={data.openLinkInNewTab ? data.openLinkInNewTab : false}\n                onChange={(name, value) => {\n                  onChangeBlock(block, {\n                    ...data,\n                    openLinkInNewTab: value,\n                  });\n                }}\n              />\n            </Accordion.Content>\n          </Accordion>\n        </>\n      )}\n    </Segment.Group>\n  );\n};\n\nLeadImageSidebar.propTypes = {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  block: PropTypes.string.isRequired,\n  onChangeBlock: PropTypes.func.isRequired,\n  openObjectBrowser: PropTypes.func.isRequired,\n  onChangeField: PropTypes.func.isRequired,\n};\n\nexport default injectIntl(LeadImageSidebar);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Image","defaultMessage":"Image"},{"id":"Origin","defaultMessage":"Origin"},{"id":"Alt text","defaultMessage":"Alt text"},{"id":"Alignment","defaultMessage":"Alignment"},{"id":"Link to","defaultMessage":"Link to"},{"id":"Open in a new tab","defaultMessage":"Open in a new tab"},{"id":"No image set in image content field","defaultMessage":"No image set in image content field"},{"id":"External URL","defaultMessage":"External URL"},{"id":"Lead Image","defaultMessage":"Lead Image"},{"id":"No image set in Lead Image content field","defaultMessage":"No image set in Lead Image content field"}]}},"sourceType":"module","externalDependencies":[]}