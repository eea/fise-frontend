{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport accordionSVG from '@plone/volto/icons/list-arrows.svg';\nimport { AccordionBlockEdit, AccordionBlockView, AccordionLayoutSchema, AccordionStylingSchema } from './components';\nimport { PanelsWidget } from '@eeacms/volto-accordion-block/components';\nimport rightSVG from '@plone/volto/icons/right-key.svg';\nimport leftSVG from '@plone/volto/icons/left-key.svg';\nimport downSVG from '@plone/volto/icons/down-key.svg';\nconst extendedSchema = config => {\n  const choices = Object.keys(config.blocks.blocksConfig).map(key => {\n    var _config$blocks$blocks;\n    if ((_config$blocks$blocks = config.blocks.blocksConfig[key]) !== null && _config$blocks$blocks !== void 0 && _config$blocks$blocks.restricted) {\n      return false;\n    } else {\n      var _config$blocks$blocks2;\n      const title = ((_config$blocks$blocks2 = config.blocks.blocksConfig[key]) === null || _config$blocks$blocks2 === void 0 ? void 0 : _config$blocks$blocks2.title) || key;\n      return [key, title];\n    }\n  }).filter(val => !!val);\n  choices.push(['accordion', 'Accordion']);\n  return _objectSpread(_objectSpread({}, AccordionLayoutSchema), {}, {\n    properties: _objectSpread(_objectSpread({}, AccordionLayoutSchema.properties), {}, {\n      allowedBlocks: _objectSpread(_objectSpread({}, AccordionLayoutSchema.properties.allowedBlocks), {}, {\n        items: {\n          choices: choices\n        }\n      })\n    })\n  });\n};\nconst applyConfig = config => {\n  config.blocks.blocksConfig.accordion = {\n    id: 'accordion',\n    title: 'Accordion',\n    icon: accordionSVG,\n    group: 'common',\n    titleIcons: {\n      closed: {\n        leftPosition: rightSVG,\n        rightPosition: leftSVG\n      },\n      opened: {\n        leftPosition: downSVG,\n        rightPosition: downSVG\n      },\n      size: '24px'\n    },\n    view: AccordionBlockView,\n    edit: AccordionBlockEdit,\n    restricted: false,\n    mostUsed: false,\n    blockHasOwnFocusManagement: true,\n    sidebarTab: 1,\n    schema: extendedSchema(config),\n    stylesSchema: AccordionStylingSchema,\n    enableStyling: true,\n    // See https://react.semantic-ui.com/modules/accordion/\n    options: {\n      styled: 'styled',\n      fluid: 'fluid'\n    },\n    defaults: {},\n    security: {\n      addPermission: [],\n      view: []\n    }\n  };\n  config.widgets.type.panels = PanelsWidget;\n  return config;\n};\nexport default applyConfig;","map":{"version":3,"names":["accordionSVG","AccordionBlockEdit","AccordionBlockView","AccordionLayoutSchema","AccordionStylingSchema","PanelsWidget","rightSVG","leftSVG","downSVG","extendedSchema","config","choices","Object","keys","blocks","blocksConfig","map","key","restricted","title","filter","val","push","properties","allowedBlocks","items","applyConfig","accordion","id","icon","group","titleIcons","closed","leftPosition","rightPosition","opened","size","view","edit","mostUsed","blockHasOwnFocusManagement","sidebarTab","schema","stylesSchema","enableStyling","options","styled","fluid","defaults","security","addPermission","widgets","type","panels"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-accordion-block/src/index.js"],"sourcesContent":["import accordionSVG from '@plone/volto/icons/list-arrows.svg';\nimport {\n  AccordionBlockEdit,\n  AccordionBlockView,\n  AccordionLayoutSchema,\n  AccordionStylingSchema,\n} from './components';\nimport { PanelsWidget } from '@eeacms/volto-accordion-block/components';\nimport rightSVG from '@plone/volto/icons/right-key.svg';\nimport leftSVG from '@plone/volto/icons/left-key.svg';\nimport downSVG from '@plone/volto/icons/down-key.svg';\n\nconst extendedSchema = (config) => {\n  const choices = Object.keys(config.blocks.blocksConfig)\n    .map((key) => {\n      if (config.blocks.blocksConfig[key]?.restricted) {\n        return false;\n      } else {\n        const title = config.blocks.blocksConfig[key]?.title || key;\n        return [key, title];\n      }\n    })\n    .filter((val) => !!val);\n\n  choices.push(['accordion', 'Accordion']);\n\n  return {\n    ...AccordionLayoutSchema,\n    properties: {\n      ...AccordionLayoutSchema.properties,\n      allowedBlocks: {\n        ...AccordionLayoutSchema.properties.allowedBlocks,\n        items: {\n          choices: choices,\n        },\n      },\n    },\n  };\n};\n\nconst applyConfig = (config) => {\n  config.blocks.blocksConfig.accordion = {\n    id: 'accordion',\n    title: 'Accordion',\n    icon: accordionSVG,\n    group: 'common',\n    titleIcons: {\n      closed: { leftPosition: rightSVG, rightPosition: leftSVG },\n      opened: { leftPosition: downSVG, rightPosition: downSVG },\n      size: '24px',\n    },\n    view: AccordionBlockView,\n    edit: AccordionBlockEdit,\n    restricted: false,\n    mostUsed: false,\n    blockHasOwnFocusManagement: true,\n    sidebarTab: 1,\n    schema: extendedSchema(config),\n    stylesSchema: AccordionStylingSchema,\n    enableStyling: true,\n    // See https://react.semantic-ui.com/modules/accordion/\n    options: {\n      styled: 'styled',\n      fluid: 'fluid',\n    },\n    defaults: {},\n    security: {\n      addPermission: [],\n      view: [],\n    },\n  };\n  config.widgets.type.panels = PanelsWidget;\n  return config;\n};\n\nexport default applyConfig;\n"],"mappings":";;;AAAA,OAAOA,YAAY,MAAM,oCAAoC;AAC7D,SACEC,kBAAkB,EAClBC,kBAAkB,EAClBC,qBAAqB,EACrBC,sBAAsB,QACjB,cAAc;AACrB,SAASC,YAAY,QAAQ,0CAA0C;AACvE,OAAOC,QAAQ,MAAM,kCAAkC;AACvD,OAAOC,OAAO,MAAM,iCAAiC;AACrD,OAAOC,OAAO,MAAM,iCAAiC;AAErD,MAAMC,cAAc,GAAIC,MAAM,IAAK;EACjC,MAAMC,OAAO,GAAGC,MAAM,CAACC,IAAI,CAACH,MAAM,CAACI,MAAM,CAACC,YAAY,CAAC,CACpDC,GAAG,CAAEC,GAAG,IAAK;IAAA;IACZ,6BAAIP,MAAM,CAACI,MAAM,CAACC,YAAY,CAACE,GAAG,CAAC,kDAA/B,sBAAiCC,UAAU,EAAE;MAC/C,OAAO,KAAK;IACd,CAAC,MAAM;MAAA;MACL,MAAMC,KAAK,GAAG,2BAAAT,MAAM,CAACI,MAAM,CAACC,YAAY,CAACE,GAAG,CAAC,2DAA/B,uBAAiCE,KAAK,KAAIF,GAAG;MAC3D,OAAO,CAACA,GAAG,EAAEE,KAAK,CAAC;IACrB;EACF,CAAC,CAAC,CACDC,MAAM,CAAEC,GAAG,IAAK,CAAC,CAACA,GAAG,CAAC;EAEzBV,OAAO,CAACW,IAAI,CAAC,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;EAExC,uCACKnB,qBAAqB;IACxBoB,UAAU,kCACLpB,qBAAqB,CAACoB,UAAU;MACnCC,aAAa,kCACRrB,qBAAqB,CAACoB,UAAU,CAACC,aAAa;QACjDC,KAAK,EAAE;UACLd,OAAO,EAAEA;QACX;MAAC;IACF;EACF;AAEL,CAAC;AAED,MAAMe,WAAW,GAAIhB,MAAM,IAAK;EAC9BA,MAAM,CAACI,MAAM,CAACC,YAAY,CAACY,SAAS,GAAG;IACrCC,EAAE,EAAE,WAAW;IACfT,KAAK,EAAE,WAAW;IAClBU,IAAI,EAAE7B,YAAY;IAClB8B,KAAK,EAAE,QAAQ;IACfC,UAAU,EAAE;MACVC,MAAM,EAAE;QAAEC,YAAY,EAAE3B,QAAQ;QAAE4B,aAAa,EAAE3B;MAAQ,CAAC;MAC1D4B,MAAM,EAAE;QAAEF,YAAY,EAAEzB,OAAO;QAAE0B,aAAa,EAAE1B;MAAQ,CAAC;MACzD4B,IAAI,EAAE;IACR,CAAC;IACDC,IAAI,EAAEnC,kBAAkB;IACxBoC,IAAI,EAAErC,kBAAkB;IACxBiB,UAAU,EAAE,KAAK;IACjBqB,QAAQ,EAAE,KAAK;IACfC,0BAA0B,EAAE,IAAI;IAChCC,UAAU,EAAE,CAAC;IACbC,MAAM,EAAEjC,cAAc,CAACC,MAAM,CAAC;IAC9BiC,YAAY,EAAEvC,sBAAsB;IACpCwC,aAAa,EAAE,IAAI;IACnB;IACAC,OAAO,EAAE;MACPC,MAAM,EAAE,QAAQ;MAChBC,KAAK,EAAE;IACT,CAAC;IACDC,QAAQ,EAAE,CAAC,CAAC;IACZC,QAAQ,EAAE;MACRC,aAAa,EAAE,EAAE;MACjBb,IAAI,EAAE;IACR;EACF,CAAC;EACD3B,MAAM,CAACyC,OAAO,CAACC,IAAI,CAACC,MAAM,GAAGhD,YAAY;EACzC,OAAOK,MAAM;AACf,CAAC;AAED,eAAegB,WAAW"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}