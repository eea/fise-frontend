{"ast":null,"code":"import _without from \"lodash/without\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n/**\n * Data Providers reducer\n * @module reducers/data_providers\n */\n\nimport { GET_DATA_FROM_PROVIDER } from '../constants';\nconst MAX_DATA_PER_PROVIDER = 10;\nconst initialState = {\n  error: null,\n  data: {},\n  metadata: {},\n  loaded: false,\n  loading: false,\n  pendingConnectors: {},\n  failedConnectors: {},\n  requested: [],\n  tree: {}\n};\nexport default function data_providers(state = initialState, action = {}) {\n  const pendingConnectors = _objectSpread({}, state.pendingConnectors);\n  const failedConnectors = _objectSpread({}, state.failedConnectors);\n  const tree = _objectSpread({}, state.tree);\n  const providerPath = action.path;\n  const hashValue = action.hashValue;\n  const path = `${providerPath}${hashValue ? `#${hashValue}` : ''}`;\n  switch (action.type) {\n    case `${GET_DATA_FROM_PROVIDER}_PENDING`:\n      pendingConnectors[path] = true;\n      delete failedConnectors[path];\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: null,\n        loaded: false,\n        loading: true,\n        requested: [..._without(state.requested, action.path), action.path],\n        pendingConnectors,\n        failedConnectors\n      });\n    case `${GET_DATA_FROM_PROVIDER}_SUCCESS`:\n      delete pendingConnectors[path];\n      if (!tree[providerPath]) {\n        tree[providerPath] = [];\n      }\n      tree[providerPath].push(hashValue);\n      const providerData = state.data[providerPath] || {};\n      if (tree[providerPath].length > MAX_DATA_PER_PROVIDER) {\n        delete providerData[tree[providerPath].shift()];\n      }\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: null,\n        data: _objectSpread(_objectSpread({}, state.data), {}, {\n          [providerPath]: _objectSpread(_objectSpread({}, providerData), {}, {\n            [hashValue]: action.result.data.results\n          })\n        }),\n        metadata: _objectSpread(_objectSpread({}, state.metadata), {}, {\n          [providerPath]: _objectSpread(_objectSpread({}, providerData), {}, {\n            [hashValue]: action.result.data.metadata\n          })\n        }),\n        loaded: true,\n        loading: false,\n        requested: [..._without(state.requested, path)],\n        pendingConnectors,\n        failedConnectors,\n        tree\n      });\n    case `${GET_DATA_FROM_PROVIDER}_FAIL`:\n      delete pendingConnectors[path];\n      failedConnectors[path] = true;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        error: action.error,\n        loaded: false,\n        loading: false,\n        // TODO: retry get?\n        requested: [..._without(state.requested, path)],\n        pendingConnectors,\n        failedConnectors\n      });\n    default:\n      return state;\n  }\n}","map":{"version":3,"names":["GET_DATA_FROM_PROVIDER","MAX_DATA_PER_PROVIDER","initialState","error","data","metadata","loaded","loading","pendingConnectors","failedConnectors","requested","tree","data_providers","state","action","providerPath","path","hashValue","type","push","providerData","length","shift","result","results"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-datablocks/src/reducers/data_providers.js"],"sourcesContent":["/**\n * Data Providers reducer\n * @module reducers/data_providers\n */\n\nimport { GET_DATA_FROM_PROVIDER } from '../constants';\nimport { without } from 'lodash';\n\nconst MAX_DATA_PER_PROVIDER = 10;\n\nconst initialState = {\n  error: null,\n  data: {},\n  metadata: {},\n  loaded: false,\n  loading: false,\n  pendingConnectors: {},\n  failedConnectors: {},\n  requested: [],\n  tree: {},\n};\n\nexport default function data_providers(state = initialState, action = {}) {\n  const pendingConnectors = { ...state.pendingConnectors };\n  const failedConnectors = { ...state.failedConnectors };\n  const tree = { ...state.tree };\n  const providerPath = action.path;\n  const hashValue = action.hashValue;\n\n  const path = `${providerPath}${hashValue ? `#${hashValue}` : ''}`;\n\n  switch (action.type) {\n    case `${GET_DATA_FROM_PROVIDER}_PENDING`:\n      pendingConnectors[path] = true;\n      delete failedConnectors[path];\n\n      return {\n        ...state,\n        error: null,\n        loaded: false,\n        loading: true,\n        requested: [...without(state.requested, action.path), action.path],\n        pendingConnectors,\n        failedConnectors,\n      };\n\n    case `${GET_DATA_FROM_PROVIDER}_SUCCESS`:\n      delete pendingConnectors[path];\n      if (!tree[providerPath]) {\n        tree[providerPath] = [];\n      }\n      tree[providerPath].push(hashValue);\n      const providerData = state.data[providerPath] || {};\n      if (tree[providerPath].length > MAX_DATA_PER_PROVIDER) {\n        delete providerData[tree[providerPath].shift()];\n      }\n      return {\n        ...state,\n        error: null,\n        data: {\n          ...state.data,\n          [providerPath]: {\n            ...providerData,\n            [hashValue]: action.result.data.results,\n          },\n        },\n        metadata: {\n          ...state.metadata,\n          [providerPath]: {\n            ...providerData,\n            [hashValue]: action.result.data.metadata,\n          },\n        },\n        loaded: true,\n        loading: false,\n        requested: [...without(state.requested, path)],\n        pendingConnectors,\n        failedConnectors,\n        tree,\n      };\n\n    case `${GET_DATA_FROM_PROVIDER}_FAIL`:\n      delete pendingConnectors[path];\n      failedConnectors[path] = true;\n\n      return {\n        ...state,\n        error: action.error,\n        loaded: false,\n        loading: false,\n        // TODO: retry get?\n        requested: [...without(state.requested, path)],\n        pendingConnectors,\n        failedConnectors,\n      };\n\n    default:\n      return state;\n  }\n}\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}