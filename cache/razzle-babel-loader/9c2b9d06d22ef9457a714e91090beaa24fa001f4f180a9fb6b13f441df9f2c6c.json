{"ast":null,"code":"import _isEmpty from \"lodash/isEmpty\";\nimport _isEqual from \"lodash/isEqual\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-slate-footnote/src/editor/FootnoteEditor.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ReactEditor } from 'slate-react';\nimport { setPluginOptions } from '@plone/volto-slate/actions';\nimport { Icon as VoltoIcon, InlineForm } from '@plone/volto/components';\nimport briefcaseSVG from '@plone/volto/icons/briefcase.svg';\nimport checkSVG from '@plone/volto/icons/check.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport { Node } from 'slate';\nimport { getAllBlocksAndSlateFields } from '@eeacms/volto-slate-footnote/editor/utils';\nimport config from '@plone/volto/registry';\nconst FootnoteEditor = props => {\n  const {\n    editor,\n    schemaProvider,\n    pluginId,\n    getActiveElement,\n    isActiveElement,\n    insertElement,\n    unwrapElement,\n    hasValue,\n    onChangeValues\n  } = props;\n  const dispatch = useDispatch();\n  const pid = `${editor.uid}-${pluginId}`;\n  const [formData, setFormData] = React.useState({});\n  const active = getActiveElement(editor);\n  const initialFormData = useSelector(state => {\n    var _state$content;\n    return (state === null || state === void 0 ? void 0 : (_state$content = state.content) === null || _state$content === void 0 ? void 0 : _state$content.data) || {};\n  });\n  if (!active) {\n    /* eslint no-console: 0 */\n    console.error('Active element not found, this will crash');\n  }\n  const [elementNode] = active;\n  const isElement = isActiveElement(editor);\n  const blockProps = editor !== null && editor !== void 0 && editor.getBlockProps ? editor.getBlockProps() : {};\n  const metadata = blockProps.metadata || blockProps.properties || {};\n  const metadataBlocks = getAllBlocksAndSlateFields(metadata);\n  const storeBlocks = getAllBlocksAndSlateFields(initialFormData);\n  const uniqueFootnoteBlocks = [];\n  const flatAllBlocks = _isEmpty(metadata) ? storeBlocks : metadataBlocks;\n  /**\n   * Will add only the items that are unique by text\n   * @param {Object[]} uniqueFootnoteBlocks\n   * @param {Object} itemToManage\n   */\n  const manageAddBlockToUniqueBlocks = (uniqueFootnoteBlocks, itemToManage) => {\n    if (!uniqueFootnoteBlocks.find(item => item.title === itemToManage.footnote)) {\n      uniqueFootnoteBlocks.push(_objectSpread(_objectSpread({}, itemToManage), {}, {\n        title: itemToManage.footnote || itemToManage.value,\n        label: itemToManage.footnote || itemToManage.value,\n        value: itemToManage.footnote || itemToManage.value\n      }));\n    }\n  };\n  // make a list of filtered footnotes that have unique title\n  // to be used as choices for the multi search widget\n  // add label and value for the multi search widget\n  // flatten blocks to add all extra in the list\n  flatAllBlocks.filter(b => b['@type'] in config.settings.blocksWithFootnotesSupport).forEach(element => {\n    const mapping = config.settings.blocksWithFootnotesSupport[element['@type']] || ['value'];\n    mapping.forEach(key => {\n      const value = element[key];\n      if (!value) return;\n      value.forEach(item => {\n        Array.from(Node.elements(item)).forEach(([block]) => {\n          block.children.forEach(node => {\n            if (node.data && node.type === 'footnote') {\n              manageAddBlockToUniqueBlocks(uniqueFootnoteBlocks, node.data);\n              (node.data.extra || []).forEach(ftitem => {\n                manageAddBlockToUniqueBlocks(uniqueFootnoteBlocks, ftitem);\n              });\n            }\n          });\n        });\n      });\n    });\n  });\n\n  // Update the form data based on the current element\n  const elRef = React.useRef(null);\n\n  // add label and value for the multi search widget to be able to show/filter current data\n  if (isElement && !_isEqual(elementNode, elRef.current)) {\n    elRef.current = elementNode;\n    setFormData({\n      footnote: _objectSpread(_objectSpread({}, elementNode.data), {}, {\n        label: elementNode.data.footnote,\n        value: elementNode.data.footnote\n      })\n    });\n  } else if (!isElement) {\n    elRef.current = null;\n  }\n  useEffect(() => {\n    if (isElement) {\n      elRef.current = elementNode;\n      setFormData({\n        footnote: _objectSpread(_objectSpread({}, elementNode.data), {}, {\n          label: elementNode.data.footnote,\n          value: elementNode.data.footnote\n        })\n      });\n    } else if (!isElement) {\n      elRef.current = null;\n    }\n  }, [isElement, elRef, elementNode]); // eslint-disable-line\n\n  const saveDataToEditor = React.useCallback(formData => {\n    if (hasValue(formData.footnote)) {\n      insertElement(editor, formData.footnote);\n    } else {\n      unwrapElement(editor);\n    }\n  }, [editor, insertElement, unwrapElement, hasValue]);\n  const checkForCancel = () => {\n    if (!hasValue(elementNode.data)) {\n      unwrapElement(editor);\n    }\n  };\n  const SchemaProvider = schemaProvider;\n  return __jsx(SchemaProvider, _extends({}, props, {\n    data: formData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 5\n    }\n  }), schema => {\n    const schemaWithUpdatedChoices = _objectSpread(_objectSpread({}, schema), {}, {\n      properties: _objectSpread(_objectSpread({}, schema.properties), {}, {\n        footnote: _objectSpread(_objectSpread({}, schema.properties.footnote), {}, {\n          choices: uniqueFootnoteBlocks\n        })\n      })\n    });\n    return __jsx(InlineForm, {\n      schema: schemaWithUpdatedChoices,\n      title: schema.title,\n      icon: __jsx(VoltoIcon, {\n        size: \"24px\",\n        name: briefcaseSVG,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 19\n        }\n      }),\n      onChangeField: value => {\n        if (!onChangeValues) {\n          return setFormData(value);\n        }\n        return onChangeValues('footnote', value, formData, setFormData);\n      },\n      formData: formData,\n      dataBoss: formData,\n      source: uniqueFootnoteBlocks,\n      headerActions: __jsx(React.Fragment, null, __jsx(\"button\", {\n        onClick: () => {\n          saveDataToEditor(formData);\n          dispatch(setPluginOptions(pid, {\n            show_sidebar_editor: false\n          }));\n          ReactEditor.focus(editor);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 17\n        }\n      }, __jsx(VoltoIcon, {\n        size: \"24px\",\n        name: checkSVG,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 19\n        }\n      })), __jsx(\"button\", {\n        onClick: () => {\n          checkForCancel();\n          dispatch(setPluginOptions(pid, {\n            show_sidebar_editor: false\n          }));\n          setFormData({});\n          ReactEditor.focus(editor);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 17\n        }\n      }, __jsx(VoltoIcon, {\n        size: \"24px\",\n        name: clearSVG,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 19\n        }\n      }))),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }\n    });\n  });\n};\nexport default FootnoteEditor;","map":{"version":3,"names":["React","useEffect","useDispatch","useSelector","ReactEditor","setPluginOptions","Icon","VoltoIcon","InlineForm","briefcaseSVG","checkSVG","clearSVG","Node","getAllBlocksAndSlateFields","config","FootnoteEditor","props","editor","schemaProvider","pluginId","getActiveElement","isActiveElement","insertElement","unwrapElement","hasValue","onChangeValues","dispatch","pid","uid","formData","setFormData","useState","active","initialFormData","state","content","data","console","error","elementNode","isElement","blockProps","getBlockProps","metadata","properties","metadataBlocks","storeBlocks","uniqueFootnoteBlocks","flatAllBlocks","manageAddBlockToUniqueBlocks","itemToManage","find","item","title","footnote","push","value","label","filter","b","settings","blocksWithFootnotesSupport","forEach","element","mapping","key","Array","from","elements","block","children","node","type","extra","ftitem","elRef","useRef","current","saveDataToEditor","useCallback","checkForCancel","SchemaProvider","schema","schemaWithUpdatedChoices","choices","show_sidebar_editor","focus"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-slate-footnote/src/editor/FootnoteEditor.jsx"],"sourcesContent":["import { isEqual, isEmpty } from 'lodash';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ReactEditor } from 'slate-react';\nimport { setPluginOptions } from '@plone/volto-slate/actions';\nimport { Icon as VoltoIcon, InlineForm } from '@plone/volto/components';\nimport briefcaseSVG from '@plone/volto/icons/briefcase.svg';\nimport checkSVG from '@plone/volto/icons/check.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport { Node } from 'slate';\nimport { getAllBlocksAndSlateFields } from '@eeacms/volto-slate-footnote/editor/utils';\nimport config from '@plone/volto/registry';\n\nconst FootnoteEditor = (props) => {\n  const {\n    editor,\n    schemaProvider,\n    pluginId,\n    getActiveElement,\n    isActiveElement,\n    insertElement,\n    unwrapElement,\n    hasValue,\n    onChangeValues,\n  } = props;\n  const dispatch = useDispatch();\n  const pid = `${editor.uid}-${pluginId}`;\n  const [formData, setFormData] = React.useState({});\n  const active = getActiveElement(editor);\n  const initialFormData = useSelector((state) => state?.content?.data || {});\n\n  if (!active) {\n    /* eslint no-console: 0 */\n    console.error('Active element not found, this will crash');\n  }\n  const [elementNode] = active;\n  const isElement = isActiveElement(editor);\n\n  const blockProps = editor?.getBlockProps ? editor.getBlockProps() : {};\n  const metadata = blockProps.metadata || blockProps.properties || {};\n  const metadataBlocks = getAllBlocksAndSlateFields(metadata);\n  const storeBlocks = getAllBlocksAndSlateFields(initialFormData);\n  const uniqueFootnoteBlocks = [];\n\n  const flatAllBlocks = isEmpty(metadata) ? storeBlocks : metadataBlocks;\n  /**\n   * Will add only the items that are unique by text\n   * @param {Object[]} uniqueFootnoteBlocks\n   * @param {Object} itemToManage\n   */\n  const manageAddBlockToUniqueBlocks = (uniqueFootnoteBlocks, itemToManage) => {\n    if (\n      !uniqueFootnoteBlocks.find((item) => item.title === itemToManage.footnote)\n    ) {\n      uniqueFootnoteBlocks.push({\n        ...itemToManage,\n        title: itemToManage.footnote || itemToManage.value,\n        label: itemToManage.footnote || itemToManage.value,\n        value: itemToManage.footnote || itemToManage.value,\n      });\n    }\n  };\n  // make a list of filtered footnotes that have unique title\n  // to be used as choices for the multi search widget\n  // add label and value for the multi search widget\n  // flatten blocks to add all extra in the list\n  flatAllBlocks\n    .filter((b) => b['@type'] in config.settings.blocksWithFootnotesSupport)\n    .forEach((element) => {\n      const mapping = config.settings.blocksWithFootnotesSupport[\n        element['@type']\n      ] || ['value'];\n\n      mapping.forEach((key) => {\n        const value = element[key];\n        if (!value) return;\n\n        value.forEach((item) => {\n          Array.from(Node.elements(item)).forEach(([block]) => {\n            block.children.forEach((node) => {\n              if (node.data && node.type === 'footnote') {\n                manageAddBlockToUniqueBlocks(uniqueFootnoteBlocks, node.data);\n                (node.data.extra || []).forEach((ftitem) => {\n                  manageAddBlockToUniqueBlocks(uniqueFootnoteBlocks, ftitem);\n                });\n              }\n            });\n          });\n        });\n      });\n    });\n\n  // Update the form data based on the current element\n  const elRef = React.useRef(null);\n\n  // add label and value for the multi search widget to be able to show/filter current data\n  if (isElement && !isEqual(elementNode, elRef.current)) {\n    elRef.current = elementNode;\n    setFormData({\n      footnote: {\n        ...elementNode.data,\n        label: elementNode.data.footnote,\n        value: elementNode.data.footnote,\n      },\n    });\n  } else if (!isElement) {\n    elRef.current = null;\n  }\n\n  useEffect(() => {\n    if (isElement) {\n      elRef.current = elementNode;\n      setFormData({\n        footnote: {\n          ...elementNode.data,\n          label: elementNode.data.footnote,\n          value: elementNode.data.footnote,\n        },\n      });\n    } else if (!isElement) {\n      elRef.current = null;\n    }\n  }, [isElement, elRef, elementNode]); // eslint-disable-line\n\n  const saveDataToEditor = React.useCallback(\n    (formData) => {\n      if (hasValue(formData.footnote)) {\n        insertElement(editor, formData.footnote);\n      } else {\n        unwrapElement(editor);\n      }\n    },\n    [editor, insertElement, unwrapElement, hasValue],\n  );\n\n  const checkForCancel = () => {\n    if (!hasValue(elementNode.data)) {\n      unwrapElement(editor);\n    }\n  };\n\n  const SchemaProvider = schemaProvider;\n  return (\n    <SchemaProvider {...props} data={formData}>\n      {(schema) => {\n        const schemaWithUpdatedChoices = {\n          ...schema,\n          properties: {\n            ...schema.properties,\n            footnote: {\n              ...schema.properties.footnote,\n              choices: uniqueFootnoteBlocks,\n            },\n          },\n        };\n\n        return (\n          <InlineForm\n            schema={schemaWithUpdatedChoices}\n            title={schema.title}\n            icon={<VoltoIcon size=\"24px\" name={briefcaseSVG} />}\n            onChangeField={(value) => {\n              if (!onChangeValues) {\n                return setFormData(value);\n              }\n              return onChangeValues('footnote', value, formData, setFormData);\n            }}\n            formData={formData}\n            dataBoss={formData}\n            source={uniqueFootnoteBlocks}\n            headerActions={\n              <>\n                <button\n                  onClick={() => {\n                    saveDataToEditor(formData);\n                    dispatch(\n                      setPluginOptions(pid, {\n                        show_sidebar_editor: false,\n                      }),\n                    );\n                    ReactEditor.focus(editor);\n                  }}\n                >\n                  <VoltoIcon size=\"24px\" name={checkSVG} />\n                </button>\n                <button\n                  onClick={() => {\n                    checkForCancel();\n                    dispatch(\n                      setPluginOptions(pid, {\n                        show_sidebar_editor: false,\n                      }),\n                    );\n                    setFormData({});\n                    ReactEditor.focus(editor);\n                  }}\n                >\n                  <VoltoIcon size=\"24px\" name={clearSVG} />\n                </button>\n              </>\n            }\n          />\n        );\n      }}\n    </SchemaProvider>\n  );\n};\n\nexport default FootnoteEditor;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}