{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport config from '@plone/volto/registry';\nconst reserved_option_names = ['tags', 'extras'];\nconst initSentry = libraries => {\n  const {\n    Sentry\n  } = libraries;\n  const {\n    settings\n  } = config;\n  let sentry_config = __SENTRY__;\n  if (__SENTRY__) {\n    if (!sentry_config) {\n      sentry_config = {};\n    }\n    sentry_config.SENTRY_DSN = __SENTRY__.SENTRY_DSN;\n    sentry_config.SENTRY_CONFIG = __SENTRY__.SENTRY_CONFIG;\n  }\n  if (__SERVER__) {\n    if (process.env.RAZZLE_SENTRY_DSN) {\n      if (!sentry_config) {\n        sentry_config = {};\n      }\n      sentry_config.SENTRY_DSN = process.env.RAZZLE_SENTRY_DSN;\n    }\n    if (sentry_config) {\n      if (process.env.RAZZLE_SENTRY_BACKEND_CONFIG) {\n        sentry_config.SENTRY_CONFIG = JSON.parse(process.env.RAZZLE_SENTRY_BACKEND_CONFIG);\n      }\n      if (process.env.RAZZLE_SENTRY_RELEASE) {\n        if (!sentry_config.SENTRY_CONFIG) {\n          sentry_config.SENTRY_CONFIG = {};\n        }\n        sentry_config.SENTRY_CONFIG.release = process.env.RAZZLE_SENTRY_RELEASE;\n      }\n    }\n  }\n  if (__CLIENT__) {\n    var _window, _window$env;\n    if ((_window = window) !== null && _window !== void 0 && (_window$env = _window.env) !== null && _window$env !== void 0 && _window$env.RAZZLE_SENTRY_DSN) {\n      if (!sentry_config) {\n        sentry_config = {};\n      }\n      sentry_config.SENTRY_DSN = window.env.RAZZLE_SENTRY_DSN;\n    }\n    if (sentry_config) {\n      var _window2, _window2$env, _window3, _window3$env;\n      if ((_window2 = window) !== null && _window2 !== void 0 && (_window2$env = _window2.env) !== null && _window2$env !== void 0 && _window2$env.RAZZLE_SENTRY_FRONTEND_CONFIG) {\n        sentry_config.SENTRY_CONFIG = JSON.parse(window.env.RAZZLE_SENTRY_FRONTEND_CONFIG);\n      }\n      if ((_window3 = window) !== null && _window3 !== void 0 && (_window3$env = _window3.env) !== null && _window3$env !== void 0 && _window3$env.RAZZLE_SENTRY_RELEASE) {\n        if (!sentry_config.SENTRY_CONFIG) {\n          sentry_config.SENTRY_CONFIG = {};\n        }\n        sentry_config.SENTRY_CONFIG.release = window.env.RAZZLE_SENTRY_RELEASE;\n      }\n    }\n  }\n  const sentryOptions = settings.sentryOptions ? settings.sentryOptions(libraries) : {};\n  if (sentry_config || sentryOptions.dsn) {\n    var _sentry_config, _sentry_config2, _sentry_config3;\n    let sentry_options = _objectSpread({}, sentryOptions);\n    if ((_sentry_config = sentry_config) !== null && _sentry_config !== void 0 && _sentry_config.SENTRY_DSN) {\n      sentry_options.dsn = sentry_config.SENTRY_DSN;\n    }\n    if (((_sentry_config2 = sentry_config) === null || _sentry_config2 === void 0 ? void 0 : _sentry_config2.SENTRY_CONFIG) !== undefined) {\n      const options = Object.keys(sentry_config.SENTRY_CONFIG);\n      options.forEach(field => {\n        if (!reserved_option_names.includes(field)) {\n          sentry_options[field] = sentry_config.SENTRY_CONFIG[field];\n        }\n      });\n    }\n    Sentry.init(sentry_options);\n    if (sentry_options !== null && sentry_options !== void 0 && sentry_options.tags) {\n      Sentry.setTags(sentry_options.tags);\n    }\n    if (sentry_options !== null && sentry_options !== void 0 && sentry_options.extras) {\n      Sentry.setExtras(sentry_options.extras);\n    }\n    if (((_sentry_config3 = sentry_config) === null || _sentry_config3 === void 0 ? void 0 : _sentry_config3.SENTRY_CONFIG) !== undefined) {\n      var _sentry_config4, _sentry_config4$SENTR, _sentry_config5, _sentry_config5$SENTR;\n      if (((_sentry_config4 = sentry_config) === null || _sentry_config4 === void 0 ? void 0 : (_sentry_config4$SENTR = _sentry_config4.SENTRY_CONFIG) === null || _sentry_config4$SENTR === void 0 ? void 0 : _sentry_config4$SENTR.tags) !== undefined) {\n        Sentry.setTags(sentry_config.SENTRY_CONFIG.tags);\n      }\n      if (((_sentry_config5 = sentry_config) === null || _sentry_config5 === void 0 ? void 0 : (_sentry_config5$SENTR = _sentry_config5.SENTRY_CONFIG) === null || _sentry_config5$SENTR === void 0 ? void 0 : _sentry_config5$SENTR.extras) !== undefined) {\n        Sentry.setExtras(sentry_config.SENTRY_CONFIG.extras);\n      }\n    }\n  }\n};\nexport default initSentry;","map":{"version":3,"names":["config","reserved_option_names","initSentry","libraries","Sentry","settings","sentry_config","__SENTRY__","SENTRY_DSN","SENTRY_CONFIG","__SERVER__","process","env","RAZZLE_SENTRY_DSN","RAZZLE_SENTRY_BACKEND_CONFIG","JSON","parse","RAZZLE_SENTRY_RELEASE","release","__CLIENT__","window","RAZZLE_SENTRY_FRONTEND_CONFIG","sentryOptions","dsn","sentry_options","undefined","options","Object","keys","forEach","field","includes","init","tags","setTags","extras","setExtras"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/sentry.js"],"sourcesContent":["import config from '@plone/volto/registry';\n\nconst reserved_option_names = ['tags', 'extras'];\n\nconst initSentry = (libraries) => {\n  const { Sentry } = libraries;\n  const { settings } = config;\n  let sentry_config = __SENTRY__;\n\n  if (__SENTRY__) {\n    if (!sentry_config) {\n      sentry_config = {};\n    }\n    sentry_config.SENTRY_DSN = __SENTRY__.SENTRY_DSN;\n    sentry_config.SENTRY_CONFIG = __SENTRY__.SENTRY_CONFIG;\n  }\n\n  if (__SERVER__) {\n    if (process.env.RAZZLE_SENTRY_DSN) {\n      if (!sentry_config) {\n        sentry_config = {};\n      }\n      sentry_config.SENTRY_DSN = process.env.RAZZLE_SENTRY_DSN;\n    }\n    if (sentry_config) {\n      if (process.env.RAZZLE_SENTRY_BACKEND_CONFIG) {\n        sentry_config.SENTRY_CONFIG = JSON.parse(\n          process.env.RAZZLE_SENTRY_BACKEND_CONFIG,\n        );\n      }\n      if (process.env.RAZZLE_SENTRY_RELEASE) {\n        if (!sentry_config.SENTRY_CONFIG) {\n          sentry_config.SENTRY_CONFIG = {};\n        }\n        sentry_config.SENTRY_CONFIG.release = process.env.RAZZLE_SENTRY_RELEASE;\n      }\n    }\n  }\n\n  if (__CLIENT__) {\n    if (window?.env?.RAZZLE_SENTRY_DSN) {\n      if (!sentry_config) {\n        sentry_config = {};\n      }\n      sentry_config.SENTRY_DSN = window.env.RAZZLE_SENTRY_DSN;\n    }\n    if (sentry_config) {\n      if (window?.env?.RAZZLE_SENTRY_FRONTEND_CONFIG) {\n        sentry_config.SENTRY_CONFIG = JSON.parse(\n          window.env.RAZZLE_SENTRY_FRONTEND_CONFIG,\n        );\n      }\n      if (window?.env?.RAZZLE_SENTRY_RELEASE) {\n        if (!sentry_config.SENTRY_CONFIG) {\n          sentry_config.SENTRY_CONFIG = {};\n        }\n        sentry_config.SENTRY_CONFIG.release = window.env.RAZZLE_SENTRY_RELEASE;\n      }\n    }\n  }\n\n  const sentryOptions = settings.sentryOptions\n    ? settings.sentryOptions(libraries)\n    : {};\n\n  if (sentry_config || sentryOptions.dsn) {\n    let sentry_options = {\n      ...sentryOptions,\n    };\n    if (sentry_config?.SENTRY_DSN) {\n      sentry_options.dsn = sentry_config.SENTRY_DSN;\n    }\n    if (sentry_config?.SENTRY_CONFIG !== undefined) {\n      const options = Object.keys(sentry_config.SENTRY_CONFIG);\n      options.forEach((field) => {\n        if (!reserved_option_names.includes(field)) {\n          sentry_options[field] = sentry_config.SENTRY_CONFIG[field];\n        }\n      });\n    }\n    Sentry.init(sentry_options);\n    if (sentry_options?.tags) {\n      Sentry.setTags(sentry_options.tags);\n    }\n    if (sentry_options?.extras) {\n      Sentry.setExtras(sentry_options.extras);\n    }\n\n    if (sentry_config?.SENTRY_CONFIG !== undefined) {\n      if (sentry_config?.SENTRY_CONFIG?.tags !== undefined) {\n        Sentry.setTags(sentry_config.SENTRY_CONFIG.tags);\n      }\n      if (sentry_config?.SENTRY_CONFIG?.extras !== undefined) {\n        Sentry.setExtras(sentry_config.SENTRY_CONFIG.extras);\n      }\n    }\n  }\n};\n\nexport default initSentry;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}