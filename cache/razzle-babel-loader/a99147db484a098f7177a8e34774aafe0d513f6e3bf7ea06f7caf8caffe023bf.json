{"ast":null,"code":"import _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toConsumableArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _extends from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/extends.js\";\nimport _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _without from \"lodash/without\";\nimport _omit from \"lodash/omit\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-columns-block/src/Widgets/ColumnsWidget.jsx\",\n  _this = this;\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { v4 as uuid } from 'uuid';\nimport move from 'lodash-move';\nimport { Icon, FormFieldWrapper } from '@plone/volto/components';\nimport { DragDropList } from '@plone/volto/components';\nimport { emptyBlocksForm } from '@plone/volto/helpers';\nimport dragSVG from '@plone/volto/icons/drag.svg';\nimport trashSVG from '@plone/volto/icons/delete.svg';\nimport plusSVG from '@plone/volto/icons/circle-plus.svg';\nexport function moveColumn(formData, source, destination) {\n  var _formData$blocks_layo;\n  return _objectSpread(_objectSpread({}, formData), {}, {\n    blocks_layout: {\n      items: move((_formData$blocks_layo = formData.blocks_layout) === null || _formData$blocks_layo === void 0 ? void 0 : _formData$blocks_layo.items, source, destination)\n    }\n  });\n}\nvar empty = function empty() {\n  return [uuid(), emptyBlocksForm()];\n};\nvar ColumnsWidget = function ColumnsWidget(props) {\n  var _value$blocks_layout, _value$blocks_layout2, _value$blocks_layout3;\n  var _props$value = props.value,\n    value = _props$value === void 0 ? {} : _props$value,\n    id = props.id,\n    onChange = props.onChange,\n    _props$maxSize = props.maxSize,\n    maxSize = _props$maxSize === void 0 ? 4 : _props$maxSize;\n  var _value$blocks = value.blocks,\n    blocks = _value$blocks === void 0 ? {} : _value$blocks;\n  var columnsList = (((_value$blocks_layout = value.blocks_layout) === null || _value$blocks_layout === void 0 ? void 0 : _value$blocks_layout.items) || []).map(function (id) {\n    return [id, blocks[id]];\n  });\n  var showAdd = ((_value$blocks_layout2 = value.blocks_layout) === null || _value$blocks_layout2 === void 0 ? void 0 : (_value$blocks_layout3 = _value$blocks_layout2.items) === null || _value$blocks_layout3 === void 0 ? void 0 : _value$blocks_layout3.length) < maxSize;\n  return __jsx(FormFieldWrapper, _extends({}, props, {\n    draggable: false,\n    className: \"drag-drop-list-widget\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 5\n    }\n  }), __jsx(\"div\", {\n    className: \"columns-area\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }\n  }, __jsx(DragDropList, {\n    childList: columnsList,\n    onMoveItem: function onMoveItem(result) {\n      var source = result.source,\n        destination = result.destination;\n      if (!destination) {\n        return;\n      }\n      var newFormData = moveColumn(value, source.index, destination.index);\n      onChange(id, newFormData);\n      return true;\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, function (dragProps) {\n    var _value$blocks_layout4, _value$blocks_layout5;\n    var childId = dragProps.childId,\n      index = dragProps.index,\n      draginfo = dragProps.draginfo;\n    return __jsx(\"div\", _extends({\n      ref: draginfo.innerRef\n    }, draginfo.draggableProps, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 15\n      }\n    }), __jsx(\"div\", {\n      style: {\n        position: 'relative'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }\n    }, __jsx(\"div\", _extends({\n      style: {\n        visibility: 'visible',\n        display: 'inline-block'\n      }\n    }, draginfo.dragHandleProps, {\n      className: \"drag handle wrapper\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 19\n      }\n    }), __jsx(Icon, {\n      name: dragSVG,\n      size: \"18px\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 21\n      }\n    })), __jsx(\"div\", {\n      className: \"column-area\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 19\n      }\n    }, __jsx(\"div\", {\n      className: \"label\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }\n    }, __jsx(FormattedMessage, {\n      id: \"Column\",\n      defaultMessage: \"Column\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 23\n      }\n    }), ' ', index + 1), ((_value$blocks_layout4 = value.blocks_layout) === null || _value$blocks_layout4 === void 0 ? void 0 : (_value$blocks_layout5 = _value$blocks_layout4.items) === null || _value$blocks_layout5 === void 0 ? void 0 : _value$blocks_layout5.length) > 1 ? __jsx(\"button\", {\n      onClick: function onClick() {\n        var _value$blocks_layout6;\n        var newFormData = _objectSpread(_objectSpread({}, value), {}, {\n          blocks: _omit(_objectSpread({}, value.blocks), [childId]),\n          blocks_layout: _objectSpread(_objectSpread({}, value.blocks_layout), {}, {\n            items: _without(_toConsumableArray((_value$blocks_layout6 = value.blocks_layout) === null || _value$blocks_layout6 === void 0 ? void 0 : _value$blocks_layout6.items), childId)\n          })\n        });\n        onChange(id, newFormData);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 23\n      }\n    }, __jsx(Icon, {\n      name: trashSVG,\n      size: \"18px\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 25\n      }\n    })) : '')));\n  }), showAdd ? __jsx(\"button\", {\n    onClick: function onClick() {\n      var _value$blocks_layout7;\n      var _empty = empty(),\n        _empty2 = _slicedToArray(_empty, 2),\n        newId = _empty2[0],\n        newData = _empty2[1];\n      onChange(id, _objectSpread(_objectSpread({}, value), {}, {\n        blocks: _objectSpread(_objectSpread({}, value.blocks), {}, _defineProperty({}, newId, newData)),\n        blocks_layout: _objectSpread(_objectSpread({}, value.blocks_layout), {}, {\n          items: [].concat(_toConsumableArray((_value$blocks_layout7 = value.blocks_layout) === null || _value$blocks_layout7 === void 0 ? void 0 : _value$blocks_layout7.items), [newId])\n        })\n      }));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  }, __jsx(Icon, {\n    name: plusSVG,\n    size: \"18px\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  })) : ''));\n};\n_c = ColumnsWidget;\nexport default ColumnsWidget;\nvar _c;\n$RefreshReg$(_c, \"ColumnsWidget\");","map":{"version":3,"names":["React","FormattedMessage","v4","uuid","move","Icon","FormFieldWrapper","DragDropList","emptyBlocksForm","dragSVG","trashSVG","plusSVG","moveColumn","formData","source","destination","blocks_layout","items","empty","ColumnsWidget","props","value","id","onChange","maxSize","blocks","columnsList","map","showAdd","length","result","newFormData","index","dragProps","childId","draginfo","innerRef","draggableProps","position","visibility","display","dragHandleProps","newId","newData"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-columns-block/src/Widgets/ColumnsWidget.jsx"],"sourcesContent":["import React from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport { v4 as uuid } from 'uuid';\nimport { omit, without } from 'lodash';\nimport move from 'lodash-move';\nimport { Icon, FormFieldWrapper } from '@plone/volto/components';\nimport { DragDropList } from '@plone/volto/components';\nimport { emptyBlocksForm } from '@plone/volto/helpers';\n\nimport dragSVG from '@plone/volto/icons/drag.svg';\nimport trashSVG from '@plone/volto/icons/delete.svg';\nimport plusSVG from '@plone/volto/icons/circle-plus.svg';\n\nexport function moveColumn(formData, source, destination) {\n  return {\n    ...formData,\n    blocks_layout: {\n      items: move(formData.blocks_layout?.items, source, destination),\n    },\n  };\n}\n\nconst empty = () => {\n  return [uuid(), emptyBlocksForm()];\n};\n\nconst ColumnsWidget = (props) => {\n  const { value = {}, id, onChange, maxSize = 4 } = props;\n  const { blocks = {} } = value;\n  const columnsList = (value.blocks_layout?.items || []).map((id) => [\n    id,\n    blocks[id],\n  ]);\n\n  const showAdd = value.blocks_layout?.items?.length < maxSize;\n  return (\n    <FormFieldWrapper\n      {...props}\n      draggable={false}\n      className=\"drag-drop-list-widget\"\n    >\n      <div className=\"columns-area\">\n        <DragDropList\n          childList={columnsList}\n          onMoveItem={(result) => {\n            const { source, destination } = result;\n            if (!destination) {\n              return;\n            }\n            const newFormData = moveColumn(\n              value,\n              source.index,\n              destination.index,\n            );\n            onChange(id, newFormData);\n            return true;\n          }}\n        >\n          {(dragProps) => {\n            const { childId, index, draginfo } = dragProps;\n            return (\n              <div ref={draginfo.innerRef} {...draginfo.draggableProps}>\n                <div style={{ position: 'relative' }}>\n                  <div\n                    style={{\n                      visibility: 'visible',\n                      display: 'inline-block',\n                    }}\n                    {...draginfo.dragHandleProps}\n                    className=\"drag handle wrapper\"\n                  >\n                    <Icon name={dragSVG} size=\"18px\" />\n                  </div>\n                  <div className=\"column-area\">\n                    <div className=\"label\">\n                      <FormattedMessage id=\"Column\" defaultMessage=\"Column\" />{' '}\n                      {index + 1}\n                    </div>\n                    {value.blocks_layout?.items?.length > 1 ? (\n                      <button\n                        onClick={() => {\n                          const newFormData = {\n                            ...value,\n                            blocks: omit({ ...value.blocks }, [childId]),\n                            blocks_layout: {\n                              ...value.blocks_layout,\n                              items: without(\n                                [...value.blocks_layout?.items],\n                                childId,\n                              ),\n                            },\n                          };\n                          onChange(id, newFormData);\n                        }}\n                      >\n                        <Icon name={trashSVG} size=\"18px\" />\n                      </button>\n                    ) : (\n                      ''\n                    )}\n                  </div>\n                </div>\n              </div>\n            );\n          }}\n        </DragDropList>\n        {showAdd ? (\n          <button\n            onClick={() => {\n              const [newId, newData] = empty();\n              onChange(id, {\n                ...value,\n                blocks: {\n                  ...value.blocks,\n                  [newId]: newData,\n                },\n                blocks_layout: {\n                  ...value.blocks_layout,\n                  items: [...value.blocks_layout?.items, newId],\n                },\n              });\n            }}\n          >\n            <Icon name={plusSVG} size=\"18px\" />\n          </button>\n        ) : (\n          ''\n        )}\n      </div>\n    </FormFieldWrapper>\n  );\n};\n\nexport default ColumnsWidget;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Column","defaultMessage":"Column"}]}},"sourceType":"module","externalDependencies":[]}