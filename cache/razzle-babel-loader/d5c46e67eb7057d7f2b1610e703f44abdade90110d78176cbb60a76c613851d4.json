{"ast":null,"code":"import _extends from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/extends.js\";\nimport _map from \"lodash/map\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-forests-theme/src/customizations/volto/components/theme/View/RenderBlocks.jsx\",\n  _this = this;\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { getBaseUrl, applyBlockDefaults } from '@plone/volto/helpers';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { getBlocksFieldname, getBlocksLayoutFieldname, hasBlocksData } from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\nimport StyleWrapper from '../../manage/Blocks/Block/StyleWrapper';\nvar messages = defineMessages({\n  unknownBlock: {\n    \"id\": \"Unknown Block\",\n    \"defaultMessage\": \"Unknown Block {block}\"\n  }\n});\nvar RenderBlocks = function RenderBlocks(props) {\n  var content = props.content,\n    intl = props.intl,\n    location = props.location,\n    metadata = props.metadata;\n  var blocksFieldname = getBlocksFieldname(content);\n  var blocksLayoutFieldname = getBlocksLayoutFieldname(content);\n  var blocksConfig = props.blocksConfig || config.blocks.blocksConfig;\n  var CustomTag = props.as || React.Fragment;\n  return hasBlocksData(content) ? __jsx(CustomTag, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, _map(content[blocksLayoutFieldname].items, function (block) {\n    var _blocksConfig$content, _content$blocksFieldn, _content$blocksFieldn2, _content$blocksFieldn3, _content$blocksFieldn4;\n    var Block = (_blocksConfig$content = blocksConfig[(_content$blocksFieldn = content[blocksFieldname]) === null || _content$blocksFieldn === void 0 ? void 0 : (_content$blocksFieldn2 = _content$blocksFieldn[block]) === null || _content$blocksFieldn2 === void 0 ? void 0 : _content$blocksFieldn2['@type']]) === null || _blocksConfig$content === void 0 ? void 0 : _blocksConfig$content.view;\n    var blockData = applyBlockDefaults({\n      data: content[blocksFieldname][block],\n      intl: intl,\n      metadata: metadata,\n      properties: content\n    });\n    return Block ? __jsx(StyleWrapper, _extends({\n      key: block\n    }, props, {\n      id: block,\n      data: blockData,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }\n    }), __jsx(Block, {\n      id: block,\n      metadata: metadata,\n      properties: content,\n      data: blockData,\n      path: getBaseUrl((location === null || location === void 0 ? void 0 : location.pathname) || ''),\n      blocksConfig: blocksConfig,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }\n    })) : __jsx(\"div\", {\n      key: block,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }\n    }, intl.formatMessage(messages.unknownBlock, {\n      block: (_content$blocksFieldn3 = content[blocksFieldname]) === null || _content$blocksFieldn3 === void 0 ? void 0 : (_content$blocksFieldn4 = _content$blocksFieldn3[block]) === null || _content$blocksFieldn4 === void 0 ? void 0 : _content$blocksFieldn4['@type']\n    }));\n  })) : '';\n};\n_c = RenderBlocks;\nexport default _c2 = injectIntl(RenderBlocks);\nvar _c, _c2;\n$RefreshReg$(_c, \"RenderBlocks\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","getBaseUrl","applyBlockDefaults","defineMessages","injectIntl","getBlocksFieldname","getBlocksLayoutFieldname","hasBlocksData","config","StyleWrapper","messages","unknownBlock","RenderBlocks","props","content","intl","location","metadata","blocksFieldname","blocksLayoutFieldname","blocksConfig","blocks","CustomTag","as","Fragment","items","block","Block","view","blockData","data","properties","pathname","formatMessage"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-forests-theme/src/customizations/volto/components/theme/View/RenderBlocks.jsx"],"sourcesContent":["import React from 'react';\nimport { getBaseUrl, applyBlockDefaults } from '@plone/volto/helpers';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { map } from 'lodash';\nimport {\n  getBlocksFieldname,\n  getBlocksLayoutFieldname,\n  hasBlocksData,\n} from '@plone/volto/helpers';\nimport config from '@plone/volto/registry';\nimport StyleWrapper from '../../manage/Blocks/Block/StyleWrapper';\n\nconst messages = defineMessages({\n  unknownBlock: {\n    id: 'Unknown Block',\n    defaultMessage: 'Unknown Block {block}',\n  },\n});\n\nconst RenderBlocks = (props) => {\n  const { content, intl, location, metadata } = props;\n  const blocksFieldname = getBlocksFieldname(content);\n  const blocksLayoutFieldname = getBlocksLayoutFieldname(content);\n  const blocksConfig = props.blocksConfig || config.blocks.blocksConfig;\n  const CustomTag = props.as || React.Fragment;\n\n  return hasBlocksData(content) ? (\n    <CustomTag>\n      {map(content[blocksLayoutFieldname].items, (block) => {\n        const Block =\n          blocksConfig[content[blocksFieldname]?.[block]?.['@type']]?.view;\n\n        const blockData = applyBlockDefaults({\n          data: content[blocksFieldname][block],\n          intl,\n          metadata,\n          properties: content,\n        });\n\n        return Block ? (\n          <StyleWrapper key={block} {...props} id={block} data={blockData}>\n            <Block\n              id={block}\n              metadata={metadata}\n              properties={content}\n              data={blockData}\n              path={getBaseUrl(location?.pathname || '')}\n              blocksConfig={blocksConfig}\n            />\n          </StyleWrapper>\n        ) : (\n          <div key={block}>\n            {intl.formatMessage(messages.unknownBlock, {\n              block: content[blocksFieldname]?.[block]?.['@type'],\n            })}\n          </div>\n        );\n      })}\n    </CustomTag>\n  ) : (\n    ''\n  );\n};\n\nexport default injectIntl(RenderBlocks);\n"],"mappings":";;;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,EAAEC,kBAAkB,QAAQ,sBAAsB;AACrE,SAASC,cAAc,EAAEC,UAAU,QAAQ,YAAY;AAEvD,SACEC,kBAAkB,EAClBC,wBAAwB,EACxBC,aAAa,QACR,sBAAsB;AAC7B,OAAOC,MAAM,MAAM,uBAAuB;AAC1C,OAAOC,YAAY,MAAM,wCAAwC;AAEjE,IAAMC,QAAQ,GAAGP,cAAc,CAAC;EAC9BQ,YAAY;IAAA;IAAA;EAAA;AAId,CAAC,CAAC;AAEF,IAAMC,YAAY,GAAG,SAAfA,YAAY,CAAIC,KAAK,EAAK;EAC9B,IAAQC,OAAO,GAA+BD,KAAK,CAA3CC,OAAO;IAAEC,IAAI,GAAyBF,KAAK,CAAlCE,IAAI;IAAEC,QAAQ,GAAeH,KAAK,CAA5BG,QAAQ;IAAEC,QAAQ,GAAKJ,KAAK,CAAlBI,QAAQ;EACzC,IAAMC,eAAe,GAAGb,kBAAkB,CAACS,OAAO,CAAC;EACnD,IAAMK,qBAAqB,GAAGb,wBAAwB,CAACQ,OAAO,CAAC;EAC/D,IAAMM,YAAY,GAAGP,KAAK,CAACO,YAAY,IAAIZ,MAAM,CAACa,MAAM,CAACD,YAAY;EACrE,IAAME,SAAS,GAAGT,KAAK,CAACU,EAAE,IAAIvB,KAAK,CAACwB,QAAQ;EAE5C,OAAOjB,aAAa,CAACO,OAAO,CAAC,GAC3B,MAAC,SAAS;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GACP,KAAIA,OAAO,CAACK,qBAAqB,CAAC,CAACM,KAAK,EAAE,UAACC,KAAK,EAAK;IAAA;IACpD,IAAMC,KAAK,4BACTP,YAAY,0BAACN,OAAO,CAACI,eAAe,CAAC,oFAAxB,sBAA2BQ,KAAK,CAAC,2DAAjC,uBAAoC,OAAO,CAAC,CAAC,0DAA1D,sBAA4DE,IAAI;IAElE,IAAMC,SAAS,GAAG3B,kBAAkB,CAAC;MACnC4B,IAAI,EAAEhB,OAAO,CAACI,eAAe,CAAC,CAACQ,KAAK,CAAC;MACrCX,IAAI,EAAJA,IAAI;MACJE,QAAQ,EAARA,QAAQ;MACRc,UAAU,EAAEjB;IACd,CAAC,CAAC;IAEF,OAAOa,KAAK,GACV,MAAC,YAAY;MAAC,GAAG,EAAED;IAAM,GAAKb,KAAK;MAAE,EAAE,EAAEa,KAAM;MAAC,IAAI,EAAEG,SAAU;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,IAC9D,MAAC,KAAK;MACJ,EAAE,EAAEH,KAAM;MACV,QAAQ,EAAET,QAAS;MACnB,UAAU,EAAEH,OAAQ;MACpB,IAAI,EAAEe,SAAU;MAChB,IAAI,EAAE5B,UAAU,CAAC,CAAAe,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEgB,QAAQ,KAAI,EAAE,CAAE;MAC3C,YAAY,EAAEZ,YAAa;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAC3B,CACW,GAEf;MAAK,GAAG,EAAEM,KAAM;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACbX,IAAI,CAACkB,aAAa,CAACvB,QAAQ,CAACC,YAAY,EAAE;MACzCe,KAAK,4BAAEZ,OAAO,CAACI,eAAe,CAAC,qFAAxB,uBAA2BQ,KAAK,CAAC,2DAAjC,uBAAoC,OAAO;IACpD,CAAC,CAAC,CAEL;EACH,CAAC,CAAC,CACQ,GAEZ,EACD;AACH,CAAC;AAAC,KA3CId,YAAY;AA6ClB,qBAAeR,UAAU,CAACQ,YAAY,CAAC;AAAC;AAAA;AAAA"},"metadata":{"react-intl":{"messages":[{"id":"Unknown Block","defaultMessage":"Unknown Block {block}"}]}},"sourceType":"module","externalDependencies":[]}