{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nimport StagingBanner from './StagingBanner';\nimport * as addonReducers from './reducers';\nimport infoSVG from '@plone/volto/icons/info.svg';\nimport closeSVG from '@plone/volto/icons/circle-dismiss.svg';\nconst applyConfig = config => {\n  const appExtras = config.settings.appExtras || [];\n  config.settings.stagingBanner = _objectSpread({\n    parentNodeSelector: '.skiplinks-wrapper',\n    bannerIcon: infoSVG,\n    bannerIconColor: 'black',\n    bannerCloseIcon: closeSVG,\n    bannerCloseIconColor: 'black'\n  }, config.settings.stagingBanner || {});\n  config.settings.appExtras = [...appExtras, {\n    match: '',\n    component: StagingBanner\n  }];\n  config.addonReducers = _objectSpread(_objectSpread({}, config.addonReducers), addonReducers);\n  return config;\n};\nexport default applyConfig;","map":{"version":3,"names":["StagingBanner","addonReducers","infoSVG","closeSVG","applyConfig","config","appExtras","settings","stagingBanner","parentNodeSelector","bannerIcon","bannerIconColor","bannerCloseIcon","bannerCloseIconColor","match","component"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-banner/src/index.js"],"sourcesContent":["import StagingBanner from './StagingBanner';\nimport * as addonReducers from './reducers';\n\nimport infoSVG from '@plone/volto/icons/info.svg';\nimport closeSVG from '@plone/volto/icons/circle-dismiss.svg';\n\nconst applyConfig = (config) => {\n  const appExtras = config.settings.appExtras || [];\n\n  config.settings.stagingBanner = {\n    parentNodeSelector: '.skiplinks-wrapper',\n    bannerIcon: infoSVG,\n    bannerIconColor: 'black',\n    bannerCloseIcon: closeSVG,\n    bannerCloseIconColor: 'black',\n    ...(config.settings.stagingBanner || {}),\n  };\n\n  config.settings.appExtras = [\n    ...appExtras,\n\n    {\n      match: '',\n      component: StagingBanner,\n    },\n  ];\n\n  config.addonReducers = {\n    ...config.addonReducers,\n    ...addonReducers,\n  };\n\n  return config;\n};\n\nexport default applyConfig;\n"],"mappings":";;;AAAA,OAAOA,aAAa,MAAM,iBAAiB;AAC3C,OAAO,KAAKC,aAAa,MAAM,YAAY;AAE3C,OAAOC,OAAO,MAAM,6BAA6B;AACjD,OAAOC,QAAQ,MAAM,uCAAuC;AAE5D,MAAMC,WAAW,GAAIC,MAAM,IAAK;EAC9B,MAAMC,SAAS,GAAGD,MAAM,CAACE,QAAQ,CAACD,SAAS,IAAI,EAAE;EAEjDD,MAAM,CAACE,QAAQ,CAACC,aAAa;IAC3BC,kBAAkB,EAAE,oBAAoB;IACxCC,UAAU,EAAER,OAAO;IACnBS,eAAe,EAAE,OAAO;IACxBC,eAAe,EAAET,QAAQ;IACzBU,oBAAoB,EAAE;EAAO,GACzBR,MAAM,CAACE,QAAQ,CAACC,aAAa,IAAI,CAAC,CAAC,CACxC;EAEDH,MAAM,CAACE,QAAQ,CAACD,SAAS,GAAG,CAC1B,GAAGA,SAAS,EAEZ;IACEQ,KAAK,EAAE,EAAE;IACTC,SAAS,EAAEf;EACb,CAAC,CACF;EAEDK,MAAM,CAACJ,aAAa,mCACfI,MAAM,CAACJ,aAAa,GACpBA,aAAa,CACjB;EAED,OAAOI,MAAM;AACf,CAAC;AAED,eAAeD,WAAW"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}