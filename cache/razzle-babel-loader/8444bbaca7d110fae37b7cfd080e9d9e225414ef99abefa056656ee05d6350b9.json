{"ast":null,"code":"import _toConsumableArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport { Transforms, createEditor } from 'slate'; // , Transforms\nimport { withHistory } from 'slate-history';\nimport { withReact, ReactEditor } from 'slate-react';\nimport config from '@plone/volto/registry';\nexport function setEditorContent(editor, block) {\n  Transforms.removeNodes(editor, {\n    at: [0]\n  }); // TODO: at: [] needs rethinking\n  Transforms.insertNodes(editor, block);\n}\nexport function makeEditor() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _options$extensions = options.extensions,\n    extensions = _options$extensions === void 0 ? [] : _options$extensions;\n  var slate = config.settings.slate;\n  var defaultExtensions = slate.extensions;\n  var editor = withHistory(withReact(createEditor()));\n\n  // TODO: also look for MIME Types in the files case\n  editor.dataTransferFormatsOrder = ['application/x-slate-fragment', 'text/html', 'files', 'text/plain'];\n  editor.dataTransferHandlers = {};\n  var plugins = [].concat(_toConsumableArray(defaultExtensions), _toConsumableArray(extensions));\n  editor.isSelected = function () {\n    return ReactEditor.isFocused(editor);\n  };\n  return plugins.reduce(function (acc, extender) {\n    return extender(acc);\n  }, editor);\n}","map":{"version":3,"names":["Transforms","createEditor","withHistory","withReact","ReactEditor","config","setEditorContent","editor","block","removeNodes","at","insertNodes","makeEditor","options","extensions","slate","settings","defaultExtensions","dataTransferFormatsOrder","dataTransferHandlers","plugins","isSelected","isFocused","reduce","acc","extender"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-slate/src/utils/editor.js"],"sourcesContent":["import { Transforms, createEditor } from 'slate'; // , Transforms\nimport { withHistory } from 'slate-history';\nimport { withReact, ReactEditor } from 'slate-react';\n\nimport config from '@plone/volto/registry';\n\nexport function setEditorContent(editor, block) {\n  Transforms.removeNodes(editor, { at: [0] }); // TODO: at: [] needs rethinking\n  Transforms.insertNodes(editor, block);\n}\n\nexport function makeEditor(options = {}) {\n  const { extensions = [] } = options;\n  const { slate } = config.settings;\n  const defaultExtensions = slate.extensions;\n  const editor = withHistory(withReact(createEditor()));\n\n  // TODO: also look for MIME Types in the files case\n  editor.dataTransferFormatsOrder = [\n    'application/x-slate-fragment',\n    'text/html',\n    'files',\n    'text/plain',\n  ];\n  editor.dataTransferHandlers = {};\n\n  const plugins = [...defaultExtensions, ...extensions];\n  editor.isSelected = () => ReactEditor.isFocused(editor);\n\n  return plugins.reduce((acc, extender) => extender(acc), editor);\n}\n"],"mappings":";AAAA,SAASA,UAAU,EAAEC,YAAY,QAAQ,OAAO,CAAC,CAAC;AAClD,SAASC,WAAW,QAAQ,eAAe;AAC3C,SAASC,SAAS,EAAEC,WAAW,QAAQ,aAAa;AAEpD,OAAOC,MAAM,MAAM,uBAAuB;AAE1C,OAAO,SAASC,gBAAgB,CAACC,MAAM,EAAEC,KAAK,EAAE;EAC9CR,UAAU,CAACS,WAAW,CAACF,MAAM,EAAE;IAAEG,EAAE,EAAE,CAAC,CAAC;EAAE,CAAC,CAAC,CAAC,CAAC;EAC7CV,UAAU,CAACW,WAAW,CAACJ,MAAM,EAAEC,KAAK,CAAC;AACvC;AAEA,OAAO,SAASI,UAAU,GAAe;EAAA,IAAdC,OAAO,uEAAG,CAAC,CAAC;EACrC,0BAA4BA,OAAO,CAA3BC,UAAU;IAAVA,UAAU,oCAAG,EAAE;EACvB,IAAQC,KAAK,GAAKV,MAAM,CAACW,QAAQ,CAAzBD,KAAK;EACb,IAAME,iBAAiB,GAAGF,KAAK,CAACD,UAAU;EAC1C,IAAMP,MAAM,GAAGL,WAAW,CAACC,SAAS,CAACF,YAAY,EAAE,CAAC,CAAC;;EAErD;EACAM,MAAM,CAACW,wBAAwB,GAAG,CAChC,8BAA8B,EAC9B,WAAW,EACX,OAAO,EACP,YAAY,CACb;EACDX,MAAM,CAACY,oBAAoB,GAAG,CAAC,CAAC;EAEhC,IAAMC,OAAO,gCAAOH,iBAAiB,sBAAKH,UAAU,EAAC;EACrDP,MAAM,CAACc,UAAU,GAAG;IAAA,OAAMjB,WAAW,CAACkB,SAAS,CAACf,MAAM,CAAC;EAAA;EAEvD,OAAOa,OAAO,CAACG,MAAM,CAAC,UAACC,GAAG,EAAEC,QAAQ;IAAA,OAAKA,QAAQ,CAACD,GAAG,CAAC;EAAA,GAAEjB,MAAM,CAAC;AACjE"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}