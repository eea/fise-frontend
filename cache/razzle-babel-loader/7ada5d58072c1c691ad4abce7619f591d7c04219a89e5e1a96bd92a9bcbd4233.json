{"ast":null,"code":"import _toConsumableArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _remove from \"lodash/remove\";\nimport _map from \"lodash/map\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/packages/volto-slate/src/blocks/Table/TableBlockEdit.jsx\";\nvar __jsx = React.createElement;\n/**\n * Slate Table block editor.\n * @module volto-slate/blocks/Table/Edit\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Segment, Table, Form } from 'semantic-ui-react';\nimport { Portal } from 'react-portal';\nimport cx from 'classnames';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\nimport Cell from './Cell';\nimport { Field, Icon } from '@plone/volto/components';\nimport rowBeforeSVG from '@plone/volto/icons/row-before.svg';\nimport rowAfterSVG from '@plone/volto/icons/row-after.svg';\nimport colBeforeSVG from '@plone/volto/icons/column-before.svg';\nimport colAfterSVG from '@plone/volto/icons/column-after.svg';\nimport rowDeleteSVG from '@plone/volto/icons/row-delete.svg';\nimport colDeleteSVG from '@plone/volto/icons/column-delete.svg';\n\n/**\n * Returns a random string of 32 digits.\n */\nvar getId = function getId() {\n  return Math.floor(Math.random() * Math.pow(2, 24)).toString(32);\n};\n\n/**\n * @returns {object} An empty Slate paragraph (a simple Slate block node with\n * type set to \"p\" and a `Text` child with an empty string).\n */\nfunction getEmptyParagraph() {\n  return [{\n    type: 'p',\n    children: [{\n      text: ''\n    }]\n  }];\n}\n\n/**\n * @param {string} type The type of the newly created cell: either 'header' or\n * 'data', by default it is 'data'.\n * @returns {object} A new cell object containing three properties: `key`,\n * `type` and `value`.\n */\nvar emptyCell = function emptyCell() {\n  var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'data';\n  return {\n    key: getId(),\n    type: type,\n    value: getEmptyParagraph()\n  };\n};\n\n/**\n * @param {Array[object]} cells Array of placeholders, each of them will be\n * replaced in the newly created row with an empty cell. (Practically, just the\n * length of the array matters.)\n * @returns {object} A new row object containing the keys `key` and `cells`.\n */\nvar emptyRow = function emptyRow(cells) {\n  return {\n    key: getId(),\n    cells: _map(cells, function () {\n      return emptyCell();\n    })\n  };\n};\n\n/**\n * The initial value for the displayed table's data. The IDs of the rows and\n * cells are computed here only once, so each new table has the same IDs\n * initially, but this does not have bad consequences since the key has\n * relevance only in the context in which it is used.\n */\nvar initialTable = {\n  hideHeaders: false,\n  fixed: true,\n  compact: false,\n  basic: false,\n  celled: true,\n  inverted: false,\n  striped: false,\n  rows: [{\n    key: getId(),\n    cells: [{\n      key: getId(),\n      type: 'header',\n      value: getEmptyParagraph()\n    }, {\n      key: getId(),\n      type: 'header',\n      value: getEmptyParagraph()\n    }]\n  }, {\n    key: getId(),\n    cells: [{\n      key: getId(),\n      type: 'data',\n      value: getEmptyParagraph()\n    }, {\n      key: getId(),\n      type: 'data',\n      value: getEmptyParagraph()\n    }]\n  }]\n};\nvar messages = defineMessages({\n  insertRowBefore: {\n    \"id\": \"Insert row before\",\n    \"defaultMessage\": \"Insert row before\"\n  },\n  insertRowAfter: {\n    \"id\": \"Insert row after\",\n    \"defaultMessage\": \"Insert row after\"\n  },\n  deleteRow: {\n    \"id\": \"Delete row\",\n    \"defaultMessage\": \"Delete row\"\n  },\n  insertColBefore: {\n    \"id\": \"Insert col before\",\n    \"defaultMessage\": \"Insert col before\"\n  },\n  insertColAfter: {\n    \"id\": \"Insert col after\",\n    \"defaultMessage\": \"Insert col after\"\n  },\n  deleteCol: {\n    \"id\": \"Delete col\",\n    \"defaultMessage\": \"Delete col\"\n  },\n  hideHeaders: {\n    \"id\": \"Hide headers\",\n    \"defaultMessage\": \"Hide headers\"\n  },\n  sortable: {\n    \"id\": \"Make the table sortable\",\n    \"defaultMessage\": \"Make the table sortable\"\n  },\n  sortableDescription: {\n    \"id\": \"Visible only in view mode\",\n    \"defaultMessage\": \"Visible only in view mode\"\n  },\n  fixed: {\n    \"id\": \"Fixed width table cells\",\n    \"defaultMessage\": \"Fixed width table cells\"\n  },\n  compact: {\n    \"id\": \"Make the table compact\",\n    \"defaultMessage\": \"Make the table compact\"\n  },\n  basic: {\n    \"id\": \"Reduce complexity\",\n    \"defaultMessage\": \"Reduce complexity\"\n  },\n  celled: {\n    \"id\": \"Divide each row into separate cells\",\n    \"defaultMessage\": \"Divide each row into separate cells\"\n  },\n  inverted: {\n    \"id\": \"Table color inverted\",\n    \"defaultMessage\": \"Table color inverted\"\n  },\n  striped: {\n    \"id\": \"Stripe alternate rows with color\",\n    \"defaultMessage\": \"Stripe alternate rows with color\"\n  },\n  left: {\n    \"id\": \"Left\",\n    \"defaultMessage\": \"Left\"\n  },\n  center: {\n    \"id\": \"Center\",\n    \"defaultMessage\": \"Center\"\n  },\n  right: {\n    \"id\": \"Right\",\n    \"defaultMessage\": \"Right\"\n  },\n  bottom: {\n    \"id\": \"Bottom\",\n    \"defaultMessage\": \"Bottom\"\n  },\n  middle: {\n    \"id\": \"Middle\",\n    \"defaultMessage\": \"Middle\"\n  },\n  top: {\n    \"id\": \"Top\",\n    \"defaultMessage\": \"Top\"\n  }\n});\n\n/**\n * Edit component for the Slate Table block type in Volto.\n * @class Edit\n * @extends Component\n */\nvar Edit = /*#__PURE__*/function (_Component) {\n  _inherits(Edit, _Component);\n  var _super = _createSuper(Edit);\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  function Edit(props) {\n    var _this;\n    _classCallCheck(this, Edit);\n    _this = _super.call(this, props);\n    _this.state = {\n      headers: [],\n      rows: {},\n      selected: {\n        row: 0,\n        cell: 0\n      },\n      isClient: false\n    };\n    _this.onChange = _this.onChange.bind(_assertThisInitialized(_this));\n    _this.onSelectCell = _this.onSelectCell.bind(_assertThisInitialized(_this));\n    _this.onInsertRowBefore = _this.onInsertRowBefore.bind(_assertThisInitialized(_this));\n    _this.onInsertRowAfter = _this.onInsertRowAfter.bind(_assertThisInitialized(_this));\n    _this.onInsertColBefore = _this.onInsertColBefore.bind(_assertThisInitialized(_this));\n    _this.onInsertColAfter = _this.onInsertColAfter.bind(_assertThisInitialized(_this));\n    _this.onDeleteRow = _this.onDeleteRow.bind(_assertThisInitialized(_this));\n    _this.onDeleteCol = _this.onDeleteCol.bind(_assertThisInitialized(_this));\n    _this.onChangeCell = _this.onChangeCell.bind(_assertThisInitialized(_this));\n    _this.toggleCellType = _this.toggleCellType.bind(_assertThisInitialized(_this));\n    _this.toggleBool = _this.toggleBool.bind(_assertThisInitialized(_this));\n    _this.toggleHideHeaders = _this.toggleHideHeaders.bind(_assertThisInitialized(_this));\n    _this.toggleSortable = _this.toggleSortable.bind(_assertThisInitialized(_this));\n    _this.toggleFixed = _this.toggleFixed.bind(_assertThisInitialized(_this));\n    _this.toggleCompact = _this.toggleCompact.bind(_assertThisInitialized(_this));\n    _this.toggleBasic = _this.toggleBasic.bind(_assertThisInitialized(_this));\n    _this.toggleCelled = _this.toggleCelled.bind(_assertThisInitialized(_this));\n    _this.toggleInverted = _this.toggleInverted.bind(_assertThisInitialized(_this));\n    _this.toggleStriped = _this.toggleStriped.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  /**\n   * Component did mount lifecycle method\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  _createClass(Edit, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (!this.props.data.table) {\n        this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n          table: initialTable\n        }));\n      }\n      this.setState({\n        isClient: true\n      });\n    }\n\n    /**\n     * Component will receive props lifecycle method\n     * @method componentWillReceiveProps\n     * @param {Object} nextProps Next properties\n     * @returns {undefined}\n     */\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      if (!nextProps.data.table) {\n        this.props.onChangeBlock(nextProps.block, _objectSpread(_objectSpread({}, nextProps.data), {}, {\n          table: initialTable\n        }));\n      }\n    }\n\n    /**\n     * On change\n     * @method onChange\n     * @param {string} id Id of modified property.\n     * @param {any} value New value of modified property.\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onChange\",\n    value: function onChange(id, value) {\n      var table = this.props.data.table;\n      this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n        table: _objectSpread(_objectSpread({}, table), {}, _defineProperty({}, id, value))\n      }));\n    }\n\n    /**\n     * Select cell handler\n     * @method onSelectCell\n     * @param {Number} row Row index.\n     * @param {Number} cell Cell index.\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onSelectCell\",\n    value: function onSelectCell(row, cell) {\n      this.setState({\n        selected: {\n          row: row,\n          cell: cell\n        }\n      });\n    }\n\n    /**\n     * Change cell handler\n     * @param {Number} row Row index.\n     * @param {Number} cell Cell index.\n     * @param {Array} slateValue Value of the `SlateEditor` in the cell.\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onChangeCell\",\n    value: function onChangeCell(row, cell, slateValue) {\n      var table = JSON.parse(JSON.stringify(this.props.data.table));\n      table.rows[row].cells[cell] = _objectSpread(_objectSpread({}, table.rows[row].cells[cell]), {}, {\n        value: JSON.parse(JSON.stringify(slateValue))\n      });\n      this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n        table: table\n      }));\n    }\n\n    /**\n     * Toggle cell type (from header to data or reverse)\n     * @method toggleCellType\n     * @returns {undefined}\n     */\n  }, {\n    key: \"toggleCellType\",\n    value: function toggleCellType() {\n      var table = _objectSpread({}, this.props.data.table);\n      var type = table.rows[this.state.selected.row].cells[this.state.selected.cell].type;\n      table.rows[this.state.selected.row].cells[this.state.selected.cell].type = type === 'header' ? 'data' : 'header';\n      this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n        table: table\n      }));\n    }\n\n    /**\n     * Insert row before handler. Keeps the selected cell as selected after the\n     * operation is done.\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onInsertRowBefore\",\n    value: function onInsertRowBefore() {\n      var table = this.props.data.table;\n      this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n        table: _objectSpread(_objectSpread({}, table), {}, {\n          rows: [].concat(_toConsumableArray(table.rows.slice(0, this.state.selected.row)), [emptyRow(table.rows[0].cells)], _toConsumableArray(table.rows.slice(this.state.selected.row)))\n        })\n      }));\n      this.setState({\n        selected: {\n          row: this.state.selected.row + 1,\n          cell: this.state.selected.cell\n        }\n      });\n    }\n\n    /**\n     * Insert row after handler\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onInsertRowAfter\",\n    value: function onInsertRowAfter() {\n      var table = this.props.data.table;\n      this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n        table: _objectSpread(_objectSpread({}, table), {}, {\n          rows: [].concat(_toConsumableArray(table.rows.slice(0, this.state.selected.row + 1)), [emptyRow(table.rows[0].cells)], _toConsumableArray(table.rows.slice(this.state.selected.row + 1)))\n        })\n      }));\n    }\n\n    /**\n     * Insert column before handler. Keeps the selected cell as selected after the\n     * operation is done.\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onInsertColBefore\",\n    value: function onInsertColBefore() {\n      var _this2 = this;\n      var table = this.props.data.table;\n      this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n        table: _objectSpread(_objectSpread({}, table), {}, {\n          rows: _map(table.rows, function (row, index) {\n            return _objectSpread(_objectSpread({}, row), {}, {\n              cells: [].concat(_toConsumableArray(row.cells.slice(0, _this2.state.selected.cell)), [emptyCell(table.rows[index].cells[_this2.state.selected.cell].type)], _toConsumableArray(row.cells.slice(_this2.state.selected.cell)))\n            });\n          })\n        })\n      }));\n      this.setState({\n        selected: {\n          row: this.state.selected.row,\n          cell: this.state.selected.cell + 1\n        }\n      });\n    }\n\n    /**\n     * Insert column after handler\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onInsertColAfter\",\n    value: function onInsertColAfter() {\n      var _this3 = this;\n      var table = this.props.data.table;\n      this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n        table: _objectSpread(_objectSpread({}, table), {}, {\n          rows: _map(table.rows, function (row, index) {\n            return _objectSpread(_objectSpread({}, row), {}, {\n              cells: [].concat(_toConsumableArray(row.cells.slice(0, _this3.state.selected.cell + 1)), [emptyCell(table.rows[index].cells[_this3.state.selected.cell].type)], _toConsumableArray(row.cells.slice(_this3.state.selected.cell + 1)))\n            });\n          })\n        })\n      }));\n    }\n\n    /**\n     * Delete column handler. Changes the selected cell if the last table column\n     * is selected.\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onDeleteCol\",\n    value: function onDeleteCol() {\n      var _this4 = this;\n      var table = this.props.data.table;\n      if (this.state.selected.cell === table.rows[0].cells.length - 1) {\n        this.setState({\n          selected: {\n            row: this.state.selected.row,\n            cell: this.state.selected.cell - 1\n          }\n        });\n      }\n      this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n        table: _objectSpread(_objectSpread({}, table), {}, {\n          rows: _map(table.rows, function (row) {\n            return _objectSpread(_objectSpread({}, row), {}, {\n              cells: _remove(row.cells, function (cell, index) {\n                return index !== _this4.state.selected.cell;\n              })\n            });\n          })\n        })\n      }));\n    }\n\n    /**\n     * Delete row handler. Changes the selected cell if the last table row is\n     * selected.\n     * @method onDeleteRow\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onDeleteRow\",\n    value: function onDeleteRow() {\n      var _this5 = this;\n      var table = this.props.data.table;\n      if (this.state.selected.row === table.rows.length - 1) {\n        this.setState({\n          selected: {\n            row: this.state.selected.row - 1,\n            cell: this.state.selected.cell\n          }\n        });\n      }\n      this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n        table: _objectSpread(_objectSpread({}, table), {}, {\n          rows: _remove(table.rows, function (row, index) {\n            return index !== _this5.state.selected.row;\n          })\n        })\n      }));\n    }\n\n    /**\n     * Toggles bool state data ('fixed', 'compact' etc. can be true or false).\n     * @method toggleBool\n     * @param {string} value Key in the table state to toggle.\n     * @returns {undefined}\n     */\n  }, {\n    key: \"toggleBool\",\n    value: function toggleBool(value) {\n      var table = this.props.data.table;\n      this.props.onChangeBlock(this.props.block, _objectSpread(_objectSpread({}, this.props.data), {}, {\n        table: _objectSpread(_objectSpread({}, table), {}, _defineProperty({}, value, !table[value]))\n      }));\n    }\n\n    /**\n     * Toggle fixed\n     * @method toggleHideHeaders\n     * @returns {undefined}\n     */\n  }, {\n    key: \"toggleHideHeaders\",\n    value: function toggleHideHeaders() {\n      this.toggleBool('hideHeaders');\n    }\n\n    /**\n     * Toggle sortable\n     * @method toggleSortable\n     * @returns {undefined}\n     */\n  }, {\n    key: \"toggleSortable\",\n    value: function toggleSortable() {\n      this.toggleBool('sortable');\n    }\n\n    /**\n     * Toggle fixed\n     * @method toggleFixed\n     * @returns {undefined}\n     */\n  }, {\n    key: \"toggleFixed\",\n    value: function toggleFixed() {\n      this.toggleBool('fixed');\n    }\n\n    /**\n     * Toggle compact\n     * @method toggleCompact\n     * @returns {undefined}\n     */\n  }, {\n    key: \"toggleCompact\",\n    value: function toggleCompact() {\n      this.toggleBool('compact');\n    }\n\n    /**\n     * Toggle basic\n     * @method toggleBasic\n     * @returns {undefined}\n     */\n  }, {\n    key: \"toggleBasic\",\n    value: function toggleBasic() {\n      this.toggleBool('basic');\n    }\n\n    /**\n     * Toggle celled\n     * @method toggleCelled\n     * @returns {undefined}\n     */\n  }, {\n    key: \"toggleCelled\",\n    value: function toggleCelled() {\n      this.toggleBool('celled');\n    }\n\n    /**\n     * Toggle inverted\n     * @method toggleInverted\n     * @returns {undefined}\n     */\n  }, {\n    key: \"toggleInverted\",\n    value: function toggleInverted() {\n      this.toggleBool('inverted');\n    }\n\n    /**\n     * Toggle striped\n     * @method toggleStriped\n     * @returns {undefined}\n     */\n  }, {\n    key: \"toggleStriped\",\n    value: function toggleStriped() {\n      this.toggleBool('striped');\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (prevProps.selected && !this.props.selected) {\n        this.setState({\n          selected: null\n        });\n      }\n    }\n\n    /**\n     * Render method.\n     * @method render\n     * @returns {string} Markup for the component.\n     */\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props$data$tabl,\n        _this$props$data$tabl2,\n        _this$props$data$tabl3,\n        _this$props$data$tabl4,\n        _this$props$data$tabl5,\n        _this6 = this;\n      var headers = ((_this$props$data$tabl = this.props.data.table) === null || _this$props$data$tabl === void 0 ? void 0 : (_this$props$data$tabl2 = _this$props$data$tabl.rows) === null || _this$props$data$tabl2 === void 0 ? void 0 : (_this$props$data$tabl3 = _this$props$data$tabl2[0]) === null || _this$props$data$tabl3 === void 0 ? void 0 : _this$props$data$tabl3.cells) || [];\n      var rows = ((_this$props$data$tabl4 = this.props.data.table) === null || _this$props$data$tabl4 === void 0 ? void 0 : (_this$props$data$tabl5 = _this$props$data$tabl4.rows) === null || _this$props$data$tabl5 === void 0 ? void 0 : _this$props$data$tabl5.filter(function (_, index) {\n        return index > 0;\n      })) || [];\n      return (\n        // TODO: use slate-table instead of table, but first copy the CSS styles\n        // to the new name\n        __jsx(\"div\", {\n          className: cx('block table', {\n            selected: this.props.selected\n          }),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 630,\n            columnNumber: 7\n          }\n        }, this.props.selected && __jsx(\"div\", {\n          className: \"toolbar\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 632,\n            columnNumber: 11\n          }\n        }, __jsx(Button.Group, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 633,\n            columnNumber: 13\n          }\n        }, __jsx(Button, {\n          icon: true,\n          basic: true,\n          onClick: this.onInsertRowBefore,\n          title: this.props.intl.formatMessage(messages.insertRowBefore),\n          \"aria-label\": this.props.intl.formatMessage(messages.insertRowBefore),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 634,\n            columnNumber: 15\n          }\n        }, __jsx(Icon, {\n          name: rowBeforeSVG,\n          size: \"24px\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 643,\n            columnNumber: 17\n          }\n        }))), __jsx(Button.Group, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 646,\n            columnNumber: 13\n          }\n        }, __jsx(Button, {\n          icon: true,\n          basic: true,\n          onClick: this.onInsertRowAfter,\n          title: this.props.intl.formatMessage(messages.insertRowAfter),\n          \"aria-label\": this.props.intl.formatMessage(messages.insertRowAfter),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 647,\n            columnNumber: 15\n          }\n        }, __jsx(Icon, {\n          name: rowAfterSVG,\n          size: \"24px\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 656,\n            columnNumber: 17\n          }\n        }))), __jsx(Button.Group, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 659,\n            columnNumber: 13\n          }\n        }, __jsx(Button, {\n          icon: true,\n          basic: true,\n          onClick: this.onDeleteRow,\n          disabled: this.props.data.table && this.props.data.table.rows.length === 1,\n          title: this.props.intl.formatMessage(messages.deleteRow),\n          \"aria-label\": this.props.intl.formatMessage(messages.deleteRow),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 660,\n            columnNumber: 15\n          }\n        }, __jsx(Icon, {\n          name: rowDeleteSVG,\n          size: \"24px\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 671,\n            columnNumber: 17\n          }\n        }))), __jsx(Button.Group, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 674,\n            columnNumber: 13\n          }\n        }, __jsx(Button, {\n          icon: true,\n          basic: true,\n          onClick: this.onInsertColBefore,\n          title: this.props.intl.formatMessage(messages.insertColBefore),\n          \"aria-label\": this.props.intl.formatMessage(messages.insertColBefore),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 675,\n            columnNumber: 15\n          }\n        }, __jsx(Icon, {\n          name: colBeforeSVG,\n          size: \"24px\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 684,\n            columnNumber: 17\n          }\n        }))), __jsx(Button.Group, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 687,\n            columnNumber: 13\n          }\n        }, __jsx(Button, {\n          icon: true,\n          basic: true,\n          onClick: this.onInsertColAfter,\n          title: this.props.intl.formatMessage(messages.insertColAfter),\n          \"aria-label\": this.props.intl.formatMessage(messages.insertColAfter),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 688,\n            columnNumber: 15\n          }\n        }, __jsx(Icon, {\n          name: colAfterSVG,\n          size: \"24px\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 697,\n            columnNumber: 17\n          }\n        }))), __jsx(Button.Group, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 700,\n            columnNumber: 13\n          }\n        }, __jsx(Button, {\n          icon: true,\n          basic: true,\n          onClick: this.onDeleteCol,\n          disabled: this.props.data.table && this.props.data.table.rows[0].cells.length === 1,\n          title: this.props.intl.formatMessage(messages.deleteCol),\n          \"aria-label\": this.props.intl.formatMessage(messages.deleteCol),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 701,\n            columnNumber: 15\n          }\n        }, __jsx(Icon, {\n          name: colDeleteSVG,\n          size: \"24px\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 712,\n            columnNumber: 17\n          }\n        })))), this.props.data.table && __jsx(Table, {\n          fixed: this.props.data.table.fixed,\n          compact: this.props.data.table.compact,\n          basic: this.props.data.table.basic ? 'very' : false,\n          celled: this.props.data.table.celled,\n          inverted: this.props.data.table.inverted,\n          striped: this.props.data.table.striped,\n          className: \"slate-table-block\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 718,\n            columnNumber: 11\n          }\n        }, !this.props.data.table.hideHeaders ? __jsx(Table.Header, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 728,\n            columnNumber: 15\n          }\n        }, __jsx(Table.Row, {\n          textAlign: \"left\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 729,\n            columnNumber: 17\n          }\n        }, headers.map(function (cell, cellIndex) {\n          return __jsx(Table.HeaderCell, {\n            key: cell.key,\n            textAlign: \"left\",\n            verticalAlign: \"middle\",\n            __self: _this6,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 731,\n              columnNumber: 21\n            }\n          }, __jsx(Cell, {\n            value: cell.value,\n            row: 0,\n            cell: cellIndex,\n            onSelectCell: _this6.onSelectCell,\n            selected: _this6.props.selected && _this6.state.selected && 0 === _this6.state.selected.row && cellIndex === _this6.state.selected.cell,\n            selectedCell: _this6.state.selected,\n            isTableBlockSelected: _this6.props.selected,\n            onAddBlock: _this6.props.onAddBlock,\n            onSelectBlock: _this6.props.onSelectBlock,\n            onChange: _this6.onChangeCell,\n            index: _this6.props.index,\n            __self: _this6,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 736,\n              columnNumber: 23\n            }\n          }));\n        }))) : '', __jsx(Table.Body, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 761,\n            columnNumber: 13\n          }\n        }, _map(rows, function (row, rowIndex) {\n          return __jsx(Table.Row, {\n            key: row.key,\n            __self: _this6,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 763,\n              columnNumber: 17\n            }\n          }, _map(row.cells, function (cell, cellIndex) {\n            return __jsx(Table.Cell, {\n              key: cell.key,\n              textAlign: \"left\",\n              verticalAlign: \"middle\",\n              className: _this6.props.selected && _this6.state.selected && rowIndex + 1 === _this6.state.selected.row && cellIndex === _this6.state.selected.cell && _this6.props.selected ? 'selected' : '',\n              __self: _this6,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 765,\n                columnNumber: 21\n              }\n            }, __jsx(Cell, {\n              value: cell.value,\n              row: rowIndex + 1,\n              cell: cellIndex,\n              onSelectCell: _this6.onSelectCell,\n              selected: _this6.props.selected && _this6.state.selected && rowIndex + 1 === _this6.state.selected.row && cellIndex === _this6.state.selected.cell,\n              selectedCell: _this6.state.selected,\n              isTableBlockSelected: _this6.props.selected,\n              onAddBlock: _this6.props.onAddBlock,\n              onSelectBlock: _this6.props.onSelectBlock,\n              onChange: _this6.onChangeCell,\n              index: _this6.props.index,\n              __self: _this6,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 779,\n                columnNumber: 23\n              }\n            }));\n          }));\n        }))), this.props.selected && this.state.selected && this.state.isClient && __jsx(Portal, {\n          node: document.getElementById('sidebar-properties'),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 805,\n            columnNumber: 11\n          }\n        }, __jsx(Form, {\n          method: \"post\",\n          onSubmit: function onSubmit(event) {\n            return event.preventDefault();\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 806,\n            columnNumber: 13\n          }\n        }, __jsx(Segment, {\n          secondary: true,\n          attached: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 807,\n            columnNumber: 15\n          }\n        }, __jsx(FormattedMessage, {\n          id: \"Table\",\n          defaultMessage: \"Table\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 808,\n            columnNumber: 17\n          }\n        })), __jsx(Segment, {\n          attached: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 810,\n            columnNumber: 15\n          }\n        }, __jsx(Field, {\n          id: \"hideHeaders\",\n          title: this.props.intl.formatMessage(messages.hideHeaders),\n          type: \"boolean\",\n          value: this.props.data.table && this.props.data.table.hideHeaders,\n          onChange: function onChange() {\n            return _this6.toggleHideHeaders();\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 811,\n            columnNumber: 17\n          }\n        }), __jsx(Field, {\n          id: \"sortable\",\n          title: this.props.intl.formatMessage(messages.sortable),\n          description: this.props.intl.formatMessage(messages.sortableDescription),\n          type: \"boolean\",\n          value: this.props.data.table && this.props.data.table.sortable,\n          onChange: function onChange() {\n            return _this6.toggleSortable();\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 820,\n            columnNumber: 17\n          }\n        }), __jsx(Field, {\n          id: \"fixed\",\n          title: this.props.intl.formatMessage(messages.fixed),\n          type: \"boolean\",\n          value: this.props.data.table && this.props.data.table.fixed,\n          onChange: function onChange() {\n            return _this6.toggleFixed();\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 832,\n            columnNumber: 17\n          }\n        }), __jsx(Field, {\n          id: \"celled\",\n          title: this.props.intl.formatMessage(messages.celled),\n          type: \"boolean\",\n          value: this.props.data.table && this.props.data.table.celled,\n          onChange: this.toggleCelled,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 839,\n            columnNumber: 17\n          }\n        }), __jsx(Field, {\n          id: \"striped\",\n          title: this.props.intl.formatMessage(messages.striped),\n          type: \"boolean\",\n          value: this.props.data.table && this.props.data.table.striped,\n          onChange: this.toggleStriped,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 846,\n            columnNumber: 17\n          }\n        }), __jsx(Field, {\n          id: \"compact\",\n          title: this.props.intl.formatMessage(messages.compact),\n          type: \"boolean\",\n          value: this.props.data.table && this.props.data.table.compact,\n          onChange: function onChange() {\n            return _this6.toggleCompact();\n          },\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 853,\n            columnNumber: 17\n          }\n        }), __jsx(Field, {\n          id: \"basic\",\n          title: this.props.intl.formatMessage(messages.basic),\n          type: \"boolean\",\n          value: this.props.data.table && this.props.data.table.basic,\n          onChange: this.toggleBasic,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 860,\n            columnNumber: 17\n          }\n        }), __jsx(Field, {\n          id: \"inverted\",\n          title: this.props.intl.formatMessage(messages.inverted),\n          type: \"boolean\",\n          value: this.props.data.table && this.props.data.table.inverted,\n          onChange: this.toggleInverted,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 867,\n            columnNumber: 17\n          }\n        })))))\n      );\n    }\n  }]);\n  return Edit;\n}(Component);\n_defineProperty(Edit, \"propTypes\", {\n  data: PropTypes.objectOf(PropTypes.any).isRequired,\n  detached: PropTypes.bool,\n  index: PropTypes.number.isRequired,\n  selected: PropTypes.bool.isRequired,\n  block: PropTypes.string.isRequired,\n  onAddBlock: PropTypes.func.isRequired,\n  onChangeBlock: PropTypes.func.isRequired,\n  onDeleteBlock: PropTypes.func.isRequired,\n  onInsertBlock: PropTypes.func.isRequired,\n  onMutateBlock: PropTypes.func.isRequired,\n  onFocusPreviousBlock: PropTypes.func.isRequired,\n  onFocusNextBlock: PropTypes.func.isRequired,\n  onSelectBlock: PropTypes.func.isRequired\n});\n_defineProperty(Edit, \"defaultProps\", {\n  detached: false\n});\nexport default _c = injectIntl(Edit);\nvar _c;\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"names":["React","Component","PropTypes","Button","Segment","Table","Form","Portal","cx","FormattedMessage","defineMessages","injectIntl","Cell","Field","Icon","rowBeforeSVG","rowAfterSVG","colBeforeSVG","colAfterSVG","rowDeleteSVG","colDeleteSVG","getId","Math","floor","random","pow","toString","getEmptyParagraph","type","children","text","emptyCell","key","value","emptyRow","cells","initialTable","hideHeaders","fixed","compact","basic","celled","inverted","striped","rows","messages","insertRowBefore","insertRowAfter","deleteRow","insertColBefore","insertColAfter","deleteCol","sortable","sortableDescription","left","center","right","bottom","middle","top","Edit","props","state","headers","selected","row","cell","isClient","onChange","bind","onSelectCell","onInsertRowBefore","onInsertRowAfter","onInsertColBefore","onInsertColAfter","onDeleteRow","onDeleteCol","onChangeCell","toggleCellType","toggleBool","toggleHideHeaders","toggleSortable","toggleFixed","toggleCompact","toggleBasic","toggleCelled","toggleInverted","toggleStriped","data","table","onChangeBlock","block","setState","nextProps","id","slateValue","JSON","parse","stringify","slice","index","length","prevProps","filter","_","intl","formatMessage","map","cellIndex","onAddBlock","onSelectBlock","rowIndex","document","getElementById","event","preventDefault","objectOf","any","isRequired","detached","bool","number","string","func","onDeleteBlock","onInsertBlock","onMutateBlock","onFocusPreviousBlock","onFocusNextBlock"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/packages/volto-slate/src/blocks/Table/TableBlockEdit.jsx"],"sourcesContent":["/**\n * Slate Table block editor.\n * @module volto-slate/blocks/Table/Edit\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { map, remove } from 'lodash';\nimport { Button, Segment, Table, Form } from 'semantic-ui-react';\nimport { Portal } from 'react-portal';\nimport cx from 'classnames';\nimport { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\n\nimport Cell from './Cell';\nimport { Field, Icon } from '@plone/volto/components';\n\nimport rowBeforeSVG from '@plone/volto/icons/row-before.svg';\nimport rowAfterSVG from '@plone/volto/icons/row-after.svg';\nimport colBeforeSVG from '@plone/volto/icons/column-before.svg';\nimport colAfterSVG from '@plone/volto/icons/column-after.svg';\nimport rowDeleteSVG from '@plone/volto/icons/row-delete.svg';\nimport colDeleteSVG from '@plone/volto/icons/column-delete.svg';\n\n/**\n * Returns a random string of 32 digits.\n */\nconst getId = () => Math.floor(Math.random() * Math.pow(2, 24)).toString(32);\n\n/**\n * @returns {object} An empty Slate paragraph (a simple Slate block node with\n * type set to \"p\" and a `Text` child with an empty string).\n */\nfunction getEmptyParagraph() {\n  return [{ type: 'p', children: [{ text: '' }] }];\n}\n\n/**\n * @param {string} type The type of the newly created cell: either 'header' or\n * 'data', by default it is 'data'.\n * @returns {object} A new cell object containing three properties: `key`,\n * `type` and `value`.\n */\nconst emptyCell = (type = 'data') => ({\n  key: getId(),\n  type: type,\n  value: getEmptyParagraph(),\n});\n\n/**\n * @param {Array[object]} cells Array of placeholders, each of them will be\n * replaced in the newly created row with an empty cell. (Practically, just the\n * length of the array matters.)\n * @returns {object} A new row object containing the keys `key` and `cells`.\n */\nconst emptyRow = (cells) => ({\n  key: getId(),\n  cells: map(cells, () => emptyCell()),\n});\n\n/**\n * The initial value for the displayed table's data. The IDs of the rows and\n * cells are computed here only once, so each new table has the same IDs\n * initially, but this does not have bad consequences since the key has\n * relevance only in the context in which it is used.\n */\nconst initialTable = {\n  hideHeaders: false,\n  fixed: true,\n  compact: false,\n  basic: false,\n  celled: true,\n  inverted: false,\n  striped: false,\n  rows: [\n    {\n      key: getId(),\n      cells: [\n        {\n          key: getId(),\n          type: 'header',\n          value: getEmptyParagraph(),\n        },\n        {\n          key: getId(),\n          type: 'header',\n          value: getEmptyParagraph(),\n        },\n      ],\n    },\n    {\n      key: getId(),\n      cells: [\n        {\n          key: getId(),\n          type: 'data',\n          value: getEmptyParagraph(),\n        },\n        {\n          key: getId(),\n          type: 'data',\n          value: getEmptyParagraph(),\n        },\n      ],\n    },\n  ],\n};\n\nconst messages = defineMessages({\n  insertRowBefore: {\n    id: 'Insert row before',\n    defaultMessage: 'Insert row before',\n  },\n  insertRowAfter: {\n    id: 'Insert row after',\n    defaultMessage: 'Insert row after',\n  },\n  deleteRow: {\n    id: 'Delete row',\n    defaultMessage: 'Delete row',\n  },\n  insertColBefore: {\n    id: 'Insert col before',\n    defaultMessage: 'Insert col before',\n  },\n  insertColAfter: {\n    id: 'Insert col after',\n    defaultMessage: 'Insert col after',\n  },\n  deleteCol: {\n    id: 'Delete col',\n    defaultMessage: 'Delete col',\n  },\n  hideHeaders: {\n    id: 'Hide headers',\n    defaultMessage: 'Hide headers',\n  },\n  sortable: {\n    id: 'Make the table sortable',\n    defaultMessage: 'Make the table sortable',\n  },\n  sortableDescription: {\n    id: 'Visible only in view mode',\n    defaultMessage: 'Visible only in view mode',\n  },\n  fixed: {\n    id: 'Fixed width table cells',\n    defaultMessage: 'Fixed width table cells',\n  },\n  compact: {\n    id: 'Make the table compact',\n    defaultMessage: 'Make the table compact',\n  },\n  basic: {\n    id: 'Reduce complexity',\n    defaultMessage: 'Reduce complexity',\n  },\n  celled: {\n    id: 'Divide each row into separate cells',\n    defaultMessage: 'Divide each row into separate cells',\n  },\n  inverted: {\n    id: 'Table color inverted',\n    defaultMessage: 'Table color inverted',\n  },\n  striped: {\n    id: 'Stripe alternate rows with color',\n    defaultMessage: 'Stripe alternate rows with color',\n  },\n  left: {\n    id: 'Left',\n    defaultMessage: 'Left',\n  },\n  center: {\n    id: 'Center',\n    defaultMessage: 'Center',\n  },\n  right: {\n    id: 'Right',\n    defaultMessage: 'Right',\n  },\n  bottom: {\n    id: 'Bottom',\n    defaultMessage: 'Bottom',\n  },\n  middle: {\n    id: 'Middle',\n    defaultMessage: 'Middle',\n  },\n  top: {\n    id: 'Top',\n    defaultMessage: 'Top',\n  },\n});\n\n/**\n * Edit component for the Slate Table block type in Volto.\n * @class Edit\n * @extends Component\n */\nclass Edit extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    data: PropTypes.objectOf(PropTypes.any).isRequired,\n    detached: PropTypes.bool,\n    index: PropTypes.number.isRequired,\n    selected: PropTypes.bool.isRequired,\n    block: PropTypes.string.isRequired,\n    onAddBlock: PropTypes.func.isRequired,\n    onChangeBlock: PropTypes.func.isRequired,\n    onDeleteBlock: PropTypes.func.isRequired,\n    onInsertBlock: PropTypes.func.isRequired,\n    onMutateBlock: PropTypes.func.isRequired,\n    onFocusPreviousBlock: PropTypes.func.isRequired,\n    onFocusNextBlock: PropTypes.func.isRequired,\n    onSelectBlock: PropTypes.func.isRequired,\n  };\n\n  /**\n   * Default properties\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    detached: false,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs WysiwygEditor\n   */\n  constructor(props) {\n    super(props);\n    this.state = {\n      headers: [],\n      rows: {},\n      selected: {\n        row: 0,\n        cell: 0,\n      },\n      isClient: false,\n    };\n    this.onChange = this.onChange.bind(this);\n    this.onSelectCell = this.onSelectCell.bind(this);\n    this.onInsertRowBefore = this.onInsertRowBefore.bind(this);\n    this.onInsertRowAfter = this.onInsertRowAfter.bind(this);\n    this.onInsertColBefore = this.onInsertColBefore.bind(this);\n    this.onInsertColAfter = this.onInsertColAfter.bind(this);\n    this.onDeleteRow = this.onDeleteRow.bind(this);\n    this.onDeleteCol = this.onDeleteCol.bind(this);\n    this.onChangeCell = this.onChangeCell.bind(this);\n    this.toggleCellType = this.toggleCellType.bind(this);\n    this.toggleBool = this.toggleBool.bind(this);\n    this.toggleHideHeaders = this.toggleHideHeaders.bind(this);\n    this.toggleSortable = this.toggleSortable.bind(this);\n    this.toggleFixed = this.toggleFixed.bind(this);\n    this.toggleCompact = this.toggleCompact.bind(this);\n    this.toggleBasic = this.toggleBasic.bind(this);\n    this.toggleCelled = this.toggleCelled.bind(this);\n    this.toggleInverted = this.toggleInverted.bind(this);\n    this.toggleStriped = this.toggleStriped.bind(this);\n  }\n\n  /**\n   * Component did mount lifecycle method\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    if (!this.props.data.table) {\n      this.props.onChangeBlock(this.props.block, {\n        ...this.props.data,\n        table: initialTable,\n      });\n    }\n    this.setState({ isClient: true });\n  }\n\n  /**\n   * Component will receive props lifecycle method\n   * @method componentWillReceiveProps\n   * @param {Object} nextProps Next properties\n   * @returns {undefined}\n   */\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (!nextProps.data.table) {\n      this.props.onChangeBlock(nextProps.block, {\n        ...nextProps.data,\n        table: initialTable,\n      });\n    }\n  }\n\n  /**\n   * On change\n   * @method onChange\n   * @param {string} id Id of modified property.\n   * @param {any} value New value of modified property.\n   * @returns {undefined}\n   */\n  onChange(id, value) {\n    const table = this.props.data.table;\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table: {\n        ...table,\n        [id]: value,\n      },\n    });\n  }\n\n  /**\n   * Select cell handler\n   * @method onSelectCell\n   * @param {Number} row Row index.\n   * @param {Number} cell Cell index.\n   * @returns {undefined}\n   */\n  onSelectCell(row, cell) {\n    this.setState({ selected: { row, cell } });\n  }\n\n  /**\n   * Change cell handler\n   * @param {Number} row Row index.\n   * @param {Number} cell Cell index.\n   * @param {Array} slateValue Value of the `SlateEditor` in the cell.\n   * @returns {undefined}\n   */\n  onChangeCell(row, cell, slateValue) {\n    const table = JSON.parse(JSON.stringify(this.props.data.table));\n    table.rows[row].cells[cell] = {\n      ...table.rows[row].cells[cell],\n      value: JSON.parse(JSON.stringify(slateValue)),\n    };\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table,\n    });\n  }\n\n  /**\n   * Toggle cell type (from header to data or reverse)\n   * @method toggleCellType\n   * @returns {undefined}\n   */\n  toggleCellType() {\n    const table = { ...this.props.data.table };\n    let type =\n      table.rows[this.state.selected.row].cells[this.state.selected.cell].type;\n    table.rows[this.state.selected.row].cells[this.state.selected.cell].type =\n      type === 'header' ? 'data' : 'header';\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table,\n    });\n  }\n\n  /**\n   * Insert row before handler. Keeps the selected cell as selected after the\n   * operation is done.\n   * @returns {undefined}\n   */\n  onInsertRowBefore() {\n    const table = this.props.data.table;\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table: {\n        ...table,\n        rows: [\n          ...table.rows.slice(0, this.state.selected.row),\n          emptyRow(table.rows[0].cells),\n          ...table.rows.slice(this.state.selected.row),\n        ],\n      },\n    });\n    this.setState({\n      selected: {\n        row: this.state.selected.row + 1,\n        cell: this.state.selected.cell,\n      },\n    });\n  }\n\n  /**\n   * Insert row after handler\n   * @returns {undefined}\n   */\n  onInsertRowAfter() {\n    const table = this.props.data.table;\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table: {\n        ...table,\n        rows: [\n          ...table.rows.slice(0, this.state.selected.row + 1),\n          emptyRow(table.rows[0].cells),\n          ...table.rows.slice(this.state.selected.row + 1),\n        ],\n      },\n    });\n  }\n\n  /**\n   * Insert column before handler. Keeps the selected cell as selected after the\n   * operation is done.\n   * @returns {undefined}\n   */\n  onInsertColBefore() {\n    const table = this.props.data.table;\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table: {\n        ...table,\n        rows: map(table.rows, (row, index) => ({\n          ...row,\n          cells: [\n            ...row.cells.slice(0, this.state.selected.cell),\n            emptyCell(table.rows[index].cells[this.state.selected.cell].type),\n            ...row.cells.slice(this.state.selected.cell),\n          ],\n        })),\n      },\n    });\n    this.setState({\n      selected: {\n        row: this.state.selected.row,\n        cell: this.state.selected.cell + 1,\n      },\n    });\n  }\n\n  /**\n   * Insert column after handler\n   * @returns {undefined}\n   */\n  onInsertColAfter() {\n    const table = this.props.data.table;\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table: {\n        ...table,\n        rows: map(table.rows, (row, index) => ({\n          ...row,\n          cells: [\n            ...row.cells.slice(0, this.state.selected.cell + 1),\n            emptyCell(table.rows[index].cells[this.state.selected.cell].type),\n            ...row.cells.slice(this.state.selected.cell + 1),\n          ],\n        })),\n      },\n    });\n  }\n\n  /**\n   * Delete column handler. Changes the selected cell if the last table column\n   * is selected.\n   * @returns {undefined}\n   */\n  onDeleteCol() {\n    const table = this.props.data.table;\n\n    if (this.state.selected.cell === table.rows[0].cells.length - 1) {\n      this.setState({\n        selected: {\n          row: this.state.selected.row,\n          cell: this.state.selected.cell - 1,\n        },\n      });\n    }\n\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table: {\n        ...table,\n        rows: map(table.rows, (row) => ({\n          ...row,\n          cells: remove(\n            row.cells,\n            (cell, index) => index !== this.state.selected.cell,\n          ),\n        })),\n      },\n    });\n  }\n\n  /**\n   * Delete row handler. Changes the selected cell if the last table row is\n   * selected.\n   * @method onDeleteRow\n   * @returns {undefined}\n   */\n  onDeleteRow() {\n    const table = this.props.data.table;\n\n    if (this.state.selected.row === table.rows.length - 1) {\n      this.setState({\n        selected: {\n          row: this.state.selected.row - 1,\n          cell: this.state.selected.cell,\n        },\n      });\n    }\n\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table: {\n        ...table,\n        rows: remove(\n          table.rows,\n          (row, index) => index !== this.state.selected.row,\n        ),\n      },\n    });\n  }\n\n  /**\n   * Toggles bool state data ('fixed', 'compact' etc. can be true or false).\n   * @method toggleBool\n   * @param {string} value Key in the table state to toggle.\n   * @returns {undefined}\n   */\n  toggleBool(value) {\n    const table = this.props.data.table;\n    this.props.onChangeBlock(this.props.block, {\n      ...this.props.data,\n      table: {\n        ...table,\n        [value]: !table[value],\n      },\n    });\n  }\n\n  /**\n   * Toggle fixed\n   * @method toggleHideHeaders\n   * @returns {undefined}\n   */\n  toggleHideHeaders() {\n    this.toggleBool('hideHeaders');\n  }\n\n  /**\n   * Toggle sortable\n   * @method toggleSortable\n   * @returns {undefined}\n   */\n  toggleSortable() {\n    this.toggleBool('sortable');\n  }\n\n  /**\n   * Toggle fixed\n   * @method toggleFixed\n   * @returns {undefined}\n   */\n  toggleFixed() {\n    this.toggleBool('fixed');\n  }\n\n  /**\n   * Toggle compact\n   * @method toggleCompact\n   * @returns {undefined}\n   */\n  toggleCompact() {\n    this.toggleBool('compact');\n  }\n\n  /**\n   * Toggle basic\n   * @method toggleBasic\n   * @returns {undefined}\n   */\n  toggleBasic() {\n    this.toggleBool('basic');\n  }\n\n  /**\n   * Toggle celled\n   * @method toggleCelled\n   * @returns {undefined}\n   */\n  toggleCelled() {\n    this.toggleBool('celled');\n  }\n\n  /**\n   * Toggle inverted\n   * @method toggleInverted\n   * @returns {undefined}\n   */\n  toggleInverted() {\n    this.toggleBool('inverted');\n  }\n\n  /**\n   * Toggle striped\n   * @method toggleStriped\n   * @returns {undefined}\n   */\n  toggleStriped() {\n    this.toggleBool('striped');\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.selected && !this.props.selected) {\n      this.setState({ selected: null });\n    }\n  }\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const headers = this.props.data.table?.rows?.[0]?.cells || [];\n    const rows =\n      this.props.data.table?.rows?.filter((_, index) => index > 0) || [];\n\n    return (\n      // TODO: use slate-table instead of table, but first copy the CSS styles\n      // to the new name\n      <div className={cx('block table', { selected: this.props.selected })}>\n        {this.props.selected && (\n          <div className=\"toolbar\">\n            <Button.Group>\n              <Button\n                icon\n                basic\n                onClick={this.onInsertRowBefore}\n                title={this.props.intl.formatMessage(messages.insertRowBefore)}\n                aria-label={this.props.intl.formatMessage(\n                  messages.insertRowBefore,\n                )}\n              >\n                <Icon name={rowBeforeSVG} size=\"24px\" />\n              </Button>\n            </Button.Group>\n            <Button.Group>\n              <Button\n                icon\n                basic\n                onClick={this.onInsertRowAfter}\n                title={this.props.intl.formatMessage(messages.insertRowAfter)}\n                aria-label={this.props.intl.formatMessage(\n                  messages.insertRowAfter,\n                )}\n              >\n                <Icon name={rowAfterSVG} size=\"24px\" />\n              </Button>\n            </Button.Group>\n            <Button.Group>\n              <Button\n                icon\n                basic\n                onClick={this.onDeleteRow}\n                disabled={\n                  this.props.data.table &&\n                  this.props.data.table.rows.length === 1\n                }\n                title={this.props.intl.formatMessage(messages.deleteRow)}\n                aria-label={this.props.intl.formatMessage(messages.deleteRow)}\n              >\n                <Icon name={rowDeleteSVG} size=\"24px\" />\n              </Button>\n            </Button.Group>\n            <Button.Group>\n              <Button\n                icon\n                basic\n                onClick={this.onInsertColBefore}\n                title={this.props.intl.formatMessage(messages.insertColBefore)}\n                aria-label={this.props.intl.formatMessage(\n                  messages.insertColBefore,\n                )}\n              >\n                <Icon name={colBeforeSVG} size=\"24px\" />\n              </Button>\n            </Button.Group>\n            <Button.Group>\n              <Button\n                icon\n                basic\n                onClick={this.onInsertColAfter}\n                title={this.props.intl.formatMessage(messages.insertColAfter)}\n                aria-label={this.props.intl.formatMessage(\n                  messages.insertColAfter,\n                )}\n              >\n                <Icon name={colAfterSVG} size=\"24px\" />\n              </Button>\n            </Button.Group>\n            <Button.Group>\n              <Button\n                icon\n                basic\n                onClick={this.onDeleteCol}\n                disabled={\n                  this.props.data.table &&\n                  this.props.data.table.rows[0].cells.length === 1\n                }\n                title={this.props.intl.formatMessage(messages.deleteCol)}\n                aria-label={this.props.intl.formatMessage(messages.deleteCol)}\n              >\n                <Icon name={colDeleteSVG} size=\"24px\" />\n              </Button>\n            </Button.Group>\n          </div>\n        )}\n        {this.props.data.table && (\n          <Table\n            fixed={this.props.data.table.fixed}\n            compact={this.props.data.table.compact}\n            basic={this.props.data.table.basic ? 'very' : false}\n            celled={this.props.data.table.celled}\n            inverted={this.props.data.table.inverted}\n            striped={this.props.data.table.striped}\n            className=\"slate-table-block\"\n          >\n            {!this.props.data.table.hideHeaders ? (\n              <Table.Header>\n                <Table.Row textAlign=\"left\">\n                  {headers.map((cell, cellIndex) => (\n                    <Table.HeaderCell\n                      key={cell.key}\n                      textAlign=\"left\"\n                      verticalAlign=\"middle\"\n                    >\n                      <Cell\n                        value={cell.value}\n                        row={0}\n                        cell={cellIndex}\n                        onSelectCell={this.onSelectCell}\n                        selected={\n                          this.props.selected &&\n                          this.state.selected &&\n                          0 === this.state.selected.row &&\n                          cellIndex === this.state.selected.cell\n                        }\n                        selectedCell={this.state.selected}\n                        isTableBlockSelected={this.props.selected}\n                        onAddBlock={this.props.onAddBlock}\n                        onSelectBlock={this.props.onSelectBlock}\n                        onChange={this.onChangeCell}\n                        index={this.props.index}\n                      />\n                    </Table.HeaderCell>\n                  ))}\n                </Table.Row>\n              </Table.Header>\n            ) : (\n              ''\n            )}\n            <Table.Body>\n              {map(rows, (row, rowIndex) => (\n                <Table.Row key={row.key}>\n                  {map(row.cells, (cell, cellIndex) => (\n                    <Table.Cell\n                      key={cell.key}\n                      textAlign=\"left\"\n                      verticalAlign=\"middle\"\n                      className={\n                        this.props.selected &&\n                        this.state.selected &&\n                        rowIndex + 1 === this.state.selected.row &&\n                        cellIndex === this.state.selected.cell &&\n                        this.props.selected\n                          ? 'selected'\n                          : ''\n                      }\n                    >\n                      <Cell\n                        value={cell.value}\n                        row={rowIndex + 1}\n                        cell={cellIndex}\n                        onSelectCell={this.onSelectCell}\n                        selected={\n                          this.props.selected &&\n                          this.state.selected &&\n                          rowIndex + 1 === this.state.selected.row &&\n                          cellIndex === this.state.selected.cell\n                        }\n                        selectedCell={this.state.selected}\n                        isTableBlockSelected={this.props.selected}\n                        onAddBlock={this.props.onAddBlock}\n                        onSelectBlock={this.props.onSelectBlock}\n                        onChange={this.onChangeCell}\n                        index={this.props.index}\n                      />\n                    </Table.Cell>\n                  ))}\n                </Table.Row>\n              ))}\n            </Table.Body>\n          </Table>\n        )}\n        {this.props.selected && this.state.selected && this.state.isClient && (\n          <Portal node={document.getElementById('sidebar-properties')}>\n            <Form method=\"post\" onSubmit={(event) => event.preventDefault()}>\n              <Segment secondary attached>\n                <FormattedMessage id=\"Table\" defaultMessage=\"Table\" />\n              </Segment>\n              <Segment attached>\n                <Field\n                  id=\"hideHeaders\"\n                  title={this.props.intl.formatMessage(messages.hideHeaders)}\n                  type=\"boolean\"\n                  value={\n                    this.props.data.table && this.props.data.table.hideHeaders\n                  }\n                  onChange={() => this.toggleHideHeaders()}\n                />\n                <Field\n                  id=\"sortable\"\n                  title={this.props.intl.formatMessage(messages.sortable)}\n                  description={this.props.intl.formatMessage(\n                    messages.sortableDescription,\n                  )}\n                  type=\"boolean\"\n                  value={\n                    this.props.data.table && this.props.data.table.sortable\n                  }\n                  onChange={() => this.toggleSortable()}\n                />\n                <Field\n                  id=\"fixed\"\n                  title={this.props.intl.formatMessage(messages.fixed)}\n                  type=\"boolean\"\n                  value={this.props.data.table && this.props.data.table.fixed}\n                  onChange={() => this.toggleFixed()}\n                />\n                <Field\n                  id=\"celled\"\n                  title={this.props.intl.formatMessage(messages.celled)}\n                  type=\"boolean\"\n                  value={this.props.data.table && this.props.data.table.celled}\n                  onChange={this.toggleCelled}\n                />\n                <Field\n                  id=\"striped\"\n                  title={this.props.intl.formatMessage(messages.striped)}\n                  type=\"boolean\"\n                  value={this.props.data.table && this.props.data.table.striped}\n                  onChange={this.toggleStriped}\n                />\n                <Field\n                  id=\"compact\"\n                  title={this.props.intl.formatMessage(messages.compact)}\n                  type=\"boolean\"\n                  value={this.props.data.table && this.props.data.table.compact}\n                  onChange={() => this.toggleCompact()}\n                />\n                <Field\n                  id=\"basic\"\n                  title={this.props.intl.formatMessage(messages.basic)}\n                  type=\"boolean\"\n                  value={this.props.data.table && this.props.data.table.basic}\n                  onChange={this.toggleBasic}\n                />\n                <Field\n                  id=\"inverted\"\n                  title={this.props.intl.formatMessage(messages.inverted)}\n                  type=\"boolean\"\n                  value={\n                    this.props.data.table && this.props.data.table.inverted\n                  }\n                  onChange={this.toggleInverted}\n                />\n              </Segment>\n            </Form>\n          </Portal>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default injectIntl(Edit);\n"],"mappings":";;;;;;;;;;;;AAAA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,SAAS,MAAM,YAAY;AAElC,SAASC,MAAM,EAAEC,OAAO,EAAEC,KAAK,EAAEC,IAAI,QAAQ,mBAAmB;AAChE,SAASC,MAAM,QAAQ,cAAc;AACrC,OAAOC,EAAE,MAAM,YAAY;AAC3B,SAASC,gBAAgB,EAAEC,cAAc,EAAEC,UAAU,QAAQ,YAAY;AAEzE,OAAOC,IAAI,MAAM,QAAQ;AACzB,SAASC,KAAK,EAAEC,IAAI,QAAQ,yBAAyB;AAErD,OAAOC,YAAY,MAAM,mCAAmC;AAC5D,OAAOC,WAAW,MAAM,kCAAkC;AAC1D,OAAOC,YAAY,MAAM,sCAAsC;AAC/D,OAAOC,WAAW,MAAM,qCAAqC;AAC7D,OAAOC,YAAY,MAAM,mCAAmC;AAC5D,OAAOC,YAAY,MAAM,sCAAsC;;AAE/D;AACA;AACA;AACA,IAAMC,KAAK,GAAG,SAARA,KAAK;EAAA,OAASC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGF,IAAI,CAACG,GAAG,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC;AAAA;;AAE5E;AACA;AACA;AACA;AACA,SAASC,iBAAiB,GAAG;EAC3B,OAAO,CAAC;IAAEC,IAAI,EAAE,GAAG;IAAEC,QAAQ,EAAE,CAAC;MAAEC,IAAI,EAAE;IAAG,CAAC;EAAE,CAAC,CAAC;AAClD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,IAAMC,SAAS,GAAG,SAAZA,SAAS;EAAA,IAAIH,IAAI,uEAAG,MAAM;EAAA,OAAM;IACpCI,GAAG,EAAEX,KAAK,EAAE;IACZO,IAAI,EAAEA,IAAI;IACVK,KAAK,EAAEN,iBAAiB;EAC1B,CAAC;AAAA,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA,IAAMO,QAAQ,GAAG,SAAXA,QAAQ,CAAIC,KAAK;EAAA,OAAM;IAC3BH,GAAG,EAAEX,KAAK,EAAE;IACZc,KAAK,EAAE,KAAIA,KAAK,EAAE;MAAA,OAAMJ,SAAS,EAAE;IAAA;EACrC,CAAC;AAAA,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA,IAAMK,YAAY,GAAG;EACnBC,WAAW,EAAE,KAAK;EAClBC,KAAK,EAAE,IAAI;EACXC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE,KAAK;EACZC,MAAM,EAAE,IAAI;EACZC,QAAQ,EAAE,KAAK;EACfC,OAAO,EAAE,KAAK;EACdC,IAAI,EAAE,CACJ;IACEZ,GAAG,EAAEX,KAAK,EAAE;IACZc,KAAK,EAAE,CACL;MACEH,GAAG,EAAEX,KAAK,EAAE;MACZO,IAAI,EAAE,QAAQ;MACdK,KAAK,EAAEN,iBAAiB;IAC1B,CAAC,EACD;MACEK,GAAG,EAAEX,KAAK,EAAE;MACZO,IAAI,EAAE,QAAQ;MACdK,KAAK,EAAEN,iBAAiB;IAC1B,CAAC;EAEL,CAAC,EACD;IACEK,GAAG,EAAEX,KAAK,EAAE;IACZc,KAAK,EAAE,CACL;MACEH,GAAG,EAAEX,KAAK,EAAE;MACZO,IAAI,EAAE,MAAM;MACZK,KAAK,EAAEN,iBAAiB;IAC1B,CAAC,EACD;MACEK,GAAG,EAAEX,KAAK,EAAE;MACZO,IAAI,EAAE,MAAM;MACZK,KAAK,EAAEN,iBAAiB;IAC1B,CAAC;EAEL,CAAC;AAEL,CAAC;AAED,IAAMkB,QAAQ,GAAGnC,cAAc,CAAC;EAC9BoC,eAAe;IAAA;IAAA;EAAA,CAGd;EACDC,cAAc;IAAA;IAAA;EAAA,CAGb;EACDC,SAAS;IAAA;IAAA;EAAA,CAGR;EACDC,eAAe;IAAA;IAAA;EAAA,CAGd;EACDC,cAAc;IAAA;IAAA;EAAA,CAGb;EACDC,SAAS;IAAA;IAAA;EAAA,CAGR;EACDd,WAAW;IAAA;IAAA;EAAA,CAGV;EACDe,QAAQ;IAAA;IAAA;EAAA,CAGP;EACDC,mBAAmB;IAAA;IAAA;EAAA,CAGlB;EACDf,KAAK;IAAA;IAAA;EAAA,CAGJ;EACDC,OAAO;IAAA;IAAA;EAAA,CAGN;EACDC,KAAK;IAAA;IAAA;EAAA,CAGJ;EACDC,MAAM;IAAA;IAAA;EAAA,CAGL;EACDC,QAAQ;IAAA;IAAA;EAAA,CAGP;EACDC,OAAO;IAAA;IAAA;EAAA,CAGN;EACDW,IAAI;IAAA;IAAA;EAAA,CAGH;EACDC,MAAM;IAAA;IAAA;EAAA,CAGL;EACDC,KAAK;IAAA;IAAA;EAAA,CAGJ;EACDC,MAAM;IAAA;IAAA;EAAA,CAGL;EACDC,MAAM;IAAA;IAAA;EAAA,CAGL;EACDC,GAAG;IAAA;IAAA;EAAA;AAIL,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AAJA,IAKMC,IAAI;EAAA;EAAA;EACR;AACF;AACA;AACA;AACA;;EAiBE;AACF;AACA;AACA;AACA;;EAKE;AACF;AACA;AACA;AACA;AACA;EACE,cAAYC,KAAK,EAAE;IAAA;IAAA;IACjB,0BAAMA,KAAK;IACX,MAAKC,KAAK,GAAG;MACXC,OAAO,EAAE,EAAE;MACXnB,IAAI,EAAE,CAAC,CAAC;MACRoB,QAAQ,EAAE;QACRC,GAAG,EAAE,CAAC;QACNC,IAAI,EAAE;MACR,CAAC;MACDC,QAAQ,EAAE;IACZ,CAAC;IACD,MAAKC,QAAQ,GAAG,MAAKA,QAAQ,CAACC,IAAI,+BAAM;IACxC,MAAKC,YAAY,GAAG,MAAKA,YAAY,CAACD,IAAI,+BAAM;IAChD,MAAKE,iBAAiB,GAAG,MAAKA,iBAAiB,CAACF,IAAI,+BAAM;IAC1D,MAAKG,gBAAgB,GAAG,MAAKA,gBAAgB,CAACH,IAAI,+BAAM;IACxD,MAAKI,iBAAiB,GAAG,MAAKA,iBAAiB,CAACJ,IAAI,+BAAM;IAC1D,MAAKK,gBAAgB,GAAG,MAAKA,gBAAgB,CAACL,IAAI,+BAAM;IACxD,MAAKM,WAAW,GAAG,MAAKA,WAAW,CAACN,IAAI,+BAAM;IAC9C,MAAKO,WAAW,GAAG,MAAKA,WAAW,CAACP,IAAI,+BAAM;IAC9C,MAAKQ,YAAY,GAAG,MAAKA,YAAY,CAACR,IAAI,+BAAM;IAChD,MAAKS,cAAc,GAAG,MAAKA,cAAc,CAACT,IAAI,+BAAM;IACpD,MAAKU,UAAU,GAAG,MAAKA,UAAU,CAACV,IAAI,+BAAM;IAC5C,MAAKW,iBAAiB,GAAG,MAAKA,iBAAiB,CAACX,IAAI,+BAAM;IAC1D,MAAKY,cAAc,GAAG,MAAKA,cAAc,CAACZ,IAAI,+BAAM;IACpD,MAAKa,WAAW,GAAG,MAAKA,WAAW,CAACb,IAAI,+BAAM;IAC9C,MAAKc,aAAa,GAAG,MAAKA,aAAa,CAACd,IAAI,+BAAM;IAClD,MAAKe,WAAW,GAAG,MAAKA,WAAW,CAACf,IAAI,+BAAM;IAC9C,MAAKgB,YAAY,GAAG,MAAKA,YAAY,CAAChB,IAAI,+BAAM;IAChD,MAAKiB,cAAc,GAAG,MAAKA,cAAc,CAACjB,IAAI,+BAAM;IACpD,MAAKkB,aAAa,GAAG,MAAKA,aAAa,CAAClB,IAAI,+BAAM;IAAC;EACrD;;EAEA;AACF;AACA;AACA;AACA;EAJE;IAAA;IAAA,OAKA,6BAAoB;MAClB,IAAI,CAAC,IAAI,CAACR,KAAK,CAAC2B,IAAI,CAACC,KAAK,EAAE;QAC1B,IAAI,CAAC5B,KAAK,CAAC6B,aAAa,CAAC,IAAI,CAAC7B,KAAK,CAAC8B,KAAK,kCACpC,IAAI,CAAC9B,KAAK,CAAC2B,IAAI;UAClBC,KAAK,EAAErD;QAAY,GACnB;MACJ;MACA,IAAI,CAACwD,QAAQ,CAAC;QAAEzB,QAAQ,EAAE;MAAK,CAAC,CAAC;IACnC;;IAEA;AACF;AACA;AACA;AACA;AACA;EALE;IAAA;IAAA,OAMA,0CAAiC0B,SAAS,EAAE;MAC1C,IAAI,CAACA,SAAS,CAACL,IAAI,CAACC,KAAK,EAAE;QACzB,IAAI,CAAC5B,KAAK,CAAC6B,aAAa,CAACG,SAAS,CAACF,KAAK,kCACnCE,SAAS,CAACL,IAAI;UACjBC,KAAK,EAAErD;QAAY,GACnB;MACJ;IACF;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;EANE;IAAA;IAAA,OAOA,kBAAS0D,EAAE,EAAE7D,KAAK,EAAE;MAClB,IAAMwD,KAAK,GAAG,IAAI,CAAC5B,KAAK,CAAC2B,IAAI,CAACC,KAAK;MACnC,IAAI,CAAC5B,KAAK,CAAC6B,aAAa,CAAC,IAAI,CAAC7B,KAAK,CAAC8B,KAAK,kCACpC,IAAI,CAAC9B,KAAK,CAAC2B,IAAI;QAClBC,KAAK,kCACAA,KAAK,2BACPK,EAAE,EAAG7D,KAAK;MACZ,GACD;IACJ;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;EANE;IAAA;IAAA,OAOA,sBAAagC,GAAG,EAAEC,IAAI,EAAE;MACtB,IAAI,CAAC0B,QAAQ,CAAC;QAAE5B,QAAQ,EAAE;UAAEC,GAAG,EAAHA,GAAG;UAAEC,IAAI,EAAJA;QAAK;MAAE,CAAC,CAAC;IAC5C;;IAEA;AACF;AACA;AACA;AACA;AACA;AACA;EANE;IAAA;IAAA,OAOA,sBAAaD,GAAG,EAAEC,IAAI,EAAE6B,UAAU,EAAE;MAClC,IAAMN,KAAK,GAAGO,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAAC,IAAI,CAACrC,KAAK,CAAC2B,IAAI,CAACC,KAAK,CAAC,CAAC;MAC/DA,KAAK,CAAC7C,IAAI,CAACqB,GAAG,CAAC,CAAC9B,KAAK,CAAC+B,IAAI,CAAC,mCACtBuB,KAAK,CAAC7C,IAAI,CAACqB,GAAG,CAAC,CAAC9B,KAAK,CAAC+B,IAAI,CAAC;QAC9BjC,KAAK,EAAE+D,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAACH,UAAU,CAAC;MAAC,EAC9C;MACD,IAAI,CAAClC,KAAK,CAAC6B,aAAa,CAAC,IAAI,CAAC7B,KAAK,CAAC8B,KAAK,kCACpC,IAAI,CAAC9B,KAAK,CAAC2B,IAAI;QAClBC,KAAK,EAALA;MAAK,GACL;IACJ;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAA;IAAA,OAKA,0BAAiB;MACf,IAAMA,KAAK,qBAAQ,IAAI,CAAC5B,KAAK,CAAC2B,IAAI,CAACC,KAAK,CAAE;MAC1C,IAAI7D,IAAI,GACN6D,KAAK,CAAC7C,IAAI,CAAC,IAAI,CAACkB,KAAK,CAACE,QAAQ,CAACC,GAAG,CAAC,CAAC9B,KAAK,CAAC,IAAI,CAAC2B,KAAK,CAACE,QAAQ,CAACE,IAAI,CAAC,CAACtC,IAAI;MAC1E6D,KAAK,CAAC7C,IAAI,CAAC,IAAI,CAACkB,KAAK,CAACE,QAAQ,CAACC,GAAG,CAAC,CAAC9B,KAAK,CAAC,IAAI,CAAC2B,KAAK,CAACE,QAAQ,CAACE,IAAI,CAAC,CAACtC,IAAI,GACtEA,IAAI,KAAK,QAAQ,GAAG,MAAM,GAAG,QAAQ;MACvC,IAAI,CAACiC,KAAK,CAAC6B,aAAa,CAAC,IAAI,CAAC7B,KAAK,CAAC8B,KAAK,kCACpC,IAAI,CAAC9B,KAAK,CAAC2B,IAAI;QAClBC,KAAK,EAALA;MAAK,GACL;IACJ;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAA;IAAA,OAKA,6BAAoB;MAClB,IAAMA,KAAK,GAAG,IAAI,CAAC5B,KAAK,CAAC2B,IAAI,CAACC,KAAK;MACnC,IAAI,CAAC5B,KAAK,CAAC6B,aAAa,CAAC,IAAI,CAAC7B,KAAK,CAAC8B,KAAK,kCACpC,IAAI,CAAC9B,KAAK,CAAC2B,IAAI;QAClBC,KAAK,kCACAA,KAAK;UACR7C,IAAI,+BACC6C,KAAK,CAAC7C,IAAI,CAACuD,KAAK,CAAC,CAAC,EAAE,IAAI,CAACrC,KAAK,CAACE,QAAQ,CAACC,GAAG,CAAC,IAC/C/B,QAAQ,CAACuD,KAAK,CAAC7C,IAAI,CAAC,CAAC,CAAC,CAACT,KAAK,CAAC,sBAC1BsD,KAAK,CAAC7C,IAAI,CAACuD,KAAK,CAAC,IAAI,CAACrC,KAAK,CAACE,QAAQ,CAACC,GAAG,CAAC;QAC7C;MACF,GACD;MACF,IAAI,CAAC2B,QAAQ,CAAC;QACZ5B,QAAQ,EAAE;UACRC,GAAG,EAAE,IAAI,CAACH,KAAK,CAACE,QAAQ,CAACC,GAAG,GAAG,CAAC;UAChCC,IAAI,EAAE,IAAI,CAACJ,KAAK,CAACE,QAAQ,CAACE;QAC5B;MACF,CAAC,CAAC;IACJ;;IAEA;AACF;AACA;AACA;EAHE;IAAA;IAAA,OAIA,4BAAmB;MACjB,IAAMuB,KAAK,GAAG,IAAI,CAAC5B,KAAK,CAAC2B,IAAI,CAACC,KAAK;MACnC,IAAI,CAAC5B,KAAK,CAAC6B,aAAa,CAAC,IAAI,CAAC7B,KAAK,CAAC8B,KAAK,kCACpC,IAAI,CAAC9B,KAAK,CAAC2B,IAAI;QAClBC,KAAK,kCACAA,KAAK;UACR7C,IAAI,+BACC6C,KAAK,CAAC7C,IAAI,CAACuD,KAAK,CAAC,CAAC,EAAE,IAAI,CAACrC,KAAK,CAACE,QAAQ,CAACC,GAAG,GAAG,CAAC,CAAC,IACnD/B,QAAQ,CAACuD,KAAK,CAAC7C,IAAI,CAAC,CAAC,CAAC,CAACT,KAAK,CAAC,sBAC1BsD,KAAK,CAAC7C,IAAI,CAACuD,KAAK,CAAC,IAAI,CAACrC,KAAK,CAACE,QAAQ,CAACC,GAAG,GAAG,CAAC,CAAC;QACjD;MACF,GACD;IACJ;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAA;IAAA,OAKA,6BAAoB;MAAA;MAClB,IAAMwB,KAAK,GAAG,IAAI,CAAC5B,KAAK,CAAC2B,IAAI,CAACC,KAAK;MACnC,IAAI,CAAC5B,KAAK,CAAC6B,aAAa,CAAC,IAAI,CAAC7B,KAAK,CAAC8B,KAAK,kCACpC,IAAI,CAAC9B,KAAK,CAAC2B,IAAI;QAClBC,KAAK,kCACAA,KAAK;UACR7C,IAAI,EAAE,KAAI6C,KAAK,CAAC7C,IAAI,EAAE,UAACqB,GAAG,EAAEmC,KAAK;YAAA,uCAC5BnC,GAAG;cACN9B,KAAK,+BACA8B,GAAG,CAAC9B,KAAK,CAACgE,KAAK,CAAC,CAAC,EAAE,MAAI,CAACrC,KAAK,CAACE,QAAQ,CAACE,IAAI,CAAC,IAC/CnC,SAAS,CAAC0D,KAAK,CAAC7C,IAAI,CAACwD,KAAK,CAAC,CAACjE,KAAK,CAAC,MAAI,CAAC2B,KAAK,CAACE,QAAQ,CAACE,IAAI,CAAC,CAACtC,IAAI,CAAC,sBAC9DqC,GAAG,CAAC9B,KAAK,CAACgE,KAAK,CAAC,MAAI,CAACrC,KAAK,CAACE,QAAQ,CAACE,IAAI,CAAC;YAC7C;UAAA,CACD;QAAC;MACJ,GACD;MACF,IAAI,CAAC0B,QAAQ,CAAC;QACZ5B,QAAQ,EAAE;UACRC,GAAG,EAAE,IAAI,CAACH,KAAK,CAACE,QAAQ,CAACC,GAAG;UAC5BC,IAAI,EAAE,IAAI,CAACJ,KAAK,CAACE,QAAQ,CAACE,IAAI,GAAG;QACnC;MACF,CAAC,CAAC;IACJ;;IAEA;AACF;AACA;AACA;EAHE;IAAA;IAAA,OAIA,4BAAmB;MAAA;MACjB,IAAMuB,KAAK,GAAG,IAAI,CAAC5B,KAAK,CAAC2B,IAAI,CAACC,KAAK;MACnC,IAAI,CAAC5B,KAAK,CAAC6B,aAAa,CAAC,IAAI,CAAC7B,KAAK,CAAC8B,KAAK,kCACpC,IAAI,CAAC9B,KAAK,CAAC2B,IAAI;QAClBC,KAAK,kCACAA,KAAK;UACR7C,IAAI,EAAE,KAAI6C,KAAK,CAAC7C,IAAI,EAAE,UAACqB,GAAG,EAAEmC,KAAK;YAAA,uCAC5BnC,GAAG;cACN9B,KAAK,+BACA8B,GAAG,CAAC9B,KAAK,CAACgE,KAAK,CAAC,CAAC,EAAE,MAAI,CAACrC,KAAK,CAACE,QAAQ,CAACE,IAAI,GAAG,CAAC,CAAC,IACnDnC,SAAS,CAAC0D,KAAK,CAAC7C,IAAI,CAACwD,KAAK,CAAC,CAACjE,KAAK,CAAC,MAAI,CAAC2B,KAAK,CAACE,QAAQ,CAACE,IAAI,CAAC,CAACtC,IAAI,CAAC,sBAC9DqC,GAAG,CAAC9B,KAAK,CAACgE,KAAK,CAAC,MAAI,CAACrC,KAAK,CAACE,QAAQ,CAACE,IAAI,GAAG,CAAC,CAAC;YACjD;UAAA,CACD;QAAC;MACJ,GACD;IACJ;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAA;IAAA,OAKA,uBAAc;MAAA;MACZ,IAAMuB,KAAK,GAAG,IAAI,CAAC5B,KAAK,CAAC2B,IAAI,CAACC,KAAK;MAEnC,IAAI,IAAI,CAAC3B,KAAK,CAACE,QAAQ,CAACE,IAAI,KAAKuB,KAAK,CAAC7C,IAAI,CAAC,CAAC,CAAC,CAACT,KAAK,CAACkE,MAAM,GAAG,CAAC,EAAE;QAC/D,IAAI,CAACT,QAAQ,CAAC;UACZ5B,QAAQ,EAAE;YACRC,GAAG,EAAE,IAAI,CAACH,KAAK,CAACE,QAAQ,CAACC,GAAG;YAC5BC,IAAI,EAAE,IAAI,CAACJ,KAAK,CAACE,QAAQ,CAACE,IAAI,GAAG;UACnC;QACF,CAAC,CAAC;MACJ;MAEA,IAAI,CAACL,KAAK,CAAC6B,aAAa,CAAC,IAAI,CAAC7B,KAAK,CAAC8B,KAAK,kCACpC,IAAI,CAAC9B,KAAK,CAAC2B,IAAI;QAClBC,KAAK,kCACAA,KAAK;UACR7C,IAAI,EAAE,KAAI6C,KAAK,CAAC7C,IAAI,EAAE,UAACqB,GAAG;YAAA,uCACrBA,GAAG;cACN9B,KAAK,EAAE,QACL8B,GAAG,CAAC9B,KAAK,EACT,UAAC+B,IAAI,EAAEkC,KAAK;gBAAA,OAAKA,KAAK,KAAK,MAAI,CAACtC,KAAK,CAACE,QAAQ,CAACE,IAAI;cAAA;YACpD;UAAA,CACD;QAAC;MACJ,GACD;IACJ;;IAEA;AACF;AACA;AACA;AACA;AACA;EALE;IAAA;IAAA,OAMA,uBAAc;MAAA;MACZ,IAAMuB,KAAK,GAAG,IAAI,CAAC5B,KAAK,CAAC2B,IAAI,CAACC,KAAK;MAEnC,IAAI,IAAI,CAAC3B,KAAK,CAACE,QAAQ,CAACC,GAAG,KAAKwB,KAAK,CAAC7C,IAAI,CAACyD,MAAM,GAAG,CAAC,EAAE;QACrD,IAAI,CAACT,QAAQ,CAAC;UACZ5B,QAAQ,EAAE;YACRC,GAAG,EAAE,IAAI,CAACH,KAAK,CAACE,QAAQ,CAACC,GAAG,GAAG,CAAC;YAChCC,IAAI,EAAE,IAAI,CAACJ,KAAK,CAACE,QAAQ,CAACE;UAC5B;QACF,CAAC,CAAC;MACJ;MAEA,IAAI,CAACL,KAAK,CAAC6B,aAAa,CAAC,IAAI,CAAC7B,KAAK,CAAC8B,KAAK,kCACpC,IAAI,CAAC9B,KAAK,CAAC2B,IAAI;QAClBC,KAAK,kCACAA,KAAK;UACR7C,IAAI,EAAE,QACJ6C,KAAK,CAAC7C,IAAI,EACV,UAACqB,GAAG,EAAEmC,KAAK;YAAA,OAAKA,KAAK,KAAK,MAAI,CAACtC,KAAK,CAACE,QAAQ,CAACC,GAAG;UAAA;QAClD;MACF,GACD;IACJ;;IAEA;AACF;AACA;AACA;AACA;AACA;EALE;IAAA;IAAA,OAMA,oBAAWhC,KAAK,EAAE;MAChB,IAAMwD,KAAK,GAAG,IAAI,CAAC5B,KAAK,CAAC2B,IAAI,CAACC,KAAK;MACnC,IAAI,CAAC5B,KAAK,CAAC6B,aAAa,CAAC,IAAI,CAAC7B,KAAK,CAAC8B,KAAK,kCACpC,IAAI,CAAC9B,KAAK,CAAC2B,IAAI;QAClBC,KAAK,kCACAA,KAAK,2BACPxD,KAAK,EAAG,CAACwD,KAAK,CAACxD,KAAK,CAAC;MACvB,GACD;IACJ;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAA;IAAA,OAKA,6BAAoB;MAClB,IAAI,CAAC8C,UAAU,CAAC,aAAa,CAAC;IAChC;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAA;IAAA,OAKA,0BAAiB;MACf,IAAI,CAACA,UAAU,CAAC,UAAU,CAAC;IAC7B;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAA;IAAA,OAKA,uBAAc;MACZ,IAAI,CAACA,UAAU,CAAC,OAAO,CAAC;IAC1B;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAA;IAAA,OAKA,yBAAgB;MACd,IAAI,CAACA,UAAU,CAAC,SAAS,CAAC;IAC5B;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAA;IAAA,OAKA,uBAAc;MACZ,IAAI,CAACA,UAAU,CAAC,OAAO,CAAC;IAC1B;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAA;IAAA,OAKA,wBAAe;MACb,IAAI,CAACA,UAAU,CAAC,QAAQ,CAAC;IAC3B;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAA;IAAA,OAKA,0BAAiB;MACf,IAAI,CAACA,UAAU,CAAC,UAAU,CAAC;IAC7B;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAA;IAAA,OAKA,yBAAgB;MACd,IAAI,CAACA,UAAU,CAAC,SAAS,CAAC;IAC5B;EAAC;IAAA;IAAA,OAED,4BAAmBuB,SAAS,EAAE;MAC5B,IAAIA,SAAS,CAACtC,QAAQ,IAAI,CAAC,IAAI,CAACH,KAAK,CAACG,QAAQ,EAAE;QAC9C,IAAI,CAAC4B,QAAQ,CAAC;UAAE5B,QAAQ,EAAE;QAAK,CAAC,CAAC;MACnC;IACF;;IAEA;AACF;AACA;AACA;AACA;EAJE;IAAA;IAAA,OAKA,kBAAS;MAAA;QAAA;QAAA;QAAA;QAAA;QAAA;MACP,IAAMD,OAAO,GAAG,8BAAI,CAACF,KAAK,CAAC2B,IAAI,CAACC,KAAK,oFAArB,sBAAuB7C,IAAI,qFAA3B,uBAA8B,CAAC,CAAC,2DAAhC,uBAAkCT,KAAK,KAAI,EAAE;MAC7D,IAAMS,IAAI,GACR,+BAAI,CAACiB,KAAK,CAAC2B,IAAI,CAACC,KAAK,qFAArB,uBAAuB7C,IAAI,2DAA3B,uBAA6B2D,MAAM,CAAC,UAACC,CAAC,EAAEJ,KAAK;QAAA,OAAKA,KAAK,GAAG,CAAC;MAAA,EAAC,KAAI,EAAE;MAEpE;QACE;QACA;QACA;UAAK,SAAS,EAAE5F,EAAE,CAAC,aAAa,EAAE;YAAEwD,QAAQ,EAAE,IAAI,CAACH,KAAK,CAACG;UAAS,CAAC,CAAE;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,GAClE,IAAI,CAACH,KAAK,CAACG,QAAQ,IAClB;UAAK,SAAS,EAAC,SAAS;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,GACtB,MAAC,MAAM,CAAC,KAAK;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,GACX,MAAC,MAAM;UACL,IAAI;UACJ,KAAK;UACL,OAAO,EAAE,IAAI,CAACO,iBAAkB;UAChC,KAAK,EAAE,IAAI,CAACV,KAAK,CAAC4C,IAAI,CAACC,aAAa,CAAC7D,QAAQ,CAACC,eAAe,CAAE;UAC/D,cAAY,IAAI,CAACe,KAAK,CAAC4C,IAAI,CAACC,aAAa,CACvC7D,QAAQ,CAACC,eAAe,CACxB;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,GAEF,MAAC,IAAI;UAAC,IAAI,EAAE/B,YAAa;UAAC,IAAI,EAAC,MAAM;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,EAAG,CACjC,CACI,EACf,MAAC,MAAM,CAAC,KAAK;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,GACX,MAAC,MAAM;UACL,IAAI;UACJ,KAAK;UACL,OAAO,EAAE,IAAI,CAACyD,gBAAiB;UAC/B,KAAK,EAAE,IAAI,CAACX,KAAK,CAAC4C,IAAI,CAACC,aAAa,CAAC7D,QAAQ,CAACE,cAAc,CAAE;UAC9D,cAAY,IAAI,CAACc,KAAK,CAAC4C,IAAI,CAACC,aAAa,CACvC7D,QAAQ,CAACE,cAAc,CACvB;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,GAEF,MAAC,IAAI;UAAC,IAAI,EAAE/B,WAAY;UAAC,IAAI,EAAC,MAAM;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,EAAG,CAChC,CACI,EACf,MAAC,MAAM,CAAC,KAAK;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,GACX,MAAC,MAAM;UACL,IAAI;UACJ,KAAK;UACL,OAAO,EAAE,IAAI,CAAC2D,WAAY;UAC1B,QAAQ,EACN,IAAI,CAACd,KAAK,CAAC2B,IAAI,CAACC,KAAK,IACrB,IAAI,CAAC5B,KAAK,CAAC2B,IAAI,CAACC,KAAK,CAAC7C,IAAI,CAACyD,MAAM,KAAK,CACvC;UACD,KAAK,EAAE,IAAI,CAACxC,KAAK,CAAC4C,IAAI,CAACC,aAAa,CAAC7D,QAAQ,CAACG,SAAS,CAAE;UACzD,cAAY,IAAI,CAACa,KAAK,CAAC4C,IAAI,CAACC,aAAa,CAAC7D,QAAQ,CAACG,SAAS,CAAE;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,GAE9D,MAAC,IAAI;UAAC,IAAI,EAAE7B,YAAa;UAAC,IAAI,EAAC,MAAM;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,EAAG,CACjC,CACI,EACf,MAAC,MAAM,CAAC,KAAK;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,GACX,MAAC,MAAM;UACL,IAAI;UACJ,KAAK;UACL,OAAO,EAAE,IAAI,CAACsD,iBAAkB;UAChC,KAAK,EAAE,IAAI,CAACZ,KAAK,CAAC4C,IAAI,CAACC,aAAa,CAAC7D,QAAQ,CAACI,eAAe,CAAE;UAC/D,cAAY,IAAI,CAACY,KAAK,CAAC4C,IAAI,CAACC,aAAa,CACvC7D,QAAQ,CAACI,eAAe,CACxB;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,GAEF,MAAC,IAAI;UAAC,IAAI,EAAEhC,YAAa;UAAC,IAAI,EAAC,MAAM;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,EAAG,CACjC,CACI,EACf,MAAC,MAAM,CAAC,KAAK;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,GACX,MAAC,MAAM;UACL,IAAI;UACJ,KAAK;UACL,OAAO,EAAE,IAAI,CAACyD,gBAAiB;UAC/B,KAAK,EAAE,IAAI,CAACb,KAAK,CAAC4C,IAAI,CAACC,aAAa,CAAC7D,QAAQ,CAACK,cAAc,CAAE;UAC9D,cAAY,IAAI,CAACW,KAAK,CAAC4C,IAAI,CAACC,aAAa,CACvC7D,QAAQ,CAACK,cAAc,CACvB;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,GAEF,MAAC,IAAI;UAAC,IAAI,EAAEhC,WAAY;UAAC,IAAI,EAAC,MAAM;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,EAAG,CAChC,CACI,EACf,MAAC,MAAM,CAAC,KAAK;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,GACX,MAAC,MAAM;UACL,IAAI;UACJ,KAAK;UACL,OAAO,EAAE,IAAI,CAAC0D,WAAY;UAC1B,QAAQ,EACN,IAAI,CAACf,KAAK,CAAC2B,IAAI,CAACC,KAAK,IACrB,IAAI,CAAC5B,KAAK,CAAC2B,IAAI,CAACC,KAAK,CAAC7C,IAAI,CAAC,CAAC,CAAC,CAACT,KAAK,CAACkE,MAAM,KAAK,CAChD;UACD,KAAK,EAAE,IAAI,CAACxC,KAAK,CAAC4C,IAAI,CAACC,aAAa,CAAC7D,QAAQ,CAACM,SAAS,CAAE;UACzD,cAAY,IAAI,CAACU,KAAK,CAAC4C,IAAI,CAACC,aAAa,CAAC7D,QAAQ,CAACM,SAAS,CAAE;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,GAE9D,MAAC,IAAI;UAAC,IAAI,EAAE/B,YAAa;UAAC,IAAI,EAAC,MAAM;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,EAAG,CACjC,CACI,CAElB,EACA,IAAI,CAACyC,KAAK,CAAC2B,IAAI,CAACC,KAAK,IACpB,MAAC,KAAK;UACJ,KAAK,EAAE,IAAI,CAAC5B,KAAK,CAAC2B,IAAI,CAACC,KAAK,CAACnD,KAAM;UACnC,OAAO,EAAE,IAAI,CAACuB,KAAK,CAAC2B,IAAI,CAACC,KAAK,CAAClD,OAAQ;UACvC,KAAK,EAAE,IAAI,CAACsB,KAAK,CAAC2B,IAAI,CAACC,KAAK,CAACjD,KAAK,GAAG,MAAM,GAAG,KAAM;UACpD,MAAM,EAAE,IAAI,CAACqB,KAAK,CAAC2B,IAAI,CAACC,KAAK,CAAChD,MAAO;UACrC,QAAQ,EAAE,IAAI,CAACoB,KAAK,CAAC2B,IAAI,CAACC,KAAK,CAAC/C,QAAS;UACzC,OAAO,EAAE,IAAI,CAACmB,KAAK,CAAC2B,IAAI,CAACC,KAAK,CAAC9C,OAAQ;UACvC,SAAS,EAAC,mBAAmB;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,GAE5B,CAAC,IAAI,CAACkB,KAAK,CAAC2B,IAAI,CAACC,KAAK,CAACpD,WAAW,GACjC,MAAC,KAAK,CAAC,MAAM;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,GACX,MAAC,KAAK,CAAC,GAAG;UAAC,SAAS,EAAC,MAAM;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,GACxB0B,OAAO,CAAC4C,GAAG,CAAC,UAACzC,IAAI,EAAE0C,SAAS;UAAA,OAC3B,MAAC,KAAK,CAAC,UAAU;YACf,GAAG,EAAE1C,IAAI,CAAClC,GAAI;YACd,SAAS,EAAC,MAAM;YAChB,aAAa,EAAC,QAAQ;YAAA;YAAA;cAAA;cAAA;cAAA;YAAA;UAAA,GAEtB,MAAC,IAAI;YACH,KAAK,EAAEkC,IAAI,CAACjC,KAAM;YAClB,GAAG,EAAE,CAAE;YACP,IAAI,EAAE2E,SAAU;YAChB,YAAY,EAAE,MAAI,CAACtC,YAAa;YAChC,QAAQ,EACN,MAAI,CAACT,KAAK,CAACG,QAAQ,IACnB,MAAI,CAACF,KAAK,CAACE,QAAQ,IACnB,CAAC,KAAK,MAAI,CAACF,KAAK,CAACE,QAAQ,CAACC,GAAG,IAC7B2C,SAAS,KAAK,MAAI,CAAC9C,KAAK,CAACE,QAAQ,CAACE,IACnC;YACD,YAAY,EAAE,MAAI,CAACJ,KAAK,CAACE,QAAS;YAClC,oBAAoB,EAAE,MAAI,CAACH,KAAK,CAACG,QAAS;YAC1C,UAAU,EAAE,MAAI,CAACH,KAAK,CAACgD,UAAW;YAClC,aAAa,EAAE,MAAI,CAAChD,KAAK,CAACiD,aAAc;YACxC,QAAQ,EAAE,MAAI,CAACjC,YAAa;YAC5B,KAAK,EAAE,MAAI,CAAChB,KAAK,CAACuC,KAAM;YAAA;YAAA;cAAA;cAAA;cAAA;YAAA;UAAA,EACxB,CACe;QAAA,CACpB,CAAC,CACQ,CACC,GAEf,EACD,EACD,MAAC,KAAK,CAAC,IAAI;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,GACR,KAAIxD,IAAI,EAAE,UAACqB,GAAG,EAAE8C,QAAQ;UAAA,OACvB,MAAC,KAAK,CAAC,GAAG;YAAC,GAAG,EAAE9C,GAAG,CAACjC,GAAI;YAAA;YAAA;cAAA;cAAA;cAAA;YAAA;UAAA,GACrB,KAAIiC,GAAG,CAAC9B,KAAK,EAAE,UAAC+B,IAAI,EAAE0C,SAAS;YAAA,OAC9B,MAAC,KAAK,CAAC,IAAI;cACT,GAAG,EAAE1C,IAAI,CAAClC,GAAI;cACd,SAAS,EAAC,MAAM;cAChB,aAAa,EAAC,QAAQ;cACtB,SAAS,EACP,MAAI,CAAC6B,KAAK,CAACG,QAAQ,IACnB,MAAI,CAACF,KAAK,CAACE,QAAQ,IACnB+C,QAAQ,GAAG,CAAC,KAAK,MAAI,CAACjD,KAAK,CAACE,QAAQ,CAACC,GAAG,IACxC2C,SAAS,KAAK,MAAI,CAAC9C,KAAK,CAACE,QAAQ,CAACE,IAAI,IACtC,MAAI,CAACL,KAAK,CAACG,QAAQ,GACf,UAAU,GACV,EACL;cAAA;cAAA;gBAAA;gBAAA;gBAAA;cAAA;YAAA,GAED,MAAC,IAAI;cACH,KAAK,EAAEE,IAAI,CAACjC,KAAM;cAClB,GAAG,EAAE8E,QAAQ,GAAG,CAAE;cAClB,IAAI,EAAEH,SAAU;cAChB,YAAY,EAAE,MAAI,CAACtC,YAAa;cAChC,QAAQ,EACN,MAAI,CAACT,KAAK,CAACG,QAAQ,IACnB,MAAI,CAACF,KAAK,CAACE,QAAQ,IACnB+C,QAAQ,GAAG,CAAC,KAAK,MAAI,CAACjD,KAAK,CAACE,QAAQ,CAACC,GAAG,IACxC2C,SAAS,KAAK,MAAI,CAAC9C,KAAK,CAACE,QAAQ,CAACE,IACnC;cACD,YAAY,EAAE,MAAI,CAACJ,KAAK,CAACE,QAAS;cAClC,oBAAoB,EAAE,MAAI,CAACH,KAAK,CAACG,QAAS;cAC1C,UAAU,EAAE,MAAI,CAACH,KAAK,CAACgD,UAAW;cAClC,aAAa,EAAE,MAAI,CAAChD,KAAK,CAACiD,aAAc;cACxC,QAAQ,EAAE,MAAI,CAACjC,YAAa;cAC5B,KAAK,EAAE,MAAI,CAAChB,KAAK,CAACuC,KAAM;cAAA;cAAA;gBAAA;gBAAA;gBAAA;cAAA;YAAA,EACxB,CACS;UAAA,CACd,CAAC,CACQ;QAAA,CACb,CAAC,CACS,CAEhB,EACA,IAAI,CAACvC,KAAK,CAACG,QAAQ,IAAI,IAAI,CAACF,KAAK,CAACE,QAAQ,IAAI,IAAI,CAACF,KAAK,CAACK,QAAQ,IAChE,MAAC,MAAM;UAAC,IAAI,EAAE6C,QAAQ,CAACC,cAAc,CAAC,oBAAoB,CAAE;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,GAC1D,MAAC,IAAI;UAAC,MAAM,EAAC,MAAM;UAAC,QAAQ,EAAE,kBAACC,KAAK;YAAA,OAAKA,KAAK,CAACC,cAAc,EAAE;UAAA,CAAC;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,GAC9D,MAAC,OAAO;UAAC,SAAS;UAAC,QAAQ;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,GACzB,MAAC,gBAAgB;UAAC,EAAE,EAAC,OAAO;UAAC,cAAc,EAAC,OAAO;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,EAAG,CAC9C,EACV,MAAC,OAAO;UAAC,QAAQ;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,GACf,MAAC,KAAK;UACJ,EAAE,EAAC,aAAa;UAChB,KAAK,EAAE,IAAI,CAACtD,KAAK,CAAC4C,IAAI,CAACC,aAAa,CAAC7D,QAAQ,CAACR,WAAW,CAAE;UAC3D,IAAI,EAAC,SAAS;UACd,KAAK,EACH,IAAI,CAACwB,KAAK,CAAC2B,IAAI,CAACC,KAAK,IAAI,IAAI,CAAC5B,KAAK,CAAC2B,IAAI,CAACC,KAAK,CAACpD,WAChD;UACD,QAAQ,EAAE;YAAA,OAAM,MAAI,CAAC2C,iBAAiB,EAAE;UAAA,CAAC;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,EACzC,EACF,MAAC,KAAK;UACJ,EAAE,EAAC,UAAU;UACb,KAAK,EAAE,IAAI,CAACnB,KAAK,CAAC4C,IAAI,CAACC,aAAa,CAAC7D,QAAQ,CAACO,QAAQ,CAAE;UACxD,WAAW,EAAE,IAAI,CAACS,KAAK,CAAC4C,IAAI,CAACC,aAAa,CACxC7D,QAAQ,CAACQ,mBAAmB,CAC5B;UACF,IAAI,EAAC,SAAS;UACd,KAAK,EACH,IAAI,CAACQ,KAAK,CAAC2B,IAAI,CAACC,KAAK,IAAI,IAAI,CAAC5B,KAAK,CAAC2B,IAAI,CAACC,KAAK,CAACrC,QAChD;UACD,QAAQ,EAAE;YAAA,OAAM,MAAI,CAAC6B,cAAc,EAAE;UAAA,CAAC;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,EACtC,EACF,MAAC,KAAK;UACJ,EAAE,EAAC,OAAO;UACV,KAAK,EAAE,IAAI,CAACpB,KAAK,CAAC4C,IAAI,CAACC,aAAa,CAAC7D,QAAQ,CAACP,KAAK,CAAE;UACrD,IAAI,EAAC,SAAS;UACd,KAAK,EAAE,IAAI,CAACuB,KAAK,CAAC2B,IAAI,CAACC,KAAK,IAAI,IAAI,CAAC5B,KAAK,CAAC2B,IAAI,CAACC,KAAK,CAACnD,KAAM;UAC5D,QAAQ,EAAE;YAAA,OAAM,MAAI,CAAC4C,WAAW,EAAE;UAAA,CAAC;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,EACnC,EACF,MAAC,KAAK;UACJ,EAAE,EAAC,QAAQ;UACX,KAAK,EAAE,IAAI,CAACrB,KAAK,CAAC4C,IAAI,CAACC,aAAa,CAAC7D,QAAQ,CAACJ,MAAM,CAAE;UACtD,IAAI,EAAC,SAAS;UACd,KAAK,EAAE,IAAI,CAACoB,KAAK,CAAC2B,IAAI,CAACC,KAAK,IAAI,IAAI,CAAC5B,KAAK,CAAC2B,IAAI,CAACC,KAAK,CAAChD,MAAO;UAC7D,QAAQ,EAAE,IAAI,CAAC4C,YAAa;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,EAC5B,EACF,MAAC,KAAK;UACJ,EAAE,EAAC,SAAS;UACZ,KAAK,EAAE,IAAI,CAACxB,KAAK,CAAC4C,IAAI,CAACC,aAAa,CAAC7D,QAAQ,CAACF,OAAO,CAAE;UACvD,IAAI,EAAC,SAAS;UACd,KAAK,EAAE,IAAI,CAACkB,KAAK,CAAC2B,IAAI,CAACC,KAAK,IAAI,IAAI,CAAC5B,KAAK,CAAC2B,IAAI,CAACC,KAAK,CAAC9C,OAAQ;UAC9D,QAAQ,EAAE,IAAI,CAAC4C,aAAc;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,EAC7B,EACF,MAAC,KAAK;UACJ,EAAE,EAAC,SAAS;UACZ,KAAK,EAAE,IAAI,CAAC1B,KAAK,CAAC4C,IAAI,CAACC,aAAa,CAAC7D,QAAQ,CAACN,OAAO,CAAE;UACvD,IAAI,EAAC,SAAS;UACd,KAAK,EAAE,IAAI,CAACsB,KAAK,CAAC2B,IAAI,CAACC,KAAK,IAAI,IAAI,CAAC5B,KAAK,CAAC2B,IAAI,CAACC,KAAK,CAAClD,OAAQ;UAC9D,QAAQ,EAAE;YAAA,OAAM,MAAI,CAAC4C,aAAa,EAAE;UAAA,CAAC;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,EACrC,EACF,MAAC,KAAK;UACJ,EAAE,EAAC,OAAO;UACV,KAAK,EAAE,IAAI,CAACtB,KAAK,CAAC4C,IAAI,CAACC,aAAa,CAAC7D,QAAQ,CAACL,KAAK,CAAE;UACrD,IAAI,EAAC,SAAS;UACd,KAAK,EAAE,IAAI,CAACqB,KAAK,CAAC2B,IAAI,CAACC,KAAK,IAAI,IAAI,CAAC5B,KAAK,CAAC2B,IAAI,CAACC,KAAK,CAACjD,KAAM;UAC5D,QAAQ,EAAE,IAAI,CAAC4C,WAAY;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,EAC3B,EACF,MAAC,KAAK;UACJ,EAAE,EAAC,UAAU;UACb,KAAK,EAAE,IAAI,CAACvB,KAAK,CAAC4C,IAAI,CAACC,aAAa,CAAC7D,QAAQ,CAACH,QAAQ,CAAE;UACxD,IAAI,EAAC,SAAS;UACd,KAAK,EACH,IAAI,CAACmB,KAAK,CAAC2B,IAAI,CAACC,KAAK,IAAI,IAAI,CAAC5B,KAAK,CAAC2B,IAAI,CAACC,KAAK,CAAC/C,QAChD;UACD,QAAQ,EAAE,IAAI,CAAC4C,cAAe;UAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QAAA,EAC9B,CACM,CACL,CAEV;MACG;IAEV;EAAC;EAAA;AAAA,EA1qBgBrF,SAAS;AAAA,gBAAtB2D,IAAI,eAMW;EACjB4B,IAAI,EAAEtF,SAAS,CAACkH,QAAQ,CAAClH,SAAS,CAACmH,GAAG,CAAC,CAACC,UAAU;EAClDC,QAAQ,EAAErH,SAAS,CAACsH,IAAI;EACxBpB,KAAK,EAAElG,SAAS,CAACuH,MAAM,CAACH,UAAU;EAClCtD,QAAQ,EAAE9D,SAAS,CAACsH,IAAI,CAACF,UAAU;EACnC3B,KAAK,EAAEzF,SAAS,CAACwH,MAAM,CAACJ,UAAU;EAClCT,UAAU,EAAE3G,SAAS,CAACyH,IAAI,CAACL,UAAU;EACrC5B,aAAa,EAAExF,SAAS,CAACyH,IAAI,CAACL,UAAU;EACxCM,aAAa,EAAE1H,SAAS,CAACyH,IAAI,CAACL,UAAU;EACxCO,aAAa,EAAE3H,SAAS,CAACyH,IAAI,CAACL,UAAU;EACxCQ,aAAa,EAAE5H,SAAS,CAACyH,IAAI,CAACL,UAAU;EACxCS,oBAAoB,EAAE7H,SAAS,CAACyH,IAAI,CAACL,UAAU;EAC/CU,gBAAgB,EAAE9H,SAAS,CAACyH,IAAI,CAACL,UAAU;EAC3CR,aAAa,EAAE5G,SAAS,CAACyH,IAAI,CAACL;AAChC,CAAC;AAAA,gBApBG1D,IAAI,kBA2Bc;EACpB2D,QAAQ,EAAE;AACZ,CAAC;AAgpBH,oBAAe5G,UAAU,CAACiD,IAAI,CAAC;AAAC;AAAA"},"metadata":{"react-intl":{"messages":[{"id":"Insert row before","defaultMessage":"Insert row before"},{"id":"Insert row after","defaultMessage":"Insert row after"},{"id":"Delete row","defaultMessage":"Delete row"},{"id":"Insert col before","defaultMessage":"Insert col before"},{"id":"Insert col after","defaultMessage":"Insert col after"},{"id":"Delete col","defaultMessage":"Delete col"},{"id":"Hide headers","defaultMessage":"Hide headers"},{"id":"Make the table sortable","defaultMessage":"Make the table sortable"},{"id":"Visible only in view mode","defaultMessage":"Visible only in view mode"},{"id":"Fixed width table cells","defaultMessage":"Fixed width table cells"},{"id":"Make the table compact","defaultMessage":"Make the table compact"},{"id":"Reduce complexity","defaultMessage":"Reduce complexity"},{"id":"Divide each row into separate cells","defaultMessage":"Divide each row into separate cells"},{"id":"Table color inverted","defaultMessage":"Table color inverted"},{"id":"Stripe alternate rows with color","defaultMessage":"Stripe alternate rows with color"},{"id":"Left","defaultMessage":"Left"},{"id":"Center","defaultMessage":"Center"},{"id":"Right","defaultMessage":"Right"},{"id":"Bottom","defaultMessage":"Bottom"},{"id":"Middle","defaultMessage":"Middle"},{"id":"Top","defaultMessage":"Top"},{"id":"Table","defaultMessage":"Table"}]}},"sourceType":"module","externalDependencies":[]}