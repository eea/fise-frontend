{"ast":null,"code":"import _extends from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/extends.js\";\nimport _regeneratorRuntime from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _toConsumableArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _cloneDeep from \"lodash/cloneDeep\";\nimport _without from \"lodash/without\";\nimport _pickBy from \"lodash/pickBy\";\nimport _mapValues from \"lodash/mapValues\";\nimport _map from \"lodash/map\";\nimport _keys from \"lodash/keys\";\nimport _isEmpty from \"lodash/isEmpty\";\nimport _findIndex from \"lodash/findIndex\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Form/Form.jsx\";\nvar __jsx = React.createElement;\n/**\n * Form component.\n * @module components/manage/Form/Form\n */\n\nimport { BlocksForm, Field, Icon, Toast } from '@plone/volto/components';\nimport { difference, FormValidation, getBlocksFieldname, getBlocksLayoutFieldname, messages } from '@plone/volto/helpers';\nimport aheadSVG from '@plone/volto/icons/ahead.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport isBoolean from 'lodash/isBoolean';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Portal } from 'react-portal';\nimport { connect } from 'react-redux';\nimport { Button, Container, Form as UiForm, Message, Segment, Tab } from 'semantic-ui-react';\nimport { v4 as uuid } from 'uuid';\nimport { toast } from 'react-toastify';\nimport { BlocksToolbar, UndoToolbar } from '@plone/volto/components';\nimport { setSidebarTab } from '@plone/volto/actions';\nimport { compose } from 'redux';\nimport config from '@plone/volto/registry';\n\n/**\n * Form container class.\n * @class Form\n * @extends Component\n */\nvar Form = /*#__PURE__*/function (_Component) {\n  _inherits(Form, _Component);\n  var _super = _createSuper(Form);\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Form\n   */\n  function Form(props) {\n    var _this;\n    _classCallCheck(this, Form);\n    _this = _super.call(this, props);\n    _defineProperty(_assertThisInitialized(_this), \"getOnlyFormModifiedValues\", function () {\n      var fieldsModified = Object.keys(difference(_this.state.formData, _this.state.initialFormData));\n      return _objectSpread(_objectSpread({}, _pickBy(_this.state.formData, function (value, key) {\n        return fieldsModified.includes(key);\n      })), _this.state.formData['@static_behaviors'] && {\n        '@static_behaviors': _this.state.formData['@static_behaviors']\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"removeBlocksLayoutFields\", function (schema) {\n      var newSchema = _objectSpread({}, schema);\n      var layoutFieldsetIndex = _findIndex(newSchema.fieldsets, function (fieldset) {\n        return fieldset.id === 'layout';\n      });\n      if (layoutFieldsetIndex > -1) {\n        var layoutFields = newSchema.fieldsets[layoutFieldsetIndex].fields;\n        newSchema.fieldsets[layoutFieldsetIndex].fields = layoutFields.filter(function (field) {\n          return field !== 'blocks' && field !== 'blocks_layout';\n        });\n        if (newSchema.fieldsets[layoutFieldsetIndex].fields.length === 0) {\n          newSchema.fieldsets = [].concat(_toConsumableArray(newSchema.fieldsets.slice(0, layoutFieldsetIndex)), _toConsumableArray(newSchema.fieldsets.slice(layoutFieldsetIndex + 1)));\n        }\n      }\n      return newSchema;\n    });\n    var ids = {\n      title: uuid(),\n      text: uuid()\n    };\n    var formData = props.formData;\n    var blocksFieldname = getBlocksFieldname(formData);\n    var blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n    if (!props.isEditForm) {\n      // It's a normal (add form), get defaults from schema\n      formData = _objectSpread(_objectSpread({}, _mapValues(props.schema.properties, 'default')), formData);\n    }\n    // defaults for block editor; should be moved to schema on server side\n    // Adding fallback in case the fields are empty, so we are sure that the edit form\n    // shows at least the default blocks\n    if (formData.hasOwnProperty(blocksFieldname) && formData.hasOwnProperty(blocksLayoutFieldname)) {\n      if (!formData[blocksLayoutFieldname] || _isEmpty(formData[blocksLayoutFieldname].items)) {\n        formData[blocksLayoutFieldname] = {\n          items: [ids.title, ids.text]\n        };\n      }\n      if (!formData[blocksFieldname] || _isEmpty(formData[blocksFieldname])) {\n        var _formData$blocksField;\n        formData[blocksFieldname] = (_formData$blocksField = {}, _defineProperty(_formData$blocksField, ids.title, {\n          '@type': 'title'\n        }), _defineProperty(_formData$blocksField, ids.text, {\n          '@type': config.settings.defaultBlockType\n        }), _formData$blocksField);\n      }\n    }\n    var selectedBlock = null;\n    if (formData.hasOwnProperty(blocksLayoutFieldname) && formData[blocksLayoutFieldname].items.length > 0) {\n      var _config$blocks, _config$blocks$initia;\n      selectedBlock = formData[blocksLayoutFieldname].items[0];\n      if ((_config$blocks = config.blocks) !== null && _config$blocks !== void 0 && (_config$blocks$initia = _config$blocks.initialBlocksFocus) !== null && _config$blocks$initia !== void 0 && _config$blocks$initia[_this.props.type]) {\n        //Default selected is not the first block, but the one from config.\n        Object.keys(formData[blocksFieldname]).forEach(function (b_key) {\n          var _config$blocks2, _config$blocks2$initi;\n          if (formData[blocksFieldname][b_key]['@type'] === ((_config$blocks2 = config.blocks) === null || _config$blocks2 === void 0 ? void 0 : (_config$blocks2$initi = _config$blocks2.initialBlocksFocus) === null || _config$blocks2$initi === void 0 ? void 0 : _config$blocks2$initi[_this.props.type])) {\n            selectedBlock = b_key;\n          }\n        });\n      }\n    }\n    _this.state = {\n      formData: formData,\n      initialFormData: _cloneDeep(formData),\n      errors: {},\n      selected: selectedBlock,\n      multiSelected: [],\n      isClient: false\n    };\n    _this.onChangeField = _this.onChangeField.bind(_assertThisInitialized(_this));\n    _this.onSelectBlock = _this.onSelectBlock.bind(_assertThisInitialized(_this));\n    _this.onSubmit = _this.onSubmit.bind(_assertThisInitialized(_this));\n    _this.onCancel = _this.onCancel.bind(_assertThisInitialized(_this));\n    _this.onTabChange = _this.onTabChange.bind(_assertThisInitialized(_this));\n    _this.onBlurField = _this.onBlurField.bind(_assertThisInitialized(_this));\n    _this.onClickInput = _this.onClickInput.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  /**\n   * On updates caused by props change\n   * if errors from Backend come, these will be shown to their corresponding Fields\n   * also the first Tab to have any errors will be selected\n   * @param {Object} prevProps\n   */\n  _createClass(Form, [{\n    key: \"componentDidUpdate\",\n    value: function () {\n      var _componentDidUpdate = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(prevProps, prevState) {\n        var requestError, errors, activeIndex;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                requestError = this.props.requestError;\n                errors = {};\n                activeIndex = 0;\n                if (requestError && prevProps.requestError !== requestError) {\n                  errors = FormValidation.giveServerErrorsToCorrespondingFields(requestError);\n                  activeIndex = FormValidation.showFirstTabWithErrors({\n                    errors: errors,\n                    schema: this.props.schema\n                  });\n                  this.setState({\n                    errors: errors,\n                    activeIndex: activeIndex\n                  });\n                }\n                if (this.props.onChangeFormData) {\n                  if (\n                  // TODO: use fast-deep-equal\n                  JSON.stringify(prevState === null || prevState === void 0 ? void 0 : prevState.formData) !== JSON.stringify(this.state.formData)) {\n                    this.props.onChangeFormData(this.state.formData);\n                  }\n                }\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n      function componentDidUpdate(_x, _x2) {\n        return _componentDidUpdate.apply(this, arguments);\n      }\n      return componentDidUpdate;\n    }()\n    /**\n     * Tab selection is done only by setting activeIndex in state\n     */\n  }, {\n    key: \"onTabChange\",\n    value: function onTabChange(e, _ref) {\n      var activeIndex = _ref.activeIndex;\n      this.setState({\n        activeIndex: activeIndex\n      });\n    }\n\n    /**\n     * If user clicks on input, the form will be not considered pristine\n     * this will avoid onBlur effects without interraction with the form\n     * @param {Object} e event\n     */\n  }, {\n    key: \"onClickInput\",\n    value: function onClickInput(e) {\n      this.setState({\n        isFormPristine: false\n      });\n    }\n\n    /**\n     * Validate fields on blur\n     * @method onBlurField\n     * @param {string} id Id of the field\n     * @param {*} value Value of the field\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onBlurField\",\n    value: function onBlurField(id, value) {\n      if (!this.state.isFormPristine) {\n        var errors = FormValidation.validateFieldsPerFieldset({\n          schema: this.props.schema,\n          formData: this.state.formData,\n          formatMessage: this.props.intl.formatMessage,\n          touchedField: _defineProperty({}, id, value)\n        });\n        this.setState({\n          errors: errors\n        });\n      }\n    }\n\n    /**\n     * Component did mount\n     * @method componentDidMount\n     * @returns {undefined}\n     */\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        isClient: true\n      });\n    }\n  }, {\n    key: \"onChangeField\",\n    value:\n    /**\n     * Change field handler\n     * Remove errors for changed field\n     * @method onChangeField\n     * @param {string} id Id of the field\n     * @param {*} value Value of the field\n     * @returns {undefined}\n     */\n    function onChangeField(id, value) {\n      this.setState(function (prevState) {\n        var errors = prevState.errors,\n          formData = prevState.formData;\n        delete errors[id];\n        return {\n          errors: errors,\n          formData: _objectSpread(_objectSpread({}, formData), {}, _defineProperty({}, id, value || value !== undefined && isBoolean(value) ? value : null))\n        };\n      });\n    }\n\n    /**\n     * Select block handler\n     * @method onSelectBlock\n     * @param {string} id Id of the field\n     * @param {string} isMultipleSelection true if multiple blocks are selected\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onSelectBlock\",\n    value: function onSelectBlock(id, isMultipleSelection, event) {\n      var multiSelected = [];\n      var selected = id;\n      if (isMultipleSelection) {\n        selected = null;\n        var blocksLayoutFieldname = getBlocksLayoutFieldname(this.state.formData);\n        var blocks_layout = this.state.formData[blocksLayoutFieldname].items;\n        if (event.shiftKey) {\n          var anchor = this.state.multiSelected.length > 0 ? blocks_layout.indexOf(this.state.multiSelected[0]) : blocks_layout.indexOf(this.state.selected);\n          var focus = blocks_layout.indexOf(id);\n          if (anchor === focus) {\n            multiSelected = [id];\n          } else if (focus > anchor) {\n            multiSelected = _toConsumableArray(blocks_layout.slice(anchor, focus + 1));\n          } else {\n            multiSelected = _toConsumableArray(blocks_layout.slice(focus, anchor + 1));\n          }\n        }\n        if ((event.ctrlKey || event.metaKey) && !event.shiftKey) {\n          multiSelected = this.state.multiSelected || [];\n          if (!this.state.multiSelected.includes(this.state.selected)) {\n            multiSelected = [].concat(_toConsumableArray(multiSelected), [this.state.selected]);\n            selected = null;\n          }\n          if (this.state.multiSelected.includes(id)) {\n            selected = null;\n            multiSelected = _without(multiSelected, id);\n          } else {\n            multiSelected = [].concat(_toConsumableArray(multiSelected), [id]);\n          }\n        }\n      }\n      this.setState({\n        selected: selected,\n        multiSelected: multiSelected\n      });\n      if (this.props.onSelectForm) {\n        if (event) event.nativeEvent.stopImmediatePropagation();\n        this.props.onSelectForm();\n      }\n    }\n\n    /**\n     * Cancel handler\n     * It prevents event from triggering submit, reset form if props.resetAfterSubmit\n     * and calls this.props.onCancel\n     * @method onCancel\n     * @param {Object} event Event object.\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onCancel\",\n    value: function onCancel(event) {\n      if (event) {\n        event.preventDefault();\n      }\n      if (this.props.resetOnCancel || this.props.resetAfterSubmit) {\n        this.setState({\n          formData: this.props.formData\n        });\n      }\n      this.props.onCancel(event);\n    }\n\n    /**\n     * Submit handler also validate form and collect errors\n     * @method onSubmit\n     * @param {Object} event Event object.\n     * @returns {undefined}\n     */\n  }, {\n    key: \"onSubmit\",\n    value: function onSubmit(event) {\n      var _this2 = this;\n      if (event) {\n        event.preventDefault();\n      }\n      var errors = this.props.schema ? FormValidation.validateFieldsPerFieldset({\n        schema: this.props.schema,\n        formData: this.state.formData,\n        formatMessage: this.props.intl.formatMessage\n      }) : {};\n      if (_keys(errors).length > 0) {\n        var activeIndex = FormValidation.showFirstTabWithErrors({\n          errors: errors,\n          schema: this.props.schema\n        });\n        this.setState({\n          errors: errors,\n          activeIndex: activeIndex\n        }, function () {\n          Object.keys(errors).forEach(function (err) {\n            return toast.error(__jsx(Toast, {\n              error: true,\n              title: err,\n              content: errors[err].join(', '),\n              __self: _this2,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 444,\n                columnNumber: 15\n              }\n            }));\n          });\n        });\n        // Changes the focus to the metadata tab in the sidebar if error\n        this.props.setSidebarTab(0);\n      } else {\n        // Get only the values that have been modified (Edit forms), send all in case that\n        // it's an add form\n        if (this.props.isEditForm) {\n          this.props.onSubmit(this.getOnlyFormModifiedValues());\n        } else {\n          this.props.onSubmit(this.state.formData);\n        }\n        if (this.props.resetAfterSubmit) {\n          this.setState({\n            formData: this.props.formData\n          });\n        }\n      }\n    }\n\n    /**\n     * getOnlyFormModifiedValues handler\n     * It returns only the values of the fields that are have really changed since the\n     * form was loaded. Useful for edit forms and PATCH operations, when we only want to\n     * send the changed data.\n     * @method getOnlyFormModifiedValues\n     * @param {Object} event Event object.\n     * @returns {undefined}\n     */\n  }, {\n    key: \"render\",\n    value:\n    /**\n     * Render method.\n     * @method render\n     * @returns {string} Markup for the component.\n     */\n    function render() {\n      var _this3 = this;\n      var settings = config.settings;\n      var _this$props = this.props,\n        originalSchema = _this$props.schema,\n        onCancel = _this$props.onCancel,\n        onSubmit = _this$props.onSubmit;\n      var formData = this.state.formData;\n      var schema = this.removeBlocksLayoutFields(originalSchema);\n      return this.props.visual ?\n      // Removing this from SSR is important, since react-beautiful-dnd supports SSR,\n      // but draftJS don't like it much and the hydration gets messed up\n      this.state.isClient && __jsx(\"div\", {\n        className: \"ui container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 532,\n          columnNumber: 9\n        }\n      }, __jsx(BlocksToolbar, {\n        formData: this.state.formData,\n        selectedBlock: this.state.selected,\n        selectedBlocks: this.state.multiSelected,\n        onChangeBlocks: function onChangeBlocks(newBlockData) {\n          return _this3.setState({\n            formData: _objectSpread(_objectSpread({}, formData), newBlockData)\n          });\n        },\n        onSetSelectedBlocks: function onSetSelectedBlocks(blockIds) {\n          return _this3.setState({\n            multiSelected: blockIds\n          });\n        },\n        onSelectBlock: this.onSelectBlock,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 533,\n          columnNumber: 11\n        }\n      }), __jsx(UndoToolbar, {\n        state: {\n          formData: this.state.formData,\n          selected: this.state.selected,\n          multiSelected: this.state.multiSelected\n        },\n        enableHotKeys: true,\n        onUndoRedo: function onUndoRedo(_ref2) {\n          var state = _ref2.state;\n          return _this3.setState(state);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 550,\n          columnNumber: 11\n        }\n      }), __jsx(BlocksForm, {\n        onChangeFormData: function onChangeFormData(newFormData) {\n          return _this3.setState({\n            formData: _objectSpread(_objectSpread({}, formData), newFormData)\n          });\n        },\n        onChangeField: this.onChangeField,\n        onSelectBlock: this.onSelectBlock,\n        properties: formData,\n        pathname: this.props.pathname,\n        selectedBlock: this.state.selected,\n        multiSelected: this.state.multiSelected,\n        manage: this.props.isAdminForm,\n        allowedBlocks: this.props.allowedBlocks,\n        showRestricted: this.props.showRestricted,\n        editable: this.props.editable,\n        isMainForm: this.props.editable,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 559,\n          columnNumber: 11\n        }\n      }), this.state.isClient && this.props.editable && __jsx(Portal, {\n        node: __CLIENT__ && document.getElementById('sidebar-metadata'),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 581,\n          columnNumber: 13\n        }\n      }, __jsx(UiForm, {\n        method: \"post\",\n        onSubmit: this.onSubmit,\n        error: _keys(this.state.errors).length > 0,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 584,\n          columnNumber: 15\n        }\n      }, schema && _map(schema.fieldsets, function (item) {\n        return [__jsx(Segment, {\n          secondary: true,\n          attached: true,\n          className: \"fieldset-\".concat(item.id),\n          key: item.title,\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 591,\n            columnNumber: 21\n          }\n        }, item.title), __jsx(Segment, {\n          attached: true,\n          key: \"fieldset-contents-\".concat(item.title),\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 599,\n            columnNumber: 21\n          }\n        }, _map(item.fields, function (field, index) {\n          var _this3$state$formData;\n          return __jsx(Field, _extends({}, schema.properties[field], {\n            id: field,\n            fieldSet: item.title.toLowerCase(),\n            formData: _this3.state.formData,\n            focus: false,\n            value: (_this3$state$formData = _this3.state.formData) === null || _this3$state$formData === void 0 ? void 0 : _this3$state$formData[field],\n            required: schema.required.indexOf(field) !== -1,\n            onChange: _this3.onChangeField,\n            onBlur: _this3.onBlurField,\n            onClick: _this3.onClickInput,\n            key: field,\n            error: _this3.state.errors[field],\n            __self: _this3,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 601,\n              columnNumber: 25\n            }\n          }));\n        }))];\n      })))) : __jsx(Container, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 624,\n          columnNumber: 7\n        }\n      }, __jsx(UiForm, {\n        method: \"post\",\n        onSubmit: this.onSubmit,\n        error: _keys(this.state.errors).length > 0,\n        className: settings.verticalFormTabs ? 'vertical-form' : '',\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 625,\n          columnNumber: 9\n        }\n      }, __jsx(\"fieldset\", {\n        className: \"invisible\",\n        disabled: !this.props.editable,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 631,\n          columnNumber: 11\n        }\n      }, __jsx(Segment.Group, {\n        raised: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 632,\n          columnNumber: 13\n        }\n      }, schema && schema.fieldsets.length > 1 && __jsx(React.Fragment, null, settings.verticalFormTabs && this.props.title && __jsx(Segment, {\n        secondary: true,\n        attached: true,\n        key: this.props.title,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 636,\n          columnNumber: 21\n        }\n      }, this.props.title), __jsx(Tab, {\n        menu: {\n          secondary: true,\n          pointing: true,\n          attached: true,\n          tabular: true,\n          className: 'formtabs',\n          vertical: settings.verticalFormTabs\n        },\n        grid: {\n          paneWidth: 9,\n          tabWidth: 3,\n          stackable: true\n        },\n        onTabChange: this.onTabChange,\n        activeIndex: this.state.activeIndex,\n        panes: _map(schema.fieldsets, function (item) {\n          return {\n            menuItem: item.title,\n            render: function render() {\n              return [!settings.verticalFormTabs && _this3.props.title && __jsx(Segment, {\n                secondary: true,\n                attached: true,\n                key: _this3.props.title,\n                __self: _this3,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 656,\n                  columnNumber: 27\n                }\n              }, _this3.props.title), item.description && __jsx(Message, {\n                attached: \"bottom\",\n                __self: _this3,\n                __source: {\n                  fileName: _jsxFileName,\n                  lineNumber: 661,\n                  columnNumber: 27\n                }\n              }, item.description)].concat(_toConsumableArray(_map(item.fields, function (field, index) {\n                var _this3$state$formData2;\n                return __jsx(Field, _extends({}, schema.properties[field], {\n                  id: field,\n                  formData: _this3.state.formData,\n                  fieldSet: item.title.toLowerCase(),\n                  focus: index === 0,\n                  value: (_this3$state$formData2 = _this3.state.formData) === null || _this3$state$formData2 === void 0 ? void 0 : _this3$state$formData2[field],\n                  required: schema.required.indexOf(field) !== -1,\n                  onChange: _this3.onChangeField,\n                  onBlur: _this3.onBlurField,\n                  onClick: _this3.onClickInput,\n                  key: field,\n                  error: _this3.state.errors[field],\n                  __self: _this3,\n                  __source: {\n                    fileName: _jsxFileName,\n                    lineNumber: 666,\n                    columnNumber: 27\n                  }\n                }));\n              })));\n            }\n          };\n        }),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 640,\n          columnNumber: 19\n        }\n      })), schema && schema.fieldsets.length === 1 && __jsx(Segment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 687,\n          columnNumber: 17\n        }\n      }, this.props.title && __jsx(Segment, {\n        className: \"primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 689,\n          columnNumber: 21\n        }\n      }, __jsx(\"h1\", {\n        style: {\n          fontSize: '16px'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 690,\n          columnNumber: 23\n        }\n      }, \" \", this.props.title)), this.props.description && __jsx(Segment, {\n        secondary: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 694,\n          columnNumber: 21\n        }\n      }, this.props.description), _keys(this.state.errors).length > 0 && __jsx(Message, {\n        icon: \"warning\",\n        negative: true,\n        attached: true,\n        header: this.props.intl.formatMessage(messages.error),\n        content: this.props.intl.formatMessage(messages.thereWereSomeErrors),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 697,\n          columnNumber: 21\n        }\n      }), this.props.error && __jsx(Message, {\n        icon: \"warning\",\n        negative: true,\n        attached: true,\n        header: this.props.intl.formatMessage(messages.error),\n        content: this.props.error.message,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 708,\n          columnNumber: 21\n        }\n      }), _map(schema.fieldsets[0].fields, function (field) {\n        var _this3$state$formData3;\n        return __jsx(Field, _extends({}, schema.properties[field], {\n          id: field,\n          value: (_this3$state$formData3 = _this3.state.formData) === null || _this3$state$formData3 === void 0 ? void 0 : _this3$state$formData3[field],\n          required: schema.required.indexOf(field) !== -1,\n          onChange: _this3.onChangeField,\n          onBlur: _this3.onBlurField,\n          onClick: _this3.onClickInput,\n          key: field,\n          error: _this3.state.errors[field],\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 717,\n            columnNumber: 21\n          }\n        }));\n      })), !this.props.hideActions && __jsx(Segment, {\n        className: \"actions\",\n        clearing: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 732,\n          columnNumber: 17\n        }\n      }, onSubmit && __jsx(Button, {\n        basic: true,\n        primary: true,\n        floated: \"right\",\n        type: \"submit\",\n        \"aria-label\": this.props.submitLabel ? this.props.submitLabel : this.props.intl.formatMessage(messages.save),\n        title: this.props.submitLabel ? this.props.submitLabel : this.props.intl.formatMessage(messages.save),\n        loading: this.props.loading,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 734,\n          columnNumber: 21\n        }\n      }, __jsx(Icon, {\n        className: \"circled\",\n        name: aheadSVG,\n        size: \"30px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 751,\n          columnNumber: 23\n        }\n      })), onCancel && __jsx(Button, {\n        basic: true,\n        secondary: true,\n        \"aria-label\": this.props.intl.formatMessage(messages.cancel),\n        title: this.props.intl.formatMessage(messages.cancel),\n        floated: \"right\",\n        onClick: this.onCancel,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 755,\n          columnNumber: 21\n        }\n      }, __jsx(Icon, {\n        className: \"circled\",\n        name: clearSVG,\n        size: \"30px\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 765,\n          columnNumber: 23\n        }\n      })))))));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      var newState = _objectSpread({}, state);\n      if (!props.isFormSelected) {\n        newState.selected = null;\n      }\n      return newState;\n    }\n  }]);\n  return Form;\n}(Component);\n_defineProperty(Form, \"propTypes\", {\n  schema: PropTypes.shape({\n    fieldsets: PropTypes.arrayOf(PropTypes.shape({\n      fields: PropTypes.arrayOf(PropTypes.string),\n      id: PropTypes.string,\n      title: PropTypes.string\n    })),\n    properties: PropTypes.objectOf(PropTypes.any),\n    definitions: PropTypes.objectOf(PropTypes.any),\n    required: PropTypes.arrayOf(PropTypes.string)\n  }),\n  formData: PropTypes.objectOf(PropTypes.any),\n  pathname: PropTypes.string,\n  onSubmit: PropTypes.func,\n  onCancel: PropTypes.func,\n  submitLabel: PropTypes.string,\n  resetAfterSubmit: PropTypes.bool,\n  resetOnCancel: PropTypes.bool,\n  isEditForm: PropTypes.bool,\n  isAdminForm: PropTypes.bool,\n  title: PropTypes.string,\n  error: PropTypes.shape({\n    message: PropTypes.string\n  }),\n  loading: PropTypes.bool,\n  hideActions: PropTypes.bool,\n  description: PropTypes.string,\n  visual: PropTypes.bool,\n  blocks: PropTypes.arrayOf(PropTypes.object),\n  isFormSelected: PropTypes.bool,\n  onSelectForm: PropTypes.func,\n  editable: PropTypes.bool,\n  onChangeFormData: PropTypes.func,\n  requestError: PropTypes.string,\n  allowedBlocks: PropTypes.arrayOf(PropTypes.string),\n  showRestricted: PropTypes.bool\n});\n_defineProperty(Form, \"defaultProps\", {\n  formData: null,\n  onSubmit: null,\n  onCancel: null,\n  submitLabel: null,\n  resetAfterSubmit: false,\n  resetOnCancel: false,\n  isEditForm: false,\n  isAdminForm: false,\n  title: null,\n  description: null,\n  error: null,\n  loading: null,\n  hideActions: false,\n  visual: false,\n  blocks: [],\n  pathname: '',\n  schema: {},\n  isFormSelected: true,\n  onSelectForm: null,\n  editable: true,\n  requestError: null,\n  allowedBlocks: null\n});\nvar FormIntl = injectIntl(Form, {\n  forwardRef: true\n});\n_c = FormIntl;\nexport default compose(connect(null, {\n  setSidebarTab: setSidebarTab\n}, null, {\n  forwardRef: true\n}))(FormIntl);\nvar _c;\n$RefreshReg$(_c, \"FormIntl\");","map":{"version":3,"names":["BlocksForm","Field","Icon","Toast","difference","FormValidation","getBlocksFieldname","getBlocksLayoutFieldname","messages","aheadSVG","clearSVG","isBoolean","PropTypes","React","Component","injectIntl","Portal","connect","Button","Container","Form","UiForm","Message","Segment","Tab","v4","uuid","toast","BlocksToolbar","UndoToolbar","setSidebarTab","compose","config","props","fieldsModified","Object","keys","state","formData","initialFormData","value","key","includes","schema","newSchema","layoutFieldsetIndex","fieldsets","fieldset","id","layoutFields","fields","filter","field","length","slice","ids","title","text","blocksFieldname","blocksLayoutFieldname","isEditForm","properties","hasOwnProperty","items","settings","defaultBlockType","selectedBlock","blocks","initialBlocksFocus","type","forEach","b_key","errors","selected","multiSelected","isClient","onChangeField","bind","onSelectBlock","onSubmit","onCancel","onTabChange","onBlurField","onClickInput","prevProps","prevState","requestError","activeIndex","giveServerErrorsToCorrespondingFields","showFirstTabWithErrors","setState","onChangeFormData","JSON","stringify","e","isFormPristine","validateFieldsPerFieldset","formatMessage","intl","touchedField","undefined","isMultipleSelection","event","blocks_layout","shiftKey","anchor","indexOf","focus","ctrlKey","metaKey","onSelectForm","nativeEvent","stopImmediatePropagation","preventDefault","resetOnCancel","resetAfterSubmit","err","error","join","getOnlyFormModifiedValues","originalSchema","removeBlocksLayoutFields","visual","newBlockData","blockIds","newFormData","pathname","isAdminForm","allowedBlocks","showRestricted","editable","__CLIENT__","document","getElementById","item","index","toLowerCase","required","verticalFormTabs","secondary","pointing","attached","tabular","className","vertical","paneWidth","tabWidth","stackable","menuItem","render","description","fontSize","thereWereSomeErrors","message","hideActions","submitLabel","save","loading","cancel","newState","isFormSelected","shape","arrayOf","string","objectOf","any","definitions","func","bool","object","FormIntl","forwardRef"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/components/manage/Form/Form.jsx"],"sourcesContent":["/**\n * Form component.\n * @module components/manage/Form/Form\n */\n\nimport { BlocksForm, Field, Icon, Toast } from '@plone/volto/components';\nimport {\n  difference,\n  FormValidation,\n  getBlocksFieldname,\n  getBlocksLayoutFieldname,\n  messages,\n} from '@plone/volto/helpers';\nimport aheadSVG from '@plone/volto/icons/ahead.svg';\nimport clearSVG from '@plone/volto/icons/clear.svg';\nimport {\n  findIndex,\n  isEmpty,\n  keys,\n  map,\n  mapValues,\n  pickBy,\n  without,\n  cloneDeep,\n} from 'lodash';\nimport isBoolean from 'lodash/isBoolean';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { injectIntl } from 'react-intl';\nimport { Portal } from 'react-portal';\nimport { connect } from 'react-redux';\nimport {\n  Button,\n  Container,\n  Form as UiForm,\n  Message,\n  Segment,\n  Tab,\n} from 'semantic-ui-react';\nimport { v4 as uuid } from 'uuid';\nimport { toast } from 'react-toastify';\nimport { BlocksToolbar, UndoToolbar } from '@plone/volto/components';\nimport { setSidebarTab } from '@plone/volto/actions';\nimport { compose } from 'redux';\nimport config from '@plone/volto/registry';\n\n/**\n * Form container class.\n * @class Form\n * @extends Component\n */\nclass Form extends Component {\n  /**\n   * Property types.\n   * @property {Object} propTypes Property types.\n   * @static\n   */\n  static propTypes = {\n    schema: PropTypes.shape({\n      fieldsets: PropTypes.arrayOf(\n        PropTypes.shape({\n          fields: PropTypes.arrayOf(PropTypes.string),\n          id: PropTypes.string,\n          title: PropTypes.string,\n        }),\n      ),\n      properties: PropTypes.objectOf(PropTypes.any),\n      definitions: PropTypes.objectOf(PropTypes.any),\n      required: PropTypes.arrayOf(PropTypes.string),\n    }),\n    formData: PropTypes.objectOf(PropTypes.any),\n    pathname: PropTypes.string,\n    onSubmit: PropTypes.func,\n    onCancel: PropTypes.func,\n    submitLabel: PropTypes.string,\n    resetAfterSubmit: PropTypes.bool,\n    resetOnCancel: PropTypes.bool,\n    isEditForm: PropTypes.bool,\n    isAdminForm: PropTypes.bool,\n    title: PropTypes.string,\n    error: PropTypes.shape({\n      message: PropTypes.string,\n    }),\n    loading: PropTypes.bool,\n    hideActions: PropTypes.bool,\n    description: PropTypes.string,\n    visual: PropTypes.bool,\n    blocks: PropTypes.arrayOf(PropTypes.object),\n    isFormSelected: PropTypes.bool,\n    onSelectForm: PropTypes.func,\n    editable: PropTypes.bool,\n    onChangeFormData: PropTypes.func,\n    requestError: PropTypes.string,\n    allowedBlocks: PropTypes.arrayOf(PropTypes.string),\n    showRestricted: PropTypes.bool,\n  };\n\n  /**\n   * Default properties.\n   * @property {Object} defaultProps Default properties.\n   * @static\n   */\n  static defaultProps = {\n    formData: null,\n    onSubmit: null,\n    onCancel: null,\n    submitLabel: null,\n    resetAfterSubmit: false,\n    resetOnCancel: false,\n    isEditForm: false,\n    isAdminForm: false,\n    title: null,\n    description: null,\n    error: null,\n    loading: null,\n    hideActions: false,\n    visual: false,\n    blocks: [],\n    pathname: '',\n    schema: {},\n    isFormSelected: true,\n    onSelectForm: null,\n    editable: true,\n    requestError: null,\n    allowedBlocks: null,\n  };\n\n  /**\n   * Constructor\n   * @method constructor\n   * @param {Object} props Component properties\n   * @constructs Form\n   */\n  constructor(props) {\n    super(props);\n    const ids = {\n      title: uuid(),\n      text: uuid(),\n    };\n    let { formData } = props;\n    const blocksFieldname = getBlocksFieldname(formData);\n    const blocksLayoutFieldname = getBlocksLayoutFieldname(formData);\n\n    if (!props.isEditForm) {\n      // It's a normal (add form), get defaults from schema\n      formData = {\n        ...mapValues(props.schema.properties, 'default'),\n        ...formData,\n      };\n    }\n    // defaults for block editor; should be moved to schema on server side\n    // Adding fallback in case the fields are empty, so we are sure that the edit form\n    // shows at least the default blocks\n    if (\n      formData.hasOwnProperty(blocksFieldname) &&\n      formData.hasOwnProperty(blocksLayoutFieldname)\n    ) {\n      if (\n        !formData[blocksLayoutFieldname] ||\n        isEmpty(formData[blocksLayoutFieldname].items)\n      ) {\n        formData[blocksLayoutFieldname] = {\n          items: [ids.title, ids.text],\n        };\n      }\n      if (!formData[blocksFieldname] || isEmpty(formData[blocksFieldname])) {\n        formData[blocksFieldname] = {\n          [ids.title]: {\n            '@type': 'title',\n          },\n          [ids.text]: {\n            '@type': config.settings.defaultBlockType,\n          },\n        };\n      }\n    }\n\n    let selectedBlock = null;\n    if (\n      formData.hasOwnProperty(blocksLayoutFieldname) &&\n      formData[blocksLayoutFieldname].items.length > 0\n    ) {\n      selectedBlock = formData[blocksLayoutFieldname].items[0];\n\n      if (config.blocks?.initialBlocksFocus?.[this.props.type]) {\n        //Default selected is not the first block, but the one from config.\n        Object.keys(formData[blocksFieldname]).forEach((b_key) => {\n          if (\n            formData[blocksFieldname][b_key]['@type'] ===\n            config.blocks?.initialBlocksFocus?.[this.props.type]\n          ) {\n            selectedBlock = b_key;\n          }\n        });\n      }\n    }\n    this.state = {\n      formData,\n      initialFormData: cloneDeep(formData),\n      errors: {},\n      selected: selectedBlock,\n      multiSelected: [],\n      isClient: false,\n    };\n    this.onChangeField = this.onChangeField.bind(this);\n    this.onSelectBlock = this.onSelectBlock.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n    this.onCancel = this.onCancel.bind(this);\n    this.onTabChange = this.onTabChange.bind(this);\n    this.onBlurField = this.onBlurField.bind(this);\n    this.onClickInput = this.onClickInput.bind(this);\n  }\n\n  /**\n   * On updates caused by props change\n   * if errors from Backend come, these will be shown to their corresponding Fields\n   * also the first Tab to have any errors will be selected\n   * @param {Object} prevProps\n   */\n  async componentDidUpdate(prevProps, prevState) {\n    let { requestError } = this.props;\n    let errors = {};\n    let activeIndex = 0;\n\n    if (requestError && prevProps.requestError !== requestError) {\n      errors = FormValidation.giveServerErrorsToCorrespondingFields(\n        requestError,\n      );\n      activeIndex = FormValidation.showFirstTabWithErrors({\n        errors,\n        schema: this.props.schema,\n      });\n\n      this.setState({\n        errors,\n        activeIndex,\n      });\n    }\n\n    if (this.props.onChangeFormData) {\n      if (\n        // TODO: use fast-deep-equal\n        JSON.stringify(prevState?.formData) !==\n        JSON.stringify(this.state.formData)\n      ) {\n        this.props.onChangeFormData(this.state.formData);\n      }\n    }\n  }\n\n  /**\n   * Tab selection is done only by setting activeIndex in state\n   */\n  onTabChange(e, { activeIndex }) {\n    this.setState({ activeIndex });\n  }\n\n  /**\n   * If user clicks on input, the form will be not considered pristine\n   * this will avoid onBlur effects without interraction with the form\n   * @param {Object} e event\n   */\n  onClickInput(e) {\n    this.setState({ isFormPristine: false });\n  }\n\n  /**\n   * Validate fields on blur\n   * @method onBlurField\n   * @param {string} id Id of the field\n   * @param {*} value Value of the field\n   * @returns {undefined}\n   */\n  onBlurField(id, value) {\n    if (!this.state.isFormPristine) {\n      const errors = FormValidation.validateFieldsPerFieldset({\n        schema: this.props.schema,\n        formData: this.state.formData,\n        formatMessage: this.props.intl.formatMessage,\n        touchedField: { [id]: value },\n      });\n\n      this.setState({\n        errors,\n      });\n    }\n  }\n\n  /**\n   * Component did mount\n   * @method componentDidMount\n   * @returns {undefined}\n   */\n  componentDidMount() {\n    this.setState({ isClient: true });\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    let newState = { ...state };\n    if (!props.isFormSelected) {\n      newState.selected = null;\n    }\n\n    return newState;\n  }\n\n  /**\n   * Change field handler\n   * Remove errors for changed field\n   * @method onChangeField\n   * @param {string} id Id of the field\n   * @param {*} value Value of the field\n   * @returns {undefined}\n   */\n  onChangeField(id, value) {\n    this.setState((prevState) => {\n      const { errors, formData } = prevState;\n      delete errors[id];\n      return {\n        errors,\n        formData: {\n          ...formData,\n          // We need to catch also when the value equals false this fixes #888\n          [id]:\n            value || (value !== undefined && isBoolean(value)) ? value : null,\n        },\n      };\n    });\n  }\n\n  /**\n   * Select block handler\n   * @method onSelectBlock\n   * @param {string} id Id of the field\n   * @param {string} isMultipleSelection true if multiple blocks are selected\n   * @returns {undefined}\n   */\n  onSelectBlock(id, isMultipleSelection, event) {\n    let multiSelected = [];\n    let selected = id;\n\n    if (isMultipleSelection) {\n      selected = null;\n      const blocksLayoutFieldname = getBlocksLayoutFieldname(\n        this.state.formData,\n      );\n\n      const blocks_layout = this.state.formData[blocksLayoutFieldname].items;\n\n      if (event.shiftKey) {\n        const anchor =\n          this.state.multiSelected.length > 0\n            ? blocks_layout.indexOf(this.state.multiSelected[0])\n            : blocks_layout.indexOf(this.state.selected);\n        const focus = blocks_layout.indexOf(id);\n\n        if (anchor === focus) {\n          multiSelected = [id];\n        } else if (focus > anchor) {\n          multiSelected = [...blocks_layout.slice(anchor, focus + 1)];\n        } else {\n          multiSelected = [...blocks_layout.slice(focus, anchor + 1)];\n        }\n      }\n\n      if ((event.ctrlKey || event.metaKey) && !event.shiftKey) {\n        multiSelected = this.state.multiSelected || [];\n        if (!this.state.multiSelected.includes(this.state.selected)) {\n          multiSelected = [...multiSelected, this.state.selected];\n          selected = null;\n        }\n        if (this.state.multiSelected.includes(id)) {\n          selected = null;\n          multiSelected = without(multiSelected, id);\n        } else {\n          multiSelected = [...multiSelected, id];\n        }\n      }\n    }\n\n    this.setState({\n      selected,\n      multiSelected,\n    });\n\n    if (this.props.onSelectForm) {\n      if (event) event.nativeEvent.stopImmediatePropagation();\n      this.props.onSelectForm();\n    }\n  }\n\n  /**\n   * Cancel handler\n   * It prevents event from triggering submit, reset form if props.resetAfterSubmit\n   * and calls this.props.onCancel\n   * @method onCancel\n   * @param {Object} event Event object.\n   * @returns {undefined}\n   */\n  onCancel(event) {\n    if (event) {\n      event.preventDefault();\n    }\n    if (this.props.resetOnCancel || this.props.resetAfterSubmit) {\n      this.setState({\n        formData: this.props.formData,\n      });\n    }\n    this.props.onCancel(event);\n  }\n\n  /**\n   * Submit handler also validate form and collect errors\n   * @method onSubmit\n   * @param {Object} event Event object.\n   * @returns {undefined}\n   */\n  onSubmit(event) {\n    if (event) {\n      event.preventDefault();\n    }\n\n    const errors = this.props.schema\n      ? FormValidation.validateFieldsPerFieldset({\n          schema: this.props.schema,\n          formData: this.state.formData,\n          formatMessage: this.props.intl.formatMessage,\n        })\n      : {};\n\n    if (keys(errors).length > 0) {\n      const activeIndex = FormValidation.showFirstTabWithErrors({\n        errors,\n        schema: this.props.schema,\n      });\n      this.setState(\n        {\n          errors,\n          activeIndex,\n        },\n        () => {\n          Object.keys(errors).forEach((err) =>\n            toast.error(\n              <Toast error title={err} content={errors[err].join(', ')} />,\n            ),\n          );\n        },\n      );\n      // Changes the focus to the metadata tab in the sidebar if error\n      this.props.setSidebarTab(0);\n    } else {\n      // Get only the values that have been modified (Edit forms), send all in case that\n      // it's an add form\n      if (this.props.isEditForm) {\n        this.props.onSubmit(this.getOnlyFormModifiedValues());\n      } else {\n        this.props.onSubmit(this.state.formData);\n      }\n      if (this.props.resetAfterSubmit) {\n        this.setState({\n          formData: this.props.formData,\n        });\n      }\n    }\n  }\n\n  /**\n   * getOnlyFormModifiedValues handler\n   * It returns only the values of the fields that are have really changed since the\n   * form was loaded. Useful for edit forms and PATCH operations, when we only want to\n   * send the changed data.\n   * @method getOnlyFormModifiedValues\n   * @param {Object} event Event object.\n   * @returns {undefined}\n   */\n  getOnlyFormModifiedValues = () => {\n    const fieldsModified = Object.keys(\n      difference(this.state.formData, this.state.initialFormData),\n    );\n    return {\n      ...pickBy(this.state.formData, (value, key) =>\n        fieldsModified.includes(key),\n      ),\n      ...(this.state.formData['@static_behaviors'] && {\n        '@static_behaviors': this.state.formData['@static_behaviors'],\n      }),\n    };\n  };\n\n  /**\n   * Removed blocks and blocks_layout fields from the form.\n   * @method removeBlocksLayoutFields\n   * @param {object} schema The schema definition of the form.\n   * @returns A modified copy of the given schema.\n   */\n  removeBlocksLayoutFields = (schema) => {\n    const newSchema = { ...schema };\n    const layoutFieldsetIndex = findIndex(\n      newSchema.fieldsets,\n      (fieldset) => fieldset.id === 'layout',\n    );\n    if (layoutFieldsetIndex > -1) {\n      const layoutFields = newSchema.fieldsets[layoutFieldsetIndex].fields;\n      newSchema.fieldsets[layoutFieldsetIndex].fields = layoutFields.filter(\n        (field) => field !== 'blocks' && field !== 'blocks_layout',\n      );\n      if (newSchema.fieldsets[layoutFieldsetIndex].fields.length === 0) {\n        newSchema.fieldsets = [\n          ...newSchema.fieldsets.slice(0, layoutFieldsetIndex),\n          ...newSchema.fieldsets.slice(layoutFieldsetIndex + 1),\n        ];\n      }\n    }\n    return newSchema;\n  };\n\n  /**\n   * Render method.\n   * @method render\n   * @returns {string} Markup for the component.\n   */\n  render() {\n    const { settings } = config;\n    const { schema: originalSchema, onCancel, onSubmit } = this.props;\n    const { formData } = this.state;\n    const schema = this.removeBlocksLayoutFields(originalSchema);\n\n    return this.props.visual ? (\n      // Removing this from SSR is important, since react-beautiful-dnd supports SSR,\n      // but draftJS don't like it much and the hydration gets messed up\n      this.state.isClient && (\n        <div className=\"ui container\">\n          <BlocksToolbar\n            formData={this.state.formData}\n            selectedBlock={this.state.selected}\n            selectedBlocks={this.state.multiSelected}\n            onChangeBlocks={(newBlockData) =>\n              this.setState({\n                formData: {\n                  ...formData,\n                  ...newBlockData,\n                },\n              })\n            }\n            onSetSelectedBlocks={(blockIds) =>\n              this.setState({ multiSelected: blockIds })\n            }\n            onSelectBlock={this.onSelectBlock}\n          />\n          <UndoToolbar\n            state={{\n              formData: this.state.formData,\n              selected: this.state.selected,\n              multiSelected: this.state.multiSelected,\n            }}\n            enableHotKeys\n            onUndoRedo={({ state }) => this.setState(state)}\n          />\n          <BlocksForm\n            onChangeFormData={(newFormData) =>\n              this.setState({\n                formData: {\n                  ...formData,\n                  ...newFormData,\n                },\n              })\n            }\n            onChangeField={this.onChangeField}\n            onSelectBlock={this.onSelectBlock}\n            properties={formData}\n            pathname={this.props.pathname}\n            selectedBlock={this.state.selected}\n            multiSelected={this.state.multiSelected}\n            manage={this.props.isAdminForm}\n            allowedBlocks={this.props.allowedBlocks}\n            showRestricted={this.props.showRestricted}\n            editable={this.props.editable}\n            isMainForm={this.props.editable}\n          />\n          {this.state.isClient && this.props.editable && (\n            <Portal\n              node={__CLIENT__ && document.getElementById('sidebar-metadata')}\n            >\n              <UiForm\n                method=\"post\"\n                onSubmit={this.onSubmit}\n                error={keys(this.state.errors).length > 0}\n              >\n                {schema &&\n                  map(schema.fieldsets, (item) => [\n                    <Segment\n                      secondary\n                      attached\n                      className={`fieldset-${item.id}`}\n                      key={item.title}\n                    >\n                      {item.title}\n                    </Segment>,\n                    <Segment attached key={`fieldset-contents-${item.title}`}>\n                      {map(item.fields, (field, index) => (\n                        <Field\n                          {...schema.properties[field]}\n                          id={field}\n                          fieldSet={item.title.toLowerCase()}\n                          formData={this.state.formData}\n                          focus={false}\n                          value={this.state.formData?.[field]}\n                          required={schema.required.indexOf(field) !== -1}\n                          onChange={this.onChangeField}\n                          onBlur={this.onBlurField}\n                          onClick={this.onClickInput}\n                          key={field}\n                          error={this.state.errors[field]}\n                        />\n                      ))}\n                    </Segment>,\n                  ])}\n              </UiForm>\n            </Portal>\n          )}\n        </div>\n      )\n    ) : (\n      <Container>\n        <UiForm\n          method=\"post\"\n          onSubmit={this.onSubmit}\n          error={keys(this.state.errors).length > 0}\n          className={settings.verticalFormTabs ? 'vertical-form' : ''}\n        >\n          <fieldset className=\"invisible\" disabled={!this.props.editable}>\n            <Segment.Group raised>\n              {schema && schema.fieldsets.length > 1 && (\n                <>\n                  {settings.verticalFormTabs && this.props.title && (\n                    <Segment secondary attached key={this.props.title}>\n                      {this.props.title}\n                    </Segment>\n                  )}\n                  <Tab\n                    menu={{\n                      secondary: true,\n                      pointing: true,\n                      attached: true,\n                      tabular: true,\n                      className: 'formtabs',\n                      vertical: settings.verticalFormTabs,\n                    }}\n                    grid={{ paneWidth: 9, tabWidth: 3, stackable: true }}\n                    onTabChange={this.onTabChange}\n                    activeIndex={this.state.activeIndex}\n                    panes={map(schema.fieldsets, (item) => ({\n                      menuItem: item.title,\n                      render: () => [\n                        !settings.verticalFormTabs && this.props.title && (\n                          <Segment secondary attached key={this.props.title}>\n                            {this.props.title}\n                          </Segment>\n                        ),\n                        item.description && (\n                          <Message attached=\"bottom\">\n                            {item.description}\n                          </Message>\n                        ),\n                        ...map(item.fields, (field, index) => (\n                          <Field\n                            {...schema.properties[field]}\n                            id={field}\n                            formData={this.state.formData}\n                            fieldSet={item.title.toLowerCase()}\n                            focus={index === 0}\n                            value={this.state.formData?.[field]}\n                            required={schema.required.indexOf(field) !== -1}\n                            onChange={this.onChangeField}\n                            onBlur={this.onBlurField}\n                            onClick={this.onClickInput}\n                            key={field}\n                            error={this.state.errors[field]}\n                          />\n                        )),\n                      ],\n                    }))}\n                  />\n                </>\n              )}\n              {schema && schema.fieldsets.length === 1 && (\n                <Segment>\n                  {this.props.title && (\n                    <Segment className=\"primary\">\n                      <h1 style={{ fontSize: '16px' }}> {this.props.title}</h1>\n                    </Segment>\n                  )}\n                  {this.props.description && (\n                    <Segment secondary>{this.props.description}</Segment>\n                  )}\n                  {keys(this.state.errors).length > 0 && (\n                    <Message\n                      icon=\"warning\"\n                      negative\n                      attached\n                      header={this.props.intl.formatMessage(messages.error)}\n                      content={this.props.intl.formatMessage(\n                        messages.thereWereSomeErrors,\n                      )}\n                    />\n                  )}\n                  {this.props.error && (\n                    <Message\n                      icon=\"warning\"\n                      negative\n                      attached\n                      header={this.props.intl.formatMessage(messages.error)}\n                      content={this.props.error.message}\n                    />\n                  )}\n                  {map(schema.fieldsets[0].fields, (field) => (\n                    <Field\n                      {...schema.properties[field]}\n                      id={field}\n                      value={this.state.formData?.[field]}\n                      required={schema.required.indexOf(field) !== -1}\n                      onChange={this.onChangeField}\n                      onBlur={this.onBlurField}\n                      onClick={this.onClickInput}\n                      key={field}\n                      error={this.state.errors[field]}\n                    />\n                  ))}\n                </Segment>\n              )}\n              {!this.props.hideActions && (\n                <Segment className=\"actions\" clearing>\n                  {onSubmit && (\n                    <Button\n                      basic\n                      primary\n                      floated=\"right\"\n                      type=\"submit\"\n                      aria-label={\n                        this.props.submitLabel\n                          ? this.props.submitLabel\n                          : this.props.intl.formatMessage(messages.save)\n                      }\n                      title={\n                        this.props.submitLabel\n                          ? this.props.submitLabel\n                          : this.props.intl.formatMessage(messages.save)\n                      }\n                      loading={this.props.loading}\n                    >\n                      <Icon className=\"circled\" name={aheadSVG} size=\"30px\" />\n                    </Button>\n                  )}\n                  {onCancel && (\n                    <Button\n                      basic\n                      secondary\n                      aria-label={this.props.intl.formatMessage(\n                        messages.cancel,\n                      )}\n                      title={this.props.intl.formatMessage(messages.cancel)}\n                      floated=\"right\"\n                      onClick={this.onCancel}\n                    >\n                      <Icon className=\"circled\" name={clearSVG} size=\"30px\" />\n                    </Button>\n                  )}\n                </Segment>\n              )}\n            </Segment.Group>\n          </fieldset>\n        </UiForm>\n      </Container>\n    );\n  }\n}\n\nconst FormIntl = injectIntl(Form, { forwardRef: true });\n\nexport default compose(\n  connect(null, { setSidebarTab }, null, { forwardRef: true }),\n)(FormIntl);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}