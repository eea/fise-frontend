{"ast":null,"code":"import _extends from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/extends.js\";\nimport _regeneratorRuntime from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-widget-geolocation/src/components/manage/Widgets/SearchWidget.jsx\",\n  _this = this,\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\n/**\n * Search widget component.\n * @module components/theme/SearchWidget/SearchWidget\n */\n\nimport React, { useState } from 'react';\nimport { Form, Input } from 'semantic-ui-react';\nimport { compose } from 'redux';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { FormFieldWrapper } from '@plone/volto/components';\nimport { Icon } from '@plone/volto/components';\nimport { getProxiedExternalContent } from '@eeacms/volto-corsproxy/actions';\nimport { getCountryCode, makeSearchUrl } from './util';\nimport countries from 'i18n-iso-countries';\nimport zoomSVG from '@plone/volto/icons/zoom.svg';\nimport locales from 'i18n-iso-countries/langs/en.json';\ncountries.registerLocale(locales);\nvar messages = defineMessages({\n  search: {\n    \"id\": \"Search\",\n    \"defaultMessage\": \"Search\"\n  },\n  searchSite: {\n    \"id\": \"Search for geoTags\",\n    \"defaultMessage\": \"Search for geoTags\"\n  }\n});\n\n/**\n * SearchWidget component class.\n * @class SearchWidget\n * @extends Component\n */\nvar SearchWidget = function SearchWidget(props) {\n  _s();\n  var onChange = props.onChange,\n    _props$data = props.data,\n    data = _props$data === void 0 ? {} : _props$data;\n  var countries = data.countries;\n  var _useState = useState(''),\n    text = _useState[0],\n    setText = _useState[1];\n  var dispatch = useDispatch();\n  var password = useSelector(function (state) {\n    var _state$geolocation, _state$geolocation$ap;\n    return (_state$geolocation = state.geolocation) === null || _state$geolocation === void 0 ? void 0 : (_state$geolocation$ap = _state$geolocation.api) === null || _state$geolocation$ap === void 0 ? void 0 : _state$geolocation$ap.geonames.password;\n  });\n  var onSubmit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(event) {\n      var countryCode, url, response, searchUrl;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              event.preventDefault();\n              if (!/\\d/.test(countries)) {\n                _context.next = 9;\n                break;\n              }\n              url = \"https://secure.geonames.org/getJSON?geonameId=\".concat(countries.split('-')[1], \"&username=\").concat(password);\n              _context.next = 5;\n              return dispatch(getProxiedExternalContent(url, {\n                headers: {\n                  Accept: 'application/json'\n                }\n              }));\n            case 5:\n              response = _context.sent;\n              countryCode = response.countryCode;\n              _context.next = 10;\n              break;\n            case 9:\n              countryCode = getCountryCode(countries);\n            case 10:\n              searchUrl = makeSearchUrl(data, text, password, countryCode);\n              onChange('searchUrl', searchUrl);\n              _context.next = 14;\n              return dispatch(getProxiedExternalContent(searchUrl, {\n                headers: {\n                  Accept: 'application/json'\n                }\n              }));\n            case 14:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n    return function onSubmit(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  return __jsx(Form, {\n    onSubmit: onSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, __jsx(FormFieldWrapper, _extends({}, props, {\n    column: 1,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, __jsx(Input, {\n    style: {\n      width: '80%'\n    },\n    \"aria-label\": props.intl.formatMessage(messages.search),\n    onChange: function onChange(e) {\n      return setText(e.target.value);\n    },\n    name: \"SearchableText\",\n    value: text,\n    autoComplete: \"off\",\n    placeholder: props.intl.formatMessage(messages.searchSite),\n    title: props.intl.formatMessage(messages.search),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  }), __jsx(\"button\", {\n    \"aria-label\": props.intl.formatMessage(messages.search),\n    style: {\n      verticalAlign: 'middle'\n    },\n    onClick: onSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 11\n    }\n  }, __jsx(Icon, {\n    name: zoomSVG,\n    size: \"24px\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  })))));\n};\n_s(SearchWidget, \"+dukF+Kptb79rhuMewT3/CzRvaQ=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = SearchWidget;\nexport default compose(injectIntl)(SearchWidget);\nvar _c;\n$RefreshReg$(_c, \"SearchWidget\");","map":{"version":3,"names":["React","useState","Form","Input","compose","useDispatch","useSelector","defineMessages","injectIntl","FormFieldWrapper","Icon","getProxiedExternalContent","getCountryCode","makeSearchUrl","countries","zoomSVG","locales","registerLocale","messages","search","searchSite","SearchWidget","props","onChange","data","text","setText","dispatch","password","state","geolocation","api","geonames","onSubmit","event","preventDefault","test","url","split","headers","Accept","response","countryCode","searchUrl","width","intl","formatMessage","e","target","value","verticalAlign"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-widget-geolocation/src/components/manage/Widgets/SearchWidget.jsx"],"sourcesContent":["/**\n * Search widget component.\n * @module components/theme/SearchWidget/SearchWidget\n */\n\nimport React, { useState } from 'react';\nimport { Form, Input } from 'semantic-ui-react';\nimport { compose } from 'redux';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { defineMessages, injectIntl } from 'react-intl';\nimport { FormFieldWrapper } from '@plone/volto/components';\nimport { Icon } from '@plone/volto/components';\nimport { getProxiedExternalContent } from '@eeacms/volto-corsproxy/actions';\nimport { getCountryCode, makeSearchUrl } from './util';\nimport countries from 'i18n-iso-countries';\nimport zoomSVG from '@plone/volto/icons/zoom.svg';\nimport locales from 'i18n-iso-countries/langs/en.json';\n\ncountries.registerLocale(locales);\n\nconst messages = defineMessages({\n  search: {\n    id: 'Search',\n    defaultMessage: 'Search',\n  },\n  searchSite: {\n    id: 'Search for geoTags',\n    defaultMessage: 'Search for geoTags',\n  },\n});\n\n/**\n * SearchWidget component class.\n * @class SearchWidget\n * @extends Component\n */\nconst SearchWidget = (props) => {\n  const { onChange, data = {} } = props;\n  const { countries } = data;\n  const [text, setText] = useState('');\n  const dispatch = useDispatch();\n  const password = useSelector(\n    (state) => state.geolocation?.api?.geonames.password,\n  );\n\n  const onSubmit = async (event) => {\n    event.preventDefault();\n    let countryCode;\n    if (/\\d/.test(countries)) {\n      let url = `https://secure.geonames.org/getJSON?geonameId=${\n        countries.split('-')[1]\n      }&username=${password}`;\n      let response = await dispatch(\n        getProxiedExternalContent(url, {\n          headers: { Accept: 'application/json' },\n        }),\n      );\n      countryCode = response.countryCode;\n    } else {\n      countryCode = getCountryCode(countries);\n    }\n    const searchUrl = makeSearchUrl(data, text, password, countryCode);\n    onChange('searchUrl', searchUrl);\n    await dispatch(\n      getProxiedExternalContent(searchUrl, {\n        headers: { Accept: 'application/json' },\n      }),\n    );\n  };\n\n  return (\n    <Form onSubmit={onSubmit}>\n      <FormFieldWrapper {...props} column={1}>\n        <div>\n          <Input\n            style={{ width: '80%' }}\n            aria-label={props.intl.formatMessage(messages.search)}\n            onChange={(e) => setText(e.target.value)}\n            name=\"SearchableText\"\n            value={text}\n            autoComplete=\"off\"\n            placeholder={props.intl.formatMessage(messages.searchSite)}\n            title={props.intl.formatMessage(messages.search)}\n          />\n          <button\n            aria-label={props.intl.formatMessage(messages.search)}\n            style={{ verticalAlign: 'middle' }}\n            onClick={onSubmit}\n          >\n            <Icon name={zoomSVG} size=\"24px\" />\n          </button>\n        </div>\n      </FormFieldWrapper>\n    </Form>\n  );\n};\nexport default compose(injectIntl)(SearchWidget);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Search","defaultMessage":"Search"},{"id":"Search for geoTags","defaultMessage":"Search for geoTags"}]}},"sourceType":"module","externalDependencies":[]}