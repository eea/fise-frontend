{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-block-image-cards/src/ImageCards/displays/RoundTiled.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport React from 'react';\nimport { Grid, Message } from 'semantic-ui-react';\nimport { LazyLoadComponent } from 'react-lazy-load-image-component';\nimport { UniversalLink } from '@plone/volto/components';\nimport { BodyClass } from '@plone/volto/helpers';\nimport cx from 'classnames';\nimport { getScaleUrl, getPath } from '../utils';\nimport '../css/roundtiled.less';\nexport const Card = props => {\n  const {\n    title,\n    link,\n    attachedimage,\n    image_scale\n  } = props;\n  return __jsx(\"div\", {\n    className: \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 5\n    }\n  }, link ? __jsx(React.Fragment, null, __jsx(UniversalLink, {\n    className: \"card-link\",\n    href: link,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 11\n    }\n  }, __jsx(LazyLoadComponent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }\n  }, __jsx(\"div\", {\n    className: \"card-image\",\n    style: attachedimage ? {\n      backgroundImage: `url(${getScaleUrl(getPath(attachedimage), image_scale || 'preview')})`\n    } : {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 15\n    }\n  })), __jsx(\"span\", {\n    className: \"card-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }\n  }, title))) : __jsx(React.Fragment, null, __jsx(LazyLoadComponent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    className: \"card-image\",\n    style: attachedimage ? {\n      backgroundImage: `url(${getScaleUrl(getPath(attachedimage), image_scale || 'preview')})`\n    } : {},\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  })), __jsx(\"span\", {\n    className: \"card-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }, title)));\n};\nconst RoundTiled = props => {\n  const {\n    data,\n    editable\n  } = props;\n  const {\n    title,\n    cards,\n    image_scale\n  } = data;\n  return cards && cards.length > 0 ? __jsx(\"div\", {\n    className: cx('block align imagecards-block', {\n      center: !Boolean(data.align)\n    }, data.align),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, __jsx(BodyClass, {\n    className: \"has-card-tiles\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }), __jsx(\"div\", {\n    className: cx({\n      'full-width': data.align === 'full'\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"roundtiled\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, __jsx(\"h2\", {\n    className: \"roundtiled-title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }, title), __jsx(\"div\", {\n    className: \"cards\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 11\n    }\n  }, __jsx(Grid, {\n    className: \"cards-grid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, (cards || []).map((card, i) => __jsx(Grid.Column, {\n    key: i,\n    mobile: 12,\n    tablet: 6,\n    computer: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  }, __jsx(Card, _extends({}, card, {\n    image_scale: image_scale,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 19\n    }\n  }))))))))) : __jsx(React.Fragment, null, editable ? __jsx(Message, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 19\n    }\n  }, \"No image cards\") : '');\n};\nexport default RoundTiled;","map":{"version":3,"names":["React","Grid","Message","LazyLoadComponent","UniversalLink","BodyClass","cx","getScaleUrl","getPath","Card","props","title","link","attachedimage","image_scale","backgroundImage","RoundTiled","data","editable","cards","length","center","Boolean","align","map","card","i"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-block-image-cards/src/ImageCards/displays/RoundTiled.jsx"],"sourcesContent":["import React from 'react';\nimport { Grid, Message } from 'semantic-ui-react';\nimport { LazyLoadComponent } from 'react-lazy-load-image-component';\nimport { UniversalLink } from '@plone/volto/components';\nimport { BodyClass } from '@plone/volto/helpers';\nimport cx from 'classnames';\nimport { getScaleUrl, getPath } from '../utils';\nimport '../css/roundtiled.less';\n\nexport const Card = (props) => {\n  const { title, link, attachedimage, image_scale } = props;\n\n  return (\n    <div className=\"card\">\n      {link ? (\n        <>\n          <UniversalLink className=\"card-link\" href={link}>\n            <LazyLoadComponent>\n              <div\n                className=\"card-image\"\n                style={\n                  attachedimage\n                    ? {\n                        backgroundImage: `url(${getScaleUrl(\n                          getPath(attachedimage),\n                          image_scale || 'preview',\n                        )})`,\n                      }\n                    : {}\n                }\n              ></div>\n            </LazyLoadComponent>\n            <span className=\"card-title\">{title}</span>\n          </UniversalLink>\n        </>\n      ) : (\n        <>\n          <LazyLoadComponent>\n            <div\n              className=\"card-image\"\n              style={\n                attachedimage\n                  ? {\n                      backgroundImage: `url(${getScaleUrl(\n                        getPath(attachedimage),\n                        image_scale || 'preview',\n                      )})`,\n                    }\n                  : {}\n              }\n            ></div>\n          </LazyLoadComponent>\n          <span className=\"card-title\">{title}</span>\n        </>\n      )}\n    </div>\n  );\n};\n\nconst RoundTiled = (props) => {\n  const { data, editable } = props;\n  const { title, cards, image_scale } = data;\n\n  return cards && cards.length > 0 ? (\n    <div\n      className={cx(\n        'block align imagecards-block',\n        {\n          center: !Boolean(data.align),\n        },\n        data.align,\n      )}\n    >\n      <BodyClass className=\"has-card-tiles\" />\n      <div\n        className={cx({\n          'full-width': data.align === 'full',\n        })}\n      >\n        <div className=\"roundtiled\">\n          <h2 className=\"roundtiled-title\">{title}</h2>\n          <div className=\"cards\">\n            <Grid className=\"cards-grid\">\n              {(cards || []).map((card, i) => (\n                <Grid.Column key={i} mobile={12} tablet={6} computer={3}>\n                  <Card {...card} image_scale={image_scale} />\n                </Grid.Column>\n              ))}\n            </Grid>\n          </div>\n        </div>\n      </div>\n    </div>\n  ) : (\n    <>{editable ? <Message>No image cards</Message> : ''}</>\n  );\n};\n\nexport default RoundTiled;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}