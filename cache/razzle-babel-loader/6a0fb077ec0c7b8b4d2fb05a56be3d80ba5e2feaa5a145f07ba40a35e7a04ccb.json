{"ast":null,"code":"import _objectDestructuringEmpty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js\";\nimport _extends from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/extends.js\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/helpers/Extensions/withBlockSchemaEnhancer.js\",\n  _this = this;\nvar __jsx = React.createElement;\nimport { defineMessages } from 'react-intl';\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport config from '@plone/volto/registry';\nimport { cloneDeepSchema } from '@plone/volto/helpers/Utils/Utils';\nimport { defaultStyleSchema } from '@plone/volto/components/manage/Blocks/Block/StylesSchema';\nvar messages = defineMessages({\n  variation: {\n    \"id\": \"Variation\",\n    \"defaultMessage\": \"Variation\"\n  },\n  styling: {\n    \"id\": \"Styling\",\n    \"defaultMessage\": \"Styling\"\n  }\n});\n\n/**\n * Sets the field name as first field in schema\n */\nfunction _addField(schema, name) {\n  if (schema.fieldsets[0].fields.indexOf(name) === -1) {\n    schema.fieldsets[0].fields.unshift(name);\n  }\n}\n\n/**\n * Gets the blocksConfig from the props or from the global config object\n */\nfunction getBlocksConfig(props) {\n  var blocks = config.blocks;\n  if (props.blocksConfig) {\n    return props.blocksConfig;\n  }\n  return blocks === null || blocks === void 0 ? void 0 : blocks.blocksConfig;\n}\n\n/**\n * Utility function that adds the Select dropdown field to a schema\n */\nexport var addExtensionFieldToSchema = function addExtensionFieldToSchema(_ref) {\n  var schema = _ref.schema,\n    name = _ref.name,\n    items = _ref.items,\n    intl = _ref.intl,\n    title = _ref.title,\n    description = _ref.description,\n    _ref$insertFieldToOrd = _ref.insertFieldToOrder,\n    insertFieldToOrder = _ref$insertFieldToOrd === void 0 ? _addField : _ref$insertFieldToOrd;\n  var _ = intl.formatMessage;\n  insertFieldToOrder(schema, name);\n  var hasDefaultExtension = (items === null || items === void 0 ? void 0 : items.findIndex(function (_ref2) {\n    var isDefault = _ref2.isDefault;\n    return isDefault;\n  })) > -1;\n  if (!hasDefaultExtension) {\n    // eslint-disable-next-line\n    console.warn('You should provide a default extension in extension:', name);\n  }\n  schema.properties[name] = {\n    title: _(title),\n    choices: items === null || items === void 0 ? void 0 : items.map(function (_ref3) {\n      var id = _ref3.id,\n        title = _ref3.title;\n      return [id, _({\n        id: title,\n        defaultMessage: title\n      })];\n    }),\n    noValueOption: false,\n    \"default\": hasDefaultExtension ? items === null || items === void 0 ? void 0 : items.find(function (item) {\n      return item.isDefault;\n    }).id : null\n  };\n  return schema;\n};\n\n/**\n * A generic HOC that provides \"schema enhancer functionality\" for any custom\n * block extension.\n *\n * This enables blocks to have additional \"variations\", beyond the usual\n * `variations` field. This function is not directly used by Volto.\n *\n * To be used with a block configuration like:\n *\n * ```\n *  {\n *    id: 'someBlockId',\n *    extensions: {\n *      '<someExtensionName>': {\n *        items: [\n *          {\n *            id: 'selectFacet',\n *            title: 'Select',\n *            view: SelectFacet,\n *            isDefault: true,\n *          },\n *          {\n *            id: 'checkboxFacet',\n *            title: 'Checkbox',\n *            view: CheckboxFacet,\n *            isDefault: false,\n *          },\n *        ]\n *      }\n *     }\n *  }\n * ```\n */\nexport var withBlockSchemaEnhancer = function withBlockSchemaEnhancer(FormComponent) {\n  var _s = $RefreshSig$();\n  var extensionName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'vendor';\n  var insertFieldToOrder = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _addField;\n  return _s(function (_ref4) {\n    var _blocksConfig$blockTy, _blocksConfig$blockTy2, _extensionConfig$item, _extensionConfig$item2, _activeItem, _blocksConfig$blockTy3, _extensionConfig$item3;\n    _s();\n    var props = _extends({}, (_objectDestructuringEmpty(_ref4), _ref4));\n    var formData = props.formData,\n      originalSchema = props.schema;\n    var intl = useIntl();\n    var blocksConfig = getBlocksConfig(props);\n    var blockType = formData['@type'];\n    var extensionConfig = blocksConfig === null || blocksConfig === void 0 ? void 0 : (_blocksConfig$blockTy = blocksConfig[blockType]) === null || _blocksConfig$blockTy === void 0 ? void 0 : (_blocksConfig$blockTy2 = _blocksConfig$blockTy.extensions) === null || _blocksConfig$blockTy2 === void 0 ? void 0 : _blocksConfig$blockTy2[extensionName];\n    if (!extensionConfig) return __jsx(FormComponent, _extends({}, props, {\n      schema: originalSchema,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 12\n      }\n    }));\n    var activeItemName = formData === null || formData === void 0 ? void 0 : formData[extensionName];\n    var activeItem = (_extensionConfig$item = extensionConfig.items) === null || _extensionConfig$item === void 0 ? void 0 : _extensionConfig$item.find(function (item) {\n      return item.id === activeItemName;\n    });\n    if (!activeItem) activeItem = (_extensionConfig$item2 = extensionConfig.items) === null || _extensionConfig$item2 === void 0 ? void 0 : _extensionConfig$item2.find(function (item) {\n      return item.isDefault;\n    });\n    var schemaEnhancer =\n    // For the main \"variation\" of blocks, allow simply passing a\n    // schemaEnhancer in the block configuration\n    ((_activeItem = activeItem) === null || _activeItem === void 0 ? void 0 : _activeItem['schemaEnhancer']) || extensionName === 'variation' && (blocksConfig === null || blocksConfig === void 0 ? void 0 : (_blocksConfig$blockTy3 = blocksConfig[blockType]) === null || _blocksConfig$blockTy3 === void 0 ? void 0 : _blocksConfig$blockTy3.schemaEnhancer);\n    var schema = schemaEnhancer ? schemaEnhancer({\n      schema: cloneDeepSchema(originalSchema),\n      formData: formData,\n      intl: intl\n    }) : cloneDeepSchema(originalSchema);\n    var _extensionConfig$titl = extensionConfig.title,\n      title = _extensionConfig$titl === void 0 ? messages.variation : _extensionConfig$titl,\n      description = extensionConfig.description;\n    if (((_extensionConfig$item3 = extensionConfig.items) === null || _extensionConfig$item3 === void 0 ? void 0 : _extensionConfig$item3.length) > 1) {\n      addExtensionFieldToSchema({\n        schema: schema,\n        name: extensionName,\n        items: extensionConfig.items || [],\n        intl: intl,\n        title: title,\n        description: description,\n        insertFieldToOrder: insertFieldToOrder\n      });\n    }\n    return __jsx(FormComponent, _extends({}, props, {\n      schema: schema,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 10\n      }\n    }));\n  }, \"rlSgSjbewJ1PrR/Ile8g/kr050o=\", false, function () {\n    return [useIntl];\n  });\n};\n\n/**\n * Apply block variation schema enhancers to the provided schema, using block\n * information from the provided block data (as `formData`).\n *\n * Blocks can be enhanced with variations declared like:\n *\n * ```\n *  {\n *    id: 'searchBlock',\n *    schemaEnhancer: ({schema, formData, intl}) => schema,\n *    variations: [\n *      {\n *        id: 'facetsRightSide',\n *        title: 'Facets on right side',\n *        view: RightColumnFacets,\n *        isDefault: true,\n *      },\n *      {\n *        id: 'facetsLeftSide',\n *        title: 'Facets on left side',\n *        view: LeftColumnFacets,\n *        isDefault: false,\n *        schemaEnhancer: ({schema, formData, intl}) => schema,\n *      },\n *    ],\n *\n * ```\n * Notice that each variation can declare an option schema enhancer, and each\n * block supports an optional `schemaEnhancer` function.\n */\nexport var applySchemaEnhancer = function applySchemaEnhancer(_ref5) {\n  var _blocksConfig$blockTy4, _activeItem2, _blocksConfig$blockTy6;\n  var originalSchema = _ref5.schema,\n    formData = _ref5.formData,\n    intl = _ref5.intl,\n    _ref5$blocksConfig = _ref5.blocksConfig,\n    blocksConfig = _ref5$blocksConfig === void 0 ? config.blocks.blocksConfig : _ref5$blocksConfig;\n  var schema, schemaEnhancer;\n  var blockType = formData['@type'];\n  var variations = (blocksConfig === null || blocksConfig === void 0 ? void 0 : (_blocksConfig$blockTy4 = blocksConfig[blockType]) === null || _blocksConfig$blockTy4 === void 0 ? void 0 : _blocksConfig$blockTy4.variations) || [];\n  if (variations.length === 0) {\n    var _blocksConfig$blockTy5;\n    // No variations present but we finalize the schema with a schemaEnhancer\n    // in the block config (if present)\n    schemaEnhancer = blocksConfig === null || blocksConfig === void 0 ? void 0 : (_blocksConfig$blockTy5 = blocksConfig[blockType]) === null || _blocksConfig$blockTy5 === void 0 ? void 0 : _blocksConfig$blockTy5.schemaEnhancer;\n    if (schemaEnhancer) schema = schemaEnhancer({\n      schema: cloneDeepSchema(originalSchema),\n      formData: formData,\n      intl: intl\n    });\n    return schema || originalSchema;\n  }\n  var activeItemName = formData === null || formData === void 0 ? void 0 : formData.variation;\n  var activeItem = variations.find(function (item) {\n    return item.id === activeItemName;\n  });\n  if (!activeItem) activeItem = variations.find(function (item) {\n    return item.isDefault;\n  });\n  schemaEnhancer = (_activeItem2 = activeItem) === null || _activeItem2 === void 0 ? void 0 : _activeItem2['schemaEnhancer'];\n  schema = schemaEnhancer ? schemaEnhancer({\n    schema: cloneDeepSchema(originalSchema),\n    formData: formData,\n    intl: intl\n  }) : cloneDeepSchema(originalSchema);\n\n  // Finalize the schema with a schemaEnhancer in the block config;\n  schemaEnhancer = blocksConfig === null || blocksConfig === void 0 ? void 0 : (_blocksConfig$blockTy6 = blocksConfig[blockType]) === null || _blocksConfig$blockTy6 === void 0 ? void 0 : _blocksConfig$blockTy6.schemaEnhancer;\n  if (schemaEnhancer) schema = schemaEnhancer({\n    schema: schema,\n    formData: formData,\n    intl: intl\n  });\n  return schema || originalSchema;\n};\n\n/**\n * A HOC that enhances the incoming schema prop with block variations support\n * by:\n *\n * - applies the selected variation's schema enhancer\n * - adds the variation selection input (as a choice widget)\n */\nexport var withVariationSchemaEnhancer = function withVariationSchemaEnhancer(FormComponent) {\n  var _s2 = $RefreshSig$();\n  return _s2(function (props) {\n    var _blocksConfig$blockTy7;\n    _s2();\n    var formData = props.formData,\n      originalSchema = props.schema;\n    var intl = useIntl();\n    var blocksConfig = getBlocksConfig(props);\n    var blockType = formData['@type'];\n    var variations = ((_blocksConfig$blockTy7 = blocksConfig[blockType]) === null || _blocksConfig$blockTy7 === void 0 ? void 0 : _blocksConfig$blockTy7.variations) || [];\n    var schema = applySchemaEnhancer({\n      schema: originalSchema,\n      formData: formData,\n      intl: intl\n    });\n    if (variations.length > 1) {\n      addExtensionFieldToSchema({\n        schema: schema,\n        name: 'variation',\n        items: variations,\n        intl: intl,\n        title: messages.variation,\n        insertFieldToOrder: _addField\n      });\n    }\n    return __jsx(FormComponent, _extends({}, props, {\n      schema: schema,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 10\n      }\n    }));\n  }, \"rlSgSjbewJ1PrR/Ile8g/kr050o=\", false, function () {\n    return [useIntl];\n  });\n};\n\n/**\n * A HOC that enhances the incoming schema prop with styling widget support\n * by:\n *\n * - adds the variation selection input (as a choice widget)\n */\nexport var withStylingSchemaEnhancer = function withStylingSchemaEnhancer(FormComponent) {\n  var _s3 = $RefreshSig$();\n  return _s3(function (props) {\n    var _blocksConfig$blockTy8;\n    _s3();\n    var formData = props.formData,\n      schema = props.schema;\n    var intl = useIntl();\n    var blocksConfig = getBlocksConfig(props);\n    var blockType = formData['@type'];\n    var enableStyling = (_blocksConfig$blockTy8 = blocksConfig[blockType]) === null || _blocksConfig$blockTy8 === void 0 ? void 0 : _blocksConfig$blockTy8.enableStyling;\n    if (enableStyling) {\n      var _blocksConfig$blockTy9;\n      var stylesSchema = ((_blocksConfig$blockTy9 = blocksConfig[blockType]) === null || _blocksConfig$blockTy9 === void 0 ? void 0 : _blocksConfig$blockTy9.stylesSchema) || defaultStyleSchema;\n      schema.fieldsets.push({\n        id: 'styling',\n        title: intl.formatMessage(messages.styling),\n        fields: ['styles']\n      });\n      schema.properties.styles = {\n        widget: 'object',\n        title: intl.formatMessage(messages.styling),\n        schema: stylesSchema({\n          schema: defaultStyleSchema({\n            formData: formData,\n            intl: intl\n          }),\n          formData: formData,\n          intl: intl\n        })\n      };\n    }\n    return __jsx(FormComponent, _extends({}, props, {\n      schema: schema,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 10\n      }\n    }));\n  }, \"rlSgSjbewJ1PrR/Ile8g/kr050o=\", false, function () {\n    return [useIntl];\n  });\n};","map":{"version":3,"names":["defineMessages","React","useIntl","config","cloneDeepSchema","defaultStyleSchema","messages","variation","styling","_addField","schema","name","fieldsets","fields","indexOf","unshift","getBlocksConfig","props","blocks","blocksConfig","addExtensionFieldToSchema","items","intl","title","description","insertFieldToOrder","_","formatMessage","hasDefaultExtension","findIndex","isDefault","console","warn","properties","choices","map","id","defaultMessage","noValueOption","find","item","withBlockSchemaEnhancer","FormComponent","extensionName","formData","originalSchema","blockType","extensionConfig","extensions","activeItemName","activeItem","schemaEnhancer","length","applySchemaEnhancer","variations","withVariationSchemaEnhancer","withStylingSchemaEnhancer","enableStyling","stylesSchema","push","styles","widget"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@plone/volto/src/helpers/Extensions/withBlockSchemaEnhancer.js"],"sourcesContent":["import { defineMessages } from 'react-intl';\nimport React from 'react';\nimport { useIntl } from 'react-intl';\nimport config from '@plone/volto/registry';\nimport { cloneDeepSchema } from '@plone/volto/helpers/Utils/Utils';\nimport { defaultStyleSchema } from '@plone/volto/components/manage/Blocks/Block/StylesSchema';\n\nconst messages = defineMessages({\n  variation: {\n    id: 'Variation',\n    defaultMessage: 'Variation',\n  },\n  styling: {\n    id: 'Styling',\n    defaultMessage: 'Styling',\n  },\n});\n\n/**\n * Sets the field name as first field in schema\n */\nfunction _addField(schema, name) {\n  if (schema.fieldsets[0].fields.indexOf(name) === -1) {\n    schema.fieldsets[0].fields.unshift(name);\n  }\n}\n\n/**\n * Gets the blocksConfig from the props or from the global config object\n */\nfunction getBlocksConfig(props) {\n  const { blocks } = config;\n\n  if (props.blocksConfig) {\n    return props.blocksConfig;\n  }\n\n  return blocks?.blocksConfig;\n}\n\n/**\n * Utility function that adds the Select dropdown field to a schema\n */\nexport const addExtensionFieldToSchema = ({\n  schema,\n  name,\n  items,\n  intl,\n  title,\n  description,\n  insertFieldToOrder = _addField,\n}) => {\n  const _ = intl.formatMessage;\n\n  insertFieldToOrder(schema, name);\n\n  const hasDefaultExtension =\n    items?.findIndex(({ isDefault }) => isDefault) > -1;\n\n  if (!hasDefaultExtension) {\n    // eslint-disable-next-line\n    console.warn('You should provide a default extension in extension:', name);\n  }\n\n  schema.properties[name] = {\n    title: _(title),\n    choices: items?.map(({ id, title }) => [\n      id,\n      _({ id: title, defaultMessage: title }),\n    ]),\n    noValueOption: false,\n    default: hasDefaultExtension\n      ? items?.find((item) => item.isDefault).id\n      : null,\n  };\n\n  return schema;\n};\n\n/**\n * A generic HOC that provides \"schema enhancer functionality\" for any custom\n * block extension.\n *\n * This enables blocks to have additional \"variations\", beyond the usual\n * `variations` field. This function is not directly used by Volto.\n *\n * To be used with a block configuration like:\n *\n * ```\n *  {\n *    id: 'someBlockId',\n *    extensions: {\n *      '<someExtensionName>': {\n *        items: [\n *          {\n *            id: 'selectFacet',\n *            title: 'Select',\n *            view: SelectFacet,\n *            isDefault: true,\n *          },\n *          {\n *            id: 'checkboxFacet',\n *            title: 'Checkbox',\n *            view: CheckboxFacet,\n *            isDefault: false,\n *          },\n *        ]\n *      }\n *     }\n *  }\n * ```\n */\nexport const withBlockSchemaEnhancer = (\n  FormComponent,\n  extensionName = 'vendor',\n  insertFieldToOrder = _addField,\n) => ({ ...props }) => {\n  const { formData, schema: originalSchema } = props;\n  const intl = useIntl();\n\n  const blocksConfig = getBlocksConfig(props);\n\n  const blockType = formData['@type'];\n  const extensionConfig =\n    blocksConfig?.[blockType]?.extensions?.[extensionName];\n\n  if (!extensionConfig)\n    return <FormComponent {...props} schema={originalSchema} />;\n\n  const activeItemName = formData?.[extensionName];\n  let activeItem = extensionConfig.items?.find(\n    (item) => item.id === activeItemName,\n  );\n  if (!activeItem)\n    activeItem = extensionConfig.items?.find((item) => item.isDefault);\n\n  const schemaEnhancer =\n    // For the main \"variation\" of blocks, allow simply passing a\n    // schemaEnhancer in the block configuration\n    activeItem?.['schemaEnhancer'] ||\n    (extensionName === 'variation' &&\n      blocksConfig?.[blockType]?.schemaEnhancer);\n\n  let schema = schemaEnhancer\n    ? schemaEnhancer({\n        schema: cloneDeepSchema(originalSchema),\n        formData,\n        intl,\n      })\n    : cloneDeepSchema(originalSchema);\n\n  const { title = messages.variation, description } = extensionConfig;\n\n  if (extensionConfig.items?.length > 1) {\n    addExtensionFieldToSchema({\n      schema,\n      name: extensionName,\n      items: extensionConfig.items || [],\n      intl,\n      title,\n      description,\n      insertFieldToOrder,\n    });\n  }\n\n  return <FormComponent {...props} schema={schema} />;\n};\n\n/**\n * Apply block variation schema enhancers to the provided schema, using block\n * information from the provided block data (as `formData`).\n *\n * Blocks can be enhanced with variations declared like:\n *\n * ```\n *  {\n *    id: 'searchBlock',\n *    schemaEnhancer: ({schema, formData, intl}) => schema,\n *    variations: [\n *      {\n *        id: 'facetsRightSide',\n *        title: 'Facets on right side',\n *        view: RightColumnFacets,\n *        isDefault: true,\n *      },\n *      {\n *        id: 'facetsLeftSide',\n *        title: 'Facets on left side',\n *        view: LeftColumnFacets,\n *        isDefault: false,\n *        schemaEnhancer: ({schema, formData, intl}) => schema,\n *      },\n *    ],\n *\n * ```\n * Notice that each variation can declare an option schema enhancer, and each\n * block supports an optional `schemaEnhancer` function.\n */\nexport const applySchemaEnhancer = ({\n  schema: originalSchema,\n  formData,\n  intl,\n  blocksConfig = config.blocks.blocksConfig,\n}) => {\n  let schema, schemaEnhancer;\n\n  const blockType = formData['@type'];\n  const variations = blocksConfig?.[blockType]?.variations || [];\n\n  if (variations.length === 0) {\n    // No variations present but we finalize the schema with a schemaEnhancer\n    // in the block config (if present)\n    schemaEnhancer = blocksConfig?.[blockType]?.schemaEnhancer;\n\n    if (schemaEnhancer)\n      schema = schemaEnhancer({\n        schema: cloneDeepSchema(originalSchema),\n        formData,\n        intl,\n      });\n    return schema || originalSchema;\n  }\n\n  const activeItemName = formData?.variation;\n  let activeItem = variations.find((item) => item.id === activeItemName);\n  if (!activeItem) activeItem = variations.find((item) => item.isDefault);\n\n  schemaEnhancer = activeItem?.['schemaEnhancer'];\n\n  schema = schemaEnhancer\n    ? schemaEnhancer({\n        schema: cloneDeepSchema(originalSchema),\n        formData,\n        intl,\n      })\n    : cloneDeepSchema(originalSchema);\n\n  // Finalize the schema with a schemaEnhancer in the block config;\n  schemaEnhancer = blocksConfig?.[blockType]?.schemaEnhancer;\n  if (schemaEnhancer) schema = schemaEnhancer({ schema, formData, intl });\n\n  return schema || originalSchema;\n};\n\n/**\n * A HOC that enhances the incoming schema prop with block variations support\n * by:\n *\n * - applies the selected variation's schema enhancer\n * - adds the variation selection input (as a choice widget)\n */\nexport const withVariationSchemaEnhancer = (FormComponent) => (props) => {\n  const { formData, schema: originalSchema } = props;\n  const intl = useIntl();\n\n  const blocksConfig = getBlocksConfig(props);\n\n  const blockType = formData['@type'];\n  const variations = blocksConfig[blockType]?.variations || [];\n\n  let schema = applySchemaEnhancer({ schema: originalSchema, formData, intl });\n\n  if (variations.length > 1) {\n    addExtensionFieldToSchema({\n      schema,\n      name: 'variation',\n      items: variations,\n      intl,\n      title: messages.variation,\n      insertFieldToOrder: _addField,\n    });\n  }\n\n  return <FormComponent {...props} schema={schema} />;\n};\n\n/**\n * A HOC that enhances the incoming schema prop with styling widget support\n * by:\n *\n * - adds the variation selection input (as a choice widget)\n */\nexport const withStylingSchemaEnhancer = (FormComponent) => (props) => {\n  const { formData, schema } = props;\n  const intl = useIntl();\n\n  const blocksConfig = getBlocksConfig(props);\n\n  const blockType = formData['@type'];\n  const enableStyling = blocksConfig[blockType]?.enableStyling;\n\n  if (enableStyling) {\n    const stylesSchema =\n      blocksConfig[blockType]?.stylesSchema || defaultStyleSchema;\n\n    schema.fieldsets.push({\n      id: 'styling',\n      title: intl.formatMessage(messages.styling),\n      fields: ['styles'],\n    });\n\n    schema.properties.styles = {\n      widget: 'object',\n      title: intl.formatMessage(messages.styling),\n      schema: stylesSchema({\n        schema: defaultStyleSchema({ formData, intl }),\n        formData,\n        intl,\n      }),\n    };\n  }\n  return <FormComponent {...props} schema={schema} />;\n};\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[{"id":"Variation","defaultMessage":"Variation"},{"id":"Styling","defaultMessage":"Styling"}]}},"sourceType":"module","externalDependencies":[]}