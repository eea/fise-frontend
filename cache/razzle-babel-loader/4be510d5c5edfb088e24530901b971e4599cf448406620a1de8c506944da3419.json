{"ast":null,"code":"var _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-slate/src/editor/plugins/Table/TableButton.jsx\";\nvar __jsx = React.createElement;\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectDestructuringEmpty(obj) { if (obj == null) throw new TypeError(\"Cannot destructure \" + obj); }\nimport React from 'react';\nimport { useSlate } from 'slate-react';\nimport { Dropdown } from 'semantic-ui-react';\nimport { ToolbarButton } from 'volto-slate/editor/ui';\nimport tableSVG from '@plone/volto/icons/table.svg';\nimport TableContainer from './TableContainer';\nimport './less/table.less';\nimport { Editor, Transforms } from 'slate';\nconst TableButton = _ref => {\n  let props = Object.assign({}, (_objectDestructuringEmpty(_ref), _ref));\n  const editor = useSlate();\n  const [dropdownOpen, setDropdownOpen] = React.useState(false);\n  const [activeRow, setActiveRow] = React.useState(1);\n  const [activeColumn, setActiveColumn] = React.useState(1);\n  const defaultRowCount = 5;\n  const defaultColumnCount = 5;\n  const [rowCount, setRowCount] = React.useState(defaultRowCount);\n  const [columnCount, setColumnCount] = React.useState(defaultColumnCount);\n  const resetState = React.useCallback(() => {\n    setRowCount(defaultRowCount);\n    setColumnCount(defaultColumnCount);\n    setActiveRow(1);\n    setActiveColumn(1);\n  }, []);\n  const createEmptyCell = React.useCallback((formatAsColumnHeaders = false) => {\n    return {\n      type: formatAsColumnHeaders ? 'th' : 'td',\n      children: [{\n        type: 'p',\n        children: [{\n          text: ''\n        }]\n      }]\n    };\n  }, []);\n  const createEmptyRow = React.useCallback((cellCount, formatAsColumnHeaders = false) => {\n    // should contain at least one <td> or it is not valid that children is empty\n    const row = {\n      type: 'tr',\n      children: []\n    };\n    for (let i = 0; i < cellCount; ++i) {\n      row.children.push(createEmptyCell(formatAsColumnHeaders));\n    }\n    return row;\n  }, [createEmptyCell]);\n\n  /**\n   * @param {number} row Number of rows for the new empty table.\n   * @param {number} column Number of columns for the new empty table.\n   */\n  const insertEmptyTable = React.useCallback(({\n    row,\n    column\n  }) => {\n    const rows = [createEmptyRow(column, true)];\n    for (let i = 0; i < row - 1; ++i) {\n      rows.push(createEmptyRow(column));\n    }\n    const table = {\n      type: 'table',\n      children: [{\n        type: 'tbody',\n        children: rows\n      }]\n    };\n    Transforms.insertNodes(editor, [table], {\n      at: Editor.end(editor, [])\n    });\n  }, [createEmptyRow, editor]);\n  return __jsx(React.Fragment, null, __jsx(Dropdown, {\n    open: dropdownOpen,\n    onClose: () => {\n      resetState();\n      setDropdownOpen(false);\n    },\n    trigger: __jsx(ToolbarButton, _extends({}, props, {\n      className: \"slate-table-dropdown-button\",\n      onClick: () => {\n        if (dropdownOpen) {\n          resetState();\n        }\n        setDropdownOpen(!dropdownOpen);\n      },\n      icon: tableSVG,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, __jsx(Dropdown.Menu, {\n    className: \"slate-table-dropdown-menu\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, __jsx(TableContainer, {\n    rowCount: rowCount,\n    columnCount: columnCount,\n    activeColumn: activeColumn,\n    activeRow: activeRow,\n    onCellMouseEnter: ({\n      row,\n      column\n    }) => {\n      if (row > rowCount - 1) {\n        setRowCount(row + 1);\n      } else if (row < rowCount - 1) {\n        setRowCount(defaultRowCount);\n      }\n      if (column > columnCount - 1) {\n        setColumnCount(column + 1);\n      } else if (column < columnCount - 1) {\n        setColumnCount(defaultColumnCount);\n      }\n      if (row !== activeRow) {\n        setActiveRow(row);\n      }\n      if (column !== activeColumn) {\n        setActiveColumn(column);\n      }\n    },\n    onCellMouseLeave: ({\n      row,\n      column\n    }) => {}\n    // `row` and `column` below are 1-based indices\n    ,\n    onCellClick: ({\n      row,\n      column\n    }) => {\n      insertEmptyTable({\n        row,\n        column\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }))));\n};\nexport default TableButton;","map":{"version":3,"names":["React","useSlate","Dropdown","ToolbarButton","tableSVG","TableContainer","Editor","Transforms","TableButton","props","editor","dropdownOpen","setDropdownOpen","useState","activeRow","setActiveRow","activeColumn","setActiveColumn","defaultRowCount","defaultColumnCount","rowCount","setRowCount","columnCount","setColumnCount","resetState","useCallback","createEmptyCell","formatAsColumnHeaders","type","children","text","createEmptyRow","cellCount","row","i","push","insertEmptyTable","column","rows","table","insertNodes","at","end"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-slate/src/editor/plugins/Table/TableButton.jsx"],"sourcesContent":["import React from 'react';\nimport { useSlate } from 'slate-react';\nimport { Dropdown } from 'semantic-ui-react';\nimport { ToolbarButton } from 'volto-slate/editor/ui';\n\nimport tableSVG from '@plone/volto/icons/table.svg';\nimport TableContainer from './TableContainer';\nimport './less/table.less';\nimport { Editor, Transforms } from 'slate';\n\nconst TableButton = ({ ...props }) => {\n  const editor = useSlate();\n\n  const [dropdownOpen, setDropdownOpen] = React.useState(false);\n\n  const [activeRow, setActiveRow] = React.useState(1);\n  const [activeColumn, setActiveColumn] = React.useState(1);\n\n  const defaultRowCount = 5;\n  const defaultColumnCount = 5;\n\n  const [rowCount, setRowCount] = React.useState(defaultRowCount);\n  const [columnCount, setColumnCount] = React.useState(defaultColumnCount);\n\n  const resetState = React.useCallback(() => {\n    setRowCount(defaultRowCount);\n    setColumnCount(defaultColumnCount);\n    setActiveRow(1);\n    setActiveColumn(1);\n  }, []);\n\n  const createEmptyCell = React.useCallback((formatAsColumnHeaders = false) => {\n    return {\n      type: formatAsColumnHeaders ? 'th' : 'td',\n      children: [{ type: 'p', children: [{ text: '' }] }],\n    };\n  }, []);\n\n  const createEmptyRow = React.useCallback(\n    (cellCount, formatAsColumnHeaders = false) => {\n      // should contain at least one <td> or it is not valid that children is empty\n      const row = { type: 'tr', children: [] };\n\n      for (let i = 0; i < cellCount; ++i) {\n        row.children.push(createEmptyCell(formatAsColumnHeaders));\n      }\n\n      return row;\n    },\n    [createEmptyCell],\n  );\n\n  /**\n   * @param {number} row Number of rows for the new empty table.\n   * @param {number} column Number of columns for the new empty table.\n   */\n  const insertEmptyTable = React.useCallback(\n    ({ row, column }) => {\n      const rows = [createEmptyRow(column, true)];\n      for (let i = 0; i < row - 1; ++i) {\n        rows.push(createEmptyRow(column));\n      }\n\n      const table = {\n        type: 'table',\n        children: [\n          {\n            type: 'tbody',\n            children: rows,\n          },\n        ],\n      };\n\n      Transforms.insertNodes(editor, [table], {\n        at: Editor.end(editor, []),\n      });\n    },\n    [createEmptyRow, editor],\n  );\n\n  return (\n    <>\n      <Dropdown\n        open={dropdownOpen}\n        onClose={() => {\n          resetState();\n          setDropdownOpen(false);\n        }}\n        trigger={\n          <ToolbarButton\n            {...props}\n            className=\"slate-table-dropdown-button\"\n            onClick={() => {\n              if (dropdownOpen) {\n                resetState();\n              }\n\n              setDropdownOpen(!dropdownOpen);\n            }}\n            icon={tableSVG}\n          ></ToolbarButton>\n        }\n      >\n        <Dropdown.Menu className=\"slate-table-dropdown-menu\">\n          <TableContainer\n            rowCount={rowCount}\n            columnCount={columnCount}\n            activeColumn={activeColumn}\n            activeRow={activeRow}\n            onCellMouseEnter={({ row, column }) => {\n              if (row > rowCount - 1) {\n                setRowCount(row + 1);\n              } else if (row < rowCount - 1) {\n                setRowCount(defaultRowCount);\n              }\n\n              if (column > columnCount - 1) {\n                setColumnCount(column + 1);\n              } else if (column < columnCount - 1) {\n                setColumnCount(defaultColumnCount);\n              }\n\n              if (row !== activeRow) {\n                setActiveRow(row);\n              }\n              if (column !== activeColumn) {\n                setActiveColumn(column);\n              }\n            }}\n            onCellMouseLeave={({ row, column }) => {}}\n            // `row` and `column` below are 1-based indices\n            onCellClick={({ row, column }) => {\n              insertEmptyTable({ row, column });\n            }}\n          />\n        </Dropdown.Menu>\n      </Dropdown>\n    </>\n  );\n};\n\nexport default TableButton;\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}