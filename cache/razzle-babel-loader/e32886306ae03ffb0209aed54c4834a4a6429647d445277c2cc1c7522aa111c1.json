{"ast":null,"code":"import _toConsumableArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/extends.js\";\nimport _omit from \"lodash/omit\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-slate-metadata-mentions/src/plugins/Mentions/index.js\",\n  _this = this;\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { defineMessages } from 'react-intl';\nimport { MENTION } from './constants';\nimport { MentionElement } from './render';\nimport { withMention } from './extensions';\nimport { MentionSchema } from './schema';\nimport MentionEditor from './MentionEditor';\nimport ToolbarButton from './ToolbarButton';\nimport mentionsSVG from '@plone/volto/icons/connector.svg';\nimport { makeInlineElementPlugin } from '@plone/volto-slate/elementEditor';\nimport './less/editor.less';\nvar messages = defineMessages({\n  edit: {\n    \"id\": \"Edit metadata\",\n    \"defaultMessage\": \"Edit metadata\"\n  },\n  \"delete\": {\n    \"id\": \"Remove metadata\",\n    \"defaultMessage\": \"Remove metadata\"\n  }\n});\nvar omittedProps = ['pluginEditor', 'getActiveElement', 'unwrapElement', 'schemaProvider', 'hasValue', 'elementType', 'isInlineElement', 'editSchema', 'element', 'persistentHelper'];\nvar btnFactory = function btnFactory(options) {\n  return function (props) {\n    return __jsx(ToolbarButton, _extends({}, props, options, {\n      title: \"Metadata\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 3\n      }\n    }));\n  };\n};\nexport default (function (config) {\n  var opts = {\n    title: 'Metadata',\n    pluginId: MENTION,\n    pluginEditor: MentionEditor,\n    elementType: MENTION,\n    element: MentionElement,\n    isInlineElement: true,\n    editSchema: MentionSchema,\n    extensions: [withMention],\n    hasValue: function hasValue(formData) {\n      return !!(formData.metadata || formData.id);\n    },\n    toolbarButtonIcon: mentionsSVG,\n    messages: messages\n  };\n  var _makeInlineElementPlu = makeInlineElementPlugin(opts),\n    _makeInlineElementPlu2 = _slicedToArray(_makeInlineElementPlu, 4),\n    installMentionsEditor = _makeInlineElementPlu2[0],\n    pluginOptions = _makeInlineElementPlu2[3];\n  config = installMentionsEditor(config);\n  var slate = config.settings.slate;\n  slate.toolbarButtons = [].concat(_toConsumableArray(slate.toolbarButtons || []), ['mention']);\n  slate.expandedToolbarButtons = [].concat(_toConsumableArray(slate.expandedToolbarButtons || []), ['mention']);\n\n  // Custom mention Toolbar Button\n  slate.buttons['mention'] = btnFactory(_omit(pluginOptions, omittedProps));\n  return config;\n});","map":{"version":3,"names":["React","defineMessages","MENTION","MentionElement","withMention","MentionSchema","MentionEditor","ToolbarButton","mentionsSVG","makeInlineElementPlugin","messages","edit","omittedProps","btnFactory","options","props","config","opts","title","pluginId","pluginEditor","elementType","element","isInlineElement","editSchema","extensions","hasValue","formData","metadata","id","toolbarButtonIcon","installMentionsEditor","pluginOptions","slate","settings","toolbarButtons","expandedToolbarButtons","buttons"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-slate-metadata-mentions/src/plugins/Mentions/index.js"],"sourcesContent":["import React from 'react';\nimport { defineMessages } from 'react-intl';\nimport { MENTION } from './constants';\nimport { MentionElement } from './render';\nimport { withMention } from './extensions';\nimport { MentionSchema } from './schema';\nimport MentionEditor from './MentionEditor';\nimport ToolbarButton from './ToolbarButton';\nimport mentionsSVG from '@plone/volto/icons/connector.svg';\nimport { makeInlineElementPlugin } from '@plone/volto-slate/elementEditor';\nimport { omit } from 'lodash';\n\nimport './less/editor.less';\n\nconst messages = defineMessages({\n  edit: {\n    id: 'Edit metadata',\n    defaultMessage: 'Edit metadata',\n  },\n  delete: {\n    id: 'Remove metadata',\n    defaultMessage: 'Remove metadata',\n  },\n});\n\nconst omittedProps = [\n  'pluginEditor',\n  'getActiveElement',\n  'unwrapElement',\n  'schemaProvider',\n  'hasValue',\n  'elementType',\n  'isInlineElement',\n  'editSchema',\n  'element',\n  'persistentHelper',\n];\n\nconst btnFactory = (options) => (props) => (\n  <ToolbarButton {...props} {...options} title=\"Metadata\" />\n);\n\nexport default (config) => {\n  const opts = {\n    title: 'Metadata',\n    pluginId: MENTION,\n    pluginEditor: MentionEditor,\n    elementType: MENTION,\n    element: MentionElement,\n    isInlineElement: true,\n    editSchema: MentionSchema,\n    extensions: [withMention],\n    hasValue: (formData) => !!(formData.metadata || formData.id),\n    toolbarButtonIcon: mentionsSVG,\n    messages,\n  };\n  const [installMentionsEditor, , , pluginOptions] = makeInlineElementPlugin(\n    opts,\n  );\n  config = installMentionsEditor(config);\n\n  const { slate } = config.settings;\n  slate.toolbarButtons = [...(slate.toolbarButtons || []), 'mention'];\n  slate.expandedToolbarButtons = [\n    ...(slate.expandedToolbarButtons || []),\n    'mention',\n  ];\n\n  // Custom mention Toolbar Button\n  slate.buttons['mention'] = btnFactory(omit(pluginOptions, omittedProps));\n\n  return config;\n};\n"],"mappings":";;;;;;;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,cAAc,QAAQ,YAAY;AAC3C,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,cAAc,QAAQ,UAAU;AACzC,SAASC,WAAW,QAAQ,cAAc;AAC1C,SAASC,aAAa,QAAQ,UAAU;AACxC,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAOC,WAAW,MAAM,kCAAkC;AAC1D,SAASC,uBAAuB,QAAQ,kCAAkC;AAG1E,OAAO,oBAAoB;AAE3B,IAAMC,QAAQ,GAAGT,cAAc,CAAC;EAC9BU,IAAI;IAAA;IAAA;EAAA,CAGH;EACD;IAAA;IAAA;EAAA;AAIF,CAAC,CAAC;AAEF,IAAMC,YAAY,GAAG,CACnB,cAAc,EACd,kBAAkB,EAClB,eAAe,EACf,gBAAgB,EAChB,UAAU,EACV,aAAa,EACb,iBAAiB,EACjB,YAAY,EACZ,SAAS,EACT,kBAAkB,CACnB;AAED,IAAMC,UAAU,GAAG,SAAbA,UAAU,CAAIC,OAAO;EAAA,OAAK,UAACC,KAAK;IAAA,OACpC,MAAC,aAAa,eAAKA,KAAK,EAAMD,OAAO;MAAE,KAAK,EAAC,UAAU;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GAAG;EAAA,CAC3D;AAAA;AAED,gBAAe,UAACE,MAAM,EAAK;EACzB,IAAMC,IAAI,GAAG;IACXC,KAAK,EAAE,UAAU;IACjBC,QAAQ,EAAEjB,OAAO;IACjBkB,YAAY,EAAEd,aAAa;IAC3Be,WAAW,EAAEnB,OAAO;IACpBoB,OAAO,EAAEnB,cAAc;IACvBoB,eAAe,EAAE,IAAI;IACrBC,UAAU,EAAEnB,aAAa;IACzBoB,UAAU,EAAE,CAACrB,WAAW,CAAC;IACzBsB,QAAQ,EAAE,kBAACC,QAAQ;MAAA,OAAK,CAAC,EAAEA,QAAQ,CAACC,QAAQ,IAAID,QAAQ,CAACE,EAAE,CAAC;IAAA;IAC5DC,iBAAiB,EAAEtB,WAAW;IAC9BE,QAAQ,EAARA;EACF,CAAC;EACD,4BAAmDD,uBAAuB,CACxEQ,IAAI,CACL;IAAA;IAFMc,qBAAqB;IAAMC,aAAa;EAG/ChB,MAAM,GAAGe,qBAAqB,CAACf,MAAM,CAAC;EAEtC,IAAQiB,KAAK,GAAKjB,MAAM,CAACkB,QAAQ,CAAzBD,KAAK;EACbA,KAAK,CAACE,cAAc,gCAAQF,KAAK,CAACE,cAAc,IAAI,EAAE,IAAG,SAAS,EAAC;EACnEF,KAAK,CAACG,sBAAsB,gCACtBH,KAAK,CAACG,sBAAsB,IAAI,EAAE,IACtC,SAAS,EACV;;EAED;EACAH,KAAK,CAACI,OAAO,CAAC,SAAS,CAAC,GAAGxB,UAAU,CAAC,MAAKmB,aAAa,EAAEpB,YAAY,CAAC,CAAC;EAExE,OAAOI,MAAM;AACf,CAAC"},"metadata":{"react-intl":{"messages":[{"id":"Edit metadata","defaultMessage":"Edit metadata"},{"id":"Remove metadata","defaultMessage":"Remove metadata"}]}},"sourceType":"module","externalDependencies":[]}