{"ast":null,"code":"import _toConsumableArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-forests-theme/src/components/manage/Blocks/ImageCards/View.jsx\",\n  _this = this;\nvar __jsx = React.createElement;\nimport React from 'react';\nimport cx from 'classnames';\nimport config from '@plone/volto/registry';\nimport DefaultImageSVG from '@plone/volto/components/manage/Blocks/Listing/default-image.svg';\nimport { Card, Message } from 'semantic-ui-react';\nimport { serializeNodes } from 'volto-slate/editor/render';\nimport { compose } from 'redux';\nimport { flattenToAppURL } from '@plone/volto/helpers';\nimport { withRouter } from 'react-router-dom';\nimport { injectIntl } from 'react-intl';\nimport './styles.less';\nvar alignmentTypes = {\n  left: 'left',\n  right: 'right',\n  center: 'centered',\n  full: 'left'\n};\nexport var getScaleUrl = function getScaleUrl(url, size) {\n  return (url || '').includes(config.settings.apiPath) ? \"\".concat(flattenToAppURL(url.replace('/api', '')), \"/@@images/image/\").concat(size) : \"\".concat(url.replace('/api', ''), \"/@@images/image/\").concat(size);\n};\nvar Cards = function Cards(props) {\n  var data = props.data,\n    editable = props.editable,\n    history = props.history;\n  var align = data.align,\n    cards = data.cards,\n    image_scale = data.image_scale,\n    _data$gridSize = data.gridSize,\n    gridSize = _data$gridSize === void 0 ? 'one' : _data$gridSize,\n    _data$theme = data.theme,\n    theme = _data$theme === void 0 ? 'default' : _data$theme;\n  var makeImage = function makeImage(item) {\n    var attachedimage = item.attachedimage;\n    return __jsx(\"img\", {\n      className: \"cards-tile-image\",\n      src: attachedimage ? getScaleUrl(flattenToAppURL(attachedimage), image_scale || 'preview') : DefaultImageSVG,\n      alt: item.title,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }\n    });\n  };\n  var makeTextBody = function makeTextBody(item) {\n    return __jsx(React.Fragment, null, __jsx(\"h3\", {\n      className: \"tile-listing-title\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }\n    }, item.title ? item.title : item.id), item.text && __jsx(\"p\", {\n      className: \"tile-listing-description\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }\n    }, serializeNodes(item.text)));\n  };\n  var handleNavigate = function handleNavigate(link) {\n    if (!props.editable) {\n      history.push(flattenToAppURL(link));\n    }\n  };\n  return cards && cards.length > 0 ? __jsx(\"div\", {\n    className: cx('ui fluid cards', gridSize),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, cards.map(function (item) {\n    return __jsx(Card, {\n      onClick: function onClick() {\n        return handleNavigate(item.link);\n      },\n      key: item['@id'],\n      className: cx('navigation-card', alignmentTypes[align] || 'left', theme),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    }, makeImage(item), makeTextBody(item));\n  })) : __jsx(React.Fragment, null, editable ? __jsx(Message, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 19\n    }\n  }, \"No image cards\") : '');\n};\n_c = Cards;\nCards.schema = function () {\n  return {\n    title: 'Image Card',\n    fieldsets: [{\n      id: 'default',\n      title: 'Default',\n      fields: ['title', 'text', 'attachedimage', 'link']\n    }],\n    properties: {\n      title: {\n        type: 'string',\n        title: 'Title'\n      },\n      text: {\n        widget: 'slate_richtext',\n        title: 'Text'\n      },\n      link: {\n        widget: 'url',\n        title: 'Link'\n      },\n      attachedimage: {\n        widget: 'attachedimage',\n        title: 'Image'\n      }\n    },\n    required: ['attachedimage']\n  };\n};\nCards.schemaExtender = function (schema) {\n  return _objectSpread(_objectSpread({}, schema), {}, {\n    fieldsets: [].concat(_toConsumableArray(schema.fieldsets), [{\n      id: 'cards_grid',\n      title: 'Cards grid',\n      fields: ['gridSize', 'theme']\n    }]),\n    properties: _objectSpread(_objectSpread({}, schema.properties), {}, {\n      gridSize: {\n        title: 'Grid Size',\n        choices: [['one', 'One'], ['two', 'Two'], ['three', 'Three'], ['four', 'Four']],\n        factory: 'Choice',\n        type: 'string'\n      },\n      theme: {\n        title: 'Theme',\n        choices: [['default', 'Default'], ['primary', 'Primary'], ['secondary', 'Secondary'], ['tertiary', 'Tertiary']]\n      }\n    })\n  });\n};\nexport default compose(withRouter, injectIntl)(Cards);\nvar _c;\n$RefreshReg$(_c, \"Cards\");","map":{"version":3,"names":["React","cx","config","DefaultImageSVG","Card","Message","serializeNodes","compose","flattenToAppURL","withRouter","injectIntl","alignmentTypes","left","right","center","full","getScaleUrl","url","size","includes","settings","apiPath","replace","Cards","props","data","editable","history","align","cards","image_scale","gridSize","theme","makeImage","item","attachedimage","title","makeTextBody","id","text","handleNavigate","link","push","length","map","schema","fieldsets","fields","properties","type","widget","required","schemaExtender","choices","factory"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-forests-theme/src/components/manage/Blocks/ImageCards/View.jsx"],"sourcesContent":["import React from 'react';\nimport cx from 'classnames';\nimport config from '@plone/volto/registry';\nimport DefaultImageSVG from '@plone/volto/components/manage/Blocks/Listing/default-image.svg';\nimport { Card, Message } from 'semantic-ui-react';\nimport { serializeNodes } from 'volto-slate/editor/render';\nimport { compose } from 'redux';\nimport { flattenToAppURL } from '@plone/volto/helpers';\nimport { withRouter } from 'react-router-dom';\nimport { injectIntl } from 'react-intl';\n\nimport './styles.less';\n\nconst alignmentTypes = {\n  left: 'left',\n  right: 'right',\n  center: 'centered',\n  full: 'left',\n};\n\nexport const getScaleUrl = (url, size) =>\n  (url || '').includes(config.settings.apiPath)\n    ? `${flattenToAppURL(url.replace('/api', ''))}/@@images/image/${size}`\n    : `${url.replace('/api', '')}/@@images/image/${size}`;\n\nconst Cards = (props) => {\n  const { data, editable, history } = props;\n  const {\n    align,\n    cards,\n    image_scale,\n    gridSize = 'one',\n    theme = 'default',\n  } = data;\n\n  const makeImage = (item) => {\n    const { attachedimage } = item;\n    return (\n      <img\n        className=\"cards-tile-image\"\n        src={\n          attachedimage\n            ? getScaleUrl(\n                flattenToAppURL(attachedimage),\n                image_scale || 'preview',\n              )\n            : DefaultImageSVG\n        }\n        alt={item.title}\n      />\n    );\n  };\n\n  const makeTextBody = (item) => (\n    <>\n      <h3 className=\"tile-listing-title\">\n        {item.title ? item.title : item.id}\n      </h3>\n      {item.text && (\n        <p className=\"tile-listing-description\">{serializeNodes(item.text)}</p>\n      )}\n    </>\n  );\n\n  const handleNavigate = (link) => {\n    if (!props.editable) {\n      history.push(flattenToAppURL(link));\n    }\n  };\n  return cards && cards.length > 0 ? (\n    <div className={cx('ui fluid cards', gridSize)}>\n      {cards.map((item) => (\n        <Card\n          onClick={() => handleNavigate(item.link)}\n          key={item['@id']}\n          className={cx(\n            'navigation-card',\n            alignmentTypes[align] || 'left',\n            theme,\n          )}\n        >\n          {makeImage(item)}\n          {makeTextBody(item)}\n        </Card>\n      ))}\n    </div>\n  ) : (\n    <>{editable ? <Message>No image cards</Message> : ''}</>\n  );\n};\n\nCards.schema = () => ({\n  title: 'Image Card',\n  fieldsets: [\n    {\n      id: 'default',\n      title: 'Default',\n      fields: ['title', 'text', 'attachedimage', 'link'],\n    },\n  ],\n\n  properties: {\n    title: {\n      type: 'string',\n      title: 'Title',\n    },\n    text: {\n      widget: 'slate_richtext',\n      title: 'Text',\n    },\n    link: {\n      widget: 'url',\n      title: 'Link',\n    },\n    attachedimage: {\n      widget: 'attachedimage',\n      title: 'Image',\n    },\n  },\n\n  required: ['attachedimage'],\n});\n\nCards.schemaExtender = (schema) => {\n  return {\n    ...schema,\n    fieldsets: [\n      ...schema.fieldsets,\n      {\n        id: 'cards_grid',\n        title: 'Cards grid',\n        fields: ['gridSize', 'theme'],\n      },\n    ],\n    properties: {\n      ...schema.properties,\n      gridSize: {\n        title: 'Grid Size',\n        choices: [\n          ['one', 'One'],\n          ['two', 'Two'],\n          ['three', 'Three'],\n          ['four', 'Four'],\n        ],\n        factory: 'Choice',\n        type: 'string',\n      },\n      theme: {\n        title: 'Theme',\n        choices: [\n          ['default', 'Default'],\n          ['primary', 'Primary'],\n          ['secondary', 'Secondary'],\n          ['tertiary', 'Tertiary'],\n        ],\n      },\n    },\n  };\n};\n\nexport default compose(withRouter, injectIntl)(Cards);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}