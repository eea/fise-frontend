{"ast":null,"code":"import _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _extends from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/extends.js\";\nimport _slicedToArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutProperties from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _uniq from \"lodash/uniq\";\nvar _excluded = [\"selectedColorscale\", \"color\", \"onChange\"];\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-plotlycharts/src/ChartEditor/MarkerColor.jsx\",\n  _this2 = this,\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\nimport Field from 'react-chart-editor/lib/components/fields/Field';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connectToContainer } from 'react-chart-editor/lib';\nimport RadioBlocks from 'react-chart-editor/lib/components/widgets/RadioBlocks';\nimport MultiColorPicker from 'react-chart-editor/lib/components/fields/MultiColorPicker';\nimport Numeric from 'react-chart-editor/lib/components/fields/Numeric';\nimport Radio from 'react-chart-editor/lib/components/fields/Radio';\nimport Info from 'react-chart-editor/lib/components/fields/Info';\nimport DataSelector from 'react-chart-editor/lib/components/fields/DataSelector';\nimport VisibilitySelect from 'react-chart-editor/lib/components/fields/VisibilitySelect';\nimport { MULTI_VALUED, COLORS } from 'react-chart-editor/lib/lib/constants';\nimport ColorscalePickerWidget from 'react-chart-editor/lib/components/widgets/ColorscalePicker';\nimport { Dropdown } from 'semantic-ui-react';\nimport config from '@plone/volto/registry';\nimport loadable from '@loadable/component';\nimport CustomMarkerColorscales from './CustomMarkerColorscales';\nvar ReactColor = loadable.lib({\n  resolved: {},\n  chunkName: function chunkName() {\n    return \"react-color\";\n  },\n  isReady: function isReady(props) {\n    var key = this.resolve(props);\n    if (this.resolved[key] !== true) {\n      return false;\n    }\n    if (typeof __webpack_modules__ !== 'undefined') {\n      return !!__webpack_modules__[key];\n    }\n    return false;\n  },\n  importAsync: function importAsync() {\n    return import( /* webpackChunkName: \"react-color\" */'react-color');\n  },\n  requireAsync: function requireAsync(props) {\n    var _this = this;\n    var key = this.resolve(props);\n    this.resolved[key] = false;\n    return this.importAsync(props).then(function (resolved) {\n      _this.resolved[key] = true;\n      return resolved;\n    });\n  },\n  requireSync: function requireSync(props) {\n    var id = this.resolve(props);\n    if (typeof __webpack_require__ !== 'undefined') {\n      return __webpack_require__(id);\n    }\n    return eval('module.require')(id);\n  },\n  resolve: function resolve() {\n    if (require.resolveWeak) {\n      return require.resolveWeak(\"react-color\");\n    }\n    return eval('require.resolve')(\"react-color\");\n  }\n});\n\n/**\n * React color picker component.\n *\n * @param {object} props\n * @param {string[]} props.selectedColorscale The color set from which the user\n * can choose.\n * @param {string} props.color Currently selected color.\n * @param {function} props.onChange Handler function for when the selected color\n * changes.\n */\n_c = ReactColor;\nvar ColorPicker = function ColorPicker(_ref) {\n  _s();\n  var selectedColorscale = _ref.selectedColorscale,\n    color = _ref.color,\n    onChange = _ref.onChange,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    dropdownOpen = _React$useState2[0],\n    setDropdownOpen = _React$useState2[1];\n\n  /**\n   * Returns black or white according to the given background color. Inspired\n   * from https://stackoverflow.com/a/1855903/258462.\n   * @returns {string} The color that should be used as foreground on the given\n   * background.\n   * @todo Make this work with colors other than the format #RRGGBB.\n   */\n  var contrastColor = React.useCallback(function (color) {\n    // color = color.replace(/ /g, '').replace('#', '').split(',').map(Number);\n    color = color.replace('#', '').split('');\n    var rr = color[0] + color[1];\n    var gg = color[2] + color[3];\n    var bb = color[4] + color[5];\n    rr = parseInt(rr, 16);\n    gg = parseInt(gg, 16);\n    bb = parseInt(bb, 16);\n    var l = (0.299 * rr + 0.587 * gg + 0.114 * bb) / 255;\n    var d;\n    if (l > 0.5) {\n      d = 0; // bright colors - black font\n    } else {\n      d = 255; // dark colors - white font\n    }\n\n    return \"rgb(\".concat(d, \", \").concat(d, \", \").concat(d, \")\");\n  }, []);\n  var cc = React.useMemo(function () {\n    return contrastColor(color);\n  }, [color, contrastColor]);\n  return __jsx(Dropdown, _extends({}, rest, {\n    open: dropdownOpen,\n    onClose: function onClose() {\n      setDropdownOpen(false);\n    },\n    direction: \"left\",\n    trigger: __jsx(\"button\", {\n      onClick: function onClick() {\n        setDropdownOpen(!dropdownOpen);\n      },\n      style: {\n        backgroundColor: \"\".concat(color),\n        color: cc,\n        fontFamily: 'monospace',\n        // without this it is 'capitalize', because of other CSS applied to <button>:\n        textTransform: 'uppercase'\n      },\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, color),\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }), __jsx(Dropdown.Menu, {\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, __CLIENT__ && __jsx(ReactColor, {\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 11\n    }\n  }, function (_ref2) {\n    var CirclePicker = _ref2.CirclePicker;\n    return __jsx(CirclePicker, {\n      color: color,\n      onChange: onChange,\n      colors: selectedColorscale,\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }\n    });\n  })));\n};\n\n/**\n * React color picker field component. Just an enhanced ColorPicker with a label\n * before it.\n *\n * @param {object} props\n * @param {string} props.name The string to put in the label.\n * @param {string} props.color Currently selected color.\n * @param {function} props.onChange Handler function for when the selected color\n * changes.\n * @param {string[]} props.colorscale The color set from which the user can\n * choose.\n */\n_s(ColorPicker, \"OiKBG6F6439nVRBJ4iXA97BPhNM=\");\n_c2 = ColorPicker;\nvar ColorPickerField = function ColorPickerField(_ref3) {\n  var name = _ref3.name,\n    color = _ref3.color,\n    colorscale = _ref3.colorscale,\n    onChange = _ref3.onChange;\n  return __jsx(\"div\", {\n    style: {\n      display: 'flex',\n      width: '100%',\n      marginTop: '0.1rem'\n    },\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 5\n    }\n  }, __jsx(\"label\", {\n    style: {\n      alignSelf: 'center'\n    },\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }\n  }, name), __jsx(\"div\", {\n    style: {\n      flexGrow: 1\n    },\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }), __jsx(ColorPicker, {\n    style: {\n      textAlign: 'right',\n      marginRight: '1rem',\n      flexShrink: 0\n    },\n    color: 1 <= color && color <= colorscale.length ? colorscale[color - 1] : colorscale[Math.floor(Math.random() * colorscale.length)],\n    selectedColorscale: colorscale,\n    onChange: onChange,\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }\n  }));\n};\n\n/**\n * @description The three container property paths relevant to bar charts with\n * categorical coloured axis are:\n *  - `marker.colorscale` - the color scale, an array of colors (currently only\n *    \\# followed by 6 hex digits are supported)\n *  - `meta.manualcolor`: association between every unique value in the\n *    categoricalaxis and a color index representing a color in the\n *    marker.colorscale,\n *  - `marker.categoricalaxis`: can be `'x'` or `'y'` or `null` (initially it is\n *    `null`)\n *\n * *Related to color indices:* `-1` invalid array index, `0` valid array index,\n * so `0` means invalid color index in any given colorscale.\n * @todo handle indices using special functions that transform e.g. `0` in `1`\n * and `8` in `7`.\n */\n_c3 = ColorPickerField;\nvar UnconnectedMarkerColor = /*#__PURE__*/function (_Component) {\n  _inherits(UnconnectedMarkerColor, _Component);\n  var _super = _createSuper(UnconnectedMarkerColor);\n  function UnconnectedMarkerColor(props, context) {\n    var _props$container, _props$container$mark;\n    var _this3;\n    _classCallCheck(this, UnconnectedMarkerColor);\n    _this3 = _super.call(this, props, context);\n    _defineProperty(_assertThisInitialized(_this3), \"updateCategoricalsInData\", function (obj) {\n      //TODO: this updateContainer is resetting layout to some defaults when loading component\n      //TODO: need to go around that\n      //this.context.updateContainer(obj);\n      _this3.updateCategoricalsInVisual();\n    });\n    _defineProperty(_assertThisInitialized(_this3), \"updateCategoricalsInVisual\", function () {\n      var _this3$props$containe, _this3$props$containe2;\n      var isManual = (_this3$props$containe = _this3.props.container) === null || _this3$props$containe === void 0 ? void 0 : (_this3$props$containe2 = _this3$props$containe.marker) === null || _this3$props$containe2 === void 0 ? void 0 : _this3$props$containe2.categoricalaxis;\n      if (!isManual && _this3.props.container && _this3.props.container.marker) {\n        _this3.context.updateContainer({\n          'marker.color': undefined\n        });\n        return;\n      }\n      var data = _this3.props.container && _this3.props.container.marker ? _this3.props.container[_this3.props.container.marker.categoricalaxis].map(function (item) {\n        return _this3.props.container.marker.colorscale[_this3.props.container.meta.manualcolor[item] - 1];\n      }) : [];\n      if (_this3.props.container && _this3.props.container.marker) {\n        _this3.context.updateContainer({\n          'marker.color': data\n        });\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this3), \"handleAxisChange\", function (opt) {\n      _this3.updateCategoricalsInData({\n        'marker.categoricalaxis': opt\n        // 'marker.colorscale': defaultColorscale,\n        // 'meta.manualcolor': ,\n      });\n\n      _this3.rebuildColorPickers();\n    });\n    _defineProperty(_assertThisInitialized(_this3), \"factoryHandleColorPickerChange\", function (val, cs) {\n      var val2 = val;\n      return function (newColor) {\n        var _this3$props$containe3, _this3$props$containe4;\n        _this3.updateCategoricalsInData({\n          'meta.manualcolor': _objectSpread(_objectSpread({}, ((_this3$props$containe3 = _this3.props.container) === null || _this3$props$containe3 === void 0 ? void 0 : (_this3$props$containe4 = _this3$props$containe3.meta) === null || _this3$props$containe4 === void 0 ? void 0 : _this3$props$containe4.manualcolor) || {}), {}, _defineProperty({}, val2, cs.indexOf(newColor.hex) + 1))\n        });\n        _this3.rebuildColorPickers();\n      };\n    });\n    _defineProperty(_assertThisInitialized(_this3), \"handleColorscaleChange\", function (cs) {\n      _this3.updateCategoricalsInData({\n        'marker.colorscale': cs\n      });\n      _this3.rebuildColorPickers();\n    });\n    _defineProperty(_assertThisInitialized(_this3), \"rebuildColorPickers\", function () {\n      var _this3$props$containe5;\n      if (_this3.props.container.type !== 'bar') {\n        _this3.updateCategoricalsInData({\n          'marker.colorscale': null,\n          'meta.manualcolor': null,\n          'marker.categoricalaxis': null\n        });\n        return;\n      }\n      var colors = {};\n      var data = _this3.props.container[_this3.props.container.marker.categoricalaxis];\n\n      // the colorscale array\n      var cs = (_this3$props$containe5 = _this3.props.container.marker) === null || _this3$props$containe5 === void 0 ? void 0 : _this3$props$containe5.colorscale;\n\n      // if a color scale is not yet set\n      if (!cs) {\n        return;\n      }\n\n      // for each unique value\n      _uniq(data).forEach(function (x, i) {\n        // if the current unique value from the axis has a color\n        if (_this3.props.container.meta.manualcolor[x] && _this3.props.container.meta.manualcolor[x] > 0) {\n          colors[x] = _this3.props.container.meta.manualcolor[x];\n          return;\n        }\n\n        // if not, use an increasing integer\n        if (i < cs.length) {\n          colors[x] = i + 1;\n          return;\n        }\n\n        // if the increasing integer is not valid, set a random valid index\n        var rnd = Math.floor(Math.random() * cs.length) + 1;\n        colors[x] = rnd;\n      });\n      _this3.updateCategoricalsInData({\n        'meta.manualcolor': colors\n      });\n    });\n    var type = null;\n    if ((_props$container = props.container) !== null && _props$container !== void 0 && (_props$container$mark = _props$container.marker) !== null && _props$container$mark !== void 0 && _props$container$mark.categoricalaxis) {\n      type = 'manual';\n    } else if (!props.container.marker || props.container.marker && !props.container.marker.colorsrc) {\n      type = 'constant';\n    } else if (props.container.marker && Array.isArray(props.container.marker.color) && props.fullContainer.marker && Array.isArray(props.fullContainer.marker.color)) {\n      type = 'variable';\n    }\n    _this3.state = {\n      type: type,\n      value: {\n        constant: type === 'constant' ? props.fullValue : COLORS.mutedBlue,\n        variable: type === 'variable' ? props.fullValue : null,\n        manual: type === 'manual' ? props.fullValue : null\n      },\n      selectedConstantColorOption: type === 'constant' && props.multiValued ? 'multiple' : 'single'\n    };\n    _this3.setType = _this3.setType.bind(_assertThisInitialized(_this3));\n    _this3.setColor = _this3.setColor.bind(_assertThisInitialized(_this3));\n    _this3.setColorScale = _this3.setColorScale.bind(_assertThisInitialized(_this3));\n    _this3.onConstantColorOptionChange = _this3.onConstantColorOptionChange.bind(_assertThisInitialized(_this3));\n    _this3.applyType(type, true);\n    return _this3;\n  }\n\n  /**\n   * Also accepts usual fields, not just the custom ones.\n   */\n  _createClass(UnconnectedMarkerColor, [{\n    key: \"setType\",\n    value:\n    /**\n     * An event handler for when the user selects Manual, Constant or Variable.\n     * @param {string} type\n     */\n    function setType(type) {\n      if (this.state.type !== type) {\n        this.setState({\n          type: type\n        });\n        this.props.updatePlot(this.state.value[type]);\n        this.applyType(type, false);\n      }\n    }\n\n    /**\n     * Applies the change of the type (manual, constant or variable) to the chart\n     * data. In the next render this component will show a different section.\n     * @param {string} type\n     * @param {boolean} initial Whether the method can write state through\n     * this.state, if not, then uses this.setState. React throws an error in the\n     * browser console when using this.setState inside a component constructor,\n     * even indirectly.\n     */\n  }, {\n    key: \"applyType\",\n    value: function applyType(type, initial) {\n      var _this$props$container, _this$props$container2, _this$props$container3, _this$props$container4, _this$props$container5, _this$props$container6;\n      switch (type) {\n        case 'constant':\n          this.updateCategoricalsInData({\n            'marker.colorsrc': null,\n            'marker.colorscale': null,\n            'marker.showscale': null,\n            'marker.categoricalaxis': null,\n            'meta.manualcolor': null\n          });\n          if (initial) {\n            if (typeof this.state !== 'object') {\n              this.setState({});\n            }\n            this.setState({\n              colorScale: null\n            });\n          } else {\n            this.setState({\n              colorscale: null\n            });\n          }\n          break;\n        case 'manual':\n          this.updateCategoricalsInData({\n            'marker.colorscale': ((_this$props$container = this.props.container) === null || _this$props$container === void 0 ? void 0 : (_this$props$container2 = _this$props$container.marker) === null || _this$props$container2 === void 0 ? void 0 : _this$props$container2.colorscale) || config.settings.plotlyChartsColorScale,\n            'marker.categoricalaxis': ((_this$props$container3 = this.props.container) === null || _this$props$container3 === void 0 ? void 0 : (_this$props$container4 = _this$props$container3.marker) === null || _this$props$container4 === void 0 ? void 0 : _this$props$container4.categoricalaxis) || 'x',\n            'meta.manualcolor': ((_this$props$container5 = this.props.container) === null || _this$props$container5 === void 0 ? void 0 : (_this$props$container6 = _this$props$container5.meta) === null || _this$props$container6 === void 0 ? void 0 : _this$props$container6.manualcolor) || {}\n          });\n          this.rebuildColorPickers();\n          break;\n        case 'variable':\n          this.updateCategoricalsInData({\n            'marker.color': null,\n            'marker.colorsrc': null,\n            'marker.colorscale': null,\n            'marker.categoricalaxis': null,\n            'meta.manualcolor': null\n          });\n          break;\n        default:\n          // console.error('Unknown marker color type', type);\n          return;\n      }\n    }\n  }, {\n    key: \"setColor\",\n    value: function setColor(inputValue) {\n      var type = this.state.type;\n      if (type === 'manual') {\n        // console.error(\n        //   'When type is set to \"manual\", setColor should not be called.',\n        // );\n        return;\n      }\n      this.setState(type === 'constant' ? {\n        value: {\n          constant: inputValue\n        }\n      } : {\n        value: {\n          variable: inputValue\n        }\n      });\n      this.props.updatePlot(inputValue);\n    }\n  }, {\n    key: \"setColorScale\",\n    value: function setColorScale(inputValue) {\n      this.setState({\n        colorscale: inputValue\n      });\n      this.context.updateContainer({\n        'marker.colorscale': inputValue\n      });\n    }\n  }, {\n    key: \"isMultiValued\",\n    value: function isMultiValued() {\n      return this.props.multiValued || Array.isArray(this.props.fullValue) && this.props.fullValue.includes(MULTI_VALUED) || this.props.container.marker && this.props.container.marker.colorscale && this.props.container.marker.colorscale === MULTI_VALUED || this.props.container.marker && this.props.container.marker.colorsrc && this.props.container.marker.colorsrc === MULTI_VALUED || this.props.container.marker && this.props.container.marker.color && Array.isArray(this.props.container.marker.color) && this.props.container.marker.color.includes(MULTI_VALUED);\n    }\n  }, {\n    key: \"onConstantColorOptionChange\",\n    value: function onConstantColorOptionChange(value) {\n      this.setState({\n        selectedConstantColorOption: value\n      });\n    }\n  }, {\n    key: \"renderConstantControls\",\n    value: function renderConstantControls() {\n      var _ = this.context.localize;\n      return __jsx(MultiColorPicker, {\n        attr: \"marker.color\",\n        multiColorMessage: _('Each trace will be colored according to the selected colorscale.'),\n        singleColorMessage: _('All traces will be colored in the the same color.'),\n        setColor: this.setColor,\n        setColorScale: this.setColorScale,\n        onConstantColorOptionChange: this.onConstantColorOptionChange,\n        parentSelectedConstantColorOption: this.state.selectedConstantColorOption,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 7\n        }\n      });\n    }\n\n    /**\n     *  When the selected categorical axis is changed.\n     */\n  }, {\n    key: \"renderManualControls\",\n    value: function renderManualControls() {\n      var _this$props$container7,\n        _this$props$container8,\n        _this$props$container9,\n        _this$props$container10,\n        _this$props$container11,\n        _this$props$container12,\n        _this$props$container13,\n        _this$props$container14,\n        _this4 = this;\n      var _ = this.context.localize;\n      var options = [{\n        label: _('X Axis'),\n        value: 'x'\n      }, {\n        label: _('Y axis'),\n        value: 'y'\n      }];\n      var categoricalColorscale = (_this$props$container7 = this.props.container) === null || _this$props$container7 === void 0 ? void 0 : (_this$props$container8 = _this$props$container7.marker) === null || _this$props$container8 === void 0 ? void 0 : _this$props$container8.colorscale;\n      return __jsx(React.Fragment, null, __jsx(RadioBlocks, {\n        options: options,\n        activeOption: ((_this$props$container9 = this.props.container) === null || _this$props$container9 === void 0 ? void 0 : (_this$props$container10 = _this$props$container9.marker) === null || _this$props$container10 === void 0 ? void 0 : _this$props$container10.categoricalaxis) || null,\n        onOptionChange: this.handleAxisChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 495,\n          columnNumber: 9\n        }\n      }), ((_this$props$container11 = this.props.container) === null || _this$props$container11 === void 0 ? void 0 : (_this$props$container12 = _this$props$container11.marker) === null || _this$props$container12 === void 0 ? void 0 : _this$props$container12.categoricalaxis) && __jsx(React.Fragment, null, __jsx(ColorscalePickerWidget, {\n        selected: categoricalColorscale,\n        onColorscaleChange: this.handleColorscaleChange.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 502,\n          columnNumber: 13\n        }\n      }), Object.entries(((_this$props$container13 = this.props.container) === null || _this$props$container13 === void 0 ? void 0 : (_this$props$container14 = _this$props$container13.meta) === null || _this$props$container14 === void 0 ? void 0 : _this$props$container14.manualcolor) || {}).map(function (_ref4, i) {\n        var _ref5 = _slicedToArray(_ref4, 2),\n          val = _ref5[0],\n          color = _ref5[1];\n        return __jsx(ColorPickerField, {\n          key: val,\n          name: val,\n          color: color,\n          colorscale: categoricalColorscale,\n          onChange: function onChange(newColor) {\n            _this4.factoryHandleColorPickerChange(val, categoricalColorscale).bind(_this4)(newColor);\n          },\n          __self: _this4,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 509,\n            columnNumber: 19\n          }\n        });\n      })));\n    }\n  }, {\n    key: \"renderVariableControls\",\n    value: function renderVariableControls() {\n      var _this$props$container15, _this$props$container16;\n      var multiValued = this.props.container && this.props.container.marker && (this.props.container.marker.colorscale && this.props.container.marker.colorscale === MULTI_VALUED || this.props.container.marker.colorsrc && this.props.container.marker.colorsrc === MULTI_VALUED);\n      var colorscaleState = this.state.colorscale;\n      var colorscaleProps = (_this$props$container15 = this.props.container) === null || _this$props$container15 === void 0 ? void 0 : (_this$props$container16 = _this$props$container15.marker) === null || _this$props$container16 === void 0 ? void 0 : _this$props$container16.colorscale;\n      var activeColorscale = colorscaleState ? colorscaleState : colorscaleProps;\n      return __jsx(Field, {\n        multiValued: multiValued,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 547,\n          columnNumber: 7\n        }\n      }, __jsx(DataSelector, {\n        suppressMultiValuedMessage: true,\n        attr: \"marker.color\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 548,\n          columnNumber: 9\n        }\n      }), this.props.container.marker && this.props.container.marker.colorscale === MULTI_VALUED ? null : __jsx(React.Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 551,\n          columnNumber: 11\n        }\n      }, __jsx(CustomMarkerColorscales, {\n        _: this.props._,\n        handleChange: this.setColorScale,\n        colorscale: activeColorscale,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 552,\n          columnNumber: 13\n        }\n      })));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var attr = this.props.attr;\n      var _this$context = this.context,\n        _ = _this$context.localize,\n        container = _this$context.container;\n\n      // TO DO: https://github.com/plotly/react-chart-editor/issues/654\n      var noSplitsPresent = container && (!container.transforms || !container.transforms.filter(function (t) {\n        return t.type === 'groupby';\n      }).length);\n      if (noSplitsPresent) {\n        var type = this.state.type;\n        var options = [{\n          label: _('Manual'),\n          value: 'manual'\n        }, {\n          label: _('Constant'),\n          value: 'constant'\n        }, {\n          label: _('Variable'),\n          value: 'variable'\n        }];\n\n        // TODO: the minimum width is too big, there should be a margin to the\n        // right of Variable that should be like the other fields with 100% width\n        return __jsx(React.Fragment, null, __jsx(Field, _extends({}, this.props, {\n          attr: attr,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 585,\n            columnNumber: 11\n          }\n        }), __jsx(Field, {\n          multiValued: this.isMultiValued() && !this.state.type,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 586,\n            columnNumber: 13\n          }\n        }, __jsx(RadioBlocks, {\n          options: options,\n          activeOption: type,\n          onOptionChange: this.setType,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 587,\n            columnNumber: 15\n          }\n        }), !type ? null : __jsx(Info, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 594,\n            columnNumber: 17\n          }\n        }, type === 'constant' ? _('All points in a trace are colored in the same color.') : type === 'variable' ? _('Each point in a trace is colored according to data.') : _('Each point in a trace is colored according to the selected axis and the below manually set colors.'))), type === 'manual' && this.renderManualControls(), type === 'constant' && this.renderConstantControls(), type === 'variable' && this.renderVariableControls()), type === 'constant' ? null : __jsx(React.Fragment, null, __jsx(Radio, {\n          label: _('Colorscale Direction'),\n          attr: \"marker.reversescale\",\n          options: [{\n            label: _('Normal'),\n            value: false\n          }, {\n            label: _('Reversed'),\n            value: true\n          }],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 612,\n            columnNumber: 15\n          }\n        }), __jsx(Radio, {\n          label: _('Color Bar'),\n          attr: \"marker.showscale\",\n          options: [{\n            label: _('Show'),\n            value: true\n          }, {\n            label: _('Hide'),\n            value: false\n          }],\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 620,\n            columnNumber: 15\n          }\n        }), __jsx(VisibilitySelect, {\n          label: _('Colorscale Range'),\n          attr: \"marker.cauto\",\n          options: [{\n            label: _('Auto'),\n            value: true\n          }, {\n            label: _('Custom'),\n            value: false\n          }],\n          showOn: false,\n          defaultOpt: true,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 628,\n            columnNumber: 15\n          }\n        }, __jsx(Numeric, {\n          label: _('Min'),\n          attr: \"marker.cmin\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 638,\n            columnNumber: 17\n          }\n        }), __jsx(Numeric, {\n          label: _('Max'),\n          attr: \"marker.cmax\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 639,\n            columnNumber: 17\n          }\n        }))));\n      }\n      return __jsx(Field, _extends({}, this.props, {\n        attr: attr,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 648,\n          columnNumber: 7\n        }\n      }), this.renderConstantControls());\n    }\n  }]);\n  return UnconnectedMarkerColor;\n}(Component);\nUnconnectedMarkerColor.propTypes = _objectSpread({\n  fullValue: PropTypes.any,\n  updatePlot: PropTypes.func\n}, Field.propTypes);\nUnconnectedMarkerColor.contextTypes = {\n  localize: PropTypes.func,\n  updateContainer: PropTypes.func,\n  traceIndexes: PropTypes.array,\n  container: PropTypes.object\n};\nUnconnectedMarkerColor.displayName = 'UnconnectedMarkerColor';\nexport default _c4 = connectToContainer(UnconnectedMarkerColor);\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"ReactColor\");\n$RefreshReg$(_c2, \"ColorPicker\");\n$RefreshReg$(_c3, \"ColorPickerField\");\n$RefreshReg$(_c4, \"%default%\");","map":{"version":3,"names":["Field","PropTypes","React","Component","connectToContainer","RadioBlocks","MultiColorPicker","Numeric","Radio","Info","DataSelector","VisibilitySelect","MULTI_VALUED","COLORS","ColorscalePickerWidget","Dropdown","config","loadable","CustomMarkerColorscales","ReactColor","lib","ColorPicker","selectedColorscale","color","onChange","rest","useState","dropdownOpen","setDropdownOpen","contrastColor","useCallback","replace","split","rr","gg","bb","parseInt","l","d","cc","useMemo","backgroundColor","fontFamily","textTransform","__CLIENT__","CirclePicker","ColorPickerField","name","colorscale","display","width","marginTop","alignSelf","flexGrow","textAlign","marginRight","flexShrink","length","Math","floor","random","UnconnectedMarkerColor","props","context","obj","updateCategoricalsInVisual","isManual","container","marker","categoricalaxis","updateContainer","undefined","data","map","item","meta","manualcolor","opt","updateCategoricalsInData","rebuildColorPickers","val","cs","val2","newColor","indexOf","hex","type","colors","forEach","x","i","rnd","colorsrc","Array","isArray","fullContainer","state","value","constant","fullValue","mutedBlue","variable","manual","selectedConstantColorOption","multiValued","setType","bind","setColor","setColorScale","onConstantColorOptionChange","applyType","setState","updatePlot","initial","colorScale","settings","plotlyChartsColorScale","inputValue","includes","_","localize","options","label","categoricalColorscale","handleAxisChange","handleColorscaleChange","Object","entries","factoryHandleColorPickerChange","colorscaleState","colorscaleProps","activeColorscale","attr","noSplitsPresent","transforms","filter","t","isMultiValued","renderManualControls","renderConstantControls","renderVariableControls","propTypes","any","func","contextTypes","traceIndexes","array","object","displayName"],"sources":["/home/tooler/code/work/forests-frontend/node_modules/@eeacms/volto-plotlycharts/src/ChartEditor/MarkerColor.jsx"],"sourcesContent":["import Field from 'react-chart-editor/lib/components/fields/Field';\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connectToContainer } from 'react-chart-editor/lib';\nimport RadioBlocks from 'react-chart-editor/lib/components/widgets/RadioBlocks';\nimport MultiColorPicker from 'react-chart-editor/lib/components/fields/MultiColorPicker';\nimport Numeric from 'react-chart-editor/lib/components/fields/Numeric';\nimport Radio from 'react-chart-editor/lib/components/fields/Radio';\nimport Info from 'react-chart-editor/lib/components/fields/Info';\nimport DataSelector from 'react-chart-editor/lib/components/fields/DataSelector';\nimport VisibilitySelect from 'react-chart-editor/lib/components/fields/VisibilitySelect';\nimport { MULTI_VALUED, COLORS } from 'react-chart-editor/lib/lib/constants';\nimport ColorscalePickerWidget from 'react-chart-editor/lib/components/widgets/ColorscalePicker';\nimport loadash from 'lodash';\nimport { Dropdown } from 'semantic-ui-react';\nimport config from '@plone/volto/registry';\n\nimport loadable from '@loadable/component';\nimport CustomMarkerColorscales from './CustomMarkerColorscales';\n\nconst ReactColor = loadable.lib(() => import('react-color'));\n\n/**\n * React color picker component.\n *\n * @param {object} props\n * @param {string[]} props.selectedColorscale The color set from which the user\n * can choose.\n * @param {string} props.color Currently selected color.\n * @param {function} props.onChange Handler function for when the selected color\n * changes.\n */\nconst ColorPicker = ({ selectedColorscale, color, onChange, ...rest }) => {\n  const [dropdownOpen, setDropdownOpen] = React.useState(false);\n\n  /**\n   * Returns black or white according to the given background color. Inspired\n   * from https://stackoverflow.com/a/1855903/258462.\n   * @returns {string} The color that should be used as foreground on the given\n   * background.\n   * @todo Make this work with colors other than the format #RRGGBB.\n   */\n  const contrastColor = React.useCallback((color) => {\n    // color = color.replace(/ /g, '').replace('#', '').split(',').map(Number);\n    color = color.replace('#', '').split('');\n\n    let rr = color[0] + color[1];\n    let gg = color[2] + color[3];\n    let bb = color[4] + color[5];\n\n    rr = parseInt(rr, 16);\n    gg = parseInt(gg, 16);\n    bb = parseInt(bb, 16);\n\n    const l = (0.299 * rr + 0.587 * gg + 0.114 * bb) / 255;\n\n    let d;\n    if (l > 0.5) {\n      d = 0; // bright colors - black font\n    } else {\n      d = 255; // dark colors - white font\n    }\n    return `rgb(${d}, ${d}, ${d})`;\n  }, []);\n\n  const cc = React.useMemo(() => {\n    return contrastColor(color);\n  }, [color, contrastColor]);\n\n  return (\n    <Dropdown\n      {...rest}\n      open={dropdownOpen}\n      onClose={() => {\n        setDropdownOpen(false);\n      }}\n      direction=\"left\"\n      trigger={\n        <button\n          onClick={() => {\n            setDropdownOpen(!dropdownOpen);\n          }}\n          style={{\n            backgroundColor: `${color}`,\n            color: cc,\n            fontFamily: 'monospace',\n            // without this it is 'capitalize', because of other CSS applied to <button>:\n            textTransform: 'uppercase',\n          }}\n        >\n          {color}\n        </button>\n      }\n    >\n      <Dropdown.Menu>\n        {__CLIENT__ && (\n          <ReactColor>\n            {({ CirclePicker }) => {\n              return (\n                <CirclePicker\n                  color={color}\n                  onChange={onChange}\n                  colors={selectedColorscale}\n                />\n              );\n            }}\n          </ReactColor>\n        )}\n      </Dropdown.Menu>\n    </Dropdown>\n  );\n};\n\n/**\n * React color picker field component. Just an enhanced ColorPicker with a label\n * before it.\n *\n * @param {object} props\n * @param {string} props.name The string to put in the label.\n * @param {string} props.color Currently selected color.\n * @param {function} props.onChange Handler function for when the selected color\n * changes.\n * @param {string[]} props.colorscale The color set from which the user can\n * choose.\n */\nconst ColorPickerField = ({ name, color, colorscale, onChange }) => {\n  return (\n    <div\n      style={{\n        display: 'flex',\n        width: '100%',\n        marginTop: '0.1rem',\n      }}\n    >\n      <label\n        style={{\n          alignSelf: 'center',\n        }}\n      >\n        {name}\n      </label>\n      <div style={{ flexGrow: 1 }}></div>\n      <ColorPicker\n        style={{\n          textAlign: 'right',\n          marginRight: '1rem',\n          flexShrink: 0,\n        }}\n        color={\n          1 <= color && color <= colorscale.length\n            ? colorscale[color - 1]\n            : colorscale[Math.floor(Math.random() * colorscale.length)]\n        }\n        selectedColorscale={colorscale}\n        onChange={onChange}\n      />\n    </div>\n  );\n};\n\n/**\n * @description The three container property paths relevant to bar charts with\n * categorical coloured axis are:\n *  - `marker.colorscale` - the color scale, an array of colors (currently only\n *    \\# followed by 6 hex digits are supported)\n *  - `meta.manualcolor`: association between every unique value in the\n *    categoricalaxis and a color index representing a color in the\n *    marker.colorscale,\n *  - `marker.categoricalaxis`: can be `'x'` or `'y'` or `null` (initially it is\n *    `null`)\n *\n * *Related to color indices:* `-1` invalid array index, `0` valid array index,\n * so `0` means invalid color index in any given colorscale.\n * @todo handle indices using special functions that transform e.g. `0` in `1`\n * and `8` in `7`.\n */\nclass UnconnectedMarkerColor extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    let type = null;\n\n    if (props.container?.marker?.categoricalaxis) {\n      type = 'manual';\n    } else if (\n      !props.container.marker ||\n      (props.container.marker && !props.container.marker.colorsrc)\n    ) {\n      type = 'constant';\n    } else if (\n      props.container.marker &&\n      Array.isArray(props.container.marker.color) &&\n      props.fullContainer.marker &&\n      Array.isArray(props.fullContainer.marker.color)\n    ) {\n      type = 'variable';\n    }\n\n    this.state = {\n      type,\n      value: {\n        constant: type === 'constant' ? props.fullValue : COLORS.mutedBlue,\n        variable: type === 'variable' ? props.fullValue : null,\n        manual: type === 'manual' ? props.fullValue : null,\n      },\n      selectedConstantColorOption:\n        type === 'constant' && props.multiValued ? 'multiple' : 'single',\n    };\n\n    this.setType = this.setType.bind(this);\n    this.setColor = this.setColor.bind(this);\n    this.setColorScale = this.setColorScale.bind(this);\n    this.onConstantColorOptionChange = this.onConstantColorOptionChange.bind(\n      this,\n    );\n\n    this.applyType(type, true);\n  }\n\n  /**\n   * Also accepts usual fields, not just the custom ones.\n   */\n  updateCategoricalsInData = (obj) => {\n    //TODO: this updateContainer is resetting layout to some defaults when loading component\n    //TODO: need to go around that\n    //this.context.updateContainer(obj);\n    this.updateCategoricalsInVisual();\n  };\n\n  /**\n   * Based on data of the current trace which contains custom fields.\n   */\n  updateCategoricalsInVisual = () => {\n    const isManual = this.props.container?.marker?.categoricalaxis;\n    if (!isManual && this.props.container && this.props.container.marker) {\n      this.context.updateContainer({\n        'marker.color': undefined,\n      });\n      return;\n    }\n\n    const data =\n      this.props.container && this.props.container.marker\n        ? this.props.container[this.props.container.marker.categoricalaxis].map(\n            (item) =>\n              this.props.container.marker.colorscale[\n                this.props.container.meta.manualcolor[item] - 1\n              ],\n          )\n        : [];\n\n    if (this.props.container && this.props.container.marker) {\n      this.context.updateContainer({\n        'marker.color': data,\n      });\n    }\n  };\n\n  /**\n   * An event handler for when the user selects Manual, Constant or Variable.\n   * @param {string} type\n   */\n  setType(type) {\n    if (this.state.type !== type) {\n      this.setState({ type });\n      this.props.updatePlot(this.state.value[type]);\n      this.applyType(type, false);\n    }\n  }\n\n  /**\n   * Applies the change of the type (manual, constant or variable) to the chart\n   * data. In the next render this component will show a different section.\n   * @param {string} type\n   * @param {boolean} initial Whether the method can write state through\n   * this.state, if not, then uses this.setState. React throws an error in the\n   * browser console when using this.setState inside a component constructor,\n   * even indirectly.\n   */\n  applyType(type, initial) {\n    switch (type) {\n      case 'constant':\n        this.updateCategoricalsInData({\n          'marker.colorsrc': null,\n          'marker.colorscale': null,\n          'marker.showscale': null,\n          'marker.categoricalaxis': null,\n          'meta.manualcolor': null,\n        });\n        if (initial) {\n          if (typeof this.state !== 'object') {\n            this.setState({});\n          }\n          this.setState({ colorScale: null });\n        } else {\n          this.setState({ colorscale: null });\n        }\n        break;\n\n      case 'manual':\n        this.updateCategoricalsInData({\n          'marker.colorscale':\n            this.props.container?.marker?.colorscale ||\n            config.settings.plotlyChartsColorScale,\n          'marker.categoricalaxis':\n            this.props.container?.marker?.categoricalaxis || 'x',\n          'meta.manualcolor': this.props.container?.meta?.manualcolor || {},\n        });\n        this.rebuildColorPickers();\n        break;\n\n      case 'variable':\n        this.updateCategoricalsInData({\n          'marker.color': null,\n          'marker.colorsrc': null,\n          'marker.colorscale': null,\n          'marker.categoricalaxis': null,\n          'meta.manualcolor': null,\n        });\n        break;\n\n      default:\n        // console.error('Unknown marker color type', type);\n        return;\n    }\n  }\n\n  setColor(inputValue) {\n    const { type } = this.state;\n\n    if (type === 'manual') {\n      // console.error(\n      //   'When type is set to \"manual\", setColor should not be called.',\n      // );\n      return;\n    }\n\n    this.setState(\n      type === 'constant'\n        ? { value: { constant: inputValue } }\n        : { value: { variable: inputValue } },\n    );\n    this.props.updatePlot(inputValue);\n  }\n\n  setColorScale(inputValue) {\n    this.setState({ colorscale: inputValue });\n    this.context.updateContainer({ 'marker.colorscale': inputValue });\n  }\n\n  isMultiValued() {\n    return (\n      this.props.multiValued ||\n      (Array.isArray(this.props.fullValue) &&\n        this.props.fullValue.includes(MULTI_VALUED)) ||\n      (this.props.container.marker &&\n        this.props.container.marker.colorscale &&\n        this.props.container.marker.colorscale === MULTI_VALUED) ||\n      (this.props.container.marker &&\n        this.props.container.marker.colorsrc &&\n        this.props.container.marker.colorsrc === MULTI_VALUED) ||\n      (this.props.container.marker &&\n        this.props.container.marker.color &&\n        Array.isArray(this.props.container.marker.color) &&\n        this.props.container.marker.color.includes(MULTI_VALUED))\n    );\n  }\n\n  onConstantColorOptionChange(value) {\n    this.setState({\n      selectedConstantColorOption: value,\n    });\n  }\n\n  renderConstantControls() {\n    const _ = this.context.localize;\n    return (\n      <MultiColorPicker\n        attr=\"marker.color\"\n        multiColorMessage={_(\n          'Each trace will be colored according to the selected colorscale.',\n        )}\n        singleColorMessage={_(\n          'All traces will be colored in the the same color.',\n        )}\n        setColor={this.setColor}\n        setColorScale={this.setColorScale}\n        onConstantColorOptionChange={this.onConstantColorOptionChange}\n        parentSelectedConstantColorOption={\n          this.state.selectedConstantColorOption\n        }\n      />\n    );\n  }\n\n  /**\n   *  When the selected categorical axis is changed.\n   */\n  handleAxisChange = (opt) => {\n    this.updateCategoricalsInData({\n      'marker.categoricalaxis': opt,\n      // 'marker.colorscale': defaultColorscale,\n      // 'meta.manualcolor': ,\n    });\n    this.rebuildColorPickers();\n  };\n\n  factoryHandleColorPickerChange = (val, cs) => {\n    let val2 = val;\n\n    return (newColor) => {\n      this.updateCategoricalsInData({\n        'meta.manualcolor': {\n          ...(this.props.container?.meta?.manualcolor || {}),\n          [val2]: cs.indexOf(newColor.hex) + 1,\n        },\n      });\n      this.rebuildColorPickers();\n    };\n  };\n\n  handleColorscaleChange = (cs) => {\n    this.updateCategoricalsInData({\n      'marker.colorscale': cs,\n    });\n    this.rebuildColorPickers();\n  };\n\n  /**\n   * Requires categorical axis and categorical colorscale defined.\n   */\n  rebuildColorPickers = () => {\n    if (this.props.container.type !== 'bar') {\n      this.updateCategoricalsInData({\n        'marker.colorscale': null,\n        'meta.manualcolor': null,\n        'marker.categoricalaxis': null,\n      });\n      return;\n    }\n\n    const colors = {};\n\n    const data = this.props.container[\n      this.props.container.marker.categoricalaxis\n    ];\n\n    // the colorscale array\n    const cs = this.props.container.marker?.colorscale;\n\n    // if a color scale is not yet set\n    if (!cs) {\n      return;\n    }\n\n    // for each unique value\n    loadash.uniq(data).forEach((x, i) => {\n      // if the current unique value from the axis has a color\n      if (\n        this.props.container.meta.manualcolor[x] &&\n        this.props.container.meta.manualcolor[x] > 0\n      ) {\n        colors[x] = this.props.container.meta.manualcolor[x];\n        return;\n      }\n\n      // if not, use an increasing integer\n      if (i < cs.length) {\n        colors[x] = i + 1;\n        return;\n      }\n\n      // if the increasing integer is not valid, set a random valid index\n      const rnd = Math.floor(Math.random() * cs.length) + 1;\n      colors[x] = rnd;\n    });\n\n    this.updateCategoricalsInData({\n      'meta.manualcolor': colors,\n    });\n  };\n\n  renderManualControls() {\n    const _ = this.context.localize;\n\n    const options = [\n      { label: _('X Axis'), value: 'x' },\n      { label: _('Y axis'), value: 'y' },\n    ];\n\n    const categoricalColorscale = this.props.container?.marker?.colorscale;\n\n    return (\n      <>\n        <RadioBlocks\n          options={options}\n          activeOption={this.props.container?.marker?.categoricalaxis || null}\n          onOptionChange={this.handleAxisChange}\n        />\n        {this.props.container?.marker?.categoricalaxis && (\n          <>\n            <ColorscalePickerWidget\n              selected={categoricalColorscale}\n              onColorscaleChange={this.handleColorscaleChange.bind(this)}\n            />\n            {Object.entries(this.props.container?.meta?.manualcolor || {}).map(\n              ([val, color], i) => {\n                return (\n                  <ColorPickerField\n                    key={val}\n                    name={val}\n                    color={color}\n                    colorscale={categoricalColorscale}\n                    onChange={(newColor) => {\n                      this.factoryHandleColorPickerChange(\n                        val,\n                        categoricalColorscale,\n                      ).bind(this)(newColor);\n                    }}\n                  />\n                );\n              },\n            )}\n          </>\n        )}\n      </>\n    );\n  }\n\n  renderVariableControls() {\n    const multiValued =\n      this.props.container &&\n      this.props.container.marker &&\n      ((this.props.container.marker.colorscale &&\n        this.props.container.marker.colorscale === MULTI_VALUED) ||\n        (this.props.container.marker.colorsrc &&\n          this.props.container.marker.colorsrc === MULTI_VALUED));\n\n    const colorscaleState = this.state.colorscale;\n    const colorscaleProps = this.props.container?.marker?.colorscale;\n\n    const activeColorscale = colorscaleState\n      ? colorscaleState\n      : colorscaleProps;\n\n    return (\n      <Field multiValued={multiValued}>\n        <DataSelector suppressMultiValuedMessage attr=\"marker.color\" />\n        {this.props.container.marker &&\n        this.props.container.marker.colorscale === MULTI_VALUED ? null : (\n          <React.Fragment>\n            <CustomMarkerColorscales\n              _={this.props._}\n              handleChange={this.setColorScale}\n              colorscale={activeColorscale}\n            />\n          </React.Fragment>\n        )}\n      </Field>\n    );\n  }\n\n  render() {\n    const { attr } = this.props;\n    const { localize: _, container } = this.context;\n\n    // TO DO: https://github.com/plotly/react-chart-editor/issues/654\n    const noSplitsPresent =\n      container &&\n      (!container.transforms ||\n        !container.transforms.filter((t) => t.type === 'groupby').length);\n\n    if (noSplitsPresent) {\n      const { type } = this.state;\n      const options = [\n        { label: _('Manual'), value: 'manual' },\n        { label: _('Constant'), value: 'constant' },\n        { label: _('Variable'), value: 'variable' },\n      ];\n\n      // TODO: the minimum width is too big, there should be a margin to the\n      // right of Variable that should be like the other fields with 100% width\n      return (\n        <>\n          <Field {...this.props} attr={attr}>\n            <Field multiValued={this.isMultiValued() && !this.state.type}>\n              <RadioBlocks\n                options={options}\n                activeOption={type}\n                onOptionChange={this.setType}\n              />\n\n              {!type ? null : (\n                <Info>\n                  {type === 'constant'\n                    ? _('All points in a trace are colored in the same color.')\n                    : type === 'variable'\n                    ? _('Each point in a trace is colored according to data.')\n                    : _(\n                        'Each point in a trace is colored according to the selected axis and the below manually set colors.',\n                      )}\n                </Info>\n              )}\n            </Field>\n\n            {type === 'manual' && this.renderManualControls()}\n            {type === 'constant' && this.renderConstantControls()}\n            {type === 'variable' && this.renderVariableControls()}\n          </Field>\n          {type === 'constant' ? null : (\n            <>\n              <Radio\n                label={_('Colorscale Direction')}\n                attr=\"marker.reversescale\"\n                options={[\n                  { label: _('Normal'), value: false },\n                  { label: _('Reversed'), value: true },\n                ]}\n              />\n              <Radio\n                label={_('Color Bar')}\n                attr=\"marker.showscale\"\n                options={[\n                  { label: _('Show'), value: true },\n                  { label: _('Hide'), value: false },\n                ]}\n              />\n              <VisibilitySelect\n                label={_('Colorscale Range')}\n                attr=\"marker.cauto\"\n                options={[\n                  { label: _('Auto'), value: true },\n                  { label: _('Custom'), value: false },\n                ]}\n                showOn={false}\n                defaultOpt={true}\n              >\n                <Numeric label={_('Min')} attr=\"marker.cmin\" />\n                <Numeric label={_('Max')} attr=\"marker.cmax\" />\n              </VisibilitySelect>\n            </>\n          )}\n        </>\n      );\n    }\n\n    return (\n      <Field {...this.props} attr={attr}>\n        {this.renderConstantControls()}\n      </Field>\n    );\n  }\n}\n\nUnconnectedMarkerColor.propTypes = {\n  fullValue: PropTypes.any,\n  updatePlot: PropTypes.func,\n  ...Field.propTypes,\n};\n\nUnconnectedMarkerColor.contextTypes = {\n  localize: PropTypes.func,\n  updateContainer: PropTypes.func,\n  traceIndexes: PropTypes.array,\n  container: PropTypes.object,\n};\n\nUnconnectedMarkerColor.displayName = 'UnconnectedMarkerColor';\n\nexport default connectToContainer(UnconnectedMarkerColor);\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}