{"ast":null,"code":"import _defineProperty from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _extends from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/extends.js\";\nimport _slicedToArray from \"/home/tooler/code/work/forests-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _isEqual from \"lodash/isEqual\";\nvar _jsxFileName = \"/home/tooler/code/work/forests-frontend/src/develop/volto-taxonomy/src/ControlPanel/TaxonomyData.jsx\",\n  _this = this,\n  _s = $RefreshSig$();\nvar __jsx = React.createElement;\nimport React from 'react';\nimport { v4 as uuid } from 'uuid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Segment, Ref, Button, Table } from 'semantic-ui-react';\nimport { getTaxonomy, updateTaxonomy } from '../actions';\nimport { Icon } from '@plone/volto/components';\nimport { DragDropList } from '@plone/volto/components';\n\n// import deleteSVG from '@plone/volto/icons/delete.svg';\nimport dragSVG from '@plone/volto/icons/drag.svg';\nimport TermInput from './TermInput';\nvar fixData = function fixData(data) {\n  Object.keys(data.order || {}).forEach(function (lang) {\n    var _data$data;\n    data.order[lang].length = (_data$data = data.data) === null || _data$data === void 0 ? void 0 : _data$data[lang].length;\n  });\n  return data;\n};\nvar TaxonomyData = function TaxonomyData(props) {\n  _s();\n  var _taxonomy$data;\n  var id = props.id;\n  var url = \"/@taxonomy/\".concat(id);\n  var dispatch = useDispatch();\n  var dataLoaded = React.useRef(false);\n  var _React$useState = React.useState({}),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    state = _React$useState2[0],\n    setState = _React$useState2[1];\n  var taxonomy = useSelector(function (state) {\n    return state.taxonomy;\n  });\n  var request = taxonomy.get;\n  var _ref = request || {},\n    loading = _ref.loading,\n    loaded = _ref.loaded,\n    error = _ref.error;\n  var data = taxonomy === null || taxonomy === void 0 ? void 0 : (_taxonomy$data = taxonomy.data) === null || _taxonomy$data === void 0 ? void 0 : _taxonomy$data[url];\n  React.useEffect(function () {\n    if (id && !loaded && !loading) {\n      var action = getTaxonomy(url);\n      dispatch(action);\n    }\n    if (data && !_isEqual(data, state) && !dataLoaded.current) {\n      dataLoaded.current = true;\n      setState(fixData(data));\n    }\n  }, [dispatch, url, id, state, data, loading, loaded, error]);\n  var langs = ['en'];\n  var childList = [];\n  if (state.data) {\n    var _state$data;\n    // langs = Object.keys(state?.data || {}).sort();\n    childList = Array(state === null || state === void 0 ? void 0 : (_state$data = state.data) === null || _state$data === void 0 ? void 0 : _state$data[langs[0]].length).fill(0).map(function (_, i) {\n      return [i.toString(), i.toString()];\n    });\n  }\n  return __jsx(Segment.Group, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, __jsx(Segment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, __jsx(Table, {\n    compact: true,\n    singleLine: true,\n    attached: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, __jsx(Table.Header, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, __jsx(Table.Row, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  }, __jsx(Table.HeaderCell, {\n    textAlign: \"left\",\n    width: \"1\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 15\n    }\n  }), langs.map(function (lang) {\n    return __jsx(Table.HeaderCell, {\n      textAlign: \"left\",\n      key: lang,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }\n    }, lang);\n  }), __jsx(Table.HeaderCell, {\n    textAlign: \"right\",\n    width: \"1\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 15\n    }\n  }))), __jsx(DragDropList, {\n    childList: childList,\n    as: \"tbody\",\n    onMoveItem: function onMoveItem(result) {\n      var source = result.source,\n        destination = result.destination;\n      var ns = JSON.parse(JSON.stringify(state));\n      Object.keys(ns.order).forEach(function (lang) {\n        var x = ns.order[lang][source.index];\n        var y = ns.order[lang][destination.index];\n        ns.order[lang][destination.index] = x;\n        ns.order[lang][source.index] = y;\n      });\n      setState(ns);\n      return true;\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }, function (_ref2) {\n    var index = _ref2.index,\n      draginfo = _ref2.draginfo;\n    return __jsx(Ref, {\n      innerRef: draginfo.innerRef,\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }\n    }, __jsx(Table.Row, _extends({}, draginfo.draggableProps, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 19\n      }\n    }), __jsx(Table.Cell, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }\n    }, __jsx(\"div\", _extends({}, draginfo.dragHandleProps, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 23\n      }\n    }), __jsx(Icon, {\n      name: dragSVG,\n      size: \"18px\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 25\n      }\n    }))), langs.map(function (lang) {\n      var i = state.order[lang][index];\n      var entry = state.data[lang][i];\n      return __jsx(Table.Cell, {\n        key: lang,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 25\n        }\n      }, __jsx(TermInput, {\n        entry: entry,\n        onChange: function onChange(id, value) {\n          var newState = _objectSpread({}, state);\n          newState.data[lang][i] = _objectSpread(_objectSpread({}, newState.data[lang][i]), {}, _defineProperty({}, id, value));\n          setState(newState);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 27\n        }\n      }));\n    }), __jsx(Table.Cell, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }\n    })));\n  }))), __jsx(Segment, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }\n  }, __jsx(Button, {\n    onClick: function onClick() {\n      var newState = _objectSpread({}, state);\n      Object.keys(state.data).forEach(function (lang) {\n        newState.data[lang].push({\n          token: uuid(),\n          title: '...'\n        });\n        newState.order[lang].push(newState.order[lang].length);\n      });\n      setState(newState);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }\n  }, \"Add new entry\"), __jsx(Button, {\n    floated: \"right\",\n    onClick: function onClick() {\n      dispatch(updateTaxonomy(url, state));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 9\n    }\n  }, \"Save\")));\n};\n_s(TaxonomyData, \"/gUWyDCPD1H+w4/CKb42Z408Obk=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = TaxonomyData;\nexport default TaxonomyData;\n\n// export default DragDropContext(HTML5Backend)(TaxonomyData);\n// Input, Dropdown\n// import backSVG from '@plone/volto/icons/back.svg';\n// import cutSVG from '@plone/volto/icons/cut.svg';\n// import copySVG from '@plone/volto/icons/copy.svg';\n// import tagSVG from '@plone/volto/icons/tag.svg';\n// import renameSVG from '@plone/volto/icons/rename.svg';\n// import semaphoreSVG from '@plone/volto/icons/semaphore.svg';\n// import uploadSVG from '@plone/volto/icons/upload.svg';\n// import propertiesSVG from '@plone/volto/icons/properties.svg';\n// import pasteSVG from '@plone/volto/icons/paste.svg';\n// import zoomSVG from '@plone/volto/icons/zoom.svg';\n// import checkboxUncheckedSVG from '@plone/volto/icons/checkbox-unchecked.svg';\n// import checkboxCheckedSVG from '@plone/volto/icons/checkbox-checked.svg';\n// import checkboxIndeterminateSVG from '@plone/volto/icons/checkbox-indeterminate.svg';\n// import configurationSVG from '@plone/volto/icons/configuration-app.svg';\n// import sortDownSVG from '@plone/volto/icons/sort-down.svg';\n// import sortUpSVG from '@plone/volto/icons/sort-up.svg';\n// import downKeySVG from '@plone/volto/icons/down-key.svg';\n// import moreSVG from '@plone/volto/icons/more.svg';\n// import { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\n// import { DragDropContext } from 'react-dnd';\n// import HTML5Backend from 'react-dnd-html5-backend';\nvar _c;\n$RefreshReg$(_c, \"TaxonomyData\");","map":{"version":3,"names":["React","v4","uuid","useDispatch","useSelector","Segment","Ref","Button","Table","getTaxonomy","updateTaxonomy","Icon","DragDropList","dragSVG","TermInput","fixData","data","Object","keys","order","forEach","lang","length","TaxonomyData","props","id","url","dispatch","dataLoaded","useRef","useState","state","setState","taxonomy","request","get","loading","loaded","error","useEffect","action","current","langs","childList","Array","fill","map","_","i","toString","result","source","destination","ns","JSON","parse","stringify","x","index","y","draginfo","innerRef","draggableProps","dragHandleProps","entry","value","newState","push","token","title"],"sources":["/home/tooler/code/work/forests-frontend/src/develop/volto-taxonomy/src/ControlPanel/TaxonomyData.jsx"],"sourcesContent":["import React from 'react';\nimport { isEqual } from 'lodash';\nimport { v4 as uuid } from 'uuid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Segment, Ref, Button, Table } from 'semantic-ui-react';\nimport { getTaxonomy, updateTaxonomy } from '../actions';\nimport { Icon } from '@plone/volto/components';\nimport { DragDropList } from '@plone/volto/components';\n\n// import deleteSVG from '@plone/volto/icons/delete.svg';\nimport dragSVG from '@plone/volto/icons/drag.svg';\n\nimport TermInput from './TermInput';\n\nconst fixData = (data) => {\n  Object.keys(data.order || {}).forEach((lang) => {\n    data.order[lang].length = data.data?.[lang].length;\n  });\n  return data;\n};\n\nconst TaxonomyData = (props) => {\n  const { id } = props;\n  const url = `/@taxonomy/${id}`;\n  const dispatch = useDispatch();\n  const dataLoaded = React.useRef(false);\n  const [state, setState] = React.useState({});\n  const taxonomy = useSelector((state) => state.taxonomy);\n  const request = taxonomy.get;\n  const { loading, loaded, error } = request || {};\n  const data = taxonomy?.data?.[url];\n\n  React.useEffect(() => {\n    if (id && !loaded && !loading) {\n      const action = getTaxonomy(url);\n      dispatch(action);\n    }\n    if (data && !isEqual(data, state) && !dataLoaded.current) {\n      dataLoaded.current = true;\n      setState(fixData(data));\n    }\n  }, [dispatch, url, id, state, data, loading, loaded, error]);\n\n  let langs = ['en'];\n  let childList = [];\n  if (state.data) {\n    // langs = Object.keys(state?.data || {}).sort();\n    childList = Array(state?.data?.[langs[0]].length)\n      .fill(0)\n      .map((_, i) => [i.toString(), i.toString()]);\n  }\n\n  return (\n    <Segment.Group>\n      <Segment>\n        <Table compact singleLine attached>\n          <Table.Header>\n            <Table.Row>\n              <Table.HeaderCell textAlign=\"left\" width=\"1\"></Table.HeaderCell>\n              {langs.map((lang) => (\n                <Table.HeaderCell textAlign=\"left\" key={lang}>\n                  {lang}\n                </Table.HeaderCell>\n              ))}\n              <Table.HeaderCell textAlign=\"right\" width=\"1\"></Table.HeaderCell>\n            </Table.Row>\n          </Table.Header>\n          <DragDropList\n            childList={childList}\n            as=\"tbody\"\n            onMoveItem={(result) => {\n              const { source, destination } = result;\n              const ns = JSON.parse(JSON.stringify(state));\n              Object.keys(ns.order).forEach((lang) => {\n                const x = ns.order[lang][source.index];\n                const y = ns.order[lang][destination.index];\n                ns.order[lang][destination.index] = x;\n                ns.order[lang][source.index] = y;\n              });\n              setState(ns);\n              return true;\n            }}\n          >\n            {({ index, draginfo }) => {\n              return (\n                <Ref innerRef={draginfo.innerRef} key={index}>\n                  <Table.Row {...draginfo.draggableProps}>\n                    <Table.Cell>\n                      <div {...draginfo.dragHandleProps}>\n                        <Icon name={dragSVG} size=\"18px\" />\n                      </div>\n                    </Table.Cell>\n                    {langs.map((lang) => {\n                      const i = state.order[lang][index];\n                      const entry = state.data[lang][i];\n                      return (\n                        <Table.Cell key={lang}>\n                          <TermInput\n                            entry={entry}\n                            onChange={(id, value) => {\n                              const newState = { ...state };\n                              newState.data[lang][i] = {\n                                ...newState.data[lang][i],\n                                [id]: value,\n                              };\n\n                              setState(newState);\n                            }}\n                          />\n                        </Table.Cell>\n                      );\n                    })}\n                    <Table.Cell>\n                      {/* <Button basic onClick={() => {}}>\n                        <Icon\n                          className=\"circled\"\n                          name={deleteSVG}\n                          size=\"12px\"\n                        />\n                      </Button> */}\n                    </Table.Cell>\n                  </Table.Row>\n                </Ref>\n              );\n            }}\n          </DragDropList>\n        </Table>\n      </Segment>\n      <Segment>\n        <Button\n          onClick={() => {\n            const newState = { ...state };\n            Object.keys(state.data).forEach((lang) => {\n              newState.data[lang].push({ token: uuid(), title: '...' });\n              newState.order[lang].push(newState.order[lang].length);\n            });\n            setState(newState);\n          }}\n        >\n          Add new entry\n        </Button>\n        <Button\n          floated=\"right\"\n          onClick={() => {\n            dispatch(updateTaxonomy(url, state));\n          }}\n        >\n          Save\n        </Button>\n      </Segment>\n    </Segment.Group>\n  );\n};\n\nexport default TaxonomyData;\n\n// export default DragDropContext(HTML5Backend)(TaxonomyData);\n// Input, Dropdown\n// import backSVG from '@plone/volto/icons/back.svg';\n// import cutSVG from '@plone/volto/icons/cut.svg';\n// import copySVG from '@plone/volto/icons/copy.svg';\n// import tagSVG from '@plone/volto/icons/tag.svg';\n// import renameSVG from '@plone/volto/icons/rename.svg';\n// import semaphoreSVG from '@plone/volto/icons/semaphore.svg';\n// import uploadSVG from '@plone/volto/icons/upload.svg';\n// import propertiesSVG from '@plone/volto/icons/properties.svg';\n// import pasteSVG from '@plone/volto/icons/paste.svg';\n// import zoomSVG from '@plone/volto/icons/zoom.svg';\n// import checkboxUncheckedSVG from '@plone/volto/icons/checkbox-unchecked.svg';\n// import checkboxCheckedSVG from '@plone/volto/icons/checkbox-checked.svg';\n// import checkboxIndeterminateSVG from '@plone/volto/icons/checkbox-indeterminate.svg';\n// import configurationSVG from '@plone/volto/icons/configuration-app.svg';\n// import sortDownSVG from '@plone/volto/icons/sort-down.svg';\n// import sortUpSVG from '@plone/volto/icons/sort-up.svg';\n// import downKeySVG from '@plone/volto/icons/down-key.svg';\n// import moreSVG from '@plone/volto/icons/more.svg';\n// import { FormattedMessage, defineMessages, injectIntl } from 'react-intl';\n// import { DragDropContext } from 'react-dnd';\n// import HTML5Backend from 'react-dnd-html5-backend';\n"],"mappings":"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"},"metadata":{"react-intl":{"messages":[]}},"sourceType":"module","externalDependencies":[]}